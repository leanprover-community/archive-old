[
    {
        "content": "<p>Dear All,</p>\n<p>is this lemma already in mathlib?  I could not find it.  Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.add_order_of_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_order_of</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 295555789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661585182
    },
    {
        "content": "<p>Maybe, because of the definitions it also holds for <code>n = 0</code>.</p>",
        "id": 295555987,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661585331
    },
    {
        "content": "<p>I can't find it.</p>",
        "id": 295559263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661587586
    },
    {
        "content": "<p>Johan, thanks for confirming!  It seems that there is little API for <code>(add_)order_of_element</code> in general, besides what is in the file where they are defined.  In particular, even the relationship between additive order of 1 in a semiring and its interactions with the various <code>char</code>s seems not in mathlib.</p>",
        "id": 295559771,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661587879
    },
    {
        "content": "<p>I do not dislike this proof, but can someone find a more direct argument?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">char_p_eq_add_order_of_one</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_order_of</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.smul_one_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">add_order_of_dvd_iff_nsmul_eq_zero</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.add_order_of_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_order_of</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">zmod.char_p</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">cp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">char_p_eq_add_order_of_one</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">co</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.dvd_right_iff_eq.mp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">co</span><span class=\"o\">]),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 295560560,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661588379
    },
    {
        "content": "<p>Don't we have a lemma that if <code>char_p R a</code> and <code>char_p R b</code> then <code>a = b</code>?</p>",
        "id": 295560808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661588513
    },
    {
        "content": "<p>Good point, I do not know!</p>",
        "id": 295560881,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661588539
    },
    {
        "content": "<p>like <code>char_p</code> injective, or something?</p>",
        "id": 295560896,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661588550
    },
    {
        "content": "<p><code>char_p.unique</code> I'd say.</p>",
        "id": 295560969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661588604
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.eq\">docs#char_p.eq</a>?</p>",
        "id": 295560992,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661588616
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 295561563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661588930
    },
    {
        "content": "<p>Also, you could generalize to anything coprime with <code>n</code>, and then prove the general statement that <code>add_order_of a = n/gcd a n</code>.</p>",
        "id": 295562260,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661589211
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16277\">#16277</a></p>",
        "id": 295672698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661668340
    }
]