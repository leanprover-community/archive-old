[
    {
        "content": "<p>Hello! I wanna prove a simple algebra exercise like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.gptf</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">54</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"mi\">54</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_right_inj</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and my first attemp is to multiply b at both end, but obviously lean is not happy and it requires</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">54</span> <span class=\"bp\">/</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">left_cancel_semigroup</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">54</span> <span class=\"bp\">/</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">54</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>do you have any hint of that? Thank you a lot!</p>",
        "id": 236741263,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1619728686
    },
    {
        "content": "<p>Your problem is that <code>mul_right_inj</code> is a theorem about groups (or more precisely about a structure which is slightly weaker than a group) and it says that you can always cancel anything.</p>",
        "id": 236742596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619729324
    },
    {
        "content": "<p>You will need a lemma about fields (or maybe integral domains or something) saying that you can cancel anything as long as it's nonzero.</p>",
        "id": 236742643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619729351
    },
    {
        "content": "<p>I <em>think</em> it might be <code>mul_right_inj'</code> that you want</p>",
        "id": 236742713,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1619729387
    },
    {
        "content": "<p>but actually it would be easier just to work backwards and rewrite h2 on the goal -- often in Lean it's easier to go backwards than forwards.</p>",
        "id": 236742842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619729427
    },
    {
        "content": "<p><code>have key : whatyouhave := congr_fun (* b) h</code> should also produce <code>key</code></p>",
        "id": 236743379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619729680
    },
    {
        "content": "<p>A style issue: in Lean we prefer <code>&lt;</code> always instead of <code>&gt;</code> -- otherwise we have to write every lemma about inequalities twice. Your hypothesis <code>h₁</code> should be <code>0 &lt; b</code>, it will be easier to use than <code>b &gt; 0</code>.</p>",
        "id": 236743503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619729738
    },
    {
        "content": "<p>Thank you for your help and advice! I finally managed to get it work like this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">54</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key₃</span> <span class=\"o\">:</span>  <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">54</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eq_div_iff</span> <span class=\"n\">key₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236799147,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1619769493
    },
    {
        "content": "<p>Here's my solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">54</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_div_iff</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236799544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619769704
    },
    {
        "content": "<p>(generated independently but I now realise it's exactly the same!). My instinct is not to make new <code>key</code> variables because they just clutter things up.</p>",
        "id": 236799673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619769763
    },
    {
        "content": "<p>that looks good! learnt a lot</p>",
        "id": 236800127,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1619769997
    }
]