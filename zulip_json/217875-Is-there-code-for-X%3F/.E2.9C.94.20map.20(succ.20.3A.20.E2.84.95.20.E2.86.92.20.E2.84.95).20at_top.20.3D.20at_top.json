[
    {
        "content": "<p>Is there already some version of the following lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">order.filter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span>  <span class=\"n\">finset</span> <span class=\"n\">filter</span> <span class=\"n\">nat</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat.map_succ_at_top</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"bp\">=</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">map_at_top_eq_of_gc</span> <span class=\"n\">pred</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">succ_le_succ</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_succ_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">one_le_iff_ne_zero.mp</span> <span class=\"n\">hb</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">pred_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">succ_le_succ_iff</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_succ_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">one_le_iff_ne_zero.mp</span> <span class=\"n\">hb</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pred_succ</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Would this be useful to have somewhere (where?) in mathlib?</p>",
        "id": 286757731,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1655709194
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map_add_at_top_eq_nat\">docs#filter.map_add_at_top_eq_nat</a>  This is fairly easy to find if you search for <code>filter.map_at_top</code>.</p>",
        "id": 286759237,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655710250
    },
    {
        "content": "<p>great, thanks!</p>",
        "id": 286759283,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1655710299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> has marked this topic as resolved.</p>",
        "id": 286759285,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655710301
    },
    {
        "content": "<p>Maybe there's an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> there: <code>map</code> is pretty seldom used for filters, but what is really useful all the time is <code>tendsto</code>. Are you sure <code>tendsto</code> would not be sufficient for your needs? (Of course, the <code>map</code> version is also true in your case).</p>",
        "id": 286760781,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1655711355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> yes it was exactly that. For my use case, I actually needed to use<code>filter.tendsto_add_at_top_iff_nat 1</code>...</p>",
        "id": 286784955,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1655726679
    }
]