[
    {
        "content": "<p>Hi,<br>\nI need to know that the product of two locally finite graphs is locally finite, as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Glf</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Glf'</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite</span> <span class=\"n\">G'</span><span class=\"o\">]:</span> <span class=\"n\">locally_finite</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">□</span> <span class=\"n\">G'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neighbor_set</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">∪</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V'</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">G'.neighbor_set</span> <span class=\"n\">g'</span><span class=\"o\">)),</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_neighbor_set</span><span class=\"o\">,</span> <span class=\"n\">box_prod_adj</span><span class=\"o\">,</span> <span class=\"n\">mem_union_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">,</span>\n               <span class=\"n\">exists_eq_right_right</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">and_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_eq_right_right</span><span class=\"o\">],</span><span class=\"n\">tauto</span><span class=\"o\">,},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.finite.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.finite.union</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.finite.image</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.finite.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Glf</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Glf'</span> <span class=\"n\">g'</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I couldn't fid that anywhere. Did I miss something?</p>",
        "id": 297716138,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662619304
    },
    {
        "content": "<p>Everything about the box product is currently in <a href=\"https://tqft.net/mathlib/combinatorics/simple_graph/prod\">file#combinatorics/simple_graph/prod</a> and <a href=\"https://tqft.net/mathlib/combinatorics/simple_graph/hasse\">file#combinatorics/simple_graph/hasse</a>, so my guess is no!</p>",
        "id": 297720982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662621639
    },
    {
        "content": "<p>You can however provide this constructively using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_equiv\">docs#fintype.of_equiv</a>.</p>",
        "id": 297721061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662621677
    },
    {
        "content": "<p>because the détour by <code>set.finite</code> breaks constructiv(ity|ness), I assume?</p>",
        "id": 297723059,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662622591
    },
    {
        "content": "<p>Anyway, thanks for the confirmation, this would be a good exercise PR for me …</p>\n<p>Actually, I don't really see where you'd use <code>fintype_of_equiv</code> ? Do you mean decomposing <code>subtype $ (G □ G').neighbor_set ⟨g,g'⟩</code> first into a disjoint sum types, and doing what I did in <code>set V×V'</code> instead at the type level?</p>",
        "id": 297723162,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662622637
    }
]