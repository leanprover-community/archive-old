[
    {
        "content": "<p>What is the best way of proving this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I've tried to play arund with <code>data.fin.interval</code>, but the results are not stated using <code>filter</code>.</p>",
        "id": 260300072,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636044613
    },
    {
        "content": "<p>Hmm... that sounds like a job for me.</p>",
        "id": 260300718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636044833
    },
    {
        "content": "<p>I thought writing directly to you :)<br>\nIn any case it is surely not difficult, but I don't see a one line proof.</p>",
        "id": 260300992,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636044918
    },
    {
        "content": "<p>one step should probably be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_sdiff\">docs#finset.card_sdiff</a>. The other part probably involves some reasoning about the map <code>fin i -&gt; fin n</code>.</p>",
        "id": 260301021,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636044933
    },
    {
        "content": "<p>I believe there is also an off-by-1 error in the original post</p>",
        "id": 260301062,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636044950
    },
    {
        "content": "<p>We can add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fin.card_Ioi</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 260301064,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636044951
    },
    {
        "content": "<p>It will be direct from the result about <code>card_Ioc</code> adn then your lemma boils down to showing <code>finset.univ.filter (λ j, i &lt; j) = Ioi i</code>, which <code>ext, simp</code> should do.</p>",
        "id": 260301304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636045045
    },
    {
        "content": "<p>Where's <code>fin.order_top</code>?</p>",
        "id": 260302125,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636045318
    },
    {
        "content": "<p>Write <code>n+1</code></p>",
        "id": 260302334,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636045392
    },
    {
        "content": "<p>I was fighting with the same problem</p>",
        "id": 260302353,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636045400
    },
    {
        "content": "<p>I hate that <code>fin 0</code> is empty</p>",
        "id": 260302377,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636045410
    },
    {
        "content": "<p>Uh, what is the instance called?</p>",
        "id": 260302435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636045436
    },
    {
        "content": "<p>from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.bounded_lattice\">docs#fin.bounded_lattice</a>, right?</p>",
        "id": 260302499,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636045448
    },
    {
        "content": "<p>Ah yeah, of course <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 260302521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636045458
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.interval</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">fin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ioi_eq_finset_subtype</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ioi</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_lt</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_Ioi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ioi_eq_finset_subtype</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">,</span> <span class=\"n\">mem_Ioo</span><span class=\"o\">,</span> <span class=\"n\">filter_true_of_mem</span><span class=\"o\">,</span> <span class=\"n\">nat.card_Ioo</span><span class=\"o\">,</span> <span class=\"n\">card_subtype</span><span class=\"o\">,</span>\n    <span class=\"n\">implies_true_iff</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.one_le_iff_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">is_lt</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_eq_iff_eq_add</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_add_comm</span> <span class=\"o\">(</span><span class=\"n\">is_le</span> <span class=\"n\">a</span><span class=\"o\">)],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ioi_eq_filter</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Ioi</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filter_gt_card</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Ioi_eq_filter</span><span class=\"o\">,</span> <span class=\"n\">card_Ioi</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">fin</span>\n</code></pre></div>",
        "id": 260309670,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636048596
    },
    {
        "content": "<p>Ahah! Sorry, Riccardo. <a href=\"https://github.com/leanprover-community/mathlib/issues/10168\">#10168</a></p>",
        "id": 260311060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636049217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, to be sure you see that before opening a PR.</p>",
        "id": 260312013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636049576
    },
    {
        "content": "<p>No problem!</p>",
        "id": 260312087,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636049621
    },
    {
        "content": "<p>Aaaand, you have it!</p>",
        "id": 260352679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636071729
    }
]