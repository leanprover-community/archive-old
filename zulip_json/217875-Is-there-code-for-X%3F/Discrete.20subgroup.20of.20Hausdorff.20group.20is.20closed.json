[
    {
        "content": "<p>I just wanted this result and discovered it seems to be missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group</span>\n\n<span class=\"c1\">-- TODO Bourbaki GT III ¬ß 2.2, Proposition 5 (page 227 of English translation).</span>\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">subgroup.is_closed_of_discrete</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">discrete_topology</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 294058950,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660822778
    },
    {
        "content": "<p>I won't have time to fill it in for at least a week so I thought I'd try see if I can tempt someone else to do it :-)</p>",
        "id": 294059063,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660822814
    },
    {
        "content": "<p>Indeed I don't think we have this..</p>",
        "id": 294059239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660822919
    },
    {
        "content": "<p>What a nice timing, I‚Äôm taking a plane tomorrow so I was looking for something self-contained to do in the plane, and this looks perfect</p>",
        "id": 294077063,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660829299
    },
    {
        "content": "<p>Too late Anatole:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.uniform_group</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">uniformity</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">subgroup.is_closed_of_discrete</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">discrete_topology</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V_in</span><span class=\"o\">,</span> <span class=\"n\">VH</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"n\">V</span> <span class=\"bp\">‚à©</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- This should be a lemma about elements of a discrete set</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"c1\">-- Don't we have a lemma for this?</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_nhds_discrete</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">set.mem_singleton</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"c1\">-- Now everything is obvious...</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhds_subtype</span><span class=\"o\">,</span> <span class=\"n\">subgroup.coe_one</span><span class=\"o\">,</span> <span class=\"n\">mem_comap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V_in</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V_in</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eq_singleton_iff_unique_mem.mpr</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">mem_of_mem_nhds</span> <span class=\"n\">V_in</span><span class=\"o\">,</span> <span class=\"n\">H.one_mem</span><span class=\"o\">‚ü©,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">y</span> <span class=\"o\">‚ü®</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hy'</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subset_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy'</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">H.one_mem</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hV</span> <span class=\"o\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy'</span><span class=\"o\">‚ü©</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span>  <span class=\"o\">},</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">topological_group.to_uniform_space</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">separated_space</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">separated_iff_t2.mpr</span> <span class=\"o\">‚Äπ</span><span class=\"n\">_</span><span class=\"o\">‚Ä∫,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"bp\">√ó</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">/</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">preimage_mem_comap</span> <span class=\"n\">V_in</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_closed_of_spaced_out</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">h_in</span> <span class=\"n\">h'</span> <span class=\"n\">h'_in</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and now Lean should finish alone...</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">h'</span> <span class=\"bp\">/</span> <span class=\"n\">h</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">div_mem</span> <span class=\"o\">:</span> <span class=\"n\">h'</span><span class=\"bp\">/</span><span class=\"n\">h</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">H.div_mem</span> <span class=\"n\">h'_in</span> <span class=\"n\">h_in</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">h'</span><span class=\"bp\">/</span><span class=\"n\">h</span> <span class=\"bp\">‚àà</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">VH</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">set.mem_inter</span> <span class=\"n\">hyp</span> <span class=\"n\">div_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_div_eq_one</span> <span class=\"n\">this</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There is a lot of remaining polishing to do (including either extracting lemmas or finding them in mathlib)</p>",
        "id": 294080096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660830362
    },
    {
        "content": "<p>Your <code>have : ({1} : set H) ‚àà ùìù (1 : H), -- Don't we have a lemma for this?</code> would have better chances to exist were it written <code>(1 : set H) ‚àà ùìù (1 : H)</code>.</p>",
        "id": 294080300,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660830435
    },
    {
        "content": "<p>why would that be? it holds for all <code>a</code></p>",
        "id": 294081016,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660830685
    },
    {
        "content": "<p>Ya√´l, this lemma has nothing to do with algebra.</p>",
        "id": 294082433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660831123
    },
    {
        "content": "<p>I doubt! I see groups in there.</p>",
        "id": 294082967,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660831274
    },
    {
        "content": "<p>this is true for any discrete space</p>",
        "id": 294082997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660831285
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.uniform_group</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">singleton_mem_nhds</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">discrete_topology</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_nhds_discrete.mpr</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 294083466,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660831438
    },
    {
        "content": "<p>Marvellous; thank you all very much, especially Patrick!</p>",
        "id": 294090645,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660831700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Are you planning on PR -ing this?</p>",
        "id": 294097361,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660832707
    },
    {
        "content": "<p>I can do it if you prefer.</p>",
        "id": 294097459,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660832743
    },
    {
        "content": "<p>I'll try to find time for it (PRing takes a lot more time than forcing a proof as I did above)</p>",
        "id": 294099712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660833390
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 294100173,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660833513
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_inter_eq_singleton_of_mem_discrete\">docs#nhds_inter_eq_singleton_of_mem_discrete</a> so it's actually easy</p>",
        "id": 294102736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660834275
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16130\">#16130</a></p>",
        "id": 294103780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660834581
    }
]