[
    {
        "content": "<p>Do we have this somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The best I could find is <code>mem_closure_union_iff</code>, but it is in <code>deprecated/submonoid</code>.</p>",
        "id": 262552004,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1637737095
    },
    {
        "content": "<p>Isn't it the <em>definition</em> of the sup on submonoids?</p>",
        "id": 262558949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637743186
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid\">docs#submonoid</a></p>",
        "id": 262558955,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637743193
    },
    {
        "content": "<p>Argh no, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.complete_lattice\">docs#submonoid.complete_lattice</a> uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice_of_Inf\">docs#complete_lattice_of_Inf</a> to generate the <code>sup</code> and <code>Sup</code> fields.</p>",
        "id": 262559278,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637743395
    },
    {
        "content": "<p>Either prove your theorem by hand or redefine <code>submonoid.complete_lattice</code> so that it holds true by definition. Either should be fine.</p>",
        "id": 262559372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637743446
    },
    {
        "content": "<p>The sup on general submonoids is more complicated -- this only works because of the commutativity assumption</p>",
        "id": 262562031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637744944
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mem_sup\">docs#submodule.mem_sup</a></p>",
        "id": 262562079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637744980
    },
    {
        "content": "<p>Do we not have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.mem_sup\">docs#submonoid.mem_sup</a>?</p>",
        "id": 262562130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637745004
    }
]