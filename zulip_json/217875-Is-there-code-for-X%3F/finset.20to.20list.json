[
    {
        "content": "<p>1) Do we have a noncomputable <code>finset X -&gt; list X</code> (a one-sided inverse of list.to_finset)? I can make it but if it's there already I'd rather use what's there. I was hoping to use <code>#find</code> to find it but I failed.</p>\n<p>2) If X has decidable equality and a total ordering, do we have a computable <code>finset X -&gt; list X</code>? Asking for a friend.</p>",
        "id": 259372788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635419836
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sort\">docs#finset.sort</a> for 2)</p>",
        "id": 259373799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635420498
    },
    {
        "content": "<p>As for 1, that's <code>s.1.out</code> I think (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.val\">docs#finset.val</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.out\">docs#quotient.out</a>)</p>",
        "id": 259373841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635420532
    },
    {
        "content": "<p>yes that was my construction for 1, I was just wondering if there was an API</p>",
        "id": 259373901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635420568
    },
    {
        "content": "<p>I doubt there is, given there's not even API for <code>m.out</code> when<code>m : multiset X</code></p>",
        "id": 259374095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635420679
    },
    {
        "content": "<p>as for 2 I've never looked at that file before! Thanks! This is for an MSc student who's been doing too much Agda</p>",
        "id": 259374126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635420709
    },
    {
        "content": "<p>It begs the question, what's the list going to be used for?</p>",
        "id": 259375551,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635421692
    },
    {
        "content": "<p>maybe printing it to the screen? <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 259376310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635422077
    },
    {
        "content": "<p>Well then <code>1)</code> probably isn't an option</p>",
        "id": 259376356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635422098
    },
    {
        "content": "<p>You need <code>quot.unquot s.1</code> instead if you're trying to print</p>",
        "id": 259376399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635422119
    },
    {
        "content": "<p>its for reconstructing multivariable polynomials over a field as (symbolic) sums of monomials in the terms in the language of rings. since it is symbolic (hence not having <code>add_comm_monoid</code>) i can't make sums using finset</p>",
        "id": 259379395,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1635423657
    },
    {
        "content": "<blockquote>\n<p>i can't make sums using finset</p>\n</blockquote>\n<p>Why not?</p>",
        "id": 259380299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635424178
    },
    {
        "content": "<p>We defined a noncomm_sum for finset such that you can still sum when the underlying addition isn't commutative but in the finset it is.</p>",
        "id": 259383901,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635425963
    },
    {
        "content": "<p>Not sure why docs linkifier won't link it</p>",
        "id": 259384718,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635426297
    },
    {
        "content": "<p>I suspect the problem is that <code>(add x y) = (add y x)</code> is not true in Joseph's \"symbolic\" terms</p>",
        "id": 259385037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635426457
    },
    {
        "content": "<p>Whatever the sum is over your extracted list, if you're going to be using it, you'll have to prove at some point that it didn't matter which list you extracted. Or am I misunderstanding something?</p>",
        "id": 259385291,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635426572
    },
    {
        "content": "<p>Yakov is talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.noncomm_sum\">docs#finset.noncomm_sum</a>.</p>",
        "id": 259386492,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1635427180
    },
    {
        "content": "<p>Is this for a tactic or for some internal argument?</p>",
        "id": 259390257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635428806
    },
    {
        "content": "<p>e.g. if you're trying to prove an internal proposition like \"for any polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f \\in R[x,y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span>, there exists a term in the language of an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra extended by two constant symbols <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> that interprets to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> when we set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">X = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Y = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>\" then you don't need either 1) or 2)</p>",
        "id": 259390913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635429084
    },
    {
        "content": "<p>I think that this will be one of the things <span class=\"user-mention\" data-user-id=\"133584\">@Joseph Hua</span> wants except with n variables not 2</p>",
        "id": 259399097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635432236
    },
    {
        "content": "<p>he wants to see how much of the model theory proof of Ax-Grothendieck is feasible before we both get stuck</p>",
        "id": 259399192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635432262
    },
    {
        "content": "<p><del> because sums using finset require having <code>add_comm_monoid</code> on the type, I only have <code>has_zero, has_add, has_neg, has_one, has_mul</code></del></p>",
        "id": 259404298,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1635434239
    },
    {
        "content": "<p>Yes, we're really in a position where the sum is not well-defined, but it is well-defined up to associativity and commutativity, so when the term is evaluated in ring theory it will be well-defined.</p>",
        "id": 259405482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635434755
    },
    {
        "content": "<p>You can probably avoid model theory and still reduce from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathbb{F}_p}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.174998em;vertical-align:-0.286108em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span> by specializing along a maximal valuation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> (whose residue field must be the algebraic closure of a finite field). Does anyone know is such an argument along these lines has been written down?</p>",
        "id": 259406706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635435235
    },
    {
        "content": "<p>If you take a quotient by the kernel of evaluation map, then your addition becomes commutative</p>",
        "id": 259408754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436065
    },
    {
        "content": "<p>But also if you're using polynomials in a single variable (as opposed to <code>mv_polynomial</code> which wasn't mentioned above) then there's an obvious ordering of monomials anyway, so <code>.sorted</code> is indeed a sensible choice.</p>",
        "id": 259408873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635436107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.20to.20list/near/259372788\">said</a>:</p>\n<blockquote>\n<p>1) Do we have a noncomputable <code>finset X -&gt; list X</code></p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.to_list\">docs#finset.to_list</a></p>",
        "id": 259421212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635440962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.20to.20list/near/259374095\">said</a>:</p>\n<blockquote>\n<p>I doubt there is, given there's not even API for <code>m.out</code> when<code>m : multiset X</code></p>\n</blockquote>\n<p>It's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.to_list\">docs#multiset.to_list</a> instead.</p>",
        "id": 259421843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635441187
    },
    {
        "content": "<p>I see there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.exists_list_nodup_eq\">docs#finset.exists_list_nodup_eq</a> which is the kind of approach I had in mind</p>",
        "id": 259422145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635441284
    }
]