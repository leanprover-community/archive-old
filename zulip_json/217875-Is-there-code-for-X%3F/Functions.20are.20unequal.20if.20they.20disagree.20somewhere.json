[
    {
        "content": "<p>Do we have something like this anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">not_congr</span> <span class=\"n\">function.funext_iff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">not_forall</span>\n</code></pre></div>\n<p>(context: a lemma added in <a href=\"https://github.com/leanprover-community/mathlib/pull/11973\">#11973</a>)</p>",
        "id": 271567044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644581575
    },
    {
        "content": "<p>It seems like we don't (and we want it of course).</p>",
        "id": 271567666,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644581949
    },
    {
        "content": "<p><code>rw [ne.def, function.funext_iff, not_forall]</code> also closes it, but arguably isn't as nice as having the lemma as it doesn't put <code>ne</code> on the rhs</p>",
        "id": 271567733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644581992
    },
    {
        "content": "<p>Based on the usage in <a href=\"https://github.com/leanprover-community/mathlib/pull/11973\">#11973</a>, we might want an alias lemma for the forward direction too, since that's handy for case splits, and matches the usual <code>ext</code> / <code>ext_iff</code> split</p>",
        "id": 271567892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644582096
    },
    {
        "content": "<p>since a couple days you can spell <code>not_congr h</code> as <code>h.not</code> :-)</p>",
        "id": 271568079,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644582231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> I'm trying to apply your lemma from the PR, and I'm having some inference issues. Can you see why this doesn't work? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">a</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fun_like.exists_ne</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">not_forall.mp</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">fun_like.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span> <span class=\"n\">a</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_diff</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fun_like.exists_ne</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271576530,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1644586408
    },
    {
        "content": "<p>It seems like there is a missing <code>fun_like</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 271579199,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644587567
    },
    {
        "content": "<p>Please report stuff like that in <a href=\"#narrow/stream/113488-general/topic/Morphism.20refactor\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Morphism.20refactor</a> so that I can keep track of everything that needs changing.</p>",
        "id": 271579553,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644587754
    },
    {
        "content": "<p>I'll try and define <code>ring_equiv_class</code> now and instantiate it for <code>alg_equiv</code> too, since I have not much planned this afternoon.</p>",
        "id": 271580038,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644587954
    },
    {
        "content": "<p>Thanks! Then I can finally define <code>order_ring_equiv</code> from <a href=\"https://github.com/leanprover-community/mathlib/pull/3292\">#3292</a></p>",
        "id": 271580509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644588093
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11977\">#11977</a></p>",
        "id": 271583849,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644589565
    },
    {
        "content": "<p>Reviewed!</p>",
        "id": 271585533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644590355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Functions.20are.20unequal.20if.20they.20disagree.20somewhere/near/271568079\">said</a>:</p>\n<blockquote>\n<p>since a couple days you can spell <code>not_congr h</code> as <code>h.not</code> :-)</p>\n</blockquote>\n<p>That's great! I've wanted that for a while.</p>\n<p>I was wondering a few days ago whether we had gotten around to implementing Eric's suggestion <a href=\"#narrow/stream/113489-new-members/topic/Apply.20contrapostive/near/254089346\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Apply.20contrapostive/near/254089346</a></p>",
        "id": 271608961,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644600359
    },
    {
        "content": "<p>I'd forgotten I'd suggested that!</p>",
        "id": 271646771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644618282
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff.and\">docs#iff.and</a> too, or just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff.not\">docs#iff.not</a>?</p>",
        "id": 271647096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644618488
    },
    {
        "content": "<p>Yes! <a href=\"https://github.com/leanprover-community/mathlib/pull/11803\">#11803</a> for the full set</p>",
        "id": 271647208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644618569
    }
]