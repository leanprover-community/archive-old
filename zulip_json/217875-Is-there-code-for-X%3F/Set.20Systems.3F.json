[
    {
        "content": "<p>Hello, is there a definition of set systems, a tuple of a ground set <code>E</code> and the subset of the power set of <code>E</code>, and some of its properties such as accessibility?</p>",
        "id": 317006495,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1671559133
    },
    {
        "content": "<p>I think so. The paper \"Formalizing Hall’s Marriage Theorem in Lean\" works with that and it became a part of mathlib.</p>",
        "id": 317007435,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671559373
    },
    {
        "content": "<p>Actually they used indexed families of sets:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/1e6b748c175e64dd033d7a1a1bfe3e9fe72011d3/src/combinatorics/hall/finite.lean#L260\">https://github.com/leanprover-community/mathlib/blob/1e6b748c175e64dd033d7a1a1bfe3e9fe72011d3/src/combinatorics/hall/finite.lean#L260</a></p>",
        "id": 317007791,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671559499
    },
    {
        "content": "<p>They have <code>t : ι → finset E</code> where<code>ι</code> is a finite type.</p>",
        "id": 317008038,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671559565
    },
    {
        "content": "<p>They don't have \"set system\" as a structure.</p>",
        "id": 317008416,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671559691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"574112\">Jihoon Hyun</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20Systems.3F/near/317006495\">said</a>:</p>\n<blockquote>\n<p>Hello, is there a definition of set systems, a tuple of a ground set <code>E</code> and the subset of the power set of <code>E</code>, and some of its properties such as accessibility?</p>\n</blockquote>\n<p>Do you want to enforce that each subset of <code>E</code> exists at most once in the set system?</p>",
        "id": 317010074,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671560219
    },
    {
        "content": "<p>What's your use? If you want to do combinatorics, your best bet is <code>finset (finset E)</code> and you can find a bunch of examples in the folder <code>combinatorics/set_family</code>.</p>",
        "id": 317025943,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671565172
    },
    {
        "content": "<p>There are also set systems in topology and measure theory in the form of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space\">docs#topological_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measurable_space\">docs#measure_theory.measurable_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.d_system\">docs#measure_theory.d_system</a>.</p>",
        "id": 317026233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671565245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20Systems.3F/near/317026233\">said</a>:</p>\n<blockquote>\n<p>There are also set systems in topology and measure theory in the form of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space\">docs#topological_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measurable_space\">docs#measure_theory.measurable_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.d_system\">docs#measure_theory.d_system</a>.</p>\n</blockquote>\n<p>The first link works.</p>",
        "id": 317026344,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671565278
    },
    {
        "content": "<p>Sorry, I never remember what's in the <code>measure_theory</code> namespace and what's not <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 317027307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671565569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20Systems.3F/near/317025943\">말함</a>:</p>\n<blockquote>\n<p>What's your use? If you want to do combinatorics, your best bet is <code>finset (finset E)</code> and you can find a bunch of examples in the folder <code>combinatorics/set_family</code>.</p>\n</blockquote>\n<p>As I'm trying to use it with combinatorics, this seems like a reasonable approach. I'd like to make use of several finite -oid structures, should I assume implementations of such structures does not exist?</p>",
        "id": 317046972,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1671573345
    },
    {
        "content": "<p>Indeed, they don't exist because we don't need them. What theorem are you trying to prove?</p>",
        "id": 317098922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671608495
    },
    {
        "content": "<p>I have no theorem in mind yet, it just was odd to me there were no implementation of those. I'm a lean4 user, what should I do to contribute to, for example mathlib4?</p>",
        "id": 317103915,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1671610609
    },
    {
        "content": "<p>FYI, the paper I mentioned uses Lean 3.</p>",
        "id": 317104013,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671610662
    },
    {
        "content": "<p>Without <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a> being ported to mathlib4, you will have a hard time doing anything.</p>",
        "id": 317117532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671615915
    },
    {
        "content": "<p>If you want to do combinatorics, I strongly suggest you stick to Lean 3 for the time being.</p>",
        "id": 317117615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671615952
    },
    {
        "content": "<p>Is it because combinatorics is at the end of the food chain?</p>",
        "id": 317117746,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671615986
    },
    {
        "content": "<p>No, not quite. Set family combinatorics has quite low imports, but when you get to stuff like Behrend's bound (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/behrend.roth_lower_bound\">docs#behrend.roth_lower_bound</a>) it suddenly pulls in a lot of analysis.</p>",
        "id": 317118321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671616185
    }
]