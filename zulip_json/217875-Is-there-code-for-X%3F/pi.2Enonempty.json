[
    {
        "content": "<p>Do we <em>really</em> not have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">classical.arbitrary</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pi.nonempty_of_empty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_empty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">is_empty_elim</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 280271019,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651006604
    },
    {
        "content": "<p>I thought something like that was in the classical file</p>",
        "id": 280271163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651006681
    },
    {
        "content": "<p>Ah! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.nonempty_pi\">docs#classical.nonempty_pi</a></p>",
        "id": 280271284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651006730
    },
    {
        "content": "<p>Why is it not an instance? Performance reasons?</p>",
        "id": 280271313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651006747
    },
    {
        "content": "<p>It's probably not there because a stronger statement is possible, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.unique_of_is_empty\">docs#pi.unique_of_is_empty</a>?</p>",
        "id": 280278167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651010444
    },
    {
        "content": "<p>Oh right. But why is the first one not an instance?</p>",
        "id": 280278303,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651010522
    },
    {
        "content": "<p>it might be undesirable to use choice totally implicitly like this</p>",
        "id": 280286740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651016514
    },
    {
        "content": "<p>we don't do it for classical.prop_decidable either</p>",
        "id": 280286744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651016519
    },
    {
        "content": "<p><code>prop_decidable</code> would be a lot more contentious as it's not only <code>choice</code> but <code>noncomputable</code></p>",
        "id": 280286877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651016637
    },
    {
        "content": "<p>But I agree, that probably is the reason</p>",
        "id": 280286923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651016654
    },
    {
        "content": "<p><code>nonempty (decidable p)</code> would be pretty similar</p>",
        "id": 280286972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651016707
    }
]