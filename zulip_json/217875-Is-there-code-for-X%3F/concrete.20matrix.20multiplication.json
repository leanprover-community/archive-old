[
    {
        "content": "<p>Can anyone tell me how to replace the <code>sorry</code> below by a proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_add_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix.empty_add_empty</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">*</span> <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]]</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291076067,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1658940688
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/test/matrix.lean#L53\">https://github.com/leanprover-community/mathlib/blob/master/test/matrix.lean#L53</a> is the most recent mathlib way to state and prove this, which version are you on?</p>",
        "id": 291076813,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658941049
    },
    {
        "content": "<p>I am probably working with an old version of mathlib, but I can update. Thanks!</p>",
        "id": 291077586,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1658941379
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul_fin_two\">docs#matrix.mul_fin_two</a> is a direct statement of your second lemma</p>",
        "id": 291079871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658942302
    },
    {
        "content": "<p>When I find the time, I'm planning to adapt the approach from <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20tactic.20for.20expanding.20matrices.20into.20coefficients\">this Zulip thread</a> to generate these lemmas automaticaly for arbitrary <code>m</code> and <code>n</code></p>",
        "id": 291080030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658942392
    },
    {
        "content": "<p>Thanks again. I am trying to work this out for a friend who is thinking about using Lean in an undergraduate course on linear algebra. He says that even the 2x2 case will be helpful for students to work out definitions.</p>\n<p>For the record, I also got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">transpose_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">matrix.of</span><span class=\"o\">],</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If there is a better way, I will be happy to hear it.</p>",
        "id": 291081711,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1658943093
    },
    {
        "content": "<p><code>dsimp [matrix.of]</code> is not something I was intending to be done</p>",
        "id": 291082191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658943302
    },
    {
        "content": "<p>Because doing that makes your goal not quite type correct any more</p>",
        "id": 291082244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658943321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">transpose_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.transpose_apply</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is slightly better</p>",
        "id": 291082430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658943385
    },
    {
        "content": "<p>It's a bit weird how <code>simp</code> gets in a dead end without the help</p>",
        "id": 291082510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658943423
    },
    {
        "content": "<p>Again, probably we want a metaprogram like the one linked above here</p>",
        "id": 291083055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658943610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/concrete.20matrix.20multiplication/near/291076067\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">*</span> <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]]</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> There's actually something terrible going on with this one when I try it locally. It's interpreting the multiplication as pi-type multiplication, i.e. pointwise multiplication of the entries.  I've never seen this before, I wonder if something changed recently?</p>",
        "id": 291102276,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658951909
    },
    {
        "content": "<p>I disabled that with (!)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">pi.has_mul</span> <span class=\"n\">pi.distrib</span> <span class=\"n\">pi.semiring</span> <span class=\"n\">pi.comm_semiring</span> <span class=\"n\">pi.ring</span> <span class=\"n\">pi.comm_ring</span>\n  <span class=\"n\">pi.mul_zero_class</span> <span class=\"n\">pi.mul_zero_one_class</span> <span class=\"n\">pi.mul_one_class</span> <span class=\"n\">pi.monoid_with_zero</span> <span class=\"n\">pi.comm_monoid</span>\n  <span class=\"n\">pi.semigroup_with_zero</span> <span class=\"n\">pi.monoid</span> <span class=\"n\">pi.div_inv_monoid</span> <span class=\"n\">pi.division_monoid</span> <span class=\"n\">pi.division_comm_monoid</span>\n  <span class=\"n\">pi.non_unital_non_assoc_semiring</span> <span class=\"n\">pi.non_unital_non_assoc_ring</span> <span class=\"n\">pi.comm_monoid_with_zero</span>\n  <span class=\"n\">pi.semigroup</span> <span class=\"n\">pi.comm_semigroup</span>\n  <span class=\"n\">pi.non_unital_semiring</span> <span class=\"n\">pi.non_unital_comm_semiring</span> <span class=\"n\">pi.non_unital_ring</span> <span class=\"n\">pi.non_unital_comm_ring</span>\n  <span class=\"n\">pi.non_assoc_semiring</span> <span class=\"n\">pi.non_assoc_ring</span>\n</code></pre></div>",
        "id": 291102309,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658951925
    },
    {
        "content": "<p>And then Lean couldn't find the multiplication instance I wanted, although it did pick it up when I wrote <code>@has_mul.mul _ matrix.has_mul</code> rather than <code>*</code>.</p>",
        "id": 291102380,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658951957
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> changed this recently. You now should use <code>!![a, b; c, d]</code> (or something of sort) instead of <code>![![a, b], ![c, d]]</code>.</p>",
        "id": 291102590,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658952038
    },
    {
        "content": "<p>And also why we have the cdot for matrix.mul</p>",
        "id": 291102671,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658952070
    },
    {
        "content": "<p>To be clear, I didn't change the behavior, that's always been broken: what I changed was adding new syntax that is no longer broken in that way</p>",
        "id": 291103008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658952225
    },
    {
        "content": "<p>Anyway, this works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.mul_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Note that there was a typo (<code>f</code> and <code>g</code> swapped) in the first version.  <code>ext i j; fin_cases i; fin_cases j; </code> is my algorithm for all matrix problems.</p>",
        "id": 291103146,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658952285
    },
    {
        "content": "<p>Maybe next week I'll make a <code>matrix.of_mul_of</code> lemma that uses tactics to generate the goal types for us</p>",
        "id": 291105325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658953499
    },
    {
        "content": "<p>This was much more interesting than whatever I was supposed to be doing today: <a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a>. Using <code>mul_fin</code> from that PR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a₁₁</span> <span class=\"n\">a₁₂</span> <span class=\"n\">a₂₁</span> <span class=\"n\">a₂₂</span> <span class=\"n\">b₁₁</span> <span class=\"n\">b₁₂</span> <span class=\"n\">b₂₁</span> <span class=\"n\">b₂₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a₁₁</span><span class=\"o\">,</span> <span class=\"n\">a₁₂</span><span class=\"bp\">;</span>\n     <span class=\"n\">a₂₁</span><span class=\"o\">,</span> <span class=\"n\">a₂₂</span><span class=\"o\">]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">b₁₁</span><span class=\"o\">,</span> <span class=\"n\">b₁₂</span><span class=\"bp\">;</span>\n                    <span class=\"n\">b₂₁</span><span class=\"o\">,</span> <span class=\"n\">b₂₂</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a₁₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₁₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂₁</span><span class=\"o\">,</span> <span class=\"n\">a₁₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁₂</span> <span class=\"bp\">+</span> <span class=\"n\">a₁₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂₂</span><span class=\"bp\">;</span>\n                                   <span class=\"n\">a₂₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂₁</span><span class=\"o\">,</span> <span class=\"n\">a₂₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁₂</span> <span class=\"bp\">+</span> <span class=\"n\">a₂₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂₂</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_fin</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a₁₁</span> <span class=\"n\">a₁₂</span> <span class=\"n\">b₁₁</span> <span class=\"n\">b₁₂</span> <span class=\"n\">b₂₁</span> <span class=\"n\">b₂₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a₁₁</span><span class=\"o\">,</span> <span class=\"n\">a₁₂</span><span class=\"o\">]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">b₁₁</span><span class=\"o\">,</span> <span class=\"n\">b₁₂</span><span class=\"bp\">;</span>\n                    <span class=\"n\">b₂₁</span><span class=\"o\">,</span> <span class=\"n\">b₂₂</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a₁₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₁₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂₁</span><span class=\"o\">,</span> <span class=\"n\">a₁₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁₂</span> <span class=\"bp\">+</span> <span class=\"n\">a₁₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂₂</span><span class=\"bp\">;</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_fin</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291208624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659021883
    },
    {
        "content": "<p>Nice!</p>",
        "id": 291208957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659022026
    },
    {
        "content": "<p>I guess there's not much we can do about the fact that the equation is diagonal :-)</p>",
        "id": 291209165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659022111
    },
    {
        "content": "<p>I don't think the world is ready for the level of whitespace-sensitivity that would require</p>",
        "id": 291209258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022161
    },
    {
        "content": "<p>Should this really be a tactic though?</p>",
        "id": 291209308,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659022190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/concrete.20matrix.20multiplication/near/291209308\">said</a>:</p>\n<blockquote>\n<p>Should this really be a tactic though?</p>\n</blockquote>\n<p>It's pretty useful to be able to use it in a rewrite chain</p>",
        "id": 291209386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022208
    },
    {
        "content": "<p>The design is based off <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.reassoc_of\">docs#category_theory.reassoc_of</a></p>",
        "id": 291209429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/concrete.20matrix.20multiplication/near/291209386\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/concrete.20matrix.20multiplication/near/291209308\">said</a>:</p>\n<blockquote>\n<p>Should this really be a tactic though?</p>\n</blockquote>\n<p>It's pretty useful to be able to use it in a rewrite chain</p>\n</blockquote>\n<p>You could say the same about many tactics though</p>",
        "id": 291209715,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659022342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/concrete.20matrix.20multiplication/near/291209165\">said</a>:</p>\n<blockquote>\n<p>I guess there's not much we can do about the fact that the equation is diagonal :-)</p>\n</blockquote>\n<p>You could invest in a rotatable screen:<br>\n<a href=\"/user_uploads/3121/OKrTXA6Dw9AbADhugThO4vF2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OKrTXA6Dw9AbADhugThO4vF2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/OKrTXA6Dw9AbADhugThO4vF2/image.png\"></a></div>",
        "id": 291209766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022365
    },
    {
        "content": "<p>And we could massage a lot of them into rewrite lemmas with this sort of technique right? Or is there some special form such auto params have to take?</p>",
        "id": 291209879,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659022405
    },
    {
        "content": "<p>Like can you make a <code>rw norm_num</code> in this way?</p>",
        "id": 291209918,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659022421
    },
    {
        "content": "<p>Ah, one downside of trying to be clever here is that <code>mul_fin</code> isn't allowed in <code>simp</code> or <code>simp_rw</code></p>",
        "id": 291210109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022482
    },
    {
        "content": "<p>And what happens when <code>library_search</code> and such try to apply this lemma?</p>",
        "id": 291210114,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659022489
    },
    {
        "content": "<p>Library_search gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">mul_fin</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span>\n     <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_inst_1_1</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_2_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">b₀₀</span> <span class=\"n\">b₀₁</span> <span class=\"n\">b₁₀</span> <span class=\"n\">b₁₁_1</span> <span class=\"n\">a₀₀</span> <span class=\"n\">a₀₁</span> <span class=\"n\">a₁₀</span> <span class=\"n\">a₁₁_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n         <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"n\">of</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀₀</span><span class=\"o\">,</span> <span class=\"n\">a₀₁</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₁₀</span><span class=\"o\">,</span> <span class=\"n\">a₁₁_1</span><span class=\"o\">]])</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">ᵣ</span><span class=\"n\">_eq</span>\n            <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">of</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀₀</span><span class=\"o\">,</span> <span class=\"n\">b₀₁</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₁₀</span><span class=\"o\">,</span> <span class=\"n\">b₁₁_1</span><span class=\"o\">]]))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n        <span class=\"n\">_inst_2</span>\n        <span class=\"n\">_inst_1</span>\n        <span class=\"n\">b₁₁</span>\n        <span class=\"n\">b₁₂</span>\n        <span class=\"n\">b₂₁</span>\n        <span class=\"n\">b₂₂</span>\n        <span class=\"n\">a₁₁</span>\n        <span class=\"n\">a₁₂</span>\n        <span class=\"n\">a₂₁</span>\n        <span class=\"n\">a₂₂</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 291210325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022562
    },
    {
        "content": "<p>I guess I should have been consistent about 0 or 1-based numbering of matrices</p>",
        "id": 291210422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022603
    },
    {
        "content": "<p>I think having some standard mechanism for generating lemmas templated by some arguments would be nice</p>",
        "id": 291210716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659022733
    },
    {
        "content": "<p>Yeah the thing that bothers me is that these are generated each time they are used, which maybe isn't a huge problem (tactics are run each time too).</p>",
        "id": 291214685,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659024257
    },
    {
        "content": "<p>Maybe there's some way to cache the lemma for each value of <code>(l, m, n)</code></p>",
        "id": 291215357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659024568
    },
    {
        "content": "<p>I've updated the PR so that library_search now suggests</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">mul_fin</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">mul_fin_aux</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"n\">a₁₁</span> <span class=\"n\">a₁₂</span> <span class=\"n\">a₂₁</span> <span class=\"n\">a₂₂</span> <span class=\"n\">b₁₁</span> <span class=\"n\">b₁₂</span> <span class=\"n\">b₂₁</span> <span class=\"n\">b₂₂</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 291301351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659087711
    }
]