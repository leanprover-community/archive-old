[
    {
        "content": "<p>Proof is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">what</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum.elim</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">sum.inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">sum.inr</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sum.cases_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sum.elim_inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sum.elim_inr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This looks like an obvious candidate for a simp lemma, but I don't know what to call it</p>",
        "id": 217891929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606314922
    },
    {
        "content": "<p>it seems vanishingly unlikely that this left hand side would ever appear again</p>",
        "id": 217892069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606314978
    },
    {
        "content": "<p>Is that an argument against inclusion into mathlib, or just an argument against being a simp lemma?</p>",
        "id": 217892163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606315028
    },
    {
        "content": "<p>and the proof <code>ext (_|_); refl</code> is easier than knowing that this lemma exists</p>",
        "id": 217892223,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606315053
    },
    {
        "content": "<p>I had no idea <code>ext</code> took rcases-style patterns</p>",
        "id": 217892349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606315102
    },
    {
        "content": "<p>I think that might be a somewhat recent feature</p>",
        "id": 217892386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606315123
    },
    {
        "content": "<p><code>tidy</code> can prove it too</p>",
        "id": 217892450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606315165
    },
    {
        "content": "<p>Ah, but you can't use that proof if your goal state  is actually <code>sum.elim (f ∘ sum.inl) (f ∘ sum.inr) x = f x</code></p>",
        "id": 217892471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606315181
    },
    {
        "content": "<p>And in general <code>ext</code> only works on top level goals, you can't use it to simplify subexpressions</p>",
        "id": 217892569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606315215
    },
    {
        "content": "<p>then <code>cases x; refl</code> instead</p>",
        "id": 217892574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606315217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/sum.2Eelim.20(f.20.E2.88.98.20sum.2Einl).20(f.20.E2.88.98.20sum.2Einr).20.3D.20f/near/217892569\">said</a>:</p>\n<blockquote>\n<p>And in general <code>ext</code> only works on top level goals, you can't use it to simplify subexpressions</p>\n</blockquote>\n<p>If this is a problem it might mean that you haven't fully decomposed your task into its parts.</p>",
        "id": 217894125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316011
    },
    {
        "content": "<p>But in any case, I don't think it is a good simp lemma because that is effectively just action at a distance</p>",
        "id": 217894959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316376
    },
    {
        "content": "<p>What do you mean by it being action at a distance?</p>",
        "id": 217895035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606316403
    },
    {
        "content": "<p>If you rely on it to make <code>simp</code> work then there's an implicit long-range dependency</p>",
        "id": 217895119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316422
    },
    {
        "content": "<p>That's true of all simp lemmas though!</p>",
        "id": 217895151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606316438
    },
    {
        "content": "<p>imagine the import structure changes somehow to make the lemma not imported, then someone in the future will have no idea why the proof broke</p>",
        "id": 217895156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316441
    },
    {
        "content": "<p>That's moot if the lemma is in the same file as the definitions it simplifies</p>",
        "id": 217895205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606316462
    },
    {
        "content": "<p>right but most simp lemmas are obvious things that don't contain things like <code>sum.elim</code> or function composition or repeated occurrences of a variable on the left hand side</p>",
        "id": 217895224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316468
    },
    {
        "content": "<p>Which it is in <a href=\"https://github.com/leanprover-community/mathlib/issues/5112\">#5112</a>, which I just opened</p>",
        "id": 217895227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606316468
    },
    {
        "content": "<p>If it's in the same file then there's even less reason to make it a simp lemma</p>",
        "id": 217895266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316484
    },
    {
        "content": "<p>oh, you mean the thing it simplifies in the sense of appearing in the lemma</p>",
        "id": 217895341,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316522
    },
    {
        "content": "<p>Regarding \"left hand sides don't contain composition\", <a href=\"#narrow/stream/113489-new-members/topic/Fully.20applied.20lemmas/near/217828890\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Fully.20applied.20lemmas/near/217828890</a> is relevant</p>",
        "id": 217895418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606316543
    },
    {
        "content": "<p>It's still the case that the lemma is likely to get used exactly once in which case marking it <code>simp</code> is just a way to hide a dependency which is better made explicit</p>",
        "id": 217895610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606316640
    },
    {
        "content": "<p>Isn't hiding \"obvious\" dependencies fine though?</p>",
        "id": 217897803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606317633
    },
    {
        "content": "<p>IMO these lemmas fall in the same category as <code>prod.mk.eta</code>, as proving something that you would  expect to go away by itself</p>",
        "id": 217897863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606317665
    },
    {
        "content": "<p>This rule is sometimes called the co-eta rule for sums. It seems like a very basic rule that is nice to have in mathlib.<br>\nI think it's fine to make it a simp-lemma. I think that often when it applies the LHS is not exactly of this form (for example if the function composition is unfolded), which might make it tricky to use.</p>",
        "id": 217916676,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606325939
    },
    {
        "content": "<p>I'm not sure this would be a good simp-lemma.  Remember that <code>function.comp</code> is still reducible, so this quickly becomes a higher-order matching problem.</p>",
        "id": 217917500,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1606326401
    },
    {
        "content": "<p>Does that argument apply to other simp lemmas involving <code>function.comp</code>?</p>",
        "id": 217918434,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606326913
    },
    {
        "content": "<p>I'm a bit uneasy about <code>function.comp</code> in simp lemmas, yes.  I don't think this lemma is actively harmful, but lemmas like <code>list.comp_map</code> shouldn't be marked simp.</p>",
        "id": 217919135,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1606327299
    },
    {
        "content": "<p>I added a couple more lemmas to the PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/5112\">#5112</a>)on top of what is discussed here, would appreciate comments on which ones are good and which ones aren't</p>",
        "id": 217921612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606328700
    },
    {
        "content": "<p>Is <code>sum.elim f g ∘ inr = g</code> any worse a simp lemma than <code>f ∘ id = f</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.comp.right_id\">docs#function.comp.right_id</a>) or <code>[involutive f] f ∘ f = id</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.involutive.comp_self\">docs#function.involutive.comp_self</a>)?</p>",
        "id": 217942485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606340216
    },
    {
        "content": "<p>A Lean 3 simp expert (who probably wrote the <code>simp</code> linter) has expressed their unease about <code>function.comp</code> in <code>simp</code> lemmas.</p>",
        "id": 217942560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340278
    },
    {
        "content": "<p>Would this problem go away if <code>simp</code> unfolded <code>comp</code>?</p>",
        "id": 217942649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606340341
    },
    {
        "content": "<p><code>comp</code> is really weird. I used to use it a lot, and now I avoid it like the plague.</p>",
        "id": 217942703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340396
    },
    {
        "content": "<p>You would imagine that if it could be easily fixed, it would have been fixed a while ago.</p>",
        "id": 217942767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340426
    },
    {
        "content": "<p>How about making <code>function.comp</code> <code>[reducible]</code>?</p>",
        "id": 217943002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340616
    },
    {
        "content": "<p>Isn't it already?</p>",
        "id": 217943012,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606340623
    },
    {
        "content": "<p>Oh yes it is! I looked in the docs and it didn't mention it, but it's in the source.</p>",
        "id": 217943074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340646
    },
    {
        "content": "<p>It's also inlined. What about <code>comp</code> do you avoid? <code>f * id = f</code> seems like that should be \"simpable\" without applying, since <code>id</code> is the unit in that \"multiplication\", no?</p>",
        "id": 217943131,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606340703
    },
    {
        "content": "<p>today I learnt : docs show stuff tagged as <code>@[simp]</code> but not <code>@[reducible]</code></p>",
        "id": 217943152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340719
    },
    {
        "content": "<p>What does <code>@[inline]</code> mean?</p>",
        "id": 217943164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340730
    },
    {
        "content": "<p>If function.comp is reducible, does Gabriel also get uneasy about lambdas in simp lemmas? simp can see through reducible stuff, right?</p>",
        "id": 217943285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340823
    },
    {
        "content": "<p>In compsci, inline usually means, \"when you encounter this function, don't place it in the function call stack, which involves jumping in memory... just unwrap it and place the body of it in the current context, to avoid the jumps\"</p>",
        "id": 217943322,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606340868
    },
    {
        "content": "<p>So here, it might mean, just generate the underlying VM code if you can?</p>",
        "id": 217943390,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606340917
    },
    {
        "content": "<p>Reducible or not, <code>simp</code> does not reduce <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.comp\">docs#function.comp</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">constant</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">function.comp</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>  <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 217943617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606341090
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">function.comp</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>(constants and axioms and sorrying data scares me). OK so maybe the issue is that we don't see function.comp in the wild so much?</p>",
        "id": 217943755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606341236
    },
    {
        "content": "<p>hmm, thousands of occurrences in mathlib...</p>",
        "id": 217943839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606341287
    },
    {
        "content": "<p>It would be good to see an example of an obviously harmful comp simp lemma.</p>",
        "id": 217943910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606341354
    },
    {
        "content": "<p>I don't have a feeling what a harmful simp lemma could look like, but perhaps one could argue that a simp lemma which never fires is harmful because it's making simp run more slowly for no good reason</p>",
        "id": 217949822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606345920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/sum.2Eelim.20(f.20.E2.88.98.20sum.2Einl).20(f.20.E2.88.98.20sum.2Einr).20.3D.20f/near/217943910\">said</a>:</p>\n<blockquote>\n<p>It would be good to see an example of an obviously harmful comp simp lemma.</p>\n</blockquote>\n<p>We've had quite a few such problems with type class instances (such as <code>is_monoid_hom</code> instances for composition), that's why I'm careful.  Translated to a simp lemma, this would be a problematic example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.simp_command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_map'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_map'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- works 🤷</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_map'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">id</span>   <span class=\"c1\">-- loops</span>\n</code></pre></div>\n<p>At first glance the <code>comp_map'</code> lemma looks fine because it reduces the number of <code>∘</code> in the first argument of map.<br>\nBut the reason it loops is that <code>h ∘ g</code> can match any function because <code>∘</code> is reducible and then Lean uses higher-order matching to match the resulting lambdas.  (BTW, I would've expected it to match <code>(+1)</code> as well, but apparently it doesn't.)</p>",
        "id": 217982701,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1606384372
    },
    {
        "content": "<p>Thanks for the example - I assume the issue is that lean matches <code>id</code> against <code>id ∘ id</code>. Is there any way to tell it to only match against non-trivial patterns?</p>",
        "id": 217985510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606386268
    },
    {
        "content": "<p>Eg, have the pattern <code>P a</code> not match against <code>a</code> as <code>id a</code></p>",
        "id": 217985557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606386315
    },
    {
        "content": "<p>But if there was a lemma that simplified <code>f ∘ id = f</code>, <code>comp_map'</code> wouldn't even need to fire. The discussion on <a href=\"https://github.com/leanprover-community/mathlib/pull/5030\">https://github.com/leanprover-community/mathlib/pull/5030</a> suggests that anyway, <code>map_map</code> should be the simp direction, and not <code>comp_map</code>.</p>",
        "id": 218012701,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606403737
    },
    {
        "content": "<p>I'm suspicious about this <code>map_map</code> direction</p>",
        "id": 218014468,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606404813
    },
    {
        "content": "<p>You wouldn't want a simp lemma that says <code>x = option.map id x</code></p>",
        "id": 218014480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606404822
    },
    {
        "content": "<p>for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_hom.map_mul\">docs#mul_hom.map_mul</a> goes in the direction I expect: f of a product turns into product of fs</p>",
        "id": 218015082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405170
    },
    {
        "content": "<p>Maybe it's one of those cases where the grass looks greener on both sides</p>",
        "id": 218015157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_map'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"c1\">-- loops as well</span>\n</code></pre></div>\n<p>IMHO, the only solution is to make <code>∘</code> semireducible.</p>",
        "id": 218016848,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1606406279
    }
]