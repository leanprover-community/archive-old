[
    {
        "content": "<p>Is there a tactic that is like <code>exact</code> but asserts there is no definitional unfolding? The application is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">some_special_case</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">pedantic_exact</span> <span class=\"o\">(</span><span class=\"n\">some_general_result</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The goal here is to confirm that there is no need to add the special case lemma, as we already have a general syntactically equal result elsewhere.</p>\n<p><code>exact</code> doesn't cut it here, as it performs definitional unfolding. <code>rw</code> comes close, but it can use <code>h : a = b</code> to change <code>f a</code> to <code>f b</code> rather than only acting on the entire goal.</p>",
        "id": 238043412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620574794
    },
    {
        "content": "<p>I guess the meta question is; if we have a lemma that can be proved with <code>by rw a_single_lemma</code>, should that lemma exist in the first place? (If not, then <code>by rw</code> is essentially what I'm after anyway)</p>",
        "id": 238043487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620574861
    },
    {
        "content": "<p>I think if a lemma can be proven by <code>by rw [single_lemma]</code> this lemma is usually not worth having. But here is a definition of <code>pedantic_exact</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">pedantic_exact</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">t1</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">t2</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">=ₐ</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"The type doesn't match exactly.\"</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interactive.pedantic_exact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.pedantic_exact</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">pedantic_exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">pedantic_exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 238360592,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620757893
    },
    {
        "content": "<p>Some useful lemmas can even be proved using <code>by rw []</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">b_eq_a</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">b_eq_a</span><span class=\"o\">,</span> <span class=\"c1\">-- this rw is necessary</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238361169,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620758125
    },
    {
        "content": "<p>I've not seen <code>=ₐ</code> before</p>",
        "id": 238363772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620759290
    }
]