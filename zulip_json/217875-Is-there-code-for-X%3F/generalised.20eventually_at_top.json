[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>If this were the other way round, I could use <code>filter_upwards</code>, but right now it seems like I need to do something manual with <code>max</code> and <code>eventually_at_top</code>. Is there a clean filter way of doing this?</p>",
        "id": 267082847,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641487251
    },
    {
        "content": "<p>You forgot <code>@[nolint no_or_gt]</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 267083770,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641487714
    },
    {
        "content": "<p>Maybe a clearer way of saying what I want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">eventually_at_top.1</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 267083777,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641487718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/generalised.20eventually_at_top/near/267083770\">said</a>:</p>\n<blockquote>\n<p>You forgot <code>@[nolint no_or_gt]</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>No, I didn't. Gt and ge are acceptable (and fairly common) in binders</p>",
        "id": 267083808,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641487737
    },
    {
        "content": "<p>For example, the lemma I want to generalise: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_at_top\">docs#filter.eventually_at_top</a></p>",
        "id": 267083878,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641487763
    },
    {
        "content": "<p>But we've decided to move away from them a few months ago.</p>",
        "id": 267083904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641487773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/generalised.20eventually_at_top/near/267083904\">said</a>:</p>\n<blockquote>\n<p>But we've decided to move away from them a few months ago.</p>\n</blockquote>\n<p>The linter won't complain in this case though, which is why I didn't forget the nolint attribute</p>",
        "id": 267084335,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641487933
    },
    {
        "content": "<p>I feel like what you're asking for is basically the definition of <code>∀ᶠ</code>. I don't know the correct way to do with the API, but you can extract <code>c</code> directly from the definition of <code>at_top</code> as the filter infimum (so set supremum) of principal filters.</p>",
        "id": 267084908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641488247
    },
    {
        "content": "<p>I think you're talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_at_top\">docs#filter.eventually_at_top</a> as \"the definition\", which does get me the value of <code>c</code> out, but as I mentioned this would then require a maximum or some other manual method to get the answer</p>",
        "id": 267085175,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641488394
    },
    {
        "content": "<p>It's certainly possible, but my question is if there's a cleaner way to get there!</p>",
        "id": 267085276,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641488416
    },
    {
        "content": "<p>No, I'm talking about the literal definition. But indeed it sounds a bit ugly to dig in the def rather than use the API.</p>",
        "id": 267085476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641488495
    },
    {
        "content": "<p>Here's a slight improvement on my original:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">frequently_at_top</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">at_top_basis'</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267088068,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641489696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">at_top_basis'</span> <span class=\"n\">c'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff.1</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 267088482,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641489882
    },
    {
        "content": "<p><code>(at_top_basis' _).mem_iff</code> works nicely in my case, but I'll leave this open in case others have other suggestions</p>",
        "id": 267097665,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641494411
    }
]