[
    {
        "content": "<p>I want that if I have finitely many clopen sets in a topological space then I can come up with a new finite set of clopens with the same union, such that every set in the second clopen is a subset of the set in the first clopen (so the second cover refines the first) and furthermore the sets in the second cover are pairwise disjoint.</p>\n<p>My instinct is that the \"proper\" way to do this would be to define <code>sub_boolean_algebra</code>, prove it's closed under arbitrary disjoint unions, define a <code>span</code> or <code>closure</code> operator (are we consistent on which one to use?) from <code>set (set X)</code> to <code>sub_boolean_algebra (set X)</code>, prove that the boolean algebra generated by a finite set is finite, pull back the subalgebra to an algebra and then invoke some classification theorem of finite boolean algebras saying that each element is a finite union of atoms (i.e. atoms generate even if you're not allowed to use <code>compl</code>). </p>\n<p>Do we have any of this, and how crazy is this strategy?</p>",
        "id": 231015372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616157352
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span></p>",
        "id": 231015382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616157361
    },
    {
        "content": "<p>We don't have any of this yet. I'm actually working on a refactor of Boolean algebras at the moment to insert <a href=\"https://en.wikipedia.org/wiki/Boolean_algebra_(structure)#Generalizations\">\"generalized Boolean algebras\"</a> (structures which only have <code>\\</code> and aren't guaranteed to have a <code>‚ä§</code> or <code>compl</code>) but afterwards I can take on some parts of this.</p>",
        "id": 231037181,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616166269
    },
    {
        "content": "<p>Do you have a mwe for this? I'd like to try playing with it</p>",
        "id": 231047279,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616169932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> The code is currently at <a href=\"https://github.com/leanprover-community/mathlib/tree/symm_diff_generalized_boolean_algebra\">branch#symm_diff_generalized_boolean_algebra</a>, but I anticipate making a PR either later today or tomorrow.</p>",
        "id": 231050544,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616171278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> oops sorry - I meant to reply to Kevin's original question</p>",
        "id": 231071200,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616179367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/structure.20theorem.20for.20finite.20boolean.20algebras/near/231047279\">said</a>:</p>\n<blockquote>\n<p>Do you have a mwe for this? I'd like to try playing with it</p>\n</blockquote>\n<p>From my side, it is under construction <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  I need it for a specific case of profinite spaces, but turns out to be more general than that.</p>",
        "id": 231073587,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1616180370
    }
]