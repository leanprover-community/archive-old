[
    {
        "content": "<p>Hello, I'm a math undergraduate and I'm now working on proving van kampen theorem, groupoid version.  In some part of the proof I need to cut a path <code>p  : path a z</code>into finite pieces <code>p1 : path a b, p2 : path b c... pn : path y z</code>, map these pieces into morphisms (<em>endpoints specified, so types are different</em>) <code>m1 : a -&gt; b,  m2: b -&gt; c ... mn : y -&gt; z </code> in a groupoid, and then compose them to get a single morphism <code> a-&gt;z </code>.  Now I've already managed to store the morphisms <code>m1 : a -&gt; b,  m2: b -&gt; c ... mn : y -&gt; z </code>  in <code>d_array</code>, but lfold doesn't work because it requires the output to be all of the same type.  What shall I do now? Perhaps I shall do some sort of induction?</p>",
        "id": 294968436,
        "sender_full_name": "Chiyu Zhou",
        "timestamp": 1661304270
    },
    {
        "content": "<p>There's also a concern that the endpoints may not be definitionally equal. i.e. I may need to compose <code>m1 : a - &gt;b, m2 : b' -&gt;c</code> but with a proof of <code>b = b'</code>. <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 294968652,
        "sender_full_name": "Chiyu Zhou",
        "timestamp": 1661304525
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.compose_path\">docs#category_theory.compose_path</a> is what you are looking for; you should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.path\">docs#quiver.path</a> instead of d_array. I don't know how your endpoints could be non-def-eq, but in category theory the way to compose morphisms with an equality proof at the endpoints is to insert a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category.eq_to_hom\">docs#category.eq_to_hom</a>.</p>",
        "id": 294972842,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661309301
    },
    {
        "content": "<p>I'm wondering whether we should make a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> instance on every topological space with <code>hom x y := path x y</code>.</p>",
        "id": 294973015,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661309490
    },
    {
        "content": "<p>We already have a quiver instance for all preorders IIRC. So that might give diamonds on ordered topological spaces.</p>",
        "id": 294974698,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661311246
    }
]