[
    {
        "content": "<p>Do we have the following, or something similar when <code>R</code> is a commutative semiring and <code>M</code>, <code>N</code>, <code>P</code>, <code>Q</code> are <code>R</code>-module? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_map.congr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 280637969,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1651241433
    },
    {
        "content": "<p>Or a variant with another semiring <code>S</code> and some <code>smul_comm_class R S _</code> in the case where <code>R</code> is not commutative.</p>",
        "id": 280638073,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1651241484
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.arrow_congr\">docs#linear_equiv.arrow_congr</a> ?</p>",
        "id": 280638649,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651241742
    },
    {
        "content": "<p>found with judicious regex</p>",
        "id": 280638666,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651241755
    },
    {
        "content": "<p>What does regex mean? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 280640870,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1651242761
    },
    {
        "content": "<p>regular expression</p>",
        "id": 280641059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651242870
    },
    {
        "content": "<p><a href=\"https://xkcd.com/208/\">https://xkcd.com/208/</a></p>",
        "id": 280641151,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651242927
    },
    {
        "content": "<p>I'd still also like a version that doesn't assume commutativity. Would that exist?</p>",
        "id": 280650761,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1651247363
    },
    {
        "content": "<p>I have a feeling that if you follow the rabbit-hole of generalisations from <a href=\"https://gist.github.com/riccardobrasca/725a5a8c1390cc8add3f31d43cf2881c\">https://gist.github.com/riccardobrasca/725a5a8c1390cc8add3f31d43cf2881c</a> (specifically line 5948 and downish) you'll be able to get this</p>",
        "id": 280651212,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651247560
    },
    {
        "content": "<p>in fact, this seems to work already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">arrow_congr</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">M₂₁</span> <span class=\"n\">M₂₂</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₂₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₂₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M₂₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M₂₁</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">M₂₁</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂₁</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂₁</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">M₂₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">$</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">e₁.symm</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₁</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e₂.symm</span> <span class=\"o\">:</span> <span class=\"n\">M₂₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">$</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">coe_comp</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">]},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_comp</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">]},</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">coe_comp</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">]},</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">coe_comp</span><span class=\"o\">,</span> <span class=\"n\">map_smulₛₗ</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">]}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(I just changed the types a little)</p>",
        "id": 280651758,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651247810
    },
    {
        "content": "<p>I'm surprised the linter didn't pick this up, maybe this is beyond the scope (cc <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> )</p>",
        "id": 280651800,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651247835
    },
    {
        "content": "<p>I think the most general version should probably involve another semiring <code>S</code> and <code>e₂</code> should be both <code>R</code>-linear and <code>S</code> linear (I don't even know if we have a way to talk about such doubly linear maps/equivs).</p>",
        "id": 280652299,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1651248046
    },
    {
        "content": "<p>For the application I have in mind I think I'll just state it with the explicit <code>e₂.to_linear_map ∘ₗ f ∘ₗ e₁.symm.to_linear_map</code>.</p>",
        "id": 280653280,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1651248535
    }
]