[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi>A</mi><mo>→</mo><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">f \\colon A \\to A_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi>B</mi><mo>→</mo><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">g\\colon B \\to B_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> be morphisms of groups, monoids... whatever. Do we have something like that the kernel of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>×</mo><mi>g</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi>A</mi><mo>×</mo><mi>B</mi><mo>→</mo><msub><mi>A</mi><mn>1</mn></msub><mo>×</mo><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">f \\times g \\colon A \\times B \\to A_1 \\times B_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is (isomorphic to) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ker</mi><mo>⁡</mo><mi>f</mi><mo>×</mo><mi>ker</mi><mo>⁡</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">\\ker f \\times \\ker g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">ker</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">ker</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>? Thank's!</p>",
        "id": 240434316,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622104058
    },
    {
        "content": "<p>As subobjects they should be equal on the nose. But I don't think we have this in mathlib.</p>",
        "id": 240434853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622104353
    },
    {
        "content": "<p>Do we have <code>subgroup.product</code> which takes the product of two subgroups and returns a subgroup of the product group?</p>",
        "id": 240434914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622104394
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.prod\">docs#submonoid.prod</a> , so I guess the other version are there too</p>",
        "id": 240435243,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622104626
    },
    {
        "content": "<p>But I didn't check</p>",
        "id": 240435252,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622104631
    },
    {
        "content": "<p>Do we even have a name for that product operation? It looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.map\">docs#prod.map</a>, but you want a monoid_hom version of it</p>",
        "id": 240435270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622104644
    },
    {
        "content": "<p>It might be near <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.fst\">docs#monoid_hom.fst</a></p>",
        "id": 240435313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622104671
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.prod_map\">docs#monoid_hom.prod_map</a></p>",
        "id": 240435452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622104729
    },
    {
        "content": "<p>Yes, the map is there. I will do the part about the kernel</p>",
        "id": 240435542,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622104798
    },
    {
        "content": "<p>And I agree that they should be equal, being subobjects...</p>",
        "id": 240435644,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622104843
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7729\">#7729</a><br>\nAm I missing something or we cannot speak about the kernel of a <code>monoid_hom</code>? Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.ker\">docs#monoid_hom.ker</a> is for groups.</p>",
        "id": 240461544,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622119817
    },
    {
        "content": "<p>Isn't there something like <code>mker</code>?</p>",
        "id": 240462984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622120437
    },
    {
        "content": "<p>This is the problem with not having <code>group_hom</code>, and using <code>monoid_hom</code> to do group homomorphisms.</p>",
        "id": 240463071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622120468
    },
    {
        "content": "<p>I don't see any way of producing the kernel of <code>f : G →* N</code> is <code>G</code> and <code>N</code> are only monoids. But to be honest I don't need it, I was just surprised by this.</p>",
        "id": 240463609,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622120670
    },
    {
        "content": "<p>Doesn't seem to be -- maybe the point is that the monoid hom kernel isn't very useful? (e.g. the image isn't cosets of the kernel etc)</p>",
        "id": 240463610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622120671
    },
    {
        "content": "<p>The correct object to have for a monoid hom is the equivalence relation defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>∼</mo><mi>h</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g\\sim h\\iff f(g)=f(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.71844em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span>. For groups, this equivalence relation is determined by the kernel, but for monoids it is not.</p>",
        "id": 240463739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622120741
    },
    {
        "content": "<p>Same thing applies for <code>ring_hom.sker</code> (to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.srange\">docs#ring_hom.srange</a>) which also doesn't exist. I think it's a combination of it not being very useful and the fact that adding it would result in a huge amount of work duplicating all the definitions</p>",
        "id": 240464076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622120892
    },
    {
        "content": "<p>I agree that it's not very useful :)</p>",
        "id": 240464207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622120974
    }
]