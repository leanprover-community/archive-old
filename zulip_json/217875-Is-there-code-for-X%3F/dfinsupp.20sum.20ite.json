[
    {
        "content": "<p>I couldn't find a dfinsupp analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_ite_self_eq'\">docs#finsupp.sum_ite_self_eq'</a>, would anyone like to find it for me or show me how to prove this quickly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.dfinsupp.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">W.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">W</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 267788474,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642022773
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.dfinsupp.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">W.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">W</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dfinsupp.sum</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267789085,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642023112
    },
    {
        "content": "<p>When in doubt, unfold! (But actually unfolding is usually not the right thing to do. However, I looked at the other <code>dfinsupp.prod</code> proofs in the file, and they also all unfolded.)</p>",
        "id": 267789169,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642023158
    },
    {
        "content": "<p>Ah, this explains a lot, I've had endless pain with <code>dfinsupp</code> in the past from trying to do everything through the API ... I never figured out how to unfold <code>dfinsupp.sum</code>!</p>",
        "id": 267789591,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642023452
    },
    {
        "content": "<p>It looks like you want to refold <code>dfinsupp.single</code> there?</p>",
        "id": 267796296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642026724
    },
    {
        "content": "<p>Then the statement is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.sum_single\">docs#dfinsupp.sum_single</a></p>",
        "id": 267796647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642026802
    },
    {
        "content": "<p>I don't see what you mean, sorry?  Mine has <code>W i</code> on the RHS, not <code>W</code>.</p>",
        "id": 267796817,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642026886
    },
    {
        "content": "<p>Ah you're right</p>",
        "id": 267796936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642026948
    },
    {
        "content": "<p>You could probably get there by pulling the application at <code>i</code> outside the sum and <code>ite</code>, but that's certainly not a direct proof any more</p>",
        "id": 267797108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642027055
    }
]