[
    {
        "content": "<p>Is there a lemma for the following example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k_lt</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">,</span>\n    <span class=\"n\">l.join.take</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">k</span> <span class=\"n\">k_lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">take</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I know about <code>list.take_sum_join</code> but I hope for something closer to my goal.</p>",
        "id": 305539550,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666446712
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.take_sum_join\">docs#list.take_sum_join</a> for reference)</p>",
        "id": 305544233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666448916
    },
    {
        "content": "<p>(the list has to be nontrivial)</p>",
        "id": 305544267,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666448947
    },
    {
        "content": "<p>I think it would be better to state it without the existential</p>",
        "id": 305546298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666449965
    },
    {
        "content": "<p>On the outside, I don't care how <code>k</code> and <code>q</code> relate to length of respective parts. How would you state my lemma instead?</p>",
        "id": 305546413,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666450032
    },
    {
        "content": "<p>By directly computing the <code>k</code> you need</p>",
        "id": 305546563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666450094
    },
    {
        "content": "<p>And putting that in the lemma statement</p>",
        "id": 305546575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666450103
    },
    {
        "content": "<p>At this point, I should probably prove my lemma and see whether I can easily extract a formula for <code>k</code> from it.</p>",
        "id": 305546907,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666450279
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Produces something akin to `(quotient, remainder)`, but unlike division the entry being subtracted is not the same each time -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.sub_list</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">nat.sub_list</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">r.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">r.2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305552370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666452828
    },
    {
        "content": "<p>I guess this generalizes to <code>tsub</code></p>",
        "id": 305553340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666453358
    },
    {
        "content": "<p><a href=\"https://github.com/user7230724/lean-projects/blob/master/src/list_take_join/main.lean\">Proof</a></p>",
        "id": 305634387,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1666512996
    },
    {
        "content": "<p>Wow! Thanks a lot!</p>",
        "id": 305756599,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666594056
    },
    {
        "content": "<p>Would you like to add it to mathlib? I can PR it if you want.</p>",
        "id": 305756634,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666594082
    },
    {
        "content": "<p>I would also add something similar for <code>list.drop</code>.</p>",
        "id": 305757012,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666594290
    },
    {
        "content": "<p>Feel free to PR it.</p>",
        "id": 305759628,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1666595608
    },
    {
        "content": "<p>OK, I will. Thanks a lot for your big help!!</p>",
        "id": 305759757,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666595655
    },
    {
        "content": "<p>I would like to make it a tiny bit stronger by adding <code>k &lt; (l.nth_le m hh).length</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.take_join</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">l.join.take</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"n\">hh</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">take</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 305768386,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666599464
    },
    {
        "content": "<p>(if we were to take all of the <code>m</code>th part, we would instead increment <code>m</code>)</p>",
        "id": 305768541,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666599542
    },
    {
        "content": "<p>(I don't have a use for <code>k &lt; (l.nth_le m hh).length</code> here, but I want to add this property to the <code>list.drop</code> version)</p>",
        "id": 305769127,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666599752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/list.2Ejoin.2Etake/near/305634387\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/user7230724/lean-projects/blob/master/src/list_take_join/main.lean\">Proof</a></p>\n</blockquote>\n<p>Is <code>import tactic.induction</code> redundant?</p>",
        "id": 305781674,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666604742
    },
    {
        "content": "<blockquote>\n<p>Is <code>import tactic.induction</code> redundant?</p>\n</blockquote>\n<p>Seems so.</p>\n<blockquote>\n<p>I would like to make it a tiny bit stronger by adding <code>k &lt; (l.nth_le m hh).length</code></p>\n</blockquote>\n<p>In that case you would also need <code>n &lt; l.join.length</code>. Besides that, keep in mind that <code>l</code> may also contain empty lists.</p>",
        "id": 305783744,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1666605594
    },
    {
        "content": "<p>Oh! I overlooked that I would then have to take 0 elements from the non-existent <code>l.length</code>th list.</p>",
        "id": 305784741,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666606010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/list.2Ejoin.2Etake/near/305759628\">said</a>:</p>\n<blockquote>\n<p>Feel free to PR it.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/list_take_join.20into.20mathlib\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/list_take_join.20into.20mathlib</a></p>",
        "id": 305789274,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666607844
    },
    {
        "content": "<p>I think that instead of <code>list.take_join_of_lt_length_join</code> and <code>list.take_join</code> I will make one \"export\" lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.take_join_of_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">notall</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.join.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">mlt</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"n\">mlt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">l.join.take</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"n\">mlt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">take</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>And similarly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.drop_join_of_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">notall</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.join.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">mlt</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"n\">mlt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">l.join.drop</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"n\">mlt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"n\">k</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">l.drop</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305800650,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666612250
    },
    {
        "content": "<p>[fixed an off-by-one error in the last statement]</p>",
        "id": 305813493,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666616364
    },
    {
        "content": "<p>Adding <code>k &lt; (l.nth_le m mlt).length</code> is easy. The <code>m</code> and <code>k</code> from the proof already satisfy it.</p>\n<p>The proof has been updated.</p>",
        "id": 305928335,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1666652814
    },
    {
        "content": "<p>Thanks a lot! I'll finally proceed to PR it (when I attempted it first, I got lost in imports, but I'll work harder this time to resolve it).</p>",
        "id": 306194144,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666774847
    }
]