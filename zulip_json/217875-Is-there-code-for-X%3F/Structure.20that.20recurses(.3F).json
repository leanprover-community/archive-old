[
    {
        "content": "<p>I want to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">inner_and_tensor_products</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_tensor_product</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_4</span> <span class=\"n\">u_5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>has_tensor_product</code> is some structure I haven't defined yet. The goal is to be able to, given the appropriate inner product and tensor product, be able to define a natural inner product on E ‚äó E, associativity axioms for ‚äó, etc. Of course this runs into an inherent problem with E ‚äó E being a different, larger type than E, so how do I do this?</p>",
        "id": 261954915,
        "sender_full_name": "The Leanest",
        "timestamp": 1637254249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448090\">@The Leanest</span> Are you sure that's what you want?  Why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">inner_product_space</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">‚äó</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 261956471,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637254774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Simply put, because I want this to work for arbitrary tensor products as long as it satisfies certain axioms.</p>",
        "id": 261958384,
        "sender_full_name": "The Leanest",
        "timestamp": 1637255460
    },
    {
        "content": "<p>Same as how inner_product_space doesn't demand the inner product based on the L2 norm be the one you use</p>",
        "id": 261958477,
        "sender_full_name": "The Leanest",
        "timestamp": 1637255503
    },
    {
        "content": "<p>Can you alter the definition of <code>has_tensor_product</code>, perhaps by splitting it up into a couple typeclasses, so that it can be defined before <code>inner_and_tensor_products</code>?</p>\n<p>It can be useful having two sorts of typeclasses: ones that give the raw data of something, with few or no associated properties (for example, <code>has_add</code>), and ones that add additional properties to these.</p>\n<blockquote>\n<p>Of course this runs into an inherent problem with E ‚äó E being a different, larger type than E, so how do I do this?</p>\n</blockquote>\n<p>I'm not sure I follow -- are you putting the data of how to form tensor products into a structure for <code>E</code> itself? Could you give an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for what you're observing?</p>",
        "id": 261962004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637257010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> By \"some structure I haven't defined yet\" I don't mean that it will be defined later in the file but rather that I haven't written it yet, as one basic axiom a tensor product should satisfy is <em>associativity</em>. Since that, at least to my knowledge, inherently requires the feature I'm requesting, I cannot write the structure until I know how to do this.</p>",
        "id": 261971249,
        "sender_full_name": "The Leanest",
        "timestamp": 1637261048
    },
    {
        "content": "<p>Is the problem you're trying to solve that you want <em>strict</em> associativity? I'm still not sure what you're going for -- even a minimal nonworking example using the feature that you wish were there might be helpful.</p>",
        "id": 261971951,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637261397
    },
    {
        "content": "<p>If it's about strict associativity, here's an example for making a strictly associative cartesian product. The main idea is that you create a new type that represents abstract products, and you only turn it into a type when you need it. (It uses typeclass and coercion trickery to make it appear seamless. Don't know how it holds up in practice.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">strict_prod</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">strict_prod</span>\n<span class=\"bp\">|</span> <span class=\"n\">left_prod</span> <span class=\"o\">:</span> <span class=\"n\">strict_prod</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">strict_prod</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">strict_prod</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">strict_prod</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">strict_prod</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">strict_prod</span> <span class=\"n\">Œ±</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">left_prod</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">left_prod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">left_prod</span> <span class=\"o\">(</span><span class=\"n\">p.prod</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_type</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">strict_prod</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">Œ±</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">left_prod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">p.to_type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">strict_prod</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">to_type</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">strict_prod</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_strict_prod</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">strict_prod</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[priority 0]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">strict_prod_lift</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_prod</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">strict_prod.one</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">strict_prod_keep</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">strict_prod</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_prod</span> <span class=\"n\">p</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">p</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk_strict_prod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_strict_prod</span> <span class=\"n\">p</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_strict_prod</span> <span class=\"n\">q</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">strict_prod</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">has_strict_prod.prod</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">has_strict_prod.prod</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">√ó'</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"o\">:=</span> <span class=\"n\">mk_strict_prod</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó'</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó'</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó'</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">√ó'</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">27:56: type mismatch, term</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Œ± √ó Œ± √ó Œ±</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  (Œ± √ó Œ±) √ó Œ±</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 261977677,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637263691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Structure.20that.20recurses.28.3F.29/near/261977677\">said</a>:</p>\n<blockquote>\n<p>If it's about strict associativity, here's an example for making a strictly associative cartesian product. The main idea is that you create a new type that represents abstract products, and you only turn it into a type when you need it. (It uses typeclass and coercion trickery to make it appear seamless. Don't know how it holds up in practice.)</p>\n</blockquote>\n<p>Thank you! I'll look into this!</p>",
        "id": 261982721,
        "sender_full_name": "The Leanest",
        "timestamp": 1637265810
    }
]