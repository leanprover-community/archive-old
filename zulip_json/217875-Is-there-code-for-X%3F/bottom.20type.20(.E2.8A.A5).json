[
    {
        "content": "<p>Is there a bottom type ⊥ in Lean4?</p>\n<p>For example, in Haskell you might write:<br>\n<code>\nf:: Bool -&gt; Bool\nf = undefined\n</code><br>\nand that works because \"undefined\" evaluates to bottom, which is a member of Bool and any type.<br>\nBut in lean I tried<br>\n<code>def f (α : Bool) : Bool := none</code><br>\nand got a type mismatch.  So I guess \"none\" isn't it.</p>",
        "id": 309285224,
        "sender_full_name": "Robert Osazuwa Ness",
        "timestamp": 1668220795
    },
    {
        "content": "<p>Do you mean <code>False</code>?</p>",
        "id": 309285289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668220848
    },
    {
        "content": "<p>Or maybe you're looking for <code>⊥</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_bot\">docs#has_bot</a> in mathlib)</p>",
        "id": 309285303,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668220891
    },
    {
        "content": "<p>No, there is no bottom value in the haskell sense. Indeed if there was you could use it to prove any proposition and hence trivialize the logical content of the theory</p>",
        "id": 309285799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668221434
    },
    {
        "content": "<p>(nit: <code>undefined</code> is a bottom <em>value</em> inhabiting every type, not a bottom <em>type</em>. As Yael says, a bottom type is one with no elements and lean has <code>False</code> for the bottom type in the universe of propositions and <code>Empty</code> for the bottom type in <code>Type</code>.)</p>",
        "id": 309285890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668221562
    },
    {
        "content": "<p>So Lean must then have some mechanism prohibiting non-terminating expressions?  What is that? Sorry, I think I read about this somewhere but can't recall where, I'm coming back to learning Lean a brief pause.</p>",
        "id": 309286245,
        "sender_full_name": "Robert Osazuwa Ness",
        "timestamp": 1668221967
    },
    {
        "content": "<p>All recursive functions have to decrease along some well founded metric</p>",
        "id": 309286352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668222060
    },
    {
        "content": "<p>in many cases lean can infer an appropriate relation on its own but if it fails you can use the <code>termination_by</code> clause to supply your own</p>",
        "id": 309286422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668222127
    },
    {
        "content": "<p>in particular <code>def foo : p := foo</code> is not accepted</p>",
        "id": 309286465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668222199
    },
    {
        "content": "<p>err<br>\nlean has <code>sorry</code> which functions almost exactly the same as <code>undefined</code> in haskell. It is an axiom which can inhabit any value, and you use it when you can't prove something <em>yet</em>.<br>\nbut it should never be used in proofs or code that exists (and in fact you can figure this out by checking if the definition depends on <code>sorryAx</code>)</p>",
        "id": 309287121,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1668222960
    },
    {
        "content": "<p>I suppose <code>sorry</code> is an answer to any thread in this channel<br>\nbut I think it deserves special mention as a potential \"bottom value\"</p>",
        "id": 309287185,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1668223012
    },
    {
        "content": "<p>that's true, but <code>sorry</code> has special handling and lean will give you grief if you use it</p>",
        "id": 309287466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668223326
    },
    {
        "content": "<p>you can also make your own axioms and use them to prove false things if you want. Lean won't even complain in that case</p>",
        "id": 309287491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668223353
    }
]