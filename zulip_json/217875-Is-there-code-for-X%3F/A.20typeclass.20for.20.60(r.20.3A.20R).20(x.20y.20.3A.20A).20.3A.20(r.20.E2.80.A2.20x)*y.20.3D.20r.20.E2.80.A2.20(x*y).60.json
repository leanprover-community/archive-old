[
    {
        "content": "<p>This lemma exists as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_mul_assoc\">docs#smul_mul_assoc</a>, but that requires <code>A</code> to be an algebra.</p>\n<p>This property also holds for <code>A = α →₀ R</code>, but there can be no algebra instance on <code>α →₀ R</code> because it has no <code>1</code>.</p>",
        "id": 222599469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610552491
    },
    {
        "content": "<p>So is there a typeclass that can be extracted from algebra that sits somewhere between <code>algebra</code> and <code>semimodule</code>?</p>",
        "id": 222599621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610552532
    },
    {
        "content": "<p>I guess you can fake it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower\">docs#is_scalar_tower</a> combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_eq_mul\">docs#smul_eq_mul</a>?</p>",
        "id": 222601529,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610553191
    },
    {
        "content": "<p>Not if <code>R</code> is not commutative I can't</p>",
        "id": 222606183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610554983
    },
    {
        "content": "<p>But I guess I don't really care about that case</p>",
        "id": 222606246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610555018
    },
    {
        "content": "<p>Can you give a sketch of the <code>is_scalar_tower</code> solution? What I have right now is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.pointwise</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_smul_comm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">smul_mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finsupp</span>\n</code></pre></div>\n<p>What arguments are you suggesting I instantiate <code>is_scalar_tower</code> with in order to avoid needing to define <code>finsupp.mul_smul_comm</code> at all?</p>",
        "id": 222606813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610555270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/A.20typeclass.20for.20.60(r.20.3A.20R).20(x.20y.20.3A.20A).20.3A.20(r.20.E2.80.A2.20x)*y.20.3D.20r.20.E2.80.A2.20(x*y).60/near/222606813\">said</a>:</p>\n<blockquote>\n<p>Can you give a sketch of the <code>is_scalar_tower</code> solution?</p>\n</blockquote>\n<p>You are right, I can't really put anything together that works nicely. I guess the best is indeed to add a new class in between <code>semimodule</code> and <code>algebra</code>.</p>",
        "id": 222620904,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610560931
    }
]