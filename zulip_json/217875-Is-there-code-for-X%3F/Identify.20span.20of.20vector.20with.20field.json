[
    {
        "content": "<p>I have some <a href=\"https://github.com/leanprover-community/mathlib/tree/topological-dual\">draft code</a> for the topological dual of a normed space, including the corollary of Hahn-Banach needed for the isometric inclusion in the double dual.  (Hopefully this is not stepping on <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> 's toes.)  For the Hahn-Banach corollary, I wrote out <a href=\"https://github.com/leanprover-community/mathlib/compare/topological-dual#diff-3a0592f86d7cb753861e09d9fdbaa4a7R54\">many, many facts</a> which might well exist already, somewhere in the linear algebra libraries.  Summary to follow.  Any pointers?</p>",
        "id": 200055946,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591588053
    },
    {
        "content": "<p>Summary:  If <code>E</code> is a vector space over  <code>ùïú</code> and <code>x</code> is a nonzero element, we can identify <code>span x</code> with <code> ùïú</code>.  Moreover, if <code>E</code> is a normed space, this identification preserves norms.</p>",
        "id": 200055953,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591588074
    },
    {
        "content": "<p>I rolled-my-own <code>span</code> for now, because I could not find a library entry for the natural map from <code>ùïú</code> to <code>span x</code>.</p>",
        "id": 200056087,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591588282
    },
    {
        "content": "<p>Couldn't you reuse the existing span, but add the natural map?</p>",
        "id": 200057218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591590220
    },
    {
        "content": "<p><code>deriv</code>s use <code>linear_map.id.smul_right x</code> for <code>span_map</code>. Possibly we should have a <code>def</code> for this.</p>",
        "id": 200057696,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591590946
    },
    {
        "content": "<p>Instead of using <code>def span</code> please add <code>lemma span_map_range : range (span_map x) = span {x}</code>.</p>",
        "id": 200057743,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591590996
    },
    {
        "content": "<p>I'm not going to formalize any corollaries of Hahn-Banach in the nearest future.</p>",
        "id": 200057820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591591130
    },
    {
        "content": "<p>Great, I will do this tomorrow.  I will put <code>span_map</code> and friends in <code>linear_algebra.basic</code>, and perhaps the facts about the norm-preserving properties of <code>span_map</code> belong in <code>normed_space.basic</code>.  Any opinions on conventionalizing the names?  The maps needing baptism are <code>span_map</code>, its <code>linear_equiv</code> version (currently <code>span_equiv</code>), its inverse (currently <code>coord</code>), and its inverse considered as a bounded linear map (currently <code>coord_bdd</code>).</p>",
        "id": 200058685,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591592536
    },
    {
        "content": "<p>I have no ideas. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ?</p>",
        "id": 200058702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591592593
    },
    {
        "content": "<p>It would be good if we could think of something that will also give the natural map for <code>span {x,y}</code></p>",
        "id": 200058860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591592823
    },
    {
        "content": "<p>But everything I can think of becomes ugly</p>",
        "id": 200058873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591592841
    },
    {
        "content": "<p>Yes, absolutely.  Please tell me if you think of something!  I will pick it up tomorrow.</p>",
        "id": 200058932,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591592890
    }
]