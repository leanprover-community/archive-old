[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">gsmul_eq_smul</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ n • x = n • x</span>\n  <span class=\"n\">congr&#39;</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ finsupp.has_scalar = mul_action.to_has_scalar</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I'm stuck</p>",
        "id": 207965782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598363866
    },
    {
        "content": "<p>does <code>ext</code> help?</p>",
        "id": 207966178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598364043
    },
    {
        "content": "<p>yes</p>",
        "id": 207966965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598364428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">module</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207967039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598364472
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207967135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598364497
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">gsmul_eq_smul_cast</span> <span class=\"bp\">ℤ</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_id</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 207967269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598364587
    },
    {
        "content": "<p>Thanks</p>",
        "id": 207967276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598364591
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The natural ℤ-module structure on any `add_comm_group`. -/</span>\n<span class=\"c1\">-- We don&#39;t immediately make this a global instance, as it results in too many instances,</span>\n<span class=\"c1\">-- and confusing ambiguity in the notation `n • x` when `n : ℤ`.</span>\n<span class=\"c1\">-- We do turn it into a global instance, but only at the end of this file,</span>\n<span class=\"c1\">-- and I remain dubious whether this is a good idea.</span>\n<span class=\"n\">def</span> <span class=\"n\">int_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">ℤ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>(Scott said this in <code>algebra.module.basic</code>). This is exactly what I've been seeing with finsupp.</p>\n<p>I think these are missing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_nsmul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span><span class=\"bp\">ℕ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">add_nsmul</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">one_nsmul</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_gsmul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">n</span> <span class=\"n\">rfl</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_one_gsmul</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_gsmul</span><span class=\"o\">,</span> <span class=\"n\">sub_apply</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">sub_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">one_gsmul</span><span class=\"o\">,</span> <span class=\"n\">sub_apply</span> <span class=\"o\">])</span>\n</code></pre></div>",
        "id": 207996128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598377487
    },
    {
        "content": "<p>aah Chris just pointed out that these are special cases of <code>module.gsmul_eq_smul</code> etc.</p>",
        "id": 207997467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598378112
    }
]