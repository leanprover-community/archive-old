[
    {
        "content": "<p>I was not able to find the following in <code>mathlib</code>.  Is it missing? It's true that the proof is quite straightforward but I think it could be useful to have. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.abstract_completion</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">abstract_completion.complete_equiv_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">abstract_completion</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pkg.space</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">abstract_completion.compare_equiv</span> <span class=\"n\">pkg</span> <span class=\"o\">(</span><span class=\"n\">abstract_completion.mk</span> <span class=\"n\">α</span> <span class=\"n\">id</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">uniform_inducing_id</span>\n  <span class=\"o\">(</span><span class=\"n\">function.surjective.dense_range</span> <span class=\"n\">function.surjective_id</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 300371430,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663941439
    },
    {
        "content": "<p>Are you sure you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion\">docs#abstract_completion</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion\">docs#uniform_space.completion</a>?</p>",
        "id": 300372687,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663941765
    },
    {
        "content": "<p>Hmm, I don't see the theorem even for \"the\" completion</p>",
        "id": 300373020,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663941867
    },
    {
        "content": "<p>Why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion.compare_equiv\">docs#abstract_completion.compare_equiv</a> not a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_equiv\">docs#uniform_equiv</a>?</p>",
        "id": 300373426,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663941996
    },
    {
        "content": "<p>Probably because we forgot to do so</p>",
        "id": 300373587,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663942037
    },
    {
        "content": "<p>Indeed what we want is, for a complete space <code>α</code>, an element of <code>abstract_completion α</code>, given by <code>α</code> itself.</p>",
        "id": 300374346,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663942219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Completion.20of.20a.20complete.20space/near/300372687\">said</a>:</p>\n<blockquote>\n<p>Are you sure you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion\">docs#abstract_completion</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion\">docs#uniform_space.completion</a>?</p>\n</blockquote>\n<p>I thought that if the result holds for <code>abstract_completion</code> then we can deduce the same for any completion, so the equivalent statement for <code>uniform_completion</code> should follow.</p>",
        "id": 300375915,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663942637
    },
    {
        "content": "<p>Sure, I just thought maybe the result was already there for <code>uniform_completion</code>, but I don't see it.</p>",
        "id": 300376384,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663942760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Completion.20of.20a.20complete.20space/near/300373426\">said</a>:</p>\n<blockquote>\n<p>Why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion.compare_equiv\">docs#abstract_completion.compare_equiv</a> not a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_equiv\">docs#uniform_equiv</a>?</p>\n</blockquote>\n<p>Because it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_equiv\">docs#uniform_equiv</a> didn't exist until a few months ago</p>",
        "id": 300377294,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663943017
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.completion</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">abstract_completion.complete_equiv_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">abstract_completion</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pkg.space</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">abstract_completion.compare_equiv</span> <span class=\"n\">pkg</span> <span class=\"o\">(</span><span class=\"n\">abstract_completion.mk</span> <span class=\"n\">α</span> <span class=\"n\">id</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">uniform_inducing_id</span>\n  <span class=\"o\">(</span><span class=\"n\">function.surjective.dense_range</span> <span class=\"n\">function.surjective_id</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">uniform_completion.complete_equiv_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">α</span><span class=\"o\">]:</span>\n<span class=\"n\">uniform_space.completion</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">abstract_completion.complete_equiv_self</span> <span class=\"n\">uniform_space.completion.cpkg</span>\n</code></pre></div>",
        "id": 300377441,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663943046
    },
    {
        "content": "<p>Should I just PR those results? <br>\nOh, I see maybe I should prove those with <code>uniform_equiv</code> first, I guess.</p>",
        "id": 300377618,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663943102
    },
    {
        "content": "<p>I'd say what should be in mathlib is:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion.compare_equiv\">docs#abstract_completion.compare_equiv</a> upgraded to a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_equiv\">docs#uniform_equiv</a></li>\n<li>a complete space is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion\">docs#abstract_completion</a> of itself</li>\n</ul>",
        "id": 300378159,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663943259
    },
    {
        "content": "<p>Maybe we want <code>inhabitated (abstract_completion α)</code>, but I am not sure</p>",
        "id": 300378186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663943267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Completion.20of.20a.20complete.20space/near/300378186\">said</a>:</p>\n<blockquote>\n<p>Maybe we want <code>inhabitated (abstract_completion α)</code>, but I am not sure</p>\n</blockquote>\n<p>No because we want the one with <code>pkg.space = \\alpha</code> I think</p>",
        "id": 300378353,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663943308
    },
    {
        "content": "<p>This is why I said <code>inhabitated</code> and not <code>nonempty</code>, but I don't really care</p>",
        "id": 300379379,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663943578
    },
    {
        "content": "<p>In any case we want to say that <code>α</code> is an abstract completion of <code>α</code></p>",
        "id": 300379549,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663943624
    },
    {
        "content": "<p>Upgrading <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_completion.compare_equiv\">docs#abstract_completion.compare_equiv</a> upgraded to a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_equiv\">docs#uniform_equiv</a> is fairly easy: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.completion</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">abstract_completion</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">abstract_completion</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">pkg'</span> <span class=\"o\">:</span> <span class=\"n\">abstract_completion</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">pkg.space</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.uniform_struct</span>\n\n<span class=\"sd\">/-- The bijection between two completions of the same uniform space. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">abstract_completion.compare_equiv0</span> <span class=\"o\">:</span> <span class=\"n\">pkg.space</span>  <span class=\"bp\">≃ᵤ</span> <span class=\"n\">pkg'.space</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.compare</span> <span class=\"n\">pkg'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">pkg'.compare</span> <span class=\"n\">pkg</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">pkg'.inverse_compare</span> <span class=\"n\">pkg</span><span class=\"o\">),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">pkg.inverse_compare</span> <span class=\"n\">pkg'</span><span class=\"o\">),</span>\n  <span class=\"n\">uniform_continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">uniform_continuous_compare</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">uniform_continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">uniform_continuous_compare</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 300380943,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663943992
    },
    {
        "content": "<p>Although I needed to make an <code>instance</code> to say that <code>pkg.space</code> is a <code>uniform_space</code> to be able to state the result. I don't know if there is another way to do that without using an <code>instance</code>...</p>",
        "id": 300381339,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663944084
    },
    {
        "content": "<p>I do not know enough about <code>inhabited</code> to answer to that... </p>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Completion.20of.20a.20complete.20space/near/300378186\">said</a>:</p>\n<blockquote>\n<p>Maybe we want <code>inhabitated (abstract_completion α)</code>, but I am not sure</p>\n</blockquote>",
        "id": 300381736,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663944183
    },
    {
        "content": "<p><code>inhabited X</code> just means that there is an element of <code>X</code>, in some sense \"canonical\". In practice you can obtain this fixed element via <code>p.default</code> if <code>p : inhabited X</code></p>",
        "id": 300383204,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663944562
    },
    {
        "content": "<p>but really, this is not really important, once you have the element it's more or less the same</p>",
        "id": 300383522,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663944634
    },
    {
        "content": "<p>The instance was already registered locally via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span>\n<span class=\"n\">abstract_completion.uniform_struct</span>\n</code></pre></div>\n<p>So if you add <code>abstract_completion.compare_equiv0</code> to the same file (same section, actually) it would just work. (Notice that it's also impossible to state <code>uniform_continuous_compare</code> without the instance.)</p>",
        "id": 300408733,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663951542
    },
    {
        "content": "<p>I opened a PR with the results <a href=\"https://github.com/leanprover-community/mathlib/pull/16612\">#16612</a></p>",
        "id": 300438778,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663962007
    }
]