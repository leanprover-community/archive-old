[
    {
        "content": "<p>Do we have this somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_monic_map_eq_of_mem_range</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">polynomial.map_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">p.monic</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">p'.monic</span> <span class=\"bp\">∧</span> <span class=\"n\">p'.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291538025,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659336977
    },
    {
        "content": "<p>I just proved this a while ago, see <a href=\"https://gist.github.com/alreadydone/ab2de3d78ca1288ff96456d4c799b6ee\">this gist</a>. Feel free to PR!<br>\n<span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/330515-LftCM22/topic/quadratic.20fields/near/289810340\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_map_of_frange_subset_srange</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">p.frange</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">f.srange</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q.map</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p.monic</span> <span class=\"bp\">→</span> <span class=\"n\">q.monic</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Its proof would be much easier if <code>f</code> is injective because <code>f.srange</code> would then be isomorphic to A and we can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map\">docs#polynomial.map</a>. I might PR them some time but feel free to PR them for me if you need the result soon.</p>\n</blockquote>",
        "id": 291539082,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659337989
    },
    {
        "content": "<p>Ah. I am also using it to prove the same result!<br>\nI think this result is slightly more general than your <code>eq_smul_is_integral_of_is_localization</code> though?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_localization.exists_multiple_is_integral</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R'</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_localization</span> <span class=\"n\">M</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">R'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291541667,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659340199
    },
    {
        "content": "<p>That's interesting! I know it has to be useful somewhere because it's mentioned in <a href=\"https://math.stackexchange.com/a/119134/12932\">here</a>. The <code>d</code> I get from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.common_denom\">docs#is_localization.common_denom</a> in the proof of <code>frange_scale_roots_subset_srange</code> is in M, so you just need to not forget that information to get your desired result.</p>",
        "id": 291544546,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659342277
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.lifts_and_degree_eq_and_monic\">docs#polynomial.lifts_and_degree_eq_and_monic</a> when finding where the result should go for the PR.</p>",
        "id": 291659657,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659409981
    },
    {
        "content": "<p>Nice find! I didn't know the file <code>lifts</code> exists. Turns out it was proven by <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> in <a href=\"https://github.com/leanprover-community/mathlib/pull/4796\">#4796</a>, and although he saw my earlier post, he didn't point this out to me ... Maybe because he's forgotten about his own work :) or because the lemma was at the bottom of the post.</p>\n<p>So it seems that <code>lifts</code> is the right way to state the lemma, and I guess you can the existing lemma directly. My lemma <code>eq_map_of_frange_subset_srange</code> subsumes <code>polynomial.mem_lifts_and_degree_eq</code> and <code>polynomial.lifts_and_degree_eq_and_monic</code> and is shorter than them combined, but is stated in a slightly different way, so it would need some work to golf the existing proofs,</p>",
        "id": 291676494,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659427054
    },
    {
        "content": "<p>I added a lemma in terms of <code>nat_degree</code> and removed the <code>nontrivial</code> instance consequently. There might also be benefits of unifying all the lemma there and golf it using your approach, but I think it the result are as strong as yours for now and I refrained from doing a complete refactor. <br>\nThe PR is at <a href=\"https://github.com/leanprover-community/mathlib/pull/15809\">#15809</a> (with <code>is_integral.exists_multiple_integral_of_is_localization</code>) if you are interested.</p>",
        "id": 291678194,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659428217
    },
    {
        "content": "<p>I don't remember seeing your post, but it's very possible I didn't notice <code>lift</code> was relevant. In any case I am very happy if someone uses it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 291706503,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659445890
    },
    {
        "content": "<p><a href=\"#narrow/stream/330515-LftCM22/topic/quadratic.20fields/near/289825974\">This</a> was your reply to my earlier post; you certainly saw it but maybe not that specific part? Or because it's stated in terms of <code>frange</code> <code>srange</code> instead of <code>lifts</code> you didn't recognize.</p>\n<blockquote>\n<p>Since this is strictly more general than a lemma already in the library I suggest to PR it as soon as possible. Short PRs are very welcome, and generalization is usually uncontroversial, so it can be merged quickly and then it won't be your problem to maintain the proof. (Mathlib changes very quickly, so a proof working today can be broken tomorrow.)</p>\n</blockquote>",
        "id": 291717355,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659450661
    },
    {
        "content": "<p>You're totally right, I simply didn't think to <code>lift</code>, I am sorry!</p>",
        "id": 291736641,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659459084
    },
    {
        "content": "<p>Never mind <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I'm just hoping I knew it earlier so Andrew could save the time looking for it.</p>",
        "id": 291742745,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659462028
    },
    {
        "content": "<p>In any case, I am very grateful that this is already in mathlib since the PR process is tedious. Thanks for the work!</p>",
        "id": 291744508,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659462926
    }
]