[
    {
        "content": "<p>Did I miss this somewhere in the library?  If not, where should it go, and is there any meaningful generalization to some bigger class of ordered semirings than <code>ℝ</code> itself?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.is_lub_mul</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">s</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_lub</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">is_lub_singleton</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_iff_right</span> <span class=\"n\">hs.nonempty</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">(</span><span class=\"n\">hs.1</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hc.le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">B</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">le_div_iff'</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hs.2</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_div_iff'</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hB</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265887782,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640241000
    },
    {
        "content": "<p>(It's true for <code>ℝ≥0</code> but the proof looks different because it uses the <code>nnreal</code> rather than <code>ordered_field</code> versions of <code>le_div_iff'</code>.)</p>",
        "id": 265887849,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640241065
    },
    {
        "content": "<p>This is probably true for any continuous monotone function I guess, rather than just multiplication by c&gt;=0</p>",
        "id": 265888095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640241376
    },
    {
        "content": "<p>Ah, so maybe I can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.is_lub_image\">docs#order_iso.is_lub_image</a>  ...</p>",
        "id": 265888272,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640241710
    },
    {
        "content": "<p>A little faster now, but the trivial case is still ugly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.is_lub_mul</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">s</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_lub</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">is_lub_singleton</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_iff_right</span> <span class=\"n\">hs.nonempty</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">order_iso.mul_left₀</span> <span class=\"n\">_</span> <span class=\"n\">hc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_lub_image'</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hs</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265888558,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640242145
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/data/real/pointwise\">file#data/real/pointwise</a> is me proving similar stuff using the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> has default value <code>0</code>.</p>",
        "id": 265889702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640243608
    },
    {
        "content": "<p>Nice!  I just realized that in fact the version I wrote works over an arbitrary linear ordered field, which explains where I should put it.  Maybe you could deduce your versions (which further requires the conditional completeness -- so, basically, <code>ℝ</code>) from it.</p>",
        "id": 265889914,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640243844
    },
    {
        "content": "<p>Probably, yeah! I was about to say that your lemmas were the first part of my proof, but that's not really the case because I went through more real-specific lemmas.</p>",
        "id": 265890027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640243970
    },
    {
        "content": "<p>In my case, we need a refactor of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_lattice\">docs#conditionally_complete_lattice</a> to unbundle the default value, or create a class which states the default value.</p>",
        "id": 265890086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640244006
    }
]