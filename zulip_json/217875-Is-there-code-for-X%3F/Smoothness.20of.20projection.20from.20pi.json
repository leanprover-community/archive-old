[
    {
        "content": "<p>I note that though we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_diff_fst\">docs#times_cont_diff_fst</a>, we do not seem to have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.times_cont_diff</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">times_cont_diff_apply</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does this follow trivially from something we do have?</p>",
        "id": 262815087,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637944326
    },
    {
        "content": "<p>I also note that we do have the corresponding result for continuity (in fact even in the dependent case): <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_apply\">docs#continuous_apply</a></p>",
        "id": 262815128,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637944367
    },
    {
        "content": "<p>Do we have it with the spelling <code>times_cont_diff 𝕜 m (function.eval i : _ → Z)</code>?</p>",
        "id": 262818899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637946852
    },
    {
        "content": "<p>I don't believe we do.</p>",
        "id": 262819026,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637946950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> It's smooth because it's linear!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">times_cont_diff_apply</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_linear_map.proj</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n</code></pre></div>",
        "id": 262835876,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637962029
    },
    {
        "content": "<p>Ha ha, of course <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♂️ Thank you very much 🙂</p>",
        "id": 262836188,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637962425
    }
]