[
    {
        "content": "<p>I'm making a thing, and the thing is an <code>add_comm_group</code>. I am happy to prove <code>add_assoc</code>, <code>add_comm</code>, <code>zero_add</code> and <code>add_left_neg</code>, but I don't really want to prove <code>add_zero</code> because these proofs are a bit tedious and I want to deduce it from what we have already. But I don't know how to <code>rw add_comm</code> where <code>add_comm</code> refers to the field I just filled in a few lines above. </p>\n<p>If I could figure out how to do the rewrites here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk''</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- happy to prove this</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- and this</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- and this</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- and this</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"c1\">-- but now I want to cheat and can't get this to work:</span>\n  <span class=\"c1\">-- `by{rw add_comm, apply add_left_neg }, -- I mean \"the proofs I just did above\"`</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>then I guess we don't need another constructor, but I couldn't so I wrote this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">ax1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">ax2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ax3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ax4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">ax1</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">ax3</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">ax2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ax3</span> <span class=\"n\">a</span><span class=\"o\">},</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">ax4</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">ax2</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is that constructor already in mathlib, and if not then should it be?</p>",
        "id": 309627820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668439567
    },
    {
        "content": "<p>I guess this is really a  constructor for <code>comm_monoid</code> , which you can use with the <code>..</code> notation if you want to make a group</p>",
        "id": 309628974,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668439894
    },
    {
        "content": "<p>You could do something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk''</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"k\">in</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- happy to prove this</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>  <span class=\"c1\">-- and this</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- and this</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- and this</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"c1\">-- but now I want to cheat and can't get this to work:</span>\n  <span class=\"c1\">-- `by{rw h1, apply add_left_neg }, -- I mean \"the proofs I just did above\"`</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 309629760,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668440140
    },
    {
        "content": "<p>Is there any reason to worry about bad definitional unfolding (of <code>add</code>) caused by using this <code>let</code> binding? I think I did something like this somewhere but a reviewer advised against it because of definitional unfolding; I can't remember which PR offhand though, so maybe the situation is different.</p>",
        "id": 309899534,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668443356
    },
    {
        "content": "<p>The <code>h1</code> in my suggestion is a proof of a prop so it shouldn't cause any defeq issues</p>",
        "id": 309904258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668444805
    },
    {
        "content": "<p>it may not look to nice if you unfold the <code>add_comm_group</code> instance in a proof (you would see a <code>let ... in ...</code> in the tactic state), but a dsimp should eliminate that <code>let</code>, and one shouldn't really unfold instances to begin with.</p>",
        "id": 309905011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668445015
    },
    {
        "content": "<p>This might not be true in Kevin's case, but most of the time when I find myself proving <code>add_comm_group G</code> I find that <code>add_comm_monoid G</code> is actually true in a more general case, and so you should really just prove that first.</p>",
        "id": 309905049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668445025
    },
    {
        "content": "<p>I don't really want to write the statement of add_comm either. Is there any reason not to add the constructor?</p>",
        "id": 310062037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668453437
    },
    {
        "content": "<p>In tactic mode, there is a trick like this, without writing the statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span> <span class=\"c\">/-</span><span class=\"cm\"> the `add_left_neg` field -/</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"o\">},</span> <span class=\"c\">/-</span><span class=\"cm\"> the `add_zero` field -/</span>\n  <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"> now prove `this` -/</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This trick can also be used to do wlog. It would be nice if Lean could support it natively.</p>",
        "id": 310064420,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668454128
    },
    {
        "content": "<p>you can do this in lean 4 using <code>?a</code> in both places</p>",
        "id": 310064886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668454234
    },
    {
        "content": "<p>Oh I forgot: you also still need to prove <code>this</code> in the end. (edited)</p>",
        "id": 310065610,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668454466
    },
    {
        "content": "<p>ha ha I suspect that this will work in my use case :-)</p>",
        "id": 310066504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668454736
    },
    {
        "content": "<p>Is there a way to translate this proof faithfully into Lean 4? I did it manually in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1399/files#diff-abf2e060ea259a44cfdbe2163859a959346999a0d8baa3ca07cb87f5c188170dR744\">mathlib4#1399</a> but had to write out the sublemma <code>∀ b c, r b c → f a c = f a b * f b c</code>. I tried to use <code>?_</code> but didn't succeed in the end. Also it seems I get strange error when I write <code>have : ...</code> without following it by <code>:=</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiplicative_of_total</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">is_total</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hswap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hbc</span> <span class=\"bp\">|</span> <span class=\"n\">hcb</span> <span class=\"o\">:=</span> <span class=\"n\">t.total</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hswap</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hab</span> <span class=\"bp\">|</span> <span class=\"n\">hba</span> <span class=\"o\">:=</span> <span class=\"n\">t.total</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hmul</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hac</span> <span class=\"bp\">|</span> <span class=\"n\">hca</span> <span class=\"o\">:=</span> <span class=\"n\">t.total</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hmul</span> <span class=\"n\">hba</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hswap</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">hswap</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hmul</span> <span class=\"n\">hbc</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hswap</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319990590,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673114131
    },
    {
        "content": "<p>ah, for easier-to-readness, this is effectively the sort of proof that Junyan wants to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>suffices</code> seems to get a bit closer, but Lean still doesn't like it:</p>\n<p><a href=\"/user_uploads/3121/7mO3edm8lNE7Nn4l5wI40yzV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7mO3edm8lNE7Nn4l5wI40yzV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7mO3edm8lNE7Nn4l5wI40yzV/image.png\"></a></div>",
        "id": 319998217,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673119041
    },
    {
        "content": "<p>If this could be made to work, maybe it can cover most of the cases where <code>wlog</code> is used in mathlib3. Since <code>wlog</code> is yet to be ported, some <a href=\"https://github.com/leanprover-community/mathlib4/search?q=wlog\">ported files now come with notes</a> to replace proofs once <code>wlog</code> is ported (but <code>swap_var</code> may be working nicely enough).</p>",
        "id": 319999965,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673120290
    },
    {
        "content": "<p>it may be worth putting this on the lean4 stream</p>",
        "id": 320001468,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673121454
    },
    {
        "content": "<p>I feel like this may be indicative of a bigger issue that's relevant in all porting. Lean4 seems hesitant to call a metavar a function, and also unify it with stuff given by <code>exact</code>, and when we have tactics that don't work as well as lean3...</p>",
        "id": 322621160,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674250806
    }
]