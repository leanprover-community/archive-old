[
    {
        "content": "<p>Is there a way to take two submodules <code>A</code> and <code>B</code> and construct the submodule that is <code>A</code> with all the elements of <code>B</code> (except 0) removed?</p>",
        "id": 216190216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002010
    },
    {
        "content": "<p>If it exists, I would call it <code>sdiff</code>. But I can't find any <code>sdiff</code> in module so probably no.</p>",
        "id": 216190364,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605002123
    },
    {
        "content": "<p>Does it exist for any other <code>sub*</code>objects?</p>",
        "id": 216190420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002163
    },
    {
        "content": "<p>How about <code>submodule.span K (A \\ B)</code>?</p>",
        "id": 216190468,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605002185
    },
    {
        "content": "<p>For some reason I had in my head I was looking for <code>\\</code> not <code>/</code>. That looks like what I'm after</p>",
        "id": 216190528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002228
    },
    {
        "content": "<p>Should <code>submodule</code> define that as <code>has_sdiff</code>?</p>",
        "id": 216190567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002259
    },
    {
        "content": "<p>Doesn't look like it exists for any <code>sub</code>objects (except finset which is a subobject only very dubiously).</p>",
        "id": 216190584,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605002279
    },
    {
        "content": "<p>This is not a submodule in general...</p>",
        "id": 216190896,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605002465
    },
    {
        "content": "<p><code>submodule.span K (A \\ B)</code> is probably equal to <code>A</code> unless <code>A</code> is contained in <code>B</code>.</p>",
        "id": 216190924,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605002500
    },
    {
        "content": "<p>So, the case I'm thinking of is where <code>A</code> is polynomials of degree <code>n + 1</code> and <code>B</code> is polynomials of degree <code>n</code>.</p>",
        "id": 216191442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002849
    },
    {
        "content": "<p>Sure, but take <code>n = 0</code>, what do you do with <code>X</code> and <code>X + 1</code>?</p>",
        "id": 216191474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605002877
    },
    {
        "content": "<p>And I want to recover the space spanned by monomials of exactly degree <code>n</code></p>",
        "id": 216191480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002880
    },
    {
        "content": "<p>You need something like a grading to do that</p>",
        "id": 216191540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605002903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Difference.20between.20submodules/near/216191474\">said</a>:</p>\n<blockquote>\n<p>Sure, but take <code>n = 0</code>, what do you do with <code>X</code> and <code>X + 1</code>?</p>\n</blockquote>\n<p>I can't match these words to my question - can you elaborate slightly? What are <code>A</code> and <code>B</code> here?</p>",
        "id": 216191576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002940
    },
    {
        "content": "<p>(What I'm trying to do is recover a grading from a filtering, <a href=\"https://en.wikipedia.org/wiki/Filtered_algebra#Associated_graded_algebra\">https://en.wikipedia.org/wiki/Filtered_algebra#Associated_graded_algebra</a>)</p>",
        "id": 216191614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605002981
    },
    {
        "content": "<p><code>A = polys of degree le 1</code>, and <code>B = polys of degree le 0</code>.</p>",
        "id": 216191627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605002992
    },
    {
        "content": "<p>So <code>B</code> is the constants. But <code>A \\ B</code> contains <code>X</code> and <code>X + 1</code>. Any submodule that contains <code>X</code> and <code>X + 1</code> also contains <code>1</code>, and hence all the constants.</p>",
        "id": 216191705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003036
    },
    {
        "content": "<p>So you need a way to say that <code>X + 1</code> is bad, impure, nonhomogeneous.</p>",
        "id": 216191777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Difference.20between.20submodules/near/216191705\">said</a>:</p>\n<blockquote>\n<p>But <code>A \\ B</code> contains <code>X</code> and <code>X + 1</code>.</p>\n</blockquote>\n<p>Ah, I see the problem now</p>",
        "id": 216191781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605003103
    },
    {
        "content": "<p>A grading let's you do that</p>",
        "id": 216191784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003108
    },
    {
        "content": "<p>You can't recover a grading from a filtration. But you can define a graded object starting from a filtration. It's just that it will be on a completely different vector space/module</p>",
        "id": 216191861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003157
    },
    {
        "content": "<p>It's called the \"associated graded\"</p>",
        "id": 216191865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003166
    },
    {
        "content": "<p>Right, that's what I'm after</p>",
        "id": 216191895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605003199
    },
    {
        "content": "<p>\"it will be on a completely different vector space/module\" - will it? Supposedly the vector spaces are isomorphic, which I take to mean \"I can put them in the same type if I pull the right levers\"</p>",
        "id": 216191974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605003248
    },
    {
        "content": "<p>Perhaps I'm after the quotient of <code>A</code> by the relation \"member of <code>B</code>\"</p>",
        "id": 216192170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605003391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Difference.20between.20submodules/near/216191974\">said</a>:</p>\n<blockquote>\n<p>\"it will be on a completely different vector space/module\" - will it? Supposedly the vector spaces are isomorphic, which I take to mean \"I can put them in the same type if I pull the right levers\"</p>\n</blockquote>\n<p>Yes, but this is highly non-canonical. It's not functorial</p>",
        "id": 216192276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Difference.20between.20submodules/near/216192170\">said</a>:</p>\n<blockquote>\n<p>Perhaps I'm after the quotient of <code>A</code> by the relation \"member of <code>B</code>\"</p>\n</blockquote>\n<p>Yup, the quotient module <code>A/B</code> does what you want</p>",
        "id": 216192351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003509
    },
    {
        "content": "<p>In general, the associated graded is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨁</mo><mi>i</mi></msub><mrow><mo fence=\"true\">(</mo><msup><mi>F</mi><mi>i</mi></msup><mi>M</mi><mi mathvariant=\"normal\">/</mi><msup><mi>F</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mi>M</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\bigoplus_i \\left(F^i M / F^{i+1}M\\right)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span></p>",
        "id": 216192391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003543
    },
    {
        "content": "<p>Not sure I understand what the <code>M</code> is there, or what its adjacency to F signifies</p>",
        "id": 216192570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605003674
    },
    {
        "content": "<p><code>F</code> is a filtration on a module <code>M</code></p>",
        "id": 216192854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003880
    },
    {
        "content": "<p>So <code>F^i M</code> is a submodule of <code>M</code></p>",
        "id": 216192870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605003894
    },
    {
        "content": "<p>Ok, cool - I have the <code>F^i M</code> already then</p>",
        "id": 216192894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605003907
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Difference.20between.20submodules/near/216192351\">said</a>:<br>\nYup, the quotient module <code>A/B</code> does what you want</p>\n</blockquote>\n<p>Naturally, this is not sufficiently general for me... It requires the algebra to be commutative.</p>",
        "id": 216198006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605007259
    },
    {
        "content": "<p>Not sure what \"the algebra\" refers to, but quotient modules and the associated graded module of a filtered module work also for modules over a noncommutative ring. But mathlib might have unnecessary commutativity hypotheses of course.</p>",
        "id": 216198590,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605007658
    },
    {
        "content": "<p>Yeah, I'm referring specific to <code>submodule.has_div [algebra R A]</code> requiring <code>comm_semiring A</code> - so this is a mathlib limitation</p>",
        "id": 216199391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605008191
    },
    {
        "content": "<p>Can you link to the docs/source?</p>",
        "id": 216202345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605010257
    },
    {
        "content": "<p>I don't understand why an algebra is involved. Oh wait, what is <code>submodule.has_div</code>? maybe it's not the quotient module?</p>",
        "id": 216202968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605010686
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.has_div\">docs#submodule.has_div</a></p>",
        "id": 216203423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605010960
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient\">docs#submodule.quotient</a></p>",
        "id": 216204893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605011870
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216213548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605016470
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>. I can't quite work out how to use that either - that takes the quotient of the entire module <code>M</code> by the submodule <code>S : submodule R M</code>, but I want to take the quotient of <code>S1 : submodule R M</code> by <code>S2 : submodule R M</code>.</p>\n<p>Since I know that <code>S1 ≤ S2</code>, I suppose I ought to be able to convert <code>S1</code> to <code>S1' : submodule R S2</code>, at which point I could use <code>S1'.quotient</code>.</p>\n<p>Does mathlib already have something that can do this conversion?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S1</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S1</span> <span class=\"bp\">≤</span> <span class=\"n\">S2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">S2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 216219795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605018951
    },
    {
        "content": "<p>I experimented with a \"subquotient object\" at some point, consisting of a pair of submodules; I could define maps between them (a map from the first top object to the second top object sending the first bottom object into the second bottom object, maybe I even put some lattice structure on them; this was all in a student's MSc project, so nowhere near mathlib and it will probably not compile now. But I was never convinced this was the way to go -- for example I later on realised that I wanted an object equipped with a filtration having more than 2 nontrivial elements. </p>\n<p>I am not sure I know a good solution to your problem. Maybe just bite the bullet and make S1'? :-/ Pain might be forthcoming though, or perhaps not, depending on what you're doing.</p>",
        "id": 216221138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605019422
    },
    {
        "content": "<p>I guess you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.comap\">docs#submodule.comap</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.subtype\">docs#submodule.subtype</a>; not sure if there is something more custom purpose in mathlib</p>",
        "id": 216221157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605019434
    },
    {
        "content": "<p>I get the feeling that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_limit\">docs#direct_limit</a> might overlap with what I need...</p>",
        "id": 216222129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605019849
    }
]