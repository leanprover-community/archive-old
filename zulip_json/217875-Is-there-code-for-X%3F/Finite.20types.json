[
    {
        "content": "<p>How do finite types work in lean 3? <code>#check (100: fin 8)</code> is being passed as valid which is unexpected?</p>",
        "id": 273217940,
        "sender_full_name": "Ben",
        "timestamp": 1645788993
    },
    {
        "content": "<p><code>fin 8</code> is the set of natural numbers less than 8, but <code>100</code> doesn't mean what you think there</p>",
        "id": 273217976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645789040
    },
    {
        "content": "<p>it actually means <code>100 % 8 = 4</code></p>",
        "id": 273218010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645789062
    },
    {
        "content": "<p>this is because numeral desugaring is defined generically for anything with a 0,1,+, and <code>fin n</code> (for <code>n&gt;0</code>) has these operations defined via modulo arithmetic</p>",
        "id": 273218120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645789135
    },
    {
        "content": "<p>If you want the natural number 100, you should write <code>#check (⟨100, _⟩ : fin 8)</code> where the <code>_</code> is a proof obligation of <code>100 &lt; 8</code> that of course you can't fill</p>",
        "id": 273218263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645789225
    },
    {
        "content": "<p>Interesting, I did not know it did that to the number in that way. That makes sense now <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 273218963,
        "sender_full_name": "Ben",
        "timestamp": 1645789710
    }
]