[
    {
        "content": "<p>Do we happen to have code for the obvious map from <code>list (α × β)</code> to <code>α →₀ β</code>? I need it in a certain cardinality proof</p>",
        "id": 288990545,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657312811
    },
    {
        "content": "<p>(yeah, I'm aware that there's subtleties with duplicate entries and such, I just want a surjective function like this)</p>",
        "id": 288990764,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657312940
    },
    {
        "content": "<p>Actually, now that I recall, I actually want to use this exact same function elsewhere in the code</p>",
        "id": 288991545,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657313358
    },
    {
        "content": "<p>What is the obvious map?? What does it take [(a,b1),(a,b2)] to? What does it take [(a,0),(a,b)] to?</p>",
        "id": 288993266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657314351
    },
    {
        "content": "<p>I really just need any implementation of this concept that's surjective for my proof to work</p>",
        "id": 288994439,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315170
    },
    {
        "content": "<p>The obvious (?) implementation would be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finsupp_of_pairs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finsupp_of_pairs</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">update</span> <span class=\"n\">c.1</span> <span class=\"n\">c.2</span>\n</code></pre></div>\n<p>which would give answers <code>b1</code> and <code>0</code> to your questions, though of course it could be defined differently</p>",
        "id": 288994557,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315246
    },
    {
        "content": "<p>There's what looks to me like an obvious injective map from  the finsupp to <code>finset (alpha x beta)</code> which might be more natural. And then there's a surjection from list to finset and you can split the injection.</p>",
        "id": 288994650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657315321
    },
    {
        "content": "<p>Oh you're right</p>",
        "id": 288994744,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315365
    },
    {
        "content": "<p>The injection probably suits me better</p>",
        "id": 288994752,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315375
    },
    {
        "content": "<p>Guess this was just an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 288994836,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315433
    },
    {
        "content": "<p>I guess I now have to change the question</p>",
        "id": 288995071,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315587
    },
    {
        "content": "<p>Is there code to get the \"graph\" of a <code>finsupp</code> as a <code>finset</code>?</p>",
        "id": 288995123,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315641
    },
    {
        "content": "<p>Or however you'd call the <code>finset</code> of input and output pairs</p>",
        "id": 288995139,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657315657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graph</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.support.image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 288995991,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657316182
    },
    {
        "content": "<p>It's certainly easy enough to code</p>",
        "id": 288996087,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657316272
    },
    {
        "content": "<p>We can ditch decidable equality, actually</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.support.map</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">prod.mk</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 288996151,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657316298
    },
    {
        "content": "<p>Better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod.graph</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">prod.graph_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod.graph</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.support.map</span> <span class=\"o\">(</span><span class=\"n\">prod.graph</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288996237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657316384
    },
    {
        "content": "<p>Ah, you just did that too.</p>",
        "id": 288996252,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657316397
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15196\">#15196</a></p>",
        "id": 288999595,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657318615
    },
    {
        "content": "<p>Is there a link to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_pmap.graph\">docs#linear_pmap.graph</a> or linear_map.graph here?</p>",
        "id": 289025268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657349564
    },
    {
        "content": "<p>Violeta, did you mean to link to one of your own PRs instead of that one?</p>",
        "id": 289025292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657349631
    },
    {
        "content": "<p>Oops, off by one error</p>",
        "id": 289049042,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657382392
    }
]