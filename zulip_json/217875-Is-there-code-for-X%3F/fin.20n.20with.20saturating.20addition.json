[
    {
        "content": "<p>There has been talk about having a version of <code>fin n</code> with saturating addition. Do we actually have this somewhere? cc <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12485\">#12485</a> needs it in the case <code>n = 2</code>. cc <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span></p>",
        "id": 274790579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646888807
    },
    {
        "content": "<p>I don't think we have a saturating version of <code>fin</code> yet, but it would of course be nice.</p>",
        "id": 274808304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646903789
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 274808393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646903846
    },
    {
        "content": "<p>We already have the special case n=2 though, it's called <code>with_zero unit</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 274808402,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646903853
    },
    {
        "content": "<p>We could of course use saturating addition as the default addition on fin given that zmod covers the mod n case :-)</p>",
        "id": 274808424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646903881
    },
    {
        "content": "<p>We've had this discussion before, it's not going to happen because core Lean 4 uses modular arithmetic in <code>Fin</code>.  We're going to have to find a new name for the saturating version.</p>",
        "id": 274808492,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646903919
    },
    {
        "content": "<p>But why can't core Lean use <code>zmod</code> instead?</p>",
        "id": 274808918,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646904196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fin.20n.20with.20saturating.20addition/near/274808402\">said</a>:</p>\n<blockquote>\n<p>We already have the special case n=2 though, it's called <code>with_zero unit</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks!<br>\n<span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> I think you can probably use this to golf the first 70 lines from your PR.</p>",
        "id": 274809464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646904501
    },
    {
        "content": "<p>I thought the <code>n=2</code> case was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">tt</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">||</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p><span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 274809785,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646904721
    },
    {
        "content": "<p>I think it would be a bit confusing if <code>bool</code> was not a Boolean ring.</p>",
        "id": 274810383,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646905063
    },
    {
        "content": "<p>( <code>bool.boolean_ring</code> is something I'm working on btw)</p>",
        "id": 274811818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646905819
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6149\">#6149</a></p>",
        "id": 274830278,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646916942
    },
    {
        "content": "<p>You could probably also use \"additive (tropical (fin n))\" for your purposes at this point, that pr is old</p>",
        "id": 274830703,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646917200
    },
    {
        "content": "<p>The <code>additive</code> gets you back the original modular addition.  Just <code>tropical (fin 2)</code> alone is enough to get saturating addition (but you'll have <code>0*0=1</code>).</p>",
        "id": 274832324,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646917981
    },
    {
        "content": "<p>Ah, yes.</p>",
        "id": 274832591,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646918132
    },
    {
        "content": "<p>Wait why would 0*0=1 in tropical fin 2?</p>",
        "id": 274832692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646918182
    },
    {
        "content": "<p>Because 0=1 and 1=0 and *=+ and 1+1=0 in fin 2. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 274832752,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646918215
    },
    {
        "content": "<p>Ah, one has to launder via (trop 0) and (trop 1), right</p>",
        "id": 274832861,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646918275
    },
    {
        "content": "<p>Well just tropical fin n, 2 &lt; n won't work in general either for the sat addition because untrop ((trop 2) + (trop 3)) = 3, not 5 (in fin 7 let's say)</p>",
        "id": 274833174,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646918430
    }
]