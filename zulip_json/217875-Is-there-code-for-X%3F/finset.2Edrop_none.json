[
    {
        "content": "<p>Do we have a definition equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset.drop_none</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">o.to_finset</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but without the need for <code>[decidable_eq α]</code>? If not, what is the best way to define it? Go all the way from <code>list</code>? Use some existing defs?</p>",
        "id": 256686107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633666656
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter\">docs#finset.filter</a></p>",
        "id": 256717262,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633688068
    },
    {
        "content": "<p>Filter for ne none? That might be decidable regardless of decidability of base type</p>",
        "id": 256717334,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633688106
    },
    {
        "content": "<p>Perhaps something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">option.eq_of_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">a₂</span><span class=\"o\">),</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset.drop_none</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">s.1.filter_map</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">multiset.nodup_filter_map</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">option.eq_of_mem</span><span class=\"o\">)</span> <span class=\"n\">s.nodup</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 256718159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633688575
    },
    {
        "content": "<p>removed the <code>sorry</code> above.</p>",
        "id": 256719264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633689208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> you then still need to map from <code>option α</code> to <code>α</code>, which is annoying (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.map\">docs#finset.map</a> wouldn't work).</p>",
        "id": 256729001,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633694476
    },
    {
        "content": "<p>I came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">unoption</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.subtype</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">o.is_some</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">equiv.option_is_some_equiv</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n</code></pre></div>\n<p>It uses existing operations, so I can prove API lemmas <code>by simp [unoption]</code>.</p>",
        "id": 256730557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633695316
    },
    {
        "content": "<p>I would have though you could prove lemmas about  my version by coercing to multiset with <code>ext</code> or similar</p>",
        "id": 256736349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633698345
    },
    {
        "content": "<p>Are they defeq?</p>",
        "id": 256736435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633698373
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 256748029,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633703282
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.pmap\">docs#finset.pmap</a></p>",
        "id": 256751919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633704837
    },
    {
        "content": "<p>That's too bad that that doesn't exist</p>",
        "id": 256751984,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633704852
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9630\">#9630</a></p>",
        "id": 256966683,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633883014
    }
]