[
    {
        "content": "<p>Is there anything in mathlib that restricts an integral on both the measure and the function? Currently if <code>f</code> is integrable, then <code>f</code> is integrable on any measurable subset. How do I further restrict this to <code>set.restrict f s</code> is integrable on the measurable subset <code>s</code>?</p>\n<p>Or is this even possible? I don't know much about measure theory <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 226274072,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1613257715
    },
    {
        "content": "<p>Ah, I guess it would not work for any <code>s</code>, but is something like <code>interval a b</code> possible?</p>",
        "id": 226274460,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1613258258
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integrable_on\">docs#measure_theory.integrable_on</a>?</p>",
        "id": 226275866,
        "sender_full_name": "Yevhenii Diomidov",
        "timestamp": 1613260383
    },
    {
        "content": "<p>I mean something like \"if <code>f : ℝ → ℝ</code> is integrable on <code>[a, b]</code>, then the function restriction <code>f : [a, b] → ℝ</code> is integrable, treating <code>[a, b]</code> as a measurable space.\"</p>\n<p>The problem arises from trying to prove that  <code>∫ x in 0..π, sin x ^ (n + 1) ≤ ∫ x in 0..π, sin x ^ n</code>. Using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integral_mono\">docs#measure_theory.integral_mono</a> creates the goal <code>sin x ^ (n + 1) ≤ sin x ^ n</code> for arbitrary <code>x</code>. But clearly I want to only show that <code>sin x ^ (n + 1) ≤ sin x ^ n</code> for only <code>x</code> in <code>0..pi</code>. Hence I'm trying to restrict the function domain from R to [0, pi].</p>",
        "id": 226277266,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1613262741
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">finset</span> <span class=\"n\">interval_integral</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">pi_pos</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">pi_pos</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measure_theory.integral_mono</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(((</span><span class=\"n\">continuous_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_sin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">interval_integrable</span> <span class=\"mi\">0</span> <span class=\"n\">π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">integrable</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(((</span><span class=\"n\">continuous_pow</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_sin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">interval_integrable</span> <span class=\"mi\">0</span> <span class=\"n\">π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">integrable</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- goal state is false :(</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">real</span>\n</code></pre></div>",
        "id": 226277775,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1613263713
    },
    {
        "content": "<p>I would prove a better <code>mono</code> lemma rather than going through the pain of converting all the terms to types</p>",
        "id": 226292951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613291193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60integral_restrict.60/near/226277266\">said</a>:</p>\n<blockquote>\n<p>The problem arises from trying to prove that  <code>∫ x in 0..π, sin x ^ (n + 1) ≤ ∫ x in 0..π, sin x ^ n</code>. Using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integral_mono\">docs#measure_theory.integral_mono</a> creates the goal <code>sin x ^ (n + 1) ≤ sin x ^ n</code> for arbitrary <code>x</code>. But clearly I want to only show that <code>sin x ^ (n + 1) ≤ sin x ^ n</code> for only <code>x</code> in <code>0..pi</code>. Hence I'm trying to restrict the function domain from R to [0, pi].</p>\n</blockquote>\n<p>You should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integral_mono_ae\">docs#measure_theory.integral_mono_ae</a> instead. Then you only need to prove the inequality for almost every point with respect to the restricted measure. Checking it for all points in the interval is then enough.</p>",
        "id": 226294349,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1613293570
    },
    {
        "content": "<p>I should have said \"I would <em>use</em> a better <code>mono</code> lemma\". This is a standard trick in dependent type theory. I've been doing topology recently and I remember thinking it was odd that everything was proved for compact subspaces rather than compact spaces, but compact subspaces are somehow a predicate on terms so are more flexible.</p>",
        "id": 226294669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613294125
    },
    {
        "content": "<p>The moment you convert everything to types you're fighting type equality</p>",
        "id": 226294677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613294149
    },
    {
        "content": "<p>A PR with a <code>mono</code> lemma for interval integrals (e.g., assuming <code>a ≤ b</code> and reusing <code>integral_mono_ae</code>) is very welcome!</p>",
        "id": 226334538,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613348931
    },
    {
        "content": "<p>And <code>set_integral_mono</code> / <code>set_integral_mono_ae</code> would also be useful.</p>",
        "id": 226416875,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613413623
    },
    {
        "content": "<p>I started working on these, I'll open a PR tomorrow</p>",
        "id": 226737456,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613600727
    },
    {
        "content": "<p>Oh nice. I have something like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">finset</span> <span class=\"n\">interval_integral</span> <span class=\"n\">measure_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interval_integral.integral_mono</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">volume.restrict</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))}</span>\n  <span class=\"o\">{</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">volume.restrict</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">integral_of_le</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">integral_mono_ae</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_mem</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_ae_iff</span><span class=\"o\">,</span> <span class=\"n\">measure.restrict_apply</span> <span class=\"o\">(</span><span class=\"n\">measurable_set.compl</span> <span class=\"n\">measurable_set_Ioc</span><span class=\"o\">),</span>\n    <span class=\"n\">set.compl_inter_self</span><span class=\"o\">,</span> <span class=\"n\">measure_empty</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>that works so far. Not sure if it would be useful to generalize the codomain into a linearly ordered normed space over <code>ℝ</code>... are there even examples of these besides <code>ℝ</code>?</p>",
        "id": 226758698,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1613616955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>  Are you stilling working on adding integration lemmas? I have a complete file on the Wallis product for pi with a few integrals on <code>sin x ^ n</code>. I can add them to whatever branch you're working on. Haven't PR'ed since I can generalize a lot of the material, some of which would be suited for a list-of-integrations file.</p>",
        "id": 226758871,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1613617158
    },
    {
        "content": "<p>I will be adding some simple integration lemmas (including sin) in <a href=\"https://github.com/leanprover-community/mathlib/issues/6216\">#6216</a>, which will hopefully be ready soon. Afterward, Anatole and I are planning on adding some more complex integration lemmas in a second PR. Your lemmas would make a very welcome addition to that second PR so let's definitely coordinate!</p>",
        "id": 226759770,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613618105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60integral_restrict.60/near/226758698\">said</a>:</p>\n<blockquote>\n<p>Not sure if it would be useful to generalize the codomain into a linearly ordered normed space over <code>ℝ</code>... are there even examples of these besides <code>ℝ</code>?</p>\n</blockquote>\n<p>I also assumed <code>ℝ → ℝ</code>, because all the existing <code>mono</code> lemmas (on top of which I'm building) are about <code>... → ℝ</code>, but maybe I can still generalize the domain. I can also try to generalize the codomain but then it means changing <code>integral_mono_ae</code> too</p>",
        "id": 226782001,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613639213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60integral_restrict.60/near/226758871\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span>  Are you stilling working on adding integration lemmas? I have a complete file on the Wallis product for pi with a few integrals on <code>sin x ^ n</code>. I can add them to whatever branch you're working on. Haven't PR'ed since I can generalize a lot of the material, some of which would be suited for a list-of-integrations file.</p>\n</blockquote>\n<p>I agree with Benjamin, these are definitely welcome ! I'm in a similar situation actually : I've recently been working on proving that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∫</mo><mi mathvariant=\"double-struck\">R</mi></msub><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msqrt><mi>π</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\int_\\R \\exp(-x^2) = \\sqrt\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.169928em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.12640299999999993em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;padding-left:0.833em;\">π</span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span>. I haven't finished yet, but I definitely have interesting lemmas waiting to be generalized and PR-ed : 1D-variable change, continuity and derivability of parametric integrals, ...</p>",
        "id": 226783142,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613639990
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6292\">#6292</a> for mono lemmas</p>",
        "id": 226793218,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613645474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60integral_restrict.60/near/226783142\">said</a>:</p>\n<blockquote>\n<p>I haven't finished yet, but I definitely have interesting lemmas waiting to be generalized and PR-ed : 1D-variable change, continuity and derivability of parametric integrals, ...</p>\n</blockquote>\n<p>Please keep in mind that <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/parametric_integral.lean\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/parametric_integral.lean</a> contains very general lemmas about parametric integrals. I simply need to find time to adapt this to current mathlib and PR it.</p>",
        "id": 226797716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1613648319
    },
    {
        "content": "<p>Oooooooh I didn't know/remember that !</p>",
        "id": 226805208,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613652832
    }
]