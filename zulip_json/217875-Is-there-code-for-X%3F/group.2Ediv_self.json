[
    {
        "content": "<p>Are we really missing these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">â†’*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">group.div_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">monoid_hom.map_div</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">/</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a1</span> <span class=\"bp\">/</span> <span class=\"n\">f</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I noticed there was a change to the definition of <code>group</code> recently, with an explicit <code>div</code> being asked for. This has turned out to work really nicely in group cohomology. I really don't want to write <code>g m + -m</code> for a coboundary, and putting the emphasis on <code>add</code> and <code>sub</code> in general rather than <code>add</code> and <code>neg</code> seems to me like a good idea. Am I just not importing the right files for these two lemmas? Or is what's going on that <code>div</code> is now being promoted as the new <code>inv</code> but we didn't around to divifying everything yet?</p>\n<p>PS <code>smul_sub</code> is not tagged <code>simp</code>. Is this for a good reason? Should <code>monoid_hom.map_div</code> be <code>simp</code>?</p>",
        "id": 230003425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615543425
    },
    {
        "content": "<blockquote>\n<p>Or is what's going on that div is now being promoted as the new inv but we didn't around to divifying everything yet?</p>\n</blockquote>\n<p>That is probably it. The old API was solely <code>mul</code> and <code>inv</code> based, with <code>sub</code> only being defined for <code>add_group</code>s. Now it's <code>div</code> everywhere, but the lemmas haven't caught up yet.</p>",
        "id": 230004026,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615543702
    },
    {
        "content": "<p>is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_add\">docs#smul_add</a> tagged simp? edit: yes, so I guess smul_sub should be too</p>",
        "id": 230011187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615547266
    },
    {
        "content": "<p>I was about to PR <code>map_div</code> and I'm having second thoughts. I've realised that we <em>do</em> have <code>map_sub</code>, which was what I wanted. I un-to-additived it and ended up with <code>map_div</code> but I'm not sure that anyone really uses division in the non-commutative case.</p>",
        "id": 230843853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616064938
    },
    {
        "content": "<p>I can't see any reason not to have the lemma</p>",
        "id": 230845438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616065773
    },
    {
        "content": "<p>It opens up a can of worms in the noncommutative case.</p>",
        "id": 230850976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616068964
    },
    {
        "content": "<p>Actually the real reason I don't want to PR it is that I don't need it. I needed <code>map_sub</code> but it's there. There is this weird dichotomy amongst mathematicians. If they're using a structure which is commutative (as addition essentially always is in practice) then <code>sub</code> is a powerful operator. If they're using a structure which is not (e.g. groups with group law <code>*</code> are typically not commutative) then nobody uses <code>div</code> at all because there are two potential definitions, but people will happily multiply by the inverse all day long.</p>",
        "id": 230851252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616069108
    }
]