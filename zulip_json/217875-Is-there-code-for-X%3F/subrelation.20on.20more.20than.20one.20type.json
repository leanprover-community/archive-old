[
    {
        "content": "<p>I'm looking for something along the lines of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subrelation'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>All I'm finding is <a href=\"https://leanprover-community.github.io/mathlib_docs/init/logic.html#subrelation\">subrelation</a> which requires the types to be the same. This seems too basic to be missing. Is it an instance of a more general thing I'm not finding? Perhaps something like a relation on an indexed family of types?</p>",
        "id": 280753046,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1651348474
    },
    {
        "content": "<p>This is just <code>≤</code>. <code>r ≤ s</code> means <code>∀ a, r a ≤ s a</code> which means <code>∀ a b, r a b ≤ s a b</code> which means <code>∀ a b, r a b → s a b</code>.</p>",
        "id": 280753119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651348570
    },
    {
        "content": "<p>Where is this partial_order instance defined?</p>",
        "id": 280753141,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1651348628
    },
    {
        "content": "<p>It's a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_le\">docs#pi.has_le</a> applied twice. For the outer application, set <code>ι</code> to be <code>α</code> and <code>α</code> to be <code>λ _, β → Prop</code>.</p>",
        "id": 280753204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651348692
    },
    {
        "content": "<p>Oh I see. Got it. Thanks!</p>",
        "id": 280753234,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1651348750
    },
    {
        "content": "<p>Another spelling is <code>(r ⇒ s) id id</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/relator.lift_fun\">docs#relator.lift_fun</a>), but that's rather cryptic</p>",
        "id": 280754078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651349902
    },
    {
        "content": "<p>Oh, nice. I agree it's rather cryptic, but the double application of <code>pi.has_le</code> is a certain kind of cryptic too. In the end, just knowing that ≤ would work was sufficient. I'm just always curious to dig a little deeper to see the definition.</p>",
        "id": 280754659,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1651350753
    }
]