[
    {
        "content": "<p>Do we already know that <code>rpow</code> on <code>ennreal</code> is an <code>order_iso</code> when the exponent is positive? It seems that all the ingredients are there in <code>analysis.special_functions.pow</code>, but I didn't see that bundle explicitly.</p>",
        "id": 264903727,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639506776
    },
    {
        "content": "<p>I don't think so, feel free to add it!  The closest seems to be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.monotone_rpow_of_nonneg\">docs#ennreal.monotone_rpow_of_nonneg</a></p>",
        "id": 264904058,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639506916
    },
    {
        "content": "<p>I think that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.rpow_left_strict_mono_of_pos\">docs#ennreal.rpow_left_strict_mono_of_pos</a> is closer</p>",
        "id": 264911575,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639509480
    },
    {
        "content": "<p>But you probably want an explicit <code>inv_fun</code>.</p>",
        "id": 264911644,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639509506
    },
    {
        "content": "<p><code>strict_mono.order_iso_of_right_inverse</code> from <a href=\"https://github.com/leanprover-community/mathlib/pull/10701\">#10701</a> might be useful here.</p>",
        "id": 264911731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639509552
    },
    {
        "content": "<p>(or you can rewrite the proofs so that you build an <code>order_iso</code> first, then prove <code>strict_mono</code> from it)</p>",
        "id": 264911831,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639509598
    },
    {
        "content": "<p>E.g., if you can build an <code>order_iso</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.to_order_iso\">docs#equiv.to_order_iso</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.monotone_rpow_of_nonneg\">docs#ennreal.monotone_rpow_of_nonneg</a>, then get <code>strict_mono</code> for free.</p>",
        "id": 264912285,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639509790
    },
    {
        "content": "<p>UPD: currently, we use <code>strict_mono</code> in the proof of <code>mono</code>, so you can't simplify using <code>equiv.to_order_iso</code> (unless you do a larger refactor).</p>",
        "id": 264912506,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639509907
    },
    {
        "content": "<p>Am I crazy, or are these redundant in <code>analysis/special_functions/pow</code>? I also don't understand the <code>left</code> in the names.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rpow_left_monotone_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"n\">rpow_le_rpow</span> <span class=\"n\">hyz</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rpow_left_strict_mono_of_pos</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"n\">rpow_lt_rpow</span> <span class=\"n\">hyz</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>They seem to be copies of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">strict_mono_rpow_of_pos</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">ne_top_of_lt</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">y</span> <span class=\"bp\">∞</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">top_rpow_of_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">coe_rpow_of_nonneg</span> <span class=\"n\">_</span> <span class=\"n\">h.le</span><span class=\"o\">,</span> <span class=\"n\">coe_lt_top</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_rpow_of_nonneg</span> <span class=\"n\">_</span> <span class=\"n\">h.le</span><span class=\"o\">,</span> <span class=\"n\">nnreal.rpow_lt_rpow</span> <span class=\"o\">(</span><span class=\"n\">coe_lt_coe.1</span> <span class=\"n\">hxy</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">coe_lt_coe</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_rpow_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.eq_or_lt.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">h0</span> <span class=\"bp\">▸</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rpow_zero</span><span class=\"o\">,</span> <span class=\"n\">monotone_const</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">strict_mono_rpow_of_pos</span> <span class=\"n\">h0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and moreover, their proofs use <code>rpow_{le,lt}_rpow</code>, which themselves depend on these latter two.</p>",
        "id": 264920961,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639513932
    },
    {
        "content": "<p>The <code>left</code> refers to the fact that, in <code>y ^ x</code>, you are varying the left variable <code>y</code> while keeping <code>x</code> fixed.</p>",
        "id": 264921821,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1639514304
    },
    {
        "content": "<p>Best way to find out is to try replacing the proofs of the latter by the former.</p>",
        "id": 264921960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639514393
    },
    {
        "content": "<p>It is perfectly possible that we have two identical lemmas like that, just by oversight. A good test is to check whether you can solve one just by invoking the other.</p>",
        "id": 264921969,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1639514398
    },
    {
        "content": "<p>Are all four lemmas in the same file?</p>",
        "id": 264922050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639514417
    },
    {
        "content": "<p>If this is the case, a PR to remove the duplicated versions is most welcome!</p>",
        "id": 264922053,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1639514419
    },
    {
        "content": "<p>Indeed, all in the same file and they are duplicates. I'll submit a PR. The duplicates are used in a very small number of places throughout mathlib; I'll switch them.</p>",
        "id": 264922395,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639514595
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10794\">#10794</a></p>",
        "id": 264939558,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639522990
    }
]