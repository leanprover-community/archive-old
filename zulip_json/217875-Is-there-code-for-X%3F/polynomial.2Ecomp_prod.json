[
    {
        "content": "<p>Dear All,</p>\n<p>I am struggling to find the lemma below: I tried <code>library_search, suggest, hint</code>, looking around in relevant files, all to no avail.  I also tried seeing if the docs linkifier told me that my guessed name was the actual name, but also that failed!  Can someone please tell me what the lemma is called?</p>\n<p>Or explain to me that it is false, because I still do not understand what <code>comp</code> and <code>prod</code> do?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.comp_prod</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.prod</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 276727099,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648302603
    },
    {
        "content": "<p>This is becoming comical <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.prod_comp\">docs#polynomial.prod_comp</a></p>",
        "id": 276727115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648302661
    },
    {
        "content": "<p>It's not quite what you ask for, but the glue belongs to the realm of big operators.</p>",
        "id": 276727130,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648302702
    },
    {
        "content": "<p>Seriously?!?!</p>",
        "id": 276727176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648302729
    },
    {
        "content": "<p>Sometimes I wonder whether formalizing math is what I should be doing...</p>",
        "id": 276727190,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648302760
    },
    {
        "content": "<p>Damiano, how are you looking for lemmas? My goto is the search bar in the online docs.</p>",
        "id": 276727198,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648302781
    },
    {
        "content": "<p>I mostly try the auto-complete, then I try stating the lemma in isolation and using library_search.  Finally, I open files that appear relevant and do a mix of Ctrl+F and browsing.</p>",
        "id": 276727285,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648302918
    },
    {
        "content": "<p>Anyway, at least this time I have not been able to fill in the glue right away, but I'll try harder with the lemma that you suggested!</p>",
        "id": 276727296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648302948
    },
    {
        "content": "<p>ctrl+shift+f in VSCode is always nice, and you can search by name in the docs which is also worth checking</p>",
        "id": 276727351,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648302996
    },
    {
        "content": "<p>In this specific case, I think that my inability has been hindered by my difficulty of converting betweem finsets and multisets.  I can see that the lemma that Yaël linked is very close to what I want, I might have even glanced at it, but decided that I was unable to make it work, since it used multisets, instead of finsets.</p>",
        "id": 276727455,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303161
    },
    {
        "content": "<p>Here is a follow up: how can I get Lean to construct the multiset image of the finset s under the map f?</p>",
        "id": 276727461,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303188
    },
    {
        "content": "<p>and I hope that the answer is not finset.image.to_multiset or something like this!</p>",
        "id": 276727528,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303211
    },
    {
        "content": "<p>(let me try that right away!)</p>",
        "id": 276727541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303223
    },
    {
        "content": "<p>wait what is the construction you want? Does the constant function send {1,2} to {x} or {x,x}? If you change a finset to a multiset you'll not get duplicates of course.</p>",
        "id": 276727566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648303257
    },
    {
        "content": "<p>I was referring to the context of the lemma above: I have a finset of \\iota, a map from \\iota to another type and I want the \"multiset image\" of the map.  Thus, if the map is constant, I want a lot of the same elements in the multiset.</p>\n<p>The source though has no repetitions.</p>",
        "id": 276727639,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303348
    },
    {
        "content": "<p>that is, with more maths notations, I want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>i</mi><mo>∈</mo><mi>s</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[f(i) : i \\in s]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">]</span></span></span></span> as a multiset, since this is what I need to feed to the lemma that Yaël suggested.</p>",
        "id": 276727664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303415
    },
    {
        "content": "<p>Kevin, in your example, I would want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x,x\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 276727722,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303500
    },
    {
        "content": "<p>A <code>finset</code> is definitionally a <code>multiset</code>. <code>finset.prod s f</code> is definitionally <code>(multiset.map s f).prod</code>.</p>",
        "id": 276727724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648303502
    },
    {
        "content": "<p>Yaël, thanks!  I had not tried forcing Lean to accept it: this is not elegant, but works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial.comp_prod</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.prod</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">convert</span> <span class=\"n\">polynomial.prod_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 276727814,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303629
    },
    {
        "content": "<p>I had tried <code>rw</code> which failed, but I had not tried convert, since I was not hoping for defeqs!</p>",
        "id": 276727880,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303699
    },
    {
        "content": "<p>Should this lemma then go into mathlib?</p>",
        "id": 276727990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648303867
    },
    {
        "content": "<p>It doesn't seem to me that we've yet decided how much duplication between <code>multiset.prod</code> and <code>finset.prod</code> we want.</p>",
        "id": 276728118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648304051
    },
    {
        "content": "<p>Actually, you should be able to golf the above to one line without a <code>convert</code>. What does <code>(polynomial.prod_comp _ _).trans $ by library_search</code> produce?</p>",
        "id": 276728140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648304101
    },
    {
        "content": "<p>Sorry, I'm taking a break!  Will report once I'm back!</p>",
        "id": 276728604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648304756
    },
    {
        "content": "<p>I tried it now and it times out.  However, <code>library_search</code> often seems to time out for me...</p>",
        "id": 276735365,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648314124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/polynomial.2Ecomp_prod/near/276728140\">said</a>:</p>\n<blockquote>\n<p>Actually, you should be able to golf the above to one line without a <code>convert</code>. What does <code>(polynomial.prod_comp _ _).trans $ by library_search</code> produce?</p>\n</blockquote>\n<p><code>by simpa</code> works at the end, but I think I made people unhappy when I admitted I used <code>simpa</code> for <code>simp</code>+<code>refl</code></p>",
        "id": 276735499,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648314349
    },
    {
        "content": "<p>This is also a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial.comp_prod</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.prod</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">polynomial.prod_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.map_map</span><span class=\"o\">],</span>\n<span class=\"c1\">-- here the goal is</span>\n<span class=\"c1\">-- (multiset.map ((λ (q : R[X]), q.comp p) ∘ f) s.val).prod.coeff n = (∏ (i : ι) in s, (f i).comp p).coeff n</span>\n<span class=\"c1\">-- and the following refl proves it</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276736591,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648315826
    }
]