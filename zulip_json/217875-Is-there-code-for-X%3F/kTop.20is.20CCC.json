[
    {
        "content": "<p>kTop = the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-spaces (a topological <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is called a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-space if a subspace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">U \\subseteq X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is open if and only if the preimage <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>t</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">t^{-1}(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> is open for any compact Hausdorff space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and continuous <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>:</mo><mi>C</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">t : C \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>)</p>\n<p>CCC = Cartesian Closed Categories (a category with an internal notion of functions) <a href=\"https://github.com/leanprover-community/mathlib/issues/2894\">#2894</a></p>\n<p>reference: <a href=\"https://ncatlab.org/nlab/show/compactly+generated+topological+space#cartesian_closure\">https://ncatlab.org/nlab/show/compactly+generated+topological+space#cartesian_closure</a></p>",
        "id": 200970908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280114
    },
    {
        "content": "<ol>\n<li>do we have k-spaces in Lean?</li>\n<li>do we have kTop (the category) in Lean?</li>\n<li>do we know that kTop is CCC in Lean?</li>\n</ol>",
        "id": 200970948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592280133
    },
    {
        "content": "<p>Definitely not for 3, there's currently no instances of CCC in mathlib yet - I'm preparing a PR to show Type u is CCC and another for presheaf categories but as far as I know there aren't any others floating about</p>",
        "id": 200970982,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592280233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> wasn't there a start on compactly generated things in the condensed repo?</p>",
        "id": 200978052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592289575
    },
    {
        "content": "<p>what is the condensed repo?</p>",
        "id": 200978181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592289704
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/condensed-sets\">https://github.com/ImperialCollegeLondon/condensed-sets</a></p>",
        "id": 200979377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592291046
    },
    {
        "content": "<p>It's a long time I did anything in that repo</p>",
        "id": 200979401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592291066
    },
    {
        "content": "<p>I have some super old code for this that predates category theory in mathlib, but I think it essentially does 1-3.</p>",
        "id": 201001708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592307303
    },
    {
        "content": "<p>It's worthwhile to be general in the \"probe\" spaces--not just the family of compact spaces, but an arbitrary family (for the most part, a smaller family like metric spaces or the spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>).</p>",
        "id": 201001936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592307440
    },
    {
        "content": "<p>I was wondering if there is any news on this?</p>",
        "id": 311163263,
        "sender_full_name": "Boris Kjær",
        "timestamp": 1668963951
    },
    {
        "content": "<p>Is it even worth formalizing kTop, or should we do the right thing and go with condensed sets from the beginning?</p>",
        "id": 311177201,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668972615
    },
    {
        "content": "<p>I never saw anyone trying to do homotopy theory with condensed sets. Though I think they should have a Kan-Quillen-style model structure. Johan and I were talking about this a bit recently actually.</p>",
        "id": 311178351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1668973409
    },
    {
        "content": "<p>There is <a href=\"https://mathoverflow.net/questions/416963/homotopy-theory-with-condensed-sets\">https://mathoverflow.net/questions/416963/homotopy-theory-with-condensed-sets</a> which links to <a href=\"https://arxiv.org/abs/2105.07888\">https://arxiv.org/abs/2105.07888</a>.</p>",
        "id": 311223510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669012915
    },
    {
        "content": "<p>The functor <code>Top_to_Condensed</code> is fully faithful when restricted to this category kTop (proposition 1.7 in Condensed.pdf , where these spaces are called compactly generated). Did LTE formalise anything like this? Boris and I are trying to formalise a result about discreteness of condensed sets which, given that proposition, can be reduced to something like: a topological space is discrete iff it is compactly generated and every continuous map to it from a profinite set has finite discrete image.</p>",
        "id": 311248716,
        "sender_full_name": "Dagur Ásgeirsson",
        "timestamp": 1669024632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> is the expert on that part of LTE. I think faithful might be done. But I'm not sure.</p>",
        "id": 311418605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669047803
    },
    {
        "content": "<p>Hmmm, a simple <code>grep</code> doesn't find anything.</p>",
        "id": 311419014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669047953
    },
    {
        "content": "<p>yeah we didn't do that in LTE. We do have the functor from <code>Top</code> to <code>Condensed Type*</code> here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/92f188bd17f34dbfefc92a83069577f708851aec/src/condensed/top_comparison.lean#L126\">https://github.com/leanprover-community/lean-liquid/blob/92f188bd17f34dbfefc92a83069577f708851aec/src/condensed/top_comparison.lean#L126</a><br>\nIt should be fairly straightforward to see that the restriction to compactly generated topological spaces is fully faithful</p>",
        "id": 311425602,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669049916
    },
    {
        "content": "<p>I want to start moving some condensed stuff to mathlib, but I've been avoiding doing so because of the ongoing port to Lean4.</p>",
        "id": 311426048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669050044
    },
    {
        "content": "<p>Isn't the ongoing port to Lean4 a reason to <em>do</em> the move? Last chance to save this code, etc.</p>",
        "id": 311731036,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669161001
    },
    {
        "content": "<p>Maybe. The way i see it, rotting code in LTE is essentially equivalent to rotting code in the non-ported parts of mathlib3. So as long as the prerequisite parts of mathlib3 get ported, it wouldn't matter either way.</p>",
        "id": 311734980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669163314
    },
    {
        "content": "<p>Plus, I would prefer to devote my (currently nonexistent) lean-code-writing time to porting instead of new mathlib3 prs.</p>",
        "id": 311735382,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669163536
    }
]