[
    {
        "content": "<p>I want to define a parametrized typeclass. However, the axioms that define it rely on some variables that can only be defined dependent on the parameters. If I write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"kd\">parameter</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">another</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">some_transformation</span> <span class=\"kd\">parameter</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">parametrized</span> <span class=\"kd\">parameter</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"kd\">axiom</span> <span class=\"o\">:</span> <span class=\"n\">some_predicate</span> <span class=\"n\">another</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would it be valid Lean code? If not, how do I render this concept?</p>",
        "id": 269318233,
        "sender_full_name": "Quarrie",
        "timestamp": 1643142123
    },
    {
        "content": "<p>Yes it's definitely possible <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. However, you will have to make <code>another</code> visible from the outside of the class, as Lean can't guess it from <code>parameter</code> alone (however it can guess <code>parameter</code> from <code>another</code>).</p>",
        "id": 269318450,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643142236
    },
    {
        "content": "<p>It would be easier to answer if you provide a complete minimal example</p>",
        "id": 269318600,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643142288
    },
    {
        "content": "<p>Your lean code is incorrect and there is more than one way to interpret it</p>",
        "id": 269318730,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643142345
    },
    {
        "content": "<p>One important detail is <code>parameter</code> is a reserved keyword, so that probably isn't the right \"variable name\". You can tell from the syntax highlighting here.</p>",
        "id": 269318972,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643142442
    },
    {
        "content": "<p>Likewise <code>axiom</code></p>",
        "id": 269319307,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643142588
    },
    {
        "content": "<p>Reid, you might like: <a href=\"#narrow/stream/144837-PR-reviews/topic/.235698.20strongly.20regular.20graphs/near/266519557\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.235698.20strongly.20regular.20graphs/near/266519557</a></p>",
        "id": 269319608,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643142698
    },
    {
        "content": "<p>So in my case, assume an inductive type called <code>strict_product_type (E : Type u) (prod : E -&gt; E -&gt; E)</code> and a function called <code>down_convert</code> of type <code>strict_product_type E tprod -&gt; Type u</code> are defined earlier in the code. I want to write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">strict_product_type</span> <span class=\"n\">E</span> <span class=\"n\">prod</span>\n<span class=\"kd\">def</span> <span class=\"n\">α'</span> <span class=\"o\">:=</span> <span class=\"n\">down_convert</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">β'</span> <span class=\"o\">:=</span> <span class=\"n\">down_convert</span> <span class=\"n\">β</span>\n<span class=\"kd\">def</span> <span class=\"n\">γ'</span> <span class=\"o\">:=</span> <span class=\"n\">down_convert</span> <span class=\"n\">γ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">prod_t</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span>\n<span class=\"kd\">class</span> <span class=\"n\">tensor_product_family</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"n\">prod_t</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">product_spaces_is_associative</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"n\">γ'</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">β'</span> <span class=\"n\">γ'</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">product_elements_is_associative</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α'</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β'</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ'</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">prod_t</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">b</span> <span class=\"n\">g</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 269320232,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143002
    },
    {
        "content": "<p>I think you probably just need to write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">tensor_product_family</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 269320624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143206
    },
    {
        "content": "<p>Oh, nevermind, I see now that <code>prod_t</code> depends on <code>prod</code>.</p>",
        "id": 269320709,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143265
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that will work if we paste it in a lean file?</p>",
        "id": 269320752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143299
    },
    {
        "content": "<p>I wouldn't be asking here if I could, unfortunately</p>",
        "id": 269320888,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143355
    },
    {
        "content": "<p>If I managed to disentangle the element product from the space product I don't see how I could get \"the kronecker product over R^n\" to be accepted as an instance for example</p>",
        "id": 269320908,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143373
    },
    {
        "content": "<p>I mean just something that includes <code>strict_product_type</code>and <code>down_convert</code> (or some approximation of those)</p>",
        "id": 269320973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143402
    },
    {
        "content": "<p>They are currently defined thus:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">strict_product_type</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">strict_product_type</span>\n<span class=\"bp\">|</span> <span class=\"n\">left_prod</span> <span class=\"o\">:</span> <span class=\"n\">strict_product_type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">strict_product_type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">down_convert</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tprod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">strict_product_type</span> <span class=\"n\">E</span> <span class=\"n\">tprod</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">left_prod</span> <span class=\"n\">χ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">χ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 269321025,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143431
    },
    {
        "content": "<p>and <code>left_prod</code>?</p>",
        "id": 269321126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143468
    },
    {
        "content": "<p>I'm just looking for code that works without the problematic class declaration.</p>",
        "id": 269321334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143563
    },
    {
        "content": "<p><code>left_prod</code> is a constructor of one argument, isn't it? (Basically <code>strict_product_type</code> is supposed to be a Peano naturals that I can unroll with <code>down_convert</code> to generate some type tensor'd with itself n times.) Did I define it incorrectly?</p>",
        "id": 269321450,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143629
    },
    {
        "content": "<p>Something is off. The code you just gave does not work. Could you take a quick look at the link <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 269321513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143675
    },
    {
        "content": "<p>Oh right the imports</p>",
        "id": 269321616,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143715
    },
    {
        "content": "<p>import algebra.module.basic<br>\nimport analysis.inner_product_space.basic<br>\nimport linear_algebra.bilinear_form<br>\nimport linear_algebra.tensor_product</p>",
        "id": 269321620,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143715
    },
    {
        "content": "<p>Even if I add <code>open strict_product_type</code> it still doesn't work.</p>",
        "id": 269321625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143718
    },
    {
        "content": "<p>It's not just the imports, your definition of <code>down_convert</code> doesn't work for me.</p>",
        "id": 269321719,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143768
    },
    {
        "content": "<p>That's odd, can you paste the error you're receiving?</p>",
        "id": 269321773,
        "sender_full_name": "Quarrie",
        "timestamp": 1643143795
    },
    {
        "content": "<p>I get a <code>ill-formed match/equation expression</code>.</p>",
        "id": 269322040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643143912
    },
    {
        "content": "<p>Maybe if we wrap the left_prod case with parentheses?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">left_prod</span> <span class=\"n\">χ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">χ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 269322342,
        "sender_full_name": "Quarrie",
        "timestamp": 1643144043
    },
    {
        "content": "<p>With the parens I still get an error, that the equation compiler fails because lean can't automatically prove the recursive function terminates. This would be a lot more efficient if you could give us some code that works, not including the <code>class</code> declaration that you want to ask about. If that's not the only issue, then we can start with the first problem first, but it's hard to diagnose anything if we don't have a place to start.</p>",
        "id": 269322931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643144299
    },
    {
        "content": "<p>Perhaps checking your lean version would help here</p>",
        "id": 269323286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643144428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nleanprover-community/lean:3.38.0</p>",
        "id": 269323470,
        "sender_full_name": "Quarrie",
        "timestamp": 1643144492
    },
    {
        "content": "<p>I'm also on <code>3.38.0</code> with the freshest of mathlibs.</p>",
        "id": 269323597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643144534
    },
    {
        "content": "<p>Am I right that <code>strict_product_type</code> does not actually depend on <code>E</code> and <code>tprod</code> and can be replaced by a natural number?</p>",
        "id": 269323970,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643144674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269323970\">said</a>:</p>\n<blockquote>\n<p>Am I right that <code>strict_product_type</code> does not actually depend on <code>E</code> and <code>tprod</code> and can be replaced by a natural number?</p>\n</blockquote>\n<p>Yeah, the work is done by the down_convert function. It's only an explicit Peano because it seemed less non-obvious-error-prone, with the plan being to replace it with the naturals from the standard library once I got it working</p>",
        "id": 269324209,
        "sender_full_name": "Quarrie",
        "timestamp": 1643144770
    },
    {
        "content": "<p>The strict_product_type type <em>does</em> contain E and tprod information, but that can indeed be packed into down_convert</p>",
        "id": 269324268,
        "sender_full_name": "Quarrie",
        "timestamp": 1643144798
    },
    {
        "content": "<p>Then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">down_convert</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 269324309,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643144816
    },
    {
        "content": "<p>which is equivalent (but not defeq because of they use recursion on different sides) to <code>down_convert E tprod n = (tprod E)^[n] E</code></p>",
        "id": 269324503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643144889
    },
    {
        "content": "<p>Alright, looks like I found the root error that's causing all the rest</p>",
        "id": 269324948,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145113
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">quarrie</span><span class=\"bp\">/</span><span class=\"n\">Git</span><span class=\"bp\">/</span><span class=\"n\">mathlib_testing</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tensor_product.lean</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">α'</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 269324957,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145117
    },
    {
        "content": "<p>...how do I interpret this? that's a concerning amount of unknown universe.</p>",
        "id": 269325105,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145176
    },
    {
        "content": "<p>I'm not sure why it depends on a natural number.</p>",
        "id": 269325139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145188
    },
    {
        "content": "<p>There's an <code>expected</code> line just below</p>",
        "id": 269325153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643145195
    },
    {
        "content": "<p>What are the first 38 lines of the file?</p>",
        "id": 269325199,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269325153\">said</a>:</p>\n<blockquote>\n<p>There's an <code>expected</code> line just below</p>\n</blockquote>\n<p>No, oddly. Just below is an identical error regarding β'.</p>",
        "id": 269325239,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145227
    },
    {
        "content": "<p>Can you just copy+paste them in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 269325269,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269325199\">said</a>:</p>\n<blockquote>\n<p>What are the first 38 lines of the file?</p>\n</blockquote>\n<p>With the comments removed for conciseness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> This was lines 1-5 -/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_form</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! This was lines 12-22 -/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">inner_product_space</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">down_convert</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">α'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">E</span> <span class=\"n\">prod</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">β'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">E</span> <span class=\"n\">prod</span><span class=\"o\">)</span> <span class=\"n\">β</span>\n<span class=\"kd\">def</span> <span class=\"n\">γ'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">E</span> <span class=\"n\">prod</span><span class=\"o\">)</span> <span class=\"n\">γ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">prod_t</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span>\n</code></pre></div>",
        "id": 269325436,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145296
    },
    {
        "content": "<p><code>def α'</code> defines a type that depends on <code>E</code>, <code>prod</code>, and <code>α</code>.</p>",
        "id": 269325536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145353
    },
    {
        "content": "<p>Actually, <code>α'</code> is defeq to <code>β'</code></p>",
        "id": 269325574,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145362
    },
    {
        "content": "<p>And both are defeq to <code>down_convert</code>.</p>",
        "id": 269325669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269325536\">said</a>:</p>\n<blockquote>\n<p><code>def α'</code> defines a type that depends on <code>E</code>, <code>prod</code>, and <code>α</code>.</p>\n</blockquote>\n<p>That's the intended use, since α' is meant to be an arbitrary power of E so that I can reason about its tensor product.</p>",
        "id": 269325733,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145421
    },
    {
        "content": "<p>So the problem is that Lean doesn't know what the argument to <code>α'</code> is</p>",
        "id": 269325820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643145460
    },
    {
        "content": "<p><code>variables α</code> is just a way to say \"if I use <code>α</code> in a definition/lemma and don't list it as an argument, then add it as an argument to the definition\".</p>",
        "id": 269325822,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145461
    },
    {
        "content": "<p>Probably you want to use (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">α'</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">down_convert</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 269325980,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145525
    },
    {
        "content": "<p>Good idea, let me see how that works</p>",
        "id": 269326249,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145624
    },
    {
        "content": "<p>The problem with your <code>def</code> is that Lean immediately looses connection between the definition <code>α'</code> and the variable <code>α</code>.</p>",
        "id": 269326315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145660
    },
    {
        "content": "<p>That makes sense!</p>",
        "id": 269326443,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145714
    },
    {
        "content": "<p>Alright, that's solved and now there's a new error</p>",
        "id": 269326556,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145759
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">quarrie</span><span class=\"bp\">/</span><span class=\"n\">Git</span><span class=\"bp\">/</span><span class=\"n\">mathlib_testing</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tensor_product.lean</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">infer</span> <span class=\"n\">type</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">sort</span> <span class=\"n\">expected</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 269326564,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145763
    },
    {
        "content": "<p>(line 39 is the typeclass declaration)</p>",
        "id": 269326572,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145768
    },
    {
        "content": "<p>We need to see the source code, not just the error message.</p>",
        "id": 269326613,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643145790
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Former 1-5 -/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_form</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Formerly 12-22 -/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">inner_product_space</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">down_convert</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">down_convert</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">α'</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">down_convert</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"n\">α</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">β'</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">down_convert</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"n\">β</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">γ'</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">down_convert</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"n\">γ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">prod_t</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span>\n<span class=\"kd\">class</span> <span class=\"n\">tensor_product_family</span> <span class=\"n\">E</span> <span class=\"n\">prod</span> <span class=\"n\">prod_t</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">product_spaces_is_associative</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"n\">γ'</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α'</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">β'</span> <span class=\"n\">γ'</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">product_elements_is_associative</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α'</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β'</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ'</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">prod_t</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">prod_t</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">b</span> <span class=\"n\">g</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">inner_product_space</span>\n</code></pre></div>",
        "id": 269326704,
        "sender_full_name": "Quarrie",
        "timestamp": 1643145836
    },
    {
        "content": "<p>You only need one of the notations if you make it <code>local notation α </code>'<code> := down_convert E prod α</code></p>",
        "id": 269326880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643145893
    },
    {
        "content": "<p>Let's not optimize before we catch the bug.</p>",
        "id": 269327712,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643146236
    },
    {
        "content": "<p>Also, with your notation Lean will try to use <code>down_convert</code> for <code>a'</code>.</p>",
        "id": 269327761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643146259
    },
    {
        "content": "<p><code>product_spaces_is_associative</code> has no <code>∀</code>/<code>∃</code> on <code>x</code>.</p>",
        "id": 269327842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643146312
    },
    {
        "content": "<p>Can you post the mathematical definition you're trying to formalize (e.g., what are <code>prod</code>, <code>prod_t</code> in some important specific case)?</p>",
        "id": 269328186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643146481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269328186\">said</a>:</p>\n<blockquote>\n<p>Can you post the mathematical definition you're trying to formalize (e.g., what are <code>prod</code>, <code>prod_t</code> in some important specific case)?</p>\n</blockquote>\n<p>In one extremely important specific case, <code>prod</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup><mo>→</mo><msup><mi mathvariant=\"double-struck\">C</mi><mi>m</mi></msup><mo>→</mo><msup><mi mathvariant=\"double-struck\">C</mi><mrow><mi>n</mi><mo>∗</mo><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^n \\rightarrow \\mathbb{C}^m \\rightarrow \\mathbb{C}^{n*m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span></span> and <code>prod_t</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>e</mi><mi>i</mi></msub><mo>→</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>m</mi></msubsup><msub><mi>b</mi><mi>j</mi></msub><msub><mi>e</mi><mi>j</mi></msub><mo>→</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>m</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><msub><mi>e</mi><mrow><mi>i</mi><mi>m</mi><mo>+</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{i = 0}^{n} a_ie_i \\rightarrow \\sum_{j = 0}^{m} b_je_j \\rightarrow \\sum_{i = 0}^{n} \\sum_{j = 0}^{m} a_ib_je_{im+j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2401em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2401em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">im</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 269330389,
        "sender_full_name": "Quarrie",
        "timestamp": 1643147583
    },
    {
        "content": "<p>The axiom about type product associativity is then \"it makes sense to talk about an n-qubit state\" and the axiom about element product associativity is then \"if a state is separable, what order you separate it in doesn't change the individual qubits\"</p>",
        "id": 269330561,
        "sender_full_name": "Quarrie",
        "timestamp": 1643147670
    },
    {
        "content": "<p>double $ :)</p>",
        "id": 269330567,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643147674
    },
    {
        "content": "<p>thank you</p>",
        "id": 269330621,
        "sender_full_name": "Quarrie",
        "timestamp": 1643147697
    },
    {
        "content": "<p>What exactly should the first axiom say (in terms of <code>∀</code>, <code>∃</code> etc)?</p>",
        "id": 269331321,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148063
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269331417,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148108
    },
    {
        "content": "<p>Note that Lean doesn't understand that, e.g., <code>α × (β × γ)</code> and <code>(α × β) × γ</code> are \"equal\".</p>",
        "id": 269331433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148114
    },
    {
        "content": "<p>You need to insert an explicit isomorphism.</p>",
        "id": 269331496,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148133
    },
    {
        "content": "<p>And probably you should use this isomorphism in the second axiom.</p>",
        "id": 269331606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148200
    },
    {
        "content": "<p>/me is away for 1-2 hrs</p>",
        "id": 269331651,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269331321\">said</a>:</p>\n<blockquote>\n<p>What exactly should the first axiom say (in terms of <code>∀</code>, <code>∃</code> etc)?</p>\n</blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>g</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo separator=\"true\">,</mo><msup><mi>E</mi><mrow><mo>⊗</mo><mi>a</mi></mrow></msup><mo>⊗</mo><mo stretchy=\"false\">(</mo><msup><mi>E</mi><mrow><mo>⊗</mo><mi>b</mi></mrow></msup><mo>⊗</mo><msup><mi>E</mi><mrow><mo>⊗</mo><mi>g</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>E</mi><mrow><mo>⊗</mo><mi>a</mi></mrow></msup><mo>⊗</mo><msup><mi>E</mi><mrow><mo>⊗</mo><mi>b</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>⊗</mo><msup><mi>E</mi><mrow><mo>⊗</mo><mi>g</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\forall a, b, g \\in \\mathbb{N}, E^{\\otimes a} \\otimes (E^{\\otimes b} \\otimes E^{\\otimes g}) = (E^{\\otimes a} \\otimes E^{\\otimes b}) \\otimes E^{\\otimes g}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9658em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 269331668,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148242
    },
    {
        "content": "<p>They should be the same type, so putting an isomorphism there would break it.</p>",
        "id": 269331729,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148272
    },
    {
        "content": "<p>More clearly, the example I'm using is let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo><mi mathvariant=\"normal\">≔</mi></mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup><mo separator=\"true\">,</mo><mi>a</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>b</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>g</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">E \\coloneqq \\mathbb{C}^2, a = 1, b = 1, g = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mop\" style=\"position:relative;top:-0.0347em;\">:</span></span><span class=\"mrel\"><span class=\"mspace\" style=\"margin-right:-0.0667em;\"></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>.</p>",
        "id": 269331797,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148305
    },
    {
        "content": "<p>You shouldn't use equality of types in your axioms.</p>",
        "id": 269331863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148332
    },
    {
        "content": "<p>They won't ever be the same type. And even if they were, you shouldn't use this equality.</p>",
        "id": 269331864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643148334
    },
    {
        "content": "<p>Equality of types is evil.</p>",
        "id": 269331879,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643148342
    },
    {
        "content": "<p>You should either make them defeq (probably, impossible), or introduce explicit isomorphisms.</p>",
        "id": 269331950,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269331864\">said</a>:</p>\n<blockquote>\n<p>They won't ever be the same type. And even if they were, you shouldn't use this equality.</p>\n</blockquote>\n<p>For clarity, this is not a cartesian product. This is a tensor product of which Kronecker is an example</p>",
        "id": 269331975,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148376
    },
    {
        "content": "<p>Maybe, one can say, you don't require the full power of \"equality of types\" as an axiom, even having a weaker \"these types are explicitly isomorphic\" will likely be powerful enough for what you want to use this structure for.</p>",
        "id": 269331994,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643148388
    },
    {
        "content": "<p>Then you'll need extra axioms about this family of isomorphisms.</p>",
        "id": 269332069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643148429
    },
    {
        "content": "<p>I'm fairly sure <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> ran into similar issues when working on the tensor algebra.</p>",
        "id": 269332079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643148435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269331879\">said</a>:</p>\n<blockquote>\n<p>Equality of types is evil.</p>\n</blockquote>\n<p>How should I handle this, then?</p>",
        "id": 269332121,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148454
    },
    {
        "content": "<p>I cannot use an isomorphism as that would destroy the power of the axiom.</p>",
        "id": 269332149,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148471
    },
    {
        "content": "<p>What are you trying to do, mathematically?</p>",
        "id": 269332233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643148505
    },
    {
        "content": "<p>The power of the axiom is that it is usually unprovable? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 269332278,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643148530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269332233\">said</a>:</p>\n<blockquote>\n<p>What are you trying to do, mathematically?</p>\n</blockquote>\n<p>Define a family of types endowed with a tensor product, so that I can reason about an n-qubit system.</p>",
        "id": 269332382,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148562
    },
    {
        "content": "<p>Take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_category\">docs#category_theory.monoidal_category</a></p>",
        "id": 269332421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643148587
    },
    {
        "content": "<p>404's out, which one?</p>",
        "id": 269332482,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148603
    },
    {
        "content": "<p>Sorry, I fixed the link</p>",
        "id": 269332528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643148630
    },
    {
        "content": "<p>Note the associator axiom, for example</p>",
        "id": 269332608,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643148687
    },
    {
        "content": "<p>I don't know how much category theory you want to use in your work, but using monoidal categories is one possible approach</p>",
        "id": 269333001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643148848
    },
    {
        "content": "<p>This does look useful, though I'll have to restrict the dependent product to an independent product and the associator to the identity.</p>",
        "id": 269333194,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148967
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 269333292,
        "sender_full_name": "Quarrie",
        "timestamp": 1643148992
    },
    {
        "content": "<p>But you can't restrict them to the identity!</p>",
        "id": 269333728,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643149098
    },
    {
        "content": "<p>The tensor product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>⊗</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A\\otimes(B\\otimes C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> is not equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A\\otimes B)\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (at least for vector spaces).</p>",
        "id": 269333949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643149212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269333949\">said</a>:</p>\n<blockquote>\n<p>The tensor product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>⊗</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A\\otimes(B\\otimes C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> is not equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">(A\\otimes B)\\otimes C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (at least for vector spaces).</p>\n</blockquote>\n<p>Is Kronecker product not an instance of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊗</span></span></span></span>?</p>",
        "id": 269334955,
        "sender_full_name": "Quarrie",
        "timestamp": 1643149799
    },
    {
        "content": "<p>I've been under the impression that it makes sense to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup><mo>⊗</mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>⊗</mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>4</mn></msup><mo>=</mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup><mo>⊗</mo><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup><mo>⊗</mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>4</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi mathvariant=\"double-struck\">C</mi><mn>16</mn></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{C}^2 \\otimes \\mathbb{C}^2) \\otimes \\mathbb{C}^4 = \\mathbb{C}^2 \\otimes (\\mathbb{C}^2 \\otimes \\mathbb{C}^4) = \\mathbb{C}^{16}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">16</span></span></span></span></span></span></span></span></span></span></span></span> for instance</p>",
        "id": 269335112,
        "sender_full_name": "Quarrie",
        "timestamp": 1643149862
    },
    {
        "content": "<p>The tensor product of two vector spaces is \"defined\" by a universal property, so it doesn't really even make sense to ask if two tensor products are equal.</p>",
        "id": 269335648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150141
    },
    {
        "content": "<p>(Of course, we agree these spaces are \"canonically isomorphic\".)</p>",
        "id": 269335739,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643150176
    },
    {
        "content": "<p>The equality symbol you're using there means \"canonical isomorphism\"</p>",
        "id": 269335746,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643150181
    },
    {
        "content": "<p>(snap!)</p>",
        "id": 269335760,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643150191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269335648\">said</a>:</p>\n<blockquote>\n<p>The tensor product of two vector spaces is \"defined\" by a universal property, so it doesn't really even make sense to ask if two tensor products are equal.</p>\n</blockquote>\n<p>Okay, so what's the word for the thing I want (an instance of a product that satisfies that property)?</p>",
        "id": 269335770,
        "sender_full_name": "Quarrie",
        "timestamp": 1643150198
    },
    {
        "content": "<p>And actually the right-hand equality (the one with C^16 on the right) should NOT be written as equality (in my opinion).</p>",
        "id": 269335870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643150266
    },
    {
        "content": "<p>What do you <em>mean</em> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>⊗</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V\\otimes W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>? You can't mean \"any vector space satisfying the universal property\" because in formalised mathematics this cannot be used as a definition. So you have to choose some explicit model, perhaps some quotient of some huge group or whatever definition you want to use in your proof that tensor products exist. And the moment you make that choice none of the things you're claiming are equalities, are in fact equalities.</p>",
        "id": 269335882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150278
    },
    {
        "content": "<p>They're canonical isomorphisms, sure. But that's not what the <code>=</code> symbol means in lean.</p>",
        "id": 269336012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150354
    },
    {
        "content": "<p>In fact as Adam says that last iso to C^16 isn't even canonical. We all agree that <code>2*2*4=16</code> but when you categorify the equality changes to an isomorphism</p>",
        "id": 269336175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269335882\">said</a>:</p>\n<blockquote>\n<p>What do you <em>mean</em> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>⊗</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V\\otimes W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>? You can't mean \"any vector space satisfying the universal property\" because in formalised mathematics this cannot be used as a definition. So you have to choose some explicit model, perhaps some quotient of some huge group or whatever definition you want to use in your proof that tensor products exist. And the moment you make that choice none of the things you're claiming are equalities, are in fact equalities.</p>\n</blockquote>\n<p>My intention was that the meaning of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>⊗</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V \\otimes W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> was decided by the programmer at the moment that the programmer endowed the family of types containing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> with an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊗</span></span></span></span> operation. In my case, I want to use this for quantum program verification, so I'm working on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and want to let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊗</span></span></span></span> be the Kronecker product and show that it satisfies <em>insert axioms here</em>.</p>",
        "id": 269336217,
        "sender_full_name": "Quarrie",
        "timestamp": 1643150491
    },
    {
        "content": "<p>The axioms you want are those of a monoidal category perhaps</p>",
        "id": 269336304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150532
    },
    {
        "content": "<p>Note <code>Module \\C</code> is a category which should have a monoidal category instance :) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module\">docs#Module</a></p>",
        "id": 269336320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643150543
    },
    {
        "content": "<p>When the programmer made the definition they did indeed make an explicit construction and that's exactly why we know that the tensor product can't be proved to be associative on the nose</p>",
        "id": 269336436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150628
    },
    {
        "content": "<p>And as for identifying it with C^16 you'll have to explicitly decide how to order your basis vectors of the tensor product -- the isomorphism here involves a genuine choice which you'll need to keep track of if you're doing mathematics rigourously</p>",
        "id": 269336669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269336436\">said</a>:</p>\n<blockquote>\n<p>When the programmer made the definition they did indeed make an explicit construction and that's exactly why we know that the tensor product can't be proved to be associative on the nose</p>\n</blockquote>\n<p>Why wouldn't a user-supplied tensor product instance be provably associative? Would <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup><mo>⊗</mo><msup><mi mathvariant=\"double-struck\">C</mi><mi>m</mi></msup><mo><mi mathvariant=\"normal\">≔</mi></mo><msup><mi mathvariant=\"double-struck\">C</mi><mrow><mi>n</mi><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^n \\otimes \\mathbb{C}^m \\coloneqq \\mathbb{C}^{nm}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mop\" style=\"position:relative;top:-0.0347em;\">:</span></span><span class=\"mrel\"><span class=\"mspace\" style=\"margin-right:-0.0667em;\"></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">nm</span></span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub><mo>:</mo><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>j</mi></msub><mo>:</mo><msup><mi mathvariant=\"double-struck\">C</mi><mi>m</mi></msup><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>i</mi></msub><msub><mo>⊗</mo><mi>t</mi></msub><msub><mi>e</mi><mi>j</mi></msub><mo>=</mo><msub><mi>e</mi><mrow><mi>i</mi><mi>m</mi><mo>+</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">e_i : \\mathbb{C}^n, e_j : \\mathbb{C}^m, e_i \\otimes_t e_j = e_{im + j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">im</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> not function as a tensor product?</p>",
        "id": 269336761,
        "sender_full_name": "Quarrie",
        "timestamp": 1643150806
    },
    {
        "content": "<p>It would function as a tensor product in that case but it's not the definition which was made in Lean</p>",
        "id": 269336832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150871
    },
    {
        "content": "<p>Your definition is isomorphic to Lean's, hence the isomorphism we're all going on about</p>",
        "id": 269336919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643150922
    },
    {
        "content": "<p>The typeclass I'm building forces the user to supply their own tensor product though, by providing it as an argument (e.g. one might say \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> forms a family of types endowed with the tensor product <code>kron</code>\")</p>",
        "id": 269336968,
        "sender_full_name": "Quarrie",
        "timestamp": 1643150961
    },
    {
        "content": "<p>Is this non-idiomatic for Lean code?</p>",
        "id": 269337095,
        "sender_full_name": "Quarrie",
        "timestamp": 1643151008
    },
    {
        "content": "<p>Maybe the key words here are that <span class=\"user-mention\" data-user-id=\"448090\">@Quarrie</span> wants a strictification of the monoidal category of vector spaces with tensor products</p>",
        "id": 269337558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643151247
    },
    {
        "content": "<p>You can define a skeleton for the subcategory of <code>Module C</code> of f.d. spaces which has N as the type of objects. But again, associativity of multiplication of naturals is propositional equality, not definitional equality, so you will likely run into issues if you start using equality of objects in this skeletal category.</p>",
        "id": 269337564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643151250
    },
    {
        "content": "<p>(if you also want infinite dimensional vector spaces, you can work with cardinals)</p>",
        "id": 269337738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643151359
    },
    {
        "content": "<p>I'm not sure you can define a strictification like this with <code>prod</code> taking <code>Type</code>s.  This is what <code>down_convert</code> is presumably tying to solve?</p>\n<p>Maybe another way is to have a function that takes <code>List Nat</code> and produces the corresponding vector space? Tensor product is then concatenation of lists, which is strictly associative. But then you still have these canonical isomorphisms for whether you concatenate then take the vector space or take the vector spaces and then tensor product.</p>",
        "id": 269337940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643151460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269337940\">said</a>:</p>\n<blockquote>\n<p>I'm not sure you can define a strictification like this with <code>prod</code> taking <code>Type</code>s.  This is what <code>down_convert</code> is presumably tying to solve?</p>\n<p>Maybe another way is to have a function that takes <code>List Nat</code> and produces the corresponding vector space? Tensor product is then concatenation of lists, which is strictly associative. But then you still have these canonical isomorphisms for whether you concatenate then take the vector space or take the vector spaces and then tensor product.</p>\n</blockquote>\n<p><code>down_convert</code> is meant to define a single canonical order of association so that I can (a) check if associating in a different order produces the same result, and (b) have a convenient way to induct through the powers of <code>E</code>. Re: <code>Type u</code>, I ideally want <code>prod</code> to only have to accept powers of <code>E</code> (after all, doesn't really make sense to take the Kronecker product of objects that don't even have a scalar multiple operation, and I'd rather not deal with such when instantiating the Kronecker product as this typeclass) -- is this conveniently possible in Lean?</p>",
        "id": 269338363,
        "sender_full_name": "Quarrie",
        "timestamp": 1643151642
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.kronecker\">docs#matrix.kronecker</a></p>",
        "id": 269338634,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643151781
    },
    {
        "content": "<p>I don't know how well this will work in practice, but what I was suggesting is trying to leave the tensor product in the <code>list nat</code> representation as long as possible, and then <code>prod</code> only takes powers of <code>E</code> since it's actually only taking these <code>list</code>s</p>",
        "id": 269338713,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643151831
    },
    {
        "content": "<p>A problem with <code>Type</code> is that, unlike for terms of inductive types, you can't do any sort of <code>match</code> expression on types. So, a way around this is to manipulate algebraic expressions (here, lists of naturals) that then get turned into types.</p>",
        "id": 269338874,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643151921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Is.20this.20a.20valid.20way.20of.20defining.20a.20typeclass.3F/near/269338713\">said</a>:</p>\n<blockquote>\n<p>I don't know how well this will work in practice, but what I was suggesting is trying to leave the tensor product in the <code>list nat</code> representation as long as possible, and then <code>prod</code> only takes powers of <code>E</code> since it's actually only taking these <code>list</code>s</p>\n</blockquote>\n<p>An issue there would seem to be that this produces the product <em>spaces</em>, but does not offer a way to give the product <em>elements</em>.</p>",
        "id": 269339321,
        "sender_full_name": "Quarrie",
        "timestamp": 1643152187
    },
    {
        "content": "<p>Right, that is an issue. A way around <em>that</em> is to have a wrapper around <code>list nat</code> so that it has a coercion to a Type, so you can pretend it's actually a vector space. I need to check how well this actually works in this case</p>",
        "id": 269339512,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643152306
    },
    {
        "content": "<p>So basically, the user would supply:</p>\n<ul>\n<li>the base type</li>\n<li>what's basically a Peano successor, but for tensor products</li>\n<li>and the element tensor product<br>\nIs this correct?</li>\n</ul>",
        "id": 269340578,
        "sender_full_name": "Quarrie",
        "timestamp": 1643153000
    },
    {
        "content": "<p>When you write a typeclass, it is useful to define at least one instance of that class.</p>",
        "id": 269340709,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643153069
    },
    {
        "content": "<p>This way you'll see whether your axioms make sense in Lean.</p>",
        "id": 269340741,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643153090
    },
    {
        "content": "<p>So, you can start with an instance.</p>",
        "id": 269340758,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643153104
    },
    {
        "content": "<p>Define some <code>prod</code> etc (note that <code>prod</code> in the root namespace is taken), then prove some lemmas about your definitions, then define a typeclass that takes these lemmas as arguments.</p>",
        "id": 269340806,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643153155
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 269341058,
        "sender_full_name": "Quarrie",
        "timestamp": 1643153297
    },
    {
        "content": "<p>Regarding a list of types, that design strategy is explored in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/holor\">docs#holor</a></p>",
        "id": 269345662,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643156231
    },
    {
        "content": "<p>I haven't succeeded really with my proposal, other than defining a function that takes lists of natural numbers to specific tensor products of spaces.</p>\n<p>Is there a better way to recursively take tensor products of spaces? It was awkward needing to recursively create the space and passing along the necessary typeclasses for each step.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_form</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">inner_product_space</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">pow_space</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">include</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"kd\">class</span> <span class=\"n\">space_for_list</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">space</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">tensor_space'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pow_space</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">::</span><span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">tensor_space'</span> <span class=\"n\">ns</span> <span class=\"k\">with</span> <span class=\"n\">α'</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">pow_space</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">α'</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_space</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tensor_space'</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ns</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">tensor_space</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tensor_space'</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ns</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_space</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tensor_space'</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ns</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"c1\">-- examples that defeq works</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tensor_space₁</span> <span class=\"o\">{</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tensor_space</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">n1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n1</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tensor_space₂</span> <span class=\"o\">{</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tensor_space</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">n2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n1</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n2</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tensor_space₃</span> <span class=\"o\">{</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tensor_space</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">n3</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n1</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">fin</span> <span class=\"n\">n2</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n3</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tensor_space₄</span> <span class=\"o\">{</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">n3</span> <span class=\"n\">n4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tensor_space</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">n3</span><span class=\"o\">,</span> <span class=\"n\">n4</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n1</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">fin</span> <span class=\"n\">n2</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">fin</span> <span class=\"n\">n3</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n4</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">inner_product_space</span>\n</code></pre></div>\n</div></div>",
        "id": 269346506,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643156821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module\">docs#Module</a> with the monoidal tensor product. The correct instances will be part of the structure.</p>",
        "id": 269348267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643158176
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269348740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643158509
    },
    {
        "content": "<p>Thats wrong. one sec</p>",
        "id": 269348756,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643158524
    },
    {
        "content": "<p>This is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.monoidal</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Module.of</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">foo</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 269348779,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643158548
    },
    {
        "content": "<p>Of course you could replace <code>A</code> with any <code>A</code>-module <code>M</code>, as needed.</p>",
        "id": 269348872,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643158610
    },
    {
        "content": "<p>Note that this is indeed defeq;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tensor_product</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 269348979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643158708
    },
    {
        "content": "<p>but there is a clash of notations, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊗</span></span></span></span> is used both for the unbundled tensor product (under the <code>tensor_product</code> locale), and for the monoidal one.</p>",
        "id": 269349049,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643158755
    },
    {
        "content": "<p>Of course, we could also use <code>list.foldr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.monoidal</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Module.of</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269353921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643162944
    }
]