[
    {
        "content": "<p>Hi, is discrete valuation on a field defined in Mathlib?</p>",
        "id": 242288977,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623372194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"375581\">@François Sunatori</span> mathlib has valuations in pretty great generality. There are arbitrary valuations on rings, and also the special case of discrete valuation rings.</p>",
        "id": 242300100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623385761
    },
    {
        "content": "<p>The exact thing that your are looking for might not be there, but there should be sufficient API to quickly get what you want.</p>",
        "id": 242300112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623385791
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/discrete_valuation_ring\">docs#discrete_valuation_ring</a></p>",
        "id": 242300173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623385847
    },
    {
        "content": "<p>The ridiculous hold-up for me when I was thinking about defining these explicitly last summer was that I didn't know whether the value group should be a multiplicative version of the integers or whether it should be a more general thing just isomorphic to this. We have discrete valuation rings IIRC</p>",
        "id": 242307307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623394502
    },
    {
        "content": "<p>I did see discrete valuation rings, but I'm wondering if there's explicitly this definition:</p>\n<p>A discrete valuation on a field K is a function ν : K× −→ Z that<br>\nsatisfies the following properties.<br>\n(i) ν is surjective.<br>\n(ii) ν(xy) = ν(x) + ν(y).<br>\n(iii) ν(x + y) ≥ min{ν(x), ν(y)}</p>\n<p>or can it be derived from what is already there?</p>",
        "id": 242329068,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623408825
    },
    {
        "content": "<p>I would like to show that</p>\n<p>Let R be a DVR. Then a non-zero element u ∈ R is a unit if and<br>\nonly if ν(u) = 0</p>",
        "id": 242329153,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623408878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"375581\">@François Sunatori</span> nope, I don't think we have exactly that. Specifically, what is missing is <code>(i) v is surjective</code>. I think that your question about DVRs might already be there. You don't need fields to answer that question; you can stay inside <code>R</code>.</p>",
        "id": 242331311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623410504
    },
    {
        "content": "<p>With the valuations we have this would be a map from all of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> to <code>with_zero (multiplicative ℤ)</code></p>",
        "id": 242348041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623419653
    },
    {
        "content": "<p>What sort of things would you like to prove for discrete valuations that are not true for general valuations (on a field, say)?</p>",
        "id": 242349784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623420432
    },
    {
        "content": "<p>Stuff like ramification index can only be defined for discrete valuations maybe?</p>",
        "id": 242378163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623432902
    },
    {
        "content": "<p>The ramification degree in general is the index of the inclusion of the value groups.</p>",
        "id": 242379860,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623433685
    },
    {
        "content": "<p>Although things like the fundamental equality do require some additional assumptions</p>",
        "id": 242380450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623433992
    },
    {
        "content": "<p>There is an entire theory of discrete valuation rings and fields, with theorems such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>f</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">ef=n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> for an extension (ramification index times degree of residue field extension equals degree of field extension) which I have no reason to believe will be true for general valuation rings (in the sense that I have no idea whether it's true). Things like the definition of a uniformiser only make sense for discrete valuations.</p>",
        "id": 242380833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623434171
    },
    {
        "content": "<p><a href=\"https://www.ams.org/journals/tran/1958-088-01/S0002-9947-1958-0100589-6/S0002-9947-1958-0100589-6.pdf\">https://www.ams.org/journals/tran/1958-088-01/S0002-9947-1958-0100589-6/S0002-9947-1958-0100589-6.pdf</a></p>",
        "id": 242381152,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623434365
    },
    {
        "content": "<p>The criteria for equality both mention discreteness of the valuation though ;-)</p>",
        "id": 242381545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623434528
    },
    {
        "content": "<p>Yes, but not of rank 1</p>",
        "id": 242381596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623434562
    },
    {
        "content": "<p>right</p>",
        "id": 242381633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623434582
    },
    {
        "content": "<p>so equality is the sort of thing I'd like to prove for discrete valuations which are not true for general valuations (on a field).</p>",
        "id": 242381703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623434612
    },
    {
        "content": "<p>Fair enough. I would say the first inequality is worth proving as well.</p>",
        "id": 242381844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623434657
    },
    {
        "content": "<p>There is a general theory of valuations on fields, but important special cases are rank 1 valuations (where you can build the theory of rigid analytic geometry) and rank 1 discrete valuations (where you can build things like local class field theory). I think we will have to have these special cases at some point, and I do not know how best to formalise them in Lean</p>",
        "id": 242382243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623434786
    },
    {
        "content": "<p>For rank 1, we can use the characterization saying that the value group has an order embedding in the reals.</p>",
        "id": 242382673,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623434970
    },
    {
        "content": "<p>and for rank 1 discrete we can say that the value group is not 0 but has an order embedding into the integers (or more precisely <code>multiplicative int</code>). The question I'm not sure about is: is that really what we want to say?</p>",
        "id": 242383550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623435385
    },
    {
        "content": "<p>ok I see.. I was trying to see if there were some statements missing about discrete valuation rings or Dedekind domains. I guess many statements about discrete valuations are done at the valuation level.</p>",
        "id": 242465483,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623523916
    },
    {
        "content": "<p>Is there anything (definitions or lemmas) missing to show in <code>dedekind_domain.lean</code>  the equivalence between <code>is_dedekind_domain</code> and <code>is_dedekind_domain_dvr</code>?</p>\n<p>I saw <code>TODO: Prove that these are actually equivalent definitions.</code></p>",
        "id": 242465637,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623524100
    },
    {
        "content": "<p>If you're interested in proving this then give it a try! Cassels Froehlich is a reference I believe</p>",
        "id": 242466236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623524754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"375581\">François Sunatori</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/discrete.20valuation/near/242465637\">said</a>:</p>\n<blockquote>\n<p>Is there anything (definitions or lemmas) missing to show in <code>dedekind_domain.lean</code>  the equivalence between <code>is_dedekind_domain</code> and <code>is_dedekind_domain_dvr</code>?</p>\n<p>I saw <code>TODO: Prove that these are actually equivalent definitions.</code></p>\n</blockquote>\n<p>There's a branch we're slowly working on getting merged, that proves <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_dedekind_domain\">docs#is_dedekind_domain</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_dedekind_domain_inv\">docs#is_dedekind_domain_inv</a> are equivalent. I don't think anyone is working on the <code>_dvr</code> equivalence.</p>",
        "id": 242568178,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623660416
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , I am thinking of working on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_dedekind_domain_dvr_equiv_is_dedekind_domain_inv</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_dedekind_domain_dvr_iff</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">is_dedekind_domain_inv_iff</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243007810,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623931795
    },
    {
        "content": "<p>On which branch is the work on proving <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_dedekind_domain\">docs#is_dedekind_domain</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_dedekind_domain_inv\">docs#is_dedekind_domain_inv</a> are equivalent being done?</p>",
        "id": 243007905,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623931861
    },
    {
        "content": "<p>There is a proof on <a href=\"https://github.com/leanprover-community/mathlib/tree/dedekind-domain-dev\">branch#dedekind-domain-dev</a></p>",
        "id": 243008047,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623931959
    },
    {
        "content": "<p>(That branch is gruesomely, namely 2 months, out-of-date!)</p>",
        "id": 243008166,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623932038
    },
    {
        "content": "<p>ok thanks! I'll take a look</p>",
        "id": 243008558,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623932263
    },
    {
        "content": "<p>by the way, I was looking at branches that may have work related to DVRs or Dedekind domains and found this branch <a href=\"https://github.com/leanprover-community/mathlib/compare/dvr-valuation\">https://github.com/leanprover-community/mathlib/compare/dvr-valuation</a> with the statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is this definition no longer necessary because it lives in a more general form in mathlib? or is it still missing?</p>",
        "id": 243008648,
        "sender_full_name": "François Sunatori",
        "timestamp": 1623932305
    },
    {
        "content": "<p>It's probably still missing because I didn't know whether this was the right definition and then got sidetracked into the question of whether there should be notation for <code>multiplicative int</code>, and then I just forgot about it.</p>",
        "id": 243013524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623935022
    }
]