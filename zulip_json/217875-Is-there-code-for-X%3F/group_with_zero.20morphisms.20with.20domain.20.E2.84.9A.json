[
    {
        "content": "<p>I proved this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext_hom_pnat</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ₁</span> <span class=\"n\">φ₂</span><span class=\"o\">:</span> <span class=\"n\">monoid_with_zero_hom</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">same_on_neg_one</span><span class=\"o\">:</span> <span class=\"n\">φ₁</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ₂</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">same_on_nat</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">φ₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">φ₂</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">φ₁</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ₂</span>\n</code></pre></div>\n<p>I wanted to make a PR to mathlib for it but I can't tell if it would be relevant</p>\n<p>PROS :</p>\n<ul>\n<li>This states is closely related to the fact that ℚ is the fraction field of ℤ</li>\n<li>Mathlib seems open to such results (<a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/int/basic.html\">ring_theory.int.basic</a> collects results in this vein for instance)</li>\n</ul>\n<p>CONS :</p>\n<ul>\n<li>This result might be too specific to be actually useful (it may not be \"mathlib-worthy\" unless generalized)</li>\n</ul>\n<p>One other possibility is to generalize this to fraction field and to provide this result as a particular case</p>\n<p>The other reason why I didn't PR mathlib is that I didn't know in which file to put this result</p>\n<p>So are some of you interested by this ?</p>",
        "id": 231158652,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616260633
    },
    {
        "content": "<p>This looks like it would belong next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.ext_rat/src\">src#ring_hom.ext_rat</a> as <code>monoid_with_zero_hom.ext_rat</code>, and could probably be used to shorten the proof of that lemma</p>",
        "id": 231158802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616260817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385405\">@Julien Marquet</span> Why do you coerce to function in the conclusion?</p>",
        "id": 231158823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260834
    },
    {
        "content": "<p>I would just prove <code>phi_1 = phi_2</code></p>",
        "id": 231158828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260846
    },
    {
        "content": "<p>I guess you can use this to golf the <code>ext_rat</code> result that Eric mentioned</p>",
        "id": 231158889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260921
    },
    {
        "content": "<p>Also, the name mention <code>pnat</code>, but I think the name should probably be <code>monoid_with_zero_hom.ext_rat</code></p>",
        "id": 231158957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/group_with_zero.20morphisms.20with.20domain.20.E2.84.9A/near/231158823\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"385405\">Julien Marquet</span> Why do you coerce to function in the conclusion?</p>\n</blockquote>\n<p>(It made sense in the context of the proof, but not here)</p>",
        "id": 231158988,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616261007
    },
    {
        "content": "<p>I think it would be even better to define a <code>int.cast_monoid_with_zero_hom</code> (like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.cast_ring_hom\">docs#int.cast_ring_hom</a>), and then state your lemma as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext_rat</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ₁</span> <span class=\"n\">φ₂</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero_hom</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">φ₁.comp</span> <span class=\"o\">(</span><span class=\"n\">int.cast_monoid_with_zero_hom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ₂.comp</span> <span class=\"o\">(</span><span class=\"n\">cast_monoid_with_zero_hom</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">φ₂</span>\n</code></pre></div>",
        "id": 231159275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261294
    },
    {
        "content": "<p>Then you can tag it with <code>@[ext]</code></p>",
        "id": 231159289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> but there isn't necessarily a unique <code>monoid_with_zero_hom</code> from <code>int</code>, right?</p>",
        "id": 231159400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261441
    },
    {
        "content": "<p>There isn't really a <code>cast</code>, because you don't assume <code>has_add</code> on the target.</p>",
        "id": 231159415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261459
    },
    {
        "content": "<p>Wait, then why did <code>φ₁ n</code> work?</p>",
        "id": 231159451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261519
    },
    {
        "content": "<p>That's coercing <code>nat</code> to <code>rat</code></p>",
        "id": 231159503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261549
    },
    {
        "content": "<p>Right, and in my lemma the cast is from int to rat</p>",
        "id": 231159508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261558
    },
    {
        "content": "<p>But I see your point, there's no general cast</p>",
        "id": 231159521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261572
    },
    {
        "content": "<p>So <code>φ₁.comp (int.cast_ring_hom.to_monoid_with_zero_hom)</code>?</p>",
        "id": 231159540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261589
    },
    {
        "content": "<p>Ooh, sorry, then I misunderstood the type of your proposed <code>int.cast_monoid_with_zero_hom</code>.</p>",
        "id": 231159554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616261592
    },
    {
        "content": "<p>My proposed function was stupid, you called me out on that</p>",
        "id": 231159560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261605
    },
    {
        "content": "<p>But I think the lemma is salvageable</p>",
        "id": 231159562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616261610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/group_with_zero.20morphisms.20with.20domain.20.E2.84.9A/near/231158802\">said</a>:</p>\n<blockquote>\n<p>This looks like it would belong next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.ext_rat/src\">src#ring_hom.ext_rat</a> as <code>monoid_with_zero_hom.ext_rat</code>, and could probably be used to shorten the proof of that lemma</p>\n</blockquote>\n<p>Should it really be put in this file ?<br>\nI am actually very tempted to add that :</p>\n<ul>\n<li>If two monoid_with_zero_hom are equal on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathbb{Z} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>, then they are equal on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathbb{Q} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span></li>\n<li>If two monoid_with_zero_hom are equal on all primes and all invertibles, then they are equal everywhere<br>\n(the second theorem can even be generalized to fraction fields, as I said earlier)</li>\n</ul>\n<p>It seems to me that these three lemmas should be kept together, and that they don' belong in <code>data.int.cast</code>...</p>",
        "id": 231162428,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616264479
    },
    {
        "content": "<p>I would say that this one belongs in <code>data.int.cast</code> because then it is available \"everywhere\".</p>",
        "id": 231163011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616265108
    },
    {
        "content": "<p>But if you prove something general for localisations, then that should of course go in the file on localisations</p>",
        "id": 231163084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616265174
    },
    {
        "content": "<p>I don't plan on generalizing for now, so to <code>data.int.cast</code> it will go<br>\nThanks</p>",
        "id": 231163287,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616265348
    },
    {
        "content": "<p>Your first bullet is a weaker version of what I was suggesting you prove</p>",
        "id": 231163330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616265363
    },
    {
        "content": "<p>But please go ahead and make the PR :)</p>",
        "id": 231163360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616265397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/group_with_zero.20morphisms.20with.20domain.20.E2.84.9A/near/231163330\">said</a>:</p>\n<blockquote>\n<p>Your first bullet is a weaker version of what I was suggesting you prove</p>\n</blockquote>\n<p>Oh I see<br>\nI guess that what we would really want is to show that the inection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>→</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathbb{Z} \\to \\mathbb{Q} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> is epi (in monoids with zero) ?<br>\n(And the other lemmas also look like saying that some arrows are epi)</p>",
        "id": 231164453,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616266534
    },
    {
        "content": "<p>At least I thought about showing that but I'm not sure I want to dive into these details now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 231164521,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616266580
    },
    {
        "content": "<p>I think that the way you phrased it originally is quite suitable for mathlib</p>",
        "id": 231164557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616266632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385405\">@Julien Marquet</span> do you already have write access to mathlib?</p>",
        "id": 231164568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616266650
    },
    {
        "content": "<p>Yes (I'm thejohncrafter on github), thanks :)</p>",
        "id": 231164585,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616266680
    },
    {
        "content": "<p>I just encountered a problem when trying to add this to mathlib :/<br>\nI tried to add everything to <code>data.rat.cast</code>, but or the theorem <code>ext_hom_primes</code>, I need to have <code>nat.prime</code> in scope, which lies in <code>data.nat.prime</code>, but <code>data.nat.prime</code> depends on <code>tactic.norm_num</code> which depends back on <code>data.rat.cast</code>, and I can't remove the dependency on <code>tactic.norm_num</code>.<br>\nIs there a way to work around this ?</p>",
        "id": 231165545,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616267529
    },
    {
        "content": "<p>Can you PR the theorem that doesn't need <code>primes</code> first?</p>",
        "id": 231167444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616269721
    },
    {
        "content": "<p>That one should work fine in <code>data.rat.cast</code></p>",
        "id": 231167447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616269732
    },
    {
        "content": "<p>But as you remark, the other one will need to go somewhere else</p>",
        "id": 231167690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616270021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I was trying to prove what you suggested</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext_hom_int</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ₁</span> <span class=\"n\">φ₂</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero_hom</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">same_on_int</span> <span class=\"o\">:</span> <span class=\"n\">φ₁.comp</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero_hom</span> <span class=\"bp\">=</span>\n    <span class=\"n\">φ₂.comp</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero_hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">φ₁</span> <span class=\"bp\">=</span> <span class=\"n\">φ₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">same_on_int'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">φ₁</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">φ₂</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- The rest is done</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I am stuck at the first sorry because I can't find the right lemmas to go grom <code>same_on_int</code> to <code>same_on_int'</code></p>",
        "id": 231241047,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1616360720
    },
    {
        "content": "<p><code>monoid_with_zero_hom.congr_fun same_on_int</code> I think</p>",
        "id": 231242575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616362395
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero_hom.congr_fun\">docs#monoid_with_zero_hom.congr_fun</a></p>",
        "id": 231242762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616362566
    }
]