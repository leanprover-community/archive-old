[
    {
        "content": "<p>Hello! Sorry if this has been asked before, but why does there not seem to be a type for the strictly positive reals?</p>",
        "id": 269113083,
        "sender_full_name": "bottine",
        "timestamp": 1643034587
    },
    {
        "content": "<p>We don't (yet) have positive rationals either! You can find a draft <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/nnrat.lean\">here</a>. I think that's because <code>ℝ≥0</code> is better behaved than <code>ℝ</code> on some aspects: the conditional supremum, the covariance of multiplication... and <code>ℝ&gt;0</code> isn't quite as nice for some of those things.</p>",
        "id": 269113589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643034840
    },
    {
        "content": "<p>Noted, thanks!</p>",
        "id": 269113894,
        "sender_full_name": "bottine",
        "timestamp": 1643034970
    },
    {
        "content": "<p><code>ℝ≥0</code> is a semiring, but <code>ℝ&gt;0</code> isn't.</p>",
        "id": 269114040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643035050
    },
    {
        "content": "<p>On the other hand, <code>ℝ&gt;0</code> is a group</p>",
        "id": 269115633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643035695
    },
    {
        "content": "<p>It might be worth having, but each new type has a maintenance cost.</p>",
        "id": 269115812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643035791
    },
    {
        "content": "<p>What do you want to do with it, bottine?</p>",
        "id": 269115884,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643035807
    },
    {
        "content": "<p>I'm trying to write down the basics of quasi-isometries, and it seems having coarse Lipschitz constants strictly positive might simplify quite a lot of things, but I'm not really convinced either way.</p>",
        "id": 269116759,
        "sender_full_name": "bottine",
        "timestamp": 1643036170
    },
    {
        "content": "<p>You can always write <code>h : 0 &lt; K</code>. Having a new type <code>ℝ&gt;0</code> has also a cost: its elements are not real numbers, so you have to insert coercions everywhere. It really depends on what you want to do.</p>",
        "id": 269117516,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643036463
    },
    {
        "content": "<p>but the coercion argument also holds for \\Rge0 no?</p>",
        "id": 269118055,
        "sender_full_name": "bottine",
        "timestamp": 1643036664
    },
    {
        "content": "<p>Absolutely. But \\Rge0 was needed in several places so it was decided to be worth the cost. Every definition comes with a cost; you need to write an API, you need to deal with coercions, you are giving the user one more way to make terms more complex. But if you need it, then do it!</p>",
        "id": 269118641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643036877
    },
    {
        "content": "<p>Sure, but we already have a reasonale API for <code>ℝ≥0</code></p>",
        "id": 269118720,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643036896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.84.9D.3E0/near/269115633\">said</a>:</p>\n<blockquote>\n<p>On the other hand, <code>ℝ&gt;0</code> is a group</p>\n</blockquote>\n<p>And <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span> is a group with zero!</p>",
        "id": 269118871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643036962
    },
    {
        "content": "<p>Do we have <code>semifield</code>s?</p>",
        "id": 269118921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643036982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">bottine</span> has marked this topic as resolved.</p>",
        "id": 269119012,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643037011
    },
    {
        "content": "<p>That makes sense. I think I'll go along with \\Rge0 because I don't think there is a strong case for \\Rgt0, but I was wondering about the reason behind the omission. (I marked as resolve, since I think I got my answer. Thanks all!)</p>",
        "id": 269119074,
        "sender_full_name": "bottine",
        "timestamp": 1643037038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.9C.94.20.E2.84.9D.3E0/near/269118921\">said</a>:</p>\n<blockquote>\n<p>Do we have <code>semifield</code>s?</p>\n</blockquote>\n<p>I think <a href=\"https://github.com/leanprover-community/mathlib/pull/5539\">#5539</a> was abandoned? <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is that the case?</p>",
        "id": 269119201,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643037093
    },
    {
        "content": "<p>I was thinking of taking over semifields some time soon, so it would good to know whether you actually want them</p>",
        "id": 269119403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643037179
    },
    {
        "content": "<p>I think that the point is something like the following: if you often divide by <code>K</code> during computations (knowing that is it different from <code>0</code> of course) then you want to have access to the group API and <code>ℝ&gt;0</code> can be useful. If <code>0 &lt; K</code> is an assumption that is sometimes needed mathematically, then probably <code>h : 0 &lt; K</code> is enough.</p>",
        "id": 269119453,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643037206
    },
    {
        "content": "<p>If we had a <code>semifield</code> structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span>, would <code>field_simp</code> work out of the box? If so, then that might be good enough Riccardo.</p>",
        "id": 269119644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643037271
    },
    {
        "content": "<p>That would be nice!</p>",
        "id": 269119741,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643037302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.9C.94.20.E2.84.9D.3E0/near/269119403\">said</a>:</p>\n<blockquote>\n<p>I was thinking of taking over semifields some time soon, so it would good to know whether you actually want them</p>\n</blockquote>\n<p>Is that directed at me? If so, I'll say I don't want it yet, and if I do, I'll ping.</p>",
        "id": 269120083,
        "sender_full_name": "bottine",
        "timestamp": 1643037414
    },
    {
        "content": "<p>Ah no, that was a general you <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 269121673,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643038024
    },
    {
        "content": "<p>I abandoned <code>semifield</code>s PR because we have (had?) only one <code>semifield</code> in <code>mathlib</code>.</p>",
        "id": 269141759,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643046100
    },
    {
        "content": "<p>Given that we'll soon have two, what about reviving it?</p>",
        "id": 269141956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643046182
    },
    {
        "content": "<p>What other semifield are we going to have?</p>",
        "id": 269142090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643046243
    },
    {
        "content": "<p><code>nnrat</code></p>",
        "id": 269142549,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643046462
    },
    {
        "content": "<p>And maybe more generally <code>nonneg</code> of a field is a semifield?</p>",
        "id": 269142636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643046486
    },
    {
        "content": "<p>If all examples come from <code>nonneg</code>, then another option is to move lemmas to <code>nonneg</code> NS and use <code>notation</code> instead of <code>def nnreal</code>/<code>def nnrat</code>.</p>",
        "id": 269142979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643046605
    },
    {
        "content": "<p>This way we'll have lemmas for coercions etc in the same place.</p>",
        "id": 269143008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643046621
    },
    {
        "content": "<p>Note: I don't have a strong opinion here but adding another class to our hierarchy comes at a cost (extra time in TC search, constructors etc)</p>",
        "id": 269143284,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643046757
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pos_submonoid\">docs#pos_submonoid</a>, which you can use as <code>pos_submonoid ℝ</code>.</p>",
        "id": 269218082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643095586
    },
    {
        "content": "<p>And add additive structures on it.</p>",
        "id": 269218610,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643096088
    }
]