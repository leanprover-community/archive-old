[
    {
        "content": "<p>Is there a code for taking a set with at least <code>n</code> elements, a partition of <code>n</code> and obtaining a list of lists with the correct sizes and no duplicate, such as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.exists_pw_disjoint_with_card</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c.sum</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n  <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">list.length</span><span class=\"o\">)</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">list.nodup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">list.pairwise</span> <span class=\"n\">list.disjoint</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(In fact, I proved that, but maybe I shouldn't have…)<br>\nThis allowed me to characterize all cycle types of permutations on a set of given cardinality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equiv.perm_with_cycle_type_nonempty_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m.sum</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm_with_cycle_type</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 306528291,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666900918
    },
    {
        "content": "<p>Is <code>(∀ s ∈ o, list.nodup s) ∧ list.pairwise list.disjoint o</code> the same as <code>list.nodup o.join</code> or I got it wrong?</p>",
        "id": 306536835,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666903323
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup_join\">docs#list.nodup_join</a></p>",
        "id": 306538427,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1666903981
    },
    {
        "content": "<p>That allows to simplify the statement, thanks for the link!</p>",
        "id": 306661545,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666965253
    }
]