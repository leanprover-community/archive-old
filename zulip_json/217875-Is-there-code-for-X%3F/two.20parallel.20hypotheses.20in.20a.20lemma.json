[
    {
        "content": "<p>Is there a way to state <em>one</em> lemma but with <em>two</em> different layers of hypothesis? What I am proving is that<br>\n1) in a noetherian ring every ideal contains a product of primes; and<br>\n2) in every domain any nonzero ideal contains a nonzero product of primes.<br>\nThe proof of the two lemmas is \"the same\", upon adding the hypothesis <em>nonzero</em> here and there. Unfortunately, though, I am not aware of a proof deducing 2) from 1).  So I am wondering if a statement along the lines of <code>lemma (h1 : p) (h2 : q) [optional h3] : foo [plus benefits]</code> (meaning that the <code>benefits</code> hold only when assuming <code>h3</code>) exists in Lean. Recalling <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's talk in LFTCM when he spoke about 2197 lemmas to be stated and proven to express the composition of limits when not using filters makes me believe the answer is no, but I lean towards optimism...</p>",
        "id": 216183690,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604997760
    },
    {
        "content": "<p>There is no such syntax. Indeed I explained in my talk that the 2197 lemmas issues is not solved by a software gadget but by mathematical insight.</p>",
        "id": 216183882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604997896
    },
    {
        "content": "<p>In this case, I would just copy-paste the proof and modify it.</p>",
        "id": 216183921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604997922
    },
    {
        "content": "<p>I believed so, and this is what I was going to do. But it does not look nice and I wanted to avoid stupid things.</p>",
        "id": 216183967,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604997955
    },
    {
        "content": "<p>You will then either find sublemmas that can be extracted, or you can define a \"tactic macro\" (this sounds scary, but is easy) that gives you a custom tactic that you can use in both proofs.</p>",
        "id": 216184004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604997964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/two.20parallel.20hypotheses.20in.20a.20lemma/near/216183882\">said</a>:</p>\n<blockquote>\n<p>There is no such syntax. Indeed I explained in my talk that the 2197 lemmas issues is not solved by a software gadget but by mathematical insight.</p>\n</blockquote>\n<p>I was pretty sure, my only hope was that \"adding\" a layer was slightly different from \"having two parallels proofs going along parallel lines\".</p>",
        "id": 216184066,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/two.20parallel.20hypotheses.20in.20a.20lemma/near/216184004\">said</a>:</p>\n<blockquote>\n<p>You will then either find sublemmas that can be extracted, or you can define a \"tactic macro\" (this sounds scary, but is easy) that gives you a custom tactic that you can use in both proofs.</p>\n</blockquote>\n<p>I see what you mean when you speak about <code>sublemmas</code> and I will try to do so. Can you point to some reference describing the scarying-but-easy macro?</p>",
        "id": 216184202,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998114
    },
    {
        "content": "<p>It could be possible with the power of dependent type theory: <code>lemma foo (h3 : option (type_of_hypothesis) : h3.elim easy (λ _, easy ∧ bonus)</code>. But nothing in the Lean library is set up to deal with it, so you will have a bad time :(</p>",
        "id": 216184210,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604998116
    },
    {
        "content": "<p>Presumably though you could do what <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> suggests and then create two wrapper lemmas to untangle the weirdness for normal use?</p>",
        "id": 216184498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604998297
    },
    {
        "content": "<p>Looks very nice; yet I am not sure to understand the syntax. Are you saying that I should let h3 be a term of the dependent type <code>option</code> which has only two terms, one being \"empty\" and the other being my \"true\" <code>h3</code>?</p>",
        "id": 216184526,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998318
    },
    {
        "content": "<p>That sounds like a fun exercise, although it's unclear you'll gain anything.</p>",
        "id": 216184615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604998358
    },
    {
        "content": "<p>In particular, I first need to define this <code>option : Type</code></p>",
        "id": 216184624,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/two.20parallel.20hypotheses.20in.20a.20lemma/near/216184615\">said</a>:</p>\n<blockquote>\n<p>That sounds like a fun exercise, although it's unclear you'll gain anything.</p>\n</blockquote>\n<p>Well, I will learn something and kill some lockdown-time...</p>",
        "id": 216184632,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998382
    },
    {
        "content": "<p>(Option is not really a dependent type, but yes indeed.) My advice would be to try it and if it doesn't work, use Johan's suggestion.</p>",
        "id": 216184636,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604998383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/two.20parallel.20hypotheses.20in.20a.20lemma/near/216184624\">said</a>:</p>\n<blockquote>\n<p>In particular, I first need to define this <code>option : Type</code></p>\n</blockquote>\n<p><code>option</code> is defined in core Lean, so you have it available, right?</p>",
        "id": 216184701,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604998436
    },
    {
        "content": "<p>OK, I'll see what I can come up with... <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span> . Thanks!</p>",
        "id": 216184708,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/two.20parallel.20hypotheses.20in.20a.20lemma/near/216184701\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/two.20parallel.20hypotheses.20in.20a.20lemma/near/216184624\">said</a>:</p>\n<blockquote>\n<p>In particular, I first need to define this <code>option : Type</code></p>\n</blockquote>\n<p><code>option</code> is defined in core Lean, so you have it available, right?</p>\n</blockquote>\n<p>AH, I did not know, I thought it was part of your example. This seems a good news.</p>",
        "id": 216184794,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998475
    },
    {
        "content": "<p>Ah, one problem is that the argument to option needs to be a <code>Type u</code> and you probably have a <code>Prop</code>.</p>",
        "id": 216184820,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604998493
    },
    {
        "content": "<p>Can't I make a new <code>Type</code> from <code>option</code> \"bundling\" it over <code>Type</code>?</p>",
        "id": 216184878,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/two.20parallel.20hypotheses.20in.20a.20lemma/near/216184632\">said</a>:</p>\n<blockquote>\n<p>Well, I will learn something and kill some lockdown-time...</p>\n</blockquote>\n<p>I have 50 exams to grade if you need some lockdown-time killing (that's my I'm answering questions here instead of working...)</p>",
        "id": 216184960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604998574
    },
    {
        "content": "<p>Something like that will land on my desk next week, I try to be super-busy by then <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 216185045,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998635
    },
    {
        "content": "<p>This is a lock-down exam so students actually had all the time they wanted to do it. I told them they could send me formalized solutions but it didn't work.</p>",
        "id": 216185375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604998851
    },
    {
        "content": "<p>But was it a Lean course or a math-course where you were using Lean? I am asking since I am thinking about teaching a bit using Lean in the Second term and hoped to borrow some of your material in French.</p>",
        "id": 216185460,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604998908
    },
    {
        "content": "<p>You don't need fancy dependent types for this, you can just prove <code>lemma (h1 : p) (h2 : q) : foo /\\ (h3 -&gt; benefits)</code></p>",
        "id": 216186548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604999551
    },
    {
        "content": "<p>Usually that would be two separate proofs, but if they share a lot of common structure it might make sense to prove both in one go and unpack them afterwards</p>",
        "id": 216186592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604999592
    },
    {
        "content": "<p>Ah yes of course. I had a dependently-typed hammer and this problem looked like a pi-shaped nail. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 216186760,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604999710
    },
    {
        "content": "<p>I see, I guess this goes very much along the lines suggested by <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , of \"extracting as many sublemmas as possible\", just shifting the presentation a bit from \"some sublemmas allow to quickly deduce two statements\" to \"many parts of this proof can be used to show the <code>/\\ part</code></p>",
        "id": 216186765,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1604999716
    }
]