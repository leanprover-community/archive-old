[
    {
        "content": "<p>Can anyone suggest a more conceptual proof of the following lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.at_top_bot</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter.at_top</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀ᶠ</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.eventually_at_top_prod_self</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">filter.eventually_at_top</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hN</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">hk</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266236702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640674688
    },
    {
        "content": "<p>I was thinking it might be something about the relationship between the product and lexicographic orders, via some lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter.at_top</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">hp.filter_mono</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- `at_top ≤ at_top`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I didn't get it working.</p>",
        "id": 266236722,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640674739
    },
    {
        "content": "<p>The second lemma should be true indeed. Can't you first prove that <code>a ≤ b</code> in <code>α × β</code> implies <code>a ≤ b</code> in <code>lex α β</code>?</p>",
        "id": 266239773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640678575
    },
    {
        "content": "<p>We should have such <code>to_lex_mono</code> lemmas for all the lex orders</p>",
        "id": 266242944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640682019
    },
    {
        "content": "<p>I'm asking in particular whether the first lemma can be deduced from the second!</p>",
        "id": 266244019,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640683292
    },
    {
        "content": "<p>That's on my todo list!</p>",
        "id": 266244723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640684059
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.prod_at_top_at_top_eq\">docs#filter.prod_at_top_at_top_eq</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually.curry\">docs#filter.eventually.curry</a></p>",
        "id": 266297029,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640729473
    },
    {
        "content": "<p>Perfect.  Thank you <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>!</p>",
        "id": 266297381,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640729659
    },
    {
        "content": "<p>AFAIR, I added <code>filter.eventually.curry</code> to get a similar lemma about <code>nhds</code>.</p>",
        "id": 266297411,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640729697
    },
    {
        "content": "<p>Yes, that's my use case too (a fact about Cauchy sequences)</p>",
        "id": 266297524,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640729797
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/bf6cfb3ca66ebb839fb76210dd4ed8a2ae539c17/src/topology/uniform_space/cauchy.lean#L207\">here</a> (which I will rename to mention <code>curry</code>)</p>",
        "id": 266297652,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640729907
    }
]