[
    {
        "content": "<p>This feels like a stupid question, but are there existing lemmas that do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">left_ne_zero_of_mul</span> <span class=\"n\">hab.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bot_lt</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">right_ne_zero_of_mul</span> <span class=\"n\">hab.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bot_lt</span>\n</code></pre></div>",
        "id": 262053520,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637320282
    },
    {
        "content": "<p>My guess would be <code>pos_of_mul_pos</code>, which leads to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pos_of_mul_pos_left\">docs#pos_of_mul_pos_left</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pos_of_mul_pos_right\">docs#pos_of_mul_pos_right</a>.</p>",
        "id": 262054329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637320880
    },
    {
        "content": "<p>That's close, but it needs the extra premise that the other multiplicand is positive.</p>",
        "id": 262054578,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637321053
    },
    {
        "content": "<p>There should be a <code>canonically_ordered_semiring</code> variant</p>",
        "id": 262054642,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637321110
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_comm_semiring.mul_pos\">docs#canonically_ordered_comm_semiring.mul_pos</a> does both</p>",
        "id": 262054664,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637321128
    },
    {
        "content": "<p>Ah fantastic, thanks!</p>",
        "id": 262055591,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637321808
    },
    {
        "content": "<p>Although that ends up giving </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">canonically_ordered_comm_semiring.mul_pos.mp</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>which is longer than </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">left_ne_zero_of_mul</span> <span class=\"n\">hab.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bot_lt</span>\n</code></pre></div>\n<p>:)</p>",
        "id": 262055737,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637321917
    },
    {
        "content": "<p>The <code>order.ring</code> and <code>order.field</code> files need some more care at some point. <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> refactored the ordered monoid and group lemmas, but didn't reach the ring/field lemmas yet.</p>",
        "id": 262056019,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637322148
    },
    {
        "content": "<p>Until that gets done would it be ok to submit a PR to <code>data/nat/basic</code> with these two lemmas?</p>",
        "id": 262056950,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637322908
    },
    {
        "content": "<p><code>pos_of_mul_pos_left hab b.zero_le</code>?</p>",
        "id": 262057109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323049
    },
    {
        "content": "<p>Ah, of course!  The second premise just says that the other argument is <em>non-negative</em>, which of course it is.  Thanks!</p>",
        "id": 262058324,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637323790
    }
]