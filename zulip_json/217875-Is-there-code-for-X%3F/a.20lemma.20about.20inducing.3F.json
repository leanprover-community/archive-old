[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inducing</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">inducing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_at</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205116510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595856526
    },
    {
        "content": "<p>I guess it must be basically <code>inducing.tendsto_nhds_iff</code></p>",
        "id": 205117014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595856786
    },
    {
        "content": "<p>That works on the wrong side of the composition...</p>",
        "id": 205117656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595857102
    },
    {
        "content": "<p>Maybe the lemma is not even true?</p>",
        "id": 205117670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595857110
    },
    {
        "content": "<p>We might need <code>open_embedding f</code>?</p>",
        "id": 205117708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595857128
    },
    {
        "content": "<p>Oh whoops, you're right</p>",
        "id": 205117791,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595857176
    },
    {
        "content": "<p><code>X</code> could be empty</p>",
        "id": 205117804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595857182
    },
    {
        "content": "<p>Scott probably confused by <code>&gt;&gt;</code> order <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 205117816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595857190
    },
    {
        "content": "<p>There is an <code>x : X</code> in the statement...</p>",
        "id": 205117882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595857213
    },
    {
        "content": "<p>okay, not empty but a point</p>",
        "id": 205117886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595857217
    },
    {
        "content": "<p>no, we were just be over-optimistic :-) in our setting we already know <code>open_embedding f</code>.</p>",
        "id": 205117909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595857235
    },
    {
        "content": "<p>So here's the new target:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">open_embedding</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">open_embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_at</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205117938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595857254
    },
    {
        "content": "<p>/me was over-optimistic...</p>",
        "id": 205117952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595857258
    },
    {
        "content": "<p>is <code>continuous_at_iff_continuous_at_comp_right</code> useful?</p>",
        "id": 205118360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595857469
    },
    {
        "content": "<p>/me has never used <code>continuous_at</code></p>",
        "id": 205118365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595857475
    },
    {
        "content": "<p>That did it, thanks!</p>",
        "id": 205119172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595857883
    }
]