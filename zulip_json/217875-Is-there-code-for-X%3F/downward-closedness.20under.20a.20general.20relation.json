[
    {
        "content": "<p>Mathlib currently have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lower_set\">docs#is_lower_set</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_upper_set\">docs#is_upper_set</a>, which are both special cases of the predicate <code>∀ {a' a}, r a' a → p a → p a'</code> that says the set (or predicate) <code>p</code> is downward closed under <code>r</code>, for <code>r = (≤)</code> and <code>r = (≥)</code> respectively.</p>\n<p>This downward-closedness predicate doesn't seem to exist in mathlib, so in <code>acc.of_downward_closed</code>, the condition that the image of <code>f</code> is downward closed under <code>r</code> is written out explicitly. More recently, in my surreal multiplication work, I use the fact being numeric is downward closed under <code>is_option</code>, and I showed if <code>p</code> is downward closed under <code>r</code>, <a href=\"https://github.com/leanprover-community/mathlib/blob/70c2d472a97d14c7b353802bcd3e9c3a26f2d2ee/src/logic/hydra.lean#L171\">then <code>λ s, ∀ a ∈ s, p a</code> is downward closed under <code>cut_expand r</code></a>, and I also basically showed that <a href=\"https://github.com/leanprover-community/mathlib/blob/70c2d472a97d14c7b353802bcd3e9c3a26f2d2ee/src/set_theory/surreal/basic.lean#L437\"><code>p</code> is also downward closed under <code>trans_gen r</code></a>. All of this seems in favor of introducing the downward-closedness predicate (maybe we should just call it <code>relation.closed</code> without \"downward\"), but refactoring and golfing stuff around is_lower_set/is_upperset (which I guess relied on <code>order_dual</code> to dualize?) would be beyond my capacity. I think (from <a href=\"https://github.com/leanprover-community/mathlib/pull/12189\">#12189</a>) maybe <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> would be interested in this? Thanks in advance for your consideration.</p>",
        "id": 285012419,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654396887
    },
    {
        "content": "<p>I am happy to golf <code>is_upper_set</code> and <code>is_lower_set</code>, but there is not much to gain because no proof takes more than a line already.</p>",
        "id": 285024954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654417497
    },
    {
        "content": "<p>Also, if you do want to introduce <code>relation.closed</code>, I think <a href=\"https://tqft.net/mathlib/order/upper_lower\">file#order/upper_lower</a> is indeed a good place for it.</p>",
        "id": 285025688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654418665
    },
    {
        "content": "<p>I'm not quite sure what benefit such a predicate would have, other than increased readability. That said, I don't oppose it.</p>",
        "id": 285045400,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654448292
    },
    {
        "content": "<p>Actually the condition <code>dc</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/acc.of_downward_closed\">docs#acc.of_downward_closed</a> (that the image of a function is downward closed) also appears in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/initial_seg\">docs#initial_seg</a>.</p>",
        "id": 285045865,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654448677
    },
    {
        "content": "<p>I'm not that familiar with initial_seg; are there anything general about downward-closedness that could be proven and used to golf proofs about initial_seg?</p>",
        "id": 285046027,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654448857
    },
    {
        "content": "<p>I'm not quite sure what <code>initial_seg</code> is useful for, but I need initial segments of the colexicographical order for Kruskal-Katona (<a href=\"https://github.com/leanprover-community/mathlib/pull/2770\">#2770</a>).</p>",
        "id": 285046155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654449020
    },
    {
        "content": "<p>Note that initial segments are the same as (open?) lower sets only in linear orders. This is causing me trouble in the colexicographical order because it's not linear (or rather colex is linear, but colex + same size isn't).</p>",
        "id": 285046497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654449623
    },
    {
        "content": "<p>How is it so? The only difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lower_set\">docs#is_lower_set</a> and the condition in your <a href=\"https://github.com/leanprover-community/mathlib/blob/c0bd6817d7c5914eb1891baa9e5ff9c15bb5b8b7/src/combinatorics/set_family/kruskal_katona.lean#L121\"><code>is_init_seg_of_colex</code></a> seems to be the difference between le and lt, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_iff_lt_or_eq\">docs#le_iff_lt_or_eq</a> is available for partial orders, not necessarily linear.</p>",
        "id": 285046902,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654450260
    },
    {
        "content": "<blockquote>\n<p>I'm not quite sure what initial_seg is useful for, but I need initial segments of the colexicographical order for Kruskal-Katona (<a href=\"https://github.com/leanprover-community/mathlib/pull/2770\">#2770</a>).</p>\n</blockquote>\n<p>Given any two ordinals, one of them embeds as an initial segment in the other, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/initial_seg\">docs#initial_seg</a> is the data structure for such embeddings. Violeta has more experience working with the ordinal library than me; if he doesn't see a benefit then probably there's also no benefit from the downward-closedness predicate there (other than readability).</p>",
        "id": 285047408,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654450991
    },
    {
        "content": "<p>So for partial orders, being downward closed under (&lt;) or (≤) are both equivalent to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lower_set\">docs#is_lower_set</a>, but for preorders, downward closedness under (&lt;) is a weaker condition.</p>",
        "id": 285049246,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654453880
    },
    {
        "content": "<p>I am a bit ambivalent about the names; I don't want to use \"downward\" because a general relation can't be said to have a lower and an upper direction; rather it's closed towards the left (from the right argument to the left argument), but maybe we should just say \"closed\" and consider the right to left direction as a convention.</p>\n<p>If dot notation is available, I'd like to write <code>s.closed_under r</code> or <code>r.preserves s</code>. Unfortuantely dot notation is only available to <code>set</code> and not functions like predicates or relations, so for e.g. a predicate <code>p</code> we could only possibly write <code>relation.closed p r</code>.</p>",
        "id": 285049671,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654454427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/downward-closedness.20under.20a.20general.20relation/near/285046497\">said</a>:</p>\n<blockquote>\n<p>Note that initial segments are the same as (open?) lower sets only in linear orders. This is causing me trouble in the colexicographical order because it's not linear (or rather colex is linear, but colex + same size isn't).</p>\n</blockquote>\n<p>colex + same size is linear, in fact this was a key part in the original proofs of <a href=\"https://github.com/leanprover-community/mathlib/pull/2770\">#2770</a>. To put it simply, the relation relevant there is the colex relation restricted to sets which are all the same size, and since the whole ordering is linear clearly any restriction must also be</p>",
        "id": 285051432,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1654457091
    },
    {
        "content": "<p>As far as I understand, <code>initial_seg</code> is just an auxiliary definition that's used to prove basic properties on ordinal ordering and nothing else</p>",
        "id": 285051434,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654457095
    },
    {
        "content": "<p>e.g. an ordinal is less-equal to another when there's an initial ordering from one to the other</p>",
        "id": 285051496,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654457173
    },
    {
        "content": "<p>I think <code>initial_seg</code> is more useful due to being a structure instead of a predicate. Compare <code>equiv</code> to <code>function.bijective</code> (except the former is a bit harder to write down manually)</p>",
        "id": 285051668,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654457467
    },
    {
        "content": "<p>Regarding the original message; you can spell this concept as <code>(r ⇒ swap (→)) p p</code></p>",
        "id": 285056844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654464877
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/relator.lift_fun\">docs#relator.lift_fun</a>)</p>",
        "id": 285056862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654464924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/downward-closedness.20under.20a.20general.20relation/near/285051432\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/downward-closedness.20under.20a.20general.20relation/near/285046497\">said</a>:</p>\n<blockquote>\n<p>Note that initial segments are the same as (open?) lower sets only in linear orders. This is causing me trouble in the colexicographical order because it's not linear (or rather colex is linear, but colex + same size isn't).</p>\n</blockquote>\n<p>colex + same size is linear</p>\n</blockquote>\n<p>No, that's my point. colex + same size isn't linear, but colex restricted to same size is. In the first case, sets of different sizes are incomparable. In the second, all sets have the same size so we do inherit linearity.</p>",
        "id": 285064050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654475636
    },
    {
        "content": "<p>You know, after seeing your code, I support this idea</p>",
        "id": 285157008,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654542730
    },
    {
        "content": "<p>The explicitly written down condition for downwards closedness isn't immediate to understand</p>",
        "id": 285157058,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654542749
    },
    {
        "content": "<p>Also, dot notation!</p>",
        "id": 285157090,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654542759
    },
    {
        "content": "<p>Update on this: after actually trying to work with initial segments, I realized they were the real deal and not just an auxiliary definition</p>",
        "id": 289548060,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657770023
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/15328\">#15328</a> to move these definitions to their own file</p>",
        "id": 289548067,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657770058
    }
]