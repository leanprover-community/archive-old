[
    {
        "content": "<p>I was wondering if anyone might have advice on proving this? I think I might make progress if I can get it to a point where I can use something similar to <code>finset.bUnion_insert</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset_bUnion_sdiff</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset.sdiff_singleton_not_mem_eq_self</span> <span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281779670,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1652161288
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.bUnion_erase\">docs#finset.bUnion_erase</a> exist?</p>",
        "id": 281781231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652162941
    },
    {
        "content": "<p>Not particularly elegant, but this does the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset_bUnion_sdiff</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hxS</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">and.congr_left_iff</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hi1</span><span class=\"o\">,</span> <span class=\"n\">hi2</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hi1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">hi2</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finset.mem_singleton.1</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"n\">hi2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hi1</span><span class=\"o\">,</span> <span class=\"n\">hi2</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hi1.1</span><span class=\"o\">,</span> <span class=\"n\">hi2</span><span class=\"o\">⟩⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset.sdiff_singleton_not_mem_eq_self</span> <span class=\"n\">S</span> <span class=\"n\">hxS</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281798554,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652174733
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 281852864,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1652201254
    },
    {
        "content": "<p>Simpler proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset_bUnion_sdiff</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">congr'</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281860313,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652204476
    },
    {
        "content": "<p>Taking care of the nonterminal simp and making it more mathliby:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset_bUnion_sdiff</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">and.congr_left_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"k\">with</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h'</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>By the way, <code>congr'</code> takes a <code>with</code> clause for doing <code>ext</code>.</p>",
        "id": 281864694,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652206437
    },
    {
        "content": "<p>Using a non-terminal <code>simp</code> is supposed to be a code smell, but sometimes it's really handy. I understand how <code>simp only [finset.mem_sdiff, finset.mem_bUnion, exists_prop, finset.mem_singleton, and.congr_left_iff],</code> is easier to maintain, but it's a darn sight uglier :-/ Before <code>squeeze_simp</code> we used to write <code>suffices : [result of simp], by simpa</code>; probably this is often shorter than what we do nowadays, as well as being easier to read.</p>",
        "id": 281867735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652207906
    },
    {
        "content": "<p>With that way of doing it, the proof looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x'</span> <span class=\"bp\">→</span>\n    <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"k\">with</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h'</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This way you get a glimpse at what <code>simp</code> actually did, but you have to copy out the goal :-(</p>",
        "id": 281868042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652208065
    },
    {
        "content": "<p>I think the trade-off between readability and maintainability is unavoidable in this case. If we use <code>simp</code> to modify the goal, we have to specify either what the goal should look like after simplification, or what simplification rules are allowed to be used. Otherwise, adding another <code>@[simp]</code> lemma may break the proof.</p>",
        "id": 281871529,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652209664
    },
    {
        "content": "<p>I've been thinking that we should allow this type of nonterminal simp:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">match_target</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"bp\">→</span>\n    <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"k\">with</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h'</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281871553,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652209680
    },
    {
        "content": "<p>It's a lot more readable than the suffices/simpa pattern in my opinion</p>",
        "id": 281871704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652209755
    },
    {
        "content": "<p><code>simp</code> is not aware of the <code>match_target</code>'s argument, while <code>simpa ... using</code> is aware of what the result should be. Adding a new <code>@[simp]</code> lemma may break <code>simp, match_target</code>, but not <code>simp only</code> or <code>suffices ... simpa</code></p>",
        "id": 281876022,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652211730
    },
    {
        "content": "<p><code>simpa</code> doesn't actually use what the result should be -- the algorithm is more-or-less \"simp both the target and the specified hypothesis then use <code>exact</code>\"</p>",
        "id": 281876346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652211896
    },
    {
        "content": "<p>A reason non-terminal <code>simp</code> is not allowed is that you get brittle code from not knowing what the intermediate goal is supposed to be. When you have a terminal <code>simp</code>, you at least know what the goal is supposed to be, which makes it much easier to fix things when the proof breaks when the simp set changes.</p>",
        "id": 281876542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652211967
    },
    {
        "content": "<p>If the simp set changes, the <code>suffices/simpa</code> construct can also break (if it's not a <code>simpa only</code>), but having the explicit goal right there in the tactic proof makes fixing it easier.</p>",
        "id": 281876744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652212082
    },
    {
        "content": "<p>Would the previous and the following be worth adding to mathlib? Did I miss simpler proofs from already existing theorems?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">finset.bUnion</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_union</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.bUnion</span> <span class=\"n\">finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_true_left</span><span class=\"o\">],</span> <span class=\"n\">tauto</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.bUnion</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_union</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282384790,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1652582690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> I think some versions of these should find their way into mathlib. I had a go at generalizing them and adding some other missing lemmas.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bUnion_sdiff</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span> <span class=\"n\">tauto</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bUnion_filter</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_ite</span><span class=\"o\">,</span> <span class=\"n\">imp_iff_not_or</span><span class=\"o\">,</span> <span class=\"n\">or_and_distrib_right</span><span class=\"o\">,</span> <span class=\"n\">mem_bUnion</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n    <span class=\"n\">not_mem_empty</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">,</span> <span class=\"n\">not_and_self</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">],</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sdiff_singleton_bUnion</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">bUnion_sdiff</span><span class=\"o\">,</span> <span class=\"n\">bUnion_sdiff</span><span class=\"o\">,</span> <span class=\"n\">sdiff_eq_filter</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">bUnion_filter</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mem_ite</span><span class=\"o\">,</span> <span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">imp_iff_not_or</span><span class=\"o\">,</span> <span class=\"n\">and_or_distrib_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">or_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">imp_iff_not_or</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">em'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bUnion_union</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s'.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">or_and_distrib_right</span><span class=\"o\">,</span> <span class=\"n\">exists_or_distrib</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bUnion_sdiff_of_forall_disjoint</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.bUnion</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sdiff_eq_self_iff_disjoint</span><span class=\"o\">,</span> <span class=\"n\">disjoint_bUnion_left</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Maybe this might be somewhat too specialized?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bUnion_sdiff_singleton_of_forall_not_mem</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.bUnion</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">bUnion_sdiff_of_forall_disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">disjoint_singleton_right</span><span class=\"o\">])</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 282388345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652588469
    },
    {
        "content": "<p>Here are then your specializations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- This one is `finset.bUnion_bUnion`</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.bUnion</span> <span class=\"n\">finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.bUnion_bUnion</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"c1\">-- This one is essentially `finset.bUnion_union`</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.bUnion</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.bUnion_union</span><span class=\"o\">,</span> <span class=\"n\">finset.union_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.sdiff_singleton_bUnion</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 282388354,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652588516
    },
    {
        "content": "<p>By the way, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#finish\">tactic#finish</a> is no longer used for mathlib since it's not being ported to Lean 4.</p>",
        "id": 282388410,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652588575
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 282388881,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1652589455
    },
    {
        "content": "<p>Here's a generalization of <code>sdiff_singleton_bUnion</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">and_self_imp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.sdiff_bUnion_sdiff</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s'.bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s'.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sdiff_eq_filter</span><span class=\"o\">,</span> <span class=\"n\">bUnion_filter</span><span class=\"o\">,</span> <span class=\"n\">filter_bUnion</span><span class=\"o\">,</span> <span class=\"n\">ite_not</span><span class=\"o\">,</span> <span class=\"n\">mem_bUnion</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_ite</span><span class=\"o\">,</span> <span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">and_self_imp</span><span class=\"o\">,</span> <span class=\"n\">imp_not_comm</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">not_mem_empty</span><span class=\"o\">,</span>\n    <span class=\"n\">and.congr_left_iff</span><span class=\"o\">,</span> <span class=\"n\">and_iff_right_iff_imp</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282389159,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652589940
    },
    {
        "content": "<p>Thank you! What would be the next step to get these into mathlib?</p>",
        "id": 282732980,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1652842669
    }
]