[
    {
        "content": "<p>I've tripped up on an extremely elementary type theory issue and would appreciate some help.</p>",
        "id": 262321296,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637589451
    },
    {
        "content": "<p>How can I close the <code>sorry</code>s in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">⦄,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">≃</span> <span class=\"n\">α'</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">α'</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">σ.apply_symm_apply</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">σ.symm</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">$</span> <span class=\"n\">F</span> <span class=\"bp\">$</span> <span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- stuck because `α i` is different type to `α (σ.symm (σ i))`</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 262321399,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637589488
    },
    {
        "content": "<p>(It's likely this exists somewhere in Mathlib but I couldn't find it.)</p>",
        "id": 262321433,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637589516
    },
    {
        "content": "<p>Ah, this is basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.Pi_congr\">docs#equiv.Pi_congr</a></p>",
        "id": 262322294,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637589874
    },
    {
        "content": "<p>Sorry for the noise.</p>",
        "id": 262322299,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637589877
    },
    {
        "content": "<p>Just to share tips for how to bash through these sorts of dependent type issues, I've learned about how <code>generalize</code>, <code>generalize_proofs</code>, and <code>revert</code> can be very helpful.  The strategy is to try to generalize things until the goal is completely parameterized (make it be universally quantified over everything in sight that's causing you problems) and then try to use the hypotheses to do substitutions.  Then you can usually figure out what technical lemma you should write.</p>\n<p>Doing the first part of this for the first sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">⦃</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">⦄,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">≃</span> <span class=\"n\">α'</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">α'</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">σ.apply_symm_apply</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">σ.symm</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">$</span> <span class=\"n\">F</span> <span class=\"bp\">$</span> <span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">equiv.symm_apply_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">σ.symm</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">y'</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">y</span> <span class=\"n\">y'</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hi'</span> <span class=\"o\">:</span> <span class=\"n\">σ.symm</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">equiv.apply_eq_iff_eq</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">y'</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 262352108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637602581
    },
    {
        "content": "<p>Conceptually, this is a strategy to make it easier to do simultaneous rewrites, which you often need to do when you have dependent types.  It also helps make the goal more proof irrelevant -- you don't really want to be spending time rewriting things inside proofs.</p>",
        "id": 262352364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637602732
    },
    {
        "content": "<p>Oh wow, thanks very much. I've spent the bulk of today fighting with the type system and nearly going mad. I need to go and organise dinner now but I'll try again this evening and see if I can get there with these tips.</p>",
        "id": 262352588,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637602843
    },
    {
        "content": "<p>I've reduced my goal to this (copied from context: typeclasses can be relaxed):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.multilinear</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span> <span class=\"n\">u₄</span> <span class=\"n\">u₅</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u₄</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multilinear_map.dom_dom_congr_linear_equiv'</span> <span class=\"o\">{</span><span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₅</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u₄</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i'</span><span class=\"o\">,</span>  <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">σ.symm</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E'</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It's somewhat maddening to have burned hours on something so vacuous (albeit I did gain some limited expertise with dependent functions).</p>",
        "id": 262353112,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637603103
    },
    {
        "content": "<p>Here's a possible technical lemma for then dealing with the dependent rewrite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">⦃</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">⦄,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">≃</span> <span class=\"n\">α'</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">α'</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">σ.apply_symm_apply</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">σ.symm</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">$</span> <span class=\"n\">F</span> <span class=\"bp\">$</span> <span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">equiv.symm_apply_eq</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"n\">i'</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n      <span class=\"n\">f</span> <span class=\"n\">i'</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">y'</span> <span class=\"bp\">→</span> <span class=\"n\">e</span> <span class=\"n\">ha</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">hb</span> <span class=\"n\">y'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">equiv.apply_eq_iff_eq</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">subst</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 262353179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637603146
    },
    {
        "content": "<p>I extracted it from one of the goals from the first proof.  I'm sure it could be simplified more.</p>",
        "id": 262353301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637603197
    },
    {
        "content": "<p>Thanks, I really better run now but I'll study this later.</p>",
        "id": 262353379,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637603245
    },
    {
        "content": "<p>The first time I'd seen one of these rewrite lemmas was when <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> kindly <a href=\"#narrow/stream/113489-new-members/topic/Showing.20a.20function.20is.20well-defined.20.28eq.2Erec.29/near/202749383\">showed how it was done</a> (I suppose he was sort of the Virgil to dependent type hell).</p>",
        "id": 262355546,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637604044
    },
    {
        "content": "<p>Kyle, it would be very nice if you could write a blog post about these tricks in the community blog. This kind of wisdom has been explicitly in scope of our blog from the beginning, but we haven't seen any such post up to now. You would need to find a simpler first example of course.</p>",
        "id": 262360915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637606748
    },
    {
        "content": "<p>This is basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.Pi_congr\">docs#equiv.Pi_congr</a> modulo <a href=\"https://leanprover-community.github.io/mathlib_docs/find/forall_eq\">docs#forall_eq</a> (but where <code>p</code> is a family of types instead of a predicate). (Oh, I now see this was mentioned)</p>",
        "id": 262386272,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637619915
    },
    {
        "content": "<p>I returned to this and created <a href=\"https://github.com/leanprover-community/mathlib/issues/10432\">#10432</a> since it's nearly impossible to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.Pi_congr\">docs#equiv.Pi_congr</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.Pi_congr'\">docs#equiv.Pi_congr'</a> without these lemmas. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> thank you very much for the tips btw: I would never have learned the required black magic without your help.</p>",
        "id": 262578995,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637755273
    }
]