[
    {
        "content": "<p>Dear All,</p>\n<p>is the lemma below in mathlib?  This version is the one I use, but there should probably also be the \"dual\" statement, with a <del>surjective</del> map <code>R → S</code>, asserting that a spanning set for <code>R</code> is also spanning for <code>S</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">algebra_map.injective.linear_independent</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">li</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">S</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_independent_iff'.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hinj</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.map_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(((</span><span class=\"bp\">@</span><span class=\"n\">linear_independent_iff'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">li</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">algebra_map_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232702167,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617251148
    },
    {
        "content": "<p>I don't about this one, but for the dual statement there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_eq_restrict_scalars\">docs#submodule.span_eq_restrict_scalars</a></p>",
        "id": 232712073,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617260132
    },
    {
        "content": "<p>I see, this is close, but I was wondering about spanning <code>⊤</code> and not needing the surjectivity hypothesis.  I had it in, since I went into \"full dual mode\" and dualized every assumption, but I do not think that you need to assume anything on the map, if you want a spanning set for a \"smaller\" ring to be a spanning set also for a larger one.</p>",
        "id": 232713120,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617260850
    },
    {
        "content": "<p>I am thinking of making a PR with this lemma.  I am not too convinced of where to put it and the best so far is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">free_module.lean</span>\n</code></pre></div>\n<p>Does anyone have a better suggestion?</p>",
        "id": 232803929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617302095
    },
    {
        "content": "<p>In the meantime, PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6993\">#6993</a></p>",
        "id": 232807182,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617303434
    }
]