[
    {
        "content": "<p>Does this exist? Is it true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equiv.inv_maps_to</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set.maps_to</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.maps_to</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set.maps_to</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This came up in <a href=\"https://github.com/leanprover-community/mathlib/issues/5706\">#5706</a>, where a similar lemma is introduced that requires <code>fintype α</code>. It's not clear to me whether this assumption is needed, but it's entirely possible I'm missing relevant intuition about finiteness</p>",
        "id": 222410776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610445656
    },
    {
        "content": "<p>This should be true: the restriction of <code>f</code> to <code>s</code> is injective, so by finiteness of <code>s</code> it is also surjective, therefore an equiv. The inverse restricted to <code>s</code> is the inverse to the restriction of <code>f</code>.</p>",
        "id": 222411410,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610446036
    },
    {
        "content": "<p>Ah, so the <code>fintype</code> assumption is needed?</p>",
        "id": 222411440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610446059
    },
    {
        "content": "<p>Yes, otherwise you can do things like mapping each rational number <code>x</code> to <code>x / 2</code>, which maps <code>[0, 1]</code> to <code>[0, 1]</code> but not in the other direction.</p>",
        "id": 222411506,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610446099
    },
    {
        "content": "<p>Thanks, a counter-example was exactly what I was hoping for. I should have looked for examples beyond nat and int...</p>",
        "id": 222411558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610446137
    },
    {
        "content": "<p>You have a counterexample in <code>int</code>, with the addition of <code>1</code> mapping the natural numbers to themselves, contrary to its inverse.</p>",
        "id": 222412779,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610446994
    },
    {
        "content": "<p>So in that example <code>α</code> is <code>int</code>, <code>f</code> is the permutation which adds one, and <code>s</code> is \"non-negative\"? Good point. I was slightly sad but not surprised to see that <code>slim_check</code> couldn't help me here.</p>",
        "id": 222414613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610448297
    }
]