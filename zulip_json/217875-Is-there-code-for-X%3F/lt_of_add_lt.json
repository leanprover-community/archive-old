[
    {
        "content": "<p>Does the following exist in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>As you can see, this can be proven easily by <code>linarith</code>, but I was surprised that I couldn't find an exact  statement.</p>\n<p>(The import is random)</p>",
        "id": 225945636,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613015221
    },
    {
        "content": "<p>How many variations are there on this lemma? I guess it makes sense to add these, but then we also need things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>And also variants where <code>h</code> is a <code>\\le</code> and <code>hle</code> becomes <code>hlt</code>.<br>\nI guess mathlib already has the variant where everything is <code>\\le</code>, right?</p>",
        "id": 225951038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613022307
    },
    {
        "content": "<p>For that matter, I can't find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>either...surely this must exist in the library?</p>",
        "id": 225951224,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613022585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/lt_of_add_lt/near/225951038\">said</a>:</p>\n<blockquote>\n<p>I guess mathlib already has the variant where everything is <code>\\le</code>, right?</p>\n</blockquote>\n<p>No, I couldn't find the <code>le</code> variant either.</p>",
        "id": 225951303,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613022664
    },
    {
        "content": "<p>Perhaps searching with <code>ℝ</code> is too specific?</p>",
        "id": 225951318,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613022701
    },
    {
        "content": "<p>Ooh, right, this is probably a statement about linearly ordered rings</p>",
        "id": 225951465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613022847
    },
    {
        "content": "<p>I just tried a <code>library_search</code> with <code>a</code>, <code>b</code>, and <code>c</code> as members of a linearly ordered ring and got a deterministic timeout :(</p>",
        "id": 225951779,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613023313
    },
    {
        "content": "<p>I don't mind adding these but I'd be pretty surprised if none of the variants already exist.</p>",
        "id": 225952020,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613023597
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6171\">#6171</a></p>",
        "id": 225959651,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1613031710
    }
]