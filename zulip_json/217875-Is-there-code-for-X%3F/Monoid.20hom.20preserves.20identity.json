[
    {
        "content": "<p>Surely I'm being dumb but I can't find the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">monoid_map_mul_one</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">left_cancel_monoid</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_left_cancel</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is it possible it doesn't exist?</p>",
        "id": 216096780,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604934643
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.map_one\">docs#monoid_hom.map_one</a></p>",
        "id": 216096824,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604934668
    },
    {
        "content": "<p>Thank you but note that my <code>f</code> is just a raw function, and not a monoid hom.</p>",
        "id": 216096899,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604934711
    },
    {
        "content": "<p>Oh oops</p>",
        "id": 216096913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604934719
    },
    {
        "content": "<p>Oh I see... The group theory folder might have something along these lines</p>",
        "id": 216097041,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604934760
    },
    {
        "content": "<p>Yeah, it must be there. I poked around unsuccessfully there for a while and then got lazy and decided to ask here <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> I'll look again.</p>",
        "id": 216097136,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604934805
    },
    {
        "content": "<p>I put <code>map_one_of_</code> into the API doc search, and the little <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> didn't find anything that looks reasonable</p>",
        "id": 216097350,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604934883
    },
    {
        "content": "<p>Good thinking, I guess perhaps it could be missing. Thanks.</p>",
        "id": 216097510,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604934961
    },
    {
        "content": "<p>(I should get back to my day job now.)</p>",
        "id": 216097566,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604934971
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.mk'\">docs#monoid_hom.mk'</a></p>",
        "id": 216098444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604935363
    },
    {
        "content": "<p>So here, <code>(monoid_hom.mk' f h).map_one</code> I think is your proof</p>",
        "id": 216098502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604935395
    },
    {
        "content": "<p>This assumes you have a group...</p>",
        "id": 216099127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604935660
    },
    {
        "content": "<p>And Oliver wants to work with a cancellative monoid</p>",
        "id": 216099166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604935677
    },
    {
        "content": "<p>Oh, I missed that. Am I right in thinking that given a <code>group</code> you can always obtain a <code>left_cancel_monoid</code>? Perhaps the solution is to weaken the assumptions on <code>mk'</code> and use that proof instead.</p>",
        "id": 216099683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604935871
    },
    {
        "content": "<p>groups are always cancellative since you have multiplicative inverses</p>",
        "id": 216099991,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604935991
    },
    {
        "content": "<p><del>Looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.to_left_cancel_monoid\">docs#group.to_left_cancel_monoid</a> is also missing, and only the weaker <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.to_left_cancel_semigroup\">docs#group.to_left_cancel_semigroup</a> exists</del></p>",
        "id": 216100056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604936021
    },
    {
        "content": "<p>If you look at the proof of this thing, it uses <code>mul_self_iff_eq_one</code> which needs a group</p>",
        "id": 216100059,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604936023
    },
    {
        "content": "<p>I actually only need it for a group I was just being ridiculous and stating the weaker form.</p>",
        "id": 216100070,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604936029
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 216100090,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604936037
    },
    {
        "content": "<p>It might still be worth replacing the definition of <code>mk'</code> to use your weaker and more ridiculous proof</p>",
        "id": 216100167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604936061
    },
    {
        "content": "<p>Regarding my above comment - groups turn into <code>left_cancel_monoids</code> with <code>group.to_cancel_monoid.to_left_cancel_monoid</code>, which typeclass inference ought to be able to follow</p>",
        "id": 216100510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604936188
    },
    {
        "content": "<p>I guess there's still the question of whether to use <code>right</code> or <code>left</code> in <code>mk'</code>...</p>",
        "id": 216101737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604936656
    },
    {
        "content": "<p>left is usually the default</p>",
        "id": 216101808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604936694
    },
    {
        "content": "<p>I suppose <code>mk''</code> is always an option for <code>right</code></p>",
        "id": 216101836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604936709
    }
]