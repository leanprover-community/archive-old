[
    {
        "content": "<p>I'm formalizing some questions from an undergraduate class in Topology, in my book the subspace topology is defined like this: </p>\n<p><a href=\"/user_uploads/3121/tHLX1j6WFgYzonC7ySyxpWhW/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tHLX1j6WFgYzonC7ySyxpWhW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tHLX1j6WFgYzonC7ySyxpWhW/image.png\"></a></div><p>I was looking around in <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/basic.html\">https://leanprover-community.github.io/mathlib_docs/topology/basic.html</a>, but I didn't see it. Do we have this one?</p>",
        "id": 300169333,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663855537
    },
    {
        "content": "<p>Yes, we have this (we have a large amount of point-set topology). See for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_induced_iff\">docs#is_open_induced_iff</a></p>",
        "id": 300171351,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1663856136
    },
    {
        "content": "<p>We should perhaps add reference containing the phrase \"subspace topology\" to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.induced\">docs#topological_space.induced</a> to make this more discoverable.</p>",
        "id": 300171480,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1663856175
    },
    {
        "content": "<p>Oliver is right of course, but this may be insufficient information. Callum, you should give us an example <em>statement</em> you want to formalize so that you can see how to use the subspace topology.</p>",
        "id": 300175370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663857440
    },
    {
        "content": "<p>My goal is to prove that </p>\n<p>if I have (X, Tx), (Y, Ty), </p>\n<p>and having A subset X and B of Y then </p>\n<p>the subspace topology on A x B coming from the product topology (X x Y, T),<br>\n is the same as the product topology on A x B coming from (X, Tx) and (Y, Ty)</p>",
        "id": 300179754,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663858733
    },
    {
        "content": "<p>Do you know how to turn that into a Lean <em>statement</em>? (Without bothering about the proof.)</p>",
        "id": 300183430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663859753
    },
    {
        "content": "<p>This will be very painful to state because it's too concrete. Even comparing the subtype corresponding to a product of two subsets and the product of the two subtype is painful</p>",
        "id": 300183510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663859773
    },
    {
        "content": "<p>I don't even know how to do that subtype thing without looking it up</p>",
        "id": 300183565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663859798
    },
    {
        "content": "<p>Right, so to be more explicit, I think you want to construct a homeo between <code>A × B</code> and <code>A.prod B</code>.</p>",
        "id": 300183610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663859814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Subspace.20Topology/near/300183610\">said</a>:</p>\n<blockquote>\n<p>Right, so to be more explicit, I think you want to construct a homeo between <code>A × B</code> and <code>A.prod B</code>.</p>\n</blockquote>\n<p>This sounds right , but we haven't really discussed homeo's yet, for the proof of that one I was able to get a proof by showing that the basis which generate each topology were the same. Maybe that would be possible here as well?</p>",
        "id": 300184183,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663860005
    },
    {
        "content": "<p>This isn't a topology problem. It's a problem about <code>set</code> and <code>subtype</code></p>",
        "id": 300184282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663860045
    },
    {
        "content": "<p>To formulate the assertion as you stated it, you would have to do some calculation in the lattice of topologies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, which is possible, but a bit annoying.</p>",
        "id": 300184373,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663860080
    },
    {
        "content": "<p>And like Patrick is saying, at some point you would have to identify <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> with its image (a subset) in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></p>",
        "id": 300184557,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663860138
    },
    {
        "content": "<p>You can use</p>",
        "id": 300184783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663860214
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(⟨(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x.property.1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x.property.2</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 300184794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663860217
    },
    {
        "content": "<p>in order to at least compare types</p>",
        "id": 300184842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663860233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Subspace.20Topology/near/300184282\">said</a>:</p>\n<blockquote>\n<p>This isn't a topology problem. It's a problem about <code>set</code> and <code>subtype</code></p>\n</blockquote>\n<p>Could you help me understand this problem a little more?</p>",
        "id": 300186739,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663860807
    },
    {
        "content": "<p>In your message, you consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> both as a type in itself, constructed as a product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, and as a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>. In Lean, they are different in the sense that they are terms of different types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.prod</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"c1\">-- ↥A × ↥B : Type (max u_1 u_2)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"c1\">-- A ×ˢ B : set (X × Y)</span>\n</code></pre></div>\n<p>Patrick's code block gives a suggestion for how one would identify them.</p>",
        "id": 300187765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663861095
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.prod\">docs#equiv.set.prod</a> is the bijection underlying the homeomorphism .</p>",
        "id": 300189331,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663861545
    },
    {
        "content": "<p>and we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph.set.prod\">docs#homeomorph.set.prod</a></p>",
        "id": 300189453,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663861583
    },
    {
        "content": "<p>Sorry, I got distracted by my Lean 4 compiling issues. I wanted to say that a more abstract statement would be much easier to state and prove.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">X'</span> <span class=\"n\">Y'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X'</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y'</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">prod_top</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">prod.topological_space</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod_top</span> <span class=\"n\">TX</span> <span class=\"n\">TY</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">prod_top</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"n\">TX</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">g</span> <span class=\"n\">TY</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_nhds_eq_nhds</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nhds_prod_eq</span><span class=\"o\">,</span> <span class=\"n\">nhds_induced</span><span class=\"o\">,</span> <span class=\"n\">comap_prod</span><span class=\"o\">,</span> <span class=\"n\">comap_comap</span><span class=\"o\">,</span> <span class=\"n\">prod.map_fst'</span><span class=\"o\">,</span> <span class=\"n\">prod.map_snd'</span><span class=\"o\">,</span> <span class=\"n\">filter.prod</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300189911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663861712
    },
    {
        "content": "<p>Maybe you won't like the proof but at least the statement should make sense.</p>",
        "id": 300189963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663861730
    },
    {
        "content": "<p>Here is an alternative proof of Patrick's lemma that's slightly closer to what I assume you have in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod_top</span> <span class=\"n\">TX</span> <span class=\"n\">TY</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">prod_top</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"n\">TX</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">g</span> <span class=\"n\">TY</span><span class=\"o\">):=</span>\n<span class=\"k\">show</span> <span class=\"n\">induced</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">⊓</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">⊓</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">induced_inf</span><span class=\"o\">,</span> <span class=\"n\">induced_compose</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 300193836,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663862804
    },
    {
        "content": "<p>But this requires knowing ahead of time that the product topology is defined as an <code>inf</code>, so it breaks the API barrier</p>",
        "id": 300194089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663862874
    },
    {
        "content": "<p>My proof also breaks that barrier. But this is unavoidable since it proves a basic foundational property of the product topology.</p>",
        "id": 300194280,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663862915
    },
    {
        "content": "<p>This lemma should be in mathlib</p>",
        "id": 300194299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663862923
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph.set.prod\">docs#homeomorph.set.prod</a></p>",
        "id": 300225419,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1663873085
    },
    {
        "content": "<p>That was quick!</p>",
        "id": 300249413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663882451
    },
    {
        "content": "<p>we've had it, it's not new</p>",
        "id": 300257580,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663885223
    },
    {
        "content": "<p>Patrick's lemma is a bit different though</p>",
        "id": 300267198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663890450
    },
    {
        "content": "<p>It is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inducing.prod_mk\">docs#inducing.prod_mk</a> and should be renamed to <code>inducing.prod_map</code></p>",
        "id": 300267676,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1663890712
    },
    {
        "content": "<p>Ah great!</p>",
        "id": 300267847,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663890808
    }
]