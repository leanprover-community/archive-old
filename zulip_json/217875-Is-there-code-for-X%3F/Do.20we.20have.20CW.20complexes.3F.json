[
    {
        "content": "<p>Say how far are we from writing down the term corresponding to <a href=\"https://en.wikipedia.org/wiki/Whitehead_theorem\">https://en.wikipedia.org/wiki/Whitehead_theorem</a>?</p>",
        "id": 231594580,
        "sender_full_name": "Roman Bars",
        "timestamp": 1616572129
    },
    {
        "content": "<p>We don't have homotopy groups</p>",
        "id": 231594607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616572164
    },
    {
        "content": "<p>But to be quite frank this should all be accessible nowadays. I know a student at Imperial made pi1 in 2018 but never PRed it.</p>",
        "id": 231594796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616572330
    },
    {
        "content": "<p>But with pi1 you can work in terms coverings which seems like it might be easier. If they proved the equivalence between coverings and loops that's more convincing.</p>",
        "id": 231594978,
        "sender_full_name": "Roman Bars",
        "timestamp": 1616572526
    },
    {
        "content": "<p>They did the loop definition</p>",
        "id": 231594997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616572547
    },
    {
        "content": "<p>Even defining a CW complex is pretty hairy. :-) Someone really should do it!</p>",
        "id": 231623536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616588395
    },
    {
        "content": "<p>There's a non-trivial mutual recursion to describe k-skeletons and k-dimensional attaching maps.</p>",
        "id": 231623657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616588451
    },
    {
        "content": "<p>Bhavik and I are setting up the basics of simplicial complexes. This is still quite far off CW complexes though.</p>",
        "id": 231689210,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1616612055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> will simplicial complexes be as hairy?</p>",
        "id": 231691714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616613014
    },
    {
        "content": "<p>This definition is trivial to write down:<br>\n<a href=\"https://en.wikipedia.org/wiki/Abstract_simplicial_complex\">https://en.wikipedia.org/wiki/Abstract_simplicial_complex</a></p>",
        "id": 231695660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616614476
    },
    {
        "content": "<p>Of course, relating it to topology is a different story</p>",
        "id": 231695690,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616614491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Do.20we.20have.20CW.20complexes.3F/near/231695690\">said</a>:</p>\n<blockquote>\n<p>Of course, relating it to topology is a different story</p>\n</blockquote>\n<p>Yup, we're working on the topological aspect more anyway - they're much easier to work with than CW complexes in any case</p>",
        "id": 231724695,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1616627919
    },
    {
        "content": "<p>Do CW complexes form a coinductive type? Writing <code>CW A n</code> for a CW-complex relative a base space <code>A</code> only having cells in dimensions <code>n</code> and above, an element of <code>CW A n</code> should give you (1) some index type <code>I</code> for the <code>n</code>-cells together with an <code>I</code>-index family of maps to <code>A</code>, and (2) an element of <code>CW A' (n+1)</code>, where <code>A'</code> depends on the data in (1) ...</p>",
        "id": 231727492,
        "sender_full_name": "David Wärn",
        "timestamp": 1616629682
    },
    {
        "content": "<p>Wah... I like my CW complexes built from the bottom up, but maybe this is naive.</p>",
        "id": 231727762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616629866
    },
    {
        "content": "<p>I think they're built from the bottom up in the same way that an infinite list is built from the empty list by appending lots of elements</p>",
        "id": 231728352,
        "sender_full_name": "David Wärn",
        "timestamp": 1616630309
    },
    {
        "content": "<p>I think the usual approach is to write an infinite dimensional cw complex as a limit of its finite dimensional skeleta, right?</p>",
        "id": 231728619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616630459
    },
    {
        "content": "<p>And the finite dimensional ones are colimits of some sort, so seem more inductive IMO</p>",
        "id": 231728657,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616630494
    },
    {
        "content": "<p>Of course the limit can be seen as a coinductive construction</p>",
        "id": 231728746,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616630547
    },
    {
        "content": "<p>But the reason cw complexes are good is because you can do inductive proofs with them, so a top down approach doesn't make sense</p>",
        "id": 231728830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616630596
    },
    {
        "content": "<p>What I was trying to do was describe the \"type of all CW complexes\", where by CW complex I mean the data \"for every n, a collection <code>I_n</code> of n-cells together with attaching maps...\". Indeed you get a topological space from such a gadget by taking the colimit of its skeleta.</p>\n<p>This data presenting a CW complex is a bit complicated because the codomains of the attaching maps depend on previous data. Probably what you'll have to do in Lean is instead define what it means for a given space to be (up to homeomorphism) a CW complex (it means that you have a sequence of subspaces, such that yadda yadda), rather than defining these concrete examples of CW complexes</p>",
        "id": 231731645,
        "sender_full_name": "David Wärn",
        "timestamp": 1616632792
    },
    {
        "content": "<p>Actually the definition from Wikipedia seems very doable <a href=\"https://en.m.wikipedia.org/wiki/CW_complex\">https://en.m.wikipedia.org/wiki/CW_complex</a> </p>\n<p>See the section titled \"formulation\"</p>",
        "id": 231732470,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616633443
    },
    {
        "content": "<p>I think that like with topological fibrations we need both abstract CW-complexes and a way to say \"this topological space is a CW-complex\".</p>",
        "id": 231732529,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616633509
    },
    {
        "content": "<p>(sorry what I said above was nonsense, they are indeed colimits of the skeleta, so there is really no way I can see that a cw complex can be coinductive)</p>",
        "id": 231732885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616633794
    },
    {
        "content": "<p>If you already have a topological space, then you can just say that a CW-complex structure is something like (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">CW_complex</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cells</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- probably we can reuse the same universe here</span>\n<span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">cells</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">local_equiv</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"c1\">-- or euclidean space?</span>\n<span class=\"o\">(</span><span class=\"n\">source_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">=</span> <span class=\"n\">ball</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cont_on</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">closed_ball</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">cont_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bd_subset</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">maps_to</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sphere</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">closed_ball</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 231733221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616634027
    },
    {
        "content": "<p>API should turn <code>maps</code> into a collection of <code>local_homeomorph</code>s.</p>",
        "id": 231733310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616634081
    },
    {
        "content": "<p>Probably we need better field names and possibly I've missed something in the definition.</p>",
        "id": 231733344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616634111
    },
    {
        "content": "<p>Also, it's possible that a better solution is to define an abstract CW-complex, and use <code>homeomorph (c : CW_complex) X</code> with a custom constructor from what I wrote in the previous message.</p>",
        "id": 231733589,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616634264
    },
    {
        "content": "<p>Yes, we'll need abstract CW complexes since many constructions build the skeleta recursively, and then you only know the total space at the end of the recursion. Actually this is not too difficult to express in Lean, you can write something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A type witnessing that X' is obtained from X by attaching n-cells</span>\n<span class=\"kd\">structure</span> <span class=\"n\">CW_aux</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">X'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cells</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"c1\">-- should also have, for each i in cells a map ∂D^n ⟶ X, and</span>\n<span class=\"c1\">-- a homeomorphism between X' and the result of gluing these n-cells to X</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CW_complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">skeleta</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Top</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">CW_aux</span> <span class=\"o\">(</span><span class=\"n\">skeleta</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">skeleta</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What's coinductive about this definition is that you have an infinite sequence of spaces. The trick I was confused about is that you first tell Lean \"there is a sequence of spaces\", and only after this do you say \"these spaces are built from a gluing procedure\"</p>",
        "id": 231769080,
        "sender_full_name": "David Wärn",
        "timestamp": 1616664408
    },
    {
        "content": "<p>Definitions which have types changing in a recursion are generally a bad idea. I like Yury's last suggestion: We have a concrete (inductive?) type <code>CW_complex</code> which denotes (representations of) abstract CW_complexes, and a reification operation (which I suppose can be <code>coe_sort</code>) which converts this representation into a type with a topological space structure on it based on intervals and simplices, and finally the <code>is_CW_complex X</code> function can just be defined as <code>∃ cw : CW_complex, nonempty (cw ≃ₜ X)</code>.</p>",
        "id": 231781818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616670651
    },
    {
        "content": "<p>Completely abstract CW complexes aren't really possible. You have to reify the (boundary of the) n-skeleton in order to describe the attaching maps for the (n+1)-cells, which are genuinely continuous maps with no possible \"abstract\" representation.</p>",
        "id": 231878182,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616707342
    },
    {
        "content": "<p>Hence my claim above that you need to define the abstract representation of an n-dimensional CW complex and its reification in a mutual recursion.</p>",
        "id": 231880682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616708450
    },
    {
        "content": "<p>I'm not sure I see the reason for a mutual recursion here. The definition of an abstract CW complex can be like in the wiki page: a downward closed collection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span> of finite sets, and one definition for the reification that I can see is the set of convex linear combinations of an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span></span></span></span>.</p>",
        "id": 231881977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616709083
    },
    {
        "content": "<p>easy peasy: (modulo a topological space structure on <code>finsupp</code> which seems surprisingly missing)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span> <span class=\"n\">data.real.basic</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.topological_space</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">structure</span> <span class=\"n\">CW_complex</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sets</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">down_closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">CW_complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.α</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">f.support</span> <span class=\"bp\">∈</span> <span class=\"n\">C.sets</span> <span class=\"bp\">∧</span> <span class=\"n\">f.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">CW_complex.topological_space</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">CW_complex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">subtype.topological_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_CW_complex</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">CW_complex</span><span class=\"o\">,</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231884460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616710386
    },
    {
        "content": "<p>This is a simplicial complex, no?</p>",
        "id": 231884638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616710486
    },
    {
        "content": "<p>CW complexes are not combinatorial objects.</p>",
        "id": 231897517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616718723
    },
    {
        "content": "<p>That said, nearly every actual construction of one proceeds from essentially combinatorial data (e.g. the attaching maps are described by identifying a k-sphere inside the n-skeleton, which itself is built out of k-cells in an easy way, and then using the \"obvious\" submersion corresponding to a particular element of \\pi_n(S^k)). But in principle the attaching maps can be nastier, and require writing down an \"arbitrary\" continuous map.</p>",
        "id": 231897739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616718875
    },
    {
        "content": "<p>But that is just saying that we want a bunch of auxilliary constructors for CW complexes that start from more combinatorial data.</p>",
        "id": 231897757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616718896
    },
    {
        "content": "<p>Up to homotopy, every CW-complex with finitely many cells is homotopy equivalent to a simplicial complex, though, right?</p>\n<p>Even more, every CW-complex with finitely many cells is homotopy equivalent to a finite topological space!  It is difficult to get more combinatorial than this! </p>\n<p>Homotopies are weird.</p>",
        "id": 231918335,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616737671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Do.20we.20have.20CW.20complexes.3F/near/231918335\">said</a>:</p>\n<blockquote>\n<p>Even more, every CW-complex with finitely many cells is homotopy equivalent to a finite topological space!  It is difficult to get more combinatorial than this! </p>\n</blockquote>\n<p>I think this is only weak homotopy equivalence: <a href=\"https://ncatlab.org/nlab/show/finite+topological+space\">https://ncatlab.org/nlab/show/finite+topological+space</a>. Still, <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span>.</p>",
        "id": 231922396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616741851
    },
    {
        "content": "<p>Ah yes, of course: Scott, thanks for the correction!</p>",
        "id": 231938652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616752686
    },
    {
        "content": "<p>It might be worth pointing out that CW complexes are, up to homotopy equivalence, the cofibrant objects in the mixed model structure on topological spaces. <a href=\"https://ncatlab.org/nlab/show/model+structure+on+topological+spaces#mixed_model_structure\">https://ncatlab.org/nlab/show/model+structure+on+topological+spaces#mixed_model_structure</a> Generally speaking, for a cofibrantly generated model structure (which, however, the mixed model structure is not) the cofibrant objects are indeed very combinatorial: retracts of transfinite compositions of pushouts of generating cofibrations. </p>\n<p>I am currently trying to lean-ify §2 in Cisinski's book on higher homotopical structures (=definitions of model structure notions, small object argument <a href=\"https://ncatlab.org/nlab/show/small+object+argument\">https://ncatlab.org/nlab/show/small+object+argument</a>, construction of model structures on presheaf categories). If someone is interested in joining in, I would be very happy! With these tools and enough general categorical properties of a (convenient) category of topological spaces (so that the small object argument applies), the Whitehead theorem will be a formal consequence, <span class=\"user-mention\" data-user-id=\"387766\">@Roman Bars</span> .</p>",
        "id": 232094977,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616856389
    },
    {
        "content": "<p>I think Reid Barton talked about the small object argument at Lean Together 2019. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> were those talks recorded?</p>",
        "id": 232096079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616857563
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=8jEeIfbQ2eY&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=2&amp;t=1s&amp;ab_channel=leanprovercommunity\">https://www.youtube.com/watch?v=8jEeIfbQ2eY&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=2&amp;t=1s&amp;ab_channel=leanprovercommunity</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8jEeIfbQ2eY\" href=\"https://www.youtube.com/watch?v=8jEeIfbQ2eY&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=2&amp;t=1s&amp;ab_channel=leanprovercommunity\"><img src=\"https://i.ytimg.com/vi/8jEeIfbQ2eY/default.jpg\"></a></div>",
        "id": 232098525,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1616859925
    },
    {
        "content": "<p>The slides aren't visible in the video, but they're linked below</p>",
        "id": 232098536,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1616859938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> That's 2020... I meant the one in Amsterdam</p>",
        "id": 232099000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616860326
    },
    {
        "content": "<p>Ah, sorry, mixing up my years here</p>",
        "id": 232100297,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1616861573
    },
    {
        "content": "<p><a href=\"https://av-media.vu.nl/mediasite/Play/1979034f91b640229bffabdecd4eae5c1d\">https://av-media.vu.nl/mediasite/Play/1979034f91b640229bffabdecd4eae5c1d</a> (skip ahead to find Reid)</p>",
        "id": 232100305,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1616861585
    },
    {
        "content": "<p>Thanks Rob! <span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> I can recommend watching that talk.</p>",
        "id": 232106405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616867508
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 240718316,
        "sender_full_name": "Tony",
        "timestamp": 1622318089
    },
    {
        "content": "<p>starts @ 35</p>",
        "id": 240718332,
        "sender_full_name": "Tony",
        "timestamp": 1622318145
    }
]