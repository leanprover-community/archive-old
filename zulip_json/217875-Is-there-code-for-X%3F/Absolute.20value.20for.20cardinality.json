[
    {
        "content": "<p>Is there a way we can define <code>|X|</code> to mean <code>X.card</code>?</p>",
        "id": 214118139,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603316323
    },
    {
        "content": "<p>I think you can do something like <code>local notation </code>|<code>X</code>|<code> := finset.card X</code>(unchecked).</p>",
        "id": 214118363,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603316458
    },
    {
        "content": "<p>The easiest way would be to dig up some unicode vertical lines which haven't been used before in mathlib and then add this as notation. The issue with <code>|</code> and <code>\\|</code> is that they're already used to mean other things (several other things in the former case). You could try it though!</p>",
        "id": 214118366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603316462
    },
    {
        "content": "<p>Heather has also uncovered a Zulip puzzle for us :-)</p>",
        "id": 214118401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603316484
    },
    {
        "content": "<p><code>local notation `|`X`|` := finset.card X</code>?</p>",
        "id": 214118445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603316508
    },
    {
        "content": "<p>Compare, for example, the line in <a href=\"https://github.com/leanprover-community/tutorials\">#tutorials</a> defining local notation for the absolute value<br>\n<a href=\"https://github.com/leanprover-community/tutorials/blob/6c0866ea177e5336e4e0592aac744f966d784117/src/exercises/00_first_proofs.lean#L260\">https://github.com/leanprover-community/tutorials/blob/6c0866ea177e5336e4e0592aac744f966d784117/src/exercises/00_first_proofs.lean#L260</a></p>",
        "id": 214118511,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603316547
    },
    {
        "content": "<p>Thanks, that was easy!</p>",
        "id": 214118567,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603316608
    },
    {
        "content": "<p>...until it starts giving you random errors because your set <code>{ |X| }</code> is mis-parsed by the parser as being some set such that...syntax error...</p>",
        "id": 214118653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603316649
    },
    {
        "content": "<p>It might work fine though!</p>",
        "id": 214118698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603316686
    },
    {
        "content": "<p>Yes, I don't need to also use set builder notation for what I'm working on</p>",
        "id": 214118796,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603316755
    },
    {
        "content": "<p>Hopefully you also don't need definitions with the equation compiler or inductive types</p>",
        "id": 214125810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603321385
    },
    {
        "content": "<p>then again, I think a mathematician can probably go without those fairly well</p>",
        "id": 214125908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603321457
    }
]