[
    {
        "content": "<p>Do we have any tools (tactics, lemmas, etc.) that make the following calculation not terrible?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n<span class=\"kd\">def</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.col</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">matrix.mul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.col</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 222819453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610685552
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> were working on this sort of thing at <a href=\"https://github.com/leanprover-community/mathlib/issues/5593\">#5593</a> which is almost all merged? Ah thats about det, not mul, still maybe some of it still applies.</p>",
        "id": 222820376,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610686806
    },
    {
        "content": "<p>There are a few <code>simp</code> rules in <code>data.matrix.notation</code> that try to do these computations, and in fact, it works here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">matrix.mul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.col</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 222837657,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610704170
    },
    {
        "content": "<p>Great! Thanks <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> . It didn't occur to me to simplify <code>M</code> and <code>V</code> as well :)</p>",
        "id": 222863849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610720934
    }
]