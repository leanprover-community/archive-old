[
    {
        "content": "<p>Does anyone have a not stupid approach to this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Stupid proof follows)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">rat.denom</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat.coe_int_denom</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">rat.mk_eq_div</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat.denom_mk</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 291923900,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659562735
    },
    {
        "content": "<p>What about using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.floor\">docs#int.floor</a> (or <code>ceil</code> or <code>fract</code>)? <code>norm_num</code> can calculate those.</p>",
        "id": 291924692,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659563218
    },
    {
        "content": "<p>slightly shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291925054,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659563439
    },
    {
        "content": "<p>I think there's a proof embedded in <a href=\"https://github.com/leanprover-community/mathlib/blob/131c39a4f35bc8e8fdb93e832bacd585667ec919/src/number_theory/number_field.lean#L49\">https://github.com/leanprover-community/mathlib/blob/131c39a4f35bc8e8fdb93e832bacd585667ec919/src/number_theory/number_field.lean#L49</a></p>",
        "id": 291925647,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659563764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/1.2F2.20is.20not.20an.20integer/near/291924692\">said</a>:</p>\n<blockquote>\n<p>What about using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.floor\">docs#int.floor</a> (or <code>ceil</code> or <code>fract</code>)? <code>norm_num</code> can calculate those.</p>\n</blockquote>\n<p>Oh, good idea. I'd started thinking in the direction of a <code>norm_num</code> extension to calculate <code>rat.denom</code>, but using things that it already supports is easier</p>",
        "id": 291926585,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659564242
    },
    {
        "content": "<p>I wonder if there is value in predicates like <code>real.integral</code> or <code>real.rational</code></p>",
        "id": 291928664,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659565670
    },
    {
        "content": "<p>I think a norm_num extension for <code>rat.denom</code> would be independently useful. But there doesn't even seem to be too many lemmas about rat.denom so I think we have a fair bit to do here</p>",
        "id": 291931504,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659567554
    },
    {
        "content": "<p>there isn't much needed. The hard part is proving that the numbers are coprime</p>",
        "id": 291931524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659567575
    },
    {
        "content": "<p>Not really recommending this, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.bit0_ne_bit1</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">int.cast_injective</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291931928,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1659567821
    },
    {
        "content": "<p>a hack to make <code>dec_trivial</code> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">rat.coe_int_denom</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291932255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659568037
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">rat</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_int_inv_num</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹.</span><span class=\"n\">num</span> <span class=\"bp\">=</span> <span class=\"n\">int.sign</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inv_def'</span><span class=\"o\">,</span> <span class=\"n\">div_num_denom</span><span class=\"o\">,</span> <span class=\"n\">num_mk</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_int_inv_denom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">x.nat_abs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inv_def'</span><span class=\"o\">,</span> <span class=\"n\">div_num_denom</span><span class=\"o\">,</span> <span class=\"n\">denom_mk</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">int.cast_two</span><span class=\"o\">,</span> <span class=\"n\">rat.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">coe_int_inv_num</span><span class=\"o\">,</span> <span class=\"n\">coe_int_inv_denom</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">rat</span>\n</code></pre></div>",
        "id": 291949765,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659574105
    },
    {
        "content": "<p>I guess that's similar to Ruben's original proof</p>",
        "id": 291949821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659574178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> nice, will you PR these lemmas? They seem useful! And go some of the way towards helping the lack of <code>denom</code> lemmas we have (in particular I think they would be useful in another project of mine <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 291958406,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659582676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/1.2F2.20is.20not.20an.20integer/near/291926585\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/1.2F2.20is.20not.20an.20integer/near/291924692\">said</a>:</p>\n<blockquote>\n<p>What about using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.floor\">docs#int.floor</a> (or <code>ceil</code> or <code>fract</code>)? <code>norm_num</code> can calculate those.</p>\n</blockquote>\n<p>Oh, good idea. I'd started thinking in the direction of a <code>norm_num</code> extension to calculate <code>rat.denom</code>, but using things that it already supports is easier</p>\n</blockquote>\n<p>Trying this, I can't manage to make <code>norm_num</code> calculate with either <code>fract</code> or <code>floor</code>, unfortunately</p>",
        "id": 291979379,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659602086
    },
    {
        "content": "<p>You can also use that the units of <code>ℤ</code> are <code>±1</code> and then obfuscate everything:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">int.cast_inj.mp</span> <span class=\"bp\">$</span> <span class=\"o\">((</span><span class=\"n\">mul_inv_eq_iff_eq_mul₀</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_pos</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">rcases</span> <span class=\"n\">int.is_unit_eq_one_or</span> <span class=\"o\">(</span><span class=\"n\">is_unit_of_mul_eq_one</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"n\">this.symm</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 291988136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659608160
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15863\">#15863</a></p>",
        "id": 292011183,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659621492
    },
    {
        "content": "<p>Yes, <code>norm_num</code> doesn't work with <code>fract</code>. If someone could make that work it would help me out with something I'm working with.</p>",
        "id": 292267619,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659804497
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/pull/16502\">#16502</a>, but I don't think the version there makes sense to merge</p>",
        "id": 298677359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663108347
    }
]