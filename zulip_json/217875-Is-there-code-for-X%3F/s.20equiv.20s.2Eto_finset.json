[
    {
        "content": "<p>do we really not have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.to_finset</span> <span class=\"bp\">≃</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 280470409,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651140340
    },
    {
        "content": "<p>The correct thing to ask for is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset.coe_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 280470975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651140659
    },
    {
        "content": "<p>but I want to make an equiv from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.edge_finset\">docs#simple_graph.edge_finset</a> to its <code>edge_set</code></p>",
        "id": 280471127,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651140739
    },
    {
        "content": "<p>Then you can compose that with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.subtype_equiv_prop\">docs#equiv.subtype_equiv_prop</a> (whose name is very hard to guess <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.to_finset</span> <span class=\"bp\">≃</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.coe_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">equiv.subtype_equiv_prop</span> <span class=\"n\">s.coe_to_finset</span>\n</code></pre></div>",
        "id": 280471397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651140909
    },
    {
        "content": "<p>Because <code>finset.coe_equiv</code> is <code>refl</code>, I guess you can use <code>equiv.subtype_equiv_prop s.coe_to_finset</code> directly.</p>",
        "id": 280471457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651140956
    }
]