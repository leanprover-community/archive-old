[
    {
        "content": "<p>In my outline for Gelfand's formula, I need to prove that the coefficients of two power series are equal because they represent the same function on a ball of positive radius. I don't think we already know this. So I went to prove it, but I think we don't know the formula for the derivative of a power series yet either. My method for showing this would be to use the lemma that if a convergent sequence of differentiable functions has derivatives which converge (locally) uniformly then their limit is the derivative of the limit of the original sequence. I think this is not in mathlib either. Does this all seem accurate, or am I missing pieces of the library again?</p>",
        "id": 265759760,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640140730
    },
    {
        "content": "<p>Sorry if I'm pointing to bad info, I don't know this part of the library:</p>\n<p>the derivative of a power series seems to be <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/fderiv_analytic.html\">here</a>.</p>",
        "id": 265761579,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640142745
    },
    {
        "content": "<p>I think that <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> will tell us the right generality of this statement. Basically, if you prove by induction, then due to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_at.is_O_sub_partial_sum_pow\">docs#has_fpower_series_at.is_O_sub_partial_sum_pow</a> you only need to show that two <code>k</code>-linear <code>continuous_multilinear_map</code>s are equal (in the sense of some natural equivalence) if their difference is <code>O(z^(k+1))</code>.</p>",
        "id": 265761853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143121
    },
    {
        "content": "<p>Do you work in dimension one?</p>",
        "id": 265761863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143135
    },
    {
        "content": "<p>Yes, just dimension 1. Doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_at.has_strict_deriv_at\">docs#has_fpower_series_at.has_strict_deriv_at</a> just say that the derivative at the the center of the ball is the second coefficient of the power series. It's not saying that the derivative has a power series representation, right?</p>",
        "id": 265762161,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640143552
    },
    {
        "content": "<p>Right.</p>",
        "id": 265762207,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143571
    },
    {
        "content": "<p>I was going to add this but the formula in the higher dimensional case is not trivial (AFAIR, I may be wrong).</p>",
        "id": 265762228,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143620
    },
    {
        "content": "<p>I can look into this again next week-end.</p>",
        "id": 265762237,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143637
    },
    {
        "content": "<p>But you can prove equality of power series coefficients directly using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_at.is_O_sub_partial_sum_pow\">docs#has_fpower_series_at.is_O_sub_partial_sum_pow</a>.</p>",
        "id": 265762379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143808
    },
    {
        "content": "<p>Let <code>p</code> and <code>q</code> be two formal power series that represent the same function. Let <code>n</code> be the first index such that <code>p n ≠ q n</code> (e.g., you can prove <code>∀ n, p n = q n</code> by strong induction on <code>n</code> or use <code>nat.find</code>).</p>",
        "id": 265762404,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143869
    },
    {
        "content": "<p>I see. That makes sense.</p>",
        "id": 265762422,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640143907
    },
    {
        "content": "<p>Then we have <code>p.partial_sum p (n + 1) y - p.partial_sum q (n + 1) y = O(y ^ (n + 1))</code></p>",
        "id": 265762475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640143962
    },
    {
        "content": "<p>Since <code>p k = q k</code> for <code>k &lt; n</code>, LHS = <code>p n (λ _, y) - q n (λ _, y)</code>.</p>",
        "id": 265762546,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640144073
    },
    {
        "content": "<p>yes, this is clear to me.</p>",
        "id": 265762904,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640144534
    },
    {
        "content": "<p>Do you deal with a general formal power series, of <code>p</code> is constructed using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_multilinear_map.mk_pi_field\">docs#continuous_multilinear_map.mk_pi_field</a>?</p>",
        "id": 265763051,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640144722
    },
    {
        "content": "<p>In the latter case, you can say that <code>p n (λ _, y) = a * y ^ n</code> and <code>q n (λ _, y) = b * y ^ n</code>, so you have <code>(a - b) * y ^ n = O(y ^ (n + 1))</code> which is possible only for <code>a - b = 0</code>.</p>",
        "id": 265763126,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640144781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  Just got back to looking at this, it seems that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_at.is_O_sub_partial_sum_pow\">docs#has_fpower_series_at.is_O_sub_partial_sum_pow</a> should have a stronger conclusion, namely: <code>^ (n + 1)</code> instead of <code>^ n</code>, right? Otherwise, I can't even use this to prove that the constant term of <code>p</code> is <code>f x</code>.</p>",
        "id": 265945630,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640287526
    },
    {
        "content": "<p><code>ppartial_sum n</code> is the sum over <code>k=0..n-1</code></p>",
        "id": 265946281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640287936
    },
    {
        "content": "<p>ah, I see, so <code>p.partial_sum 0</code> is what, defeq 0?</p>",
        "id": 265946684,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640288226
    },
    {
        "content": "<p>I guess because it's a the sum over an empty <code>finset</code></p>",
        "id": 265947014,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640288304
    },
    {
        "content": "<p>Yes.</p>",
        "id": 265947944,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640288993
    }
]