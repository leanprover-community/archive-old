[
    {
        "content": "<p>What is the best way to show the following fact?<br>\nGiven a map <code>f : Œ± ‚Üí Œ≤</code>, and an open cover <code>U : set (opens Œ≤)</code> of <code>Œ≤</code>, if <code>f</code> restricted on <code>s</code> is <br>\ninducing (resp. (open / closed) embedding) for all <code>s : U</code>, then <code>f</code> itself also is.</p>\n<p>Side question: <br>\nWhat is the best way to restrict a map <code>f : Œ± ‚Üí Œ≤</code> to a <code>f ‚Åª¬π' s ‚Üí s</code> with <code>s : opens Œ≤</code>?<br>\nI'm currently using something like <code>some_iso ‚â´ pullback f s.inclusion</code> so there probably exists a better way.</p>",
        "id": 270824828,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1644064927
    },
    {
        "content": "<p>To answer your last question: I'd use <code>(f ‚Åª¬π' s).restrict f</code>.</p>",
        "id": 270951696,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644226067
    },
    {
        "content": "<p>Oh wait, I mean <code>(set.maps_to_preimage f s).restrict _ _ _</code> if it's important that the codomain is <code>s</code></p>",
        "id": 270952014,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644226216
    },
    {
        "content": "<p>Also feel free to add a definition for bundled continuous maps</p>",
        "id": 271037332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644265643
    },
    {
        "content": "<p>It took me some time to get back to this, but I have a rough draft now in <a href=\"https://github.com/leanprover-community/mathlib/pull/12361\">#12361</a>. I have never used the topology library except with <code>Top</code>, and it would be great if someone who knows their way around the topology library can give some opinions.</p>",
        "id": 273606344,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646124259
    },
    {
        "content": "<p>Side question: Do we not have / need a predicate <code>is_homeomorph</code> except for <code>@is_iso Top _ _ _</code>?</p>",
        "id": 273606439,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646124319
    },
    {
        "content": "<p>I guess <code>nonempty (X ‚âÉ‚Çú Y)</code>?</p>",
        "id": 273609532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646125855
    },
    {
        "content": "<p>Andrew, are you really really really sure you need all those subtypes? It sounds like asking for a lot of trouble.</p>",
        "id": 273610636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646126493
    },
    {
        "content": "<p>Could you tell me what is your actual goal?</p>",
        "id": 273610652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646126501
    },
    {
        "content": "<p>Oh. I meant the predicate for a map. <code>‚àÉ (e : X ‚âÉ‚Çú Y), e.to_fun = f</code> might work, <code>‚àÉ (h : bijective f), continuous f ‚àß continuous (the_inverse)</code> might also work. But do we have a consistent way of doing so? Or have we never used such predicates?</p>",
        "id": 273610675,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646126516
    },
    {
        "content": "<p>Even using <code>opens</code> is a very suspicious move.</p>",
        "id": 273611080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646126685
    },
    {
        "content": "<p>This is used in the AG project, where <code>opens</code> is ubiquitous and I couldn't really avoid them.<br>\nI want to show that for a <code>X : Scheme</code> and a <code>U : Œπ ‚Üí (opens X.carrier)</code> with <code>supr U = ‚ä§</code>, then <code>‚àÄ i, is_iso (f ‚à£_  U i) ‚Üî is_iso f</code>, where <code>f ‚à£_ U i</code> is the restriction of <code>f</code> on <code>U i</code>. And the same when <code>f</code> is replaced by <code>closed_immersion</code> and <code>open_immersion</code>.</p>",
        "id": 273612198,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646127257
    },
    {
        "content": "<p>I think you work with unbundled stuff until the very last moment where you package the end-result in whatever form you need in AG.</p>",
        "id": 273613824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646128142
    },
    {
        "content": "<p>Reviving this thread. <span class=\"user-mention\" data-user-id=\"411579\">@Sam van G</span> <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> </p>\n<p><span class=\"user-mention\" data-user-id=\"411579\">@Sam van G</span> and I are trying to implement some equivalent definitions of closed immersions of schemes. We made a PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/15291\">#15291</a>) that shows that surjective ring homomorphisms induce closed embeddings of <code>prime_spectrum</code>s and can also write a definition of closed immersion of schemes using an <code>is_locally_surjective</code> predicate on maps of (pre)sheaves (not yet PRed). We have also looked at <a href=\"https://github.com/leanprover-community/mathlib/pull/14899\">#14899</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/15283\">#15283</a>.</p>\n<p>Currently we're trying to show that for a map <code>{X Y : LocallyRingedSpace.{u}} (f : X ‚ü∂ Y)</code> that <code>is_closed_immersion f</code> holds iff it holds locally on <code>Y</code>. Is your corresponding statement about topological spaces in mathlib now?</p>",
        "id": 289611671,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1657814505
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> is working on and is close to show the localness of closed immersion.</p>",
        "id": 289612034,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1657814656
    },
    {
        "content": "<p>No. I opened a draft PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/12361\">#12361</a>) and that's about it. I could revive it if you need it. Or you are welcome to take the code there and make a new PR out of it.</p>",
        "id": 289612069,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657814677
    },
    {
        "content": "<p><del>Don‚Äôt look at <a href=\"https://github.com/leanprover-community/mathlib/pull/14899\">#14899</a> the definition that I give is actually wrong.</del></p>",
        "id": 289612085,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1657814686
    },
    {
        "content": "<p>Is it still wrong? I thought the current version is correct.</p>",
        "id": 289612173,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657814738
    },
    {
        "content": "<p>I thought I didn‚Äôt push the corrected version, never mind.</p>",
        "id": 289612315,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1657814801
    },
    {
        "content": "<p>Also, I'm not working on it anymore after I heard about the LftCM project.<br>\nThe furthest i've got is the draft PR above and the <a href=\"https://github.com/leanprover-community/mathlib/blob/scheme_morphimsms/src/algebraic_geometry/morphisms/closed_immersion.lean\">code</a> I mentioned over at the <a href=\"#narrow/stream/330515-LftCM22/topic/closed.20immersions\">other stream</a>.</p>",
        "id": 289612790,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657815023
    },
    {
        "content": "<p>Okay - certainly <span class=\"user-mention\" data-user-id=\"411579\">@Sam van G</span> and I are happy to reuse / copy any code from your PRs while we continue to work on it this week (and include your names in the authorship etc).</p>\n<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> I remember your definition of \"surjective sheaf morphism on stalks\", given <code>f : X ‚ü∂ Y</code> and the induced morphism <code>ùí™_Y ‚ü∂ f_* ùí™_X</code> of sheaves on <code>Y</code>, seemed to be quantified over points <code>x : X</code> and corresponding stalks, rather than points <code>y : Y</code>. So I also wasn't sure if it was correct. Maybe equivalent to the usual notion?</p>",
        "id": 289621363,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1657818955
    },
    {
        "content": "<p>You are right, it should be quantified over all <code>y : Y</code>. I have pushed a corrected version. Thank you for the correction.</p>",
        "id": 289622664,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1657819563
    }
]