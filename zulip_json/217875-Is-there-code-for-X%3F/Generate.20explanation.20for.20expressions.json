[
    {
        "content": "<p>I want to generate natural language explanation for Lean expressions (expr).<br>\nI think doc strings are useful for this purpose, but there is problem with expressions which involve type (class) inferences.<br>\nIn short, I need some_function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_add2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add2</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add2</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`++++`</span> <span class=\"o\">:</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">has_add2.add</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"mi\">5</span> <span class=\"c1\">--13</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"c1\">--9</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">some_function</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"kd\">definition</span> <span class=\"n\">here</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">some_function</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- \"addition (ℕ) of 4 and 5\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">some_function</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"c1\">-- \"addition (ℚ) of 4 and 5\"</span>\n</code></pre></div>\n<p>expr.to_string seems not suitable, because it gives too much complicated results (it displays 4 as something like \"the successor of the successor of the successor of the successor of 0\").<br>\nIs there any idea?</p>",
        "id": 252165364,
        "sender_full_name": "Tsuru",
        "timestamp": 1630929732
    },
    {
        "content": "<p>Take a look at how something like the norm_fin code deals with instances and numerals</p>",
        "id": 252175915,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630934995
    },
    {
        "content": "<p>Thank you! I looked over the code and found some pattern matching (in <code>match_fin</code>).<br>\nThis seems effective for my example, but can this be more \"general\" solution?<br>\nWe don't want to write a lot of pattern for every possible expression, but get the \"surface\" structure of expression and the <code>name</code>s of its components (which can be used to collect doc strings).<br>\n(If I should study the code more, please say so.)</p>",
        "id": 252240175,
        "sender_full_name": "Tsuru",
        "timestamp": 1630979182
    },
    {
        "content": "<p>I suspect people are having trouble helping you because we don't really understand what you want to do. What is the \"surface structure\" of an expression? How generally are you hoping to convert Lean expressions into natural language? (Surely not arbitrary expressions?)</p>",
        "id": 252247638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630987013
    },
    {
        "content": "<p>Yeah, actually I suspect so too, sorry...<br>\nMy assumption is roughly that</p>\n<ol>\n<li>every definition (name) can have doc strings (by tactic.add_doc_string)</li>\n<li>expressions are composed of names (and application?)</li>\n<li>I can combine doc strings into natural language</li>\n</ol>\n<p>In short, I want to get <code>nat.has_add2.add</code> from <code>`(4 ++++ 5)</code>. I suspect  that I should throw away the second assumption (I may not need natural language representation of <code>let x := e in y</code> or lambda abstraction).<br>\nCurrent problem is that I got only too much decomposed representations of <code>expr</code>s (for example, \"<code>has_add2.add.{0} nat nat.has_add2 (bit0.{0} nat ...</code>\")<br>\n...Am I making sense? Thanks for your kind support.</p>",
        "id": 252254466,
        "sender_full_name": "Tsuru",
        "timestamp": 1630993303
    },
    {
        "content": "<p>You can get close with the pretty-printer using the right set of options:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"c1\">-- there's also `set_option pp.numerals true` for the bit0 bit1 ... problem</span>\n<span class=\"kd\">def</span> <span class=\"n\">add2_</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"mi\">5</span> <span class=\"c1\">--13</span>\n<span class=\"k\">#print</span> <span class=\"n\">add2_</span>\n<span class=\"c1\">-- @has_add2.add nat nat.has_add2 4 5</span>\n</code></pre></div>\n<p>Are you just trying to get this intermediate output as a string, or do you want to do more stuff with it in a tactic?</p>",
        "id": 252277370,
        "sender_full_name": "Chris B",
        "timestamp": 1631007694
    },
    {
        "content": "<p>If you don't need mathlib and don't mind experimenting, Lean 4 gives a lot more user-level control over pretty printing, elaboration, and delaboration.</p>",
        "id": 252277574,
        "sender_full_name": "Chris B",
        "timestamp": 1631007825
    },
    {
        "content": "<p>Thank you.<br>\nI don't have courage to try Lean 4 now, but I'll do so if necessary, in future.<br>\n(I think I want to \"do more stuff with it in a tactic\")</p>",
        "id": 252318740,
        "sender_full_name": "Tsuru",
        "timestamp": 1631026625
    },
    {
        "content": "<p>It seems in that case like you just want to reduction/unfolding of definitions to be more conservative. There are tactics for doing more exact unfolding, like <code>tactic.delta</code>, but you need to know the name(s) of the definitions you want to unfold:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">some_function</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.delta</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">has_add2.add</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n<span class=\"k\">in</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">e'</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">some_function</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- [has_add2.add nat.has_add2] 4 5</span>\n</code></pre></div>\n<p>I'm not an expert on lean 3's meta programming; <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is though, maybe he has some words of wisdom?</p>",
        "id": 252389726,
        "sender_full_name": "Chris B",
        "timestamp": 1631060614
    },
    {
        "content": "<p>Thank you, this is also helpful.<br>\nDo you mean by \"need to know the name(s) of the definitions\" that we need to \"hard-code\" the name? Or is there a way to do the same thing with <code>string</code> data of \"has_add2.add\"?</p>",
        "id": 252735850,
        "sender_full_name": "Tsuru",
        "timestamp": 1631252701
    },
    {
        "content": "<p>You can get an arbitrary string somewhere and turn it into a name, then pass it as an argument. Your tactic can also walk the actual <code>expr</code> itself to figure out what names it wants to unfold.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">some_function2</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.delta</span> <span class=\"o\">(</span><span class=\"n\">ns.map</span> <span class=\"n\">name.from_string</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n<span class=\"k\">in</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">e'</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">some_function2</span> <span class=\"o\">[</span><span class=\"s2\">\"has_add2.add\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat.has_add2\"</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">some_function</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.delta</span> <span class=\"n\">ns</span> <span class=\"n\">e</span>\n<span class=\"k\">in</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">e'</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">some_function</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">has_add2.add</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">++++</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>There's also <code>dsimplify</code> for other kinds of reduction (delta is replacing a constant with its definition); both of them are configurable with a set of options. Aside from the mathlib docs, Rob Lewis made a video series about doing metaprogramming in Lean 3; <a href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4\">https://www.youtube.com/watch?v=o6oUjcE6Nz4</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"o6oUjcE6Nz4\" href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4\"><img src=\"https://uploads.zulipusercontent.net/91bdd8086a19f2547ba6eb478268759aecf3a000/68747470733a2f2f692e7974696d672e636f6d2f76692f6f366f556a6345364e7a342f64656661756c742e6a7067\"></a></div>",
        "id": 252755602,
        "sender_full_name": "Chris B",
        "timestamp": 1631265134
    }
]