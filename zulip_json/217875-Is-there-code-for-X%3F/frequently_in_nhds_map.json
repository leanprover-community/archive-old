[
    {
        "content": "<p>Help with filters again, please! :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">nhds</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this available somewhere? If not, advice on slick proof and/or name appreciated!</p>",
        "id": 230983023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616136845
    },
    {
        "content": "<p>Or is there some more idiomatic way to state it?</p>",
        "id": 230983543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616137425
    },
    {
        "content": "<p>Your w is just tendsto f (\\P P) (\\P Q) but I don't know if this helps. Here \\P is principal filter</p>",
        "id": 230984206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616138044
    },
    {
        "content": "<p>(Took me a moment to work out the \\Ps :-)</p>",
        "id": 230984282,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616138144
    },
    {
        "content": "<p>Oh dear, so this is going to drop out of some incredibly general thing where we replace <code>P</code> and <code>Q</code> by filters too? :-)</p>",
        "id": 230984338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616138174
    },
    {
        "content": "<p>I don't know what nhds p means</p>",
        "id": 230984393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616138269
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.nhds\">docs#filter.nhds</a></p>",
        "id": 230984437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616138284
    },
    {
        "content": "<p>I'm confused about how an element can be in a neighborhood filter</p>",
        "id": 230984791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616138638
    },
    {
        "content": "<p>I don't understand <code>h</code></p>",
        "id": 230984853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616138666
    },
    {
        "content": "<p>Notice it is <code>∃ᶠ</code>, not <code>∃</code>.</p>",
        "id": 230986134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616139797
    },
    {
        "content": "<p>so it  is saying there are <code>x</code> arbitrarily close to <code>p</code> such that <code>P X</code>.</p>",
        "id": 230986153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616139831
    },
    {
        "content": "<p>Oh I can't see some symbols on my phone. I wish I knew how to fix this</p>",
        "id": 230986849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616140405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">nhds</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">c.continuous_at.tendsto.frequently</span> <span class=\"o\">(</span><span class=\"n\">h.mp</span> <span class=\"o\">(</span><span class=\"n\">filter.eventually_of_forall</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 231060834,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616175181
    },
    {
        "content": "<p>Fantastic. My proof broke through both the filter API and the set API. :-)</p>",
        "id": 231099758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616193902
    },
    {
        "content": "<p>Could I add this, calling it e.g. <code>frequently_in_nhds_map</code>?</p>",
        "id": 231099783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616193916
    },
    {
        "content": "<p>(I'll probably reduce the hypothesis to just use <code>continuous_at</code> directly.)</p>",
        "id": 231099823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616193942
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231099825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616193943
    },
    {
        "content": "<p>Or is it just too obvious? :-)</p>",
        "id": 231099967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616194044
    },
    {
        "content": "<p>I'd be inclined to add versions of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually.mp\">docs#filter.eventually.mp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.frequently.mp\">docs#filter.frequently.mp</a> which take a hypothesis with <code>∀</code>, rather than <code>∀ᶠ</code> -- there are several other places in the library where we have both versions.</p>",
        "id": 231100018,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616194077
    },
    {
        "content": "<p>Then your lemma could be proved as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c.continuous_at.tendsto.frequently</span> <span class=\"o\">(</span><span class=\"n\">h.mp'</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231100093,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616194109
    },
    {
        "content": "<p>What do you think?  If you'd like to add another intermediate fact, I'd suggest splitting it at the <code>tendsto</code> point rather than the <code>continuous_at</code> point.</p>",
        "id": 231100353,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616194276
    },
    {
        "content": "<p>i.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.tendsto.frequently_map</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">c.frequently</span> <span class=\"o\">(</span><span class=\"n\">h.mp</span> <span class=\"o\">(</span><span class=\"n\">filter.eventually_of_forall</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 231100514,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616194378
    },
    {
        "content": "<p>It seems <code>eventually.mp'</code> already exists as <code>eventually.mono</code>.</p>",
        "id": 231117552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616210445
    },
    {
        "content": "<p>Oh, in fact there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.frequently.mono\">docs#filter.frequently.mono</a> too!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c.continuous_at.tendsto.frequently</span> <span class=\"o\">(</span><span class=\"n\">h.mono</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231118792,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616211963
    }
]