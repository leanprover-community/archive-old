[
    {
        "content": "<p>Hey!</p>\n<p>I'm given <code>l : list X</code> with <code>l.pairwise (≤)</code> and <code>x : X</code>.<br>\nWhat's the best way to get two lists <code>l₁ : list {y | y ≤ x}</code> and <code>l₂ : list {y | x ≤ y}</code> corresponding to <code>take_while</code> and <code>drop_while</code> ?<br>\nI'd need associated lemmas telling me that coercing the lists back and appending gives me exactly <code>l</code> too.</p>\n<p>I can't even find something like <code>list.filter_subtype</code> that would work for filter. <br>\nThanks!</p>",
        "id": 316702774,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671443757
    },
    {
        "content": "<p>I would assume that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.attach\">docs#list.attach</a> on the result of <code>take_while</code> and <code>drop_while</code> is almost sufficient</p>",
        "id": 316732911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671454264
    },
    {
        "content": "<p>Your three properties aren't simultaneously true unless <code>linear_order X</code></p>",
        "id": 316733009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671454313
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise\">docs#list.pairwise</a></p>",
        "id": 316734668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671454859
    },
    {
        "content": "<p>I doubt even that's enough, because l1 and l2 will both contain <code>x</code> if it's in the list.</p>",
        "id": 316734747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671454885
    },
    {
        "content": "<p>I only care about linear order, so that's no matter: It's for my experiments with rectifiable functions, and this list decomposition is about splitting a partition of a set into partitions of two sides of the set.</p>",
        "id": 316742607,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671456445
    },
    {
        "content": "<p>Kevin's point still stands, one list should be <code>&lt;</code> not <code>≤</code> otherwise they share the element <code>x</code></p>",
        "id": 316743553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671456727
    },
    {
        "content": "<p>(I had the notion that <code>drop_while</code> was by definition returning the complement of <code>take_while</code>)</p>",
        "id": 316744572,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671457027
    },
    {
        "content": "<p>Oh nevermind, Kevin's comment is a distraction; the list still satisfies <code>x ≤ y</code>, it just also satisfies <code>x &lt; y</code></p>",
        "id": 316744891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671457116
    },
    {
        "content": "<p>Note that even if your lists weren't ordered you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.partition\">docs#list.partition</a></p>",
        "id": 316745008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671457144
    },
    {
        "content": "<p>Does this help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">//</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l.take_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"bp\">$</span> <span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">list.mem_take_while_imp</span>\n</code></pre></div>",
        "id": 316745422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671457265
    },
    {
        "content": "<p>The other direction is harder because we don't seem to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise.drop_while\">docs#list.pairwise.drop_while</a></p>",
        "id": 316748315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671458046
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l.drop_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"bp\">$</span> <span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.drop_while_nth_le_zero_not</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">list.length_pos_of_mem</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">this.trans_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">list.nth_le_of_mem</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.drop_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.pairwise_iff_nth_le</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.succ_pos'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316749377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671458346
    },
    {
        "content": "<p>Thanks, it might help! But the answer to <code>is there code for …</code> is \"no\" in this case, right?</p>",
        "id": 316751518,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671458893
    },
    {
        "content": "<p>Why not just (l.filter (le x)).attach?</p>",
        "id": 316752984,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1671459257
    },
    {
        "content": "<p>Doesn't require l to be sorted</p>",
        "id": 316753016,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1671459265
    },
    {
        "content": "<p>Yeah, I think there's an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem hiding here</p>",
        "id": 316753408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671459371
    },
    {
        "content": "<p>Although mathlib should certainly have <code>list.pairwise.drop_while</code>and the <code>take_while</code> version too</p>",
        "id": 316753463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671459383
    },
    {
        "content": "<p>And then you have a theorem that a sorted l as input would give the same as (l.take_while ...).filter</p>",
        "id": 316753499,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1671459392
    },
    {
        "content": "<p><code>(l.filter (le x)).attach : list (l.filter (le x))</code>, and then I need to use something else saying that <code>l.filter (le x) \\subset (le x)</code> ?</p>",
        "id": 316753819,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671459483
    },
    {
        "content": "<p>That's what the <code>.map $ subtype.map id $ λ</code> is from my message above</p>",
        "id": 316756147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671460081
    },
    {
        "content": "<p>But I'm still not sure what you'll be doing with these two lists, because since they're lists of two different subtypes, you'll have difficulty working with them</p>",
        "id": 316757358,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1671460413
    },
    {
        "content": "<p>Instead, I'm imagining a filter partition function that takes a list and a predicate, and gives you back a tuple of lists. Then your downstream functions take this tuple. And it's a theorem that you propagate some property, not encoded as a subtype straight up</p>",
        "id": 316757627,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1671460484
    },
    {
        "content": "<p><a href=\"https://github.com/bottine/mathlib/blob/d70be72b4b96cd0e229b563358c3c8baf38ec534/src/topology/metric_space/path.lean#L372\">https://github.com/bottine/mathlib/blob/d70be72b4b96cd0e229b563358c3c8baf38ec534/src/topology/metric_space/path.lean#L372</a></p>",
        "id": 316758635,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671460753
    },
    {
        "content": "<p>I think I really need those two sublist as living in different sets.</p>",
        "id": 316758700,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671460773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60list.2Etake_while_coe.60.3F/near/316757627\">said</a>:</p>\n<blockquote>\n<p>Instead, I'm imagining a filter partition function that takes a list and a predicate, and gives you back a tuple of lists.</p>\n</blockquote>\n<p>No need to imagine,</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60list.2Etake_while_coe.60.3F/near/316745008\">said</a>:</p>\n<blockquote>\n<p>Note that even if your lists weren't ordered you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.partition\">docs#list.partition</a></p>\n</blockquote>",
        "id": 316759590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671461020
    },
    {
        "content": "<blockquote>\n<p>I think I really need those two sublist as living in different sets.</p>\n</blockquote>\n<p>Remember that they don't live in sets, they live in types. Indeed, <code>list {y | y ≤ x}</code>, is better written <code>list {y // y ≤ x}</code> to eliminate a <code>coe_sort</code></p>",
        "id": 316759742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671461070
    },
    {
        "content": "<p>Any idea why <code>refl</code> doesn't work at the last line?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subtype.map_id_comp_id</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"n\">st</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"n\">rs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subtype.coe_comp_map_id</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"n\">rs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.take_while_subtype</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l.take_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"bp\">$</span> <span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">list.mem_take_while_imp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.take_while_subtype_map_coe</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.take_while_subtype</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l.take_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.take_while_subtype</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.map_map</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list.attach_map_coe</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.pairwise_le_drop_while_le_not_le</span>  <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">l.drop_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.drop_while</span><span class=\"o\">,</span> <span class=\"n\">list.not_mem_nil</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hy.elim</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.drop_while</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.pairwise_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"n\">ax</span> <span class=\"n\">nax</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">list.pairwise_le_drop_while_le_not_le</span> <span class=\"n\">l</span> <span class=\"n\">h.right</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ax</span><span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">yx</span><span class=\"o\">,</span> <span class=\"n\">ax</span> <span class=\"o\">((</span><span class=\"n\">h.left</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">yx</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.drop_while_subtype</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l.drop_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"bp\">$</span> <span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">l.pairwise_le_drop_while_le_not_le</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.drop_while_subtype_ge</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≤</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l.drop_while_subtype</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span> <span class=\"n\">subtype.map</span> <span class=\"n\">id</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">le_of_not_le</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.drop_while_subtype_ge_map_coe</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.drop_while_subtype_ge</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"bp\">=</span> <span class=\"n\">l.drop_while</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.drop_while_subtype_ge</span><span class=\"o\">,</span> <span class=\"n\">list.drop_while_subtype</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.map_map</span><span class=\"o\">,</span> <span class=\"n\">subtype.map_id_comp_id</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_comp_map_id</span><span class=\"o\">,</span> <span class=\"n\">list.attach_map_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 317112598,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671614068
    },
    {
        "content": "<p>Oh, I know, it's because of my use of <code>open_locale classical</code> and <code>noncomputable theory</code>. If I correct that and have the right instances as parameters, then the <code>simp</code> does the job.</p>",
        "id": 317112972,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671614225
    },
    {
        "content": "<p>Wow, and the profiler tells we I gain a lot of time. I guess classical mathematics is not efficient :(</p>",
        "id": 317113042,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671614263
    },
    {
        "content": "<p>Why do you open_locale classical at all? I no longer know of any situation where this is the correct approach.</p>",
        "id": 317113115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671614285
    },
    {
        "content": "<p>If the statement doesn't compile, add decidable hypotheses. If the statement compiles but you need classical arguments in the proofs, use the <code>classical</code> tactic.</p>",
        "id": 317113271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671614353
    },
    {
        "content": "<p>I'm not sure, to be honest: it's one of those brute-force things I learned to do to get stuff to compile when I started, and it lingered there because it didn't seem to hurt.</p>",
        "id": 317113429,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671614407
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a></p>",
        "id": 317113520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671614443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60list.2Etake_while_coe.60.3F/near/317113115\">said</a>:</p>\n<blockquote>\n<p>Why do you open_locale classical at all? I no longer know of any situation where this is the correct approach.</p>\n</blockquote>\n<p>Is there any easy replacement for it here?<br>\n<a href=\"https://github.com/madvorak/grammars/blob/8b76863a14b453be88570dd19a41eb2f57e3c853/src/written_by_others/list_take_join.lean\">https://github.com/madvorak/grammars/blob/8b76863a14b453be88570dd19a41eb2f57e3c853/src/written_by_others/list_take_join.lean</a></p>",
        "id": 317113528,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671614446
    },
    {
        "content": "<p><code>linear_order</code> has decidable hypotheses in it so you might get diamonds with this approach</p>",
        "id": 317113598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671614484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> what happens if you remove it and do what I suggest instead?</p>",
        "id": 317113794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671614566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60list.2Etake_while_coe.60.3F/near/317113598\">said</a>:</p>\n<blockquote>\n<p><code>linear_order</code> has decidable hypotheses in it so you might get diamonds with this approach</p>\n</blockquote>\n<p>I think that's exactly why <code>refl</code> didn't work there, and it will surely explain all the rest of my troubles.</p>",
        "id": 317113903,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671614617
    },
    {
        "content": "<p>but <code>noncomputable theory</code> is just a way to not have to write <code>noncomputable def</code> everywhere, right?</p>",
        "id": 317113995,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671614650
    },
    {
        "content": "<p>Yes that's usually not a problem</p>",
        "id": 317114040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671614667
    },
    {
        "content": "<p>Although with decidable hypotheses you might find that more things become computable I guess (I'm not entirely sure, I don't understand computability)</p>",
        "id": 317114139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671614708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60list.2Etake_while_coe.60.3F/near/317113794\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> what happens if you remove it and do what I suggest instead?</p>\n</blockquote>\n<p>I just removed it without replacement and the file still builds, lol.</p>",
        "id": 317114751,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671614891
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import topology.metric_space.emetric_space\n\nopen emetric nnreal set\n\n--noncomputable theory\n\nnamespace function\n\n\nvariables {α β : Type*} [pseudo_emetric_space α]\nvariables (f : β → α)\n\n@[simp] def dist_head : β → list β → ennreal\n| _ [] := 0\n| x (a :: _) := edist (f x) (f a)\n\nlemma dist_head_le_append :\n  ∀ (l : list β) (b : β) (l' : list β), f.dist_head b l ≤ f.dist_head b (l ++ l')\n| [] _ _ := zero_le'\n| (_::_) _ _ := le_refl _\n\nlemma dist_head_triangle :\n  ∀ (a b : β) (l : list β), f.dist_head a l ≤ edist (f a) (f b) + f.dist_head b l\n| _ _ [] := zero_le'\n| _ _ (_::_) := edist_triangle _ _ _\n\n\n@[simp] def length_on : list β → ennreal\n| list.nil := 0\n| (a :: l) := f.dist_head a l + length_on l\n\nend function\n</code></pre></div>\n<p>Strangely, <code>length_on</code> requires <code>noncomputable</code></p>",
        "id": 317114879,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671614950
    },
    {
        "content": "<p>It probably makes sense to also remove <code>noncomputable theory</code> because only one declaration needs <code>noncomputable def</code> if I'm not mistaken.</p>",
        "id": 317114911,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671614966
    }
]