[
    {
        "content": "<p>Suppose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is a continuous function between sufficiently nice topological spaces (I think t2 suffices). Do we know that the graph of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, as a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, is a closed subset?</p>",
        "id": 233317487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617715433
    },
    {
        "content": "<p>Do we even have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.graph\">docs#function.graph</a>?</p>",
        "id": 233317675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715500
    },
    {
        "content": "<p>Apparently \"yes\", but as a <code>rel</code> <span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span></p>",
        "id": 233317736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715521
    },
    {
        "content": "<p>Yeah, it's as a rel. So one would need an uncurried variant. But it's still possible to have <code>is_closed { x | f x.1 = x.2}</code> or something like that</p>",
        "id": 233318010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617715625
    },
    {
        "content": "<p>I guess this actually has a name? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <br>\n<a href=\"https://en.wikipedia.org/wiki/Closed_graph_theorem\">https://en.wikipedia.org/wiki/Closed_graph_theorem</a></p>",
        "id": 233318193,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617715697
    },
    {
        "content": "<p>Golfing challenge!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">closed_graph</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">closure_subset_iff_is_closed</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_closure_iff_ultrafilter</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">t2_iff_ultrafilter</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ultrafilter.map</span> <span class=\"n\">prod.snd</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_sets_iff</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_nhds_iff</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hA</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"n\">hT</span><span class=\"o\">,</span><span class=\"n\">hT1</span><span class=\"o\">,</span><span class=\"n\">hT2</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t.fst</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">is_open.preimage</span> <span class=\"n\">_</span> <span class=\"n\">hT1</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">continuous.comp</span> <span class=\"n\">hf</span> <span class=\"n\">continuous_fst</span> <span class=\"o\">},</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h2</span> <span class=\"n\">_</span> <span class=\"n\">hT2</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">filter.inter_sets</span> <span class=\"n\">_</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">x.snd</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">t</span> <span class=\"o\">⟨</span><span class=\"n\">hh1</span><span class=\"o\">,</span><span class=\"n\">hh2</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hh1</span> <span class=\"n\">hh2</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hh2</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hT</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hh1</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">filter.sets_of_superset</span> <span class=\"n\">_</span> <span class=\"n\">hh</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">prod.snd</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_snd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_ultrafilter</span> <span class=\"n\">at</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hh</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h2</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233327565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617719192
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">closed_graph</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_closed_eq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233333085,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617721214
    },
    {
        "content": "<p>is_closed_eq!</p>",
        "id": 233333154,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617721231
    },
    {
        "content": "<p>Yes, I knew this one, so it was a little bit like cheating.</p>",
        "id": 233333291,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617721262
    },
    {
        "content": "<p>I also didn't really know about the continuity tactic</p>",
        "id": 233333534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617721299
    },
    {
        "content": "<p>In this case, it's a little bit overkill (direct proofs are easy with dot notation), but it's nicer like that!</p>",
        "id": 233333861,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617721334
    },
    {
        "content": "<p>And in any case the ridiculous proof I had above was a good reminder for me about (ultra)filters :)</p>",
        "id": 233334097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617721367
    }
]