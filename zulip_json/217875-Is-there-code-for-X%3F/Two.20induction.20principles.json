[
    {
        "content": "<p>Do we have the following induction principles? First, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pincer_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Ha0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H0b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y.succ</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x.succ</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x.succ</span> <span class=\"n\">y.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or (from <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span>'s <a href=\"https://github.com/leanprover-community/mathlib/pull/14828\">#14828</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">strong_sub_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If not, are they worth PRing?</p>",
        "id": 287911531,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1656533531
    },
    {
        "content": "<p>Yes good question. I couldn't find the one I wrote and Ive been meaning to ask if it's worth PRIng.</p>",
        "id": 287911694,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1656533625
    },
    {
        "content": "<p>I'm weakly opposed to having these in the library, since they're both just special cases of induction on <code>prod.lex (&lt;) (&lt;)</code>.</p>",
        "id": 287914405,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656534562
    },
    {
        "content": "<p>In fact, I believe the equation compiler should be able to do these sorts of inductions automatically</p>",
        "id": 287914542,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656534586
    },
    {
        "content": "<p>Oh actually this isn't quite the case for <code>pincer_induction</code> but it is the case for <code>strong_sub_induction</code></p>",
        "id": 287914981,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656534657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">strong_sub_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">strong_sub_induction</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287915397,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656534727
    },
    {
        "content": "<p>Oh, very nice, thanks!</p>",
        "id": 287915874,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1656534830
    },
    {
        "content": "<p>I guess we could still have the second theorem, since using the equation compiler in the middle of a proof isn't really something you can do</p>",
        "id": 287917750,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656535149
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15061\">#15061</a><br>\nVery open to suggestions for better names and/or docstrings!</p>",
        "id": 287930290,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1656538145
    }
]