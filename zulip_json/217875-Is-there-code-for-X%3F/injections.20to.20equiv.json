[
    {
        "content": "<p>Where would I find <code>A ↪ B → B ↪ A → A ≃ B</code>?</p>",
        "id": 268030650,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642175030
    },
    {
        "content": "<p>This would involve cardinals, so I would look in that part of mathlib.</p>",
        "id": 268030759,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175062
    },
    {
        "content": "<p>That's not going to be computable, right?</p>",
        "id": 268030805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642175082
    },
    {
        "content": "<p>No of course not.</p>",
        "id": 268030850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175098
    },
    {
        "content": "<p>Hmm, should I try harder to think about computable proofs to have an easier time finding lemmas :-)</p>",
        "id": 268030971,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642175160
    },
    {
        "content": "<p>I would say that if your conclusion is an equiv that is obviously not computable, in general you should probably be looking for lemmas with the conclusion <code>#A = #B</code></p>",
        "id": 268031035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642175171
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.eq\">docs#cardinal.eq</a></p>",
        "id": 268031067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175187
    },
    {
        "content": "<p>(or <code>fintype.card A = fintype.card B</code>)</p>",
        "id": 268031079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642175191
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.cardinal_le\">docs#function.embedding.cardinal_le</a> also seems helpful</p>",
        "id": 268031161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642175222
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk_le_of_injective\">docs#cardinal.mk_le_of_injective</a></p>",
        "id": 268031218,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175243
    },
    {
        "content": "<p>So <code>(cardinal.eq.1 (le_antisymm f.cardinal_le g.cardinal_le)).some</code>?</p>",
        "id": 268031490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642175337
    },
    {
        "content": "<p>Ungolfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">cardinal.eq</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this.some</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">h1.2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">h2.2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268031691,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175421
    },
    {
        "content": "<p>Oh yeah, nice trick with the embedding.cardinal_le</p>",
        "id": 268031786,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175468
    },
    {
        "content": "<p>Good point, may be more natural via inequality on cardinals. I’ll try that.</p>",
        "id": 268031815,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642175482
    },
    {
        "content": "<p>Do I have to do something special  to get the <code>#</code> syntax? Is this the <code>open_local cardinal</code>? Can I do that within <code>begin</code>…<code>end</code>?</p>",
        "id": 268031894,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642175518
    },
    {
        "content": "<p><code>open_locale cardinal</code> should before the statement</p>",
        "id": 268031951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175527
    },
    {
        "content": "<p>inequality on cardinals is just <code>le_antisymm f.cardinal_le g.cardinal_le</code>, so definitely more natural</p>",
        "id": 268031952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642175527
    },
    {
        "content": "<p>This is actually nearly the exact statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.antisymm\">docs#function.embedding.antisymm</a> which is what is used to prove <code>le_antisymm</code> for <code>cardinal</code> in the first place.</p>",
        "id": 268032069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642175582
    },
    {
        "content": "<p>Here is Eric's code, in mwe form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">cardinal.eq.1</span> <span class=\"bp\">$</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h1.cardinal_le</span> <span class=\"n\">h2.cardinal_le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n</code></pre></div>",
        "id": 268032111,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175599
    },
    {
        "content": "<p>And Reid's proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">h1.antisymm</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n</code></pre></div>",
        "id": 268032267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175657
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.schroeder_bernstein\">docs#function.embedding.schroeder_bernstein</a> if you want the bare statements with injective hypotheses.</p>",
        "id": 268032466,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642175752
    },
    {
        "content": "<p>Ok, beginner question, hope that's ok: how do I go from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Hcard</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">free_group</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">free_group</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>(it’s all noncomputable anyways here.)</p>",
        "id": 268033567,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642176215
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty.some\">docs#nonempty.some</a></p>",
        "id": 268033617,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642176239
    },
    {
        "content": "<p>(Which is sugar for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a>, which is <em>the</em> axiom of choice in Lean)</p>",
        "id": 268033776,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642176289
    },
    {
        "content": "<p>Thanks! :-)</p>",
        "id": 268033788,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642176298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Do I understand correctly that you're proving the fact that <code>free_group A</code> being isomorphic to <code>free_grroup B</code> implies that <code>A</code> is in bijection with <code>B</code>? If so, then I should mention that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis\">docs#basis</a> and it might be worthwhile to prove that the image of the canonical map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>a</mi><mi>b</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">X \\to F(X) \\to F(X)^{ab}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ab</span></span></span></span></span></span></span></span></span></span></span></span> gives a basis for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>a</mi><mi>b</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">F(X)^{ab}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ab</span></span></span></span></span></span></span></span></span></span></span></span> when considered as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-module. I think that could be a useful construction anyway (if we don't already have it).</p>",
        "id": 268034753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642176704
    },
    {
        "content": "<p>It looks like we don't have the statement in terms of a basis, but we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group.equiv_finsupp\">docs#free_abelian_group.equiv_finsupp</a></p>",
        "id": 268035001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642176807
    },
    {
        "content": "<p>That’s my goal indeed. I guess I am  am unreasonably attached to the proof that I did in Isabelle before, arguing via cardinalities in the infinite case, and via <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><msub><mi>F</mi><mi>X</mi></msub><mo separator=\"true\">,</mo><msub><mi>C</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(F_X, C_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in the finite case.</p>",
        "id": 268035038,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642176823
    },
    {
        "content": "<p>The <code>basis</code> structure is a relatively recent addition to mathlib!</p>",
        "id": 268035138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642176847
    },
    {
        "content": "<p>But I see it it’s hard to defend doing it that way (as much fun as it is) when an easier proof is possible…</p>",
        "id": 268035238,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642176891
    },
    {
        "content": "<p>I just think that the proof could be 1-2 lines long with the results we already have in mathlib.</p>",
        "id": 268035288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642176914
    },
    {
        "content": "<p>Fair enough. So I go from <code>free_group A</code> to <code>free_abelian_group X</code> (by def) then to <code>X →₀ ℤ</code>, and then find the lemma that shows that a basis of <code>X →₀ ℤ</code> is <code>X</code>, and that bases are in bijection.</p>",
        "id": 268035829,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642177141
    },
    {
        "content": "<p>Do we have that all bases are the same size for free <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-modules?</p>",
        "id": 268036917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642177546
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.index_equiv\">docs#basis.index_equiv</a></p>",
        "id": 268036934,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642177559
    },
    {
        "content": "<p>I started trying out some code, but it looks like we're missing some API for abelianizations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.free_abelian_group_finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span> <span class=\"bp\">≃*</span> <span class=\"n\">free_group</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">free_abelian_group.basis</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">α</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">free_abelian_group.equiv_finsupp</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_linear_equiv</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">free_abelian_group.equiv_of_free_group</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span> <span class=\"bp\">≃+</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_equiv.to_additive</span> <span class=\"bp\">$</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 268037046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642177602
    },
    {
        "content": "<blockquote>\n<p>Do we have that all bases are the same size for free Z\\ZZ-modules?</p>\n</blockquote>\n<p>I’m looking for that, but I can’t find it (not that I have practice looking for stuff)</p>",
        "id": 268037876,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642177956
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.index_equiv\">docs#basis.index_equiv</a></p>",
        "id": 268037987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642178004
    },
    {
        "content": "<p>In particular, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invariant_basis_number_of_nontrivial_of_comm_ring\">docs#invariant_basis_number_of_nontrivial_of_comm_ring</a></p>",
        "id": 268038295,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642178149
    },
    {
        "content": "<p>Ah, different file. Thanks!</p>",
        "id": 268038591,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642178282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.free_abelian_group_finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span> <span class=\"bp\">≃*</span> <span class=\"n\">free_group</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int_linear_equiv_of_add_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.to_linear_equiv</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">e.to_add_monoid_hom.map_zsmul</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">free_abelian_group.basis</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">α</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">int_linear_equiv_of_add_equiv</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group.equiv_finsupp</span> <span class=\"n\">α</span><span class=\"o\">)⟩</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">abelianization.equiv_of_equiv</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abelianization</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">abelianization</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">abelianization.lift</span> <span class=\"bp\">$</span> <span class=\"n\">abelianization.of.comp</span> <span class=\"n\">e.to_monoid_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">abelianization.lift</span> <span class=\"bp\">$</span> <span class=\"n\">abelianization.of.comp</span> <span class=\"n\">e.symm.to_monoid_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩,</span>\n    <span class=\"c1\">-- Missing dsimp lemma `quot.mk _ a = abelianization.of a`,</span>\n    <span class=\"n\">change</span> <span class=\"n\">abelianization.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abelianization.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abelianization.of</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">abelianization.of</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩,</span>\n    <span class=\"c1\">-- Missing dsimp lemma `quot.mk _ a = abelianization.of a`,</span>\n    <span class=\"n\">change</span> <span class=\"n\">abelianization.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abelianization.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abelianization.of</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">abelianization.of</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">free_abelian_group.equiv_of_free_group</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span> <span class=\"bp\">≃+</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_equiv.to_additive</span> <span class=\"bp\">$</span> <span class=\"n\">abelianization.equiv_of_equiv</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">free_abelian_group.linear_equiv_of_free_group</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">int_linear_equiv_of_add_equiv</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group.equiv_of_free_group</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.of_free_group_equiv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">α</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group.basis</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span>\n  <span class=\"n\">free_abelian_group.linear_equiv_of_free_group</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">t.index_equiv</span> <span class=\"bp\">$</span> <span class=\"n\">free_abelian_group.basis</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 268038978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642178418
    },
    {
        "content": "<p>I'm surprised that these various initial constructions are not in mathlib already (or maybe I missed them?).</p>",
        "id": 268039284,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642178564
    },
    {
        "content": "<p>I hope we can get <code>int_linear_equiv_of_add_equiv</code> for free by instead instantiating something like <code>[add_comm_group A] [add_comm_group B] : linear_equiv_class ℤ (A →+ B) A B</code>. But that will take a bit more development effort.</p>",
        "id": 268039521,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642178655
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.to_int_linear_map\">docs#add_monoid_hom.to_int_linear_map</a> but seemingly not the equiv version (which would live in <a href=\"https://tqft.net/mathlib/data/equiv/module\">file#data/equiv/module</a>)</p>",
        "id": 268039565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642178677
    },
    {
        "content": "<p>Nice. I’ll look for beginner-friendly low-hanging fruit elsewhere :-)</p>",
        "id": 268039582,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642178687
    },
    {
        "content": "<p>There is plenty of low hanging fruit in the proof above, since the first few constructions should have already been in mathlib.</p>",
        "id": 268039640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642178721
    },
    {
        "content": "<p>And the related <code>nat</code> and <code>rat</code> versions of <code>to_int_linear_equiv</code> should also be added</p>",
        "id": 268039809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642178781
    },
    {
        "content": "<p>I was hoping to just be able to write the last 4 lines :)</p>",
        "id": 268039849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642178797
    },
    {
        "content": "<p>Adding those three is definitely a beginner-friendly PR</p>",
        "id": 268039857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642178801
    },
    {
        "content": "<p>I guess <code>abelianization.equiv_of_equiv</code> could be <code>mul_equiv.abelianization_congr</code> to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.finset_congr\">docs#equiv.finset_congr</a> and enable dot notation?</p>",
        "id": 268040127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642178927
    },
    {
        "content": "<p>I think we're pretty inconsistent about how to name those though (eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.free_group_congr\">docs#free_group.free_group_congr</a>)</p>",
        "id": 268040179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642178954
    },
    {
        "content": "<p>Shall I copy these lines into a PR and paste the link here, and you can comment there how to name them and where to put them? Or is that not faster than if one of you just puts them there?</p>",
        "id": 268040394,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642179043
    },
    {
        "content": "<p>I would probably make separate PRs for the unrelated content. Your build time will be shorter</p>",
        "id": 268040448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642179074
    },
    {
        "content": "<p>(And your review time ;))</p>",
        "id": 268040462,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642179087
    },
    {
        "content": "<p>So one for each independent lemma?</p>",
        "id": 268040494,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642179101
    },
    {
        "content": "<p>Is the actual noncomputable bit in the example above <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.index_equiv\">docs#basis.index_equiv</a>?</p>",
        "id": 268040742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642179202
    },
    {
        "content": "<p>I would say, one PR for the <code>int_linear_equiv_of_add_equiv</code> (or whatever other name we want), one for <code>free_abelian_group.basis</code>, one for <code>abelianization.equiv_of_equiv</code> (or whatever name we want) which should include the missing <code>dsimp</code> lemma, and one for the final result.</p>",
        "id": 268040744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642179202
    },
    {
        "content": "<p>It annoys me that <code>basis</code> terms, which are in my mind a computable way to do linear algebra, are <code>noncomputable</code> by default due to the design of <code>finsupp</code>.</p>",
        "id": 268040797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642179231
    },
    {
        "content": "<p>Joachim, it's pretty common for new user to open mathlib PRs whose content was mostly written by other people here while answering questions. You still save work for Adam by putting those lemmas or definitions in their correct location and think a bit about possible generalization or a couple of extra helper lemma (for instance I see comments in Adam's code saying some lemmas are missing). And then you'll experience the PR process, which requires some time to get used to.</p>",
        "id": 268040907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642179271
    },
    {
        "content": "<p>Where would you expect <code>free_abelian_group.basis</code> to end up? It depends on <code>free_abelian_group_finsupp</code> and on wherever <code>int_linear_equiv_of_add_equiv</code> ends up (maybe <code>algebra/algebra/basic</code>), neither of which depend on each other so far.</p>",
        "id": 268044244,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642180755
    },
    {
        "content": "<p>I think close to <code>free_abelian_group_finsupp</code> would make sense.</p>",
        "id": 268046677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642181875
    },
    {
        "content": "<p>That's in a leaf file of mathlib, I think. It's fine to add a dependency to it, so that <code>int_linear_equiv_of_add_equiv</code> is available there.</p>",
        "id": 268046769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642181909
    }
]