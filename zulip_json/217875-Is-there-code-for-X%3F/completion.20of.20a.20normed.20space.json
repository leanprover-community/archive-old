[
    {
        "content": "<p>I want to have an instance for <code>normed_space ùïú (completion E)</code>. Am I right that the mathlib way is to define a typeclass for <code>‚àÄ c, uniform_continuous ((‚Ä¢) c)</code> and use it to define the whole hierarchy of actions?</p>",
        "id": 272072705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644986145
    },
    {
        "content": "<p>My goal is to drop <code>[complete_space E]</code> assumptions in some theorems from complex analysis that use integrals in their proofs by applying the original theorem to <code>(coe : E ‚Üí completion E) ‚àò f</code>.</p>",
        "id": 272073337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644986950
    },
    {
        "content": "<p>Note that <code>normed_group (completion E)</code> should already exist. But you are probably aware of that already.</p>",
        "id": 272081190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644996306
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.normed_group\">docs#uniform_space.completion.normed_group</a></p>",
        "id": 272081307,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644996442
    },
    {
        "content": "<p>I see that the multiplication <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.has_mul\">docs#uniform_space.completion.has_mul</a> and addition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.has_add\">docs#uniform_space.completion.has_add</a> are defined in a completely different way. The reason is that the multiplication in a uniform ring is not uniformly continuous.<br>\n<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what is the right way to define multiplication on <code>completion M</code> so that it works in all reasonable cases? Do we need a new typeclass (something weaker than not-yet-existing <code>has_uniform_continuous_mul</code>)?</p>",
        "id": 272497648,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645251994
    },
    {
        "content": "<p>Multiplication is almost never uniformly continuous -- this is one of Patrick's favourite facts! For example it's not uniformly continuous on the rationals so Bourbaki have to deal with this when defining the reals. I'm confused about whether you think this example is \"reasonable\". IIRC there's something about this in the perfectoid paper.</p>",
        "id": 272502607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645258511
    },
    {
        "content": "<p>The key point is <a href=\"https://github.com/leanprover-community/mathlib/blob/213e2ed70129fb145dadb94b130f144d8a3355a4/src/topology/algebra/uniform_group.lean#L465-L468\">https://github.com/leanprover-community/mathlib/blob/213e2ed70129fb145dadb94b130f144d8a3355a4/src/topology/algebra/uniform_group.lean#L465-L468</a></p>",
        "id": 272506766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645263448
    },
    {
        "content": "<p>I understand that <code>(*)</code> is not uniform continuous, e.g., in a normed ring. Should we introduce something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/completable_top_field\">docs#completable_top_field</a> but for multiplication?</p>",
        "id": 272521600,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645281036
    },
    {
        "content": "<p>Another question. Once we have <code>normed_space K (completion E)</code>, we can also introduce <code>normed_space (completion K) (completion E)</code> but in the case <code>K = E</code> this will create a diamond. What should we do?</p>",
        "id": 272521685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645281167
    },
    {
        "content": "<p>But we can postpone these questions for another few years if <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> 's planned refactor of Bochner integral will work for non-complete codomains too.</p>",
        "id": 272521758,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645281249
    },
    {
        "content": "<p>I only want <code>normed_space K (completion E)</code> because I don't like the way some of the theorems in complex analysis are currently formulated.</p>",
        "id": 272521855,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645281383
    },
    {
        "content": "<p>Actually, if we only need <code>normed_space K (completion E)</code>, then we can do this: <a href=\"https://github.com/leanprover-community/mathlib/pull/12148\">#12148</a></p>",
        "id": 272525565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645285765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/completion.20of.20a.20normed.20space/near/272521758\">said</a>:</p>\n<blockquote>\n<p>But we can postpone these questions for another few years if <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> 's planned refactor of Bochner integral will work for non-complete codomains too.</p>\n</blockquote>\n<p>No, completeness of the codomain is non-negotiable here, sorry :-)</p>",
        "id": 272527068,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1645287371
    },
    {
        "content": "<p>Then I'll use embedding to <code>completion E</code> to get rid of this assumption.</p>",
        "id": 272531418,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645292365
    }
]