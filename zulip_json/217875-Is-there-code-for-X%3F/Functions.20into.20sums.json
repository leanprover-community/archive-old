[
    {
        "content": "<p>I have a function <code>f : α → β ⊕ γ</code> and I'm looking to define a function <code>left_restrict f</code> whose domain is the terms <code>a : α</code> such that <code>f a = inl b</code> for some <code>b : β</code>. I have cobbled together something that (I think) does the right thing, but I get stuck trying to prove the most basic fact about it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sum.order</span>\n<span class=\"kn\">open</span> <span class=\"n\">sum</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pre_left</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inl</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lr_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pre_left</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">option.is_some</span> <span class=\"o\">(</span><span class=\"n\">sum.get_left</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">a.property</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">left_restrict</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">pre_left</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option.get</span> <span class=\"o\">(</span><span class=\"n\">lr_aux</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lr_def</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pre_left</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">inl</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">left_restrict</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">lr_aux</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">left_restrict</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">option.get</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>  <span class=\"c1\">--creates a second hypothesis with name h1 but keeps the first one</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>  <span class=\"c1\">--alters the new copy of h1</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- seems to simplify option.get h1 using the first copy of h1?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>A few questions: First, why doesn't the final simp finish the goal? <code>option.get h1</code> should simplify to <code>b</code>. Also, if there is already code that does this, or if there's a better approach, I'm open to suggestions.</p>",
        "id": 268149497,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642284198
    },
    {
        "content": "<p><code>∃ b : β, f a = sum.inl b</code> could be rephrased nicely with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.is_left\">docs#sum.is_left</a>. Maybe that helps?</p>",
        "id": 268149584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642284319
    },
    {
        "content": "<p>That sounds promising.</p>",
        "id": 268149642,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642284366
    },
    {
        "content": "<p>Second, rewriting data indeed keeps the original thing around. Maybe you should instead use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.mp\">docs#eq.mp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.mpr\">docs#eq.mpr</a></p>",
        "id": 268149649,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642284386
    },
    {
        "content": "<p>That one didn't work. It complains </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">clear</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"n\">type</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">h1'</span>\n</code></pre></div>",
        "id": 268149829,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642284642
    },
    {
        "content": "<p>What exactly do you need <code>left_restrict</code> for? Maybe you can totally forget about it and instead throw junk values?</p>",
        "id": 268149942,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642284832
    },
    {
        "content": "<p>It's all related to the thing of mine you were reading the other day. I have managed to define a preorder on preorders (<code>P \\le P'</code> iff there is an order homomorphism from <code>P</code> to <code>P'</code>). I'm trying to prove a result about how downward closures in this preorder distribute across the \"distributive product\" (second equality of Lemma 1 from <a href=\"https://pauldavidrowe.github.io/papers/attacktrees-copland.pdf\">that paper</a>.</p>",
        "id": 268150218,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642285228
    },
    {
        "content": "<p>Oh that shouldn't require such things</p>",
        "id": 268150317,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285385
    },
    {
        "content": "<p>Basically, a key step of the proof should be to recognize that <code>P ≤ S ⊕ T ↔ ∃ P1 P2, P = P1 ⊕ P2 ∧ P1 ≤ S ∧ P2 ≤ T</code>. But the <code>≤ </code>s on the right correspond to order homomorphisms that I have to build.</p>",
        "id": 268150323,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642285397
    },
    {
        "content": "<p>Tell me more!</p>",
        "id": 268150327,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642285409
    },
    {
        "content": "<p>There's something however that I'm not getting. What did you define your preorder of preorders on?</p>",
        "id": 268150408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285540
    },
    {
        "content": "<p>It's gonna be hard to prove stuff about, and in particular I suspect your result is wrong so long as you don't quotient by order isomorphism.</p>",
        "id": 268150464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285589
    },
    {
        "content": "<p>Try filling in this <code>sorry</code>. It should be a good training for whatever awaits you.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.ideal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv.sum_ideal_exp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">order.ideal</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">order.ideal</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">order.ideal</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 268150495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285662
    },
    {
        "content": "<p>So if <code>P1</code> and <code>P2</code> are preorders then <code>P1 ≤ P2</code> if and only if there is a monotone function <code>h : P1 \\to P2</code></p>",
        "id": 268150499,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642285674
    },
    {
        "content": "<p>Yes, but on <em>what type</em> did you put this preorder? What is <code>?</code> in <code>instance : preorder ? := your_preorder_of_preorders</code>?</p>",
        "id": 268150556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285731
    },
    {
        "content": "<p>If you're feeling like it, a second much harder level is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.sum_lex_ideal_distrib</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_top</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">order.ideal</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕ₗ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">order.ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⊕ₚ</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">order.ideal</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>where the <code>⊕ₚ</code> comes from <a href=\"https://github.com/leanprover-community/mathlib/tree/twop\">branch#twop</a>.</p>",
        "id": 268150636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285854
    },
    {
        "content": "<p>Oh, I see. Relating back to <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Disjoint.20union.20of.20posets\">this thread</a>, I ended up defining a type whose elements were <code>evsys</code> that were also preorders. The preorder is on that type.</p>",
        "id": 268150643,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642285872
    },
    {
        "content": "<p>Hmm... That seems hard to manage.</p>",
        "id": 268150662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285908
    },
    {
        "content": "<p>Yikes! I'll give those exercises a go. I'm sure they will help me gain facility in manipulating what I need to.</p>",
        "id": 268150663,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642285910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Functions.20into.20sums/near/268150662\">said</a>:</p>\n<blockquote>\n<p>Hmm... That seems hard to manage.</p>\n</blockquote>\n<p>Can confirm! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I'm not sure how to make it easier though.</p>",
        "id": 268150719,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642285956
    },
    {
        "content": "<p>(please really only try the second one after having done the first, I suspect it's really hard because I have proved barely anything about <code>⊕ₚ</code> yet!)</p>",
        "id": 268150729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642285986
    },
    {
        "content": "<p>Hahaha. Honestly, my facility with git repos is such that it will already be a challenge to get that branch going without messing anything else up first! I'll definitely start with the first one.</p>",
        "id": 268150806,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642286098
    },
    {
        "content": "<p>PS: Those should actually be order isomorphisms!</p>",
        "id": 268150875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642286190
    },
    {
        "content": "<p>You mean it should use <code>≃o</code> instead of <code>≃</code>?</p>",
        "id": 268151113,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642286565
    },
    {
        "content": "<p>And it took me a while to process your comment about the result being false unless I quotient by order isomorphisms. Yes, I was sloppy in what I wrote above, but my current statement in Lean does have <code>P ≃o P1 ⊕ P2</code> instead of <code>P = P1 ⊕ P2</code>.</p>",
        "id": 268151207,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642286710
    },
    {
        "content": "<p>Still, I fear that's not the best way to state it.</p>",
        "id": 268151428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642287088
    },
    {
        "content": "<p>Whoops sorry <span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span> I just noticed I gave you the wrong statement. You want <code>down_set</code> (which doesn't yet exist) instead of <code>ideal</code>.</p>",
        "id": 269084303,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643019706
    },
    {
        "content": "<p>Yes, I noticed that. I was also surprised that <code>down_set</code> didn't exist yet! After obsessively playing around with various approaches for a weekend, I decided I needed a break from it all. But translating your statement about <code>ideal</code> into one about <code>down_set</code> should be pretty straightforward since ideals are also downsets.</p>",
        "id": 269174246,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1643059130
    },
    {
        "content": "<p>Yeah! I also happen to need <code>down_set</code> to express Birkhoff's representation theorem. So if you aren't interested in defining them, I can do it.</p>",
        "id": 269175626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643059819
    },
    {
        "content": "<p>If I had more time and focus, I might've wanted to take a crack at them, but you should go ahead and do it. It'll all be much better and quicker! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 269262263,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1643120128
    },
    {
        "content": "<p>Heads up: downsets are now in mathlib! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_set\">docs#lower_set</a></p>",
        "id": 275223694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647257818
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"300396\">@Paul Rowe</span></p>",
        "id": 275223718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647257835
    }
]