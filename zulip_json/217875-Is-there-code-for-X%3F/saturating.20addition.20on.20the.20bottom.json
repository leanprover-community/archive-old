[
    {
        "content": "<p>Is there an existing proof for the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.monic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247758831,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627677516
    },
    {
        "content": "<p>Wait, is this how addition is defined on <code>with_bot ℕ</code>?</p>",
        "id": 247759043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627677621
    },
    {
        "content": "<p><code>with_bot nat</code> is saturating on the bottom, according to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bot_add</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_bot</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 247759108,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627677657
    },
    {
        "content": "<p>Did you think it was a new additive identity?</p>",
        "id": 247759143,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627677677
    },
    {
        "content": "<p>No, I just never encountered it.</p>",
        "id": 247759757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627678039
    },
    {
        "content": "<p>Here's my proof of your <code>sorry</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.monic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">option.some_ne_none</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247760236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627678313
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_eq_bot</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"n\">with_top.add_eq_top</span>\n</code></pre></div>",
        "id": 247761790,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1627679128
    },
    {
        "content": "<p>Ew, defeq abuse <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 247761957,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627679215
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8474\">#8474</a></p>",
        "id": 247763956,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627680211
    },
    {
        "content": "<p>I like Sebastien's proof, it's like proving infi lemmas using supr lemmas</p>",
        "id": 247771864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627686380
    },
    {
        "content": "<p>And probably exposes a bunch of missing lemmas about with_bot</p>",
        "id": 247771892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627686415
    },
    {
        "content": "<p>I proved it using API that I added in, which copied most of the syntax from existing <code>with_top</code> lemmas.</p>",
        "id": 247772859,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627687368
    },
    {
        "content": "<p>When I was working with <code>ereal</code> I noticed that because both <code>with_bot</code> and <code>with_top</code> had saturating addition for the extreme element they were adding, the value of bot+top in ereal depended on which one the implementation added last. When I was working on ereal I found this so mathematically unappealing that IIRC I didn't define addition at all</p>",
        "id": 247795079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627722919
    },
    {
        "content": "<p>I mean, what value did you want bot+top to have?</p>",
        "id": 247795254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627723294
    },
    {
        "content": "<p>I needed more algebraic structure on ereal for the Vitali-Caratheodory theorem, so I defined addition and multiplication there. With bot + top = top, because top is in general more interesting than bot. <code>ereal</code> is even a <code>linear_ordered_add_comm_monoid_with_top</code> and a <code>comm_monoid_with_zero</code>.</p>",
        "id": 247796686,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1627725729
    },
    {
        "content": "<p>I feel really vindicated by this! I remember just refusing to add addition, I said that the PR had all you needed to make any definition of addition you want but I didn't want to make the decision myself because I did not need it for my application.</p>",
        "id": 247797195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627726786
    },
    {
        "content": "<p>IIRC the definition was <code>with_bot (with_top \\R)</code> so you would have been stuck with the bad addition I think if I'd just <code>derive</code>d it and made some crappy API</p>",
        "id": 247797255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627726897
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ereal/src\">src#ereal</a></p>",
        "id": 247797540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627727344
    },
    {
        "content": "<p>As it happens, the addition _is_ just <code>@[derive]</code>d, but from <code>with_top (with_bot ℝ)</code> not <code>with_bot (with_top ℝ)</code></p>",
        "id": 247797544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627727362
    }
]