[
    {
        "content": "<p>Does this lemma exist in mathlib? (or at least a simpler proof?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">fintype.card</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hs.elems.image</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">ht.elems.image</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_image</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hs.complete</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">a.mem</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_image</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ht.complete</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">a.mem</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∪</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">x.card</span> <span class=\"bp\">+</span> <span class=\"n\">y.card</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">fintype.card_coe</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_union</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.card_disjoint_union</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finset.disjoint_iff_disjoint_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hy</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235544960,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619024149
    },
    {
        "content": "<p>Here's a related lemma I prove in my <a href=\"http://perm.support\">perm.support</a> refactor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">disjoint.card_support_mul</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.support.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g.support.finite</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hfg.to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">hf.to_finset.card</span> <span class=\"bp\">+</span> <span class=\"n\">hg.to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hf.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hg.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hfg.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finite.card_to_finset</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">to_finset_card</span><span class=\"o\">],</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.card_disjoint_union</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h.support_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h.disjoint_support</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235545476,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619024355
    },
    {
        "content": "<p>Most of the way there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_root_.disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">fintype.card</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">to_finset_card</span><span class=\"o\">],</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_root_.disjoint</span> <span class=\"n\">s.to_finset</span> <span class=\"n\">t.to_finset</span> <span class=\"o\">:=</span> <span class=\"n\">to_finset_disjoint_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">finset.card_disjoint_union</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235546304,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619024675
    },
    {
        "content": "<p>Thanks! It seems like it might be best to phrase this in terms of <code>set.finite</code></p>",
        "id": 235546524,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619024763
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_root_.disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">fintype.card</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">to_finset_card</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">to_finset_card</span><span class=\"o\">],</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_root_.disjoint</span> <span class=\"n\">s.to_finset</span> <span class=\"n\">t.to_finset</span> <span class=\"o\">:=</span> <span class=\"n\">to_finset_disjoint_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">finset.card_disjoint_union</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">to_finset_union</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235546628,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619024817
    },
    {
        "content": "<p>and here's the <code>set.finite</code> version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">set.finite.union</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">hs.to_finset.card</span> <span class=\"bp\">+</span> <span class=\"n\">ht.to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.card_disjoint_union</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"n\">finset.card</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_union</span><span class=\"o\">,</span> <span class=\"n\">set.finite.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">set.mem_union</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set.to_finset_disjoint_iff.mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235546698,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619024852
    },
    {
        "content": "<p>Depends. You can see my <a href=\"https://github.com/leanprover-community/mathlib/issues/7118\">#7118</a> for how I did it in my finset to set refactor. For the cases where you don't know that the underlying type is fintype, I refactored the card lemmas to take <code>set.finite</code> hypotheses. In some sections, I didn't refactor the \"underlying type is fintype\" and just could infer that <code>fintype s</code> etc.</p>",
        "id": 235546846,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619024903
    },
    {
        "content": "<p>I'd just use <code>set.finite.card_to_finset</code> for the <code>finite</code> proof, and use the proof we just wrote.</p>",
        "id": 235547007,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619024981
    }
]