[
    {
        "content": "<p>Does a type like the following exist already?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">interweaved</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">part</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">interweaved</span>\n<span class=\"bp\">|</span> <span class=\"n\">separator</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">interweaved</span> <span class=\"bp\">→</span> <span class=\"n\">interweaved</span>\n</code></pre></div>\n\n<p>This is a list that alternates <code>[α, β, ..., β, α]</code>, like what you might get from splitting a string</p>",
        "id": 211021461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600875684
    },
    {
        "content": "<p>Haskell has the <code>intersperse</code> function. Presumably lean has something similar?</p>",
        "id": 211023126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600876403
    },
    {
        "content": "<p>Oh nevermind... You want a type</p>",
        "id": 211023416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600876516
    },
    {
        "content": "<p>Perhaps <code>interspersed</code> is a better name. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.intercalate\">docs#list.intercalate</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.intersperse\">docs#list.intersperse</a> are both things, but they only support the case when the <code>β</code> terms have a uniform value</p>",
        "id": 211024034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600876782
    },
    {
        "content": "<p>I guess that's just <code>A x list (B x A)</code></p>",
        "id": 211031023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600880032
    },
    {
        "content": "<p><del>It's not, because that type doesn't have an equivalent to <code>interweaved.part a</code></del></p>",
        "id": 211035464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600882031
    },
    {
        "content": "<p><del><code>A \\oplus (A x list (B x A))</code> perhaps, but that's probably harder to work with.</del></p>",
        "id": 211035577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600882080
    },
    {
        "content": "<p>Yeah, that probably would work just fine too, good point</p>",
        "id": 211035746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600882149
    }
]