[
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lintegral_count'\">docs#lintegral_count'</a> but do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">integral_count</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">α</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_finset_sum_measure</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">integral_dirac'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">measurable_from_top.strongly_measurable</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">measurable_from_top.ae_strongly_measurable</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">has_finite_integral</span><span class=\"o\">,</span> <span class=\"n\">lintegral_dirac'</span> <span class=\"n\">_</span> <span class=\"n\">measurable_from_top</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.coe_lt_top</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280609734,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651225689
    },
    {
        "content": "<p>And then,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mem_ℒp</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">α</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">measurable_from_top.ae_strongly_measurable</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">snorm</span><span class=\"o\">,</span> <span class=\"n\">snorm'</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ennreal.rpow_lt_top_of_nonneg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_top_iff_ne_top.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ennreal.sum_lt_top</span><span class=\"o\">,</span> <span class=\"n\">lintegral_dirac'</span> <span class=\"n\">_</span> <span class=\"n\">measurable_from_top</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and we can get Cauchy-Schwarz for sums from the L2 version, but in any case mapping sums to (Bochner) integral might  be of more general use.</p>",
        "id": 280609850,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651225790
    },
    {
        "content": "<p>I don't think we have these and they will very useful to have!</p>",
        "id": 280624863,
        "sender_full_name": "Jason KY.",
        "timestamp": 1651235295
    }
]