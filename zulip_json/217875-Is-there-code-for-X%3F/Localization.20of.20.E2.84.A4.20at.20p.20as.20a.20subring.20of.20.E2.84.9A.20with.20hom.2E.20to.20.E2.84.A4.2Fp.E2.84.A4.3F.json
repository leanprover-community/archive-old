[
    {
        "content": "<p>Does mathlib know that <code>{x : ℚ // padic_val_rat p x ≥ 0}</code> is a subring of ℚ and has a canonical homomorphism onto <code>zmod p</code>?</p>",
        "id": 276166650,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647944428
    },
    {
        "content": "<p>I'm afraid it (mathlib) does not.</p>",
        "id": 276167775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647945055
    },
    {
        "content": "<p>But I think you can rather easily construct the map to <code>ℤ_[p]</code>.</p>",
        "id": 276167805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647945078
    },
    {
        "content": "<p>And then compose with <code>to_zmod</code>? But that would defeat the purpose, since the goal would be to produce a computable definition of <code>to_zmod</code>.</p>",
        "id": 276168067,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647945240
    },
    {
        "content": "<p>I see that there is ring_theory.localization, but a cursory look gives me the impression that this is much too abstract for my purpose.</p>",
        "id": 276168253,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647945327
    },
    {
        "content": "<p>Aah, if you want it to be computable, then I guess you'll have to handroll it</p>",
        "id": 276168528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647945457
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13429/files#diff-26c8ecbf3af3bf9829d6d2f965a6eea12d7ecf02f832fa287612f501321fd15fR41\">This ongoing PR</a> realizes localization as a subring of the field of fractions.</p>",
        "id": 279137936,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650069823
    },
    {
        "content": "<p>More precisely <a href=\"https://github.com/leanprover-community/mathlib/pull/13425\">#13425</a></p>",
        "id": 279138165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650070192
    },
    {
        "content": "<p>It seems easiest to define <code>localization.subring</code> as  <code>ring_hom.range</code> of the natural ring_hom from the localization to the fraction ring. Then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.surj\">docs#is_localization.surj</a> will supply us with the desired representation of elements as quotients.</p>",
        "id": 279146248,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650082003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Have you reviewed <a href=\"#narrow/stream/116395-maths/topic/Some.20more.20about.20valuation.20rings/near/279054523\">my change of defintion</a> of <code>prime_of_le</code>? I think it's most convenient to just use this new definition. If you want the valuation characterization we should just add a lemma <code>mem_prime_of_le_iff</code>.</p>",
        "id": 279146345,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650082154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> , yeah that looks like a good approach.</p>",
        "id": 279146668,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650082776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Localization.20of.20.E2.84.A4.20at.20p.20as.20a.20subring.20of.20.E2.84.9A.20with.20hom.2E.20to.20.E2.84.A4.2Fp.E2.84.A4.3F/near/279146248\">said</a>:</p>\n<blockquote>\n<p>It seems easiest to define <code>localization.subring</code> as  <code>ring_hom.range</code> of the natural ring_hom from the localization to the fraction ring. Then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.surj\">docs#is_localization.surj</a> will supply us with the desired representation of elements as quotients.</p>\n</blockquote>\n<p>Yeah, this will probably make the initial definitions a little shorter. But it's really nice when you can write <code>rintro \\&lt;_,a,b,hb,rfl\\&gt; </code> to automatically get the presentation of the element of your localization as a fraction</p>",
        "id": 279146808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650083010
    },
    {
        "content": "<blockquote>\n<p>It seems easiest to define localization.subring as ring_hom.range of the natural ring_hom from the localization to the fraction ring.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Here's that definition worked out! Not just a bit shorter :) <a href=\"https://github.com/leanprover-community/mathlib/compare/localization_subring...loc_subring_range?expand=1\">https://github.com/leanprover-community/mathlib/compare/localization_subring...loc_subring_range?expand=1</a></p>\n<p>This would break defeq so valuation_subring_order needs to be fixed, but that shouldn't be hard.</p>",
        "id": 279153061,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650093063
    },
    {
        "content": "<p>I proceeded with the <code>ring_hom.range</code> definition and generalized as_subring.lean a bit to allow A not a domain / K not a field. However, the inverse is only available in a field, so I can only recover the original definition as <a href=\"https://github.com/leanprover-community/mathlib/compare/627387c..7a4d8dc#diff-26c8ecbf3af3bf9829d6d2f965a6eea12d7ecf02f832fa287612f501321fd15fR76\"><code>lemma mem_iff_of_field</code></a> in the field case.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/compare/627387c..7a4d8dc#diff-95201f537dcff91fbf03b208e4ef4e169e1cea0d24e0ee6f3b589aa3fa0beb0b\">Here is what it takes</a> to adapt valuation_subring to use the new definition of localization.subring: it just involves a couple of of <code>erw mem_iff_of_field</code>. If you don't like it we can make a <code>subring.copy</code> in the field case. Everything is in the branch <a href=\"https://github.com/leanprover-community/mathlib/compare/valuation_subring_order...val_subring_order_golf?expand=1\">val_subring_order_golf</a> and ready to be merged into <a href=\"https://github.com/leanprover-community/mathlib/pull/13429\">#13429</a>.</p>",
        "id": 279198861,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650164336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Nice! What do you think about the following:</p>\n<ol>\n<li>Make <code>(is_localization.lift (λ s, by apply is_localization.map_units K ⟨s.1, hS s.2⟩) : localization S →+* K)</code> into a def, say <code>map_to_fraction_ring</code> or something.</li>\n<li>Make your <code>mem_iff</code> lemma into a lemma about the range of the map from 1.</li>\n<li>Define <code>subring K S hS</code> using <code>subring.copy</code>, using <code>mem_iff</code> to make the carrier defeq to the condition given by <code>mem_iff</code>.<br>\nThe nice definitional properties of the carrier would be essentially all the same, and I think most (if not all) of the shortened proofs would still remain.</li>\n</ol>",
        "id": 279200859,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650167947
    },
    {
        "content": "<p>In any case, I won't be able to do anything involving lean until at least Tuesday, so I changed to a WIP tag on <a href=\"https://github.com/leanprover-community/mathlib/pull/13425\">#13425</a></p>",
        "id": 279200971,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650168054
    },
    {
        "content": "<p>If you want to merge what you wrote to my branch, please do go ahead.</p>",
        "id": 279200999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650168122
    },
    {
        "content": "<p>Thanks for taking a look! What you suggest looks like a good plan, but if we do <code>subring.copy</code> in the general (comm_ring) case, do we want another <code>subring.copy</code> to get nicer defeq in the field case?</p>",
        "id": 279201045,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650168185
    },
    {
        "content": "<p>We won't be able to use <code>rfl</code> in the general case, so it's not as nice as the field case where we can use rintro \\&lt;_,a,b,hb,rfl\\&gt; .</p>",
        "id": 279201140,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650168304
    },
    {
        "content": "<p>Naw, I think the carrier in the more general case would be essentially just as good as the condition in the field case.</p>",
        "id": 279201269,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650168521
    },
    {
        "content": "<p>So I suggest keeping the statement of <code>mem_iff_of_field</code> the same, while making <code>mem_iff</code> true by <code>refl</code>.</p>",
        "id": 279201279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650168583
    },
    {
        "content": "<p>Hmm... Maybe we should only define <code>subring</code> in the case of fields? If we name the map as I suggested above, using <code>range</code> in the general case along with your <code>mem_iff</code> is probably as good as it gets. In the field case, we could use <code>subring</code> which is useful for definitional tricks like using <code>rcases/rintro</code> with rfl.</p>",
        "id": 279201468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650168909
    },
    {
        "content": "<p>I've made the subring -&gt; subalgebra change, which gets rid of a bunch of instance declarations.</p>\n<p>I changed <code>mem_iff</code> to a version using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.mk'\">docs#is_localization.mk'</a>, which enables <code>rintro rfl</code> and can be converted to the original version using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.mk'_eq_iff_eq_mul\">docs#is_localization.mk'_eq_iff_eq_mul</a>, and the proof of <code>mem_iff_of_field</code> simplifies slightly.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/compare/valuation_subring_order...val_subring_order_golf?expand=1\">https://github.com/leanprover-community/mathlib/compare/valuation_subring_order...val_subring_order_golf?expand=1</a></p>\n<p>I have not done the <code>copy</code> stuff. If you think it needs to be done for future convenience, I suggest we rename the current <code>subalgebra</code> to something like <code>subalgebra_aux</code>, and define <code>subalgebra</code> using <code>copy</code> in the field case.</p>",
        "id": 279261616,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650262147
    },
    {
        "content": "<p>I'm a bit surprised we don't have a version of <code>is_localization.lift</code> that gives an <code>alg_hom</code>. Maybe I missed it?</p>",
        "id": 279353450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650330680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I merged your branch into <a href=\"https://github.com/leanprover-community/mathlib/tree/valuation_subring_order\">branch#valuation_subring_order</a> ... No need to have divergent branches for this! Please feel free to push directly to <code>valuation_subring_order</code> (this is becoming a collaborative PR anyway ;))</p>",
        "id": 279354149,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650331466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Yeah that's a bit surprising, I guess maybe the alg_hom API wasn't well developed when most of ring_theory.localization was written? Searching for <code>ₐ</code> in ring_theory.localization.basic shows it appears in only 4 declarations.</p>\n<p>Thanks! I was working in that branch so it was most convenient to push to it, but now that you merged it I'll work in <a href=\"https://github.com/leanprover-community/mathlib/tree/valuation_subring_order\">branch#valuation_subring_order</a> henceforth.</p>",
        "id": 279355383,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650333127
    },
    {
        "content": "<p>I just pushed a start to the approach using <code>copy</code>.</p>",
        "id": 279355400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650333180
    },
    {
        "content": "<p>As you can see, I defined this <code>map_to_fraction_ring</code> algebra hom, and defined <code>subalgebra</code> by <code>copy</code>ing using the range of that.<br>\nThere is still one sorry (about bijectivity) and some similar isntances to add for <code>subalgebra_of_field</code>.</p>\n<p>I wonder whether it's worthwhile to add some of these <code>localization</code> instances for <code>(map_to_fraction_ring _ _ _).range</code> as well, and use <code>subalgebra.copy_eq</code> and <code>subalgebra.equiv_of_eq</code> to construct the various instances for <code>subalgebra</code> and <code>subalgebra_of_field</code>.</p>",
        "id": 279355613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650333534
    },
    {
        "content": "<p>I won't be able to work on this any more tonight, but I'll probably have some more time tomorrow.</p>",
        "id": 279355625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650333574
    },
    {
        "content": "<p><code>is_localization</code> is Prop so we can just use the original proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">is_localization_subalgebra</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_localization</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">localization.subalgebra</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">subalgebra.copy_eq</span><span class=\"o\">,</span> <span class=\"n\">exact</span>\n<span class=\"n\">is_localization.is_localization_of_alg_equiv</span> <span class=\"n\">S</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">is_localization.lift_eq</span> <span class=\"o\">}</span> <span class=\"bp\">..</span> <span class=\"n\">ring_equiv.of_bijective</span> <span class=\"n\">_</span>\n  <span class=\"o\">⟨</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_localization.lift_injective_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subtype.ext_iff.1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_localization.injective</span> <span class=\"n\">_</span> <span class=\"n\">hS</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n              <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_fraction_ring.injective</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">⟩,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.range_restrict_surjective</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279355850,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650333736
    }
]