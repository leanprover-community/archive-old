[
    {
        "content": "<p>Dear All,</p>\n<p>once/if <code>move_add</code> gets merged into mathlib, it will be simpler to implement a tactic that will compute <code>nat_degree</code>s of relatively \"explicit\" polynomials.  In its simplest form, given a sum of terms of the form <code>C a * X ^ n</code>, where</p>\n<ul>\n<li><code>a</code> is in a semiring,</li>\n<li><code>n</code> is a closed term of type <code>nat</code>,</li>\n<li>the term of highest degree is unique,</li>\n<li>there is floating around an assumption that says that the coefficient of the term of highest degree is non-zero,</li>\n</ul>\n<p>the tactic would be able to compute the <code>nat_degree</code> of such an expression.  Of course, each of the various items above can be given more attention and the scope of the tactic could increase.</p>\n<p>My question is: would such a tactic be desired?  Patrick said that it would be good as a <code>norm_num</code> extension, for instance.</p>\n<p>Before I start making progress on this, I would like to know whether this would be useful or not!</p>\n<p>Thanks!</p>",
        "id": 280739210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651329075
    },
    {
        "content": "<p>The <a href=\"#narrow/stream/113488-general/topic/Cubics/near/279005649\">suggestion</a> where this arose.</p>",
        "id": 280739696,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651329744
    },
    {
        "content": "<p>I definitely think it would be useful, these sort of goals are very annoying. Ideally it would also be able to handle <code>degree</code> <code>leading_term</code> and <code>monic</code> goals appropriately</p>",
        "id": 280740025,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651330219
    },
    {
        "content": "<p>Dear All,</p>\n<p>I've playing around with a tactic to compute <code>nat_degree</code>s of polynomials.  Currently, it is quite gullible and not tested very much, but below is what I have.  It is based on <code>move_add</code> (<a href=\"https://github.com/leanprover-community/mathlib/tree/aa_sort\">branch#aa_sort</a>).</p>\n<p><em>When it should work for now.</em><br>\nIf the goal is <code>nat_degree (expression) = n</code>, <code>compute_degree</code> should close the goal if:</p>\n<ul>\n<li>the leading term of <code>expression</code> is <code>X ^ n</code>,</li>\n<li>all remaining terms are of the form <code>C a * X ^ a</code> or <code>monomial a r</code> (and have degree smaller than <code>n</code>).</li>\n</ul>\n<p>Repetitions in degrees of non-highest terms is allowed.</p>\n<p>It is easy to implement improvements, and I am planning to do that.  If you have any comment, though, I would be very happy to hear them!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.move_add</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.lemmas</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">silly_poly_lemmas</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.nat_degree_monomial_le</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">polynomial.monomial</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.nat_degree_monomial</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.nat_degree_C_mul_X_le</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat_degree_C_mul_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">nat_degree_X_le</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">silly_poly_lemmas</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">guess_deg</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n0</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat.zero</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">n1</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat.zero.succ</span><span class=\"o\">),</span>\n  <span class=\"n\">pX</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">polynomial.X</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">e.app_fn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe_fn</span> <span class=\"bp\">$</span> <span class=\"n\">polynomial.monomial</span> <span class=\"bp\">%%</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe_fn</span> <span class=\"bp\">$</span> <span class=\"n\">polynomial.C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n          <span class=\"n\">bo</span> <span class=\"bp\">←</span> <span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">pX</span><span class=\"o\">,</span>\n          <span class=\"k\">if</span> <span class=\"n\">bo</span> <span class=\"k\">then</span> <span class=\"n\">n1</span> <span class=\"k\">else</span>\n            <span class=\"o\">(</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">margs</span> <span class=\"o\">:=</span> <span class=\"n\">e.get_app_args</span><span class=\"o\">,</span>\n              <span class=\"n\">margs.nth</span> <span class=\"mi\">4</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">return</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n            <span class=\"o\">(</span> <span class=\"k\">do</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">polynomial.nat_degree</span><span class=\"o\">),</span>\n              <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">expr.mk_app</span> <span class=\"n\">val</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">)</span>\n          <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_factors_add</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_mul.mul</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n                              <span class=\"n\">ga</span> <span class=\"bp\">←</span> <span class=\"n\">get_factors_add</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n                              <span class=\"n\">gb</span> <span class=\"bp\">←</span> <span class=\"n\">get_factors_add</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n                              <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_add.add</span> <span class=\"o\">[</span><span class=\"n\">ga</span><span class=\"o\">,</span> <span class=\"n\">gb</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">return</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">guess_deg</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">return</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">compute_degree</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">polynomial.nat_degree</span> <span class=\"bp\">%%</span><span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">n0</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat.zero</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">summ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">get_summands</span> <span class=\"n\">tl</span><span class=\"o\">),</span>\n  <span class=\"n\">rere</span> <span class=\"bp\">←</span> <span class=\"n\">summ.mmap</span> <span class=\"n\">get_factors_add</span><span class=\"o\">,</span>\n  <span class=\"n\">mario</span> <span class=\"bp\">←</span> <span class=\"n\">rere.mmap</span> <span class=\"o\">(</span><span class=\"n\">eval_expr</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">mario.maximum</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">m'</span> <span class=\"o\">:=</span> <span class=\"n\">m.get_or_else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">szd</span> <span class=\"o\">:=</span> <span class=\"n\">summ.zip</span> <span class=\"n\">mario</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fil</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">szd.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">e.2</span> <span class=\"bp\">=</span> <span class=\"n\">m'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pexpr.of_expr</span> <span class=\"n\">e.1</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffil</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">([</span><span class=\"n\">ff</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"n\">fil</span><span class=\"o\">),</span>\n  <span class=\"n\">move_add_with_errors</span> <span class=\"n\">ffil</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">polynomial.nat_degree_add_eq_right_of_nat_degree_lt</span><span class=\"o\">,</span> <span class=\"n\">polynomial.nat_degree_X_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">polynomial.nat_degree_X_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">nat.lt_succ_of_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">polynomial.nat_degree_add_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n             <span class=\"n\">refine</span> <span class=\"n\">max_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">polynomial.monomial_eq_C_mul_X</span> <span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">polynomial.monomial_mul_monomial</span> <span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">polynomial.nat_degree_monomial_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">polynomial.nat_degree_C_mul_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>  <span class=\"c1\">-- norm_num could be used earlier, but is *slightly* slower</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"c1\">-- these assumptions are</span>\n                          <span class=\"c1\">-- the type of the semiring and</span>\n                          <span class=\"c1\">-- the instance that it is a semiring.</span>\n                          <span class=\"c1\">-- They appear to arise from `pX` in `guess_deg`,</span>\n                          <span class=\"c1\">-- which has no way of figuring out what `R` is.</span>\n     <span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f10</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">5</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"mi\">7</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"mi\">9</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span>\n    <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">compute_degree</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281461935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651854106
    },
    {
        "content": "<p>A first easy addition will be to extract the coefficient from the leading term and scan the context to look for an assumption saying that it is non-zero.  This will make the tactic work for non-monic polynomials, provided there is in context a proof of the fact that the leading coefficient is non-zero.</p>",
        "id": 281462292,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651854292
    },
    {
        "content": "<p>Alex, I like your suggestions, I will work on them.  I'm just starting from this part!</p>",
        "id": 281463452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651854909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> , since you had expressed interest in such automation, I now have a concrete proposal!  PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14040\">#14040</a> defines two tactics:</p>\n<ul>\n<li><code>compute_degree_le</code>, whose aim is to close goals of the form <code>f.nat_degree ≤ d</code>,</li>\n<li><code>compute_degree</code>, whose aim is to close goals of the form <code>f.nat_degree = d</code>.</li>\n</ul>\n<p>In both cases, the exponents should be closed expressions of type <code>nat</code>.  Also, there is the requirement that a unique term of highest degree appears and that this term is of the form <code>X ^ n, X</code> or, assuming also that <code>a ≠ 0</code> is in context, <code>C a * X ^ n, C a * X</code>.</p>\n<p>It should be easy to generalize these assumptions, allowing for more interesting polynomials, but I would rather leave this for some other PR!</p>",
        "id": 281689677,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652105348
    },
    {
        "content": "<p>Why isn't this being merged into the direct <code>norm_num</code> architecture?</p>",
        "id": 281693901,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652107146
    },
    {
        "content": "<p>I feel that <code>norm_num</code> is very polished and sophisticated, while this is somewhat crude and rough.  Maybe, after some iterations of the review process, it might go into <code>norm_num</code>.  Note that this is the second tactic that I write...</p>",
        "id": 281694562,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652107394
    },
    {
        "content": "<p>Also, right now it is somewhat buggy and fails in some situations where I would like it to actually work out-of-the-box.</p>",
        "id": 281694718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652107454
    },
    {
        "content": "<p>For instance, to get the functionality with the <code>C a * X ^ ??</code> fully working, I would have to figure out how to get <code>nontriviality</code> to kick in, once there is an assumption of the form <code>a ≠ 0</code>.  This is a meta-problem, not really a maths one!</p>",
        "id": 281695024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652107575
    },
    {
        "content": "<p>Conceivably you could just use <code>assumption</code> to prove that <code>a ≠ 0</code></p>",
        "id": 281695935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652107970
    },
    {
        "content": "<p>Or require it be used as <code>norm_num [h]</code>, which I think is already possible syntax</p>",
        "id": 281695971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652107986
    },
    {
        "content": "<p>Yes, assumption is ok.  At some point in the process, though, after it used the assumption, it seems to still be looking for a non-triviality assumption.  It might be a non-triviality assumption in some lemma that could likely be replaced or weakened, but I have not yet debugged it.</p>",
        "id": 281696355,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652108133
    },
    {
        "content": "<p>Well, if <code>R</code> is trivial then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.unique\">docs#polynomial.unique</a> says everything is of <code>nat_degree</code> 0</p>",
        "id": 281696593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652108231
    },
    {
        "content": "<p>But I guess your point is that you have <code>nontrivial</code> in your assumptions and the meta code isn't finding it?</p>",
        "id": 281696694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652108270
    },
    {
        "content": "<p>Well, nontrivial is a consequence of <code>a ≠ 0</code> but is not automatically an instance, so some lemmas used, I think, fail in some applications.  I will debug it: it should be easy and I also think that I probably want to handle the lead term separately anyway.</p>",
        "id": 281697713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652108619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Computing.20nat_degrees.20of.20polynomials/near/281689677\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> , since you had expressed interest in such automation, I now have a concrete proposal!  PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14040\">#14040</a> defines two tactics:</p>\n<ul>\n<li><code>compute_degree_le</code>, whose aim is to close goals of the form <code>f.nat_degree ≤ d</code>,</li>\n<li><code>compute_degree</code>, whose aim is to close goals of the form <code>f.nat_degree = d</code>.</li>\n</ul>\n</blockquote>\n<p>It would make sense to add <code>degree_ne_zero</code> or similar, since this is a common condition in the context of proving existence of roots of polynomials in alg. closed fields, or more generally when need non-units in the polynomial ring.</p>",
        "id": 281697876,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652108675
    },
    {
        "content": "<p>Getting the degree_ne_zero part should be easy: thanks for the suggestion!</p>",
        "id": 281698524,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652108940
    },
    {
        "content": "<p>(Note that for the moment this is only for <code>nat_degree</code>, but adapting to <code>degree</code> should also be straightforward.)</p>",
        "id": 281698589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652108972
    },
    {
        "content": "<p>Ok, I think that the issue is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_X_pow\">docs#polynomial.nat_degree_X_pow</a> proves the exact degree, not the inequality and for this uses the <code>nontrivial</code> assumption.  There seems to not be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_X_pow_le\">docs#polynomial.nat_degree_X_pow_le</a> [lemma not existing] (and possibly a few other edge cases), which prove the inequality with no extra typeclass assumptions.  I think that with this, the tactic will work better.</p>\n<p>Still, I will chop off the computation of the degree of the highest term, since it will make for easier and more streamlined logic/code.</p>",
        "id": 281707779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652112744
    },
    {
        "content": "<p>I have streamlined the code a bit and, thanks for several very helpful answers in the metaprogramming stream, I was able to get the <code>nontriviality</code> assumptions to kick in!  Right now, PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14040\">#14040</a> has a fairly stable <code>compute_degree</code> and <code>compute_degree_le</code> tactics that close goals of the form <code>f.nat_degree = d</code> and <code>f.nat_degree ≤ d</code>, where <code>f</code> is an \"explicit\" polynomial.</p>\n<p>The PR looks large, but the only relevant file is under 300 lines long and several of these lines are extended comments and doc-strings and doc-module.</p>",
        "id": 281966301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652276359
    },
    {
        "content": "<p>The strategy is to isolate a term of \"highest degree\" and proceed from there.  This means that getting the tactic to also close <code>monic</code> and <code>leading_coeff</code>s goals should be relatively straightforward.  However, since this PR also depends on the previous <code>move_add</code> PR, I will wait to implement these further features.</p>",
        "id": 281966562,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652276492
    },
    {
        "content": "<p>Moreover, I am conscious of the \"imminent\" switch to Lean4 and have started seeing how to implement <code>move_add</code> in Lean4.</p>",
        "id": 281966565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652276493
    },
    {
        "content": "<p>Do these work for <code>.degree</code> too? If not, perhaps the lemma should be called <code>compute_nat_degree</code>!</p>",
        "id": 281974043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652279504
    },
    {
        "content": "<p>Making them work for <code>degree</code> is a todo, actually a very easy one!  I have a preference for maintaining the name short.</p>",
        "id": 281974295,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652279586
    },
    {
        "content": "<p>If you want, I will get them to work with <code>degree</code> as well: since the interesting case is when you are trying to compute the degree of a polynomial of <em>non-zero</em> <code>nat_degree</code>, I can simply convert <code>degree</code> to <code>nat_degree</code> and leave the tactic unchanged otherwise.  If it fails, it means that you were trying to use the tactic to prove that the degree of a constant polynomial was zero.</p>",
        "id": 281974525,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652279680
    },
    {
        "content": "<p>Does it make sense to make this a norm_num plugin?</p>",
        "id": 281974911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652279816
    },
    {
        "content": "<p>This was Patrick's suggestion as well.  I am happy to make it a plug-in, but I do not really know what it entails (or how to do it).</p>",
        "id": 281975538,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652280088
    },
    {
        "content": "<p>Does looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_fin.eval_ineq/src\">src#tactic.norm_fin.eval_ineq</a> help at all?</p>",
        "id": 281975874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652280203
    },
    {
        "content": "<p>In fact, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_num.eval_gcd/src\">src#tactic.norm_num.eval_gcd</a> is probably a better template</p>",
        "id": 281976099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652280270
    },
    {
        "content": "<p>You just have to return the pair <code>(degree_it_evaluates_to, proof_its_that_degree)</code></p>",
        "id": 281976291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652280346
    },
    {
        "content": "<p>Ok, <code>degree_it_evaluates_to</code> I have and is easy.</p>\n<p>Should I extract the proof term from the tactic or should I provide the tactic that produces the proof?</p>",
        "id": 281976505,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652280438
    },
    {
        "content": "<p>(I am looking at the template, but I am still processing it!)</p>",
        "id": 281976534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652280452
    },
    {
        "content": "<p>For the moment, I am simply skipping the <code>mk_instance_cache</code>, right?</p>",
        "id": 281976963,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652280605
    },
    {
        "content": "<p>I have not yet figured out the <code>norm_num</code> thing, but have added support for <code>degree</code>.  As you can imagine it has not been tested much, but works in some examples!</p>",
        "id": 282001664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652290839
    },
    {
        "content": "<p>So far, the support for <code>degree</code> is limited computing exact degree (no ≤ allowed) and discards the case in which the degree is ⊥.</p>",
        "id": 282001767,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652290909
    },
    {
        "content": "<p>Dear All,</p>\n<p>I split off <a href=\"https://github.com/leanprover-community/mathlib/pull/14762\">#14762</a> from the main PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14040\">#14040</a> to compute degrees of polynomials.  This contains the easier step of proving that the degree of a polynomial is at most something.</p>\n<p>For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">compute_degree_le</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 286318891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655366473
    }
]