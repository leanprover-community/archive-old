[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">int_prod_eq_neg_one'</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.prod</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_nil</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">((</span><span class=\"n\">dec_trivial</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_cons</span><span class=\"o\">,</span> <span class=\"n\">eq_neg_iff_eq_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">int.eq_one_or_neg_one_of_mul_eq_one'</span> <span class=\"n\">h.symm</span> <span class=\"k\">with</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_cons_of_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">l_ih</span> <span class=\"o\">(</span><span class=\"n\">neg_eq_iff_neg_eq.mp</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_cons_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This would be a bit easier if we had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">int.eq_one_or_neg_one_of_mul_eq_neg_one'</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>in addition to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.eq_one_or_neg_one_of_mul_eq_one'\">docs#int.eq_one_or_neg_one_of_mul_eq_one'</a>.</p>",
        "id": 309195801,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668174469
    },
    {
        "content": "<p>I have made a PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/17478\">#17478</a>) that adds <code>int.eq_one_or_neg_one_of_mul_eq_neg_one'</code> (and the one-sided version <code>int.eq_one_or_neg_one_of_mul_eq_neg_one</code>). I think this is useful to have, and it should be quick to review.</p>",
        "id": 309208606,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668178847
    },
    {
        "content": "<p>I think the lemma you have as <code>int_prod_eq_neg_one'</code> is appropriate for mathlib. My inclination would be to deduce it from two more general lemmas: in any monoid, if a product is not 1, it has some term that is not 1; and in any commutative monoid, if a product is a unit, all terms of the product are units. (And then combine those with the only two units of the integers being <code>1</code> and <code>-1</code>.)</p>",
        "id": 309289745,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1668225976
    },
    {
        "content": "<p>The second one is basically monotonicity of being a unit under division.</p>",
        "id": 309314917,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668247792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Product.20of.20integers.20is.20-1.20.5Btitle.20changed.5D/near/309289745\">said</a>:</p>\n<blockquote>\n<p>I think the lemma you have as <code>int_prod_eq_neg_one'</code> is appropriate for mathlib. My inclination would be to deduce it from two more general lemmas: in any monoid, if a product is not 1, it has some term that is not 1; and in any commutative monoid, if a product is a unit, all terms of the product are units. (And then combine those with the only two units of the integers being <code>1</code> and <code>-1</code>.)</p>\n</blockquote>\n<p>OK, I'll do that. I assume this should go into <a href=\"https://tqft.net/mathlib/data/list/big_operators\">file#data/list/big_operators</a> ?</p>",
        "id": 309326756,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668253783
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17499\">#17499</a></p>",
        "id": 309342056,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668260937
    }
]