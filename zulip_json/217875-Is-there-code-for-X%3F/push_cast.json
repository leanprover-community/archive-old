[
    {
        "content": "<p>I'm trying to push a coercion past a <code>finset.prod</code>.  In this example, with <code>ℕ</code> and <code>ℚ</code>, the goal is closed with <code>push_cast</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but when I generalise from <code>ℕ</code> and <code>ℚ</code> to <code>β</code> and <code>γ</code>, it no longer works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there some further attribute I need to add, or something else I can change to make this work more generally?</p>",
        "id": 263294069,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638367258
    },
    {
        "content": "<p>you almost never want to assume <code>has_coe β γ</code>, since it's an arbitrary function in this case</p>",
        "id": 263294279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638367313
    },
    {
        "content": "<p>Instead, replace <code>↑</code> with a function <code>f</code> satisfying certain properties; in this case I think you want it to be a group hom</p>",
        "id": 263294475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638367385
    },
    {
        "content": "<p>and I think the theorem is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.map_prod\">docs#monoid_hom.map_prod</a></p>",
        "id": 263294550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638367421
    },
    {
        "content": "<p>That's great, thank you</p>",
        "id": 263294992,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638367597
    },
    {
        "content": "<p>A related question: in a proof I'm working on I have and expression of the form <code>↑(f.prod g)</code> (where <code>f : α →₀ M</code>) and I'd like to transform it to something of the form <code>f.prod (λ a b, (↑(g a b):ℚ))</code>.  In the example below, if I unfold <code>finsupp.prod</code> to <code>finset.prod</code> then <code>norm_cast</code> can immediately close the goal (or <code>push_cast</code> also works).  But without the unfolding these tactics fail.  Is there an alternative tactic or a variant of <code>push_cast</code> or <code>norm_cast</code> that can do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f.prod</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f.prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">):</span><span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">finsupp.prod</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(btw, I'm aware that <code>push_cast [finsupp.prod]</code> closes this goal in one step, but in the proof I'm working on this leaves me with an expression in terms of <code>finset.prod</code>, and I'm hoping to remain within the world of <code>finsupp</code>.)</p>",
        "id": 263414506,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638439197
    },
    {
        "content": "<p>If <code>library_search</code> doesn't find that lemma, then it's probably missing.</p>",
        "id": 263414725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638439296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What is the best way forward here? Do we need a new lemma for every coercion that preserves multiplication?</p>",
        "id": 263414924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638439418
    },
    {
        "content": "<p>I think that's the way we currently handle things, yes.</p>",
        "id": 263415518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638439786
    },
    {
        "content": "<p>Eg we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.map_finsupp_prod\">docs#monoid_hom.map_finsupp_prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.map_prod\">docs#monoid_hom.map_prod</a>, so in the same way we need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_prod\">docs#nat.cast_prod</a> (exists) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_finsupp_prod\">docs#nat.cast_finsupp_prod</a> (doesn't exist)</p>",
        "id": 263415650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638439853
    },
    {
        "content": "<p>With the old-style <code>is_monoid_hom</code> typeclasses we maybe could have avoided that repetition by just having <code>is_monoid_hom.map_finsupp_prod</code> and not needing the cast version as it would fall out from <code>is_monoid_hom coe</code>, but at least in Lean3 that didn't work with <code>simp</code></p>",
        "id": 263415839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638439954
    },
    {
        "content": "<p>I'm thinking about defining <code>has_coe</code> subclasses that state the coercion is a monoid/ring hom. We can also use those to get back the \"there exists a canonical ring hom\" usages of <code>algebra</code> (since the plan is to remove the defeqness of <code>@@algebra_map _ _ (ring_hom.to_algebra f) = f</code>).</p>",
        "id": 263416296,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638440251
    },
    {
        "content": "<p>I've just submitted <a href=\"https://github.com/leanprover-community/mathlib/issues/10579\">#10579</a> to add <code>nat.cast_finsupp_prod</code> and <code>nat.cast_finsupp_sum</code> (and likewise for <code>int</code>) to <code>data/finsupp/basic</code>.</p>",
        "id": 263438529,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638452696
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 263444850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638455416
    }
]