[
    {
        "content": "<p>Is pi defined somewhere, like good old' 3.14 etc pi</p>",
        "id": 212483797,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602017346
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.pi\">docs#real.pi</a></p>",
        "id": 212483901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602017407
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">git grep \"3.14\"</span>\n<span class=\"go\">src/analysis/special_functions/trigonometric.lean:/-- The number π = 3.14159265... Defined here using choice as twice a zero of cos in [1,2], from</span>\n<span class=\"go\">src/data/real/pi.lean:lemma pi_gt_314 : 3.14 &lt; pi := by pi_lower_bound [99/70, 874/473, 1940/989, 1447/727]</span>\n<span class=\"go\">src/data/real/pi.lean:lemma pi_gt_31415 : 3.1415 &lt; pi := by pi_lower_bound [</span>\n<span class=\"go\">src/data/real/pi.lean:lemma pi_lt_31416 : pi &lt; 3.1416 := by pi_upper_bound [</span>\n<span class=\"go\">src/data/real/pi.lean:  411278/205887, 438142/219137, 451504/225769, 265603/132804, 849938/424971]</span>\n<span class=\"go\">src/data/real/pi.lean:lemma pi_gt_3141592 : 3.141592 &lt; pi := by pi_lower_bound [</span>\n<span class=\"go\">src/data/real/pi.lean:lemma pi_lt_3141593 : pi &lt; 3.141593 := by pi_upper_bound [</span>\n</code></pre></div>",
        "id": 212483959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602017450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> Do you know <code>git grep</code>?</p>",
        "id": 212483982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602017464
    },
    {
        "content": "<p>yeah, i grepped for pi but a bazillion other things came up</p>",
        "id": 212484896,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602017954
    },
    {
        "content": "<p>yeah, that's stuff related to <code>pi</code> types, I guess.</p>",
        "id": 212484938,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602017980
    },
    {
        "content": "<p>Aah, you should have grepped for good old' 3.14 etc</p>",
        "id": 212484941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602017981
    },
    {
        "content": "<p>i looked through the file that defined cosine too, hoping that it would be in there, or some trig equalities would be</p>",
        "id": 212484961,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602017991
    },
    {
        "content": "<p>yeah i didn't realize that would be a lemma</p>",
        "id": 212485023,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602018007
    },
    {
        "content": "<p>it sure is though</p>",
        "id": 212485038,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602018015
    },
    {
        "content": "<p>and for the record, when I use docs search for \"pi\", \"real.pi\" isn't one of the top 20 results</p>",
        "id": 212485115,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602018053
    },
    {
        "content": "<p>so i tried!</p>",
        "id": 212485125,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602018057
    },
    {
        "content": "<p>TBH, I only knew that the 3.14 pi existed because <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> had a post about <code>two_pi_I</code> a few days ago ;)</p>",
        "id": 212485195,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602018096
    },
    {
        "content": "<p>Which trig equalities are you after?  Another good file is analysis/special_functions/trigonometric. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.cos_pi_div_two\">docs#complex.cos_pi_div_two</a></p>",
        "id": 212485209,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602018106
    },
    {
        "content": "<p>Maybe we should add \"Archimedes' constant\" somewhere in the docstrings</p>",
        "id": 212485323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602018157
    },
    {
        "content": "<p>Never heard of that before (-;</p>",
        "id": 212485376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602018192
    },
    {
        "content": "<p>and maybe something about circumference over diameter</p>",
        "id": 212485728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602018382
    },
    {
        "content": "<p>ideally i would like some tactic that auto solves a formula like <code>(cos x)^2 = 1/2</code></p>",
        "id": 212485753,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602018396
    },
    {
        "content": "<p>i even grepped for \"area\", figuring the formula for the area of a circle should tell me what pi is. but there is no use of the word \"area\" in any lean file</p>",
        "id": 212485822,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602018442
    },
    {
        "content": "<p>Right.  We're waiting for Riemannian manifolds :)</p>",
        "id": 212485877,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602018478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Pi/near/212485753\">said</a>:</p>\n<blockquote>\n<p>ideally i would like some tactic that auto solves a formula like <code>(cos x)^2 = 1/2</code></p>\n</blockquote>\n<p>This depends what you want.  Do you want it for a small set of nice trig values only?  If so, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.cos_pi_div_four\">docs#real.cos_pi_div_four</a> for this one, and there are plenty more special values (and you can PR more!).  Do you want it for a general RHS?  We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.arccos\">docs#real.arccos</a> if so.</p>",
        "id": 212486541,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602018756
    },
    {
        "content": "<p>No, I think Kevin wants to throw an equation at lean the way you can throw equations at wolframalpha</p>",
        "id": 212486638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602018824
    },
    {
        "content": "<p>But we don't have anything that gets close to that.</p>",
        "id": 212486656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602018838
    },
    {
        "content": "<p>How does wolframalpha work?  (Of course it's closed source, so one has to guess.)  It is so helpful and friendly (especially the paid version), maybe interacting with Lean can be like that someday!</p>",
        "id": 212487101,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602019058
    },
    {
        "content": "<p>yes, let's hope that it will!</p>",
        "id": 212487284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602019168
    },
    {
        "content": "<p>well, in this case I literally want to solve <code>(cos x)^2 = 1/2</code></p>",
        "id": 212487498,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602019273
    },
    {
        "content": "<p>it should be (odd number) pi / 4 i think</p>",
        "id": 212487621,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602019326
    },
    {
        "content": "<p>It'll be slightly messy, but use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.cos_pi_div_four\">docs#real.cos_pi_div_four</a>, the periodicity and reflective symmetry of cos, and its injectivity on certain intervals.</p>",
        "id": 212487640,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602019343
    },
    {
        "content": "<p>i'm sure there's some sort of formula that reduces this... yea i'll look around</p>",
        "id": 212487661,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602019354
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.cos_inj_of_nonneg_of_le_pi\">docs#real.cos_inj_of_nonneg_of_le_pi</a></p>",
        "id": 212487706,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602019393
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.cos_add_pi\">docs#real.cos_add_pi</a></p>",
        "id": 212487807,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602019458
    },
    {
        "content": "<p>And a possible model, the classification of solutions to <code>cos x = 1</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.cos_eq_one_iff\">docs#real.cos_eq_one_iff</a></p>",
        "id": 212487997,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602019570
    },
    {
        "content": "<p>how about the formula for <code>cos (x + y)</code> - is that somewhere? i'm looking, and i feel silly for not finding it, but there are just so many of tehse things</p>",
        "id": 212488031,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602019592
    },
    {
        "content": "<p>There sure are! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.cos_add\">docs#real.cos_add</a></p>",
        "id": 212488228,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602019689
    },
    {
        "content": "<p>arr, i even grepped the docs for \"add\" but those are on a different page</p>",
        "id": 212488270,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602019713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Pi/near/212487101\">said</a>:</p>\n<blockquote>\n<p>How does wolframalpha work?  (Of course it's closed source, so one has to guess.)  It is so helpful and friendly (especially the paid version), maybe interacting with Lean can be like that someday!</p>\n</blockquote>\n<p>(FWIW if you want open source equivalents there's also how e.g. sympy does this in Python land) Which for this example gives...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">var</span><span class=\"o\">(</span><span class=\"s2\">\"x\"</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">solveset</span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">**</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"n\">Union</span><span class=\"o\">(</span><span class=\"n\">ImageSet</span><span class=\"o\">(</span><span class=\"n\">Lambda</span><span class=\"o\">(</span><span class=\"n\">_n</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">_n</span><span class=\"bp\">*</span><span class=\"n\">pi</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">Integers</span><span class=\"o\">),</span> <span class=\"n\">ImageSet</span><span class=\"o\">(</span><span class=\"n\">Lambda</span><span class=\"o\">(</span><span class=\"n\">_n</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">_n</span><span class=\"bp\">*</span><span class=\"n\">pi</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">Integers</span><span class=\"o\">),</span> <span class=\"n\">ImageSet</span><span class=\"o\">(</span><span class=\"n\">Lambda</span><span class=\"o\">(</span><span class=\"n\">_n</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">_n</span><span class=\"bp\">*</span><span class=\"n\">pi</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"bp\">*</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">Integers</span><span class=\"o\">),</span> <span class=\"n\">ImageSet</span><span class=\"o\">(</span><span class=\"n\">Lambda</span><span class=\"o\">(</span><span class=\"n\">_n</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">_n</span><span class=\"bp\">*</span><span class=\"n\">pi</span> <span class=\"bp\">+</span> <span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">Integers</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 212488457,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602019811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> If it doesn't yet exist, I think a lemma saying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">\\cos(x) = a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>y</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi><mo>:</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mn>2</mn><mi>n</mi><mi>π</mi><mo>±</mo><mi>x</mi><mo>:</mo><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{y \\in \\mathbb{R}:\\cos(y)=a\\}=\\{2n\\pi\\pm x:n\\in\\mathbb{Z}\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mclose\">}</span></span></span></span> would be very useful.</p>",
        "id": 212488599,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602019905
    },
    {
        "content": "<p>Or maybe, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\cos(x)=\\cos(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> implies, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>=</mo><mn>2</mn><mi>n</mi><mi>π</mi><mo>+</mo><mi>x</mi><mo>∨</mo><mi>y</mi><mo>=</mo><mn>2</mn><mi>n</mi><mi>π</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\exists n\\in\\mathbb{Z}, y= 2n\\pi + x \\lor y = 2n\\pi - x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.88333em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>",
        "id": 212488850,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602020048
    },
    {
        "content": "<p>It could even be a simp-lemma.</p>",
        "id": 212488885,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602020076
    },
    {
        "content": "<p>yeah... i'll try this problem and see what trig lemmas end up seeming necessary</p>",
        "id": 212488937,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602020107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Pi/near/212487101\">said</a>:</p>\n<blockquote>\n<p>How does wolframalpha work?  (Of course it's closed source, so one has to guess.)  It is so helpful and friendly (especially the paid version), maybe interacting with Lean can be like that someday!</p>\n</blockquote>\n<p>I'm under the impression it's a big Mathematica program, so it would more or less call <code>Solve</code> or <code>Reduce</code> when you ask for it to solve something.  It seems to also interpret the results it gets and automatically try other approaches, too.</p>\n<p>Given Stephen Wolfram's recent blog post, it would be cool if he might divert some of his company's resources into generating Lean proofs for different calculations <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.  I know Mathematica already has some basic support for formal proofs, so there's at least some interest there.  (Related: <a href=\"https://robertylewis.com/leanmm/\">https://robertylewis.com/leanmm/</a>)  Of course, depending on how it works, a downside might be lock-in into the non-free Mathematica platform...</p>\n<p>(Aside: something I discovered a few years ago is WolframAlpha would time out with the query \"10 random people.\" No errors -- it just seem to think hard about this very difficult problem for a few minutes (with a pro account) then give up.  They seem to have fixed it in the last year, but it doesn't seem to be using a uniform distribution because it is completely biased towards famous people.)</p>",
        "id": 212491537,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602021659
    }
]