[
    {
        "content": "<p>If it's already somewhere, the keywords \"extension of scalars\" and \"complexification\" might be a good idea to add.</p>",
        "id": 222711359,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1610628237
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/triv_sq_zero_ext\">docs#triv_sq_zero_ext</a> close to what you're looking for?</p>",
        "id": 222711592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610628375
    },
    {
        "content": "<p>I don't think so, right?  Juho wants <a href=\"https://en.wikipedia.org/wiki/Complexification\">https://en.wikipedia.org/wiki/Complexification</a></p>",
        "id": 222711684,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610628448
    },
    {
        "content": "<p>Mathlib does have the \"opposite\" (restrict scalars) direction, eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.normed_space.restrict_scalars_real\">docs#complex.normed_space.restrict_scalars_real</a>.  But I'm not sure about the \"extend scalars\" construction.</p>",
        "id": 222711877,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610628568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Perhaps this PR will do it, once merged? <a href=\"https://github.com/leanprover-community/mathlib/issues/4773\">#4773</a> </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Let `R` be a (semi)ring and `A` an `R`-algebra.\nIn this file we:\nDefine the `A`-module structure on `A ⊗ M`, for an `R`-module `M`.\n</code></pre></div>",
        "id": 222712586,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610628939
    },
    {
        "content": "<p>I think we almost have the structure today via the asymmetry of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.has_scalar'/src\">src#tensor_product.has_scalar'</a>.</p>",
        "id": 222712764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610629049
    },
    {
        "content": "<p>Just tested - if you remove the unused typeclass arguments on that definition, then it provides a <code>has_scalar ℂ (ℂ ⊗[ℝ] V)</code>. I don't think the same can be said of the <code>semimodule</code> instance, so bits of that PR are probably still warranted.</p>",
        "id": 222713461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610629436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'd like to use extension of scalars for some of my work. How about I adopt <a href=\"https://github.com/leanprover-community/mathlib/issues/4773\">#4773</a>?</p>",
        "id": 239769817,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1621611245
    },
    {
        "content": "<p>Sounds good to me - last time I touched it was to remove some duplicate lemmas, but I guess I forgot to clean-up the places those duplicates were being used, hence the CI failures</p>",
        "id": 239774042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621612878
    },
    {
        "content": "<p>Yeah it's nearly working for me locally now. I'll push up once I've got it building and then take a closer look at what it does.</p>",
        "id": 239774207,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1621612943
    }
]