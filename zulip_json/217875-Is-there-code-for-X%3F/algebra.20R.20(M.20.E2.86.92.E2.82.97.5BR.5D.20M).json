[
    {
        "content": "<p>Does this instance exist anywhere? If not, which file would it belong in?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">linear_map</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_def'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.smul_mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">algebra.mul_smul_comm</span><span class=\"o\">,</span> <span class=\"n\">algebra.smul_mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span><span class=\"n\">linear_map.semimodule</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">linear_map</span>\n</code></pre></div>",
        "id": 217034977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605634136
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.endomorphism_algebra\">docs#module.endomorphism_algebra</a></p>",
        "id": 217035205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605634225
    },
    {
        "content": "<p>Although in my defense, the naming is inconsistent wrt <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.endomorphism_semiring\">docs#linear_map.endomorphism_semiring</a></p>",
        "id": 217036552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605634838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, you added the <code>algebra</code> this way back in <a href=\"https://github.com/leanprover-community/mathlib/issues/1618\">#1618</a>, while the <code>ring</code> predates it from <a href=\"https://github.com/leanprover-community/mathlib/issues/456\">#456</a> (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>) - do you have a preference between the names? It would be good to make them consistent.</p>",
        "id": 217037182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605635157
    },
    {
        "content": "<p>Well obviously I prefer the naming I introduced <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 217057787,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1605644874
    },
    {
        "content": "<p>More seriously, either system seems fine and I agree we should be consistent.</p>",
        "id": 217057875,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1605644908
    },
    {
        "content": "<p>I would say that \"endomorphism algebra\" is more common in the maths literature</p>",
        "id": 217058981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605645438
    },
    {
        "content": "<p>Certainly much more than \"endomorphism semiring\"</p>",
        "id": 217059325,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605645601
    },
    {
        "content": "<p>Normally we don't care that much about instance names anyways</p>",
        "id": 217060167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605645965
    },
    {
        "content": "<p>That's a good point, instance names don't usually matter. In my case, it was a case of \"I know this exists somewhere, but I don't know where to find it\".</p>",
        "id": 217066199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605648839
    },
    {
        "content": "<p>but I'm actually not sure what inconsistency you mean, is it the namespace?</p>",
        "id": 217066563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605649040
    },
    {
        "content": "<p>It seems to me that <code>endomorphism_algebra</code> is an instance of <code>algebra</code> and <code>endomorphism_semiring</code> is an instance of <code>semiring</code></p>",
        "id": 217066618,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605649076
    },
    {
        "content": "<p>Yes, the namespaces don't match, that was my point.</p>",
        "id": 217071569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605651641
    },
    {
        "content": "<p>I think it makes sense for these to be in the <code>linear_map</code> namespace</p>",
        "id": 217082619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605659706
    },
    {
        "content": "<p>I guess the other name to consider consistency with here is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End\">docs#module.End</a></p>",
        "id": 217107314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605688273
    },
    {
        "content": "<p>So perhaps <code>module.End.semiring</code> and <code>module.End.algebra</code>?</p>",
        "id": 217107344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605688317
    },
    {
        "content": "<p>that would suggest these are instances for <code>End</code>, which they are not</p>",
        "id": 217123203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605699243
    },
    {
        "content": "<p>I don't understand why we care about the namespaces of instances... surely it's just whatever namespace was in effect when the instance was declared</p>",
        "id": 217123270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605699284
    },
    {
        "content": "<p>Put differently: what's the original problem here? Is it that it can be hard to find out what instances exist for something because they could be defined anywhere (I agree)? If so then let's focus on that</p>",
        "id": 217123765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605699680
    },
    {
        "content": "<p>You can still go to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a>, click on <em>instances</em> and search there. It's a long list in this case, but not that long, and you can search for endomorphism.</p>",
        "id": 217125790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605701144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/algebra.20R.20(M.20.E2.86.92.E2.82.97.5BR.5D.20M)/near/217123203\">said</a>:</p>\n<blockquote>\n<p>that would suggest these are instances for <code>End</code>, which they are not</p>\n</blockquote>\n<p>Given <code>End</code> is an <code>abbreviation</code>, doesn't that mean these _are_ instances for <code>End</code>?</p>",
        "id": 217127269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605702104
    },
    {
        "content": "<p>Oh I see, the documentation doesn't show <code>abbreviation</code>s.</p>",
        "id": 217127406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605702178
    },
    {
        "content": "<p>In this particular case, the confusion came from the docstring for <code>End</code> indicating the presence of an instance that I couldn't find</p>",
        "id": 217127559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605702261
    },
    {
        "content": "<p>But in general it's hard - if I'm looking for whether a type supports multiplication, I need to scan for <code>semiring</code>, <code>distrib</code>, <code>monoid</code>, ... instances - expanding <code>has_mul</code> is not going to help me much.</p>",
        "id": 217127646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605702332
    },
    {
        "content": "<p>I recall there was some tactic that was written (by me?) to collect all the typeclasses on a type</p>",
        "id": 217127763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605702394
    },
    {
        "content": "<p>It would be great if that tactic could be executed by doc-gen</p>",
        "id": 217127939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605702497
    },
    {
        "content": "<p>I found this in my mile long <code>test.lean</code> file, so it is probably on zulip somewhere</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">env_fold</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">get_env</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e.fold</span> <span class=\"o\">((</span><span class=\"n\">return</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">interaction_monad.result.cases_on</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">result.exception</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">interaction_monad.monad</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_all_classes</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.reverse</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">env_fold</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">mcond</span> <span class=\"o\">(</span><span class=\"n\">is_class</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">d.to_name</span> <span class=\"o\">(</span><span class=\"n\">level.param</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">d.univ_params</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">d.to_name</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list_instances</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">get_all_classes</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list.mfoldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n    <span class=\"n\">mk_instance</span> <span class=\"n\">e'</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">.</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interactive.list_instances</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_expr</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list_instances</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list.mmap'</span> <span class=\"n\">trace</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">list_instances</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">list_instances</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">trivial</span><span class=\"o\">}</span>\n<span class=\"c1\">-- add_semigroup (with_bot ℕ)</span>\n<span class=\"c1\">-- inhabited (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_sup_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- add_monoid (with_bot ℕ)</span>\n<span class=\"c1\">-- has_well_founded (with_bot ℕ)</span>\n<span class=\"c1\">-- has_lt (with_bot ℕ)</span>\n<span class=\"c1\">-- has_to_tactic_format (with_bot ℕ)</span>\n<span class=\"c1\">-- lattice (with_bot ℕ)</span>\n<span class=\"c1\">-- has_sup (with_bot ℕ)</span>\n<span class=\"c1\">-- ordered_add_comm_monoid (with_bot ℕ)</span>\n<span class=\"c1\">-- has_to_format (with_bot ℕ)</span>\n<span class=\"c1\">-- has_one (with_bot ℕ)</span>\n<span class=\"c1\">-- distrib_lattice (with_bot ℕ)</span>\n<span class=\"c1\">-- preorder (with_bot ℕ)</span>\n<span class=\"c1\">-- add_comm_monoid (with_bot ℕ)</span>\n<span class=\"c1\">-- add_comm_semigroup (with_bot ℕ)</span>\n<span class=\"c1\">-- has_zero (with_bot ℕ)</span>\n<span class=\"c1\">-- has_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- has_sizeof (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_inf (with_bot ℕ)</span>\n<span class=\"c1\">-- reflected (with_bot ℕ)</span>\n<span class=\"c1\">-- has_le (with_bot ℕ)</span>\n<span class=\"c1\">-- nonempty (with_bot ℕ)</span>\n<span class=\"c1\">-- linear_order (with_bot ℕ)</span>\n<span class=\"c1\">-- decidable_linear_order (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_inf_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- has_add (with_bot ℕ)</span>\n<span class=\"c1\">-- semilattice_sup (with_bot ℕ)</span>\n<span class=\"c1\">-- has_inf (with_bot ℕ)</span>\n<span class=\"c1\">-- order_bot (with_bot ℕ)</span>\n<span class=\"c1\">-- partial_order (with_bot ℕ)</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 217128353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605702799
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/with_bot/near/196835021\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/with_bot/near/196835021</a></p>",
        "id": 217128458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605702858
    }
]