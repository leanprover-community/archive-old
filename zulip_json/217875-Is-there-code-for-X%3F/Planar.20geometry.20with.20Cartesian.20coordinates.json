[
    {
        "content": "<p>I would like an implementation of <code>ℝ^2</code> with the following properties:</p>\n<p>(1) the implementation is already in mathlib,</p>\n<p>(2) it is possible to specify explicit coordinates of certain members of <code>ℝ^2</code> (e.g., using numbers from the rationals adjoin sqrt(2) and sqrt(3)), and</p>\n<p>(3) there is an implementation of the euclidian norm for <code>ℝ^2</code> such that</p>\n<p>(3a) the obvious lemmas like triangle inequality are already in mathlib,</p>\n<p>(3b) it is possible to interact with the square of the norm as a polynomial of the vector coordinates, and</p>\n<p>(3c) it is possible to evaluate the norm given explicit coordinates of a member of <code>ℝ^2</code>.</p>\n<p>I initially thought that I should use <code>euclidean_space ℝ (fin 2)</code>, but I don’t know how to do (2), (3b), or (3c). As an aside, while attempting to resolve (3b) for this implementation of <code>ℝ^2</code>, I quickly got stuck at the goal</p>\n<p><code>(finset.univ.sum (λ (i : fin 2), |x i| ^ 2) ^ (1 / 2)) ^ 2 = x 0 ^ 2 + x 1 ^ 2</code></p>\n<p>I would assume that <code>data.real.sqrt</code> is relevant, but apparently <code>a ^ (1 / 2)</code> is not the same thing as <code>real.sqrt a</code>.</p>\n<p>While at LftCM, I noticed folks were using the notation <code>![2,3]</code> for the vector in <code>ℝ^2</code> with coordinates 2 and 3, which I suspect will eventually satisfy (2) for me. I <code>#check</code>'d, and <code>![2,3]</code> is a member of <code>fin 1.succ → ℕ</code>, so maybe there's some coercion in my future. I tried putting fractions in for coordinates, but it also thinks that <code>1/2</code> is in <code>ℕ</code>. (?!)</p>\n<p>Any help would be greatly appreciated!</p>",
        "id": 289849288,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658008248
    },
    {
        "content": "<p>I'm not sure it's an agreed upon spelling, but you can use <code>(pi_Lp.equiv 2 (λ _, ℝ)).symm ![x, y]</code> to get a term of the right type (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.equiv\">docs#pi_Lp.equiv</a>)</p>",
        "id": 289849736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658009001
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space.norm_eq\">docs#euclidean_space.norm_eq</a> should help with 3b</p>",
        "id": 289849816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658009131
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be useful if you want help with the goal you mentioned, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqrt_eq_rpow\">docs#real.sqrt_eq_rpow</a> might help</p>",
        "id": 289849821,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1658009146
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_nat_inv_pow_nat\">docs#real.rpow_nat_inv_pow_nat</a></p>",
        "id": 289850099,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1658009590
    },
    {
        "content": "<p>I'm at the point where I'm fighting with an implementation of sum:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pythagoras</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span> <span class=\"n\">x</span> <span class=\"bp\">∥^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">norm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.sqrt_eq_rpow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real.sq_sqrt</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span> <span class=\"n\">sq_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span> <span class=\"n\">sq_abs</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Ideas?</p>",
        "id": 289850341,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658009962
    },
    {
        "content": "<p><code>unfold</code> is usually a wrong turn</p>",
        "id": 289850349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658009987
    },
    {
        "content": "<p>The lemma I suggest above should be better</p>",
        "id": 289850400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658010012
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_zero\">docs#fin.sum_univ_zero</a></p>",
        "id": 289850405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658010025
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_fin_two\">docs#fin.sum_fin_two</a> is better than Yaël's suggestion; assuming it exists</p>",
        "id": 289850414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658010040
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_two\">docs#fin.sum_univ_two</a></p>",
        "id": 289850426,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658010069
    },
    {
        "content": "<p>Ah, very nice - thanks!</p>",
        "id": 289850519,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658010237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Planar.20geometry.20with.20Cartesian.20coordinates/near/289849736\">said</a>:</p>\n<blockquote>\n<p>I'm not sure it's an agreed upon spelling, but you can use <code>(pi_Lp.equiv 2 (λ _, ℝ)).symm ![x, y]</code> to get a term of the right type (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.equiv\">docs#pi_Lp.equiv</a>)</p>\n</blockquote>\n<p>I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and got this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Reading the documentation, I <em>think</em> <code>pi_Lp.equiv</code> is supposed to map members of <code>fin(2) → ℝ</code> to members of <code>ℝ × ℝ</code>, but I can't say for sure. And I'm still not sure how to force <code>![2,3]</code> to treat 2 and 3 as real numbers. I looked, and I can't find the obvious coercion map.</p>",
        "id": 289876164,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658052413
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Work?</p>",
        "id": 289876318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658052719
    },
    {
        "content": "<p>No, I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 289876368,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658052761
    },
    {
        "content": "<blockquote>\n<p>And I'm still not sure how to force <code>![2,3]</code> to treat 2 and 3 as real numbers.</p>\n</blockquote>\n<p>No coercion needed; just give lean a hint that's the type you want, with <code>![(1 : ℝ), 2]</code> or <code>(![1, 2] : fin 2 → ℝ)</code></p>",
        "id": 289876393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658052828
    },
    {
        "content": "<p>Ouch, that's an annoying error. I think if you combine my previous message with that suggestion then the problem goes away, but that's certainly not ideal</p>",
        "id": 289876447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658052896
    },
    {
        "content": "<p>Ah - yes, <code>(pi_Lp.equiv 2 (λ _ : fin 2, ℝ)).symm ![(2:ℝ),(3:ℝ)]</code> does not return an error.</p>",
        "id": 289876608,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658053139
    },
    {
        "content": "<p>But when I <code>#check</code>, I don't understand what I see:</p>\n<p><code>⇑((pi_Lp.equiv 2 (λ (_x : fin 2), ℝ)).symm) ![2, 3] : pi_Lp 2 (λ (_x : fin 2), ℝ)</code></p>\n<p>I think I'm hoping for a member of <code>euclidean_space ℝ (fin 2)</code>.</p>",
        "id": 289876772,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658053408
    },
    {
        "content": "<p>One is an alias of the other</p>",
        "id": 289876824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658053474
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space/src\">src#euclidean_space</a></p>",
        "id": 289876834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658053485
    },
    {
        "content": "<p>Because it's <code>reducible</code>, lean will treat those two things as the same</p>",
        "id": 289876911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658053572
    },
    {
        "content": "<p>This is absolutely a pain point though</p>",
        "id": 289876925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658053606
    },
    {
        "content": "<p>Ah, so maybe the point is encoded as <code>⇑((pi_Lp.equiv 2 (λ (_x : fin 2), ℝ)).symm) ![2, 3]</code> and it resides in the type <code>pi_Lp 2 (λ (_x : fin 2), ℝ</code>, which is regarded as the same thing as <code>euclidean_space ℝ (fin 2)</code>?</p>",
        "id": 289876939,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658053644
    },
    {
        "content": "<p>(I'm just trying to understand.)</p>",
        "id": 289876998,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658053712
    },
    {
        "content": "<p>I was hoping that would do the trick, but then I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">v1</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)]</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">v2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)]</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">∥</span> <span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span> <span class=\"bp\">∥</span>\n</code></pre></div>\n<p>and got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">classical.choice'</span>\n</code></pre></div>",
        "id": 289877249,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054161
    },
    {
        "content": "<p>Unfortunately there are multiple notions of \"the same thing\" here</p>",
        "id": 289877290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054166
    },
    {
        "content": "<p>But your summary is largely accurate</p>",
        "id": 289877297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054192
    },
    {
        "content": "<p>Yes, your problem is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.normed_group\">docs#real.normed_group</a> is <code>noncomputable</code>, because it requires determining whether a real number is positive or negative</p>",
        "id": 289877309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054221
    },
    {
        "content": "<p>So is it not possible to evaluate the norm given explicit coordinates of a member of ℝ^2? Or do I need to pass to another encoding for that?</p>",
        "id": 289877393,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054326
    },
    {
        "content": "<p>Also, your link to real.has_norm breaks for me.</p>",
        "id": 289877407,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054377
    },
    {
        "content": "<p>What does it mean to evaluate a real? Do you mean compute a decimal expansion?</p>",
        "id": 289877472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054463
    },
    {
        "content": "<p>Note that even this doesn't do anything useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289877477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054474
    },
    {
        "content": "<p>I would like to compute norms of vectors with entries in the rationals adjoint sqrt(2) and sqrt(3), say.</p>",
        "id": 289877533,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054533
    },
    {
        "content": "<p>Do I need to restrict to the smaller field somehow?</p>",
        "id": 289877607,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054645
    },
    {
        "content": "<p>Haha, I just tried your example. That internal representation is nuts.</p>",
        "id": 289877630,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054714
    },
    {
        "content": "<p>Here's a way to see the representation more clearly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cauchy.unquot.1</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289877637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450749\">Dustin Mixon</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Planar.20geometry.20with.20Cartesian.20coordinates/near/289877533\">said</a>:</p>\n<blockquote>\n<p>I would like to compute norms of vectors with entries in the rationals adjoint sqrt(2) and sqrt(3), say.</p>\n</blockquote>\n<p>That sounds like it should be computable, but you're still stuck with the problem that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_norm.norm\">docs#has_norm.norm</a> produces a <code>real</code></p>",
        "id": 289877693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054784
    },
    {
        "content": "<p>So is the verdict that there is no implementation of ℝ^2 that satisfies the properties I initially outlined?</p>",
        "id": 289877766,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054886
    },
    {
        "content": "<p>It seems that (3c) is the stickler for <code>euclidean_space ℝ (fin 2)</code></p>",
        "id": 289877776,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054926
    },
    {
        "content": "<p>Well you first need an implementation of <code>ℝ</code> that satisfies those properties. There are models for computable reals, but computation is something mathlib doesn't care about</p>",
        "id": 289877779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054931
    },
    {
        "content": "<p>Are you sure you need \"computation\" in the sense of #eval?</p>",
        "id": 289877789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658054947
    },
    {
        "content": "<p>I'm interested in formalizing the proof that the chromatic number of the plane is at least 5. This requires me to compute thousands of norms of the sort I describe.</p>",
        "id": 289877802,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658054999
    },
    {
        "content": "<p>Computation via <code>#eval</code> plays no part in proofs in Lean</p>",
        "id": 289877867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658055081
    },
    {
        "content": "<p>In particular, I need to be able to convince Lean that certain pairs of points in ℝ^2 are unit distance apart.</p>",
        "id": 289877868,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658055088
    },
    {
        "content": "<p><code>#eval</code> runs code in an unverified VM</p>",
        "id": 289877876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658055111
    },
    {
        "content": "<p>This sounds like a tactic's job.</p>",
        "id": 289877926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658055141
    },
    {
        "content": "<p>Here's another sort of \"computation\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">v1</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)]</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">v2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- real.sqrt ((2 - 2⁻¹) ^ 2)</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">]</span> <span class=\"bp\">∥</span> <span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span> <span class=\"bp\">∥</span>\n</code></pre></div>",
        "id": 289877959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658055221
    },
    {
        "content": "<p>Or here's a proof that it \"computes\" to what you'd expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span> <span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span> <span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real.sqrt_sq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289878076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658055395
    },
    {
        "content": "<p>Ah, very nice! I think I can run with this. Thanks!</p>",
        "id": 289878099,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658055460
    },
    {
        "content": "<p>I suggest you first try to prove the chromatic number is at least 4 or even 3</p>",
        "id": 289878413,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658055955
    },
    {
        "content": "<p>You could almost \"compute\" with the rationals adjoined with your two square roots by using <code>mv_polynomial (fin 2) ℚ ⧸ ideal.span {(X 0)^2-2, (X 1)^2-3, X 0*X 1 - 6}</code>, but it turns out for less mathematical reasons polynomials are also noncomputable</p>",
        "id": 289878513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658056064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Planar.20geometry.20with.20Cartesian.20coordinates/near/289878413\">said</a>:</p>\n<blockquote>\n<p>I suggest you first try to prove the chromatic number is at least 4 or even 3</p>\n</blockquote>\n<p>Yeah, I'm working on showing not 2-colorable right now. :)</p>",
        "id": 289878595,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658056199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Planar.20geometry.20with.20Cartesian.20coordinates/near/289878513\">said</a>:</p>\n<blockquote>\n<p>You could almost \"compute\" with the rationals adjoined with your two square roots by using <code>mv_polynomial (fin 2) ℚ ⧸ ideal.span {(X 0)^2-2, (X 1)^2-3, X 0*X 1 - 6}</code>, but it turns out for less mathematical reasons polynomials are also noncomputable</p>\n</blockquote>\n<p>I wonder if <code>polyrith</code> might be useful here.</p>",
        "id": 289878647,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1658056257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Planar.20geometry.20with.20Cartesian.20coordinates/near/289877637\">said</a>:</p>\n<blockquote>\n<p>Here's a way to see the representation more clearly:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cauchy.unquot.1</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've PR'd something like this as <a href=\"https://github.com/leanprover-community/mathlib/pull/15575\">#15575</a>, so that #eval does something sensible when it's possible to</p>",
        "id": 290288968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658346435
    },
    {
        "content": "<p>There's no reason this should actually be correct, since you might well have a Cauchy sequence like 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, ... that represents 5 not 0</p>",
        "id": 290289823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658346845
    },
    {
        "content": "<p>Whoops, I guess I totally misread how cauchy sequences were defined. Thanks for the sanity check, I guess I'll just have it emit the sequence always</p>",
        "id": 290291652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658347717
    },
    {
        "content": "<p>Fixed, it now spits out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- real.of_cauchy (sorry /- 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, ... -/)</span>\n</code></pre></div>\n<p>which is still a lot better than the megabyte of output it used to produce</p>",
        "id": 290294639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658349221
    },
    {
        "content": "<p>Nice!</p>",
        "id": 290298305,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658350873
    },
    {
        "content": "<p>Does it work for irrationals too? Surely there's some irrational in mathlib with a computable Cauchy sequence...</p>",
        "id": 290298470,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658350935
    }
]