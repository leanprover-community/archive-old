[
    {
        "content": "<p>Do we have an operator for this, or am I expected to write it out in terms of intersection / union / difference?</p>",
        "id": 227804485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614273988
    },
    {
        "content": "<p>disjoin union is <code>\\sum</code> (on the type level), but that's the best you can do in general.</p>",
        "id": 227804622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274048
    },
    {
        "content": "<p>The usual notation for symmetric difference is something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">Œî</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\Delta B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">Œî</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, I think? I haven't seen that in lean.</p>",
        "id": 227804690,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274081
    },
    {
        "content": "<p>Even a method of <code>set</code> would be fine for me</p>",
        "id": 227804789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274113
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetric_difference</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚à™</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚à©</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`Œî`</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">symmetric_difference</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 227805077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274221
    },
    {
        "content": "<p>Whoops, used the wrong word in the title - it's specifically symmetric difference I'm after</p>",
        "id": 227805094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274226
    },
    {
        "content": "<p>i don't know how strongly this notation should bind though....</p>",
        "id": 227805180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274264
    },
    {
        "content": "<p>Would it be appropriate to add <code>set.symm_diff</code> (without notation) to mathlib?</p>",
        "id": 227805314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274321
    },
    {
        "content": "<p>If we add such a notation, it should probably be a type class and also be defined for <code>finset</code>.</p>",
        "id": 227805394,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614274339
    },
    {
        "content": "<p>I don't see why not. It's a common enough construction.</p>",
        "id": 227805402,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/symmetric.20difference.20.2F.20disjunctive.20union.20of.20sets/near/227805394\">said</a>:</p>\n<blockquote>\n<p>If we add such a notation, it should probably be a type class and also be defined for <code>finset</code>.</p>\n</blockquote>\n<p>Maybe even make it something in an arbitrary lattice?</p>",
        "id": 227805455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274367
    },
    {
        "content": "<p>Do we have sdiff on arbitrary lattices?</p>",
        "id": 227805497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274385
    },
    {
        "content": "<p>You can define it in terms of join and meet and complementation per <a href=\"https://en.wikipedia.org/wiki/Boolean_ring#Relation_to_Boolean_algebras\">https://en.wikipedia.org/wiki/Boolean_ring#Relation_to_Boolean_algebras</a></p>\n<p><strong>edit</strong>: Maybe symmetric difference only really makes sense on boolean algebras?</p>",
        "id": 227805677,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614274445
    },
    {
        "content": "<p>We have a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sdiff\">docs#has_sdiff</a> class which I've never seen used...</p>",
        "id": 227805710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274452
    },
    {
        "content": "<p>Oh <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_sdiff\">docs#set.has_sdiff</a> but this is just defined as <code>set.diff</code>!</p>",
        "id": 227805791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274486
    },
    {
        "content": "<p>You literally just used it!</p>",
        "id": 227805882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274512
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib_docs/find/boolean_algebra.to_has_sdiff\">docs#boolean_algebra.to_has_sdiff</a> is the answer to  my question</p>",
        "id": 227805905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274522
    },
    {
        "content": "<p>What is <code>sdiff</code>?</p>",
        "id": 227805952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274540
    },
    {
        "content": "<p><code>s</code> doesn't stand for <code>symmetric</code>?</p>",
        "id": 227805967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274546
    },
    {
        "content": "<p>I think <code>s</code> stands for \"set\"</p>",
        "id": 227806006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274562
    },
    {
        "content": "<p>Unicode seems to think that <code>‚äñ</code> is the appropriate symbol for symmetric difference</p>",
        "id": 227806379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614274687
    },
    {
        "content": "<p>We probably don't want to rely on <code>compl</code> because then we won't get it for finsets.</p>",
        "id": 227806959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614274917
    },
    {
        "content": "<p>When I search for \"symmetric\" in the unicode character picker, I get U+2206 ‚àÜ (which is of course different from Œî, or ùö´, or even ùûì).</p>",
        "id": 227806961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614274918
    },
    {
        "content": "<p>But if we only use <code>sdiff</code> and <code>sup</code> in the definition, that would be okay for finsets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetric_difference</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_sup</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_sdiff</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">‚äî</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`Œî`</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">symmetric_difference</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 227807259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614275014
    },
    {
        "content": "<p>My comment was in reference to <a href=\"https://www.fileformat.info/info/unicode/char/2296/index.htm\">https://www.fileformat.info/info/unicode/char/2296/index.htm</a>, which has \"symmetric difference\" in its index entries. Perhaps thats non-normative though.</p>",
        "id": 227808895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614275657
    },
    {
        "content": "<p>2206 looks to be \"increment\", as in what I would normally read as \"delta\"</p>",
        "id": 227809195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614275795
    },
    {
        "content": "<p>heh, I think I would read them all as delta</p>",
        "id": 227810568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614276366
    },
    {
        "content": "<p>unicode is nuts</p>",
        "id": 227810612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614276385
    },
    {
        "content": "<p>2206 also has \"symmetric difference (in set theory)\" in the comments</p>",
        "id": 227810895,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614276511
    },
    {
        "content": "<p>I don't feel strongly about the notation - a global <code>symm_diff</code> function with associated typeclass would be fine by me too</p>",
        "id": 227811476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614276775
    },
    {
        "content": "<p>I certainly think that whatever version of Delta is used, it should be localized notation. It's good to be reminded that the notation is being used.</p>",
        "id": 227812885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614277366
    },
    {
        "content": "<p>Do we want to use <code>sup</code> or <code>union</code>, given that the <code>s</code> in <code>sdiff</code> is <code>set</code>?</p>",
        "id": 227816145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614278737
    },
    {
        "content": "<p><code>sup</code> would let this work for boolean algebras, right?</p>",
        "id": 227818226,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614279532
    },
    {
        "content": "<p>True</p>",
        "id": 227818563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614279641
    },
    {
        "content": "<p>This is the addition which, together with multiplication = intersection, gives us the ring structure on <code>set X</code> related to filters I guess.</p>",
        "id": 227837548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614286678
    },
    {
        "content": "<p>It's the addition in boolean rings. Boolean rings and Stone's representation theorem would be nice projects...</p>",
        "id": 227839767,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614287554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/symmetric.20difference.20.2F.20disjunctive.20union.20of.20sets/near/227807259\">said</a>:</p>\n<blockquote>\n<p>But if we only use <code>sdiff</code> and <code>sup</code> in the definition, that would be okay for finsets:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetric_difference</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_sup</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_sdiff</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">‚äî</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`Œî`</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">symmetric_difference</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I used this notion as part of the proof in <a href=\"https://github.com/leanprover-community/mathlib/blob/e8c8ce914f4fbf23bfe25b4ae5083bdd8b6642fe/src/combinatorics/colex.lean#L164\">https://github.com/leanprover-community/mathlib/blob/e8c8ce914f4fbf23bfe25b4ae5083bdd8b6642fe/src/combinatorics/colex.lean#L164</a>, and I'm pretty sure for a bunch of other things way back when I did kruskal-katona</p>",
        "id": 227857163,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614295728
    },
    {
        "content": "<p>I have some code now proving the equivalence between boolean algebras and boolean rings. The most annoying part, perhaps not surprisingly, was proving that the symmetric difference is associative. I'll try to break this up into PRs this weekend.</p>",
        "id": 228027161,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614394317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Do you have a branch in progress where you're using <code>symmetric_difference</code>? I'm thinking of adding it in a PR soon in the following form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The symmetric difference of a structure with `‚äî` and `\\` is `(A \\ B) ‚äî (B \\ A)`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">symm_diff</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_sup</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_sdiff</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">‚äî</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">Œî</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">symm_diff</span>\n</code></pre></div>",
        "id": 228077294,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614453320
    },
    {
        "content": "<p>No, I don't</p>",
        "id": 228078866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614455363
    },
    {
        "content": "<p>Feel free to add it though</p>",
        "id": 228078867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614455371
    },
    {
        "content": "<p>(I have one line of a translation of some isabelle code that would use it, but that's it)</p>",
        "id": 228078935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614455424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/symmetric.20difference.20.2F.20disjunctive.20union.20of.20sets/near/227805497\">said</a>:</p>\n<blockquote>\n<p>Do we have sdiff on arbitrary lattices?</p>\n</blockquote>\n<p>Perhaps we should add a comment somewhere saying that <code>sdiff</code> means set difference, this certainly isn't the first time this confusion has happened</p>",
        "id": 228079161,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614455742
    },
    {
        "content": "<p>Good idea, I'll do that in one of my forthcoming PRs.</p>",
        "id": 228079216,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614455774
    },
    {
        "content": "<p>The PRs building up to the equivalence between Boolean algebras and Boolean rings are:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/6460\">#6460</a>: \"algebraic\" constructors for (semi-)lattices</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/6464\">#6464</a>: Boolean rings (also has boolean_ring.to_boolean_algebra)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/6469\">#6469</a>: symmetric difference operator</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/6476\">#6476</a>: boolean_algebra.to_boolean_ring</li>\n</ul>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6476\">#6476</a> should probably have an <code>equiv</code> but I wasn't able to figure out how to prove equality between structures / classes. I'll start another thread about it.</p>",
        "id": 228115411,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614500568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/symmetric.20difference.20.2F.20disjunctive.20union.20of.20sets/near/227839767\">said</a>:</p>\n<blockquote>\n<p>It's the addition in boolean rings. Boolean rings and Stone's representation theorem would be nice projects...</p>\n</blockquote>\n<p>Guess who is reading this a year later <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 276735289,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1648314033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/symmetric.20difference.20.2F.20disjunctive.20union.20of.20sets/near/227837548\">said</a>:</p>\n<blockquote>\n<p>This is the addition which, together with multiplication = intersection, gives us the ring structure on <code>set X</code> related to filters I guess.</p>\n</blockquote>\n<p>This is yet different from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.set_semiring\">docs#set.set_semiring</a>, right?</p>",
        "id": 276735383,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1648314156
    }
]