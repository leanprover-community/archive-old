[
    {
        "content": "<p>Does mathlib have the following? It seems like something basic that should be there, but I can't seem to find anything similar...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.const</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.products</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">has_coproducts_of_shape</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Some more code goes here...</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_right_adjoint</span> <span class=\"o\">((</span><span class=\"n\">evaluation</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">evaluation_adjunction</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 262642703,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637789596
    },
    {
        "content": "<p>(The <code>--some more code</code> part can be found here: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/evaluation_adjunction.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/evaluation_adjunction.lean</a> )</p>",
        "id": 262643023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637789844
    },
    {
        "content": "<p>I mostly want this because of the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mono_iff_app_mono</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mono</span> <span class=\"n\">η</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">η.app</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">right_adjoint_preserves_mono</span> <span class=\"o\">(</span><span class=\"n\">evaluation_adjunction</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">introsI</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat_trans.mono_app_of_mono</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262643524,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637790176
    }
]