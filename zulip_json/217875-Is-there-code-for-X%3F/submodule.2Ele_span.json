[
    {
        "content": "<p>Where is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">submodule.le_span</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 241490792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622781860
    },
    {
        "content": "<p>It's done for the coercion to <code>set</code>, and called <code>subset_span</code></p>",
        "id": 241492335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622783938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> probably because <code>\\le</code> on sets is not the simp normal form</p>",
        "id": 241492352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622783975
    },
    {
        "content": "<p>Oh! I'd sort of forgotten that about simp normal form. Maybe we should change that someday?</p>",
        "id": 241493063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622784844
    },
    {
        "content": "<p>I think that all the set notation (inter, union, subseteq, empty) should be replaced with lattice notation (inf, sup, le, bot) and mathematicians should just learn to live with it</p>",
        "id": 241500385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622792218
    },
    {
        "content": "<p>Does lean let us have <code>notation `∪` = @has_sup.sup (has_union.to_has_sup) _</code>, and if so does the pretty printer do the right thing (after removing the original notation)</p>",
        "id": 241500656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622792405
    },
    {
        "content": "<p>Yes that's exactly the sort of thing we should be thinking about -- <code>vector_space</code> as some completely transparent abbreviation for <code>module</code> and inter notation as just meaning inf. What I've never been clear about is then how to tell the pretty printer when to use what.</p>",
        "id": 241500746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622792493
    },
    {
        "content": "<p>The perfect solution would be to allow <code>vector_space</code> as a different term to <code>module</code> but make it super-ultra-reducible in the sense that module rewrites will work for vector spaces and yet the pretty printer will still print modules as modules and vector spaces as vector spaces. I'm not sure this is possible though</p>",
        "id": 241501279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622792824
    },
    {
        "content": "<p>This is why I've reluctantly come to the conclusion that sometimes mathematicians will have to lump it because educating a mathematician about inf instead of inter seems to be easier than getting lean to seamlessly conflate the two</p>",
        "id": 241501396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622792892
    },
    {
        "content": "<p>The pretty printer would need to do type-class inference, right?</p>",
        "id": 241503276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622794222
    },
    {
        "content": "<p>(Talking about ∩ as notation for ⊓.) In Lean 4 this would be easy to do.</p>\n<blockquote>\n<p>The pretty printer would need to do type-class inference, right?</p>\n</blockquote>\n<p>You just need to check if the typeclass instance is defeq to has_union.to_has_sup.  No synthesis needed.</p>",
        "id": 241503487,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622794374
    },
    {
        "content": "<p>For intersection that would work. But for <code>vector_space</code> the pretty printer needs to figure out whether the base ring of the module is a field.</p>",
        "id": 241530730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622811345
    },
    {
        "content": "<p>Notation can probably figure it out if the base ring is <code>field.to_comm_ring.to_ring.to_semiring</code></p>",
        "id": 241532360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812248
    },
    {
        "content": "<p>But if you match against that, then you'll miss <code>field.to_comm_ring.to_comm_semiring.to_semiring</code></p>",
        "id": 241532382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812263
    },
    {
        "content": "<p>Which I think was probably why <code>vector_space</code> / <code>module</code> caused problems in the first place, as it forced typeclass resolution to go down a path it wouldn't necessarily have chosen for <code>semimodule</code></p>",
        "id": 241532448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812309
    },
    {
        "content": "<p>But couldn't we just have <code>vector_space</code> mean <code>module</code> regardless of the scalars?</p>",
        "id": 241533310,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622812787
    },
    {
        "content": "<p>There would be occasional surprise at this divergence from the standard practice but it might be the right compromise.</p>",
        "id": 241533470,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622812852
    },
    {
        "content": "<p>Are you suggesting renaming <code>module</code> to <code>vector_space</code>?</p>",
        "id": 241533539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812890
    },
    {
        "content": "<p>Because having two names for the same thing seems like it would just be confusing, especially when those two names mean different things mathematically</p>",
        "id": 241533558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622812901
    },
    {
        "content": "<p>I was suggesting two names for the same thing.</p>",
        "id": 241533590,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622812914
    },
    {
        "content": "<p>If we felt that was too likely to be confusing, presumably we could only do this within a locale.</p>",
        "id": 241533983,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622813086
    },
    {
        "content": "<p>(which would not remove possibility for confusion, but might reduce it )</p>",
        "id": 241534095,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622813136
    },
    {
        "content": "<p>My impression is that right now after the vector space purge we can either have everything being a module or everything being a vector space. But thinking about it maybe that's fine, because delicate maths undergraduates who learn about vector spaces on day 1 and don't learn about modules until year 3 can just have everything as a vector space, and those that know about modules will be fine calling vector spaces modules anyway.</p>",
        "id": 241534247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622813195
    }
]