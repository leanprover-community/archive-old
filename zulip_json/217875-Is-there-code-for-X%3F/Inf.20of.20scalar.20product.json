[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK₁</span> <span class=\"o\">:</span> <span class=\"n\">K.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK₂</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Inf</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or anything to this effect?</p>",
        "id": 234387098,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618342416
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_cInf_of_continuous_at_of_monotone\">docs#map_cInf_of_continuous_at_of_monotone</a></p>",
        "id": 234392509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618344543
    },
    {
        "content": "<p>Thanks Yury!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hθ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bd</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"bp\">•</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"n\">Inf</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">θ</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">monotone_mul_left_of_nonneg</span> <span class=\"n\">hθ</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">map_cInf_of_continuous_at_of_monotone</span> <span class=\"o\">(</span><span class=\"n\">continuous_mul_left</span> <span class=\"n\">θ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span>\n                <span class=\"o\">(</span><span class=\"n\">monotone_mul_left_of_nonneg</span> <span class=\"n\">hθ</span><span class=\"o\">)</span> <span class=\"n\">hK</span> <span class=\"n\">bd</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.image_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does what I wanted</p>",
        "id": 234413926,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618354255
    }
]