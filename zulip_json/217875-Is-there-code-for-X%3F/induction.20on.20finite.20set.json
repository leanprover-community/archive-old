[
    {
        "content": "<p>Is there a version <code>set.finite.induction_on</code> with the added assumption in the inductive hypothesis that it is a subset of the original finite set. I basically want <code>finset.induction_on'</code> but without the <code>decidable_eq</code> part.</p>",
        "id": 289817968,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657961998
    },
    {
        "content": "<p>You can use <code>classical</code> before.</p>",
        "id": 289818690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657963042
    },
    {
        "content": "<p><code>finset.induction_on'</code> can easily be converted to <code>set.finite.induction_on'</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.induction_on'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.finite</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">h₁</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">S</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finset.induction_on'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.finite_to_set</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">h.to_finset</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">set.finite_empty</span><span class=\"o\">),</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h₃</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span> <span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">h₂</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">finset.finite_to_set</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.finite_of_fintype</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">set.finite.mem_to_finset</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">set.subset_to_finset_iff</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₄</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">finset.mem_coe.mp</span> <span class=\"n\">h₅</span><span class=\"o\">)</span> <span class=\"n\">h₆</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finite.coe_to_finset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289819023,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657963570
    },
    {
        "content": "<p>Thanks, although that doesn't look easy to me.</p>",
        "id": 289831041,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657982125
    },
    {
        "content": "<p>It's easier to start from <code>set.finite.induction_on</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finite.induction_on'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">set.finite.induction_on</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">set.subset.refl</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.insert_subset</span> <span class=\"n\">at</span> <span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₆</span> <span class=\"k\">with</span> <span class=\"n\">h₆</span> <span class=\"n\">h₇</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">h₆</span> <span class=\"n\">h₇</span> <span class=\"n\">h₃</span> <span class=\"o\">(</span><span class=\"n\">h₅</span> <span class=\"n\">h₇</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289831506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657982749
    },
    {
        "content": "<p>Right, I should have used <code>{p : Π (s : set α), Prop}</code> instead. The proof is now simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.induction_on'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">finset.induction_on'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical.dec_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">h.to_finset</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span> <span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">h₂</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h₆</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">set.finite.mem_to_finset</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set.subset_to_finset_iff</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289832050,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657983558
    },
    {
        "content": "<p>Do you mind if I make a pull request to commit that to mathlib?</p>",
        "id": 289844451,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1658000753
    },
    {
        "content": "<p>I don't mind and I guess Reid doesn't mind either (whichever proof you decide to choose).</p>",
        "id": 289849098,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658007945
    },
    {
        "content": "<p><code>Π (s : set α), Prop</code> is usually written <code>set α → Prop</code>.</p>",
        "id": 289862871,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658030972
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/15444\">https://github.com/leanprover-community/mathlib/pull/15444</a></p>",
        "id": 289870779,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1658044401
    }
]