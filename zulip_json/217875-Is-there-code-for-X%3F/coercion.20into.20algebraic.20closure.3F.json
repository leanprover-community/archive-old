[
    {
        "content": "<p>The following gives me an error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>results in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is this really not there, or am I missing something?</p>",
        "id": 281556259,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651951154
    },
    {
        "content": "<p>Trying this as a work-around:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fbar</span> <span class=\"o\">:=</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">FtoFbar</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→+*</span> <span class=\"n\">Fbar</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure.of_step</span> <span class=\"n\">F</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure.to_step_zero</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">FtoFbar</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_zero</span> <span class=\"n\">Fbar</span>\n</code></pre></div>\n<p>which leaves me seriously puzzled...</p>",
        "id": 281556913,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952094
    },
    {
        "content": "<p>For the second issue, try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive field]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fbar</span> <span class=\"o\">:=</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 281556979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651952167
    },
    {
        "content": "<p>...since there should be a <code>field</code> instance on <code>algebraic_closure F</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_closure.field\">docs#algebraic_closure.field</a></p>",
        "id": 281556987,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952191
    },
    {
        "content": "<p>OK, this works, but why is it necessary?</p>",
        "id": 281557004,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952227
    },
    {
        "content": "<p>When you make a new definition, Lean doesn't automatically transport all instances.</p>",
        "id": 281557010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952242
    },
    {
        "content": "<p>This does not solve my original question, though.</p>",
        "id": 281557066,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952288
    },
    {
        "content": "<p>That's actually good. Otherwise you wouldn't be able to make copies of objects with different structures (such as a copy of the reals with the discrete topology, or a copy of a poset with the dual order, etc...)</p>",
        "id": 281557068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952294
    },
    {
        "content": "<p>So you could make <code>Fbar</code> a piece of <code>notation</code> and then everything should work. Or you use <code>derive</code> like Adam said.</p>",
        "id": 281557074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952321
    },
    {
        "content": "<p>My original <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> didn't have <em>that</em> problem, though.</p>",
        "id": 281557082,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952353
    },
    {
        "content": "<p>Is that coercion defined somewhere in mathlib?</p>",
        "id": 281557091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952385
    },
    {
        "content": "<p>That's the question, I guess.</p>",
        "id": 281557096,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952399
    },
    {
        "content": "<p>I didn't find it in <code>field_theory.is_alg_closed.algebraic_closure</code>, which is where I would expect it.</p>",
        "id": 281557141,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952421
    },
    {
        "content": "<p>I think nobody defined it.</p>",
        "id": 281557145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952437
    },
    {
        "content": "<p>(I did find the material for the clumsy workaround above.)</p>",
        "id": 281557151,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952451
    },
    {
        "content": "<p>Instead, I guess you can use <code>algebra_map</code>. But of course that's ~10 chars extra.</p>",
        "id": 281557155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952457
    },
    {
        "content": "<p>You could add a <code>has_coe</code> instance, if you want.</p>",
        "id": 281557166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952477
    },
    {
        "content": "<p>I think that would make sense.</p>",
        "id": 281557175,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952497
    },
    {
        "content": "<p>The benefit of <code>algebra_map</code> is that it's already a ring hom. So you get <code>map_zero</code> and friends for free.</p>",
        "id": 281557176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952499
    },
    {
        "content": "<p>Or we could revisit the suggestion to add notation for <code>algebra_map</code></p>",
        "id": 281557181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651952508
    },
    {
        "content": "<p>So I would write <code>(algebra_map F Fbar) a</code> instead of <code>a : Fbar</code>.</p>",
        "id": 281557228,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952545
    },
    {
        "content": "<p>That seems to work.</p>",
        "id": 281557249,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952603
    },
    {
        "content": "<p>However, as a mathematician, I would prefer to be able to write <code>a : Fbar</code> (and get the compatibility properties of the coercion w.r.t. the field structure automatically).</p>",
        "id": 281557300,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952648
    },
    {
        "content": "<p>If you are using it a lot, I think it makes sense to add notation for <code>(algebra_map F Fbar)</code>.</p>",
        "id": 281557304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651952658
    },
    {
        "content": "<p>Now I have a proof obligation for <code>function.injective ⇑(algebra_map F Fbar)</code> (I'm applying the coercion to an equality I want to prove). What is the best way of dealing with that?</p>",
        "id": 281557334,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952745
    },
    {
        "content": "<p>Ah, OK, <code>suggest</code> was successful for once... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 281557387,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/coercion.20into.20algebraic.20closure.3F/near/281557304\">said</a>:</p>\n<blockquote>\n<p>If you are using it a lot, I think it makes sense to add notation for <code>(algebra_map F Fbar)</code>.</p>\n</blockquote>\n<p>Not really at this point. I'm just using it within a part of one proof at the moment.<br>\n(I'm trying to do the Gauss sum proof for the second supplement to quadratic reciprocity.)</p>",
        "id": 281557453,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651952924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/coercion.20into.20algebraic.20closure.3F/near/281557181\">said</a>:</p>\n<blockquote>\n<p>Or we could revisit the suggestion to add notation for <code>algebra_map</code></p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/.22has.20canonical.20morphism.22.20class\">I agree, in fact the notation for <code>algebra_map</code> should be <code>↑</code>!</a></p>",
        "id": 281656638,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652087357
    }
]