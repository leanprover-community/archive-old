[
    {
        "content": "<p>The birthday theorem is one of the 100 theorems not in Lean. To include this in lean, would it be sufficient to show 365/365 x 364/365 x ... x 343/365 &lt; 1/2? In other theorem provers, the theorem is stated as follows. So it takes as input the number of people s=23 and the number of days in the year t=365, and then generically gives a function of s  and t, such that the inequality holds for those particular s and t.</p>\n<p>HOL: |- !s t. s HAS_SIZE 23 /\\ t HAS_SIZE 365<br>\n           ==&gt; 2 * CARD {f | f IN (s -&gt; t) /\\<br>\n                             ?x y. x IN s /\\ y IN s /\\ ~(x = y) /\\ f(x) = f(y)}<br>\n               &gt;= CARD (s -&gt; t)</p>\n<p>Isabelle:  assumes \"card S = 23\" \"card T = 365\"<br>\n  shows \"2 * card {f ∈ S→\\&lt;^sub&gt;E S T. ¬ inj_on f S} ≥ card (S →\\&lt;^sub&gt;E T)\"</p>\n<p>Mizar: let l := picks 23 (enumerate 365) in<br>\n  2 * length (filter collision l) &gt; length l.</p>",
        "id": 234270145,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1618291288
    },
    {
        "content": "<p>Personally, I would want to see it phrased in terms of probability theory.</p>",
        "id": 234270335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618291463
    },
    {
        "content": "<p>And mathlib doesn't have much in that direction, unfortunately.</p>",
        "id": 234270351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618291481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"397140\">@Hunter Monroe</span> Actually, I don't think it really has to be probability theory. But it should be a statement that is recognizably the Birthday problem, before any maths has been done.</p>",
        "id": 234273138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618293983
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">multiset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">likely_collision</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"n\">nodup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">birthday</span> <span class=\"o\">:</span> <span class=\"n\">likely_collision</span> <span class=\"o\">((</span><span class=\"n\">multiset.range</span> <span class=\"mi\">365</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset_len</span> <span class=\"mi\">23</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">multiset</span>\n</code></pre></div>",
        "id": 234273681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618294488
    },
    {
        "content": "<p>Or maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">likely_collision</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"n\">nodup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">nodup</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>",
        "id": 234273810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618294582
    },
    {
        "content": "<p>Hmm, it seems that <code>multiset.powerset_len</code> doesn't do what I thought it does.</p>",
        "id": 234275832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618296149
    },
    {
        "content": "<p>I think this version is at least math-correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector2</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">card</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">likely_collision</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.filter</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">l.to_list.nodup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">birthday</span> <span class=\"o\">:</span> <span class=\"n\">likely_collision</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"o\">)</span> <span class=\"mi\">23</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">likely_collision</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_vector</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_fin</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234277328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618297183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"401024\">@Matt Kempster</span> has also been working on this, and I think he's made a reasonable amount of progress</p>",
        "id": 234324017,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618320365
    },
    {
        "content": "<p>Yes I have, should I post what I have so far? It's very WIP but I think it's on the right track. It's not probability theory based at all - just counting numbers of injective functions from fin 23 to fin 365 and dividing by all functions from fun 23 to fin 365. This is basically how Metamath does it</p>",
        "id": 234335112,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1618324136
    },
    {
        "content": "<p>The value of <code>fintype.card (α ↪ β)</code> (for arbitrary <code>[fintype α] [fintype β]</code>) seems like it belongs in mathlib proper, with only the evaluation for <code>fin 23</code> and <code>fin 365</code> going in the mathlib archive. (The denominator is given by <code>fintype.card_fun</code>.)</p>",
        "id": 234421282,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1618358829
    },
    {
        "content": "<p>Yep, very on the same page there. I'll push to a branch soon (tomorrow if I find time), but my work is pretty messy so far. Look forward to input and advice!</p>",
        "id": 234442605,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1618377616
    },
    {
        "content": "<p>We would just need to show (finset.filter (λ (l : vector (fin n) k), l.to_list.nodup) finset.univ).card = n* (left hand side but with n-1, k-1)</p>",
        "id": 234719144,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1618507649
    },
    {
        "content": "<p>You can use <code>list.of_fn</code> to skip the vector</p>",
        "id": 234719393,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618507738
    },
    {
        "content": "<p>You can also probably use things about <code>powerset</code> to automatically get nodup subsets</p>",
        "id": 234719770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618507860
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_powerset_len\">docs#finset.card_powerset_len</a></p>",
        "id": 234719925,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618507922
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.powerset_len_eq_filter\">docs#finset.powerset_len_eq_filter</a></p>",
        "id": 234719996,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618507936
    },
    {
        "content": "<p>You could generalize to any <code>pi</code> fintype, via something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_pi\">docs#fintype.card_pi</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_fun\">docs#fintype.card_fun</a></p>",
        "id": 234720437,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618508107
    },
    {
        "content": "<p>Ah I see Joseph said this already</p>",
        "id": 234721885,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618508683
    },
    {
        "content": "<p>So I've got a nearly finished version, actually, and just thought I should search on Zulip to check if anyone else has done it, and saw this... Sorry Matt!</p>",
        "id": 235711847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619110678
    },
    {
        "content": "<p>well, if a bunch of people work on different problems eventually two people will work on the same problem <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 235711973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619110719
    },
    {
        "content": "<p>One thing that I found is that <code>norm_num</code> is slow at evaluating stuff like <code>365!/(365-23)!</code>, so I made this class to help; do people think it belongs in mathlib proper?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reverse_fac</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">reverse_fac</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 235711988,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619110727
    },
    {
        "content": "<p>(and basically one lemma guaranteeing that it truly is equal to n! / (n-k)!)</p>",
        "id": 235712112,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619110785
    },
    {
        "content": "<p>Yeah, if you write <code>365!/(365-23)!</code> that's what norm_num will evaluate</p>",
        "id": 235712279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619110826
    },
    {
        "content": "<p>if you want to evaluate the product of 23 terms instead of 365 you should use a function that evaluates that way</p>",
        "id": 235712379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619110855
    },
    {
        "content": "<p>this is what reverse_fac does^^ just asking whether it's worth putting in mathlib or just keep it in the archive file</p>",
        "id": 235712626,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619110930
    },
    {
        "content": "<p>isn't there already something like this?</p>",
        "id": 235713065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111066
    },
    {
        "content": "<p>they are called rising and falling factorials IIRC</p>",
        "id": 235713105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111083
    },
    {
        "content": "<p>Oh there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer\">docs#pochhammer</a> but it is only for polynomials</p>",
        "id": 235713277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111146
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_theory.polynomial.pochhammer\">docs#ring_theory.polynomial.pochhammer</a>, maybe? edit: sniped :b</p>",
        "id": 235713279,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619111147
    },
    {
        "content": "<p>i'll try retrofit it with the eval theorems it has there</p>",
        "id": 235713424,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619111190
    },
    {
        "content": "<p>because it ended up _not_ being trivial as expected and instead I ended up with this disaster:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eval_reverse_fac</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"n\">reverse_fac</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">!</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">!</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.div_self</span><span class=\"o\">],</span> <span class=\"n\">unfold</span> <span class=\"n\">reverse_fac</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">factorial_pos</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">reverse_fac</span><span class=\"o\">,</span> <span class=\"n\">factorial</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">succ_sub_succ_eq_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">eval_reverse_fac</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- at this point, we have two slightly different divisions. we fix them both</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel'</span> <span class=\"o\">(</span><span class=\"n\">factorial_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">factorial_dvd_factorial</span> <span class=\"o\">(</span><span class=\"n\">sub_le</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">},</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">!</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">!</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span>\n                                          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- If I don't put the `skip` it errors?! (`simp` won't do this on its own btw)</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rev_fac_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reverse_fac</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_rev_fac</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reverse_fac</span> <span class=\"mi\">0</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 235713507,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619111225
    },
    {
        "content": "<p>but yeah factorials API isn't super well-developed</p>",
        "id": 235713599,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619111263
    },
    {
        "content": "<p>Note that norm_num doesn't actually know how to compute factorials. It's just rewriting with the simp lemmas for factorial</p>",
        "id": 235714203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111499
    },
    {
        "content": "<p>if you use simp lemmas for <code>reverse_fac</code> it will be just as good</p>",
        "id": 235714286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111524
    },
    {
        "content": "<p>The reason your proof is a disaster is because you used <code>-</code> and <code>/</code> on <code>nat</code></p>",
        "id": 235714456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111604
    },
    {
        "content": "<p>you should rewrite the theorem to use <code>+</code> and <code>*</code></p>",
        "id": 235714485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111614
    },
    {
        "content": "<p>ahh, so instead I could do it as <code>(n + k)! = n! reverse_fac blah</code></p>",
        "id": 235714535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619111638
    },
    {
        "content": "<p>is it worth expressing the card as a division still or as this function? just thinking as it's going in mathlib</p>",
        "id": 235714802,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619111732
    },
    {
        "content": "<p>for the birthday problem itself you should use a division for presentation purposes</p>",
        "id": 235715321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111954
    },
    {
        "content": "<p>but once you have proven the lemma with <code>+</code> and <code>*</code> it's not hard to postprocess it to the <code>-</code> and <code>/</code> version</p>",
        "id": 235715382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111992
    },
    {
        "content": "<p>I mean for the <code>card_embedding</code> function that will be kind of like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_fun\">docs#fintype.card_fun</a></p>",
        "id": 235715643,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619112090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Birthday.20Problem/near/235711847\">said</a>:</p>\n<blockquote>\n<p>So I've got a nearly finished version, actually, and just thought I should search on Zulip to check if anyone else has done it, and saw this... Sorry Matt!</p>\n</blockquote>\n<p>No worries! I actually would say I was only ~30% done, and was starting to hit some major road blocks. I look forward to seeing your proof to compare &amp; contrast with my skeleton!</p>",
        "id": 235771739,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1619139603
    },
    {
        "content": "<p>It's done! The birthday problem has now been reduced to a call to <code>norm_num</code> :D Cleaning up the code, PR incoming soon :)</p>",
        "id": 236064517,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619356544
    },
    {
        "content": "<p>Hmm, how to make Lean give up on code versions that I've already overwritten? For example, say I'm editing a big file, and I add an import, it'll start screaming at me that <code>data.finset.basi</code> doesn't exist, whilst of course I had typed <code>data.finset.basic</code> and it was just sort of delayed and doing old code, before trying again</p>",
        "id": 236068933,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619360641
    },
    {
        "content": "<p>Restart vs code?</p>",
        "id": 236069149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619360861
    },
    {
        "content": "<p>hmm, wasn't too helpful. I'll just let CI deal with it, I'm only copy-pasting stuff right now anyways</p>",
        "id": 236069582,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619361339
    },
    {
        "content": "<p>I changed stuff in <code>embedding.lean</code> and <code>fintype.lean</code> so I'm assuming it needs to recheck everything again, lol</p>",
        "id": 236069631,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619361368
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7363\">#7363</a>!</p>",
        "id": 236071332,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619362934
    },
    {
        "content": "<p>There's still a couple things to be done, but all the code itself is there ready to review; the other things are basically admin</p>",
        "id": 236071677,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619363068
    }
]