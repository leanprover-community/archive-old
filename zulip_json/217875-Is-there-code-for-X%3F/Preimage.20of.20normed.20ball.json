[
    {
        "content": "<p>Does this lemma already exist somewhere? I could not find it in <code>normed_group</code> and neither could <code>library_search</code>. If it does not exist what would be a good name?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">closed_ball_preimage</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"bp\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"bp\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">metric.closed_ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 277082303,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648601390
    },
    {
        "content": "<p>It seems very specialized to me, do you really need this very often?</p>",
        "id": 277102784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648624687
    },
    {
        "content": "<p>That's basically true by <code>refl</code> besides the <code>sub_zero</code>, right?</p>",
        "id": 277105126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648626235
    },
    {
        "content": "<p>Which direction do you think you need the lemma in? Currently the name is for the opposite direction to the statement</p>",
        "id": 277105260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648626300
    },
    {
        "content": "<p>You also need to use the fact that the distance is given by the norm.</p>",
        "id": 277105606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648626502
    },
    {
        "content": "<p>A direct proof would be: <code>unfold set.preimage,  simp_rw mem_closed_ball_zero_iff</code></p>",
        "id": 277105647,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648626529
    },
    {
        "content": "<p>I only need it once (for now), so I have to problem with using it inline. To avoid an xy-problem: I want to prove that <code>{y : F | ‚à•f y‚à• ‚â§ r}</code> is closed (for continuous <code>f</code>).</p>",
        "id": 277109709,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648628854
    },
    {
        "content": "<p>This is just \"closed balls are closed\" plus \"preimage of closed is closed\"</p>",
        "id": 277110414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648629174
    },
    {
        "content": "<p>Yes of course, but in Lean it needs some (trivial) rewrite first</p>",
        "id": 277111353,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648629687
    },
    {
        "content": "<p>I think you can avoid rewriting by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.norm\">docs#continuous.norm</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_closed_Iic\">docs#is_closed_Iic</a>, although it‚Äôs less mathematically satisfying</p>",
        "id": 277112781,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648630391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Preimage.20of.20normed.20ball/near/277109709\">said</a>:</p>\n<blockquote>\n<p>I only need it once (for now), so I have to problem with using it inline. To avoid an xy-problem: I want to prove that <code>{y : F | ‚à•f y‚à• ‚â§ r}</code> is closed (for continuous <code>f</code>).</p>\n</blockquote>\n<p>If <code>hf : continuous f</code>, then this is <code>is_closed_le hf.norm continuous_const</code>.</p>",
        "id": 277113908,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648630943
    }
]