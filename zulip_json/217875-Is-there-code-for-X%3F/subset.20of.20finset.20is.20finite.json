[
    {
        "content": "<p>Is something similar to this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">↑</span><span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212383104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601957627
    },
    {
        "content": "<p>I think if you use <code>set.finite</code> the machinery is there.</p>",
        "id": 212383691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601958429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> it might even fit on 1 line (-;</p>",
        "id": 212383699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601958445
    },
    {
        "content": "<p>More specifically, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.subset\">docs#set.finite.subset</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.to_finset\">docs#set.finite.to_finset</a></p>",
        "id": 212384300,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601959311
    },
    {
        "content": "<p>Oh, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.finite_to_set\">docs#finset.finite_to_set</a> to get the exact statement</p>",
        "id": 212384359,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601959348
    },
    {
        "content": "<p>There's also <code>set.to_finset</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fintype_subset_finset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">set.to_finset</span> <span class=\"n\">α</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">fintype_subset</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">fintype_subset_finset</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fintype_subset_finset</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212387866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601964274
    },
    {
        "content": "<p>Ugh, do I really have to combine three different mathlib lemmas to get such a simple thing!?</p>",
        "id": 212422507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601988779
    },
    {
        "content": "<p>Sign my petition at <a href=\"#narrow/stream/113488-general/topic/finiteness/near/206179081\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/finiteness/near/206179081</a></p>",
        "id": 212424360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601989615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/subset.20of.20finset.20is.20finite/near/212424360\">said</a>:</p>\n<blockquote>\n<p>Sign my petition at <a href=\"#narrow/stream/113488-general/topic/finiteness/near/206179081\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/finiteness/near/206179081</a></p>\n</blockquote>\n<p>Looks like I already did.</p>",
        "id": 212425011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601989945
    },
    {
        "content": "<p>Touché</p>",
        "id": 212425445,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601990159
    }
]