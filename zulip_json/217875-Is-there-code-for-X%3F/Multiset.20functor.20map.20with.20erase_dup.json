[
    {
        "content": "<p>This should be pretty obvious, but I can't do it. Any idea?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.multiset.functor</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">multiset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_comm_applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiset.to_finset_fmap_traverse_erase_dup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_finset</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">m.erase_dup</span> <span class=\"bp\">=</span> <span class=\"n\">to_finset</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 266509901,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640965172
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> because that's for <a href=\"https://github.com/leanprover-community/mathlib/pull/10980\">#10980</a></p>",
        "id": 266509906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640965190
    },
    {
        "content": "<p>Do you have this for lists? You can just lift it across the quotient then.</p>",
        "id": 266510335,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640965769
    },
    {
        "content": "<p>What for lists? We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.traversable\">docs#list.traversable</a> if it's what you mean.</p>",
        "id": 266510415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640965841
    },
    {
        "content": "<p>Can you prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.to_finset_fmap_traverse_erase_dup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.to_finset</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">l.erase_dup</span> <span class=\"bp\">=</span> <span class=\"n\">list.to_finset</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 266510509,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640965944
    },
    {
        "content": "<p>I have no idea. This is out of my comfort zone.</p>",
        "id": 266510556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640966029
    },
    {
        "content": "<p>This looks false, the right hand side will have the effects of <code>f</code> on repeated elements of <code>m</code> multiple times, but the left hand side won't</p>",
        "id": 266510647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640966152
    },
    {
        "content": "<p>Right, I think you need an \"injectivity\" of <code>f</code> assumption.</p>",
        "id": 266510700,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640966182
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.to_finset_fmap_traverse_erase_dup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.to_finset</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">l.erase_dup</span> <span class=\"bp\">=</span> <span class=\"n\">list.to_finset</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">hd</span> <span class=\"bp\">∈</span> <span class=\"n\">tl</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list.erase_dup_cons_of_mem</span><span class=\"o\">,</span> <span class=\"n\">list.traverse_cons</span><span class=\"o\">],</span>\n      <span class=\"c1\">-- list.to_finset &lt;$&gt; traverse f tl.erase_dup =</span>\n      <span class=\"c1\">--   list.to_finset &lt;$&gt; (list.cons &lt;$&gt; f hd &lt;*&gt; traverse f tl)</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266510734,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640966257
    },
    {
        "content": "<p>That shows the issue of trying to <code>erase_dup</code> over <code>f hd</code>.</p>",
        "id": 266510797,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640966324
    },
    {
        "content": "<p>Arf. I was trying to get away without injectivity <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 266510812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640966360
    },
    {
        "content": "<p>I don't understand what you mean by \"injectivity\". You need something like <code>f x</code> is idempotent for each <code>x</code>.</p>",
        "id": 266510958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640966455
    },
    {
        "content": "<p>My idea was that the <code>to_finset</code> would squish whatever effect we had duplicated.</p>",
        "id": 266511073,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640966599
    },
    {
        "content": "<p>e.g. in pseudo-math/Lean/Haskell, if <code>m = {x, x}</code>, then the left hand side is<br>\n<code>do { y &lt;- f x; return (to_finset [y]) }</code><br>\nbut the right hand side is<br>\n<code>do { y &lt;- f x; y' &lt;- f x; return (to_finset [y, y']) }</code><br>\nand there's no reason that these should be the same even if you ignore the return value, because <code>f</code> ran twice on the right hand side but only once on the left</p>",
        "id": 266511137,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640966671
    },
    {
        "content": "<p>For example, <code>F</code> could be a monad which is counting the number of executions of <code>f</code></p>",
        "id": 266511234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640966788
    },
    {
        "content": "<p>Welp, I'm giving up. <a href=\"https://github.com/leanprover-community/mathlib/pull/10980\">#10980</a> is now ready for review.</p>",
        "id": 266511896,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640967697
    },
    {
        "content": "<p>Reid, you're right, I hand-waved \"injectivity\" to mean what you said clearer as idempotency.</p>",
        "id": 266511957,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640967740
    }
]