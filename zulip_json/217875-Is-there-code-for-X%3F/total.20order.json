[
    {
        "content": "<p>Are total orders defined in mathlib?</p>",
        "id": 197771298,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589595552
    },
    {
        "content": "<p>you might want to read init/algebra/order.lean</p>",
        "id": 197771526,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589595877
    },
    {
        "content": "<p>or you could just type <code>linear_order.</code> and look through the autocomplete suggestions to learn what stuff is associated with it</p>",
        "id": 197771535,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589595906
    },
    {
        "content": "<p>guessing the name of something is surprisingly powerful</p>",
        "id": 197771537,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589595928
    },
    {
        "content": "<p>Ah it's called linear_order, but I was searching for total_order</p>",
        "id": 197771541,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589595946
    },
    {
        "content": "<p>yes, when you're learning to search for things by name, you should try the tactic of putting in synonyms</p>",
        "id": 197771586,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589595980
    },
    {
        "content": "<p>although in some domains, we have strict naming conventions that make synonyms irrelevant</p>",
        "id": 197771597,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589596002
    },
    {
        "content": "<p>a different path to find linear_order might have been to start with partial orders</p>",
        "id": 197771607,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589596023
    },
    {
        "content": "<p>they end up being defined in the same file</p>",
        "id": 197771611,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589596031
    },
    {
        "content": "<p>you can do <code>#print notation ≤</code> to learn there is a typeclass called <code>has_le</code>, and following up on that teaches you things how orders are defined</p>",
        "id": 197771665,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589596087
    },
    {
        "content": "<p>(asking questions on here is a great strategy, I'm just trying to give you strategies that might resolve even faster)</p>",
        "id": 197771676,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589596107
    },
    {
        "content": "<p>You could also use <code>library_search</code> to find <code>x &lt;= y \\/ y &lt;= x</code>, discover the name <code>le_total</code>, then look at the typeclass argument for it and see it's called <code>linear_order</code></p>",
        "id": 197771679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589596113
    },
    {
        "content": "<p>or you could ask here and get an answer in seconds :)</p>",
        "id": 197771699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589596134
    },
    {
        "content": "<p>AFAIR there is a class <code>is_total</code></p>",
        "id": 197772635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589597517
    },
    {
        "content": "<p>yeah but we don't use those <code>is_</code> typeclasses and I don't know why they exist</p>",
        "id": 197780948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589611913
    },
    {
        "content": "<p>E.g., we have a lemma assuming <code>[semilattice_sup α] [is_total ((≤) : α → α → Prop)]</code>.</p>",
        "id": 197784935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589618899
    },
    {
        "content": "<p>You can use it to avoid declaring one more typeclass.</p>",
        "id": 197784952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589618931
    },
    {
        "content": "<p>BTW, do we ever have <code>[semilattice sup α] [is_total (≤)]</code> without a <code>decidable_linear_order α</code>?</p>",
        "id": 197785130,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589619154
    },
    {
        "content": "<p>The <code>is_</code> classes are sometimes useful. But back to the point, the idea is that you should be able to search the docs for total order and the linear_order file should have this as a tag</p>",
        "id": 197785222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589619318
    },
    {
        "content": "<p>The new <a href=\"https://leanprover-community.github.io/mathlib_docs/logic/basic.html#fact\"><code>fact</code></a> technique lets us create new classes like the <code>is_</code> classes too, right? Or is there a difference I'm missing.</p>",
        "id": 197798567,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589639979
    }
]