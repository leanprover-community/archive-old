[
    {
        "content": "<p>I can't quite find the following result in the library:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">injective_of_le_imp_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hxy.le</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hxy.ge</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(In fact, I have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono\">docs#strict_mono</a> since <code>f x ≤ f y ↔ x ≤ y</code>, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono.injective\">docs#strict_mono.injective</a> requires a <code>linear_order</code> assumption.)</p>",
        "id": 246452784,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626700506
    },
    {
        "content": "<p>The closest I could find was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/injective_of_lt_imp_ne\">docs#injective_of_lt_imp_ne</a>, but that again requires <code>linear_order</code>.</p>",
        "id": 246452855,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626700542
    },
    {
        "content": "<p>Since there isn't any response: <a href=\"https://github.com/leanprover-community/mathlib/issues/8373\">#8373</a></p>",
        "id": 246583513,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626787637
    }
]