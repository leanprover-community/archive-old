[
    {
        "content": "<p>This makes me to bet interested in porting <code>finset</code>.</p>\n<p>How should I participate in porting, or has the porting not started yet?</p>\n<p>In any case, I'll use this as an opportunity to contribute something to mathlib4.</p>",
        "id": 317122674,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1671617563
    },
    {
        "content": "<p><span aria-label=\"point right\" class=\"emoji emoji-1f449\" role=\"img\" title=\"point right\">:point_right:</span> <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a></p>",
        "id": 317122806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671617617
    },
    {
        "content": "<p>But let me tell you that <code>finset</code> is considered critical so it will be hard for you to keep up with the port towards it (I expect it be fast). If you want to help with the port, probably pick something less commonplace</p>",
        "id": 317122989,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671617689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"574112\">Jihoon Hyun</span> has marked this topic as resolved.</p>",
        "id": 317123379,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671617823
    },
    {
        "content": "<p>I don't understand this advice. <span class=\"user-mention\" data-user-id=\"574112\">@Jihoon Hyun</span> feel free to direct your attention towards porting anything! You should make a graph of the path to your target using the tools and then get started on the files which are ready for porting.</p>",
        "id": 317125171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671618415
    },
    {
        "content": "<p>In fact here is today's pdf: <a href=\"https://tqft.net/mathlib4/2022-12-21/data.fintype.basic.pdf\">https://tqft.net/mathlib4/2022-12-21/data.fintype.basic.pdf</a> . Please feel free to try and port anything on the path to data.finset.basic as long as its predecessors have been ported!</p>",
        "id": 317130872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671620342
    },
    {
        "content": "<p>I just think porting the files you need to do combinatorics and then do the combinatorics you want is MUCH harder than doing the combinatorics you want directly.</p>",
        "id": 317191594,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671638289
    },
    {
        "content": "<p>That also because we have a shared immaterial database of knowledge on how to formalise things in Lean 3, and doing that in Lean 4 basically means you cut yourself off all that.</p>",
        "id": 317191805,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671638351
    },
    {
        "content": "<p>well there is another shared immaterial database of knowledge on how to formalize things in lean 4</p>",
        "id": 317192324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671638493
    },
    {
        "content": "<p>if you don't know how to formalize in lean 3 then it wouldn't seem to make much difference which database you want to tap</p>",
        "id": 317192470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671638527
    },
    {
        "content": "<p>Jihoon wants to do set family combinatorics, which is something I have extensive experience with in Lean 3 and no idea how to do in Lean 4 (albeit I expect it be quite similar).</p>",
        "id": 317192798,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671638632
    },
    {
        "content": "<p>okay but that's a much more limited claim, that you personally have less experience in lean 4 and cannot help as much for that reason</p>",
        "id": 317193116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671638716
    },
    {
        "content": "<p>I mean, this question is about set family combinatorics <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 317194394,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671639048
    },
    {
        "content": "<p>Looking up at the discussion, it seems that the question was about lean4 from the start. I'm sure there is a lot of combinatorics in isabelle too but it's not necessarily helpful to point that out</p>",
        "id": 317194882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671639204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Set.20Systems.3F/near/317007435\">said</a>:</p>\n<blockquote>\n<p>I think so. The paper \"Formalizing Hall’s Marriage Theorem in Lean\" worked with them and it became a part of mathlib.<br>\n<a href=\"https://arxiv.org/abs/2101.00127\">https://arxiv.org/abs/2101.00127</a></p>\n</blockquote>\n<p>I am a bit frustrated now. I thought that paper \"Formalizing Hall’s Marriage Theorem in Lean\" was a good reference. However, I cannot find the version of the repository that precisely corresponds to the code snippets in the paper.</p>",
        "id": 319209423,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672757014
    },
    {
        "content": "<p>I was about asking essentially same question of this thread. This comment is particularly relevant:<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Set.20Systems.3F/near/317026233\">said</a>:</p>\n<blockquote>\n<p>There are also set systems in topology and measure theory in the form of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space\">docs#topological_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measurable_space\">docs#measure_theory.measurable_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.d_system\">docs#measure_theory.d_system</a>.</p>\n</blockquote>\n<p>The context is <a href=\"https://github.com/leanprover-community/mathlib/pull/17972\">#17972</a>, where I'm defining the <a href=\"#narrow/stream/144837-PR-reviews/topic/.2317972.20Borel.20hierarchy\">Borel hierarchy</a>. To  smooth out some base cases (and also in order to be able to refactor some results), the construction starts from a <em>generating set</em> of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-algebra, which in the case of the Borel space of a second countable space, it should be a countable basis. </p>\n<p>Now the point is that in order to apply the general definitions to the second countable topology case, it seems that I would need a typeclass consisting of a “set system” as spelled out above, to avoid repeating code. My question is,</p>\n<ul>\n<li>Is the typeclass approach the sensible one to take? (It would involved to define the “set system” class).</li>\n</ul>",
        "id": 319231741,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1672763264
    },
    {
        "content": "<p>Have you seen how <code>topological_space</code> is defined? Unless I'm mistaken, you can copy-paste the definition and change the axioms as suits your needs.</p>",
        "id": 319273048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672777100
    },
    {
        "content": "<p>I don't understand your final sentences. Surely you don't want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">set_system</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 319273188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672777166
    },
    {
        "content": "<p>With your suggestion of looking at topological spaces, it would be plain this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">set_system</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">(</span><span class=\"n\">is_good</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm sorry I can't figure if what you put is essentially the same thing, but it's just that---a set with a family of its subsets. I think there are really no axioms satisfied by a “generating set of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-algebra”. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Set.20Systems.3F/near/319273188\">said</a>:</p>\n<blockquote>\n<p>I don't understand your final sentences.</p>\n</blockquote>\n<p>I was also not careful in the level of detail of my question. I'll try to be brief and clear:<br>\nIn <a href=\"https://github.com/leanprover-community/mathlib/pull/17972\">#17972</a>, we have an</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">sigma0_pi0_rec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>which encodes the recursive generation of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-algebra, starting from <code>s</code>. Then two families of subsets of <code>α</code> are defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sigma0</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sigma0_pi0_rec</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">ff</span>\n<span class=\"kd\">def</span> <span class=\"n\">pi0</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sigma0_pi0_rec</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">tt</span>\n</code></pre></div>\n<p>and some lemmas are proved. This has two applications:</p>\n<ol>\n<li>Reproving the theorems from <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/card_measurable_space.html\">measure_theory.card_measurable_space</a> (in which <code>s</code> is completely arbitrary); and</li>\n<li>The detailed study of Borel sets in second countable metric spaces (where <code>s</code> is a countable basis for the topology).</li>\n</ol>\n<p>When I tried to start with applications for second item, my first try was to start a new namespace and get new versions with <code>s</code> evaluated to the countable basis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma0_pi0_rec</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pointclasses.sigma0_pi0_rec</span> <span class=\"o\">(</span><span class=\"n\">countable_basis</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma0</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pointclasses.sigma0</span> <span class=\"o\">(</span><span class=\"n\">countable_basis</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">pi0</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pointclasses.pi0</span> <span class=\"o\">(</span><span class=\"n\">countable_basis</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but then I would have to unfold defs all the time to recover the original results. Then it hit me that this <code>s</code> should be inferred from the context, and that I should have used typeclasses. But I'm not completely sure, and there is no typeclass as the one above. </p>\n<p>Does it make more sense now?</p>",
        "id": 319282131,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1672780860
    },
    {
        "content": "<p>Sure, but do you understand the difference between the following two?</p>\n<ul>\n<li>a <code>set_family</code> structure</li>\n<li>an <code>important_canonical_set_family</code> typeclass</li>\n</ul>",
        "id": 319287205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672783304
    },
    {
        "content": "<p>There are fundamentally the same. The difference is the meaning. We don't want a <code>set_family</code> structure, but if you need to tag a canonical set family using typeclass inference, that's fine.</p>",
        "id": 319287386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672783357
    },
    {
        "content": "<p>After, all <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_add\">docs#has_add</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_one\">docs#has_one</a>... are all typeclasses that wrap very simple types to tag a canonical element.</p>",
        "id": 319287520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672783408
    },
    {
        "content": "<p>I don't think you want a typeclass here. Maybe you are looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.is_topological_basis\">docs#topological_space.is_topological_basis</a> or just the last line of this definition (<code>t = topological_space.generate_from s</code>), that you could include as assumptions in the relevant lemmas. But I think your approach to consider the sigma-algebra generated by an arbitrary subset <code>s</code> is the right one -- then if you want to deduce statements about the Borel sigma-algebra in a second-countable space, just apply your general statement to a countable topological basis.</p>",
        "id": 319339523,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1672819767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Set.20Systems.3F/near/319339523\">said</a>:</p>\n<blockquote>\n<p>your approach to consider the sigma-algebra generated by an arbitrary subset <code>s</code> is the right one -- then if you want to deduce statements about the Borel sigma-algebra in a second-countable space, just apply your general statement to a countable topological basis.</p>\n</blockquote>\n<p>Thank you very much; I'll keep it like that (and set the  <code>awaiting-review</code> label again).</p>",
        "id": 319391442,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1672839652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Set.20Systems.3F/near/319287205\">said</a>:</p>\n<blockquote>\n<p>Sure, but do you understand the difference between the following two?</p>\n<ul>\n<li>a <code>set_family</code> structure</li>\n<li>an <code>important_canonical_set_family</code> typeclass</li>\n</ul>\n</blockquote>\n<p>I wish I could say \"yes\". In my example above, where I drew from <code>topological_space</code>, I didn't include the <code>[@class]</code> attribute (I remember seeing that <code>class</code> is the same as <code>[@class] structure</code>). <br>\nWhat I believe I understand is that in the typeclass case, you instantiate the structure defined in some (expected?) way. E.g., <code>has_add</code> as a structure is just \"having some binary operation\"; thinking of it as a class allows Lean to infer which is the correct “+” in the context.</p>\n<p>Anyway, I don't even know if the above makes sense. If you <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> might point me to the documentation in order to fully understand your example, I'd be grateful.</p>",
        "id": 319393454,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1672840356
    },
    {
        "content": "<p>The difference between <code>class</code> and <code>structure</code> is that <code>class</code> is a pact you make with Lean not to ever declare two instances of the same class with the same parameters, and in return Lean feeds in the instances for you. In contrast, <code>structure</code> is a much freer contract: you get to instantiate the structure as much as you want, and in return you need to feed them manually. It is possible (and useful, eg to compare topologies on a fixed type) to break the contract to never instantiate the same class twice, but Lean will make your life miserable unless you know what you're doing.</p>",
        "id": 319395480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672841096
    },
    {
        "content": "<p>This is why a <code>set_system</code> class is not wanted, but a <code>my_very_own_kind_of_set_system_for_the_borel_hierarchy</code> is, because one is general purpose and will unavoidably be instantiated more than once (<code>empty</code> and <code>univ</code> already are two different set systems...), while the other is meant to be used in a precise context with a well-defined use case.</p>",
        "id": 319395946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672841272
    },
    {
        "content": "<p>(this is a general comment, and most likely Sébastien above is right that you don't even want <code>my_very_own_kind_of_set_system_for_the_borel_hierarchy</code>)</p>",
        "id": 319396435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672841378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Set.20Systems.3F/near/319396435\">said</a>:</p>\n<blockquote>\n<p>(this is a general comment, and most likely Sébastien above is right that you don't even want <code>my_very_own_kind_of_set_system_for_the_borel_hierarchy</code>)</p>\n</blockquote>\n<p>I understand it as such but anyway is of much help <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 319396855,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1672841475
    }
]