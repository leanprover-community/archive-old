[
    {
        "content": "<p>Is there an interface for defining a function on the union of sets given functions on each of the individual sets that agree where necessary?</p>",
        "id": 252038463,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1630803603
    },
    {
        "content": "<p>I don't know, but just wanted to mention that there was a discussion on gluing continuous functions that seems related.</p>",
        "id": 252038576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630803721
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/partial.20functions.20and.20gluing/near/251825197\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/partial.20functions.20and.20gluing/near/251825197</a></p>",
        "id": 252038637,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630803774
    },
    {
        "content": "<p>Looks like it doesn't answer your question though. Sorry</p>",
        "id": 252038660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630803811
    },
    {
        "content": "<p>Your question is the same as <code>(f : subtype p → A) (g : subtype q → A) (∀ x (hp : p x) (hq : q x), f x = g x) : subtype (p ⊔ q) → A</code>, right?</p>",
        "id": 252063408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630833650
    },
    {
        "content": "<p>Yes, but on arbitrary unions not just binary unions.</p>",
        "id": 252065092,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1630835713
    },
    {
        "content": "<p>You want to prove the presheaf is a sheaf</p>",
        "id": 252065388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630836014
    },
    {
        "content": "<p>So <code>(f : Π i, subtype (p i) → A) (∀ x i j, p i x → p j x → f i x = f j x) : subtype (⨆ i, p i) → A</code>, right?</p>",
        "id": 252066784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630837584
    },
    {
        "content": "<p>Yes</p>",
        "id": 252067113,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1630837965
    },
    {
        "content": "<p>A-valued functions on subsets of a set are a sheaf: this is precisely the statement that given <code>f i</code> as above there's a unique f which restricts to the <code>f i</code>. This doesn't help with the proof but it's a nice basic example of a sheaf so I thought I'd mention it.</p>",
        "id": 252068024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630838990
    },
    {
        "content": "<p>Surprisingly, Lean didn't ask me to mark this as <code>noncomputable</code>. I guess it must be impossible to constructively define an <code>f</code> that doesn't agree on the intersections.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Union_map</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxt</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n    <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">x</span> <span class=\"n\">hxs</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">x</span> <span class=\"n\">hxt</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">hx</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">exists_prop.1</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n<span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">hs.1</span> <span class=\"n\">x</span> <span class=\"n\">hs.2</span>\n</code></pre></div>",
        "id": 252068351,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1630839346
    },
    {
        "content": "<p>Sounds like you either have <code>noncomputable theory</code> in your preamble or accidentally remained in Prop.</p>",
        "id": 252069126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630840129
    },
    {
        "content": "<p>No, it's computable. You're allowed <code>classical.choice</code> to choose a <code>Type</code> or a <code>Prop</code> since there are no computable non-constant functions from <code>Type</code> or <code>Prop</code> into a normal computable Type like <code>nat</code> anyway. IIRC, <code>Type</code> and <code>Prop</code> are represented as <code>unit</code> in the VM.</p>",
        "id": 252069771,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1630840884
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9019\">#9019</a></p>",
        "id": 252102464,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1630876641
    },
    {
        "content": "<p>Nice!</p>",
        "id": 252102723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630876943
    }
]