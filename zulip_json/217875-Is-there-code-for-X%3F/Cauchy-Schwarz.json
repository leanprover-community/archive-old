[
    {
        "content": "<p>Do we have Cauchy-Schwarz for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a>? I was wanting this specialization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cauchy</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280437757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651112153
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 280438248,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1651112765
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/abs_real_inner_le_norm\">docs#abs_real_inner_le_norm</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.inner_product_space\">docs#pi_Lp.inner_product_space</a></p>",
        "id": 280451410,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651128095
    },
    {
        "content": "<p>You also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_arith_mean_le_arith_mean_pow\">docs#pow_arith_mean_le_arith_mean_pow</a>, from which your inequality follows by taking <code>w i = 1/n</code>.</p>",
        "id": 280451836,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1651128398
    },
    {
        "content": "<p>Here's a proof with ℕ replaced by ℝ:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">abs_inner_le_norm</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_norm_eq_norm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">abs_norm_eq_norm</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">abs_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi_Lp.inner_apply</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.abs_to_real</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">sq_le_sq</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">real.sq_sqrt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">simpa</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C.norm_eq_abs</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finsum_eq_sum_of_fintype</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">finsum_nonneg</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280455705,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651131282
    },
    {
        "content": "<p>This is lemma <code>chebyshev'</code><a href=\"https://github.com/leanprover-community/mathlib/blob/szemeredi/src/combinatorics/szemeredi/mathlib.lean\">here</a>.</p>",
        "id": 280457154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651132384
    },
    {
        "content": "<p>Note that this is not called Cauchy-Schwarz, but Chebyshev's inequality (even thought it indeed is a special case).</p>",
        "id": 280457180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651132414
    },
    {
        "content": "<p><del>Looks like <a href=\"https://github.com/leanprover-community/mathlib/blob/01df77b33954aed5999e78837627e241523ebb49/src/combinatorics/szemeredi/mathlib.lean#L120\">https://github.com/leanprover-community/mathlib/blob/01df77b33954aed5999e78837627e241523ebb49/src/combinatorics/szemeredi/mathlib.lean#L120</a> is another good match</del></p>",
        "id": 280458117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651132947
    },
    {
        "content": "<p>Note that I proved the <code>chebyshev'</code> that Yaël links by reproving Cauchy-Schwarz on finsets rather than using the general version in Euclidean spaces (because I couldn't figure out how to link them cleanly enough), I think the general case <code>(∑ i in s, f i * g i)^2 ≤ (∑ i in s, (f i)^2) * ∑ i in s, (g i)^2</code> is worth having in mathlib somewhere (with any proof)</p>",
        "id": 280467842,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651138873
    },
    {
        "content": "<p>I ended up fighting <code>pi_Lp</code> for a similar lemma here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/e72114ea93abdf1d5adb4dc0bb37d5e82723bb8d/src/analysis/matrix.lean#L231-L233\">https://github.com/leanprover-community/mathlib/blob/e72114ea93abdf1d5adb4dc0bb37d5e82723bb8d/src/analysis/matrix.lean#L231-L233</a></p>",
        "id": 280468200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651139069
    },
    {
        "content": "<p>Do we have that <code>∑</code> is integral against counting measure somewhere? (asking for a friend)</p>",
        "id": 280468270,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651139130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> is the one to ask.</p>",
        "id": 280468471,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651139255
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.lintegral_count\">docs#measure_theory.lintegral_count</a></p>",
        "id": 280468831,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1651139453
    },
    {
        "content": "<p>Combining <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on.map_average_le\">docs#convex_on.map_average_le</a> (which is Jensen) with that could presumably yield another proof ... why is that called <code>chebyshev'</code>?</p>",
        "id": 280489238,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651150761
    },
    {
        "content": "<p>Thanks everyone. I've taken <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>'s proof and generalized it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cauchy_schwarz</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">abs_inner_le_norm</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_norm_eq_norm</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">abs_norm_eq_norm</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">pi_Lp.inner_apply</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.abs_to_real</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">sq_le_sq</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">real.sq_sqrt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.abs_to_real</span><span class=\"o\">,</span> <span class=\"n\">pow_bit0_abs</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finset.sum_nonneg'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then created a natural number version and the specialization I needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cauchy_schwarz_nat</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">cauchy_schwarz</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cauchy</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">cauchy_schwarz_nat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 280533128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651168984
    },
    {
        "content": "<p>That's not <em>the</em> general version, though, since it's still using <code>fintype</code> rather than a summation over a <code>finset</code>, but at least the <code>sorry</code> is filled in in the meantime.</p>",
        "id": 280533460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651169137
    },
    {
        "content": "<p>The general version is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">chebyshev</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_smul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">monovary_on</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">s.card</span> <span class=\"bp\">•</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280534019,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651169404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cauchy-Schwarz/near/280489238\">said</a>:</p>\n<blockquote>\n<p>Combining <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on.map_average_le\">docs#convex_on.map_average_le</a> (which is Jensen) with that could presumably yield another proof ... why is <code>chebyshev'</code> called so?</p>\n</blockquote>\n<p>Presumably because it is a special case of <a href=\"https://en.wikipedia.org/wiki/Chebyshev%27s_sum_inequality\">https://en.wikipedia.org/wiki/Chebyshev%27s_sum_inequality</a></p>",
        "id": 280534734,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651169740
    },
    {
        "content": "<p>golf: the last three lines in <code>cauchy_schwarz</code> can be replaced by <code>iterate 2 { rw ← real_inner_self_eq_norm_sq }, simp [sq],</code></p>",
        "id": 280577973,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651197491
    },
    {
        "content": "<p>Thanks. With a <code>simp_rw</code>, it can handle the <code>rw</code> on the fourth-to-last line, too. (I squeezed the last simp since it was a little slow.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cauchy_schwarz</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">abs_inner_le_norm</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_norm_eq_norm</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">abs_norm_eq_norm</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">pi_Lp.inner_apply</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.abs_to_real</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">sq_le_sq</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">real_inner_self_eq_norm_sq</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">pi_Lp.inner_apply</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.inner_apply</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.conj_to_real</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280579143,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651198835
    },
    {
        "content": "<p>I split the proof into two parts, since the first lemma is perhaps worth having:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sq_abs_inner_le_norm</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">is_R_or_C.abs</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"c\">/-</span><span class=\"cm\"> in the file LHS can be written as `(abs ⟪x, y⟫)^2` as in`abs_inner_le_norm` -/</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sq_le_sq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">abs_inner_le_norm</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cauchy_schwarz</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sq_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">sq_abs_inner_le_norm</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_R_or_C.abs_to_real</span> <span class=\"o\">},</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real_inner_self_eq_norm_sq</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280580987,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651201334
    },
    {
        "content": "<p>With <a href=\"https://github.com/leanprover-community/mathlib/pull/13569\">#13569</a> it's possible to avoid the <code>change</code>s</p>",
        "id": 280610147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651225946
    }
]