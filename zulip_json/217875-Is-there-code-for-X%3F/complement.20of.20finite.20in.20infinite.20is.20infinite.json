[
    {
        "content": "<p>I am not using <code>finset</code> in my teaching, I'm using <code>set.finite</code> because Props are less scary. Do we have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_of_finite_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>? I can't find it but I'm still not sure I know all the places where this stuff is talked about.</p>",
        "id": 226538162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613493365
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_of_finite_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set.infinite_univ</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hs.union</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226539550,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613493855
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 226545220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495984
    },
    {
        "content": "<p>Should it be called <code>infinite_compl_of_finite</code>?</p>",
        "id": 226545580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613496129
    },
    {
        "content": "<p>I just noticed this!</p>",
        "id": 226545602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496139
    },
    {
        "content": "<p>Unless I guess you're taking advantage that <code>compl \\o compl = id</code></p>",
        "id": 226545614,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613496149
    },
    {
        "content": "<p>when would I ever use the law of the excluded middle!</p>",
        "id": 226545663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496171
    },
    {
        "content": "<p><span aria-label=\"gemini\" class=\"emoji emoji-264a\" role=\"img\" title=\"gemini\">:gemini:</span></p>",
        "id": 226545705,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613496187
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_of_finite_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.infinite</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set.infinite_univ</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hs.union</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_infinite_of_finite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set.infinite_univ</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hs.union</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226545709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496189
    },
    {
        "content": "<p>(we need an :lem: or :em: emoji)</p>",
        "id": 226545741,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613496205
    },
    {
        "content": "<p>oh no we don't</p>",
        "id": 226545762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496216
    },
    {
        "content": "<p>we need a not :lem: emoji, oh maybe we have one: <span aria-label=\"warning\" class=\"emoji emoji-26a0\" role=\"img\" title=\"warning\">:warning:</span></p>",
        "id": 226545866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496251
    },
    {
        "content": "<p><code>infinite_compl</code> for the latter? It's always not clear to me how the naming should work on predicates that are always accessed via dot-projection notation</p>",
        "id": 226545882,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613496257
    },
    {
        "content": "<p>Right now we have <code>compl_univ</code> and <code>compl_inter</code> but I see what you mean.</p>",
        "id": 226545975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496306
    },
    {
        "content": "<p>A lem emoji would not be not useless.</p>",
        "id": 226546138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496374
    },
    {
        "content": "<p>so <span aria-label=\"lemon\" class=\"emoji emoji-1f34b\" role=\"img\" title=\"lemon\">:lemon:</span>  for :lem:, <span aria-label=\"gemini\" class=\"emoji emoji-264a\" role=\"img\" title=\"gemini\">:gemini:</span> for :em:, <span aria-label=\"deciduous tree\" class=\"emoji emoji-1f333\" role=\"img\" title=\"deciduous tree\">:deciduous_tree:</span> for :decidable:</p>",
        "id": 226546274,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613496434
    },
    {
        "content": "<p>so it seems!</p>",
        "id": 226546355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496468
    },
    {
        "content": "<p>or <img alt=\":emacs:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17846.png\" title=\"emacs\"> for :em:</p>",
        "id": 226546406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496487
    },
    {
        "content": "<p><img alt=\":not_not:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17937.png\" title=\"not not\"></p>",
        "id": 226547158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613496802
    },
    {
        "content": "<p>that should be called not not not, not not not.</p>",
        "id": 226547263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613496851
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6266\">#6266</a></p>",
        "id": 226548057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613497188
    }
]