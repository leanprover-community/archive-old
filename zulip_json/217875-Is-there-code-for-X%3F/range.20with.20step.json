[
    {
        "content": "<p>Is there something in mathlib that generates a list of numbers <code>x, x + n, x + 2n, ...</code> up to a maximum m like <code>list(range(x, m, n))</code> in Python?</p>",
        "id": 226309816,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1613316755
    },
    {
        "content": "<p>I would just combine <code>list.range</code> with <code>list.map</code></p>",
        "id": 226310234,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613317256
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.range'\">docs#list.range'</a> for offset starts</p>",
        "id": 226310248,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613317277
    },
    {
        "content": "<p>Yeah, this suffices:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">range_step</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">list.range</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226312544,
        "sender_full_name": "Diana Kalinichenko",
        "timestamp": 1613319292
    },
    {
        "content": "<p>With all the caveats of nat division and subtraction, of course</p>",
        "id": 226312567,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613319338
    },
    {
        "content": "<p>I would imagine that this is one of the few cases where the caveats are actually exactly what you want; Python doesn't care if m isn't x mod n.</p>",
        "id": 226316617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613325120
    },
    {
        "content": "<p>Note that Python expects integer inputs, not naturals, and then subtraction works fine.</p>",
        "id": 226316739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613325248
    }
]