[
    {
        "content": "<p>As I was pointed to this stream, I would like to ask a meta question <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . Is there a code for searching for functions by their type? <code>library_search</code> works great for theorems but not really for general functions. I imagine something like <a href=\"https://hoogle.haskell.org/?hoogle=(a%20-%3E%20IO%20b)%20-%3E%20%5Ba%5D%20-%3E%20IO%20%5Bb%5D\">Hoogle</a>. It doesn't feel too different from the <code>library_search</code> tactic but there are a few differences</p>\n<ul>\n<li>I would like to see all the all the options, and not just one,</li>\n<li><code>library_search</code> doesn't really work for meta definitions (try that <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>, the result is cute ),</li>\n<li><code>library_search</code> sometimes does too fancy rearrangements (as it is \"trying to prove a theorem\")</li>\n</ul>",
        "id": 235642301,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1619081894
    },
    {
        "content": "<p><code>#find</code> has limited functionality in this direction, although I could never really figure out how to use it to search for a dependent type.</p>",
        "id": 235642455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619081989
    },
    {
        "content": "<p>Does <code>suggest</code> do anything useful for functions?</p>",
        "id": 235642629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619082042
    },
    {
        "content": "<p>I tried <code>suggest</code>, and it actually looks reasonable from the perspective it is showing multiple suggestions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_option_map</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span>\n<span class=\"c1\">-- Try this: exact list.lookmap</span>\n<span class=\"c1\">-- Try this: exact list.filter_map</span>\n</code></pre></div>\n<p>On the other hand, I still have no idea how to search for let's say <code>list.mmap tactic</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">list.mmap</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span>\n<span class=\"c1\">-- mmap : (ℕ → tactic ℕ) → list ℕ → tactic (list ℕ)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- thinking for some time, and then no result</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_mmap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: exact my_mmap</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_mmap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span>\n<span class=\"c1\">-- Try this: exact my_mmap</span>\n</code></pre></div>",
        "id": 235644646,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1619083136
    },
    {
        "content": "<p>But for non-meta definitions, suggest looks relatively usable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.map₂</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.zip_with</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">tactic.merge_list</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.func.pointwise</span>\n</code></pre></div>\n<p>(seeing the proper types of the found functions would be even better but I can always <code>#check</code>)</p>",
        "id": 235646108,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1619083850
    }
]