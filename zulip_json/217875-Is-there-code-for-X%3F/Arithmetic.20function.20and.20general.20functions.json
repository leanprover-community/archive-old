[
    {
        "content": "<p>Hi, I learn from mathlib that an \"arithmetic function\" is defined to be a function that preserves zero. But I'm not sure how can we change the type <code>f: arithmetic_function R</code> to a general function type <code>f: ℕ → R</code> and vice versa. Thanks for your help in advance!</p>",
        "id": 287217994,
        "sender_full_name": "Ella Yu",
        "timestamp": 1656002971
    },
    {
        "content": "<p>Writing <code>(f : ℕ → R)</code> will convert a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.arithmetic_function\">docs#nat.arithmetic_function</a> into a general function</p>",
        "id": 287218737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656003332
    },
    {
        "content": "<p>To go in the other direction, use <code>{ to_fun := f, map_zero' := sorry}</code></p>",
        "id": 287219772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656003741
    },
    {
        "content": "<p>I think I didn't make myself clear. My question is: for example, we define l-series as <code>def l_series (f : arithmetic_function ℂ) (z : ℂ) : ℂ := ∑'n, (f n) / (n ^ z)</code> If we now want to state it as a function and trying to say that they are the same, what should I do? Thanks for your help!</p>",
        "id": 287219837,
        "sender_full_name": "Ella Yu",
        "timestamp": 1656003773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Arithmetic.20function.20and.20general.20functions/near/287219772\">said</a>:</p>\n<blockquote>\n<p>To go in the other direction, use <code>{ to_fun := f, map_zero' := sorry}</code></p>\n</blockquote>\n<p>Hi, I'm not sure if I understand your words correctly. <code>lemma changing_type {f : arithmetic_function R}: (f : ℕ → R):=by sorry\n</code>Should I have something like this to do the conversion? But there would be an error in type if I did that.</p>",
        "id": 287221051,
        "sender_full_name": "Ella Yu",
        "timestamp": 1656004290
    },
    {
        "content": "<p>I don't understandwhat you mean by \"state it as a function\"; you <em>did</em> state <code>l_series</code> as a function</p>",
        "id": 287221162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656004357
    },
    {
        "content": "<p>Perhaps it would help if you un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> your problem; what are you trying to state, and where is this conversion getting in the way?</p>",
        "id": 287221236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656004403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509955\">Ella Yu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Arithmetic.20function.20and.20general.20functions/near/287221051\">said</a>:</p>\n<blockquote>\n<p>Hi, I'm not sure if I understand your words correctly. <code>lemma changing_type {f : arithmetic_function R}: (f : ℕ → R):=by sorry\n</code>Should I have something like this to do the conversion? But there would be an error in type if I did that.</p>\n</blockquote>\n<p>I was decribing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">changing_type</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">arithmetic_function</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but obviously you don't want to actually write <code>changing_type f</code> when you could just write <code>(f : ℕ → R)</code></p>",
        "id": 287221407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656004482
    },
    {
        "content": "<p>I see, so if I want to state <code>l_series</code> as a function from  ℕ → R, I can just write it as <code>(l_series : ℕ → R)</code>. Thank you so much!</p>",
        "id": 287221726,
        "sender_full_name": "Ella Yu",
        "timestamp": 1656004641
    },
    {
        "content": "<p>I'm not sure that you have your answer already.  You can do <code>f : ℕ → R</code> because an <code>arithmetic_function</code> can be coerced to a function. (This in turn is because it is defined as of type <code>zero_hom ℕ R</code> and there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zero_hom.has_coe_to_fun\">docs#zero_hom.has_coe_to_fun</a> that tells how to coerce it.) If you want to coerce your <code>l_series</code> back to an arithmetic function (I'm not sure if this is possible; depends what you mean by it) then you would need to define explicitly how that is done.</p>",
        "id": 287222434,
        "sender_full_name": "Bart Michels",
        "timestamp": 1656004980
    },
    {
        "content": "<p>Right now <code>l_series</code> is a function from  <code>arithmetic_function ℂ</code> to a function from <code>ℂ</code> to <code>ℂ</code>, so <code>(l_series : ℂ → ℂ)</code> doesn't make sense</p>",
        "id": 287223807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656005743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Arithmetic.20function.20and.20general.20functions/near/287223807\">said</a>:</p>\n<blockquote>\n<p>Right now <code>l_series</code> is a function from  <code>arithmetic_function ℂ</code> to a function from <code>ℂ</code> to <code>ℂ</code>, so <code>(l_series : ℂ → ℂ)</code> doesn't make sense</p>\n</blockquote>\n<p>You are right, I see, l-series is not an arithmetic function. But I understand how to do the conversion with an arithmetic function now. Thanks a lot!</p>",
        "id": 287224541,
        "sender_full_name": "Ella Yu",
        "timestamp": 1656006107
    }
]