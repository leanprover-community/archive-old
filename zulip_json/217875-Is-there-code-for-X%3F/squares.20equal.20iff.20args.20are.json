[
    {
        "content": "<p>Does this exist already? (<code>librarysearch</code> doesn't find it, and I didn't find it immediately in mathlib.) Thanks in advance!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">squares_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"c1\">-- λ hh, by nlinarith -- works over ℝ</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- come on, this is annoying</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292347476,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1659914946
    },
    {
        "content": "<p>\\le should be enough in the hypotheses, right? Have you tried looking for the variant that uses r*r instead of r^2?</p>",
        "id": 292347639,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659915237
    },
    {
        "content": "<p>Yes sorry, \\le. I tried replacing squares with <code>r*r</code>, but <code>nlinarith</code> still doesn't work automatically as the last step... (It does work if <code>R</code> is replaced by <code>ℝ</code>)</p>",
        "id": 292347758,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1659915376
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_left_inj\">docs#pow_left_inj</a> with slightly more restrictive typeclasses</p>",
        "id": 292348346,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659916271
    },
    {
        "content": "<p>One issue here is that you have two ring structures</p>",
        "id": 292348351,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659916280
    },
    {
        "content": "<p>There is <code>[ordered_comm_ring R]</code></p>",
        "id": 292348406,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659916361
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sq_eq_sq\">docs#sq_eq_sq</a> is even closer to what you want</p>",
        "id": 292348500,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659916526
    },
    {
        "content": "<p>Perfect! That's exactly what I was looking for but for some reason <code>librarysearch</code> didn't find it... Thanks! (I was sure it was there already...)</p>",
        "id": 292348553,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1659916590
    },
    {
        "content": "<p><code>library_search</code> can be really annoying because it might not find lemmas if your formulation is very slightly different than what is in mathlib</p>",
        "id": 292348589,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659916677
    },
    {
        "content": "<p>Sometimes it's easier to guess the name (in this case it is an injectivity statement about the power), so searching for 'pow inj' in the docs gives the answer</p>",
        "id": 292348658,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659916780
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">squares_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hr.eq_or_lt</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hr'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">H.symm</span> <span class=\"o\">},</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hs.eq_or_lt</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hs'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">H.symm</span> <span class=\"o\">(</span><span class=\"n\">add_pos</span> <span class=\"n\">hs'</span> <span class=\"n\">hr'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hh</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or.resolve_right</span> <span class=\"n\">key</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_add_eq_sub_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_sub_cancel_left</span><span class=\"o\">,</span>\n       <span class=\"bp\">←</span><span class=\"n\">neg_add'</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292349089,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659917314
    },
    {
        "content": "<p>The <code>linear_ordered...</code> constrains the order that this one might not?</p>",
        "id": 292349097,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659917341
    },
    {
        "content": "<p>I'm surprised <code>simp at hh</code> doesn't work considering <code>sq_eq_sq</code> is tagged as a simp lemma (<strong>Edit:</strong> nvm, it looks like it's a typeclass issue)</p>",
        "id": 292350534,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1659919519
    },
    {
        "content": "<p>Notice that the original spelling <code>[comm_ring R] [ordered_ring R]</code> endows R with two independent ring structures...</p>",
        "id": 292355653,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659927039
    },
    {
        "content": "<p>What about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sq_eq_sq\">docs#sq_eq_sq</a> ?</p>",
        "id": 292372154,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1659946329
    },
    {
        "content": "<p>Oops, already mentioned, sorry.</p>",
        "id": 292372214,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1659946380
    },
    {
        "content": "<p>shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">squares_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sq_sub_sq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hr</span> <span class=\"o\">:=</span> <span class=\"n\">hr.eq_or_lt</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">add_pos_of_pos_of_nonneg</span> <span class=\"n\">hr</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sub_eq_zero.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>This theorem replaces the \"linear order\" assumption in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sq_eq_sq\">docs#sq_eq_sq</a> by commutativity + no_zero_divisors; probably worth being in mathlib?</p>",
        "id": 292509402,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660000555
    },
    {
        "content": "<p>also needs a ring instead of a semiring, right?</p>",
        "id": 292510108,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660001078
    },
    {
        "content": "<p>Oops, I forgot the difference of squares identity <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 292512013,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660002628
    }
]