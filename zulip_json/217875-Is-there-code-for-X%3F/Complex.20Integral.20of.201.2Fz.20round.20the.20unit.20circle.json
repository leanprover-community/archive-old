[
    {
        "content": "<p>I am giving a talk to Olympiad level schoolkids tomorrow and during it I would like to state in Lean the theorem that the integral <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∫</mo><msup><mi>S</mi><mn>1</mn></msup></msub><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>z</mi><mo>=</mo><mn>2</mn><mi>π</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">\\int_{S^1}1/z=2\\pi i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1608200000000002em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16659999999999997em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">πi</span></span></span></span></p>",
        "id": 246315721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626514636
    },
    {
        "content": "<p>Can we do this on some compiling commit of mathlib?</p>",
        "id": 246315728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626514653
    },
    {
        "content": "<p>I don't need a proof but ideally I'd like to be able to present a term which contains as few symbols as possible other than the essential maths ones</p>",
        "id": 246315775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626514704
    },
    {
        "content": "<p>Are you okay with a parameterized curve?</p>",
        "id": 246315855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626514912
    },
    {
        "content": "<p>I'm completely happy with <code>def S\\^1 : complex_path := &lt;unreadable_thing&gt;</code></p>",
        "id": 246315901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626514940
    },
    {
        "content": "<p>I think a parameterised curve is fine</p>",
        "id": 246315918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626514983
    },
    {
        "content": "<p>I was thinking more along the lines of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mrow><mn>2</mn><mi>π</mi></mrow></msubsup><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>i</mi><mi>t</mi></mrow></msup><mo stretchy=\"false\">)</mo><mfrac><mrow><mi>d</mi><msup><mi>e</mi><mrow><mi>i</mi><mi>t</mi></mrow></msup></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mi>d</mi><mi>t</mi><mo>=</mo><mn>2</mn><mi>π</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">\\int_0^{2\\pi}1/(e^{it})\\frac{de^{it}}{dt}dt=2\\pi i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3812799999999998em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0090080000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0254599999999998em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9020857142857143em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">πi</span></span></span></span></p>",
        "id": 246315927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626515028
    },
    {
        "content": "<p>Anything which I can explain to a mathematician without having to go \"enat: well ok there's thing called <code>roption</code> which is computer science\"</p>",
        "id": 246315929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626515030
    },
    {
        "content": "<p>that might be halfway to solving the problem though</p>",
        "id": 246315975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626515049
    },
    {
        "content": "<p>That would be a good start</p>",
        "id": 246315978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626515054
    },
    {
        "content": "<p>Can we integrate complex-valued functions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>?</p>",
        "id": 246315985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626515077
    },
    {
        "content": "<p>yeah</p>",
        "id": 246315987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626515080
    },
    {
        "content": "<p>bochner baby</p>",
        "id": 246315990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626515088
    },
    {
        "content": "<p>the domain can be any measurable space although it's specialized to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\Bbb R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, and the codomain can be any complete vector space including <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\Bbb C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span></p>",
        "id": 246316056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626515169
    },
    {
        "content": "<p>given what we know about derivatives, I think you could even do a proof of the theorem in your talk</p>",
        "id": 246316085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626515239
    },
    {
        "content": "<p>but stating it in terms of a contour integral is out of reach at the moment, unless you define a parameterized contour integral on the spot just so the statement looks nice</p>",
        "id": 246316131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626515306
    },
    {
        "content": "<p>So is <code>complex_integral (F : Icc 0 1 \\to_&lt;whatever&gt; \\C) : \\C := ...</code> accessible? Do we have the correct bundled morphism?</p>",
        "id": 246316768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626516146
    },
    {
        "content": "<p>`(0 : \\R) if you really must, but everyone knows the default Icc is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 246316776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626516198
    },
    {
        "content": "<p>I have learnt to live without the square bracket notation but we could define S^1 to be this</p>",
        "id": 246316826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626516253
    },
    {
        "content": "<p>Why not? It's a model</p>",
        "id": 246316831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626516266
    },
    {
        "content": "<p>It could be Carneiro's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">S^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> -- a convenient model.</p>",
        "id": 246316854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626516331
    },
    {
        "content": "<p>You can create an instance of <code>topological space</code> later</p>",
        "id": 246316912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626516378
    },
    {
        "content": "<p>I managed this much:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">real</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">complex_path</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">//</span> <span class=\"n\">differentiable</span> <span class=\"n\">ℝ</span> <span class=\"n\">γ</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">complex_path</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">γ.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">S1_deriv</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S1</span> <span class=\"o\">:</span> <span class=\"n\">complex_path</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">S1_deriv</span> <span class=\"n\">t</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">S</span><span class=\"bp\">¹`</span> <span class=\"o\">:=</span> <span class=\"n\">S1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">contour_integral</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">complex_path</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">γ</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∮`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span> <span class=\"n\">γ</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">f</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">contour_integral</span> <span class=\"n\">γ</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∮</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"bp\">¹</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S1_deriv</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">exp_ne_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The <code>sorry</code> looks easy but there is something missing about deriving real derivatives from complex ones</p>",
        "id": 246317580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626517553
    },
    {
        "content": "<p>Do you need to use a result from <code>analysis.complex.real_deriv</code>?  (Just a hunch.)</p>",
        "id": 246317649,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626517642
    },
    {
        "content": "<p>I noticed that file, but it seems to be about restricting the codomain, not the domain</p>",
        "id": 246317662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626517667
    },
    {
        "content": "<p>actually I take it back, they are doing both at once</p>",
        "id": 246317730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626517755
    },
    {
        "content": "<p>they are a little overspecific</p>",
        "id": 246317732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626517770
    },
    {
        "content": "<p>I think what's missing is the <code>deriv</code> (i.e., 1d) version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fderiv_at.restrict_scalars\">docs#has_fderiv_at.restrict_scalars</a>.</p>",
        "id": 246318771,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626519458
    },
    {
        "content": "<p>In its absence one has to convert to a multivariate version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">S1_deriv</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">continuous_linear_map.id</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_real_clm</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">has_fderiv_at_iff_has_deriv_at</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">has_deriv_at_id</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_mul</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cexp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">h.restrict_scalars</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">t</span> <span class=\"n\">of_real_clm.has_fderiv_at</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_deriv_at</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246318785,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626519475
    },
    {
        "content": "<p>Wow, I didn't expect that all of this would fit in ~ 35 lines!</p>",
        "id": 246319083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626519841
    }
]