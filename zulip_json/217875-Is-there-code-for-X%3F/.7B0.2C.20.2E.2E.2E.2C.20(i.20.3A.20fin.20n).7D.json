[
    {
        "content": "<p>What is the best way to write the (fin)set of all <code>(j : fin n) &lt; i</code> for a given <code>i : fin n</code>? <code>(finset.range (i : ℕ)).map _</code>, <code>(finset.fin_range n).map _</code>, <code>Iic i</code>, ...?</p>",
        "id": 214055857,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603289919
    },
    {
        "content": "<p><code>univ.filter (\\lam j, j &lt; i)</code>?</p>",
        "id": 214055934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603289966
    },
    {
        "content": "<p>or a custom definition</p>",
        "id": 214055962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603289983
    },
    {
        "content": "<p>Does Iic give you the finset instance? If so then probably this is exactly what it's meant for.</p>",
        "id": 214055983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603289997
    },
    {
        "content": "<p>I don't think it does</p>",
        "id": 214056050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290010
    },
    {
        "content": "<p>A quick grep suggests no :(</p>",
        "id": 214056111,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603290037
    },
    {
        "content": "<p>what is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.fin_range\">docs#finset.fin_range</a>?</p>",
        "id": 214056172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290063
    },
    {
        "content": "<p>I guess it could be a generalization of <code>fin_range</code></p>",
        "id": 214056210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290087
    },
    {
        "content": "<p><code>fin_range (n : ℕ)</code> is the finset of all <code>fin n</code></p>",
        "id": 214056211,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603290088
    },
    {
        "content": "<p><code>fin_range' i (_ : i &lt;= n) : finset (fin n)</code></p>",
        "id": 214056312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290126
    },
    {
        "content": "<p>I agree a new definition will be useful. I'm leaning towards <code>(finset.range (i : ℕ)).attach_fin (lt_trans _ _)</code>.</p>",
        "id": 214056397,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603290173
    },
    {
        "content": "<p><code>list.fin_range</code> does it directly using <code>list.pmap</code> (which is basically a combination of <code>attach</code> and <code>map</code>, used to define <code>attach</code> in the first place)</p>",
        "id": 214056620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290268
    },
    {
        "content": "<p>(the advantage of generalizing the original construction of <code>finset.fin_range</code> instead of mapping it is that it executes/reduces a little faster)</p>",
        "id": 214056926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290391
    },
    {
        "content": "<p>I'm mapping <code>range</code>, not <code>fin_range</code>, right now, does that help?</p>",
        "id": 214057263,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603290527
    },
    {
        "content": "<p>well it's <code>finset.range</code>, which is already a pmap on <code>list.range</code></p>",
        "id": 214057511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290618
    },
    {
        "content": "<p><code>list.fin_range</code> is also a pmap on <code>list.range</code></p>",
        "id": 214057602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290653
    },
    {
        "content": "<p>maybe we should just have a template for pmaps on <code>list.range</code></p>",
        "id": 214057653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290669
    },
    {
        "content": "<p>oh wait, I guess that is <code>attach_fin</code></p>",
        "id": 214057865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290743
    },
    {
        "content": "<p>From the code, <code>finset.range</code> is <code>\\&lt;multiset.range _, nodup_range _\\&gt;</code>, which is <code>quot.mk (list.range n)</code>, so I'm not sure where the overhead comes in :/</p>",
        "id": 214057893,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603290756
    },
    {
        "content": "<p>Anyway, i just need it for a couple of proofs, so I'm not so concerned about evaluation speed right now. If you have profiler data, let me know :)</p>",
        "id": 214057967,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603290790
    },
    {
        "content": "<p>no you are right</p>",
        "id": 214057984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290797
    },
    {
        "content": "<p><code>finset.range</code> is really just <code>list.range</code></p>",
        "id": 214058003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290805
    },
    {
        "content": "<p>so your version only has one <code>pmap</code></p>",
        "id": 214058076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603290834
    },
    {
        "content": "<p>Any name suggestions for <code>fin_range' i</code> which also includes <code>i</code>: <code>fin_range_inclusive</code> ?</p>",
        "id": 214058731,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603291078
    },
    {
        "content": "<p>Maybe we should just rename the <code>range</code> functions to <code>I0o</code></p>",
        "id": 214058974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603291174
    },
    {
        "content": "<p><code>range</code> conflicts with <code>set.range</code> anyway</p>",
        "id": 214059091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603291217
    },
    {
        "content": "<p>I suppose another spelling would br <code>list.of_fn (\\lam (x : fin i), (x : fin n))</code> with whatever the appropriate cast invocation is. I found myself needing something very similar today, and ended up in fin casting hell no matter what I tried</p>",
        "id": 214107411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603310741
    },
    {
        "content": "<p>I'm checking out this refactor, and it seems there is still some abstraction to do. e.g. there are separate definitions for <code>finset.Ico : finset ℕ</code> and <code>finset.Ico_ℤ : finset ℤ</code>. In Haskell these are unified with the <code>Enum</code> typeclass, so maybe something like that?</p>",
        "id": 214167349,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603362012
    },
    {
        "content": "<p>A quick sketch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">enum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">enumFromTo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">enum</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"n\">enum</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"n\">enum</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n\n<span class=\"n\">list.Ico</span> <span class=\"o\">:=</span> <span class=\"n\">enum.enumFromTo</span>\n<span class=\"n\">multiset.Ico</span> <span class=\"o\">:=</span> <span class=\"n\">quot.mk</span> <span class=\"n\">list.Ico</span>\n<span class=\"n\">finset.Ico</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">multiset.Ico_nodup</span><span class=\"o\">)</span>\n\n<span class=\"n\">list.Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">list.Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n\n<span class=\"n\">list.I0o</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">list.Ico</span> <span class=\"mi\">0</span> <span class=\"n\">y</span>\n<span class=\"bp\">...</span>\n\n<span class=\"n\">list.I0c</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">list.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">y</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 214167937,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603362390
    },
    {
        "content": "<p>You might want an additional typeclass that proves <code>enum</code> produces an ordered list between the bounds</p>",
        "id": 214172352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603365359
    },
    {
        "content": "<p>I have a PR I'll put up shortly that could benefit from this typeclass - it might be useful for checking we're not missing anything</p>",
        "id": 214172924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603365768
    },
    {
        "content": "<p>Ah, the other lemma you might want is that <code>a ≤ b → b ≤ c → enumFromTo a b ++ enumFromTo b c = enumFromTo a b c</code></p>",
        "id": 214174412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603366870
    },
    {
        "content": "<p>My plan, if we like the <code>enum</code> class, is to replace the existing <code>range</code>/interval definitions and see which assumptions we need. Maybe split it up into <code>lawful_enum</code> (like <code>lawful_monad</code>) which extends <code>linear_order</code>. Then this would be extended by <code>enum_bot</code> (and <code>enum_top</code>?) which has instances for e.g. <code>fin n</code> and <code>ℕ</code>.</p>",
        "id": 214174759,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603367087
    },
    {
        "content": "<p>I assume that the laws we need will be clear from the re-implementation step</p>",
        "id": 214174799,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603367113
    },
    {
        "content": "<p>That's probably true. I think I was looking for exactly this in <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/non-dense.20orders/near/214039169\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/non-dense.20orders/near/214039169</a></p>",
        "id": 214174813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603367127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, <a href=\"https://github.com/leanprover-community/mathlib/issues/4739\">#4739</a> is the PR where I really wish I had a typeclass to generalize over.</p>",
        "id": 214176114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603367939
    },
    {
        "content": "<p>You mean something like the following code from a coming PR where I really wished I had a typeclass to generalize over? :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The permutation on `fin n` given by the cycle `(0 1 2 ... i)`.</span>\n\n<span class=\"sd\">If `n = 0` or `i = 0`, this is the identity permutation.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cycle_range'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">fin.pred_above</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fin.cons</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">fin.succ_above</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">fin.cons_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin.cons_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_above_pred_above</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">cons_succ_above_eq_self_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n    <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">fin.cons</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.cons_succ</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 214176302,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603368062
    },
    {
        "content": "<p>(I just finished a proof for the row/column expansion formula of a determinant.)</p>",
        "id": 214176551,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603368208
    },
    {
        "content": "<p>Right, I have some time now to get started with the <code>enum</code> class.</p>",
        "id": 214178526,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603369334
    },
    {
        "content": "<p>Small complication: <code>list.enum</code> already exists (the equivalent of <code>enumerate</code> in Python, of type <code>list α → list (ℕ × α)</code>), so that may cause some confusion.</p>",
        "id": 214180157,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603370203
    },
    {
        "content": "<p>Can't any enumerable type be constructed from nat? So you could have <a href=\"http://list.map\">list.map</a> (list.enum_from _ _) (<a href=\"http://prod.map\">prod.map</a> to_enum_type id)</p>",
        "id": 214187706,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603373816
    },
    {
        "content": "<p>Any linearly ordered type, yes. If the type is only partially ordered, <code>enum</code> is still useful (e.g. the list of subgroups in the other thread). For computation in some types, a specialized implementation is also useful (maybe you want to re-use the current value when constructing the successor).</p>",
        "id": 214190622,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603375116
    }
]