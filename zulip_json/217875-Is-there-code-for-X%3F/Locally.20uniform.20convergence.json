[
    {
        "content": "<p>Is any of these already in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_nhds_within_of_subset</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsU</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">inter_eq_right_iff_subset.mpr</span> <span class=\"n\">hsU</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">inter_mem_nhds_within</span> <span class=\"n\">t</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_locally_uniformly_on_iff</span> <span class=\"o\">[</span><span class=\"n\">locally_compact_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">tendsto_locally_uniformly_on</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"n\">œÜ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">K</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">tendsto_uniformly_on</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"n\">œÜ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">K</span> <span class=\"n\">hK1</span> <span class=\"n\">hK2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">tendsto_locally_uniformly_on_iff_tendsto_uniformly_on_of_compact</span> <span class=\"n\">hK2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">h.mono</span> <span class=\"n\">hK1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">hK1</span><span class=\"o\">,</span> <span class=\"n\">hK2</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hK3</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">compact_basis_nhds</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">ht.mem_nhds</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">mem_nhds_within_of_subset</span> <span class=\"n\">hK1</span> <span class=\"n\">hK3</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">K</span> <span class=\"n\">hK3</span> <span class=\"n\">hK2</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_locally_uniformly_on_iff_filter</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto_locally_uniformly_on</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"n\">œÜ</span> <span class=\"n\">t</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">tendsto_uniformly_on_filter</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"n\">œÜ</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tendsto_uniformly_on_filter</span><span class=\"o\">,</span> <span class=\"n\">eventually_prod_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs1</span><span class=\"o\">,</span> <span class=\"n\">hs2</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hs2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eventually_of_mem</span> <span class=\"n\">hs1</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">),</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hi</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">,</span> <span class=\"n\">hpb</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">pb</span><span class=\"o\">,</span> <span class=\"n\">hpb</span><span class=\"o\">,</span> <span class=\"n\">eventually_of_mem</span> <span class=\"n\">hpa</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">hi</span> <span class=\"n\">hy</span><span class=\"o\">)‚ü©</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_locally_uniformly_iff_filter</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto_locally_uniformly</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"n\">œÜ</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tendsto_uniformly_on_filter</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"n\">œÜ</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">tendsto_locally_uniformly_on_univ</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">nhds_within_univ</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n  <span class=\"bp\">@</span><span class=\"n\">tendsto_locally_uniformly_on_iff_filter</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">univ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>In particular, <code>tendsto_locally_uniformly</code> and <code>tendsto_uniformly_on_filter</code> (with <code>nhds</code>) are essentially the same things with the quantifiers reversed, and they both get some use in mathlib in different places but I couldn't find the equivalence.</p>",
        "id": 304353927,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665956795
    },
    {
        "content": "<p>Not answering the main question, but just FYI the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_uniformly_on_filter\">docs#tendsto_uniformly_on_filter</a> stuff is quite recent, so it‚Äôs not surprising if we are lacking API here</p>",
        "id": 304357425,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665960057
    },
    {
        "content": "<p>The first is<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_within_le_nhds\">docs#nhds_within_le_nhds</a> and doesn't need the second argument</p>",
        "id": 304399511,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665992838
    },
    {
        "content": "<p>As Anatole said, <span class=\"user-mention\" data-user-id=\"474023\">@Kevin Wilson</span> added the definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_uniformly_on_filter\">docs#tendsto_uniformly_on_filter</a> only recently in <a href=\"https://github.com/leanprover-community/mathlib/pull/15871\">#15871</a>.<br>\nI think it might be good to simplify the definitions of <code>tendsto_locally_uniformly_...</code> so that these properties are true by definition. Hopefully that will simplify proving the API for these lemmas (assuming the API for <code>tendsto_uniformly_on_filter</code> is good enough).<br>\nIn any case, I don't think the other lemmas exist yet.</p>",
        "id": 304515289,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666027225
    },
    {
        "content": "<p>Yes, this was a bit of laziness on my part. The motivation for the `uniformly_on_filter definitions was two-fold:</p>\n<ul>\n<li>It provided a nice way to unify basically all the proofs in that file up to <code>tendsto_locally_uniformly...</code></li>\n<li>The <code>uniformly_on_filter</code> notion makes it easier to see that uniform convergence is just convergence on the product filter, which is what I needed for the proof I was working on at the time.</li>\n</ul>\n<p>100% certain that there's API improvements to be had. :-)</p>",
        "id": 304537488,
        "sender_full_name": "Kevin Wilson",
        "timestamp": 1666033601
    },
    {
        "content": "<p>That makes sense - the risk would be to duplicate API between the two even though they are equivalent. Probably redefining <code>tendsto_locally_uniformly(_on)</code> in terms of <code>tendsto_uniformly_on_filter</code> would be relatively painless, and would prevent duplication.</p>",
        "id": 304544501,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666035952
    },
    {
        "content": "<p>I added <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_locally_uniformly_iff_forall_tendsto\">docs#tendsto_locally_uniformly_iff_forall_tendsto</a> some time ago (and ended up not using it). If we are considering changing the definition I would suggest we make this true by definition.</p>",
        "id": 304555495,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1666039813
    },
    {
        "content": "<p>Let me just say that this innocent lemma inspired me quite a lot when working on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_convergence.uniform_space\">docs#uniform_convergence.uniform_space</a> (and related things), and I think it also what inspired Kevin for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_uniformly_on_filter\">docs#tendsto_uniformly_on_filter</a>. I love how one single lemma in 100k can still give ideas to people who are not searching for it</p>",
        "id": 304562046,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1666042136
    },
    {
        "content": "<p>Indeed! Many thanks :-)</p>",
        "id": 304583531,
        "sender_full_name": "Kevin Wilson",
        "timestamp": 1666051211
    }
]