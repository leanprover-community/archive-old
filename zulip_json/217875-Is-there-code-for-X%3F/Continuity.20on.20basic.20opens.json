[
    {
        "content": "<p>I find it hard to believe that we don't have the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_of_basis_preimage_open</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_topological_basis</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open_preimage</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hB.open_eq_Union</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.preimage_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB.is_open</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Am I just not seeing it?</p>",
        "id": 253880711,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631984515
    },
    {
        "content": "<p>I wouldn't be surprised if it's not there... the API for topological bases needs some attention.</p>",
        "id": 253887881,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631992508
    },
    {
        "content": "<p>Indeed this thing is defined and not used much. However your statement is needlessly complicated. In assumption <code>hf</code>, the openness condition is automatic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_of_basis_preimage_open</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_topological_basis</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open_preimage</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hB.open_eq_Union</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.preimage_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 253889973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1631994898
    },
    {
        "content": "<p>Note that if you want to develop this you should probably try to tie it to our extensive filter library. The reason why this subarea of our topology library is underdeveloped is because the notion of filter bases is so much more useful.</p>",
        "id": 253890062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1631994971
    },
    {
        "content": "<p>Another option is to rewrite on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.is_topological_basis.eq_generate_from\">docs#topological_space.is_topological_basis.eq_generate_from</a> (available as <code>B.eq_generate_from</code>), then apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_generated_from\">docs#continuous_generated_from</a></p>",
        "id": 253890105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631995057
    },
    {
        "content": "<p>Thanks for your comments! With Yury's proof it gets very trivial. Do you think it would still be worth it having this lemma?</p>",
        "id": 253952319,
        "sender_full_name": "Justus Springer",
        "timestamp": 1632065299
    },
    {
        "content": "<p>I PR'd it: <a href=\"https://github.com/leanprover-community/mathlib/issues/9281\">#9281</a></p>",
        "id": 253952442,
        "sender_full_name": "Justus Springer",
        "timestamp": 1632065450
    },
    {
        "content": "<p>But I can close it again if you think it's not worth it.</p>",
        "id": 253952454,
        "sender_full_name": "Justus Springer",
        "timestamp": 1632065473
    },
    {
        "content": "<p>We have lots of short and simple convenience lemmas. This one will be a nice addition to the list.</p>",
        "id": 254134910,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632180828
    }
]