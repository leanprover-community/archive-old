[
    {
        "content": "<p>I'm interested in a particular finite category (it has 6 objects and a total of 17 morphisms) and verifying a fact about it, preferably by brute force. Is there a convenient way to write it down in such a way that I get <code>fintype</code> instances for all the Hom-types?</p>",
        "id": 271517661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644541363
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.fin_category\">docs#category_theory.fin_category</a> is the first thing that I can think of</p>",
        "id": 271518026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644541699
    },
    {
        "content": "<p>Well, you would have to provide the <code>fintype</code> instances yourself. I don't know if <code>derive</code> would work in your case.</p>",
        "id": 271518223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644541872
    },
    {
        "content": "<p>Right so my first, and perhaps only, question is in something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ob</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"bp\">|</span> <span class=\"n\">D</span> <span class=\"bp\">|</span> <span class=\"n\">E</span> <span class=\"bp\">|</span> <span class=\"n\">F</span>\n<span class=\"kn\">open</span> <span class=\"n\">Ob</span>\n\n<span class=\"kd\">@[derive fintype]</span>   <span class=\"c1\">-- @[derive fintype]: inductive indices are not supported</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">Ob</span> <span class=\"bp\">→</span> <span class=\"n\">Ob</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"c1\">-- more constructors</span>\n</code></pre></div>\n<p>is there a way to avoid manually writing an instance for <code>Π (x y : Ob), fintype (Hom x y)</code>?</p>",
        "id": 271534702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644558863
    },
    {
        "content": "<p>Do you want it to compute?</p>",
        "id": 271534786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644558966
    },
    {
        "content": "<p>You could have a collection of inductives and use a <code>def</code> to choose between them</p>",
        "id": 271534803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644559001
    },
    {
        "content": "<p>Well, what I want in the end is some way to automatically check associativity (and another similar condition which is relevant to my problem)</p>",
        "id": 271534846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644559080
    },
    {
        "content": "<p>I guess I don't really care whether it is <code>dec_trivial</code> or a tactic that generates a proof with 100 cases</p>",
        "id": 271534902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644559115
    },
    {
        "content": "<p>I think that will be okay, although 6^3 is... <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 271534909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644559120
    },
    {
        "content": "<p>I feel like this needs some kind of custom automation</p>",
        "id": 271534933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644559158
    },
    {
        "content": "<p>Is it important that you get <code>Π (x y : Ob), fintype (Hom x y)</code> as opposed to only <code>fintype (Hom A A)</code>, <code>fintype (Hom A B)</code> etc ? If not you could define <code>Hom</code> by pattern matching.</p>",
        "id": 271556917,
        "sender_full_name": "David Wärn",
        "timestamp": 1644575444
    },
    {
        "content": "<p>Maybe you could use subtypes to get the fintype instances? I got this to work for a 2-object 4-morphism category.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.fin_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">objs</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">mors</span> <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"n\">b1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"bp\">→</span> <span class=\"n\">objs</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.a1</span> <span class=\"o\">:=</span> <span class=\"n\">objs.a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.f</span> <span class=\"o\">:=</span> <span class=\"n\">objs.a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.g</span> <span class=\"o\">:=</span> <span class=\"n\">objs.a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.b1</span> <span class=\"o\">:=</span> <span class=\"n\">objs.b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"bp\">→</span> <span class=\"n\">objs</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.a1</span> <span class=\"o\">:=</span> <span class=\"n\">objs.a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.f</span> <span class=\"o\">:=</span> <span class=\"n\">objs.a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.g</span> <span class=\"o\">:=</span> <span class=\"n\">objs.b</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.b1</span> <span class=\"o\">:=</span> <span class=\"n\">objs.b</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">mors'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">objs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">objs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">mors'</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">objs</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mors'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">objs</span><span class=\"o\">),</span> <span class=\"n\">mors'</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">objs.a</span>  <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mors.a1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">objs.b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mors.b1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"bp\">→</span> <span class=\"n\">mors</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">mors</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.a1</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"n\">objs.a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ψ</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">ϕ</span> <span class=\"n\">mors.a1</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"n\">ϕ</span> <span class=\"bp\">=</span> <span class=\"n\">objs.a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ϕ</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.b1</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"n\">objs.b</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ψ</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">ϕ</span> <span class=\"n\">mors.b1</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"n\">ϕ</span> <span class=\"bp\">=</span> <span class=\"n\">objs.b</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ϕ</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.f</span> <span class=\"n\">mors.f</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">mors.a1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mors.f</span> <span class=\"n\">mors.g</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">mors.g</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- after this point, everything is generic and should work even after changing the above data</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">objs</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mors'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">mors'</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">mors'</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"n\">ρ</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ρ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ψ</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"n\">at</span> <span class=\"n\">hc</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">ρ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ψ</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">objs</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ids</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">comp'</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ρ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ψ</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ρ</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 271570913,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644583835
    },
    {
        "content": "<p>But if it would work to case bash for your other condition (rather than needing <code>fintype</code> instances), this works fine for proving it's a category (after needing to alter how composition works to appease the equation compiler) and is significantly faster:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.fin_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">objs</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">@[derive [decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">mors</span> <span class=\"o\">:</span> <span class=\"n\">objs</span> <span class=\"bp\">→</span> <span class=\"n\">objs</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"n\">objs.a</span> <span class=\"n\">objs.a</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"n\">objs.a</span> <span class=\"n\">objs.a</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"n\">objs.a</span> <span class=\"n\">objs.b</span>\n<span class=\"bp\">|</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">mors</span> <span class=\"n\">objs.b</span> <span class=\"n\">objs.b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">objs</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mors</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">objs</span><span class=\"o\">),</span> <span class=\"n\">mors</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">objs.a</span>  <span class=\"o\">:=</span> <span class=\"n\">mors.a1</span>\n<span class=\"bp\">|</span> <span class=\"n\">objs.b</span> <span class=\"o\">:=</span> <span class=\"n\">mors.b1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">mors</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">mors</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">mors</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mors.a1</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mors.f</span> <span class=\"n\">mors.a1</span> <span class=\"o\">:=</span> <span class=\"n\">mors.f</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mors.b1</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"n\">ψ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mors.g</span> <span class=\"n\">mors.b1</span> <span class=\"o\">:=</span> <span class=\"n\">mors.g</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mors.f</span> <span class=\"n\">mors.f</span> <span class=\"o\">:=</span> <span class=\"n\">mors.a1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mors.f</span> <span class=\"n\">mors.g</span> <span class=\"o\">:=</span> <span class=\"n\">mors.g</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">objs</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ids</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">comp</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ψ</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">ρ</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 271572452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644584601
    },
    {
        "content": "<p>I guess creating <code>fintype</code> instances for this in a somewhat generic way isn't too bad, if you need them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">objs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">mors</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">mors</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"n\">mors.a1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"n\">mors.f</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"n\">mors.g</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"n\">mors.b1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ϕ</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.not_mem_empty</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271575445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644585889
    },
    {
        "content": "<p>FWIW while thinking about how to check the other properties of the category I care about, I realized that by adjusting the category slightly I can make them easy to check by hand... so I no longer really need this.</p>",
        "id": 271719560,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644714824
    }
]