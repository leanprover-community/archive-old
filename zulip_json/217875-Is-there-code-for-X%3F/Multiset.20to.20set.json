[
    {
        "content": "<p>What is the canonical way to get a <code>set α</code> containing the elements of <code>s : multiset α</code>? <code>(∈ s)</code>, <code>↑s.to_finset</code>, something else?</p>",
        "id": 209111610,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599235310
    },
    {
        "content": "<p>You can always abuse the <code>has_mem</code> instance :)</p>",
        "id": 209113049,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599236160
    },
    {
        "content": "<p>I don't know how canonical that is.</p>",
        "id": 209113121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599236186
    },
    {
        "content": "<p>From some experimenting, <code>to_finset</code> has better support for <code>rw</code> and <code>simp</code> than <code>(∈ s)</code>, but either way is not very nice.</p>",
        "id": 209113692,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599236508
    },
    {
        "content": "<p>Ah I see, that's exactly what you meant by <code>(\\in S)</code>.</p>",
        "id": 209113775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599236541
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 209113971,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599236645
    },
    {
        "content": "<p>I guess less inscrutability is another argument for <code>to_finset</code>.</p>",
        "id": 209113974,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599236647
    },
    {
        "content": "<p>This is completely a personal opinion (and clearly does not agree with what's done in mathlib), but I think the canonical way to produce a set from anything should always be via <code>has_mem</code>. This would at least provide some consistency.</p>",
        "id": 209113981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599236655
    },
    {
        "content": "<p>I agree. In fact, I think there was a suggestion floating around that <code>has_mem</code> should only exist for <code>set</code>, and to access the syntax for other types, you should just provide the coercion to <code>set</code>.</p>",
        "id": 209114188,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599236800
    },
    {
        "content": "<p><code>has_mem</code> should not even exist. It should just be notation for sets.</p>",
        "id": 209114276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599236872
    },
    {
        "content": "<p>I wrote thousands of lines of group theory over the summer and I would have gone completely nuts if I couldn't write <code>x \\in H</code> for <code>H : subgroup G</code>.</p>",
        "id": 209114609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599237082
    },
    {
        "content": "<p>But you already introduced the coercion to <code>set G</code> as <code>carrier</code> right?</p>",
        "id": 209114645,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599237120
    },
    {
        "content": "<p>So why not use it?</p>",
        "id": 209114689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599237125
    },
    {
        "content": "<p>This way you would never have to prove that <code>{x : G | x \\in H} = (H : set G)</code>.</p>",
        "id": 209115080,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599237402
    },
    {
        "content": "<p>I tried making this change in core Lean once but things failed horribly <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> <br>\nI think mainly what broke were things like (made up example) <code>∀ l, (∀ x, x ∉ l) ↔ list.length l = 0</code> where current Lean keeps an open mind about <code>l</code> until it sees <code>list.length l</code>, but with the change <code>x ∉ l</code> already makes Lean think <code>l</code> is a <code>set</code> and when it gets to <code>list.length l</code> it's too late.</p>",
        "id": 209115234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599237505
    },
    {
        "content": "<p>I gave up at that point but it's possible a more cunning approach would have worked.</p>",
        "id": 209115390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599237608
    },
    {
        "content": "<p>In this case, wouldn't this be okay? <code>∀ l, list.length l = 0 ↔  (∀ x, x ∉ l) </code></p>",
        "id": 209115512,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599237702
    },
    {
        "content": "<p>Probably, but there were many examples of this kind of thing</p>",
        "id": 209115580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599237728
    },
    {
        "content": "<p>I wonder what it would be like if there were a mechanism to make every theorem and definition about <code>set</code> be automatically generalized to anything with a <code>has_mem</code> instance, since <code>has_mem</code> is basically a coercion to a <code>set</code> already:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">has_mem_to_set</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">set_of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(It seems like it's more convenient proving things about <code>set</code>s rather than about types with <code>has_mem</code> instances, so that's why I'm suggesting the idea of automatic generalization.  This is something an attribute could do, right?)</p>",
        "id": 209121297,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599241032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiset.20to.20set/near/209114689\">said</a>:</p>\n<blockquote>\n<p>So why not use it?</p>\n</blockquote>\n<p>Because then I get random up-arrows everywhere, which makes the code look more confusing to mathematicians?</p>",
        "id": 209121500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599241156
    },
    {
        "content": "<p>I guess it wouldn't work to generalize <em>every</em> theorem/definition, because some rely on sets forming a lattice.</p>\n<p>There are some big problems with this proposal, but I'm still curious about whether an attribute is able to do this kind of metaprogramming.</p>",
        "id": 209121977,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599241465
    },
    {
        "content": "<p>I've also wondered whether there really needs to be a type class, or whether we could do some even more ad hoc thing like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">∈</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">has</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>and then rely on <code>.</code> notation to get what we want</p>",
        "id": 209122313,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599241708
    },
    {
        "content": "<p>Would that be like how <code>::</code> is notation defined by vectors, multisets, lists, and others?</p>",
        "id": 209122392,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599241765
    },
    {
        "content": "<p>How does Lean disambiguate notation?  It seems to do a reasonably good job at it, whatever it's doing.</p>",
        "id": 209122488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599241804
    },
    {
        "content": "<p>This is a different suggestion. More like duck typing.<br>\nThe disadvantage is you could never abstract over a <code>has_mem</code> instance. But I could only find one such occurrence in the core library and mathlib, and it just relates <code>∈</code> and <code>∉</code>, which you could achieve anyways.</p>",
        "id": 209123627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599242507
    },
    {
        "content": "<p>I understand that this opinion is controversial, but here is a related observation/question. Whenever we have two types <code>X</code> and <code>Y</code> with a <code>has_mem X Y</code>, you get a natural map from <code>Y</code> to <code>set X</code> given by sending <code>y</code> to <code>{x : X | x \\in y}</code>. Is there any reasonable example where there is also a coercion from <code>Y</code> to <code>set X</code>where these two are not defeq?</p>",
        "id": 209123639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599242518
    },
    {
        "content": "<p>I don't really understand how notation overloading works--it may appear to work well because the <code>::</code> for multiset is used mostly in <code>multiset.lean</code> or whatever, which also defines it.</p>",
        "id": 209123708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599242541
    },
    {
        "content": "<p>I think that Patrick fought hard to get the exact opposite behaviour for filters: he wanted <code>s \\in F</code> because he felt it looked much more natural than <code>s \\in F.sets</code>. IIRC his argument was the same as mine -- it just looks more like what a mathematician would write. I don't know any examples where there's a coercion which isn't defeq.</p>",
        "id": 209124159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599242812
    },
    {
        "content": "<p>Kevin, everyone wants to write <code>s \\in F</code> and <code>g \\in H</code>, I think. The question is how to implement it so that Lean isn't so frequently baffled by the relationship between the type of a set and the type of its elements, and maybe also to be able to apply lemmas about <code>\\forall x \\in s, ...</code> for sets to things that are not sets, etc.</p>",
        "id": 209124373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599242932
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">∈₁</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">∈₁</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Unfortunately the uparrow appears in the goal window.</p>",
        "id": 209124647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599243104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> That natural map is the <code>has_mem_to_set</code> that I wrote, though I used <code>set_of</code> rather than set builder notation for some reason.  (The answer to your question ought to be \"no,\" I'd hope!)</p>",
        "id": 209124705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599243125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiset.20to.20set/near/209123708\">said</a>:</p>\n<blockquote>\n<p>I don't really understand how notation overloading works--it may appear to work well because the <code>::</code> for multiset is used mostly in <code>multiset.lean</code> or whatever, which also defines it.</p>\n</blockquote>\n<p>I was adding <code>::</code> to <code>data.sym</code>, and some theorems involved <code>::</code> for multisets, vectors, and lists, so I was impressed the overloading just worked.</p>",
        "id": 209124844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599243242
    },
    {
        "content": "<p>For example Lean doesn't understand what it should do with <code>lemma h (s : set ℕ) : ∀ x ∈ s, x ∈ set.univ := sorry</code>, but it works if you add <code>local notation x ` ∈ ` s := @has_mem.mem _ _ set.has_mem x s</code>. It's pretty frustrating because attaching a predicate <code>_ ∈ t</code> to some object <code>t</code> is exactly what it means to coerce <code>t</code> to a set!</p>",
        "id": 209125038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599243343
    },
    {
        "content": "<p>Regarding <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s point, would it break anything to remove all <code>has_coe _ (set _)</code> instances and replace them all with the following single instance?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Then to define a coercion, you implement <code>has_mem</code>.</p>",
        "id": 209126061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599243957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiset.20to.20set/near/209126061\">said</a>:</p>\n<blockquote>\n<p>Regarding <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>'s point, would it break anything to remove all <code>has_coe _ (set _)</code> instances and replace them all with the following single instance?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Then to define a coercion, you implement <code>has_mem</code>.</p>\n</blockquote>\n<p>I'm fine with that too. I'm mostly asking for consistency.</p>",
        "id": 209126154,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599244006
    },
    {
        "content": "<p>Oh right, I forgot you were suggesting the other way.  Here's that one, too, for completeness:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">has_mem_from_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 209126387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599244134
    },
    {
        "content": "<p>Though at that point, it may as well be something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">mem</span>\n</code></pre></div>\n\n\n<p>removing <code>has_mem</code> entirely.</p>",
        "id": 209126683,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599244313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Multiset.20to.20set/near/209126061\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>This must be <code>has_coe_t</code>, or otherwise it would loop.</p>",
        "id": 209138309,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1599251812
    },
    {
        "content": "<p>I spent a little while investigation dropping <code>has_mem</code> in favour of the coercion. Unfortunately the place it fails down is when you want to write <code>a \\mem s ++ t</code>, say for <code>s t : list X</code>. Then Lean coerces the RHS to a <code>set</code>, and can no longer find <code>++</code>.</p>",
        "id": 209961351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600052355
    },
    {
        "content": "<p>Is there a way to \"lock\" a typeclass so only a fixed set of instances are allowed?  (Community agreement counts <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)  If so, then this could work to effectively drop <code>has_mem</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">new_has_mem</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"err\">∈</span>        <span class=\"o\">:=</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">coe_has_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- then no other instances to has_mem ever!</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mem_coe_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">new_has_mem</span>\n</code></pre></div>\n\n\n<p>It turns out what I'd tried with <code>infix</code> before didn't work at all.  I'd hoped it would make Lean prefer <code>set.mem</code> for sets, but it just caused it to not be able to disambiguate the notation.  The above does effectively the same thing, but actually works. <code>set.mem</code> should have higher priority than the coercion (and if it's only working right now because there's no coersion from a set to a set, the priority could be set explicitly).</p>",
        "id": 209972317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600068472
    },
    {
        "content": "<p>I'm not saying I'm in favor of dropping <code>has_mem</code>.  It seems a bit nicer to me to keep <code>has_mem</code> but then replace all coercions to set with a single coercion that uses <code>has_mem</code> to implement it.</p>",
        "id": 209972420,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600068534
    },
    {
        "content": "<p>That is an interesting approach! It does not infer <code>{y, z} : set ℕ</code> in <code>example (x y z : ℕ) : x ∈ {y, z} := sorry</code>, which ideally I was hoping for. The current <code>has_mem</code> has the same issue though. So it looks like the <code>coe_has_mem</code> approach works at least as well as the current <code>has_mem</code>.</p>",
        "id": 209983546,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1600076983
    }
]