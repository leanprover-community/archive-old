[
    {
        "content": "<p>I was just trying to use a result that wants a <code>monoid_with_zero</code> on a <code>non_assoc_ring</code>, but I get the complaint <code>failed to synthesize type class instance</code>. Looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero\">docs#monoid_with_zero</a> and the instances listed there, I see <code>semiring.to_monoid_with_zero</code>, but not <code>non_assoc_ring.to_monoid_with_zero</code> (or <code>non_assoc_semiring.to_monoid_with_zero</code>). Is this a gap in mathlib?</p>",
        "id": 308823585,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668011354
    },
    {
        "content": "<p>Monoids are by definition associative, right? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero.mul_assoc\">docs#monoid_with_zero.mul_assoc</a></p>",
        "id": 308823938,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668011452
    },
    {
        "content": "<p>OK, of course! I was trying to generalize a result that I want for the integers (but involves only 0, 1 and -1) as far as possible, but it seems I went to far...</p>",
        "id": 308824399,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668011600
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_assoc_semiring.to_mul_zero_one_class\">docs#non_assoc_semiring.to_mul_zero_one_class</a> though</p>",
        "id": 308824589,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668011654
    },
    {
        "content": "<p>But this is not enough, since I need <code>-1</code>.</p>",
        "id": 308824724,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668011694
    },
    {
        "content": "<p>So I'm using <code>ring</code> now instead...</p>",
        "id": 308825103,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668011809
    },
    {
        "content": "<p>Or is there something like a <code>monoid_with_zero_and_negation</code>?</p>",
        "id": 308825157,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668011829
    },
    {
        "content": "<p>maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_distrib_neg\">docs#has_distrib_neg</a> in addition?</p>",
        "id": 308825487,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668011925
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_non_assoc_ring.to_has_distrib_neg\">docs#non_unital_non_assoc_ring.to_has_distrib_neg</a></p>",
        "id": 308825549,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668011941
    },
    {
        "content": "<p>OK, I'll try that after finishing the proof!</p>",
        "id": 308825690,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668011981
    },
    {
        "content": "<p>Thus is the thing you didn't want to use sign_type for, right?</p>",
        "id": 308825737,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668011991
    },
    {
        "content": "<p>I want to use it with a ring (like the integers), which is not an instance of <code>sign_type</code>...</p>",
        "id": 308825965,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668012041
    },
    {
        "content": "<p>One could state it for <code>sign_type</code>, I suppose, but then <code>sign_type</code> should be an instance of all the things needed here anyway, so the result should specialize to that case.</p>",
        "id": 308826100,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668012084
    },
    {
        "content": "<p>What I need is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod_eq_zero\">docs#list.prod_eq_zero</a>, which wants a <code>monoid_with_zero</code>, but I would think that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_zero_class\">docs#mul_zero_class</a> should be sufficient? I also need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod_eq_one\">docs#list.prod_eq_one</a>, which wants a <code>monoid</code>, but something weaker (like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_one_class\">docs#mul_one_class</a>) should also suffice there.</p>",
        "id": 308830753,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668013444
    },
    {
        "content": "<p>Yes many lemmas about <code>prod</code> assume the operation is associative, because otherwise there are many choices for the product, so it isn't particularly clear why producting from the left is the right one. But I'm sure this assumption can be removed in this case of a degenerate product.</p>",
        "id": 308831738,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668013791
    },
    {
        "content": "<p>The proof of <code>prod_eq_one</code> probably has to change to a more explicit induction though, <code>prod_eq_pow_card</code> doesn't make sense without a power operation, which <code>mul_one_class</code> doesn't have</p>",
        "id": 308832661,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668014126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60non_assoc_ring.60.20is.20not.20a.20.60monoid_with_zero.60.3F/near/308825157\">said</a>:</p>\n<blockquote>\n<p>Or is there something like a <code>monoid_with_zero_and_negation</code>?</p>\n</blockquote>\n<p>Isn't that just an additive group?</p>",
        "id": 308842014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668017279
    },
    {
        "content": "<p>Not sure what you mean? There is no <code>add_monoid_with_zero</code>, something like the interval <code>Icc -1 1</code> in the reals is a monoid with zero and negation, but not an additive group</p>",
        "id": 308844554,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668018111
    },
    {
        "content": "<p>I assume \"with negation\" means \"with lawful negation\"?</p>",
        "id": 308844851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668018202
    },
    {
        "content": "<p>which implies you also have an addition and most likely an additive group structure</p>",
        "id": 308844996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668018243
    },
    {
        "content": "<p>I'm not sure there are any particular properties you can point to of negation on <code>Icc -1 1</code> other than that it's an involution</p>",
        "id": 308845263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668018344
    },
    {
        "content": "<p>We have all sorts of things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_distrib_neg\">docs#has_distrib_neg</a> that don't have additive structures</p>",
        "id": 308845383,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668018373
    },
    {
        "content": "<p>In any case I agree that the question do we have \"monoid_with_zero_and_negation\" needs to be a bit more specific to make sense</p>",
        "id": 308845522,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668018427
    },
    {
        "content": "<p>After thinking about it, I would say that trying to go for <code>mul_zero_one_class</code> with <code>has_distrib_neg</code> doesn't make that much sense, since in all use cases I can imagine, one will have a monoiod anyway. So I'm going with <code>[monoid_with_zero α] [has_distrib_neg α]</code> (which seems to capture what I meant by a <code>monoid_with_zero_and_negation</code>).</p>",
        "id": 308845785,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668018517
    },
    {
        "content": "<p>beware, that will put two multiplications on your type and so is probably not what you want</p>",
        "id": 308847938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668019204
    },
    {
        "content": "<p>I don't think thats the case here, <code>has_distrib_neg</code> is a mixin</p>",
        "id": 308848160,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668019305
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.prod_eq_neg_one</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_distrib_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.prod</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">list.prod_eq_zero</span> <span class=\"n\">h₀</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">eq_or_ne</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">or.neg_resolve_left</span> <span class=\"n\">hh</span> <span class=\"n\">h₁</span> <span class=\"n\">rfl</span><span class=\"o\">)},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list.mem_cons_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n                <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">list.mem_cons_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h₀</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">list.mem_cons_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.prod_eq_one</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">or.resolve_right</span> <span class=\"o\">(</span><span class=\"n\">or.assoc.mpr</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">))</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hf'</span><span class=\"o\">,</span> <span class=\"n\">h₀</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"bp\">▸</span> <span class=\"n\">hn</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.int_prod_eq_neg_one</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.prod</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.prod_eq_neg_one</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"n\">ht</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>The extra assumption <code>hh</code> is a bit annoying, but unavoidable...</p>",
        "id": 308854963,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668021380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60non_assoc_ring.60.20is.20not.20a.20.60monoid_with_zero.60.3F/near/308845263\">said</a>:</p>\n<blockquote>\n<p>I'm not sure there are any particular properties you can point to of negation on <code>Icc -1 1</code> other than that it's an involution</p>\n</blockquote>\n<p>It's an <em>order-reversing</em> involution (assuming negation is order-reversing on the underlying type of <code>1</code> and <code>-1</code>). Which means that a series of lemmas about <code>neg</code> and orders, that currently are only available for additive groups (and with unfortunate <code>left</code>/<code>right</code> duplication), are also true for that interval (as well as for <code>ereal</code>, <code>sign_type</code>, etc.).</p>\n<p>I don't expect to return to the series of PRs aiming at making those lemmas more widely applicable (that started with <a href=\"https://github.com/leanprover-community/mathlib/pull/16187\">#16187</a>) until after the mathlib4 migration is complete, since they'd now involving changing a mixture of frozen and unfrozen files. But if someone does wish to work in that area before then (and deal with doing PRs in both places) I could outline what I think some of the next few steps might be.</p>",
        "id": 308861060,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1668023412
    },
    {
        "content": "<p>Here is a simpler version.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_ne_zero_or_one</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">l.prod</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">l.prod</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">prod_eq_one</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hf'</span><span class=\"o\">,</span> <span class=\"n\">h₀</span> <span class=\"bp\">$</span> <span class=\"n\">prod_eq_zero</span> <span class=\"bp\">$</span> <span class=\"n\">hf'</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">int_prod_eq_neg_one</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.prod</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hx₀</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"n\">prod_ne_zero_or_one</span> <span class=\"o\">(</span><span class=\"n\">ne_of_eq_of_ne</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne_of_eq_of_ne</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">hx₀</span><span class=\"o\">)</span> <span class=\"n\">hx₁</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>\n<p>I have some additional API lemmas on Legendre and Jacobi symbols that I would like to PR at some point, one of which needs <code>int_prod_eq_neg_one</code> from above. Would it make sense to PR these two lemmas and put them somewhere into <code>data.list.big_operators</code>? Or should I better do the proof of <code>int_prod_eq_neg_one</code> locally where it is needed? I can image that it is too specialized for mathlib, but it can easily be generalized to rings of characteristic zero (at the cost of having to put in explicit proofs of <code>-1 ≠ 0</code> and <code>-1 ≠ 1</code>). Or maybe do it for nontrivial rings and add <code>-1 ≠ 1</code> as an assumption...</p>",
        "id": 309078237,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668113876
    },
    {
        "content": "<p><code>int_prod_eq_neg_one</code> shouldn't need <code>ht</code> at all (any product of integers equal to <code>-1</code> must include a term equal to <code>-1</code>).</p>",
        "id": 309118321,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1668132650
    },
    {
        "content": "<p>True. But then it doesn't generalize to a lot of other rings <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\n(Also, in my use case, I know beforehand that the factors are in {0, 1, -1}, so there is no penalty in having the assumption.)</p>",
        "id": 309152529,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668157534
    },
    {
        "content": "<p>Tthe question then is, would it make sense to have <code>int_prod_eq_neg_one</code> without <code>ht</code> as a lemma in mathlib?</p>",
        "id": 309152699,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668157600
    }
]