[
    {
        "content": "<p>Is there any way to talk about the minimal elements of a set in an order and do we have the proof that if the set has no descending chain every element is greater than a minimal element?</p>",
        "id": 266832015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641314438
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/src/order/well_founded_set\">file#src/order/well_founded_set</a>?</p>",
        "id": 266832268,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641314552
    },
    {
        "content": "<p>Pretty certain we don't have that as pure order theory (except for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_wf\">docs#set.is_wf</a> and around), but I'm sure you ring people will have done it on your own</p>",
        "id": 266832297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641314558
    },
    {
        "content": "<p>specifically maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.well_founded_on_iff_no_descending_seq\">docs#set.well_founded_on_iff_no_descending_seq</a></p>",
        "id": 266832387,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641314598
    },
    {
        "content": "<p>I know about all of that, but it doesn't talk about minimal elements.</p>",
        "id": 266832550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641314667
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_wf.min\">docs#set.is_wf.min</a>? or am I missing something dumb again... you'll know more about the order theory</p>",
        "id": 266832677,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641314720
    },
    {
        "content": "<p>Nah, this is for a linear order.</p>",
        "id": 266832709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641314737
    },
    {
        "content": "<p>I'm actually interested in cowellfoundedness, not wellfoundedness. And my end statement is that a downward closed set of finsets of maximal elements of size n contains finsets of all lower sizes under each finset.</p>",
        "id": 266833113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641314900
    },
    {
        "content": "<p>The size bit is generally true in a ranked/graded order, and I expect the \"I'm less than some maximal element\" is true generally.</p>",
        "id": 266833273,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641314981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span>, you might have ideas.</p>",
        "id": 266833326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641315000
    },
    {
        "content": "<p>For the first question do you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_least\">docs#is_least</a>? EDIT: oh wait, you asked for <em>minimal</em>, but that might still suffice if you're working in a linear order.<br>\nI don't think the second question is there, but it shouldn't be too hard with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zorn.zorn_partial_order\">docs#zorn.zorn_partial_order</a> (on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a>) + a lemma that states that for a linear order <code>is_least</code> coincides with being minimal.</p>",
        "id": 266833450,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641315035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Minimal.20elements.20and.20descending.20chains/near/266832709\">said</a>:</p>\n<blockquote>\n<p>Nah, this is for a linear order.</p>\n</blockquote>\n<p>What is?</p>",
        "id": 266833997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641315313
    },
    {
        "content": "<p>Oh yeah of course. I wanted the set of minimal elements, but <code>is_least</code> will do EDIT: No, it doesn't. However I don't see how Zorn helps here. Zorn doesn't know about the ascending/descending chain condition.</p>",
        "id": 266834132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641315372
    },
    {
        "content": "<p>Ah, maybe if I apply <code>set.is_wf.min</code> to a subset of my original set?</p>",
        "id": 266834228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641315431
    },
    {
        "content": "<p>Oh I see, there is indeed a gap between your formulation and Zorn... You could still use Zorn: if there is no infinite descending chain, then every chain is finite so has a lower bound, so by Zorn you get a minimal element. Probably there is a more direct proof though.</p>",
        "id": 266834491,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641315562
    },
    {
        "content": "<p>Also, is there really no dual to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_wf\">docs#set.is_wf</a>? I foresee that doing through <code>order_dual</code> might be a bit painful.</p>",
        "id": 266835006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641315755
    },
    {
        "content": "<p>Btw, I already defined maximal elements as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_antichain.mk\">docs#is_antichain.mk</a>. Maybe it deserves a better name...</p>",
        "id": 266835552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641316021
    },
    {
        "content": "<p>That definitely deserves a better name, since you could equally well have taken the minimal elements :-)</p>",
        "id": 266836081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641316275
    },
    {
        "content": "<p>Okay, I will make a new file with definitions <code>maxima</code> and <code>minima</code> and a little API!</p>",
        "id": 266836162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641316312
    },
    {
        "content": "<p>Maybe we can then refactor <code>order.zorn</code> to use it?</p>",
        "id": 266836240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641316331
    },
    {
        "content": "<p>I can also add them to <code>order.bounds</code>. Any preference?</p>",
        "id": 266836485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641316452
    },
    {
        "content": "<p>If you formulate them using the <code>≤</code> relation, <code>order.bounds</code> seems like the right place to put it. Otherwise, not so much.</p>",
        "id": 266836855,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641316654
    },
    {
        "content": "<p>Given that <code>is_antichain</code> works for any relation, it would be nice if <code>minima</code> and <code>maxima</code> did too.</p>",
        "id": 266836969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641316708
    },
    {
        "content": "<p>This might be overly pedantic, but <code>maxima</code> is the plural of <code>maximum</code> which (in what I consider to be the standard usage) is not the word you want--you are interested in <code>maximal</code> elements. (Same for <code>minima</code>.)</p>",
        "id": 266837103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641316789
    },
    {
        "content": "<p>e.g. <a href=\"http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/maximal+element\">http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/maximal+element</a></p>",
        "id": 266837215,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641316831
    },
    {
        "content": "<p>So <code>maximals</code> and <code>minimals</code>? (I want them as a set to talk about union and stuff)</p>",
        "id": 266837484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641316960
    },
    {
        "content": "<p>Maximal and minimal elements aren't really bounds, you might create a new file, and cross-reference it from <code>order.bounds</code></p>",
        "id": 266837502,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641316969
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11268\">#11268</a></p>",
        "id": 266971184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641407026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Minimal.20elements.20and.20descending.20chains/near/266833326\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span>, you might have ideas.</p>\n</blockquote>\n<p>I proved something similar in the <code>polytope</code> branch</p>",
        "id": 267021036,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1641438780
    },
    {
        "content": "<p>Specifically, what I proved is that a graded order with top grade <code>n</code> has elements of all grades from <code>0</code> to <code>n</code></p>",
        "id": 267021049,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1641438801
    },
    {
        "content": "<p>...but you probably already knew that, haha</p>",
        "id": 267021056,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1641438808
    },
    {
        "content": "<p>Yeah, I'm thinking this is almost what I want!</p>",
        "id": 267041357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641462045
    },
    {
        "content": "<p>The general case is an arbitrary interval of the order, rather than all elements. I assume it's not too hard to adapt your proof?</p>",
        "id": 267041490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641462139
    }
]