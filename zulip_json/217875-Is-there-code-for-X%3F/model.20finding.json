[
    {
        "content": "<p>Hello, I'm sure this must be a beginner question, but I'm looking for a way to find a set of numbers that satisfy a set of first-order sentences.  For example, I would like to specify numbers called \"prime\" (although I know this has already been done) with these first order sentences:</p>\n<p>X ∈ ℕ<br>\n2 ≤ X ≤ 10<br>\n∀ Y ( (Y ∈ ℕ ∧ Y | X) → (Y=1 ∨ Y=X)   ) -- the only divisors of X are 1 and X</p>\n<p>And I would like it to print out “X=2,3,5 or 7”</p>",
        "id": 294322637,
        "sender_full_name": "Nathan Temple",
        "timestamp": 1660927442
    },
    {
        "content": "<p>The way to define this (or sets in general) is to use set builder notation. Take a look in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> for more info. In this case, we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.primes\">docs#nat.primes</a></p>",
        "id": 294323145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660927616
    },
    {
        "content": "<p>That's the subtype of prime numbers. If you look at the code, you will see <code>{ ... // ... }</code>. Using <code>{ ... | ... }</code> will give you the set instead.</p>",
        "id": 294323523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660927753
    },
    {
        "content": "<p>Adam, I think you're missing the point. Nathan wants Lean to compute the elements</p>",
        "id": 294323598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660927779
    },
    {
        "content": "<p>Oh I missed the \"print\" part of the question! Sorrry</p>",
        "id": 294323740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660927811
    },
    {
        "content": "<p>In principle this is possible of course but this is totally not the focus of the immense majority of people here. You will probably have much more luck with people using Coq.</p>",
        "id": 294323793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660927831
    },
    {
        "content": "<p>In principle you could use a stream to mimic the lazy list definition that haskell lets you write (using a sieve).</p>",
        "id": 294323932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660927874
    },
    {
        "content": "<p>Thank you kindly.  I guess I am looking for a convenient way to find 'Finite models'.  I will look into Coq.</p>",
        "id": 294325910,
        "sender_full_name": "Nathan Temple",
        "timestamp": 1660928534
    },
    {
        "content": "<p>In that case you can do <code>#eval (finset.range 11).filter nat.prime</code>.</p>",
        "id": 294330015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660929927
    },
    {
        "content": "<p>Thank you, I realize now that I am looking for more of a 'Satisfiability Modulo Theories' solver of which Z3 is one.</p>",
        "id": 294338728,
        "sender_full_name": "Nathan Temple",
        "timestamp": 1660932987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"493306\">@Nathan Temple</span> Here's your example in Z3 in Python:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">z3</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Solver</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"s1\">'y'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ForAll</span><span class=\"p\">([</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">Or</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">))))</span>\n\n<span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">while</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">sat</span><span class=\"p\">:</span>\n    <span class=\"n\">vals</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_long</span><span class=\"p\">())</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()[</span><span class=\"n\">x</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"X =\"</span><span class=\"p\">,</span> <span class=\"s2\">\",\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">vals</span><span class=\"p\">))</span>\n<span class=\"c1\"># X = 2,3,5,7</span>\n</code></pre></div>\n<p>(No guarantees this is idiomatic; I've only used it a couple times.)</p>",
        "id": 294357343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1660940614
    }
]