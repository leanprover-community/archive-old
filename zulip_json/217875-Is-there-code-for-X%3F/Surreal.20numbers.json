[
    {
        "content": "<p>For fun, I am trying to formalize a piece of mathematical scripture from Donald Knuth's book, \"Surreal Numbers\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">In the beginning, everything was void, and J. H. W. H Conway</span>\n<span class=\"cm\">began to create numbers. Conway said, \"Let there be two rules</span>\n<span class=\"cm\">which bring forth all numbers large and small.\"</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">\"This shall be the first rule: Every number corresponds to two</span>\n<span class=\"cm\">sets of previously created numbers, such that no member of the</span>\n<span class=\"cm\">left set is greater than or equal to any member of the right</span>\n<span class=\"cm\">set.\"</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">∈</span> <span class=\"n\">right_set</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">xₗ</span> <span class=\"bp\">∈</span> <span class=\"n\">left_set</span><span class=\"o\">,</span> <span class=\"n\">xₗ</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">\"And the second rule shall be this: One number is less than or</span>\n<span class=\"cm\">equal to another number if and only if no member of the first</span>\n<span class=\"cm\">number's left set is greater than or equal to the second number,</span>\n<span class=\"cm\">and no member of the second number's right set is less than or</span>\n<span class=\"cm\">equal to the first number.\"</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">leq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">xₗ</span> <span class=\"bp\">∈</span> <span class=\"n\">x.left_set</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">xₗ</span> <span class=\"bp\">≥</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">∈</span> <span class=\"n\">y.right_set</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">leq</span> <span class=\"n\">y</span><span class=\"bp\">ᵣ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">And Conway examined these two rules he had created, and behold!</span>\n<span class=\"cm\">They were very good.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">And the first number was created from the void right set and the</span>\n<span class=\"cm\">void left set. Conway called this number, \"zero,\" and said it</span>\n<span class=\"cm\">shall be a sign to separate positive numbers from negative numbers.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">number</span> <span class=\"o\">:=</span> <span class=\"o\">⟨{},{},</span><span class=\"n\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Conway proved that zero was less than or equal to zero, and he</span>\n<span class=\"cm\">saw that it was good. And the evening and the morning were the</span>\n<span class=\"cm\">day of zero.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_leq_zero</span> <span class=\"o\">:</span> <span class=\"n\">leq</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">On the next day, two more numbers were created, one with zero</span>\n<span class=\"cm\">as its left set and one with zero as its right set. And Conway</span>\n<span class=\"cm\">called the former number \"one,\" and the latter he called</span>\n<span class=\"cm\">\"minus one.\"</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">one</span>       <span class=\"o\">:</span> <span class=\"n\">number</span> <span class=\"o\">:=</span> <span class=\"o\">⟨{</span><span class=\"n\">zero</span><span class=\"o\">},{}⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">minus_one</span> <span class=\"o\">:</span> <span class=\"n\">number</span> <span class=\"o\">:=</span> <span class=\"o\">⟨{},{</span><span class=\"n\">zero</span><span class=\"o\">}⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">And he proved that minus one was less than but not</span>\n<span class=\"cm\">equal to zero and zero is less than but not equal to one.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">minus_one_lt_zero</span> <span class=\"o\">:</span> <span class=\"n\">minus_one</span> <span class=\"bp\">&lt;</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">And the evening ...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n<p>There are clearly a lot of problems that I need to fix before this compiles. The most prominent problem I guess is that I can't use <code>structure</code> to define a type that I use in the structure definition. I tried to think about how to do it as an inductive type but I didn't get very far. Also, when I searched for Zulip threads containing \"surreal numbers\" I found <a href=\"#narrow/stream/113489-new-members/topic/typechecking.20error.20with.20linear_algebra.2Edimension/near/200282238\">this thread</a>, but what was said about surreal numbers was a little over my head.</p>\n<p>Any ideas? :)</p>",
        "id": 214699481,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1603805765
    },
    {
        "content": "<p>Typo: <code>he latter her called \"minus one.\"</code> .. <code>her</code> should be <code>he</code>.</p>",
        "id": 214700914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603806392
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">left_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">∈</span> <span class=\"n\">right_set</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">xₗ</span> <span class=\"bp\">∈</span> <span class=\"n\">left_set</span><span class=\"o\">,</span> <span class=\"n\">xₗ</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"bp\">ᵣ</span><span class=\"o\">),</span> <span class=\"n\">number</span>\n</code></pre></div>\n\n<p>doesn't compile, because it mentions inequality, but it is a step closer to your goal.</p>",
        "id": 214701269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603806570
    },
    {
        "content": "<p>If you really want this literate coding style... not sure if you can pull it off</p>",
        "id": 214701397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603806627
    },
    {
        "content": "<p>Maybe you can do something with mutual inductives... I've never used them before</p>",
        "id": 214701506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603806686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Surreal.20numbers/near/214701397\">said</a>:</p>\n<blockquote>\n<p>If you really want this literate coding style... not sure if you can pull it off</p>\n</blockquote>\n<p>Style is not a priority; Different styles are ok.</p>",
        "id": 214701612,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1603806725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Surreal.20numbers/near/214701269\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">left_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">∈</span> <span class=\"n\">right_set</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">xₗ</span> <span class=\"bp\">∈</span> <span class=\"n\">left_set</span><span class=\"o\">,</span> <span class=\"n\">xₗ</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span><span class=\"bp\">ᵣ</span><span class=\"o\">),</span> <span class=\"n\">number</span>\n</code></pre></div>\n\n<p>doesn't compile, because it mentions inequality, but it is a step closer to your goal.</p>\n</blockquote>\n<p>This is helpful, thanks!</p>",
        "id": 214701734,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1603806791
    },
    {
        "content": "<p>That inductive structure is inconsistent</p>",
        "id": 214704864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808119
    },
    {
        "content": "<p>you can't have an inductive with a constructor <code>set T -&gt; T</code>, it violates cantor's theorem</p>",
        "id": 214704929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808145
    },
    {
        "content": "<p>The resolution is not entirely obvious, and is developed in <code>set_theory.surreal</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame/src\">src#pgame</a></p>",
        "id": 214705205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808261
    },
    {
        "content": "<p>(Not sure why the link is broken, try <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/pgame.lean#L116\">https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/pgame.lean#L116</a>)</p>",
        "id": 214705330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808322
    },
    {
        "content": "<p>Conway himself admits in ONAG that he can envisage problems in formalising the definition within e.g. set theory, and implies that basically this is a good reason for ignoring set theory here because what he's doing clearly works, so if the framework doesn't accept it then the framework is wrong. We (Scott and Mario) got it working in Lean but it took some thought :-)</p>",
        "id": 214706703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603808941
    },
    {
        "content": "<p>The link is probably broken as the 7 character shortening of the git hash to 69db7a3 is ambiguous, we have a commit 69db7a3f and 69db7a33 (most recent) now.</p>",
        "id": 214707841,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603809368
    },
    {
        "content": "<p>Does this mean that the repo is now officially \"big\"?</p>",
        "id": 214708059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603809468
    },
    {
        "content": "<p>Yeah I can't tell if we were just unlucky here or if we should change doc-gen to use 8 or digits <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 214708935,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603809817
    },
    {
        "content": "<p>If it's not completely trivial to change, one could just wait until it happens again? We might just be (un)\"lucky\" rather than big.</p>",
        "id": 214710008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603810194
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/doc-gen/issues/92\">doc-gen#92</a> just popped up, which looks related</p>",
        "id": 214710337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603810308
    },
    {
        "content": "<p>Well it would be trivial to change 7 to 8 I think, but maybe better to modify <a href=\"https://github.com/leanprover-community/doc-gen/blob/9f9e8e8ae363877f05d72bce950b95e0b3693344/print_docs.py#L77\">https://github.com/leanprover-community/doc-gen/blob/9f9e8e8ae363877f05d72bce950b95e0b3693344/print_docs.py#L77</a> to call  <code>git rev-parse --short=7 blah</code> to find the minimal truncation that works.</p>",
        "id": 214711610,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603810820
    },
    {
        "content": "<p>Hmm, that doesn't seem to work in this case (at least locally) since the <a href=\"https://github.com/leanprover-community/mathlib/commit/69db7a3f\">other commit <code>69db7a3f</code></a> isn't on a branch.</p>",
        "id": 214716101,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603812537
    }
]