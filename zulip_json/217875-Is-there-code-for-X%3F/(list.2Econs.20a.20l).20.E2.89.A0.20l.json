[
    {
        "content": "<p>The statement appears trivial, but I was surprised that <code>simp</code> couldn't solve it for me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">cons_ne_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l_ih</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Does this belong in mathlib, or is it too trivial? I note that <code>nat.succ_ne_self</code> exists, but isn't tagged as <code>@[simp]</code>...</p>",
        "id": 205107723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595851020
    },
    {
        "content": "<p>Does <code>simp</code> work for ≠? I've only seen it for <code>=</code> and <code>&lt;-&gt;</code></p>",
        "id": 205112981,
        "sender_full_name": "Chris Wong",
        "timestamp": 1595854618
    },
    {
        "content": "<p>no</p>",
        "id": 205113142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595854695
    },
    {
        "content": "<p>however you can mark any theorem <code>T</code> as a simp lemma and it will treat it as a proof of <code>T = true</code></p>",
        "id": 205113178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595854726
    },
    {
        "content": "<p>Does that mean that almost all non-equality / iff lemmas with no implications should be marked simp?</p>",
        "id": 205113530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595854918
    },
    {
        "content": "<p>almost all lemmas <em>could</em> be marked simp, that doesn't make it a good idea</p>",
        "id": 205113612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595854950
    },
    {
        "content": "<p>In this case, I'm not sure why you thought simp would solve the theorem</p>",
        "id": 205113666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595854984
    },
    {
        "content": "<p>unless this exact lemma already exists with <code>@[simp]</code></p>",
        "id": 205113705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595855003
    },
    {
        "content": "<p>I was expecting that this lemma might already exist.</p>",
        "id": 205113806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595855051
    },
    {
        "content": "<p>This doesn't feel <code>simp</code>. But I did try other automatic tactics and none kills it in one line.</p>",
        "id": 205114134,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595855258
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">cons_ne_self</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 205116158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595856345
    },
    {
        "content": "<p>Can <code>list.no_confusion</code> be used here?</p>",
        "id": 205117143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595856849
    },
    {
        "content": "<p>I don't think so - <code>l</code> could be a <code>list.cons</code></p>",
        "id": 205117700,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1595857123
    },
    {
        "content": "<p>Can also get it with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">cons_ne_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">a</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">cons_ne_self</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">cons</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">hyp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n</code></pre></div>\n\n\n<p>which doesn't rely on <code>list.length</code></p>",
        "id": 205119970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595858319
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Weird, this closes the goals but </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">auxiliary</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">pack</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2&#39;</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">equation</span> <span class=\"kn\">lemma</span><span class=\"o\">,</span> <span class=\"n\">unexpected</span> <span class=\"n\">form</span>\n</code></pre></div>",
        "id": 205120909,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595858769
    },
    {
        "content": "<p>maybe try not using <code>example</code>?</p>",
        "id": 205120946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595858794
    },
    {
        "content": "<p>Wow, I never realized you could have recursive examples.</p>",
        "id": 205121134,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595858885
    },
    {
        "content": "<p>Oh then Lean demands a <code>using_well_founded</code>.</p>",
        "id": 205121649,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595859158
    },
    {
        "content": "<p>Pr'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/3584\">#3584</a></p>",
        "id": 205122298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595859513
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to prove recursive application is decreasing, well founded relation</span>\n<span class=\"cm\">  @has_well_founded.r (Σ&#39; (a : α), list α)</span>\n<span class=\"cm\">    (@psigma.has_well_founded α (λ (a : α), list α) (@has_well_founded_of_has_sizeof α (default_has_sizeof α))</span>\n<span class=\"cm\">       (λ (a : α), @has_well_founded_of_has_sizeof (list α) (@list.has_sizeof α (default_has_sizeof α))))</span>\n<span class=\"cm\">The nested exception contains the failure state for the decreasing tactic.</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">invalid apply tactic, failed to unify</span>\n<span class=\"cm\">  0 &lt; 0</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  ?m_1 &lt; ?m_1 + ?m_2</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type u,</span>\n<span class=\"cm\">cons_ne_self : ∀ (_p : Σ&#39; (a : α), list α), _p.fst :: _p.snd ≠ _p.snd,</span>\n<span class=\"cm\">a h : α,</span>\n<span class=\"cm\">t : list α,</span>\n<span class=\"cm\">a : α,</span>\n<span class=\"cm\">l : list α</span>\n<span class=\"cm\">⊢ 0 &lt; 0</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">cons_ne_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cons_ne_self</span><span class=\"o\">]</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded_tactics</span><span class=\"bp\">.</span><span class=\"n\">default_dec_tac</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205124416,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595860470
    },
    {
        "content": "<p>Why would this lead to <code>0 &lt; 0</code>?</p>",
        "id": 205124446,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595860488
    },
    {
        "content": "<p><code>simp</code> probably just used the lemma to prove itself directly, and then obviously wasn't able to prove that the call was on something smaller</p>",
        "id": 205124742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595860632
    },
    {
        "content": "<p>This is a common annoyance when using \"apply anything\" tactics in conjunction with the equation compiler.</p>",
        "id": 205124815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595860673
    },
    {
        "content": "<p>try <code>simp [cons_ne_self h t]</code></p>",
        "id": 205125099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595860787
    },
    {
        "content": "<p>Beautiful, it works!</p>\n<p>(Lean is right to complain, without the proper hint (i.e. <code>h t</code>), this is really not \"decreasing\")</p>",
        "id": 205125617,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595860995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/(list.2Econs.20a.20l).20.E2.89.A0.20l/near/205116158\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">cons_ne_self</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">cons_ne_self</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>is better than that proof, if we really want the proof to depend on <code>list.length</code></p>",
        "id": 205129713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595862834
    },
    {
        "content": "<p>list and nat are two faces of the same coin</p>",
        "id": 205130706,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595863177
    },
    {
        "content": "<p>such a basic theorem probably should not depend on length or nat</p>",
        "id": 205130707,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595863177
    },
    {
        "content": "<p>I don't see why, this is what libraries are for - you don't have to prove everything from the axioms</p>",
        "id": 205130879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595863243
    },
    {
        "content": "<p>Turns out I'm wrong anyway, <code>list.length</code> is defined within <code>lean</code> itself, not within mathlib where our lemmas are</p>",
        "id": 205131106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595863341
    },
    {
        "content": "<p>I like the proof in another context because it's the most intuitive proof for me.</p>",
        "id": 205131167,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595863376
    },
    {
        "content": "<p>Not so sure in the library itself though</p>",
        "id": 205131237,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595863410
    },
    {
        "content": "<p>In isolation, sure</p>",
        "id": 205131254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595863419
    },
    {
        "content": "<p>but when it comes to minimizing the sum of the sizes of all proofs through reordering, this looks like an improvement</p>",
        "id": 205131381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595863474
    },
    {
        "content": "<p>Note my claim about reordering in the PR was actually wrong anyway.</p>",
        "id": 205156537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595877077
    }
]