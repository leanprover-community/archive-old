[
    {
        "content": "<p>What is the slickest way to give the canonical isomorphism between two localizations of a ring at the same sub-monoid? Concretely, I'd like to prove something along these lines </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">localization.away</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"n\">localization</span> <span class=\"o\">(</span><span class=\"n\">submonoid.map</span> <span class=\"o\">⟨</span><span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"n\">a.2</span><span class=\"o\">,</span> <span class=\"n\">a.3</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">submonoid.powers</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(I believe that the isomorphism is in fact secretely an equality.)</p>\n<p>Ultimately, I want to identify the two maps obtained from localizing R at r along this isomorphism, but it would be helpful to construct it first.</p>",
        "id": 288081234,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656619864
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.alg_equiv\">docs#is_localization.alg_equiv</a> gives the isomorphism between two localizations at the same submonoid.</p>",
        "id": 288084289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656621552
    },
    {
        "content": "<p>So if you prove that, say, the RHS has a <code>is_localization</code> instance of the right shape, that would give it to you.</p>",
        "id": 288084530,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656621700
    },
    {
        "content": "<p>This would give an isomorphism of algebras, which you can then covert to a ring isomorphism if absolutely necessary</p>",
        "id": 288084716,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656621789
    },
    {
        "content": "<p>If the two sides are really defeq, then you should be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.refl\">docs#ring_equiv.refl</a></p>",
        "id": 288084904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656621880
    },
    {
        "content": "<p>Thanks! I could make something work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">localization</span> <span class=\"o\">(</span><span class=\"n\">submonoid.map</span> <span class=\"o\">⟨</span><span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"n\">a.2</span><span class=\"o\">,</span> <span class=\"n\">a.3</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">submonoid.powers</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span>  <span class=\"n\">localization.away</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">submonoid.map</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">submonoid.powers</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">submonoid.powers</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">submonoid.map_powers</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">is_localization</span> <span class=\"o\">(</span><span class=\"n\">submonoid.powers</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">localization.away</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">)),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">congr_arg</span> <span class=\"n\">is_localization</span> <span class=\"n\">h₁</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">localization.alg_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">submonoid.map</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">submonoid.powers</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">localization.away</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288090579,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656624857
    },
    {
        "content": "<p>Your have h2 should be a haveI and that way you won't have to use the @ at the end</p>",
        "id": 288099355,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656630168
    },
    {
        "content": "<p>Ah, great. I was wondering how to add instances.</p>",
        "id": 288132202,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656661007
    },
    {
        "content": "<p>Although I seem to still have to introduce h_2 in order to rewrite it...</p>",
        "id": 288133234,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1656661671
    },
    {
        "content": "<p><code>⟨a.1, a.2, a.3⟩</code> should be <code>a.to_monoid_hom</code> or maybe just <code>a</code></p>",
        "id": 288140560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656665857
    }
]