[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sigma\">docs#finset.sigma</a>, but do we not have <code>set.sigma</code>?</p>",
        "id": 264186356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638983094
    },
    {
        "content": "<p>maybe you're meant to write it with the bind operation (like <code>multiset.sigma</code> does in the end)? not sure, really not a monad person at all</p>",
        "id": 264186650,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638983212
    },
    {
        "content": "<p>I assume a correct implementation would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set.sigma</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x.1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x.2</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">x.1</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264186903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638983321
    },
    {
        "content": "<p>LGTM</p>",
        "id": 264187049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638983396
    },
    {
        "content": "<p>or <code>⋃ i ∈ s, sigma.mk i '' t i</code></p>",
        "id": 264187203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638983447
    },
    {
        "content": "<p>Will open the PR <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 264187233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638983463
    },
    {
        "content": "<p>Or even <code>⋃₀ ((λ i, sigma.mk i '' t i) '' s)</code>, but that is definitionally way more annoying</p>",
        "id": 264187489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638983582
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12305\">#12305</a></p>",
        "id": 273334019,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645873454
    }
]