[
    {
        "content": "<p>I can't find the statement that matrices over a ring form a ring in mathlib</p>",
        "id": 198706507,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1590446313
    },
    {
        "content": "<p>does <code>apply_instance</code> find it?</p>",
        "id": 198706524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590446349
    },
    {
        "content": "<p>I don't know what <code>apply_instance</code> is, but I'm looking it up now</p>",
        "id": 198706587,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1590446415
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/matrix/basic.html#matrix.ring\">https://leanprover-community.github.io/mathlib_docs/data/matrix/basic.html#matrix.ring</a></p>",
        "id": 198706597,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590446442
    },
    {
        "content": "<p>ah, you are probably missing the <code>decidable_eq</code> assumption</p>",
        "id": 198706611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590446488
    },
    {
        "content": "<p>In mathlib you don't usually explicitly reference a proof that says that some type is a ring, you let typeclass inference find it for you and just use <code>*</code> and <code>mul_add</code> and so on without reference to this instance</p>",
        "id": 198706676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590446542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/matrices.20over.20a.20ring.20are.20a.20ring/near/198706611\">said</a>:</p>\n<blockquote>\n<p>ah, you are probably missing the <code>decidable_eq</code> assumption</p>\n</blockquote>\n<p>Do we want to keep that assumption?</p>",
        "id": 198717137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590463071
    },
    {
        "content": "<p>yes, I think</p>",
        "id": 198717178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463091
    },
    {
        "content": "<p>to a mathematician it's only ever instantiated at <code>fin n</code> so the decidable assumption is no problem</p>",
        "id": 198717182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463115
    },
    {
        "content": "<p>also I imagine people might want to actually compute with the matrix type</p>",
        "id": 198717198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463162
    },
    {
        "content": "<p>Hmm... the reason we generalized to arbitrary fintypes is exactly because we could have random fintypes showing up as index type for a basis.</p>",
        "id": 198717202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590463172
    },
    {
        "content": "<p>oh, the mathematician is wrong of course</p>",
        "id": 198717209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463191
    },
    {
        "content": "<p>But is this implementation efficient for computations? I guess we'll want <code>sparse_matrix</code> and <code>fast_matrix</code> and whatever, once we start computing</p>",
        "id": 198717252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590463204
    },
    {
        "content": "<p>It's not, really</p>",
        "id": 198717254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463218
    },
    {
        "content": "<p>I think this is a function on fin n? That's got pretty poor access overhead</p>",
        "id": 198717256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463241
    },
    {
        "content": "<p>If you just want to compute a simple expression with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2\\times 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> matrices then any implementation is efficient.</p>",
        "id": 198717258,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590463246
    },
    {
        "content": "<p>If you want to compute on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2\\times 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> matrices a it is better to have a good defeq and \"force\" the results using <code>rfl</code></p>",
        "id": 198717268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463293
    },
    {
        "content": "<p>that is, if you want to compute in a proof</p>",
        "id": 198717273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463319
    },
    {
        "content": "<p>if you want to compute in <code>#eval</code> then anything is efficient but you will probably be looking at bigger matrices</p>",
        "id": 198717317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463344
    },
    {
        "content": "<p>This seems to work fairly well:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_list</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">of_fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">of_fn</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_list</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">^</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198717480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463632
    },
    {
        "content": "<p>I suspect it doesn't scale the way it should though because it doesn't cache intermediate values</p>",
        "id": 198717546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590463710
    },
    {
        "content": "<p>maybe we need to modify norm_num again</p>",
        "id": 198717764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590464129
    },
    {
        "content": "<p>Looking at the contents of <code>data.matrix.notation</code>, it seems like there are enough simp lemmas that <code>norm_num</code> should Just Work</p>",
        "id": 198717975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590464502
    },
    {
        "content": "<p>Ah, <code>simp</code> gets stuck on the power operation. But still it gets pretty close:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">^</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">9136</span><span class=\"o\">,</span> <span class=\"mi\">6688</span><span class=\"o\">,</span> <span class=\"mi\">9136</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">6688</span><span class=\"o\">,</span> <span class=\"mi\">4896</span><span class=\"o\">,</span> <span class=\"mi\">6688</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">9136</span><span class=\"o\">,</span> <span class=\"mi\">6688</span><span class=\"o\">,</span> <span class=\"mi\">9136</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 198718116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590464747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>norm_num</code> does cache intermediate results, does it?</p>",
        "id": 198718463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465455
    },
    {
        "content": "<p>Can we teach <code>norm_num</code> about repeated squaring?</p>",
        "id": 198718465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465466
    },
    {
        "content": "<p>It already knows</p>",
        "id": 198718466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465472
    },
    {
        "content": "<p>Hmm, but why the <code>pow_succ</code>, in that case?</p>",
        "id": 198718507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465491
    },
    {
        "content": "<p><code>norm_num</code> only knows how to multiply numbers</p>",
        "id": 198718512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465507
    },
    {
        "content": "<p>It should compute <code>foo ^ 2</code>, <code>foo ^ 4</code>, <code>foo ^ 8</code> and then <code>foo ^ 8 * foo ^ 2</code>.</p>",
        "id": 198718515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465526
    },
    {
        "content": "<p><code>simp</code> knows how to multply other things but it doesn't know repeated squaring</p>",
        "id": 198718518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465529
    },
    {
        "content": "<p>So we need a simp-lemma <code>pow_bit0</code>?</p>",
        "id": 198718524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465545
    },
    {
        "content": "<p>Which is a first approximation to repeated squaring</p>",
        "id": 198718534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465565
    },
    {
        "content": "<p><code>norm_num</code> also doesn't do common subexpression elimination before trying to evaluate</p>",
        "id": 198718536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465568
    },
    {
        "content": "<p><code>simp</code> can only set up the goal here as <code>foo * foo * ... * foo</code> in some associativity</p>",
        "id": 198718546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465600
    },
    {
        "content": "<p>But it should be able to set it up as something smarter</p>",
        "id": 198718598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465623
    },
    {
        "content": "<p>not really, what expression should it produce that is better?</p>",
        "id": 198718605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/matrices.20over.20a.20ring.20are.20a.20ring/near/198718536\">said</a>:</p>\n<blockquote>\n<p><code>norm_num</code> also doesn't do common subexpression elimination before trying to evaluate</p>\n</blockquote>\n<p>Would it help to teach <code>norm_num</code> about this?</p>",
        "id": 198718617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465669
    },
    {
        "content": "<p>maybe, but it might also make general use slower</p>",
        "id": 198718620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465683
    },
    {
        "content": "<p>Right now <code>norm_num</code> is mostly relying on <code>simp</code> to give it a clean input</p>",
        "id": 198718624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465711
    },
    {
        "content": "<p>it would have to orchestrate more of the process in order to do these things</p>",
        "id": 198718662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465732
    },
    {
        "content": "<p>Plus, with the code above <code>simp</code> will hand a term like <code>foo * (foo * (foo * ...))</code> anyway so there is no CSE to be had</p>",
        "id": 198718680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465816
    },
    {
        "content": "<p>Is there a simp-set that's specifically for <code>norm_num</code>?</p>",
        "id": 198718684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465823
    },
    {
        "content": "<p>no</p>",
        "id": 198718686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465834
    },
    {
        "content": "<p>Should there be?</p>",
        "id": 198718687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465839
    },
    {
        "content": "<p>hard to say</p>",
        "id": 198718727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465858
    },
    {
        "content": "<p>most simp lemmas seem to be useful in norm_num</p>",
        "id": 198718729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465883
    },
    {
        "content": "<p>except possibly the ones about numbers</p>",
        "id": 198718734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465899
    },
    {
        "content": "<p>I mean the other way round</p>",
        "id": 198718741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465912
    },
    {
        "content": "<p>Some simp lemmas are maybe only useful for norm num</p>",
        "id": 198718760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465925
    },
    {
        "content": "<p>But you don't want them in a random simp call</p>",
        "id": 198718763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590465937
    },
    {
        "content": "<p>I suppose there are some lemmas that you probably don't want to use unless you are trying to normalize</p>",
        "id": 198718764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590465943
    },
    {
        "content": "<p>But if <code>simp only [pow_bit0]</code> turns this into <code>foo ^ 5 * foo ^ 5</code>, then <code>norm_num</code> could apply CSE, right?</p>",
        "id": 198718822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590466059
    },
    {
        "content": "<p>If <code>mul_assoc</code> is not in the list, yes</p>",
        "id": 198718865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466086
    },
    {
        "content": "<p>Also, maybe the CSE should be on the simp side; the internal function here is <code>simplify.bottom_up</code> or something like that, which calls a tactic on every subterm. It knows enough at that stage to potentially apply CSE, which is especially important if the term is dag-like and highly duplicated</p>",
        "id": 198718933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466223
    },
    {
        "content": "<p>The lean side can't do much about dag-like terms</p>",
        "id": 198718941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466250
    },
    {
        "content": "<p>I imagine simp-lemmas that turn <code>foo ^ 10</code> into</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cache</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n<span class=\"o\">(</span> <span class=\"n\">cache</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>where <code>cache := id</code> is a wrapper that tells <code>norm_num</code> to store a result for later.</p>",
        "id": 198718950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590466277
    },
    {
        "content": "<p>maybe better to put the <code>cache</code> on both sides, indicating both which to cache and which to look in the cache for</p>",
        "id": 198719000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466371
    },
    {
        "content": "<p>But keep in mind that norm_num still hasn't triggered at this point. Once it is reduced to a bunch of multiplies, <code>simp[foo]</code> unfolds it to literals, and then all the matrix simp lemmas trigger until it is a bunch of cells like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"err\">…</span> <span class=\"bp\">+</span>\n                 <span class=\"o\">(</span><span class=\"err\">…</span> <span class=\"bp\">+</span>\n                    <span class=\"o\">(</span><span class=\"err\">…</span> <span class=\"bp\">+</span>\n                           <span class=\"o\">(</span><span class=\"err\">…</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">…</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n                              <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                 <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))))))</span> <span class=\"bp\">+</span>\n                         <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))))</span> <span class=\"bp\">+</span>\n                              <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                 <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))))</span> <span class=\"bp\">+</span>\n                            <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                 <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))))</span> <span class=\"bp\">+</span>\n                               <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n                                  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                     <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))))))))</span> <span class=\"bp\">+</span>\n                       <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))))</span> <span class=\"bp\">+</span>\n                              <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n                                 <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))))))</span> <span class=\"bp\">+</span>\n                            <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                                 <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))))</span> <span class=\"bp\">+</span>\n                               <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 198719065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466482
    },
    {
        "content": "<p>It is only at this point that <code>norm_num</code> sees something with numerals that it can evaluate</p>",
        "id": 198719075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466509
    },
    {
        "content": "<p>It's still faster than <code>rfl</code> though</p>",
        "id": 198719144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466618
    },
    {
        "content": "<p>I see, but still the <code>cache</code> thing might help, maybe? (And your suggestion of reusing <code>cache</code> to flag a look-up seems good.)</p>",
        "id": 198719165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590466665
    },
    {
        "content": "<p>I mean the optimal solution is just to do like Kenny says and bake matrix operations into norm_num</p>",
        "id": 198719215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466724
    },
    {
        "content": "<p>which might not even be so bad if norm_num grows some extensibility</p>",
        "id": 198719246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590466766
    }
]