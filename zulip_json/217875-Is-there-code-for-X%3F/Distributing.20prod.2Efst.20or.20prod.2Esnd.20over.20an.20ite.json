[
    {
        "content": "<p>Do these lemmas exist?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">prod.ite_fst</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">x.fst</span> <span class=\"n\">y.fst</span> <span class=\"o\">:=</span>\n<span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">prod.ite_snd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"n\">x.snd</span> <span class=\"n\">y.snd</span> <span class=\"o\">:=</span>\n<span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 216655215,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605293305
    },
    {
        "content": "<p>Maybe in some <code>pi</code> format for inductive types?</p>",
        "id": 216655235,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605293314
    },
    {
        "content": "<p>They are surely both special cases of some function which should be called something like <code>ite_congr</code> or something, saying <code>F (ite p x y) = ite p (F x) (F y)</code></p>",
        "id": 216670039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605300123
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/apply_ite\">docs#apply_ite</a></p>",
        "id": 216670417,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605300288
    },
    {
        "content": "<p>Heh, I wrote the docstring for that...</p>",
        "id": 216670910,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605300540
    },
    {
        "content": "<p>Thank you :-)</p>",
        "id": 216671084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605300617
    }
]