[
    {
        "content": "<p>Is there something like: ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.update_nth_same</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.update_nth</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">l.nth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 229538405,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615318282
    },
    {
        "content": "<p>the .join there is weird (not to mention quite limiting on the types). I would instead look for <code>a \\in l.nth n -&gt; l.update_nth n a = l</code></p>",
        "id": 229541736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615319505
    },
    {
        "content": "<p>What does <code>a ∈ l.nth n</code> mean, if <code>l.nth n : option</code>?</p>",
        "id": 229543567,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615320192
    },
    {
        "content": "<p><code>l.nth n = some a</code>, I believe. (Don't remember why \\in is better)</p>",
        "id": 229544205,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615320426
    },
    {
        "content": "<p>Ok, then there's a difference. I still want the lemma to work for <code>n &gt; l.length</code>.</p>",
        "id": 229612796,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615360304
    },
    {
        "content": "<p>Why not formalise the statement you want and post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with a sorry?</p>",
        "id": 229613367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615360701
    },
    {
        "content": "<p>That's the first post in this thread :D</p>",
        "id": 229613422,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615360793
    },
    {
        "content": "<p>The joys of reading on mobile. Sorry :-)</p>",
        "id": 229613952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615361190
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.update_nth_same</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.update_nth</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">l.nth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.nth</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.nth_update_nth_eq</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.nth_update_nth_ne</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hk</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229661061,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615384152
    }
]