[
    {
        "content": "<p>Does this exist?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bdd_below_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f.filter</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">embedding.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype_map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_filter.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_of_mem_upper_bounds</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_upper_bounds</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">bdd_below_aux</span> <span class=\"n\">f.powerset</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bdd_below_aux</span><span class=\"o\">,</span> <span class=\"n\">embedding.subtype_map</span><span class=\"o\">,</span> <span class=\"n\">embedding.refl</span><span class=\"o\">,</span> <span class=\"n\">subtype.map</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bdd_above.finite_of_finset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">finite_of_mem_upper_bounds</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 258965590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635171614
    },
    {
        "content": "<p>Not quite! But you can get it by defining <code>locally_finite_order (finset α)</code></p>",
        "id": 258966139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635171867
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite_order\">docs#locally_finite_order</a>?</p>",
        "id": 258966193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635171893
    },
    {
        "content": "<p>Oh, interesting</p>",
        "id": 258966230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635171914
    },
    {
        "content": "<p>This is all new, so I haven't had time to define it.</p>",
        "id": 258966271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635171943
    },
    {
        "content": "<p>For context, my goal was to try to define <code>conditionally_complete_lattice (finset α)</code> for non-finite <code>α</code>; but I suspect I can only populate <code>Sup</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span> <span class=\"k\">then</span> <span class=\"n\">h.to_finset.sup</span> <span class=\"n\">id</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">fs</span> <span class=\"n\">sbdd</span> <span class=\"n\">hfs</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">sbdd.finite_of_finset</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">finset.le_sup</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hfs</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">fs</span> <span class=\"n\">sbdd</span> <span class=\"n\">hfs</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">finite_of_mem_upper_bounds</span> <span class=\"n\">hfs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">finset.sup_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hfs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.finite.mem_to_finset</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 258967314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635172409
    },
    {
        "content": "<p>Why couldn't you populate <code>Inf</code>?</p>",
        "id": 258968062,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635172708
    },
    {
        "content": "<p>What is Inf of empty?</p>",
        "id": 258968121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635172740
    },
    {
        "content": "<p>Who cares? It's <code>conditionally_complete_</code>, not <code>complete_</code>.</p>",
        "id": 258968173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635172765
    },
    {
        "content": "<p>Feel free to try to</p>",
        "id": 258968388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635172843
    },
    {
        "content": "<p>I suspect that what I'm doing here would work for any locally finite order</p>",
        "id": 258968447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635172870
    },
    {
        "content": "<p>I suspect that too. Leave 10min.</p>",
        "id": 258968490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635172890
    },
    {
        "content": "<p>I'm not going any further with this, feel free to adopt it</p>",
        "id": 258968625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635172941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/A.20bdd_above.20set.20of.20finsets.20is.20finite/near/258967314\">said</a>:</p>\n<blockquote>\n<p>For context, my goal was to try to define <code>conditionally_complete_lattice (finset α)</code> for non-finite <code>α</code></p>\n</blockquote>\n<p>Does this have anything to do with <a href=\"https://github.com/leanprover-community/mathlib/issues/7123\">#7123</a>?</p>",
        "id": 259002767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635187477
    },
    {
        "content": "<p>Yes, but that's for finite α</p>",
        "id": 259003638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635187844
    },
    {
        "content": "<p>Okay, so we don't quite care about computability, right?</p>",
        "id": 259006727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635189371
    },
    {
        "content": "<p>Not for Sup and Inf, which are unavoidably noncomputable</p>",
        "id": 259007857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635189925
    },
    {
        "content": "<p>You should be using <code>set.finite</code> then ;-)</p>",
        "id": 259008253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635190110
    }
]