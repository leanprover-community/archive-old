[
    {
        "content": "<p>Dear All,</p>\n<p>is the lemma below in mathlib?  I am finding it hard getting Lean to accept that since <code>A</code> is commutative, the order in which you multiply the elements of <code>s</code> does not matter.</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">multiset.to_list_map_prod</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.to_list.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289550327,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657773269
    },
    {
        "content": "<p>There're just a few lemmas about <code>multiset.to_list</code> and this isn't one of them as far as I can see. Some maintainers are against usage of <code>multiset.to_list</code> because it involves an arbitrary choice. But anyway here's a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.multiset</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_list_map_prod</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.to_list.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">multiset.coe_prod</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">multiset.coe_map</span><span class=\"o\">,</span> <span class=\"n\">s.coe_to_list</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 289550867,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657774029
    },
    {
        "content": "<p>Great, thank you very much!</p>",
        "id": 289550891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657774068
    },
    {
        "content": "<p>Oh, and sorry for not putting in imports: I had forgotten about them!</p>",
        "id": 289550940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657774097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, if you're proving stuff about to_list you might have taken a wrong turn</p>",
        "id": 289558178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657782540
    },
    {
        "content": "<p><code>induction s using quotient.induction</code> is a better direction to turn a statement about multisets into a statement about lists</p>",
        "id": 289558209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657782575
    },
    {
        "content": "<p>Ok, but I would like to go the other way: multiplying over a list does not require commutativity, while over multisets does.  So, I wanted to prove the list statement first and then deduce the multiset version from it.</p>",
        "id": 289558886,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783213
    },
    {
        "content": "<p>I can also simply duplicate the proof of the list statement to prove the multiset one, but since choice is already part of the assumptions, Junyax Xu's proof did the job.</p>\n<p>(We can take this conversation to <a href=\"https://github.com/leanprover-community/mathlib/pull/15296\">#15296</a>, if you prefer!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 289558956,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783284
    },
    {
        "content": "<p>(Let me try what you suggest, though, since I am probably misunderstanding something.)</p>",
        "id": 289559063,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/to_list_map_prod/near/289558886\">said</a>:</p>\n<blockquote>\n<p>Ok, but I would like to go the other way: multiplying over a list does not require commutativity, while over multisets does.  So, I wanted to prove the list statement first and then deduce the multiset version from it.</p>\n</blockquote>\n<p>This is exactly what induction on <code>multiset</code> does. When Eric says \"turn a statement about multisets into a statement about lists\", he means \"turn the multisets in your goal into lists\".</p>",
        "id": 289559068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657783358
    },
    {
        "content": "<p>Ok, I am trying it, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">quotient.induction'</span>\n</code></pre></div>\n<p>Should I import something?</p>",
        "id": 289559266,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783534
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.induction_on\">docs#quot.induction_on</a> and take inspiration from <a href=\"https://tqft.net/mathlib/data/multiset/basic\">file#data/multiset/basic</a>.</p>",
        "id": 289559373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657783622
    },
    {
        "content": "<p>Got it: <code>  induction F using quot.induction_on</code>!</p>",
        "id": 289559379,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783633
    },
    {
        "content": "<p>Thank you all: the proof is now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">F</span> <span class=\"n\">using</span> <span class=\"n\">quot.induction_on</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.quot_mk_to_coe''</span><span class=\"o\">,</span> <span class=\"n\">multiset.coe_map</span><span class=\"o\">,</span> <span class=\"n\">multiset.coe_sum</span><span class=\"o\">,</span> <span class=\"n\">multiset.coe_prod</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sup_support_list_prod_le</span> <span class=\"n\">D0</span> <span class=\"n\">Dm</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 289559557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783795
    },
    {
        "content": "<p>Try removing the <code>rw</code>!</p>",
        "id": 289559620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657783815
    },
    {
        "content": "<p>Without the rw, I need convert and simp.</p>",
        "id": 289559633,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783831
    },
    {
        "content": "<p>This is now going down Junyan Xu's ladder, instead of up!</p>",
        "id": 289559649,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657783855
    },
    {
        "content": "<p>That's unexpected. Because everything to do with <code>multiset</code> is defined by induction from <code>list</code>, this ought to work. But I guess I don't know the full statement.</p>",
        "id": 289559681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657783889
    },
    {
        "content": "<p>The point is that there is some (very small) content: I am <em>mapping</em> a multiset over a function and then summing.</p>\n<p>Essentially if F is a multiset and a is another element, I am doing <code>((a::F).map f).to_list.sum</code> vs <code>((a..F.to:list).map f).sum</code>.  So there is some property that you actually have to check.  I think...</p>",
        "id": 289559895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657784077
    },
    {
        "content": "<p>Are you still using <code>multiset.to_list</code>?</p>",
        "id": 289559922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657784122
    },
    {
        "content": "<p>No, not anymore, this was before.  Now the full proof is what I wrote above.  The statement is purely about multisets, no lists.</p>",
        "id": 289559995,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657784175
    },
    {
        "content": "<p>What <em>is</em> the statement?</p>",
        "id": 289560014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657784200
    },
    {
        "content": "<p>You can check it out in <a href=\"https://github.com/leanprover-community/mathlib/pull/15296\">#15296</a> (still has the old statement).</p>",
        "id": 289560020,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657784206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sup_support_multiset_prod_le</span>\n  <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">D0</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Dm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">D</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.prod.support.sup</span> <span class=\"n\">D</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f.support.sup</span> <span class=\"n\">D</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">F</span> <span class=\"n\">using</span> <span class=\"n\">quot.induction_on</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.quot_mk_to_coe''</span><span class=\"o\">,</span> <span class=\"n\">multiset.coe_map</span><span class=\"o\">,</span> <span class=\"n\">multiset.coe_sum</span><span class=\"o\">,</span> <span class=\"n\">multiset.coe_prod</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sup_support_list_prod_le</span> <span class=\"n\">D0</span> <span class=\"n\">Dm</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289560033,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657784226
    },
    {
        "content": "<p>without context might be hard to parse...  most things in sight have the appropriate operations and are commutative.</p>",
        "id": 289560071,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657784268
    },
    {
        "content": "<p>Yeah, that shouldn't need the middle <code>rw</code>.</p>",
        "id": 289560125,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657784290
    },
    {
        "content": "<p>Feel free to try it!  I must run now, though!</p>",
        "id": 289560169,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657784344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.coe_prod/src\">src#multiset.coe_prod</a> isn't rfl</p>",
        "id": 289563189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657786593
    },
    {
        "content": "<p>Ah, that explains it.</p>",
        "id": 289563219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657786615
    },
    {
        "content": "<p>I think this is the thing about list sum being defined using a weird fold direction, for which there's a thread somewhere</p>",
        "id": 289563262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657786642
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/161\">#161</a></p>",
        "id": 289563280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657786658
    },
    {
        "content": "<p>Oh, and <a href=\"#narrow/stream/113488-general/topic/list.2Eprod/near/128334739\">This Zulip conversation</a> it links to</p>",
        "id": 289563374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657786706
    },
    {
        "content": "<p>Damiano, check out the way the proofs work in <a href=\"https://github.com/leanprover-community/mathlib/pull/15155\">#15155</a></p>",
        "id": 289581777,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657799441
    },
    {
        "content": "<p>You could very likely express your proofs either using the ones in the PR, or with very similar tactic bodies</p>",
        "id": 289581815,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657799470
    }
]