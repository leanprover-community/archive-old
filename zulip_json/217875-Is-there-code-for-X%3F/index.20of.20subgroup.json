[
    {
        "content": "<p>Does mathlib know this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_group.card_dvd_of_le</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"n\">H</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251497900,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1630469962
    },
    {
        "content": "<p>I'm not aware of it. Relatedly, should we define <code>subgroup.index</code> just to make talking about indices less verbose?<br>\nI imagine something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subgroup.index</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.quotient</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"k\">then</span> <span class=\"bp\">...</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>But there might be a smoother definition</p>",
        "id": 251501034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630472192
    },
    {
        "content": "<p>Oh, making it 0 for infinite is a nice touch. Then you can get rid of the fintype assumption on the lemma.</p>",
        "id": 251502851,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1630473394
    },
    {
        "content": "<p>Trying to resist the urge to call it <code>subgroup.findex</code></p>",
        "id": 251509952,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1630478235
    },
    {
        "content": "<p>what's wrong with just <code>subgroup.index</code> like in Johan's comment?</p>",
        "id": 251510122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630478328
    },
    {
        "content": "<p>It's fine, but we have <code>findim</code> and <code>finrank</code> for this sort of \"0 if infinite\" thing</p>",
        "id": 251510188,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1630478385
    },
    {
        "content": "<p>those seem more likely to be useful when infinite though - I haven't heard of using cardinals for subgroup indexes before</p>",
        "id": 251510283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630478433
    },
    {
        "content": "<p>That's true. We probably wouldn't want to have a separate cardinal-valued subgroup.index</p>",
        "id": 251510441,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1630478533
    }
]