[
    {
        "content": "<p>I could not find the following by <code>library_search</code> or otherwise. Do we (not) have it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ennreal.to_nnreal_le_to_nnreal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.to_nnreal</span> <span class=\"bp\">≤</span> <span class=\"n\">b.to_nnreal</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ennreal.coe_le_coe</span> <span class=\"n\">a.to_nnreal</span> <span class=\"n\">b.to_nnreal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">hab</span> <span class=\"n\">hb.lt_top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263172754,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1638290865
    },
    {
        "content": "<p>Seems not -- maybe add using the same naming convention as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.to_real_le_to_real\">docs#ennreal.to_real_le_to_real</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.to_real_mono\">docs#ennreal.to_real_mono</a>?</p>",
        "id": 263173080,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638290997
    },
    {
        "content": "<p>It's a bit worse than <code>mono</code> because of the <code>hb</code> hypothesis. Golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ennreal.to_nnreal_le_to_nnreal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.to_nnreal</span> <span class=\"bp\">≤</span> <span class=\"n\">b.to_nnreal</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ennreal.coe_le_coe</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hab.trans_lt</span> <span class=\"n\">hb.lt_top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 263173709,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638291253
    },
    {
        "content": "<p>Thank you both!</p>\n<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/10556\">#10556</a> (hopefully easy) with four such lemmas. I tried to follow exactly the same naming and hypothesis conventions as in the corresponding <code>to_real</code> versions, as Heather suggested, and I included Yakov's golf in two of the four.</p>",
        "id": 263187966,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1638297124
    }
]