[
    {
        "content": "<p>How do I say that a group <code>G</code> acts on a <code>K</code>-algebra <code>L</code> via algebra automorphisms?</p>\n<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but <code>distrib_mul_action</code> is certainly not strong enough for what I want. Do we have a class that does what I want?</p>",
        "id": 251372497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630411157
    },
    {
        "content": "<p>Do you mean that each <code>G</code> is associated with a <code>L ≃ₐ[K] L</code>?</p>",
        "id": 251372938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630411320
    },
    {
        "content": "<p>I think <code>mul_semiring_action</code> is close</p>",
        "id": 251373100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630411391
    },
    {
        "content": "<p>Where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_semiring_action.to_semiring_equiv\">docs#mul_semiring_action.to_semiring_equiv</a> is the associated <code>L ≃+* L</code></p>",
        "id": 251373145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630411419
    },
    {
        "content": "<p>I guess to show it's an <code>alg_equiv</code>, you also need <code>smul_comm_class K G L</code></p>",
        "id": 251373227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630411446
    },
    {
        "content": "<p>So final answer,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_semiring_action</span> <span class=\"n\">G</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">K</span> <span class=\"n\">G</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 251373264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630411472
    },
    {
        "content": "<p>With these defs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mul_semiring_action.to_alg_hom</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_semiring_action</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">algebra.algebra_map_eq_smul_one</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">smul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_one</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">mul_semiring_action.to_ring_hom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_semiring_action.to_alg_equiv</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_semiring_action</span> <span class=\"n\">G</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">G</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">mul_semiring_action.to_semiring_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">mul_semiring_action.to_alg_hom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 251373938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630411833
    },
    {
        "content": "<p>We should probably have <code>distrib_mul_action.to_linear_map</code> and <code>distrib_mul_action.to_linear_equiv</code> too (which I did in <a href=\"#narrow/stream/116395-maths/topic/Lost.20instance/near/249468775\">this thread</a>)</p>",
        "id": 251374002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630411868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> awesome! and I can also make the action faithful, since a couple of days, right?</p>",
        "id": 251374060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630411907
    },
    {
        "content": "<p>btw, I think the <code>to_alg_equiv</code> should be a monoid hom, or would that get another name?</p>",
        "id": 251374284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630412009
    },
    {
        "content": "<p>It's a bit of a mess</p>",
        "id": 251374325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630412029
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.to_perm\">docs#mul_action.to_perm</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.to_perm_hom\">docs#mul_action.to_perm_hom</a></p>",
        "id": 251374356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630412042
    },
    {
        "content": "<p>So in principle we should have <code>mul_semiring_action.to_alg_hom</code> and <code>mul_semiring_action.to_alg_hom_hom</code></p>",
        "id": 251374414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630412059
    },
    {
        "content": "<p>Alternatively, we should maybe eliminate the non-hom versions</p>",
        "id": 251374447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630412079
    },
    {
        "content": "<p>We also have two spellings for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action.to_add_monoid_hom\">docs#distrib_mul_action.to_add_monoid_hom</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/const_smul_hom\">docs#const_smul_hom</a>, which appear in entirely different files</p>",
        "id": 251374482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630412100
    },
    {
        "content": "<p>The mess is further complicated by the fact that some auto-/endo- morphisms don't have instances for their monoid structures.</p>",
        "id": 251374651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630412179
    },
    {
        "content": "<p>This would be a great cleanup project for someone looking to contribute!</p>",
        "id": 251374730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630412228
    },
    {
        "content": "<p>I'll PR the above two defs, but leave the <code>_hom</code> variants to someone else</p>",
        "id": 251376353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630413110
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 251377469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630413711
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8936\">#8936</a></p>",
        "id": 251377547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630413728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Are there any conventions on whether to use <code>[smul_comm_class M R A]</code> or <code>[smul_comm_class R M A]</code>?</p>",
        "id": 251435854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630435525
    },
    {
        "content": "<p>Not yet. At any rate, if one instance is present the other one should always be too</p>",
        "id": 251444052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630438294
    },
    {
        "content": "<p>Usually it ends up being the one that results in <code>smul_comm</code> rather than <code>←smul_comm</code> being used in the proof. I guess the other rule is that you should never assume both typeclasses as that just slows down typeclass search for no good reason.</p>",
        "id": 251445656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630438844
    }
]