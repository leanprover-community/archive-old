[
    {
        "content": "<p>I'm sure we have something along these lines, but I can't seem to find anything...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_of_finset_sum_le</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 249175221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628719337
    },
    {
        "content": "<p>There is a sort of mechanism to do this thing, see <span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span>'s proof of Bessel's inequality: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/orthonormal.inner_products_summable\">docs#orthonormal.inner_products_summable</a></p>",
        "id": 249180238,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628722678
    },
    {
        "content": "<p>You would say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">use</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to provide a candidate for the sum, and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">has_sum_of_is_lub_of_nonneg</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>to get goals which <code>cond</code> allows you to prove.</p>",
        "id": 249180405,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628722781
    },
    {
        "content": "<p>I wrote <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum_of_is_lub_of_nonneg\">docs#has_sum_of_is_lub_of_nonneg</a>.  If I remember correctly, the reason I didn't at the time provide a corollary along the lines you mention is that I thought it should apply to complete linear ordered add_monoids, or something like that, and there was no way of stating this kind of typeclass condition because of the algebraic order properties not being mixins.  Maybe <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s refactor has since fixed this!</p>",
        "id": 249180905,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628723052
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ! I think for now I can get by with <code>has_sum_of_is_lub_of_nonneg</code>.</p>",
        "id": 249181087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628723196
    },
    {
        "content": "<p>I did prove this a few days ago, it should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable_of_sum_le\">docs#summable_of_sum_le</a></p>",
        "id": 249183835,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1628725408
    }
]