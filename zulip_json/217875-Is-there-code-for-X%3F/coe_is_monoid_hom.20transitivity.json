[
    {
        "content": "<p>I have 3 monoids <code>A B C</code> and there are coercions <code>A → B</code>, <code>B → C</code>, which are monoid homomorphisms. It would be convenient if Lean inferred <code>coe_is_monoid_hom A C</code>by transitivity on its own.  So I need something like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">trans</span> <span class=\"o\">[</span><span class=\"n\">has_lift_t</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lift_t</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">coe_is_monoid_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_is_monoid_hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">coe_is_monoid_hom</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there a reason why it's not in mathlib? If no, I can do it and make a PR. If yes, how can I work around the problem?</p>",
        "id": 310643883,
        "sender_full_name": "Vasily Nesterov",
        "timestamp": 1668701614
    },
    {
        "content": "<p>The class <code>coe_is_monoid_hom</code> is <em>very</em> new, so it's possible there is API missing, but in this case I think the problem is that <code>B</code> becomes a metavariable in type class search.</p>",
        "id": 310655007,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668704723
    },
    {
        "content": "<p>If you <code>#lint</code> right after this instance you get a <code>dangerous_instance</code> warning right?</p>",
        "id": 310655081,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668704749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> will know the plan for this type class.</p>",
        "id": 310655458,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668704848
    },
    {
        "content": "<p>Normally the way to express this would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 310656209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668705074
    },
    {
        "content": "<blockquote>\n<p>but in this case I think the problem is that B becomes a metavariable in type class search, so we can't actually have this instance. You could make it a def though.</p>\n</blockquote>\n<p>I think the instance is safe because <code>B</code> is encoded as an implicit argument of <code>coe_is_monoid_hom</code></p>",
        "id": 310656511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668705155
    },
    {
        "content": "<p>I haven't been able to get around to implementing this but the plan is indeed to have this as an instance (and I designed the classes so that it can be an instance without issues)</p>",
        "id": 310785212,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1668766300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  It's nice. If you don't mind, I could implement this (transitivity of coercions preserving various algebraic structures presented in <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/hom/group.html\">algebra.hom.group</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/hom/group_action.html\">algebra.hom.group_action</a>).</p>\n<p>Actually I've already tried to do this, because it's necessary for my other project. But I ran into an annoying problem: we can't just imitate <code>lift_trans</code> in which we have <code>has_lift_t B C</code> and only <code>has_lift A B</code> (instead <code>has_lift_t</code>), because chain of coercions may contain non-monoid types. So we need to use <code>has_lift_t</code> in both cases. But then Lean can't infer lifting from <code>A</code> to <code>C</code> by <code>lift_trans</code>. The best thing I came up with is explicitly specify the coercion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coe_is_monoid_hom_trans</span> <span class=\"o\">[</span><span class=\"n\">AB_lift</span> <span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BC_lift</span> <span class=\"o\">:</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AB_hom</span> <span class=\"o\">:</span> <span class=\"n\">coe_is_monoid_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BC_hom</span> <span class=\"o\">:</span> <span class=\"n\">coe_is_monoid_hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">coe_is_monoid_hom</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">⟨</span><span class=\"n\">BC_lift.lift</span> <span class=\"bp\">∘</span> <span class=\"n\">AB_lift.lift</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What do you think?</p>",
        "id": 311053232,
        "sender_full_name": "Vasily Nesterov",
        "timestamp": 1668881458
    },
    {
        "content": "<p>Please don't, see: <a href=\"#narrow/stream/113488-general/topic/Please.20stop.20adding.20generalized.20API.20around.20coercions\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Please.20stop.20adding.20generalized.20API.20around.20coercions</a></p>",
        "id": 311053753,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668881758
    }
]