[
    {
        "content": "<p>I would think this would be a <code>simp</code> lemma or something?... Thanks in advance!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module.free</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 292569979,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660048652
    },
    {
        "content": "<p>Does <code>by apply_instance</code> find it?</p>",
        "id": 292570116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660048695
    },
    {
        "content": "<p>Nevermind, sorry. Librarysearch found it... (It was timing out before. So I moved it to the top of the file and used <code>#exit</code>...)</p>",
        "id": 292570213,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660048752
    },
    {
        "content": "<p>You shouldn't be using <code>library_search</code> for this anyway, it's a typeclass</p>",
        "id": 292570434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660048826
    },
    {
        "content": "<p>Which means lean will just find it for you whever you need it</p>",
        "id": 292570485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660048854
    },
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.free\">docs#module.free</a> say \"Type ?\" even though the source says it's the same universe as M?</p>",
        "id": 292570543,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660048875
    },
    {
        "content": "<p>Probably a bug in the doc-gen export</p>",
        "id": 292570684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660048925
    },
    {
        "content": "<p>Note that if you also need that it is finite you may need to explicitly write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">module.finite</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">module.finite.pi</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>There is a discussion why sometimes Lean doesn't find it automatically, but I don't remember the details.</p>",
        "id": 292571891,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1660049405
    },
    {
        "content": "<p>I just created <a href=\"https://github.com/leanprover-community/mathlib/pull/15956\">#15956</a> to cleanup some mess around <code>module.free</code></p>",
        "id": 292572200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660049538
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 292573918,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1660050171
    }
]