[
    {
        "content": "<p>Dear All,</p>\n<p>in the process ot proving Gordan's lemma, one of the tools that would be useful to have is the version below of the Krein-Milman: does it appear already in mathlib, in one form or another?</p>\n<p>Thanks!</p>\n<p>Let <code>K</code> be a compact, convex subset of a finite-dimensional real vector space.  Then, <code>K</code> is the convex hull of its extreme points.</p>",
        "id": 234035139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618137845
    },
    {
        "content": "<p>Note: I am happy to assume further nice properties about <code>K</code>: for instance, in the application to Gordan's lemma, the set <code>K</code> is cut out by <em>finitely many</em> linear inequalities.</p>\n<p>Thus, if something is close to this result, it might already be enough for my purposes!</p>",
        "id": 234035175,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618137913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and I have some results in this direction, but not quite as general as you're looking for, I think: <a href=\"https://github.com/leanprover-community/mathlib/blob/sperner-again/src/combinatorics/simplicial_complex/extreme_point.lean\">https://github.com/leanprover-community/mathlib/blob/sperner-again/src/combinatorics/simplicial_complex/extreme_point.lean</a></p>",
        "id": 234053060,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618153796
    },
    {
        "content": "<p>Specifically </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_of_convex_hull_eq_convex_hull_of_linearly_independent</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">affine_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">affine_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which says that if two affinely independent finite sets in a normed space have the same convex hull, then they're the same</p>",
        "id": 234053160,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618153865
    },
    {
        "content": "<p>As well as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_of_is_extreme_to_convex_hull</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_extreme</span> <span class=\"o\">(</span><span class=\"n\">convex_hull</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>ie that if <code>x</code> is an extreme point of the convex hull of <code>X</code>, then it's in <code>X</code></p>",
        "id": 234053251,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618153932
    },
    {
        "content": "<p>I think this gives the special case of Krein-Milman for simplices?</p>",
        "id": 234053410,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618154058
    },
    {
        "content": "<p>If that's not strong enough I think it wouldn't be too hard to formalise the proof here: <a href=\"http://mathonline.wikidot.com/the-krein-milman-theorem\">http://mathonline.wikidot.com/the-krein-milman-theorem</a></p>",
        "id": 234053770,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618154354
    },
    {
        "content": "<p>Bhavik, thank you very much!  I am glad to see that there is stuff in this direction already in mathlib!</p>\n<p>In my intended application, the set is given by finitely many linear inequalities.  However, I would want to use this result for <em>any</em> finite set of affine linear inequalities.  So, if I am going to follow this route, I would have to formalize the more general version first.</p>\n<p>Thanks!</p>",
        "id": 234059158,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618159255
    },
    {
        "content": "<p>I also think that this gives Krein-Milman for simplices.  In the toric analogy, these are, I think, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>-factorial toric varieties, while I would really want all toric varieties...</p>",
        "id": 234059291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618159410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/convex.20hulls.20and.20compact.20convex.20sets/near/234059158\">said</a>:</p>\n<blockquote>\n<p>Bhavik, thank you very much!  I am glad to see that there is stuff in this direction already in mathlib!</p>\n<p>In my intended application, the set is given by finitely many linear inequalities.  However, I would want to use this result for <em>any</em> finite set of affine linear inequalities.  So, if I am going to follow this route, I would have to formalize the more general version first.</p>\n<p>Thanks!</p>\n</blockquote>\n<p>It's not yet in mathlib, it's just in a branch for now - we'll PR it soon :)</p>",
        "id": 234059553,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618159670
    },
    {
        "content": "<p>Ah, ok!  Anyway, the application that I have in mind is in <code>lean-liquid</code>, which also is not in mathlib!</p>",
        "id": 234059771,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618159899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/convex.20hulls.20and.20compact.20convex.20sets/near/234035175\">said</a>:</p>\n<blockquote>\n<p>Note: I am happy to assume further nice properties about <code>K</code>: for instance, in the application to Gordan's lemma, the set <code>K</code> is cut out by <em>finitely many</em> linear inequalities.</p>\n<p>Thus, if something is close to this result, it might already be enough for my purposes!</p>\n</blockquote>\n<p>Thinking about this a bit more, perhaps my result in combination with Caratheodory's lemma might help? Specifically I think you could show that if <code>K</code> is the convex hull of finitely many points, then those points are the extreme points of <code>K</code>, by considering the (d+1)-tuples of <code>K</code> - though again maybe this still isn't strong enough</p>",
        "id": 234065307,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618165312
    },
    {
        "content": "<p>Hmm, I would have to think if Caratheodory's lemma is enough.  I do not see a direct argument, straight away...</p>",
        "id": 234067910,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618167928
    },
    {
        "content": "<p>Farkas lemma might be what you want?<br>\n<a href=\"http://www.ma.rhul.ac.uk/~uvah099/Maths/Farkas.pdf\">http://www.ma.rhul.ac.uk/~uvah099/Maths/Farkas.pdf</a></p>",
        "id": 234079536,
        "sender_full_name": "David Wärn",
        "timestamp": 1618178366
    },
    {
        "content": "<p>David, thank you!  I would have to think a little, but I had forgotten about Farkas's lemma and i do believe that this would work!</p>\n<p>Thank you so much!</p>",
        "id": 234091397,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618190978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> and I are now on our way to prove Krein-Milman for normed spaces, because locally convex topological vector spaces aren't yet in mathlib. Is that general enough for you? If not, I guess we could ask someone to write an API for LCTVS and then it should be a matter of minutes to adapt the file we're currently writing.</p>",
        "id": 234285775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618301634
    },
    {
        "content": "<p>Yaël, normed spaces would be enough: I want to apply this result to finite dimensional real vector spaces!</p>\n<p>Thanks a lot!</p>",
        "id": 234287041,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618302271
    },
    {
        "content": "<p>Okay great! I'll keep you updated. I've never PRed, so this will be fun!</p>",
        "id": 234333005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618323428
    },
    {
        "content": "<p>The implication from the geometrical version to Hahn-Banach to Krein-Milman is now done! <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> is currently proving the said Hahn-Banach. If anybody has ideas of what to add to our files about extreme and exposed sets, feel free to tell. In particular, <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, is there anything you should know about the set of extreme points of convex hulls?</p>",
        "id": 234728830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618511450
    },
    {
        "content": "<p>That is great!  I will take a look, though not today!</p>\n<p>Thank you so much!</p>",
        "id": 234729418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618511674
    },
    {
        "content": "<p>Btw... where is this?  I tried the link above</p>\n<p>(<a href=\"https://github.com/leanprover-community/mathlib/blob/sperner-again/src/combinatorics/simplicial_complex/extreme_point.lean\">https://github.com/leanprover-community/mathlib/blob/sperner-again/src/combinatorics/simplicial_complex/extreme_point.lean</a>)</p>\n<p>but it does not work for me.</p>",
        "id": 234729605,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618511740
    },
    {
        "content": "<p>Ah sorry I've shuffled files around since we posted this link. Here's the one: <a href=\"https://github.com/leanprover-community/mathlib/blob/sperner-again/src/combinatorics/simplicial_complex/krein-milman.lean\">https://github.com/leanprover-community/mathlib/blob/sperner-again/src/combinatorics/simplicial_complex/krein-milman.lean</a></p>",
        "id": 234730618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618512140
    },
    {
        "content": "<p>Thanks!  I will need some time to digest it, but this looks very good!</p>",
        "id": 234732164,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618512781
    },
    {
        "content": "<p>Yup, I've almost finished the two sorried statements at the top in a different branch, which I'll try to PR to mathlib directly!</p>",
        "id": 234735364,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618514007
    },
    {
        "content": "<p>Now finished, specifically the following statements (all for normed spaces):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">geometric_hahn_banach_open</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hA₂</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA₃</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB₂</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">geometric_hahn_banach_open_open</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hA₂</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA₃</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB₂</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB₃</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">geometric_hahn_banach_closed_closed_compact</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hA₂</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA₄</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB₂</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA₃</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">geometric_hahn_banach_point_point</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>so now Krein-Milman should be entirely sorry-free</p>",
        "id": 234769919,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618528794
    },
    {
        "content": "<p>Great work! Thanks a lot!</p>",
        "id": 234789305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618544604
    },
    {
        "content": "<p>This is really impressive: thank you very much!</p>",
        "id": 234796670,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618550926
    },
    {
        "content": "<p>What happened to <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> convexity refactor from last summer? Did it ever reach mathlib? Or are we still adding stuff that would need to be refactored?</p>",
        "id": 234977281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618654070
    },
    {
        "content": "<p>What was this refactor about? Is it because we haven't yet defined LCTVS?</p>",
        "id": 234982497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618659599
    },
    {
        "content": "<p>I wonder if these results can also be used to close <a href=\"https://github.com/leanprover-community/mathlib/issues/2601\">#2601</a>? \"Strong duality for linear programming\" should be a corollary of this stuff, at least over the reals.</p>",
        "id": 235011647,
        "sender_full_name": "David Wärn",
        "timestamp": 1618688047
    }
]