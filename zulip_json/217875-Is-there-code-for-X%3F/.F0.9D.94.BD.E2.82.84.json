[
    {
        "content": "<p>Do we have any computable way to build <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>? I can build the data quite easily with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [add_comm_group, fintype]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span> <span class=\"bp\">×</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span>\n<span class=\"kn\">namespace</span> <span class=\"bp\">𝔽₄</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)⟩</span>\n  <span class=\"kd\">def</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"s2\">\"0\"</span><span class=\"o\">,</span> <span class=\"s2\">\"α\"</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"s2\">\"1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"1 + α\"</span><span class=\"o\">]]</span> <span class=\"n\">f.1</span> <span class=\"n\">f.2</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"mi\">0</span><span class=\"o\">]],</span>\n        <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]]],</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>     <span class=\"mi\">1</span><span class=\"o\">]],</span>\n        <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"mi\">1</span><span class=\"o\">,</span>     <span class=\"n\">x</span><span class=\"o\">]]]]</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span> <span class=\"n\">y.1</span> <span class=\"n\">y.2</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">α</span>\n<span class=\"kd\">end</span> <span class=\"bp\">𝔽₄</span>\n</code></pre></div>\n<p>but I'm left with a nasty case bash to prove it's a field</p>",
        "id": 320946805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673532598
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field\">docs#galois_field</a><code> 2 2</code>?</p>",
        "id": 320947052,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673532644
    },
    {
        "content": "<p>Or is that not computable enough?</p>",
        "id": 320947129,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673532664
    },
    {
        "content": "<p>That's not computable at all unfortunately, due to <code>polynomial.X</code> being noncomputable</p>",
        "id": 320947269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673532699
    },
    {
        "content": "<p>But I guess I could get the field structure for my example via isomorhism with it</p>",
        "id": 320947335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673532718
    },
    {
        "content": "<p>Can you set it up in such a way that <code>dec_trivial</code> works for all the Prop fields?</p>",
        "id": 320953114,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673534168
    },
    {
        "content": "<p><del>Unfortunately that doesn't work for <code>mul_inv_cancel</code>, but it does work for every other field!</del></p>",
        "id": 320955107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673534649
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The finite field with four elements.</span>\n\n<span class=\"sd\">As an implementation detail, this is implemented as the additive group</span>\n<span class=\"sd\">`zmod 2 × zmod 2` with a different multiplication. -/</span>\n<span class=\"kd\">@[derive [add_comm_group, fintype, decidable_eq, nontrivial]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span> <span class=\"bp\">×</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span>\n<span class=\"kn\">namespace</span> <span class=\"bp\">𝔽₄</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"s2\">\"0\"</span><span class=\"o\">,</span> <span class=\"s2\">\"1\"</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"s2\">\"α\"</span><span class=\"o\">,</span> <span class=\"s2\">\"1 + α\"</span><span class=\"o\">]]</span> <span class=\"n\">f.2</span> <span class=\"n\">f.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"mi\">0</span><span class=\"o\">]],</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]]],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span>     <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>     <span class=\"mi\">1</span><span class=\"o\">]],</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"mi\">1</span><span class=\"o\">,</span>     <span class=\"n\">α</span><span class=\"o\">]]]]</span> <span class=\"n\">x.2</span> <span class=\"n\">x.1</span> <span class=\"n\">y.2</span> <span class=\"n\">y.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">]]</span> <span class=\"n\">x.2</span> <span class=\"n\">x.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"bp\">𝔽₄</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">nat_cast</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">nat_cast_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">nat_cast_succ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">prod.ext</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv.inv</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"bp\">..𝔽₄.</span><span class=\"n\">add_comm_group</span><span class=\"o\">,</span>\n  <span class=\"bp\">..𝔽₄.</span><span class=\"n\">nontrivial</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">char_two</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"bp\">𝔽₄</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">prod.ext_iff.trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">and_iff_left</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"n\">char_p.cast_eq_zero_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"bp\">𝔽₄</span>\n</code></pre></div>",
        "id": 320955694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673534797
    },
    {
        "content": "<p><code>dec_trivial</code> failed initially because my implementation was wrong!</p>",
        "id": 320955817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673534827
    },
    {
        "content": "<p>My follow-up question would be whether this is suitable for inclusion in mathlib given that <code>galois_field 2 2</code> exists</p>",
        "id": 320955964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673534870
    },
    {
        "content": "<p>That <code>def 𝔽₄ := zmod 2 × zmod 2</code> line really hurts the eye.</p>",
        "id": 320964422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673536934
    },
    {
        "content": "<p>Yes, it if were in mathlib rather than a sloppy zulip post that would need a comment explaining what is going on</p>",
        "id": 320968464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673537915
    },
    {
        "content": "<p>I understand that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> is the only (good) even prime number (or is it <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span>?). But presumably mathlib should have a computable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><msup><mi>p</mi><mi>n</mi></msup></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_{p^n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, right?</p>",
        "id": 321044849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1673561820
    },
    {
        "content": "<p>I think that in programs like magma, which have very fast finite fields, they cache the multiplication tables etc. The problem with F_p^n is that there's no canonical model because of the automorphisms, so you'll have to choose your favourite irreducible degree n polynomial over F_p i.e. a random one</p>",
        "id": 321047061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673562782
    },
    {
        "content": "<p><a href=\"http://www.seanerikoconnor.freeservers.com/Mathematics/AbstractAlgebra/PrimitivePolynomials/theory.html\">This article</a> looks like a nice summary of algorithms for finding primitive polynomials. (You can skip to the section <em>Definition of Primitive Polynomial</em>). Assuming you have a primitive polynomial ready, here is some code that defines multiplication and inverse Lean-computably:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">adjoin_root</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">to_poly</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mp</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[nolint unused_arguments, derive add_comm_group]</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A computable representation of `adjoin_root (to_poly mp)`.</span>\n<span class=\"cm\">  Finite fields of order p^n can be obtained by choosing an</span>\n<span class=\"cm\">  irreducible polynomial of degree n over `zmod p` as `to_poly mp`.</span>\n<span class=\"cm\">  Using `array` may be faster, but it's a structure so isn't defeq to `fin n → R`,</span>\n<span class=\"cm\">  and it doesn't have an add_group instance. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">adjoin_root</span> <span class=\"o\">(</span><span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi.has_smul</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi_fin.has_repr</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi.fintype</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.decidable_pi_fintype</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">mp</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- multiply by the generator. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul_gen</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">mp</span> <span class=\"bp\">+</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_aux</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mul_gen</span> <span class=\"o\">(</span><span class=\"n\">mul_aux</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">fin.rev</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pi.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Inverse requires `[field R]` and `irreducible (to_poly mp)`, and could be implemented using</span>\n<span class=\"cm\">  Euclidean algorithm, like how `zmod.inv` is defined. For finite fields (`R = zmod p` with `p`</span>\n<span class=\"cm\">  prime), it can be obtained by raising to the `p^(n+1)-2`th power.</span>\n<span class=\"cm\">  TODO: show `adjoin_root mp` is a comm_ring using the equivalence with `adjoin (to_poly mp)`;</span>\n<span class=\"cm\">    show it's a field when `R` is a field and `to_poly mp` is irreducible. -/</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">Qi</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Qi</span><span class=\"o\">)</span> <span class=\"c1\">--![2, 0]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">adjoin_root</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">finite_field</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">mp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">))⟩</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Warning: gives 0⁻¹ = 1 when p = 2, n = 0 -/</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">F4</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">F4</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">F4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- profiler says elaboration takes 4~5s but actually takes 37s</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F4</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv.inv</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">adjoin_root.add_comm_group</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi.nontrivial</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finite_field</span>\n</code></pre></div>",
        "id": 321047870,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673563125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.F0.9D.94.BD.E2.82.84/near/321047061\">said</a>:</p>\n<blockquote>\n<p>... because of the automorphisms...</p>\n</blockquote>\n<p>in principle we can have all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><msup><mi>p</mi><mi>n</mi></msup></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_{p^n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>'s.</p>",
        "id": 321048656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1673563490
    },
    {
        "content": "<p>I'm afraid there are <code>φ(p^n-1)/n</code> primitive polynomials, i.e. monic polynomials <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f \\in \\mathbb{F}_p[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><msup><mi>p</mi><mi>n</mi></msup></msub><mo>≅</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>f</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_{p^n} \\cong  \\mathbb{F}_p[X]/ \\langle f\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">⟩</span></span></span></span> and all nonzero elements are powers of the class of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. My code only requires an irreducible polynomial (i.e. without the last condition), but primitive polynomials are commonly used, probably because it's easier to make a exp-log table from it?</p>\n<ul>\n<li><a href=\"https://reference.wolfram.com/language/FiniteFields/tutorial/FiniteFields.html\">Mathematica</a> provides a default IrreduciblePolynomial but doesn't say what algorithm it uses, and also let you specify your own. </li>\n<li>MATLAB has <a href=\"https://www.mathworks.com/help/comm/ref/gfprimfd.html\">this</a>.</li>\n<li><a href=\"https://doc.sagemath.org/html/en/reference/finite_rings/sage/rings/finite_rings/finite_field_constructor.html\">Sage</a> chooses Conway polynomials.</li>\n</ul>",
        "id": 321052006,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673564922
    }
]