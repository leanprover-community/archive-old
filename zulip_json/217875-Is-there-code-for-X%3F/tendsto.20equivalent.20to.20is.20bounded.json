[
    {
        "content": "<p>Hi! Is there a theorem in mathlib similar to the following? Or can anyone give me a hint on how to prove this please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound</span> <span class=\"o\">(</span><span class=\"n\">seq</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">):</span>\n<span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span><span class=\"o\">):=</span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks a lot!</p>",
        "id": 291078152,
        "sender_full_name": "Ella Yu",
        "timestamp": 1658941605
    },
    {
        "content": "<p>The key lemma here is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_basis_Ioo\">docs#nhds_basis_Ioo</a>, and you can probably find closer matches later in the same file</p>",
        "id": 291086449,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658945070
    },
    {
        "content": "<p>You can also probably get there using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_left_sup_nhds_right\">docs#nhds_left_sup_nhds_right</a></p>",
        "id": 291086862,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658945223
    },
    {
        "content": "<p>I‚Äôm not at my computer atm, but if you are still struggling I can make a proof in a few hours</p>",
        "id": 291086934,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658945256
    },
    {
        "content": "<p>And search more efficiently too</p>",
        "id": 291086955,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658945266
    },
    {
        "content": "<p>Oh and I assumed you were familiar with filters, if that is not the case then tell me and I‚Äôll provide more details</p>",
        "id": 291087243,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1658945381
    },
    {
        "content": "<p>Sorry, I just saw that. I'm not quite familiar with filters and nhds, if you can help me to explain a little bit more that will be awesome! Thanks a lot!</p>",
        "id": 291227138,
        "sender_full_name": "Ella Yu",
        "timestamp": 1659029921
    },
    {
        "content": "<p>Right now your theorem doesn't look true? Although I said this about something on this forum yesterday and I was wrong, so take this with a pinch of salt. Doesn't your theorem say \"if the sequence tends to 1 then there's an element s (:= <code>seq x</code>) of the sequence with the property that for all c1&lt;1 and for all c2 &gt; 1, we have c1&lt;=s and s&lt;=c2\"? It seems to me that you need to swap the forall and exists for this to be true?</p>",
        "id": 291227779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659030287
    },
    {
        "content": "<p>Oh right definitely, I fixed the statement in my head while reading it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 291228197,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659030517
    },
    {
        "content": "<p>Right I see, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound</span> <span class=\"o\">(</span><span class=\"n\">seq</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">):</span>\n<span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span><span class=\"o\">):=</span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so it should be something like this? Thank you so much!</p>",
        "id": 291228804,
        "sender_full_name": "Ella Yu",
        "timestamp": 1659030836
    },
    {
        "content": "<p>And a low-level proof would be: take c_1 &lt; 1 and c_2 &gt; 1, then show that the closed interval <code>Icc c_1 c_2</code> is an element of the <code>ùìù 1</code> filter, so by this <code>tendsto</code> hypothesis its preimage under the map <code>seq</code> will be a subset of <code>nat</code> in the <code>at_top</code> filter so in particular it will be nonempty, so choose an element <code>x</code> and this element will work. Anatole is suggesting a way of getting there more quickly.</p>",
        "id": 291231705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659032298
    },
    {
        "content": "<p>I was also thinking about the following statement, matching the topic title : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">u</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291235331,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659034146
    },
    {
        "content": "<p>But indeed for your statement you don't need filter bases, so let's start with this</p>",
        "id": 291235560,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659034268
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">c1</span> <span class=\"n\">h1</span> <span class=\"n\">c2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">mem_at_top_sets.1</span> <span class=\"o\">(</span><span class=\"n\">tendsto_def.1</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">Icc_mem_nhds</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"n\">x</span> <span class=\"n\">rfl.le</span><span class=\"o\">‚ü©</span>\n</code></pre></div>\n<p>or with tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">c1</span> <span class=\"n\">h1</span> <span class=\"n\">c2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Icc_mem_nhds</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">mem_at_top_sets.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291236586,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659034759
    },
    {
        "content": "<p>For this one, the right proof is the one proposed by Kevin (I don't think bases buy you anything in that case), but we can reformulate it a bit so that it seems more natural. You should think of the fact that <code>Icc c_1 c_2</code> is in <code>ùìù 1</code> (this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Icc_mem_nhds\">docs#Icc_mem_nhds</a>) as a way of expressing the fact that \"when <code>x</code> apporaches 1, we <strong>eventually</strong> have <code>x ‚àà Icc c_1 c_2</code>\" (see the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually\">docs#filter.eventually</a>). Then , since we have <code>tendsto seq at_top (ùìù 1)</code>, we can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.eventually\">docs#filter.tendsto.eventually</a> to deduce that \"when <code>n</code> approaches infinity, we <strong>eventually</strong> have <code>seq n ‚àà Icc c_1 c_2</code>. Finally, since <code>at_top : filter ‚Ñï</code> is a nontrivial filter, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually.exists\">docs#filter.eventually.exists</a> to finish your proof</p>",
        "id": 291236599,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659034764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tendsto.20equivalent.20to.20is.20bounded/near/291236586\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">c1</span> <span class=\"n\">h1</span> <span class=\"n\">c2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">mem_at_top_sets.1</span> <span class=\"o\">(</span><span class=\"n\">tendsto_def.1</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">Icc_mem_nhds</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"n\">x</span> <span class=\"n\">rfl.le</span><span class=\"o\">‚ü©</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hmmm you shouldn't have to use <code>mem_at_top_sets</code> here, only the fact that <code>at_top</code> is nontrivial</p>",
        "id": 291236929,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659034919
    },
    {
        "content": "<p>My proof would be something like :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">c_1</span> <span class=\"n\">h_1</span> <span class=\"n\">c_2</span> <span class=\"n\">h_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.eventually</span> <span class=\"o\">(</span><span class=\"n\">Icc_mem_nhds</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">exists</span>\n</code></pre></div>",
        "id": 291237147,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659035015
    },
    {
        "content": "<p>And notice there is nothing special about <code>at_top</code> here, it would work the same for any nontrivial filter : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound'</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">l.ne_bot</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">c_1</span> <span class=\"n\">h_1</span> <span class=\"n\">c_2</span> <span class=\"n\">h_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.eventually</span> <span class=\"o\">(</span><span class=\"n\">Icc_mem_nhds</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">exists</span>\n</code></pre></div>",
        "id": 291237303,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659035071
    },
    {
        "content": "<p>(One could also generalize the target using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_closed_topology\">docs#order_closed_topology</a>, but that's less crucial)</p>",
        "id": 291237618,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659035232
    },
    {
        "content": "<p>Thanks for all of your answers, I'm thinking about how can we prove the opposite direction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_equiv_has_bound</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c_2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">c_1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c_2</span>  <span class=\"bp\">‚Üí</span>  <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">):=</span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291240477,
        "sender_full_name": "Ella Yu",
        "timestamp": 1659036648
    },
    {
        "content": "<p>This one is not true, you need the statement that I posted above</p>",
        "id": 291240524,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659036678
    },
    {
        "content": "<p>You need to ask that <em>all</em> terms of the sequence are close to 1 after a certain point</p>",
        "id": 291240749,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659036780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tendsto.20equivalent.20to.20is.20bounded/near/291235331\">said</a>:</p>\n<blockquote>\n<p>I was also thinking about the following statement, matching the topic title : </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">u</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This statement</p>",
        "id": 291240826,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659036807
    },
    {
        "content": "<p>I see, so if I wish to prove this equivalence statement,  I need to consider <code>‚àÉ N, ‚àÄ n ‚â• N,</code>.</p>",
        "id": 291241067,
        "sender_full_name": "Ella Yu",
        "timestamp": 1659036955
    },
    {
        "content": "<p>Yes</p>",
        "id": 291241080,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659036960
    },
    {
        "content": "<p>To prove the equivalence, the best is really to use filter bases, namely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis.tendsto\">docs#filter.has_basis.tendsto</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/at_top_basis\">docs#at_top_basis</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_basis_Ioo\">docs#nhds_basis_Ioo</a></p>",
        "id": 291242369,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659037604
    },
    {
        "content": "<p>And then you have to do a bit of cleaning to get to exactly the form you want</p>",
        "id": 291242419,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659037631
    },
    {
        "content": "<p>This would be something like this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">u</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">‚àß</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">at_top_basis.tendsto_iff</span> <span class=\"o\">(</span><span class=\"n\">nhds_basis_Ioo</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Ici</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Ioo</span><span class=\"o\">,</span> <span class=\"n\">exists_true_left</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">prod.forall</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">ge_iff_le</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">forall_congr</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">forall_swap</span><span class=\"o\">),</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291242470,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659037660
    },
    {
        "content": "<p>Note that this is specific to <code>at_top</code> (although it would work for <code>at_top</code> over other types than <code>‚Ñï</code> of course)</p>",
        "id": 291242595,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659037712
    },
    {
        "content": "<p>All the mathematical content is in the first line of the proof, the rest is just messing around to make things match</p>",
        "id": 291242706,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659037781
    },
    {
        "content": "<p>Thank you so much!!! I'm trying to prove the prime number theorem with my groupmates, but I'm not familiar with lean, this is super helpful!</p>",
        "id": 291244089,
        "sender_full_name": "Ella Yu",
        "timestamp": 1659038351
    },
    {
        "content": "<p>Seems this can be generalized to an iff version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_order_unbounded\">docs#tendsto_order_unbounded</a>?</p>",
        "id": 291244129,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659038374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tendsto.20equivalent.20to.20is.20bounded/near/291244129\">said</a>:</p>\n<blockquote>\n<p>Seems this can be generalized to an iff version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_order_unbounded\">docs#tendsto_order_unbounded</a>?</p>\n</blockquote>\n<p>Oh I didn't know about this lemma. But indeed it should be an <code>iff</code>, and then we should use this one</p>",
        "id": 291244344,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659038473
    },
    {
        "content": "<p>Oh we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_order\">docs#tendsto_order</a></p>",
        "id": 291244521,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659038553
    },
    {
        "content": "<p>Oh right, in general you need to split the two foralls because, if <code>a</code> is a minimum, one of the conditions is a forall on an empty set</p>",
        "id": 291244840,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659038723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509955\">@Ella Yu</span> that's an awesome goal! Are you going to make a roadmap like people tend to do for larger projects? See <a href=\"https://b-mehta.github.io/unit-fractions/\">Bloom-Mehta</a> for a recent example (click on \"blueprint\").</p>",
        "id": 291245336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659038981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509955\">Ella Yu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tendsto.20equivalent.20to.20is.20bounded/near/291244089\">said</a>:</p>\n<blockquote>\n<p>Thank you so much!!! I'm trying to prove the prime number theorem with my groupmates, but I'm not familiar with lean, this is super helpful!</p>\n</blockquote>\n<p>No problem, I'm a filter fanboy so I love answering to these questions x) I should also say that if filters are too much of a problem we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a>. But you'll should at least use filters in the statements to be able to use all the API</p>",
        "id": 291245474,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659039028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tendsto.20equivalent.20to.20is.20bounded/near/291245336\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"509955\">Ella Yu</span> that's an awesome goal! Are you going to make a roadmap like people tend to do for larger projects? See <a href=\"https://b-mehta.github.io/unit-fractions/\">Bloom-Mehta</a> for a recent example (click on \"blueprint\").</p>\n</blockquote>\n<p>This looks good! I'll talk about this with my groupmates tomorrow to see how to make it a larger project: )</p>",
        "id": 291246336,
        "sender_full_name": "Ella Yu",
        "timestamp": 1659039452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tendsto.20equivalent.20to.20is.20bounded/near/291245474\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"509955\">Ella Yu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tendsto.20equivalent.20to.20is.20bounded/near/291244089\">said</a>:</p>\n<blockquote>\n<p>Thank you so much!!! I'm trying to prove the prime number theorem with my groupmates, but I'm not familiar with lean, this is super helpful!</p>\n</blockquote>\n<p>No problem, I'm a filter fanboy so I love answering to these questions x) I should also say that if filters are too much of a problem we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a>. But you'll should at least use filters in the statements to be able to use all the API</p>\n</blockquote>\n<p>Great! I'll check the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a> page  :D</p>",
        "id": 291247410,
        "sender_full_name": "Ella Yu",
        "timestamp": 1659039961
    }
]