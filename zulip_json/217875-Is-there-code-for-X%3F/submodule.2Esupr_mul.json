[
    {
        "content": "<p>Is this statement true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.operations</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.supr_mul</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">*</span><span class=\"o\">)],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">supr_subtype.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">supr_subtype</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250122435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629468622
    },
    {
        "content": "<p>I can't find a <code>has_sup (submodule R A)</code> instance, where is it? I find the <code>has_inf</code> one...</p>",
        "id": 250135710,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629474522
    },
    {
        "content": "<p>It comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.complete_lattice\">docs#submodule.complete_lattice</a></p>",
        "id": 250136799,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629474988
    },
    {
        "content": "<p>There might be a better way but In situations like this I sometimes use <code>library_search</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_sup</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 250136848,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629475015
    },
    {
        "content": "<p>Ah great, I did not think about <code>library_search</code> for this. Thanks!</p>",
        "id": 250136910,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629475043
    },
    {
        "content": "<p>You might (and in this case do) need to iterate this but it should get you there.</p>",
        "id": 250136917,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629475045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/submodule.2Esupr_mul/near/250122435\">said</a>:</p>\n<blockquote>\n<p>Is this statement true?</p>\n</blockquote>\n<p>Yes I think it is but it might be a bit fiddly to prove. Presumably one direction of inclusion is easy.</p>",
        "id": 250137872,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629475509
    },
    {
        "content": "<p>Looking again it's much nicer looking with the multiplication by t on the left</p>",
        "id": 250139676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629476395
    },
    {
        "content": "<p>Strange!</p>",
        "id": 250139781,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629476433
    },
    {
        "content": "<p>Both sides are finite sums of  s*t with s in the union of what you called s and what I would have called S, and t in what I would have called T</p>",
        "id": 250160249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629486733
    },
    {
        "content": "<p>The fact that it ends up finite still baffles me, but I've seen enough of the mathlib API to convince me it's true. That handwave doesn't translate painlessly to a formalization I don't think</p>",
        "id": 250207669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629538018
    },
    {
        "content": "<p>Consider the collection of all finite sums where the elements belong to some <code>s i</code>. This is obviously a submodule, and obviously contains all the <code>s i</code> so it must contain <code>⨆ i, s i</code>. On the other hand, any element of <code>⨆ i, s i</code> must contain such finite sums so in fact this is <code>⨆ i, s i</code>. Similar remarks apply to the product of two submodules of an algebra.</p>",
        "id": 250208974,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629539888
    },
    {
        "content": "<p>Took me way longer than I wanted but I found a galois connection heavy proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.operations</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.mul_eq_span_mul_set</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">span_mul_span</span><span class=\"o\">,</span> <span class=\"n\">span_eq</span><span class=\"o\">,</span> <span class=\"n\">span_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.Union_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.mem_mul</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union</span><span class=\"o\">],</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_left</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_right_h</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_right_h_right</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_right_h</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_h_right_h_right</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">submodule.supr_mul</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule.mul_eq_span_mul_set</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">submodule.gi</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gc.l_supr</span><span class=\"o\">,</span> <span class=\"n\">set.supr_eq_Union</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.Union_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.supr_eq_Union</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">span_eq</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)),</span> <span class=\"bp\">←</span> <span class=\"n\">submodule.span_mul_span</span><span class=\"o\">,</span> <span class=\"n\">span_eq</span><span class=\"o\">,</span> <span class=\"n\">span_eq</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">submodule.gi</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">l_supr_u</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250223629,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629560689
    },
    {
        "content": "<p>Write a blog post for me :-)</p>",
        "id": 250230723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629570380
    },
    {
        "content": "<p>set.Union_mul has a one line proof using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image2_Union_left\">docs#set.image2_Union_left</a> <code>_ _ _</code></p>",
        "id": 250236315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629578900
    },
    {
        "content": "<p>Great! I was surprised not to find that lemma, as you can see my proof was just being lazy and hitting it with tidy <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 250236478,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629579145
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8923\">#8923</a></p>",
        "id": 251304611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630362440
    }
]