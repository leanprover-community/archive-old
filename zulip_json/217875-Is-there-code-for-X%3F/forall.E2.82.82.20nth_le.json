[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall₂_nth_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">i_lt_len_x</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i_lt_len_y</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.length</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ass</span> <span class=\"o\">:</span> <span class=\"n\">list.forall₂</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i_lt_len_x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i_lt_len_y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293141583,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660319861
    },
    {
        "content": "<p>I don't think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.forall%E2%82%82\">docs#list.forall₂</a> has much API</p>",
        "id": 293144909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660320879
    },
    {
        "content": "<p>Do you think it is a lemma that I should prove and then add to mathlib?</p>",
        "id": 293155853,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660324442
    },
    {
        "content": "<p>Can you state it as an iff and prove that instead?</p>",
        "id": 293164510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660327263
    },
    {
        "content": "<p>Either <code>i_lt_len_x</code> or <code>i_lt_len_y</code> is redundant, since <code>forall₂</code> implies <code>x.length = y.length</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.forall₂</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293165738,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1660327680
    },
    {
        "content": "<p>I'll give it a try on Monday. Thanks for the suggestion!</p>",
        "id": 293171049,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660329560
    },
    {
        "content": "<p>The <code>exists</code> in that statement is probably sufficient justification to have the original non-iff version too, since I imagine it's more convenient for the forwards direction</p>",
        "id": 293177850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660331924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/forall.E2.82.82.20nth_le/near/293165738\">said</a>:</p>\n<blockquote>\n<p>Either <code>i_lt_len_x</code> or <code>i_lt_len_y</code> is redundant, since <code>forall₂</code> implies <code>x.length = y.length</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.forall₂</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't think the formulation is correct.</p>",
        "id": 293489209,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660555419
    },
    {
        "content": "<p>Counterexample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">list.forall₂</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[[],</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">imposs</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list.length</span> <span class=\"n\">at</span> <span class=\"n\">imposs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.not_lt_zero</span> <span class=\"n\">i</span> <span class=\"n\">imposs</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293489296,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660555444
    },
    {
        "content": "<p>Yeah, the <code>→</code> works, but not <code>←</code></p>",
        "id": 293489465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660555541
    },
    {
        "content": "<p>Do you have a preference on how the statement of the theorem should be changed?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/21a7cf2220dd6167b3c077eb2c04e9db4538dc67/src/data/list/forall2.lean#L159\">https://github.com/leanprover-community/mathlib/blob/21a7cf2220dd6167b3c077eb2c04e9db4538dc67/src/data/list/forall2.lean#L159</a></p>",
        "id": 293490264,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660555974
    },
    {
        "content": "<p>Why not state it exactly as the docstring says?</p>\n<blockquote>\n<p><code>forall₂ R l₁ l₂</code> means that <code>l₁</code> and <code>l₂</code> have the same length, and whenever <code>a</code> is the nth element of <code>l₁</code>, and <code>b</code> is the nth element of <code>l₂</code>, then <code>R a b</code> is satisfied.</p>\n</blockquote>\n<p>Statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.forall₂_iff'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.forall₂</span> <span class=\"n\">R</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">↔</span> <span class=\"n\">l₁.length</span> <span class=\"bp\">=</span> <span class=\"n\">l₂.length</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">l₁.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293676003,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1660639520
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/16073\">https://github.com/leanprover-community/mathlib/pull/16073</a></p>",
        "id": 293694585,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660648045
    },
    {
        "content": "<p>Can you split out all the variable renaming to its own PR?</p>",
        "id": 293699084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660650226
    },
    {
        "content": "<p>Or maybe, just make a PR that adds the new lemma; it's not clear to me whether the renaming is a net improvement</p>",
        "id": 293699256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660650287
    },
    {
        "content": "<p>I thought it would be OK to do it together. Patrick Johnson wanted me to rename <code>r</code> to <code>R</code>, so I wanted to include the change before PRing it, and it didn't look good when I renamed <code>r</code> to <code>R</code> only in my theorem.</p>",
        "id": 293704827,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660652601
    },
    {
        "content": "<blockquote>\n<p>Patrick Johnson wanted me to rename <code>r</code> to <code>R</code></p>\n</blockquote>\n<p>The snippet I posted is just an example. I'm not insisting on anything.</p>",
        "id": 293705395,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1660652841
    },
    {
        "content": "<p>OK, sorry.</p>",
        "id": 293706850,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660653407
    },
    {
        "content": "<p>I suggest we first discuss whether we want <code>r</code> or <code>R</code> to be used throughout the file. Should I create a new thread for it, possibly in the \"PR reviews\" stream? If you agree on <code>R</code> in the end, I will strongly prefer to continue with reviewing the single PR as it is.</p>",
        "id": 293707245,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660653573
    },
    {
        "content": "<p>I think we care more about not overediting files than variable name consistency.</p>",
        "id": 293707555,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660653717
    },
    {
        "content": "<p>It's best not to mix high-effort, highly-opinionated, low-value changes (ie renaming everything) with simpler high-value changes (like your new lemmas)</p>",
        "id": 293708478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660654144
    },
    {
        "content": "<p>Because then everyone argues about the stuff that didn't need to change in the first place, and your new lemma ends up unecessarily being held hostage by the rest of the PR</p>",
        "id": 293708566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660654186
    },
    {
        "content": "<p>Should I revert the changes of the variable names and keep this PR on? Or should I create a new branch in the mathlib repository, copypaste the new lemmata to it (losing the edit history), and PR from there?</p>",
        "id": 293708836,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660654310
    },
    {
        "content": "<p>I'd just revert the variable name changes; you can always recover them from the history later if you want to suggest appling them in a subsequent PR.</p>",
        "id": 293708969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660654350
    },
    {
        "content": "<p>Here's a much shorter proof for the forwards direction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">forall₂.nth_le</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">forall₂</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.length</span><span class=\"o\">),</span>\n    <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">forall₂.cons</span> <span class=\"n\">ha</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"mi\">0</span>        <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">forall₂.cons</span> <span class=\"n\">ha</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">hl.nth_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 293717870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660656308
    }
]