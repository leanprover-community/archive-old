[
    {
        "content": "<p>This one is quite stupid. Help please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306517042,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1666896981
    },
    {
        "content": "<p>I'm not next to Lean, but will <code>dec_trivial</code> do it?</p>",
        "id": 306518164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666897344
    },
    {
        "content": "<p>Seems like yes -- and <code>hint</code> looks like it indeed suggests <code>dec_trivial</code> (saying it solves the goal)  which is sometimes a good thing to try for silly looking things.</p>",
        "id": 306518778,
        "sender_full_name": "Julian Berman",
        "timestamp": 1666897597
    },
    {
        "content": "<p>I would have tried norm_num</p>",
        "id": 306519245,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666897709
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 306523084,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666899040
    },
    {
        "content": "<p>The ultimate golf: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 306523186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666899079
    },
    {
        "content": "<p>What is that??? The dot does something like <code>dec_trivial</code>?...</p>",
        "id": 306524797,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1666899655
    },
    {
        "content": "<p>A single dot generates the same term as my version, which is much longer than the term generated by <code>dec_trivial</code> (when printed with <code>set_option pp.implicit true</code>. <code>dec_trivial</code> uses existing instances so it only needs to check the <code>units.val</code> agree, but it might take more time to find those instances.</p>",
        "id": 306524923,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666899719
    },
    {
        "content": "<p>Is there a documentation for <code>.</code> please?</p>",
        "id": 306525131,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666899804
    },
    {
        "content": "<p><code>example : (1 : ℤˣ) ≠ -1 .</code> is a pattern matching proof but since there's no pattern to be matched you need to append a dot.</p>",
        "id": 306525166,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666899819
    },
    {
        "content": "<p>The same reason as why <code>cases h</code> solves the goal (because it generates zero goals).</p>",
        "id": 306525356,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666899890
    },
    {
        "content": "<p>I would also like to see the dot proofs explained better in documentation or a blog post.   Does something like this also work for Lean 4?</p>",
        "id": 306525584,
        "sender_full_name": "Jason Rute",
        "timestamp": 1666899993
    },
    {
        "content": "<p>While <code>dec_trivial</code> and other easy proofs exist, I had to make a proof by contradiction in permutation group theory, where the contradiction came from <code>1 \\neq -1</code>. Therefore, I believe that it should be in mathlib so that we can apply it and get the contradiction.</p>",
        "id": 306526750,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666900465
    },
    {
        "content": "<p>The dot (period) has the effect of instructing Lean to stop parsing (and possibly more), which is also useful when e.g. you are writing a new proof but want to keep the old proof around without commenting it out: you can insert a period (surrounded by one whitespace each side) between the new proof and the old proof, and then the old proof won't interfere with the new proof. (Mostly useful for term-mode proofs.)</p>",
        "id": 306527569,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666900762
    },
    {
        "content": "<blockquote>\n<p>where the contradiction came from 1 \\neq -1</p>\n</blockquote>\n<p>If you have <code>h : 1 = -1</code> in the context, you can just do <code>cases h</code> to close the goal (or <code>apply absurd h, dec_trivial</code>). But maybe I didn't imagine your situation correctly.</p>",
        "id": 306527711,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666900807
    },
    {
        "content": "<p>I'll check if that suffices!</p>",
        "id": 306528504,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666900948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/1.20.E2.89.A0.20-1.20in.20.E2.84.A4.CB.A3.3F/near/306525584\">said</a>:</p>\n<blockquote>\n<p>I would also like to see the dot proofs explained better in documentation or a blog post.   Does something like this also work for Lean 4?</p>\n</blockquote>\n<p>Lean 4 doesn't support exactly this syntax, but since I like this proof so much I added a similar syntax for it. With <code>Std.Tactic.NoMatch</code> you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>to similar effect.</p>",
        "id": 306529487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666901108
    },
    {
        "content": "<p>There isn't that much to explain: it's an empty pattern match, exactly the same as other equation compiler definitions except there are zero match arms</p>",
        "id": 306529977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666901181
    },
    {
        "content": "<p><del>They're called <code>auto_param</code>s in case it's helpful for searching (I thought I remembered a thread where I asked about them and got linked something in TPiL but seems I'm misremembering)</del></p>",
        "id": 306530669,
        "sender_full_name": "Julian Berman",
        "timestamp": 1666901289
    },
    {
        "content": "<p>that's the wrong \"dot proof\"</p>",
        "id": 306530828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666901316
    },
    {
        "content": "<p>Oh is it? Like they're not related to the ones in structures?</p>",
        "id": 306530891,
        "sender_full_name": "Julian Berman",
        "timestamp": 1666901333
    },
    {
        "content": "<p>you are thinking of <code>(x : A . tac)</code> syntax</p>",
        "id": 306530892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666901334
    }
]