[
    {
        "content": "<p>Is there a function that sends the lists <code>[a,b,c]</code> and <code>[d,e,f]</code> to <code>[a*d, a*e, a*f, b*d, b*e, b*f, c*d, c*e, c*f]</code> given any binary operator <code>*</code>?</p>",
        "id": 202882325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593881892
    },
    {
        "content": "<p>something like <code>(L.product M).map (function.uncurry (*))</code></p>",
        "id": 202882441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593882070
    },
    {
        "content": "<p><code>zip_with</code>?</p>",
        "id": 202885269,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593886442
    },
    {
        "content": "<p>No that's different actually.</p>",
        "id": 202885281,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1593886464
    },
    {
        "content": "<p>This is a job for control theory</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">as</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">bs</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">]</span> <span class=\"c1\">-- [10, 20, 30, 11, 21, 31, 12, 22, 32]</span>\n</code></pre></div>",
        "id": 202887299,
        "sender_full_name": "David Wärn",
        "timestamp": 1593889786
    },
    {
        "content": "<p>Surely something like <code>do a &lt;- L, b &lt;- M, return a*b</code> works, and requires understanding fewer hieroglyphics. (Not at a computer, didn't test.)</p>",
        "id": 202897098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593907872
    },
    {
        "content": "<p>It does work too. It uses the monad structure on <code>list</code> where as <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>'s solution only requires an applicative functor</p>",
        "id": 202897261,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593908176
    },
    {
        "content": "<p>Should we port <code>ApplicativeDo</code> to lean <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 202925569,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593962180
    },
    {
        "content": "<p>I wonder if we can implement that  as a library</p>",
        "id": 202931689,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593972485
    }
]