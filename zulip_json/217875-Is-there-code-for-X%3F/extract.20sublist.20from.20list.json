[
    {
        "content": "<p>Does this exist already?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Returns the sublist of `L` starting at index `m` of length `n`</span>\n<span class=\"sd\">(or shorter, if `L` is too short). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list.extract</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">L.split_at</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">split_at</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">extract</span> <span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"c1\">-- [4,5,6]</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.slice\">docs#list.slice</a> will take a list <code>L</code>, and two nats <code>n</code> and <code>m</code>, and return the list constructed from <code>L</code> by dropping <code>m</code> elements starting from index <code>n</code>.<br>\nI'm interested in the part that is dropped. Is there already a function for that?</p>",
        "id": 255351524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632898781
    },
    {
        "content": "<p>Is there a common name for this in list parlance in other languages?</p>",
        "id": 255351550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632898799
    },
    {
        "content": "<p>I guess people usually just use <code>list.take</code> and <code>list.drop</code>.</p>",
        "id": 255352649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632899428
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">take</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 255352762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632899503
    },
    {
        "content": "<p>This is some fundamental construction <code>L[n,n+m]</code> in python, right? What's it called in Haskell?</p>",
        "id": 255359430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632903437
    },
    {
        "content": "<p>AFAICT, \"slicing\" is the near-universal word for Johan's operation, so <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.slice\">docs#list.slice</a> does exactly the opposite from almost everyone else.</p>",
        "id": 255363843,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632905534
    }
]