[
    {
        "content": "<p>Dear All,</p>\n<p>I cannot find a <code>char_zero</code> instance on <code>R[X]</code>, when <code>R</code> itself has <code>char_zero</code>.  Is the instance below somewhere, and I simply cannot find it?</p>\n<p>Note: this is similar to what happened <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/char_p.20instance.20on.20polynomials\">here</a>, except that there I was asking for <code>char_p</code>.</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">char_p</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">polynomial.char_p'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">--works and finds `polynomial.char_p 0`.</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">polynomial.char_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">nat_cast_inj.mp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 277285398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735139
    },
    {
        "content": "<p>If you have a look at the instance list at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_zero\">docs#char_zero</a>, you can check that it is indeed missing.</p>",
        "id": 277285860,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648735283
    },
    {
        "content": "<p>Ok, thanks for confirming!  As I have been so unsuccessful at finding existing lemmas/instances, I was worried that I might have missed it.</p>",
        "id": 277286025,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735340
    },
    {
        "content": "<p>I will PR it, then!</p>",
        "id": 277286049,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735353
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13075\">#13075</a></p>",
        "id": 277286591,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735575
    },
    {
        "content": "<p>I am sure it is already there</p>",
        "id": 277286638,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735593
    },
    {
        "content": "<p>Let me see</p>",
        "id": 277286649,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735596
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.char_p\">docs#polynomial.char_p</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.char_p_to_char_zero\">docs#char_p.char_p_to_char_zero</a></p>",
        "id": 277286736,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735643
    },
    {
        "content": "<p>I tried this, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.char_p_to_char_zero\">docs#char_p.char_p_to_char_zero</a> wants a ring.</p>",
        "id": 277286789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735666
    },
    {
        "content": "<p>Mmh, I see, and also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.char_p_to_char_zero\">docs#char_p.char_p_to_char_zero</a> is not an instance</p>",
        "id": 277286892,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735701
    },
    {
        "content": "<p>Yes, I think there would be a loop <code>char_p R 0 -&gt; char_zero R -&gt; char_p R 0 -&gt; ...</code>.</p>",
        "id": 277286968,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735743
    },
    {
        "content": "<p>But here I think that this is safe: <code>R[X]</code> inherits <code>char_zero</code> from <code>R</code>, so the \"complexity\" increases, right?</p>",
        "id": 277287070,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735792
    },
    {
        "content": "<p>Well, modifying <code>[ring R]</code> to <code>[semiring R]</code> just before <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.char_p_to_char_zero\">docs#char_p.char_p_to_char_zero</a> didn't break anything, so we at least want it</p>",
        "id": 277287091,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735799
    },
    {
        "content": "<p>Can you add it to your PR?</p>",
        "id": 277287165,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735810
    },
    {
        "content": "<p>Sure!</p>",
        "id": 277287188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735818
    },
    {
        "content": "<p>Even <code>non_assoc_semiring R</code> works</p>",
        "id": 277287373,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735907
    },
    {
        "content": "<p>I don't remember how far we went about this kind of generality :D</p>",
        "id": 277287449,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735923
    },
    {
        "content": "<p>hmmm, it does break:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">char_p_to_char_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">char_zero_of_inj_zero</span> <span class=\"bp\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">eq_zero_of_zero_dvd</span> <span class=\"o\">((</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>char_zero_of_inj_zero</code> wants cancel something</p>",
        "id": 277287467,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735929
    },
    {
        "content": "<p>Ah sorry, my VS code is too slow</p>",
        "id": 277287591,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648735984
    },
    {
        "content": "<p>This is the error, in case you are wondering:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Error</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>type mismatch at application<br>\n  (cast_eq_zero_iff R 0 n).mp h0<br>\nterm<br>\n  h0<br>\nhas type<br>\n  @eq ?m_1<br>\n    (@coe nat ?m_1<br>\n       (@coe_to_lift nat ?m_1<br>\n          (@nat.cast_coe ?m_1<br>\n             (@add_zero_class.to_has_zero ?m_1<br>\n                (@add_monoid.to_add_zero_class ?m_1 (@add_left_cancel_monoid.to_add_monoid ?m_1 ?m_2)))<br>\n             ?m_3<br>\n             (@add_zero_class.to_has_add ?m_1<br>\n                (@add_monoid.to_add_zero_class ?m_1 (@add_left_cancel_monoid.to_add_monoid ?m_1 ?m_2)))))<br>\n       n)<br>\n    0<br>\nbut is expected to have type<br>\n  @eq R<br>\n    (@coe nat R<br>\n       (@coe_to_lift nat R<br>\n          (@nat.cast_coe R<br>\n             (@add_zero_class.to_has_zero R<br>\n                (@add_monoid.to_add_zero_class R<br>\n                   (@add_comm_monoid.to_add_monoid R<br>\n                      (@non_unital_non_assoc_semiring.to_add_comm_monoid R<br>\n                         (@non_assoc_semiring.to_non_unital_non_assoc_semiring R<br>\n                            (@semiring.to_non_assoc_semiring R _inst_2))))))<br>\n             (@mul_one_class.to_has_one R<br>\n                (@mul_zero_one_class.to_mul_one_class R<br>\n                   (@non_assoc_semiring.to_mul_zero_one_class R (@semiring.to_non_assoc_semiring R _inst_2))))<br>\n             (@add_zero_class.to_has_add R<br>\n                (@add_monoid.to_add_zero_class R<br>\n                   (@add_comm_monoid.to_add_monoid R<br>\n                      (@non_unital_non_assoc_semiring.to_add_comm_monoid R<br>\n                         (@non_assoc_semiring.to_non_unital_non_assoc_semiring R<br>\n                            (@semiring.to_non_assoc_semiring R _inst_2))))))))<br>\n       n)<br>\n    0</p>\n</div></div>",
        "id": 277287612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648735996
    },
    {
        "content": "<p>Ok, so I will not include this in the PR.  <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 277287763,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648736054
    },
    {
        "content": "<p>Ah, I see the difference. For semirings the two may be really different</p>",
        "id": 277288398,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648736333
    },
    {
        "content": "<p>Yes, if the successor function looks like <code>0 -&gt; 1 -&gt; 1 -&gt; 1...</code>, then <code>nat.cast</code> is not injective, but no positive multiple of <code>1</code> is zero.</p>",
        "id": 277288730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648736474
    },
    {
        "content": "<p>(I guess this semiring used to be called, maybe still is called, <code>fin 1</code>).</p>",
        "id": 277288772,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648736496
    },
    {
        "content": "<p>Instead what you should add to the PR is a <strong>big warning</strong> that <code>char_p 0</code> is not the same as <code>char_zero</code></p>",
        "id": 277289254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648736675
    },
    {
        "content": "<p>Sure!  Maybe even the example above, showing that the two notions can be different.</p>",
        "id": 277289353,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648736708
    },
    {
        "content": "<p>Ok, I updated the two doc-strings for <code>char_zero</code> and <code>char_p</code>.  Feel free to suggest comments!</p>",
        "id": 277292074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648737819
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277293866,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1648738550
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277293959,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1648738578
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277293992,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1648738592
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277294258,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1648738705
    },
    {
        "content": "<p>I don't think we ever defined semirings with saturating addition.</p>",
        "id": 277294358,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1648738766
    },
    {
        "content": "<p>Ok, I was simply saying \"use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">{0,1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span></span> and define addition by requiring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 + 1 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\".  Everything else follows and for this add_monoid/semiring, the two notions of characteristic disagree.</p>\n<p>If you want to comment on the warning that I wrote in the PR, I'm happy to take suggestions!</p>",
        "id": 277294990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648739011
    },
    {
        "content": "<p>I went ahead and formalized the example above:  <a href=\"https://github.com/leanprover-community/mathlib/pull/13080\">#13080</a>.</p>",
        "id": 277302598,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648742158
    }
]