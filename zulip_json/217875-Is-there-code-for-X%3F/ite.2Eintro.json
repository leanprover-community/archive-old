[
    {
        "content": "<p>Do we not have any introduction rule for <code>ite</code> and <code>dite</code>?</p>",
        "id": 258839396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635018355
    },
    {
        "content": "<p>What exactly are you looking for?</p>",
        "id": 258841475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635021329
    },
    {
        "content": "<p>Usually <code>ite</code> and <code>dite</code> are just terms, not types, unless the cases are types themselves. Do you mean something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ite.if_true</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">q</span> <span class=\"k\">else</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable.rec_on_true</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ite.if_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">q</span> <span class=\"k\">else</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable.rec_on_false</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span>\n</code></pre></div>\n<p>These are like constructors if <code>ite</code> had been <code>Prop</code>-valued and an inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ite'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">if_true</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ite'</span>\n<span class=\"bp\">|</span> <span class=\"n\">if_false</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">ite'</span>\n</code></pre></div>",
        "id": 258841741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635021800
    },
    {
        "content": "<p>Exactly what I meant was <code>q → r → ite p q r</code>.</p>",
        "id": 258841949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635022088
    },
    {
        "content": "<p>Wouldn't <code>(p → q) → (¬p → r) → ite p q r</code> be more useful/general?</p>",
        "id": 258842488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635022858
    },
    {
        "content": "<p>Yup it would.</p>",
        "id": 258842822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635023348
    },
    {
        "content": "<p>The best would be to have both.</p>",
        "id": 258842828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635023363
    },
    {
        "content": "<p>I can't find it. Feel free to PR both functions (and a <code>dite</code> version of Johan's function).</p>",
        "id": 258845949,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635028185
    }
]