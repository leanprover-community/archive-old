[
    {
        "content": "<p>Dear All,</p>\n<p>After having amply demonstrated my inability to find results in mathlib, I am now struggling to find if there is already and instance/def of the algebra in the title: if R is a semiring, is there and algebra instance <code>algebra ℕ[X] R[X]</code>?</p>\n<p>Thanks!</p>",
        "id": 276825632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648440639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> How about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map_ring_hom\">docs#polynomial.map_ring_hom</a> for a start?  Perhaps we have a way of turning a (semi)ring homomorphism into a scalar action.</p>",
        "id": 276825785,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648440943
    },
    {
        "content": "<p>Ah yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_algebra\">docs#ring_hom.to_algebra</a></p>",
        "id": 276825830,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648440971
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_algebra\">docs#ring_hom.to_algebra</a> I think?</p>",
        "id": 276825831,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648440973
    },
    {
        "content": "<p>Great, thank you both!</p>",
        "id": 276825848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648441014
    },
    {
        "content": "<p>And the last piece is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_ring_hom\">docs#nat.cast_ring_hom</a></p>",
        "id": 276825851,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648441017
    },
    {
        "content": "<p>I think rings might have a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-algebra instance?</p>",
        "id": 276825862,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648441058
    },
    {
        "content": "<p>But to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map_ring_hom\">docs#polynomial.map_ring_hom</a> it needs to be in ring-hom form, not in algebra form.</p>",
        "id": 276825909,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648441084
    },
    {
        "content": "<p>The nat.cast_ring_hom I had via algebra ℕ R.  Does it make a difference?</p>",
        "id": 276825911,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648441085
    },
    {
        "content": "<p>Well, you would have had to use <code>algebra_map</code> anyway... it makes no difference :)</p>",
        "id": 276825919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648441102
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 276825922,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648441114
    },
    {
        "content": "<p>This reminds me of a different question.  For a different thread, though!</p>\n<p>Thank you so much!</p>",
        "id": 276825934,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648441147
    },
    {
        "content": "<p>Trying this out in my case, I specifically wanted to <em>not</em> assume that the target ring <code>R</code> was commutative.  <del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map_ring_hom\">docs#polynomial.map_ring_hom</a> </del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_algebra\">docs#ring_hom.to_algebra</a> has this assumption.  So, instead, I prove it myself -- note the awkwardness in the field <code>commutes</code> where all the action takes place.</p>\n<p>Is the instance below in mathlib?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">map_one</span> <span class=\"o\">(</span><span class=\"n\">map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">coe_map_ring_hom</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">polynomial.induction_on'</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">fq</span> <span class=\"n\">gq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">fq</span><span class=\"o\">,</span> <span class=\"n\">gq</span><span class=\"o\">])</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monomial_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_mul</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_pow</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_X</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">X_pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">eq_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">smul_def'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>For some further context: I am trying to prove facts about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer\">docs#pochhammer</a> by proving it with the commutative assumption on the semiring and then transporting them using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer_map\">docs#pochhammer_map</a>.</p>",
        "id": 276833209,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648450293
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_algebra'\">docs#ring_hom.to_algebra'</a> that gets me closer and isolates exactly the commutativity requirement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ring_hom.to_algebra'</span> <span class=\"o\">(</span><span class=\"n\">polynomial.map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">coe_map_ring_hom</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">polynomial.induction_on'</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">fq</span> <span class=\"n\">gq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">fq</span><span class=\"o\">,</span> <span class=\"n\">gq</span><span class=\"o\">])</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monomial_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_mul</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_pow</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_X</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">X_pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">eq_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_comm</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>From a maths point of view, this is the statement that <code>X</code> commutes with everything and <code>nat</code> also commutes with everything.</p>",
        "id": 276833935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648450959
    },
    {
        "content": "<p>Note that <code>ring_hom.to_algebra</code> rarely has the right definitional properties, as it defines <code>algabra.to_has_scalar</code> badly</p>",
        "id": 276839389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648454808
    },
    {
        "content": "<p>Does your proposed instance create a diamond when <code>R = ℕ[X]</code>?</p>",
        "id": 276839532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648454895
    },
    {
        "content": "<p>Eric, how can I test whether this instance creates a diamond?  Is it just by playing around or is there a more systematic way of checking?</p>",
        "id": 276845306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648458446
    },
    {
        "content": "<p>try check whether your instance is equal to <code>algebra.refl N[X]</code> by <code>refl</code>; if it is not, it will make a diamond</p>",
        "id": 276845606,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648458671
    },
    {
        "content": "<p>I am not understanding something.  I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I have this instance, with proof, in my file</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">new_instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">new_instance</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.refl</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- error says: unknown identifier 'algebra.refl'</span>\n</code></pre></div>",
        "id": 276847270,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648459648
    },
    {
        "content": "<p>It should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a></p>",
        "id": 276847336,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648459683
    },
    {
        "content": "<p>Thanks Anne!</p>\n<p>The answer appears to be that they are not defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">new_instance</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">new_instance</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 276847407,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648459738
    },
    {
        "content": "<p>Are they even mathematically eq?</p>",
        "id": 276847449,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648459770
    },
    {
        "content": "<p>If  <code>R = nat[X]</code> then <code>nat[X][X]</code> has two algebra structures depending on which <code>X</code> you look at.</p>",
        "id": 276847543,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648459813
    },
    {
        "content": "<p>Alex, I would imagine so [EDIT: I think that they <em>are</em> equivalent mathematically].  This means that if I unfold enough the previous non-<code>rfl</code> proof, I can actually prove it, right?</p>",
        "id": 276847567,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648459829
    },
    {
        "content": "<p>Alex, wrt to the second question, it can get confusing, but I imagine that there will be some book-keeping to see which X represents the new and which the old variable.</p>",
        "id": 276847640,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648459894
    },
    {
        "content": "<p>I think this is a similar discussion to the one we've had in the context of <code>monoid_algebra</code>elsewhere, although perhaps it's not the same</p>",
        "id": 276848404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648460313
    },
    {
        "content": "<p>Well, it's at least true mathematically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat.cast_ring_hom_nat</span> <span class=\"o\">:</span> <span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.ext</span> <span class=\"n\">nat.cast_id</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">new_instance</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span>  <span class=\"n\">polynomial.map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276848861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648460571
    },
    {
        "content": "<p><del>(You can also prove the first one by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.eq_nat_cast\">docs#ring_hom.eq_nat_cast</a>)</del> Wait, we only have that for <code>eq_int_cast</code> and <code>eq_rat_cast</code>?</p>",
        "id": 276849285,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648460866
    },
    {
        "content": "<p>I'm going to PR the set all of three simp lemmas for that first bit in a second</p>",
        "id": 276849466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648460973
    },
    {
        "content": "<p>I found out that, for my specific application to <code>pochhammer</code>, there is also a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer_map\">docs#pochhammer_map</a> lemma that does essentially what I want and I do not need the instance for this.</p>\n<p>Indeed, this lemma takes a ring_hom and produces the corresponding <a href=\"http://polynomial.map\">polynomial.map</a> <em>only</em> for pochhammer.</p>",
        "id": 276849472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648460978
    },
    {
        "content": "<p>Thanks Eric!</p>",
        "id": 276849495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648460994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/algebra.20.E2.84.95.5BX.5D.20R.5BX.5D/near/276849466\">said</a>:</p>\n<blockquote>\n<p>I'm going to PR the set all of three simp lemmas for that first bit in a second</p>\n</blockquote>\n<p>Could you also add a generic <code>ring_hom.eq_nat_cast (f : ℕ →+* R) : f = nat.cast_ring_hom</code>?</p>",
        "id": 276849611,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648461049
    },
    {
        "content": "<p>This presumably means that, once Eric's PR goes through, the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer_map\">docs#pochhammer_map</a> can be shortened, right?  Or possibly may not even be needed anymore?</p>",
        "id": 276849650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648461079
    },
    {
        "content": "<p>To match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.eq_int_cast'\">docs#ring_hom.eq_int_cast'</a>?</p>",
        "id": 276849694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648461112
    },
    {
        "content": "<p>And while we're at it, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subsingleton_ring_hom\">docs#nat.subsingleton_ring_hom</a> should really say <code>unique (ℕ →+* R)</code></p>",
        "id": 276849696,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648461113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/algebra.20.E2.84.95.5BX.5D.20R.5BX.5D/near/276849694\">said</a>:</p>\n<blockquote>\n<p>To match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.eq_int_cast'\">docs#ring_hom.eq_int_cast'</a>?</p>\n</blockquote>\n<p>Yes please! Or even both variants, since I'm so busy making up work to do :)</p>",
        "id": 276849781,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648461142
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_nat_cast\">docs#eq_nat_cast</a> for the other variant</p>",
        "id": 276849900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648461209
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13001\">#13001</a></p>",
        "id": 276850348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648461425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/algebra.20.E2.84.95.5BX.5D.20R.5BX.5D/near/276849650\">said</a>:</p>\n<blockquote>\n<p>This presumably means that, once Eric's PR goes through, the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer_map\">docs#pochhammer_map</a> can be shortened, right?  Or possibly may not even be needed anymore?</p>\n</blockquote>\n<p>I'm struggling to follow what you're suggesting here</p>",
        "id": 276851020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648461771
    },
    {
        "content": "<p>This looks like the more general case of the instance you were asking for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span>  <span class=\"c1\">-- this probably could be better</span>\n  <span class=\"n\">to_ring_hom</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_map_ring_hom</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">polynomial.induction_on'</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">fq</span> <span class=\"n\">gq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">fq</span><span class=\"o\">,</span> <span class=\"n\">gq</span><span class=\"o\">])</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monomial_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_mul</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_pow</span><span class=\"o\">,</span> <span class=\"n\">polynomial.map_X</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">X_pow_mul</span><span class=\"o\">,</span> <span class=\"n\">map_C</span><span class=\"o\">,</span> <span class=\"n\">C_mul'</span><span class=\"o\">,</span> <span class=\"n\">C_mul'</span><span class=\"o\">,</span> <span class=\"n\">algebra_map_smul</span><span class=\"o\">,</span> <span class=\"n\">algebra_map_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_smul_comm</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_def'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>but again, it creates at least a non-defeq diamond</p>",
        "id": 276851763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648462275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/algebra.20.E2.84.95.5BX.5D.20R.5BX.5D/near/276851020\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/algebra.20.E2.84.95.5BX.5D.20R.5BX.5D/near/276849650\">said</a>:</p>\n<blockquote>\n<p>This presumably means that, once Eric's PR goes through, the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer_map\">docs#pochhammer_map</a> can be shortened, right?  Or possibly may not even be needed anymore?</p>\n</blockquote>\n<p>I'm struggling to follow what you're suggesting here</p>\n</blockquote>\n<p>My comment was non-sense.  I think that I got carried away and hoped that <code>simp</code> would have done miracles.</p>",
        "id": 276851957,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648462438
    }
]