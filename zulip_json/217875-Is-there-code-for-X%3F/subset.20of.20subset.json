[
    {
        "content": "<p>I have two sets <code>u v</code>, with <code>u ⊆ v</code>.</p>\n<ul>\n<li>Is there a definition/notation for the set of <code>↥v</code> consisting of elements of <code>u</code>?  I came up with <code>(u ∘ coe : set v)</code> but this seems like a hack (it exploits the defequality of <code>set E</code> and <code>E → Prop</code>).</li>\n<li>If so, is there API for it, such as this lemma saying that when it's coerced from a set in <code>↥v</code> to a set in the original type, one gets back <code>u</code>?</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">huv</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223165163,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611005298
    },
    {
        "content": "<p>This is <code>coe \\inv ' U</code> where <code>(coe : V \\to E)</code></p>",
        "id": 223166010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006185
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n</code></pre></div>",
        "id": 223166146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006336
    },
    {
        "content": "<p>OK, yes, and <code>tidy</code> works for the version I stated too.</p>",
        "id": 223166308,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611006485
    },
    {
        "content": "<p>In general, I guess tidy can prove that <code>coe '' ((coe : v → E) ⁻¹' u) = u \\cap v</code> without the <code>huv</code> assumption.</p>",
        "id": 223166362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006549
    },
    {
        "content": "<p>But maybe that's also a lemma somewhere...</p>",
        "id": 223166374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006564
    },
    {
        "content": "<p>Actually, writing as <code>(coe ⁻¹' u : set v)</code> rather than my hack <code>(u ∘ coe : set v)</code> has the advantage that it makes <code>simp [huv]</code> work.</p>",
        "id": 223166407,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611006596
    },
    {
        "content": "<p>Oh nice.</p>",
        "id": 223166466,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006620
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">∩</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.image_preimage_coe</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 223166560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006733
    },
    {
        "content": "<p>That <code>image_preimage_coe</code> is a simp lemma :)</p>",
        "id": 223166566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006749
    },
    {
        "content": "<p>I think I wrote that lemma. It looks a lot like things I needed for topology.</p>",
        "id": 223166625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611006823
    },
    {
        "content": "<p>Yeah this sounds like what one would use to restrict a topology to a subset</p>",
        "id": 223166688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611006869
    }
]