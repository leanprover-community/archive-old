[
    {
        "content": "<p>If I have a group element with infinite order (<code>order_of a = 0</code>), where would I find lemmas about <code>subgroup.closure {a}</code>? In particular that it is isomorphic to Z?</p>",
        "id": 276028546,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647857402
    },
    {
        "content": "<p>The only relevant theorem I've found is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.mem_closure_singleton\">docs#subgroup.mem_closure_singleton</a></p>",
        "id": 276029735,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647858132
    },
    {
        "content": "<p>Looks like I need to do some yak-shaving :-D</p>",
        "id": 276030209,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647858447
    },
    {
        "content": "<p>The mathlib community truly in need of a :yak: emoji.</p>",
        "id": 276030282,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647858485
    },
    {
        "content": "<p>I had never heard of yak-shaving before, it is very relatable!</p>",
        "id": 276030901,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647858896
    },
    {
        "content": "<p>This wasn't my yak to shave, but I needed a little break from grading final exams:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zpow_inj_iff_of_order_of_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_inj_iff_of_order_of_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">inf_cyclic</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃*</span> <span class=\"n\">subgroup.closure</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n.to_add</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">subgroup.mem_closure_singleton</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">subgroup.mem_closure_singleton.mp</span> <span class=\"n\">x.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h'.some_spec</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">zpow_inj_iff_of_order_of_eq_zero</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h'.some_spec</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zpow_add</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 276031766,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647859366
    },
    {
        "content": "<p>For your first lemma surely there should already be something about <code>x^m = x^n &lt;-&gt; order_of x \\| m - n</code>?</p>",
        "id": 276032333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647859691
    },
    {
        "content": "<p><del>docs#pow_eq_pow_iff_modeq I think is the closest</del> nope</p>",
        "id": 276032790,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647859926
    },
    {
        "content": "<p><del>docs#zpow_eq_mod_order_of is pretty close, it's for <code>zpow</code>.</del></p>",
        "id": 276032993,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1647860040
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_inj_iff_of_order_of_eq_zero\">docs#pow_inj_iff_of_order_of_eq_zero</a> seems the closest, but needs generalising to <code>zpow</code></p>",
        "id": 276033212,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647860145
    },
    {
        "content": "<p>Why are there like a dozen lemmas about \"finite cancellative monoids\"? Isn't there a better-known name for these objects?</p>",
        "id": 276034866,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647861058
    },
    {
        "content": "<p>Anyways it looks to me like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_of_dvd_iff_zpow_eq_one\">docs#order_of_dvd_iff_zpow_eq_one</a> is on the right track</p>",
        "id": 276034881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647861073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/closure.20of.20element.20of.20infinite.20order/near/276034866\">said</a>:</p>\n<blockquote>\n<p>Why are there like a dozen lemmas about \"finite cancellative monoids\"? Isn't there a better-known name for these objects?</p>\n</blockquote>\n<p>funnily enough we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.group_with_zero_of_cancel\">docs#fintype.group_with_zero_of_cancel</a> but I don't think we have it for just normal groups</p>",
        "id": 276036626,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647862111
    },
    {
        "content": "<p>there's even a <code>todo</code> above <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_pow_eq_one\">docs#exists_pow_eq_one</a></p>",
        "id": 276036648,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647862129
    },
    {
        "content": "<p>Is it helpful to show that <code>closure {a} = subgroup.powers a</code> and state the lemma in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.powers\">docs#subgroup.powers</a>?</p>",
        "id": 276651024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648228490
    }
]