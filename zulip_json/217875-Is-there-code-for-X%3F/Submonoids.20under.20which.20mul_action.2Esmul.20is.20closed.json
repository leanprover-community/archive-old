[
    {
        "content": "<p>Does this exist? If not, what should it be called?</p>",
        "id": 216073738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604922610
    },
    {
        "content": "<p>I guess if a group G is acting on a module, then a submodule which is G-stable is called a G-submodule.</p>",
        "id": 216076397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604924369
    },
    {
        "content": "<p>Right, but in this case I don't have a module, only a <code>mul_action</code> - my <del>objects don't have</del> carrier set is not closed under addition</p>",
        "id": 216077518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604925071
    },
    {
        "content": "<p>My point is that, rather irritatingly, the name mathematicians give to this idea in a related situation involves using the actual name of the object which is acting :-/</p>",
        "id": 216086195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604930180
    },
    {
        "content": "<p>Right, but \"g-submodule\" translates quite nicely to <code>submodule G</code> - so I don't think that's a problem</p>",
        "id": 216086960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604930569
    },
    {
        "content": "<p>Doesn't <code>submodule G</code> mean a submodule of G?</p>",
        "id": 216088346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604931199
    },
    {
        "content": "<p>Right -- in the common situation that we have an R-module M with an action of a group G, then we would talk about submodules of M (any R-submodule)  and also G-submodules of M (R-submodules fixed by G). A G-action on an R-module M makes M naturally into a module for the group ring R[G] so one could also talk about R[G]-submodules.</p>",
        "id": 216088843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604931401
    },
    {
        "content": "<p>Ah, so you're talking about the case when we have both <code>mul_action G M</code> and <code>mul_action R M</code>?</p>",
        "id": 216089192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604931558
    },
    {
        "content": "<p>To make it simpler we could have just an abelian group A (this would correspond to a Z-module). Then there's no R, and if G acts on A then we call A a G-module and we would talk about subgroups of A if they're not necessarily G-stable, and G-submodules if they are.</p>",
        "id": 216089965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604931889
    },
    {
        "content": "<p>Right, so there are four cases over an <code>add_group A</code>:</p>\n<ul>\n<li>not stable under G, not stable under addition: <code>set A</code> (has no interesting properties)</li>\n<li>not stable under G, stable under addition: <code>add_subgroup A</code></li>\n<li>stable under G, stable under addition: <code>submodule G A</code></li>\n<li>stable under G, not stable under addition: ???</li>\n</ul>\n<p>It's this last case I'm asking about</p>",
        "id": 216091191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604932353
    },
    {
        "content": "<p>why is the first word of the topic \"submonoids\" then?</p>",
        "id": 216092222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604932798
    },
    {
        "content": "<p>shouldn't it be \"subsets\"?</p>",
        "id": 216092279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604932805
    },
    {
        "content": "<p>Because they're submonoids but not add_submonoids</p>",
        "id": 216092327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604932821
    },
    {
        "content": "<p>oh dear</p>",
        "id": 216092345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604932830
    },
    {
        "content": "<p>It would be nice to have a good api around G-sets (sets with a G-action). I don't have a good name for what you want, except <code>subset G M</code> as Reid suggests</p>",
        "id": 216092354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604932835
    },
    {
        "content": "<p>I suspect the only thing <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> will dislike more than <code>set G</code> meaning \"subset of G\" is <code>subset G</code> meaning something different...</p>",
        "id": 216092424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604932874
    },
    {
        "content": "<p>I guess the question is what should we call <code>G-sets</code>?</p>",
        "id": 216092621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604932953
    },
    {
        "content": "<p>If we call it <code>G-foo</code> then the correct answer is <code>subfoo G M</code>.</p>",
        "id": 216092657,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604932971
    },
    {
        "content": "<p>As a concrete example of the type of thing I want to describe - I have a type <code>A</code> satisfying <code>algebra ℤ A</code> which is the multivariate polynomials over the variables <code>x y z</code> with integer coefficients, and the obvious group action of integer multiplication. I want both of these things</p>\n<ul>\n<li>An object that describes the set of all monomials, which is closed under multiplication and the group action<ul>\n<li><code>sub_mul_action_monoid ℤ A</code>?</li>\n</ul>\n</li>\n<li>An object that describes the set of all monomials of order n, which is closed under only the group action<ul>\n<li><code>subset ℤ A</code>?</li>\n<li><code>sub_mul_action ℤ A</code>?</li>\n</ul>\n</li>\n</ul>",
        "id": 216092763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933019
    },
    {
        "content": "<p>Or is the correct answer <code>submul_action G M</code>? <code>mul_subaction G M</code> (for consistency with <code>add_submonoid</code> not <code>subadd_monoid</code>)?</p>",
        "id": 216092904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933064
    },
    {
        "content": "<p>I don't understand any of your objects</p>",
        "id": 216093015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933115
    },
    {
        "content": "<p>can you use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.89883em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.904999em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.46782999999999997em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span>?</p>",
        "id": 216093027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933119
    },
    {
        "content": "<p>what's the group action?</p>",
        "id": 216093337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933226
    },
    {
        "content": "<p>The one that we already have on the polynomials, multiplication by an integer</p>",
        "id": 216093371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933241
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">Z</mi><mo separator=\"true\">,</mo><mo>×</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathbf{Z},\\times)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">×</span><span class=\"mclose\">)</span></span></span></span> is not a group</p>",
        "id": 216093377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933244
    },
    {
        "content": "<p>(it's a monoid with 0)</p>",
        "id": 216093401,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933253
    },
    {
        "content": "<p>Sorry, perhaps this isn't clear - I asked about a mul_action, not a group action</p>",
        "id": 216093424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933267
    },
    {
        "content": "<p>I think the word \"group action\" was put into my mouth by accident, and I cluelessly kept using it</p>",
        "id": 216093507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933286
    },
    {
        "content": "<p>Oh ok, so you just want the multiplicative action of the integers on the monomials in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Z</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}[X,Y,Z]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 216093544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933303
    },
    {
        "content": "<p>Yes</p>",
        "id": 216093565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933313
    },
    {
        "content": "<p>it's just an additive subgroup in this case</p>",
        "id": 216093682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933356
    },
    {
        "content": "<p>And I guess by monomial you mean something of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>⋅</mo><msup><mi>X</mi><mi>a</mi></msup><mo>⋅</mo><msup><mi>Y</mi><mi>b</mi></msup><mo>⋅</mo><msup><mi>Z</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">n \\cdot X^{a} \\cdot Y^{b} \\cdot Z^{c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">n \\in \\mathbf{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo>∈</mo><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">a,b,c \\in \\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span>.</p>",
        "id": 216093698,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933359
    },
    {
        "content": "<p>oh</p>",
        "id": 216093724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933369
    },
    {
        "content": "<p>What's the degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>?</p>",
        "id": 216093928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933441
    },
    {
        "content": "<p>is it <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span>?</p>",
        "id": 216093939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933448
    },
    {
        "content": "<p><del>No, it's 0</del> - I don't really care what it is - I'm happy to put <code>0</code> in any / all  of my \"order n\" subsets</p>",
        "id": 216093951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933452
    },
    {
        "content": "<p>(Strictly I want the larger set that is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mrow><mi>i</mi><mi>x</mi></mrow></msub><mi>X</mi><mo>+</mo><msub><mi>α</mi><mrow><mi>i</mi><mi>y</mi></mrow></msub><mi>Y</mi><mo>+</mo><msub><mi>α</mi><mrow><mi>i</mi><mi>z</mi></mrow></msub><mi>Z</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>α</mi><mrow><mi>i</mi><mo stretchy=\"false\">(</mo><mo>⋅</mo><mo stretchy=\"false\">)</mo></mrow></msub><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\prod_i(\\alpha_{ix} X + \\alpha_{iy} Y + \\alpha_{iz} Z), \\alpha_{i(\\cdot)} \\in \\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">⋅</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>, but your example is simpler and easier to describe)</p>",
        "id": 216094038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933490
    },
    {
        "content": "<p>How about just a <code>submonoid</code>?</p>",
        "id": 216094083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933515
    },
    {
        "content": "<p>that maybe contains the integers or the nonzero integers or something</p>",
        "id": 216094142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933527
    },
    {
        "content": "<p>Sure, a submonoid is a start - but then I have to carry around a separate proof that the submonoid is closed under smul. I'm asking for a bundling of the submonoid with that proof.</p>",
        "id": 216094221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933561
    },
    {
        "content": "<p>but <code>smul</code> is just <code>mul</code> by constants</p>",
        "id": 216094282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933583
    },
    {
        "content": "<p>As I think you can tell we don't have a word for this</p>",
        "id": 216094303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933591
    },
    {
        "content": "<p>I think the reason we're all confused here is that it's not common to think of a multiplicative monoid \"acting\" multiplicatively on another multiplicative monoid</p>",
        "id": 216094525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933680
    },
    {
        "content": "<p>because a monoid acting on another monoid should satisfy a law <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mo>+</mo><mi>m</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">m(a+b) = ma + mb</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span></span></span></span></p>",
        "id": 216094570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933704
    },
    {
        "content": "<p>but you instead have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mo stretchy=\"false\">)</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">m(ab) = (ma)b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">b</span></span></span></span></p>",
        "id": 216094586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933710
    },
    {
        "content": "<p>And a monoid has <code>1</code>, so you have a map from the acting monoid to the acted-upon monoid by sending <code>m</code>to <code>m \\smul 1</code>.</p>",
        "id": 216094720,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933769
    },
    {
        "content": "<p>right, so a submonoid which is stable under multiplication of the acting monoid is the same as one which contains the image of this map</p>",
        "id": 216094817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933819
    },
    {
        "content": "<p>It's even awkward to discuss these things <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 216094821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604933821
    },
    {
        "content": "<blockquote>\n<p>because a monoid acting on another monoid should satisfy a law ...</p>\n</blockquote>\n<p>Right, thats <code>distrib_mul_action</code>, which is one level more specific than my question about <code>mul_action</code>.</p>",
        "id": 216094851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933837
    },
    {
        "content": "<p>I'm just saying this is what the math word \"action\" means</p>",
        "id": 216094913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604933862
    },
    {
        "content": "<p>I think I should point out that my only exposure to most of these \"math words\" has been through lean</p>",
        "id": 216094986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933886
    },
    {
        "content": "<p>I will resist the temptation in future to use words that aren't <code>backticked</code> when I'm not certain they match the real meaning :)</p>",
        "id": 216095033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604933908
    },
    {
        "content": "<p>so the situation here is that you have a monoid acting on a set (<code>mul_action</code>), and the set is also a monoid, but the first monoid doesn't act on the second monoid</p>",
        "id": 216095293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604934009
    },
    {
        "content": "<p>(curiously, I have the same setup in my branch on Ore localization)</p>",
        "id": 216095783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604934211
    },
    {
        "content": "<p>I'm confused...</p>",
        "id": 216095793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604934215
    },
    {
        "content": "<p>The action of the integers on monomials is \"compatible\" with multiplication.</p>",
        "id": 216095830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604934239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Submonoids.20under.20which.20mul_action.2Esmul.20is.20closed/near/216095033\">said</a>:</p>\n<blockquote>\n<p>I will resist the temptation in future to use words that aren't <code>backticked</code> when I'm not certain they match the real meaning :)</p>\n</blockquote>\n<p>I wasn't trying to fault your usage and I think mathematicians will assume that words mean what they are used to regardless of your backtick-related efforts <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span><br>\nI was just trying to explain how the confusion arose, and why Kevin started talking about group rings and stuff.</p>",
        "id": 216095987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604934303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Submonoids.20under.20which.20mul_action.2Esmul.20is.20closed/near/216095830\">said</a>:</p>\n<blockquote>\n<p>The action of the integers on monomials is \"compatible\" with multiplication.</p>\n</blockquote>\n<p>Compatible in some sense, but not the usual one (well not the one for an action anyways). Namely, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mo>⋅</mo></mrow><annotation encoding=\"application/x-tex\">n \\times \\cdot</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">⋅</span></span></span></span> isn't a monoid homomorphism</p>",
        "id": 216096075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604934351
    },
    {
        "content": "<p>In this particular case I think I made the confusion worse by assuming that the math words and lean words were the same. No offence taken.</p>",
        "id": 216096218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604934382
    },
    {
        "content": "<p>Stating the problem purely in lean, we current have definitions that give the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_monoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">semiring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_comm_monoid</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_comm_monoid</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But not any objects <code>subTODO</code> that allow us to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subTODO</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subTODO</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_monoid</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">S</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>or the confusing case that I was asking about here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subTODO</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">monoid</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 216097382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604934895
    },
    {
        "content": "<p>The awkward thing is that the word \"action\" doesn't refer to the thing being acted on but the action itself</p>",
        "id": 216105228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604938023
    },
    {
        "content": "<p>but, I guess we could use <code>sub_mul_action</code> anyways</p>",
        "id": 216105262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604938039
    },
    {
        "content": "<p>That seems like the simplest naming rule</p>",
        "id": 216106214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604938331
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/leanprover-community/mathlib/issues/4996\">#4996</a></p>",
        "id": 216624515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605280451
    },
    {
        "content": "<p>There's some bikeshedding going on about naming in the PR, which might be worth deciding on here.</p>",
        "id": 217296964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605804358
    },
    {
        "content": "<p>I just learned a <a href=\"https://whatis.techtarget.com/definition/Parkinsons-law-of-triviality-bikeshedding\">new word</a>.</p>",
        "id": 217360591,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1605846118
    }
]