[
    {
        "content": "<p>Do we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_div_mul_div_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>?<br>\nWe have <code>div_mul_div_comm₀</code> but this is for <code>comm_group_with_zero</code>.</p>",
        "id": 284854699,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654248357
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.div_mul_div_comm\">docs#nat.div_mul_div_comm</a> not work, as in <code>(nat.div_mul_div_comm ha hc).symm</code>?</p>",
        "id": 284855440,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654248838
    },
    {
        "content": "<p>Ha! it seems I almost guessed the name, but not quite!</p>",
        "id": 284855570,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654248919
    },
    {
        "content": "<p>That does work. Its funny that library_search couldnt find it.</p>",
        "id": 284855604,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654248944
    },
    {
        "content": "<p>Namespacing can be confusing, especially when it produces something that does not work with dot-notation...</p>",
        "id": 284855612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654248952
    },
    {
        "content": "<p>Btw, I found it by writing <code>div_mul_div_comm₀</code> in the online search tool.  It produced no result, so I removed the trailing <code>₀</code> and it immediately showed <code>div_mul_div_comm, nat.div_mul_div_comm</code> as hits.</p>",
        "id": 284855764,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654249054
    },
    {
        "content": "<p>I suspect that <code>div_mul_div_comm₀</code> was erased by one of Yaël's refactors.</p>",
        "id": 284855891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654249148
    },
    {
        "content": "<p>Yep, Damiano is exactly right. <a href=\"https://github.com/leanprover-community/mathlib/pull/14000\">#14000</a></p>",
        "id": 284864501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654255478
    },
    {
        "content": "<p>For completeness, we should have <code>nat.mul_div_mul_comm</code>.</p>",
        "id": 284864573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654255523
    }
]