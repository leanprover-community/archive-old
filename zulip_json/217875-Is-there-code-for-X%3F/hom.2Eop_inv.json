[
    {
        "content": "<p>Dear All,</p>\n<p>is a definition similar to the one below available already?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.opposite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mul_opposite</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">hom.op_inv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 276998010,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648557303
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span></p>",
        "id": 276998447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648557550
    },
    {
        "content": "<p>You probably want to name it <code>monoid_hom.op_inv</code> and have all other options, like <code>mul_hom.op_inv</code>, <code>monoid_with_zero_hom.op_inv</code>, the additive versions...</p>",
        "id": 276998690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648557667
    },
    {
        "content": "<p>Ok, thanks!  At least, it was not simply a matter of adding <code>docs#</code> in front of my name and finding it!</p>",
        "id": 276998913,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648557797
    },
    {
        "content": "<p>I think that I would even prefer to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul_opposite.op_inv_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃*</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 276998946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648557816
    },
    {
        "content": "<p>I've added some new instances to <code>op</code> in my PR <a href=\"https://github.com/leanprover-community/mathlib/pull/12931\">#12931</a> but your definition was out of scope, so I didn't touch it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 276999314,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1648557981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/hom.2Eop_inv/near/276998946\">said</a>:</p>\n<blockquote>\n<p>I think that I would even prefer to have</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.op_inv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃*</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How about <code>mul_opposite.op_inv_equiv</code> for the name?</p>",
        "id": 276999415,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1648558044
    },
    {
        "content": "<p>Mantas, thanks for the input!  I updated the name!</p>",
        "id": 276999690,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648558183
    },
    {
        "content": "<p>While we are at it, where should this definition go?</p>",
        "id": 277001713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648559257
    },
    {
        "content": "<p>(Note: I would like to keep the PR small, simply containing this definition and maybe a couple of <code>simp/rfl</code> lemmas that go with it!  I would rather not also do climb the <code>has_mul/mul_one_class/.../field</code> class-ladder!)</p>",
        "id": 277001928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648559366
    },
    {
        "content": "<p>I would do <code>αᵐᵒᵖ ≃* α</code> to have the more complicated stuff on the LHS.</p>",
        "id": 277006701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648561586
    },
    {
        "content": "<p>Found it!  I think that it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.inv'\">docs#mul_equiv.inv'</a>.  The direction is the opposite to the one that Yaël suggests.</p>",
        "id": 277008423,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648562341
    },
    {
        "content": "<p>Can you unify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.inv\">docs#mul_equiv.inv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.inv'\">docs#mul_equiv.inv'</a> by working over a <code>div_inv_monoid</code>?</p>",
        "id": 277009086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648562617
    },
    {
        "content": "<p>Probably not, because a div_inv_monoid tells you nothing about how inv behaves</p>",
        "id": 277024418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648568624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/hom.2Eop_inv/near/277009086\">said</a>:</p>\n<blockquote>\n<p>Can you unify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.inv\">docs#mul_equiv.inv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.inv'\">docs#mul_equiv.inv'</a> by working over a <code>div_inv_monoid</code>?</p>\n</blockquote>\n<p>I think you're muddling things, one of these is for <code>group</code> and the other for <code>comm_group</code>. Did you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.inv%E2%82%80\">docs#mul_equiv.inv₀</a>?</p>",
        "id": 277024612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648568683
    },
    {
        "content": "<p>We seem not to have mul_equiv.inv₀' for <code>group_with_zero</code></p>",
        "id": 277024745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648568733
    },
    {
        "content": "<p>Ah it's still the same problem that we have no typeclass stronger than <code>has_involutive_inv</code> and <code>monoid</code> and weaker than <code>group</code> and <code>group_with_zero</code>.</p>",
        "id": 277024943,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648568798
    },
    {
        "content": "<p>What would be this intermediate typeclass?  Something where the inverse of a product is the (reversed) product of the inverses?</p>",
        "id": 277054091,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648582104
    },
    {
        "content": "<p>Is that enough for <code>inv</code> to be involutive? In any case, it should be stronger than <code>div_inv_monoid</code>.</p>",
        "id": 277056134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648583273
    },
    {
        "content": "<p>For the record, such a typeclass would allow us to deduplicate <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.div_inv_monoid\">docs#set.div_inv_monoid</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.div_inv_monoid'\">docs#set.div_inv_monoid'</a></p>",
        "id": 277056212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648583305
    }
]