[
    {
        "content": "<p>I think we are missing the following result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interval_integrable.smul_continuous_on</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">interval_integrable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and I believe it should be easy to obtain from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">measure_theory.ae_strongly_measurable.smul_continuous_on</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ae_strongly_measurable</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">μ.restrict</span> <span class=\"bp\">$</span> <span class=\"n\">interval_oc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">ae_strongly_measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">μ.restrict</span> <span class=\"bp\">$</span> <span class=\"n\">interval_oc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(though perhaps there are other/better proofs). I haven't looked much into these corners of Mathlib yet. Are either of these results easy for the experts?</p>",
        "id": 281332802,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651772060
    },
    {
        "content": "<p>The second goal is easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">measure_theory.ae_strongly_measurable.smul_continuous_on</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ae_strongly_measurable</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">μ.restrict</span> <span class=\"o\">(</span><span class=\"n\">interval_oc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">ae_strongly_measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ.restrict</span> <span class=\"o\">(</span><span class=\"n\">interval_oc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">hf.smul</span> <span class=\"o\">((</span><span class=\"n\">hg.mono</span> <span class=\"n\">interval_oc_subset_interval</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ae_strongly_measurable</span> <span class=\"n\">measurable_set_interval_oc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The first one looks familiar to me - I think I've done something similar before - but I can't figure it out right now</p>",
        "id": 281433478,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651841549
    },
    {
        "content": "<p>Wow, thanks! I have a proof somewhere that reduces the first proof to the one you've just proved so I have everything I need now. I'll try to come back to this later today and put your work to good use.</p>",
        "id": 281433847,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651841732
    },
    {
        "content": "<p>Ah I remember now - the bit that's left is to use <code>hg</code> to show <code>g</code> is bounded, and from there deduce that <code>f * g</code> has finite integral. Out of interest do you know if your way for the remainder is the same?</p>",
        "id": 281434254,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651841893
    },
    {
        "content": "<p>I believe it's slightly different. You can see it here: <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/abc10fae23eac32b5e1e4bb5a21c3508bd5c81a3#diff-ad9f3bdd847db104518f135aab4380a57eec97691051439cef91a5e96dc02f11L28\">https://github.com/leanprover-community/sphere-eversion/commit/abc10fae23eac32b5e1e4bb5a21c3508bd5c81a3#diff-ad9f3bdd847db104518f135aab4380a57eec97691051439cef91a5e96dc02f11L28</a></p>",
        "id": 281434428,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651841962
    },
    {
        "content": "<p>In other words, it uses <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/c55336903ba5ca5b5e9a678d95250ea0edf37e98/src/to_mathlib/measure_theory/interval_integral.lean#L43\">https://github.com/leanprover-community/sphere-eversion/blob/c55336903ba5ca5b5e9a678d95250ea0edf37e98/src/to_mathlib/measure_theory/interval_integral.lean#L43</a> to reduce to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integrable.mul_continuous_on\">docs#interval_integrable.mul_continuous_on</a></p>",
        "id": 281434696,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651842039
    },
    {
        "content": "<p>Ah right! I think that points out a hole - there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integrable.mul_continuous_on\">docs#interval_integrable.mul_continuous_on</a> but no version for <code>integrable_on</code></p>",
        "id": 281434808,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651842086
    },
    {
        "content": "<p>Yes, I noted that also.</p>",
        "id": 281434826,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651842098
    },
    {
        "content": "<p>Oh, I'm wrong again <a href=\"https://leanprover-community.github.io/mathlib_docs/find/integrable_on.mul_continuous_on_of_subset\">docs#integrable_on.mul_continuous_on_of_subset</a></p>",
        "id": 281434973,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651842143
    },
    {
        "content": "<p>We have migrated a bit of stuff out of the SE repo to Mathlib recently and I'm hoping to do a bit more next week. Filling various such holes should happen as part of such an effort.</p>",
        "id": 281434982,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651842147
    },
    {
        "content": "<p>To be clear I don't think I'm an expert in this part of mathlib, I've just been using it a lot recently for the unit fractions project!</p>",
        "id": 281435347,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1651842314
    },
    {
        "content": "<p>From where I'm sitting, you're an expert!</p>",
        "id": 281435809,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651842515
    },
    {
        "content": "<p>It's pleasing to learn that two efforts as distant as the Unit Fractions and Sphere Eversion  projects are helping each other in this way. It's only a small example but it's still a good example of the synergy of our Monolithic Mathlib philosophy.</p>",
        "id": 281436227,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651842725
    },
    {
        "content": "<p>I'm using very similar lemmas for the convolution PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/13540\">#13540</a>), but I'm doing everything with continuous bilinear maps instead of <code>mul</code>/<code>smul</code>. Which makes me realize I should probably extract those lemmas and put them in different files.</p>",
        "id": 281438424,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651843758
    }
]