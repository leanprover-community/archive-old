[
    {
        "content": "<p>Is there a way to run a tactic against multiple specific goals? To elaborate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- first case: one inr and one inl</span>\n  <span class=\"c1\">-- second case: both inr or both inl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'd like to split the goals into two pairs, as within a pair the approach to solving is almost identical.</p>",
        "id": 220308021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608241818
    },
    {
        "content": "<p>The two tactics I know of are <code>all_goals</code> and <code>any_goals</code>. There is also one which I can't remember to focus on a specific goal</p>",
        "id": 220308121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608241871
    },
    {
        "content": "<p><code>work_on_goal</code> is that one</p>",
        "id": 220308136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608241880
    },
    {
        "content": "<p>Currently my workaround is to use <code>by_cases h : (∃ il, sum.inl il = i) ↔ (∃ jl, sum.inl jl = j)</code> to generate the split, and then a bunch of messy applications of <code>iff_iff_and_or_not_and_not</code> and <code>not_exists</code> to split up <code>h</code> - but this seems silly given I can directly case-match.</p>",
        "id": 220308288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608241957
    },
    {
        "content": "<p>My thinking is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220308798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608242256
    },
    {
        "content": "<p><code>any_goals</code> feels a bit sloppy if I know exactly which two are going to work</p>",
        "id": 220309255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608242468
    },
    {
        "content": "<p>This <del>naive attempt doesn't work and I don't know why:</del> seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">expr</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">conv.interactive.for</span>\n<span class=\"k\">#check</span> <span class=\"n\">list.enum</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">work_on_goals</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">list_of</span> <span class=\"n\">small_nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">itactic</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">ns</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">current_goals</span><span class=\"o\">,</span> <span class=\"n\">later_goals</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">goals.enum.partition</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">prod.fst</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">ns</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">current_goals'</span> <span class=\"o\">:=</span> <span class=\"n\">current_goals.map</span> <span class=\"n\">prod.snd</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">later_goals'</span> <span class=\"o\">:=</span> <span class=\"n\">later_goals.map</span> <span class=\"n\">prod.snd</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">current_goals'</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">later_goals'</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"n\">current_goals'</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">new_goals</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">new_goals</span> <span class=\"bp\">++</span> <span class=\"n\">later_goals'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 220310832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608243312
    }
]