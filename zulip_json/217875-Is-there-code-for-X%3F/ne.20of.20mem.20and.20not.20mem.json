[
    {
        "content": "<p>Is there a lemma that proves?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x'</span>\n</code></pre></div>\n<p>The <code>finish</code> tactic works, but I don't know how it does it.</p>",
        "id": 228462685,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614710481
    },
    {
        "content": "<p>You can just intro and use the stupid triangle</p>",
        "id": 228462824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What's the stupid triangle?</p>",
        "id": 228462926,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614710574
    },
    {
        "content": "<p><code>lam h1, h' $ h1.symm \\t h</code></p>",
        "id": 228463025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710615
    },
    {
        "content": "<p>On mobile, no idea if it will work</p>",
        "id": 228463076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710636
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228463288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710712
    },
    {
        "content": "<p>Might also work</p>",
        "id": 228463317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710720
    },
    {
        "content": "<p>Or intro h1, rw h1 at h, exact h' h</p>",
        "id": 228463437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710761
    },
    {
        "content": "<p>The point is that notin is defined to mean in -&gt; false</p>",
        "id": 228463559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710793
    },
    {
        "content": "<p>And not= is = -&gt; false</p>",
        "id": 228463628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/ne.20of.20mem.20and.20not.20mem/near/228463288\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This worked! Thanks :)</p>",
        "id": 228469711,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614713115
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_mem_of_not_mem\">docs#ne_of_mem_of_not_mem</a></p>",
        "id": 228530619,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614743271
    }
]