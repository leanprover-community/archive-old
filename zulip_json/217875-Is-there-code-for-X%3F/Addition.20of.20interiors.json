[
    {
        "content": "<p>I feel like this is basically the definition of <code>has_continuous_add</code>, but I can't pin down what to do exactly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.module</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_add_interior_subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_continuous_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">interior</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 263515086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638487751
    },
    {
        "content": "<p>And in the same vein I also need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_map_neg</span> <span class=\"o\">:</span> <span class=\"n\">is_open_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_map_add</span> <span class=\"o\">:</span> <span class=\"n\">is_open_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_map_sub</span> <span class=\"o\">:</span> <span class=\"n\">is_open_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263515454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638487999
    },
    {
        "content": "<p>For the latter ones, check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph.neg\">docs#homeomorph.neg</a>, thus you can do <code>homeomorph.neg.is_open_map</code>.  We have <code>homeomorph.add</code> too, but it would only give openness of addition-with-left-variable-fixed.</p>",
        "id": 263516411,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638488565
    },
    {
        "content": "<p>The first one reduces to one of your second lemmas, the openness of the full addition map.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.module</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_map_add</span> <span class=\"o\">:</span> <span class=\"n\">is_open_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_add_interior_subset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">interior</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subset_interior_iff_subset_of_open</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.add_mem_add</span> <span class=\"o\">(</span><span class=\"n\">interior_subset</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">interior_subset</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set.add_image_prod</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_open_map_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_open_prod_iff'</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">is_open_interior</span><span class=\"o\">,</span> <span class=\"n\">is_open_interior</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263517504,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638489513
    },
    {
        "content": "<p>I'mstealingthatproofthankyouverymuch</p>",
        "id": 263517971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638489840
    },
    {
        "content": "<p>Actually, slicker proof that doesn't use the mystery lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.module</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_add_interior_subset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">interior</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">interior</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subset_interior_iff_subset_of_open</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.add_mem_add</span> <span class=\"o\">(</span><span class=\"n\">interior_subset</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">interior_subset</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set.Union_add_left_image</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_open_bUnion</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">homeomorph.add_left</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_open_interior</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263518594,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638490317
    },
    {
        "content": "<p>That one will actually show that <code>s + interior t ⊆ interior (s + t)</code> or vice versa.</p>",
        "id": 263518871,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638490487
    },
    {
        "content": "<p>Is there some more general result about open maps <code>α × α → α</code>?</p>",
        "id": 263519239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638490801
    },
    {
        "content": "<p>I'm not at my computer so I can't golf, but I think there should be a one or two line proof using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open.add_left\">docs#is_open.add_left</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interior_maximal\">docs#interior_maximal</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.add_subset_add\">docs#set.add_subset_add</a></p>",
        "id": 263542378,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1638514941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Hey I'm sorry to bother you, but I'm still very new to Lean and I would like to understand what the \"rintros\" command does. I have seen it in many simple examples but I can't find a good explanation of what its purpose is.</p>",
        "id": 263766743,
        "sender_full_name": "Pascal Schoppenhauer",
        "timestamp": 1638708346
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a> might be helpful (<code>rintros</code> is the same as <code>rintro</code>)</p>",
        "id": 263766822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638708426
    }
]