[
    {
        "content": "<p>Do we have these somewhere? Can they be stated more generally?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">disjoint.comap_order_iso</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">disjoint</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">f.map_inf</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">f.map_bot</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f.monotone</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complete_lattice.independent.comap_order_iso</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice.independent</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice.independent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">ha</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap_order_iso</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_right</span> <span class=\"o\">(</span><span class=\"n\">f.monotone.le_map_supr2</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 259992332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635858435
    },
    {
        "content": "<p>I think the first one is not true if f is assumed only to be an order-preserving injection, and is also not true if f is only assumed to be an order-preserving surjection. By \"order-preserving\" I mean <code>a &lt;=b -&gt; f a &lt;= f b</code>, not <code>&lt;-&gt;</code>. With <code>&lt;-&gt;</code> a surjection is enough I guess.</p>",
        "id": 259993370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635858964
    },
    {
        "content": "<p>Is there a way of stating this about galois connections / insertions?</p>",
        "id": 259993438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635859013
    },
    {
        "content": "<p>for the first one you don't need beta to be a complete lattice, just anything where the statement makes sense I guess. For me a Galois connection has a map in the other direction too -- you'd be happy to have such a thing? I don't immediately know the answer. Dumb category theory question: do adjoint functors take initial objects to initial objects?</p>",
        "id": 259993741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859177
    },
    {
        "content": "<p>Whoops, that was a typo in the first one, fixed</p>",
        "id": 259993832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635859212
    },
    {
        "content": "<p>Here's a counterexample to something: I think the inclusion of <code>subgroup G</code> into <code>set G</code> is part of a Galois insertion, however it's not true that if H and K are two subgroups of G such that the subgroup they generate is all of G, then their union is all of G, and it's never true that if their intersection is trivial i.e. {1} then their intersection is empty, so that puts paid to some conjectural generalisations (it's also an example of an adjoint functor not sending bot to bot)</p>",
        "id": 259994020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859332
    },
    {
        "content": "<p>It's also not true that if two subsets of G have empty intersection then the subgroups generated by these subsets have trivial intersection (e.g. {2} and {3} in the integers)</p>",
        "id": 259994142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859417
    },
    {
        "content": "<p>The one thing that is true is that if two subsets of G have union equal to all of G then the subgroups they generate have join equal to all of G</p>",
        "id": 259994340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859516
    },
    {
        "content": "<p>If L -&gt; M is part of a Galois insertion then is L^{op} -&gt; M^{op} also part of a Galois insertion?</p>",
        "id": 259994505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859591
    },
    {
        "content": "<p>that doesn't look right to me -- it seems to be saying \"if I'm a left adjoint, am I a right adjoint?\" which I think is nonsense. So it might be the case that the union fact somehow generalises -- I don't think it's ruled out by the other counterexamples</p>",
        "id": 259994644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859671
    },
    {
        "content": "<p>For me a Galois insertion is a pair of adjoint functors F and G plus some fact that F(G(x))=x. If we op this then we seem to get a different definition -- does that sound right? The concept \"F is left adjoint to G and F(G(x))=x\" is different to the concept \"F is right adjoint to G and F(G(x))=x\". Is one of these concepts more useful than the other?</p>",
        "id": 259994841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859781
    },
    {
        "content": "<p>aah got it, that's the coinsertion.</p>",
        "id": 259994993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859860
    },
    {
        "content": "<p>shouldn't you be flipping the order of <code>F</code> and <code>G</code> in the composition if you are opping things?</p>",
        "id": 259995025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635859869
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 259995050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859883
    },
    {
        "content": "<p>If F : L -&gt; M preserves &lt;= then it preserves &gt;= so you get a map L^{op} -&gt; M^{op}</p>",
        "id": 259995155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635859922
    },
    {
        "content": "<p>I think I just invented Galois coinsertions. So it might be true that there's a theorem for Galois coinertions that if a meet b is bot then f a meet f b is bot, where f is one of the two coinsertion maps. My only justification for this is \"it's true for the group example above\"</p>",
        "id": 259995400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635860047
    },
    {
        "content": "<p>(the example being the coinsertions \"subgroup generated by\" and \"carrier\" in <code>(set G)^{op}</code> and <code>(subgroup G)^{op}</code>)</p>",
        "id": 259995572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635860148
    },
    {
        "content": "<p>I went ahead and PR'd the lemmas at the top of this thread in <a href=\"https://github.com/leanprover-community/mathlib/issues/10108\">#10108</a></p>",
        "id": 259997760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635861211
    },
    {
        "content": "<p>I couldn't think of a sensible generalization.</p>",
        "id": 259997994,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635861316
    },
    {
        "content": "<p>I suppose the 'disjoint' version generalizes to functions which preserve bot and binary inf, and the 'independent' one to functions which preserve arbitrary sup and binary inf (basically 'frame homomorphisms')</p>",
        "id": 260000884,
        "sender_full_name": "David Wärn",
        "timestamp": 1635862524
    },
    {
        "content": "<p>There's no reason to expect a right adjoint to preserve initial objects (e.g. the forgetful functor from groups to sets). In the same way there's no reason to expect the right part of a Galois connection to preserve bot -- e.g. the inclusion of pnat in nat.</p>",
        "id": 260001044,
        "sender_full_name": "David Wärn",
        "timestamp": 1635862598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/order.20isomorphisms.20preserve.20disjointness/near/260000884\">said</a>:</p>\n<blockquote>\n<p>I suppose the 'disjoint' version generalizes to functions which preserve bot and binary inf, and the 'independent' one to functions which preserve arbitrary sup and binary inf (basically 'frame homomorphisms')</p>\n</blockquote>\n<p>But we don't have those generalizations today, right?</p>",
        "id": 260001069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635862612
    },
    {
        "content": "<p>I think that the Galois coinsertion generalisation might work out. Say l and u form a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_coinsertion\">docs#galois_coinsertion</a> and use notation as in that link. Say s,t in beta and s meet t is bot. Then for all b in beta, b&lt;=s and b&lt;=t implies b&lt;=bot, and so for all a in alpha, l a &lt;= s and l a &lt;= t implies l a &lt;= bot. So for all a in alpha, a &lt;= u s and a &lt;= u t implies a &lt;= u (bot). So we're done (i.e. we've proved u s meet u t = bot) if u bot = bot for a Galois coinsertion. This feels right to me because u has to be a surjection, so u x = bot for some x, and bot &lt;= x so u bot &lt;= u x = bot. I think this is OK.</p>",
        "id": 260001390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635862782
    },
    {
        "content": "<p>I would formalise but I'm about to get on a train to Oxford to go and evangelise to the undergrads.</p>",
        "id": 260001411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635862800
    },
    {
        "content": "<p>Aha yes. You could say that <code>u</code> preserves infs since it's the right part of a Galois connection, and preserves the sup of any family of elements which are already of the form <code>l x</code> (so in particular the empty sup), basically because <code>l</code> preserves sups. The corresponding categorical fact would be that a coreflective subcategory is closed under colimits.</p>",
        "id": 260005717,
        "sender_full_name": "David Wärn",
        "timestamp": 1635864622
    },
    {
        "content": "<p>Why the first lemma is called <code>comap</code>? For me, comap moves things back along a map, not forward.</p>",
        "id": 260087946,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635912283
    },
    {
        "content": "<p>Probably we should have an <code>@[simp]</code> <code>iff</code> lemma at least about <code>disjoint (f a) (f b)</code>.</p>",
        "id": 260087971,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635912350
    },
    {
        "content": "<p>I was emulating things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equivalence.comap\">docs#equivalence.comap</a></p>",
        "id": 260094477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635921559
    },
    {
        "content": "<p>But I guess it's not a good match. Should I rename to <code>map</code>?</p>",
        "id": 260149805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635952930
    },
    {
        "content": "<p><code>equivalence.comap</code> moves a statement back along <code>f</code>. Yes, I would prefer <code>map</code>.</p>",
        "id": 260183389,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635967006
    },
    {
        "content": "<p>I've updated <a href=\"https://github.com/leanprover-community/mathlib/issues/10108\">#10108</a>, but Ci is running on bad runners I think</p>",
        "id": 260183816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635967262
    },
    {
        "content": "<p>Good point about the iff lemma, that made some proofs shorter</p>",
        "id": 260199797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635974683
    }
]