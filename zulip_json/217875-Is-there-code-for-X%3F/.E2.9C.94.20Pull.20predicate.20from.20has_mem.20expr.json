[
    {
        "content": "<p>Okay what happens if I have <code>g ∈ (stabilizer G a : set G)</code>...?</p>",
        "id": 305230779,
        "sender_full_name": "Ben",
        "timestamp": 1666297267
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like.mem_coe\">docs#set_like.mem_coe</a> + the previous lemma. Or <code>id</code> again!</p>",
        "id": 305230838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666297293
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mul_opposite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">mul_action.stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">squeeze_simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305231023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666297371
    },
    {
        "content": "<p>Of course, all of Yael's comments are correct, but it's useful to be able to find these lemmas yourself! In this case, they're tagged with <code>simp</code> so the simplifier will pick them up. <code>library_search</code> will probably work as well.</p>",
        "id": 305231156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666297441
    },
    {
        "content": "<p>And still the most reliable approach is to get used to the naming convention in mathlib, and use the API search here: <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 305231278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666297484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 305233215,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666298147
    }
]