[
    {
        "content": "<p>This instance I don't think exists, although I didn't try <code>import all</code>. Any reason not to have it? I mean, it's just a <code>Prop</code> so there's no data. This would be the final piece for us to automatically inherit a (non-unital) ℝ-algebra instance from a (non-unital) ℂ-algebra instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">complex.real_smul_comm_class</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex.coe_smul</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">smul_comm</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 298823399,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663178987
    },
    {
        "content": "<p><del>I think that likely forms an instance cycle with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.smul_comm_class\">docs#complex.smul_comm_class</a></del> nevermind, the argument order is different</p>",
        "id": 298826328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663180010
    },
    {
        "content": "<p>I also maintain that inheriting the real instance from the complex one (that is, the module instance that already exists) goes against the design of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_assoc_class\">docs#smul_assoc_class</a>, even though it may be convenient</p>",
        "id": 298826452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663180058
    },
    {
        "content": "<p>Well, it would even be nice to know that a <code>ℂ</code>-algebra is an <code>ℝ≥0</code>-algebra without having to state it explicitly (which would come for free from this I think).</p>",
        "id": 298841328,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663185344
    },
    {
        "content": "<p>In the <code>algebra</code> sense of the word algebra (read: canonical ring hom) that would be a bad idea because the canonical hom found through transitivity is likely not to be defeq to one that already exists</p>",
        "id": 298847080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663187830
    },
    {
        "content": "<p>A more extreme case of your request would be inferring <code>module ℝ M</code> from <code>module ℝ[X] M</code></p>",
        "id": 298847301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663187933
    },
    {
        "content": "<p>I'm confused why this is an isuse, if <code>smul_comm_class</code> works then the algebra instance must already too</p>",
        "id": 298850511,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663189207
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 298850607,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663189240
    },
    {
        "content": "<p>Eric R, I think Eric W is worried about <em>definitional</em> equality, where <code>smul_comm_class</code> would only be propositional.</p>",
        "id": 298851608,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663189572
    },
    {
        "content": "<p>What I'm trying to say is that if your code already compiles, then this \"harmful\" <code>algebra</code> instance that turns <code>algebra \\C E</code> into <code>algebra \\R E</code> (or somewhere further down the hierarchy) is already there; I agree that a <code>Prop</code>-valued class cannot cause further issues.</p>",
        "id": 298852896,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663190058
    },
    {
        "content": "<p>Eric W, I guess I see there may be some difficulties in \"inheriting downwards\" like this in more abstract classes, but  for ℝ≥0, ℝ, ℂ I feel like this is less of an issue. In particular, I can't really imagine a scenario where you would need to first declare a scalar action by <code>ℝ</code> and then another by <code>ℂ</code> in a definitionally different but propositionally equal way where you couldn't just declare the action by <code>ℂ</code> first.  I have a similar feeling about <code>ℝ≥0</code> and <code>ℝ</code>. Nevertheless, I'm open to being enlightened by hypothetical or actual situations.</p>",
        "id": 298852898,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663190058
    },
    {
        "content": "<p>Agreed, I think Eric W is taking issue with those data-carrying instances that already exist, not my <code>smul_comm_class</code> instance above in particular; only that it is indicative of what he feels is a larger problem.</p>",
        "id": 298853134,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663190150
    },
    {
        "content": "<p>well, since we have these data-carrying instances for now: <a href=\"https://github.com/leanprover-community/mathlib/pull/16513\">#16513</a></p>",
        "id": 298882753,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663199444
    }
]