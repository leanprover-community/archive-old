[
    {
        "content": "<p>From a PR: what is this lemma meant to be named?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"bp\">???</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 257487794,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634194220
    },
    {
        "content": "<p><code>two_pigeonhole_principle</code>? <code>two_pigeonhole_principle_nat</code>?</p>",
        "id": 257487978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634194352
    },
    {
        "content": "<p><code>nat.succ_le_or_succ_le</code>?</p>",
        "id": 257488102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634194436
    },
    {
        "content": "<p>If you wrote it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"bp\">???</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>then it would be more general.</p>",
        "id": 257488132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634194443
    },
    {
        "content": "<p>Isn't that definitionally equal? :-)</p>",
        "id": 257488191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634194478
    },
    {
        "content": "<p>Of course! But your lemma above is only true for <code>succ_order</code>s.</p>",
        "id": 257488228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634194510
    },
    {
        "content": "<p><code>lt_or_lt_of_two_mul_lt_add</code>?</p>",
        "id": 257488242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634194517
    },
    {
        "content": "<p>if you wrote it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"bp\">???</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>it would be even more general</p>",
        "id": 257489810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634195488
    },
    {
        "content": "<p>Damn! What about <code>lt_or_lt_of_add_lt_add</code>?</p>",
        "id": 257490231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634195735
    },
    {
        "content": "<p>I feel like there was another naming help topic, but I can't find it; what do people think <a href=\"https://github.com/leanprover-community/mathlib/blob/2fe2b58589c39dcffe7b94200019d86f9d0ef49c/src/group_theory/exponent.lean#L164\">this</a> lemma should be named?</p>",
        "id": 265331826,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639762553
    },
    {
        "content": "<p><code>exists_order_of_eq_pow_padic_val_nat_exponent</code>? Or is it too long?</p>",
        "id": 265332594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639762881
    },
    {
        "content": "<p>feels kinda long but on the other hand it does describe the lemma perfectly, so maybe i'll go with that, thanks!</p>",
        "id": 265332754,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639762951
    },
    {
        "content": "<p>What do you think of <code>nat.prime.exists_order_of_eq_pow_padic_val_nat_exponent</code>? Same length in practice + allows dot notation</p>",
        "id": 265354405,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639771797
    },
    {
        "content": "<p>I don't use this part of the library. Note: with <code>alias</code>, you can have both.</p>",
        "id": 265358293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639774053
    }
]