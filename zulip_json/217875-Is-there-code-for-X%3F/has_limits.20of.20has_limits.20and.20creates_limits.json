[
    {
        "content": "<p>Is there a way to make the following work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.creates</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.monad.limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">limits.has_limits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">creates_limits</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">limits.has_limits</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 211083395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600913645
    },
    {
        "content": "<p>I know I can't expect typeclass search to work, since it has no way of knowing about F, but I would be happy with a <code>def</code> that I can use for the example.</p>",
        "id": 211083930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600914410
    },
    {
        "content": "<p>Okay, I completed the example with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">limits.has_limits</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_limit_of_created</span> <span class=\"n\">G</span> <span class=\"n\">F</span> <span class=\"o\">⟩⟩</span>\n</code></pre></div>\n\n<p>Is this in mathlib somewhere?</p>",
        "id": 211085601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600916530
    },
    {
        "content": "<p>Not to my knowledge! Shims like this are definitely useful.</p>",
        "id": 211086723,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600918146
    },
    {
        "content": "<p>I'm playing with it now. It works out well too, e.g. the functor <code>F</code> automatically gets a <code>preserves_limits</code> instance.</p>",
        "id": 211086785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600918214
    },
    {
        "content": "<p>Yeah I agree this should be there as a def</p>",
        "id": 211136918,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600956844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  <a href=\"https://github.com/leanprover-community/mathlib/issues/4239\">#4239</a></p>",
        "id": 211138531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600957585
    }
]