[
    {
        "content": "<p>In <code>congruence.lean</code>, there are definitions like</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"c\">/-</span><span class=\"cm\">- Defining the quotient by a ring congruence relation of a type with a multiplication. -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">quotient</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"err\">$</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_setoid</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\">- The function on the quotient by a congruence relation `c` induced by a function that is</span>\n<span class=\"cm\">      constant on `c`&#39;s equivalence classes. -/</span>\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">lift_on</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ring_con</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on&#39;</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\">- The binary function on the quotient by a ring congruence relation `c` induced by a binary function</span>\n<span class=\"cm\">      that is constant on `c`&#39;s equivalence classes. -/</span>\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">lift_on₂</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ring_con</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂&#39;</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>This seems awfully verbose. Is there a way of telling lean that when I write <code>def quotient := quotient $ c.to_setoid</code> I also want to copy over a bunch of the projections?</p>",
        "id": 210430905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600367460
    },
    {
        "content": "<p>And if not, is there a way I can at least avoid writing out the full lemma each time?</p>",
        "id": 210431013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600367507
    }
]