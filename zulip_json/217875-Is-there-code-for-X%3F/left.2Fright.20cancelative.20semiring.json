[
    {
        "content": "<p>Dear All,</p>\n<p>does mathlib have the notion of a nontrivial, left and right cancelative semiring?   This would probably be a <code>class</code> extending <code>semiring, nontrivial, mul_left_cancel, mul_right_cancel</code>.</p>\n<p>I am asking since, as far as I can tell, the polynomial semiring with coefficients in <code>ℕ</code> has this property, but is not a <code>domain/integral_domain</code>.  I do not necessarily insist on not assuming commutativity of multiplication, though this property seems to play very little role in proofs.  I would be more interested in <em>not</em> assuming existence of opposites (additive inverses) in the semiring, since there are cases where working with <code>ℕ[x] = polynomial ℕ</code> is important.</p>\n<p>Note: the left/right cancelative property is stronger than the property of not having zero divisors, but is equivalent to it, under the existence of additive inverses.</p>",
        "id": 214666935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603782900
    },
    {
        "content": "<p>I don't think this exists, but note that you can mix certain classes. So a <code>cancel_semiring R</code> can be mixed with <code>nontrivial R</code>.</p>",
        "id": 214667440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603783483
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cancel_monoid_with_zero\">docs#cancel_monoid_with_zero</a></p>",
        "id": 214667488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603783546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> but you can't mix that with a ring structure</p>",
        "id": 214667681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603783766
    },
    {
        "content": "<p>I guess we want some sort of <code>semidomain</code></p>",
        "id": 214667683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603783775
    },
    {
        "content": "<p>why not?</p>",
        "id": 214667686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603783785
    },
    {
        "content": "<p>You'll get two multiplications on your type, right?</p>",
        "id": 214667748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603783825
    },
    {
        "content": "<p>Or are you suggesting an ingredient for a new class?</p>",
        "id": 214667754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603783839
    },
    {
        "content": "<p>I guess</p>",
        "id": 214667777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603783886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does it make sense to refactor <code>domain</code> to be a mixin Prop?</p>",
        "id": 214667837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603783946
    },
    {
        "content": "<p>I don't know, it seems like a slippery slope</p>",
        "id": 214667947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603784116
    },
    {
        "content": "<p>it makes using domains more annoying and also makes typeclass search more expensive</p>",
        "id": 214667959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603784144
    },
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , what you suggest is essentially what I had in mind!</p>\n<p>I am happy with having a new <code>class</code> and the name <code>semidomain</code> seems appropriate!</p>",
        "id": 214668011,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603784177
    },
    {
        "content": "<p>what's wrong with just making lots of combo classes</p>",
        "id": 214668013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603784182
    },
    {
        "content": "<p>It's a bit of an <code>M * N</code>-problem, right?</p>",
        "id": 214668041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784229
    },
    {
        "content": "<p>Potentially more like <code>M * N * O * P</code></p>",
        "id": 214668061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784250
    },
    {
        "content": "<p>what's an M*N-problem?</p>",
        "id": 214668076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603784261
    },
    {
        "content": "<p>Well, with combo classes you need <code>M * N</code> of them, but with mixins only <code>M + N</code>.</p>",
        "id": 214668128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> My guess is that this will do what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semidomain</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">cancel_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">semiring</span> <span class=\"n\">R.</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214668229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784420
    },
    {
        "content": "<p>But in practice M and N are small, right?</p>",
        "id": 214668268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603784455
    },
    {
        "content": "<p>Well, someone will come along, and ask for <code>ordered_semidomain</code>, and we also need <code>comm_</code> versions of both</p>",
        "id": 214668359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> You'll want to provide an instance from <code>domain</code> to <code>semidomain</code></p>",
        "id": 214668413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784554
    },
    {
        "content": "<p>I will try it out!  For the moment, I do not have a real and urgent need for it, but I am thinking in terms of Hilbert's 17th problem, about sums of squares, where the coefficients change between <code>ℝ</code> and <code>ℝ₊</code>.</p>",
        "id": 214668648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603784780
    },
    {
        "content": "<p>Not only M and N are small, we don't need the complete product</p>",
        "id": 214668697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603784846
    },
    {
        "content": "<p>Note that <code>linear_ordered_semiring</code> exists, and it probably implies <code>semidomain</code></p>",
        "id": 214668702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784852
    },
    {
        "content": "<p>since it seems that <code>domain</code> is used very little in mathlib (at least, without also assuming existence of opposites), it might make sense to set it up from the start so that all these results will be directly proven in the more context.</p>",
        "id": 214668712,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603784867
    },
    {
        "content": "<p>So why did we make <code>PID</code> and <code>DVR</code> into props?</p>",
        "id": 214668713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784869
    },
    {
        "content": "<p>because people want to make mixins</p>",
        "id": 214668771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603784906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/left.2Fright.20cancelative.20semiring/near/214668712\">said</a>:</p>\n<blockquote>\n<p>since it seems that <code>domain</code> is used very little in mathlib (at least, without also assuming existence of opposites), it might make sense to set it up from the start so that all these results will be directly proven in the more context.</p>\n</blockquote>\n<p>Introducing a definition like <code>semidomain</code> brings with it the obligation to write a 250 line file with all the basic lemmas (-;</p>",
        "id": 214668773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603784913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/left.2Fright.20cancelative.20semiring/near/214668702\">said</a>:</p>\n<blockquote>\n<p>Note that <code>linear_ordered_semiring</code> exists, and it probably implies <code>semidomain</code></p>\n</blockquote>\n<p>What I had in mind was indeed always an ordered base ring, but the order is not the property that I was thinking of using.</p>",
        "id": 214668798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603784940
    },
    {
        "content": "<p>As far as I know we haven't actually hit any significant issues with combo classing everything, except that you have a lot of obscurely named classes</p>",
        "id": 214668817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603784970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/left.2Fright.20cancelative.20semiring/near/214668773\">said</a>:</p>\n<p>Introducing a definition like <code>semidomain</code> brings with it the obligation to write a 250 line file with all the basic lemmas (-;</p>\n<p>hmmm</p>",
        "id": 214668905,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603785030
    },
    {
        "content": "<p>It's one line to define a new combo class, you don't even need any API to start using it</p>",
        "id": 214668906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603785031
    },
    {
        "content": "<p>Generally the only lemmas you will have for a combo class are those that were generalized from a more restrictive class, and the new ones you want to state</p>",
        "id": 214668944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603785101
    },
    {
        "content": "<p>Ok, I will go for the minimal choice of simply defining a new <code>class</code> extending all the properties that I want and will see what I can do with that.  If it works well, I may produce a PR.  I just wanted to make sure that this new class did not already exist, so that I did not have to make it up in my own.</p>",
        "id": 214669026,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603785168
    },
    {
        "content": "<p>I think it is a very good idea that something like <code>[algebra R A]</code> is a mixin</p>",
        "id": 214669053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603785198
    },
    {
        "content": "<p>If all are happy, I will call it <code>semidomain</code> since I quite like the name and it seems fairly descriptive of what it is.</p>",
        "id": 214669058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603785202
    },
    {
        "content": "<p>My rule is: one type arg = one class</p>",
        "id": 214669077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603785239
    },
    {
        "content": "<p>for more type args you will potentially need one class per subset of the type args (so for two type args like module/algebra you have [foo R] [bar A] [baz R A])</p>",
        "id": 214669142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603785287
    },
    {
        "content": "<p>So you think we should have <code>fin_dim_algebra K L</code> to avoid <code>[algebra K L] [finite_dimensional K L]</code>?</p>",
        "id": 214669183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603785340
    },
    {
        "content": "<p>yes</p>",
        "id": 214669248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603785375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/left.2Fright.20cancelative.20semiring/near/214667440\">said</a>:</p>\n<blockquote>\n<p>I don't think this exists, but note that you can mix certain classes. So a <code>cancel_semiring R</code> can be mixed with <code>nontrivial R</code>.</p>\n</blockquote>\n<p>Does a <code>cancel_semiring</code> already exist?  I could not find it...</p>",
        "id": 214669249,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603785375
    },
    {
        "content": "<p>Nope, it was what we later started calling <code>semidomain</code></p>",
        "id": 214669260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603785395
    },
    {
        "content": "<p>Ok, I will extend <code>semiring, nontrivial</code> and add two further properties that look exactly like <code>mul_left_cancel</code> and <code>mul_right_cancel</code> (and are called the same)!</p>",
        "id": 214669306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603785461
    },
    {
        "content": "<p>and refactor lemmas for <code>domain</code>?</p>",
        "id": 214669368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603785499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I think you an extend <code>cancel_monoid_with_zero</code></p>",
        "id": 214669383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603785514
    },
    {
        "content": "<p>It's best to call them the same thing if they are identical, so that you can mix them together in combo classes using <code>..s</code></p>",
        "id": 214669384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603785516
    },
    {
        "content": "<p>That gives you those cancel lemmas for free.</p>",
        "id": 214669390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603785525
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">semidomain</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cancel_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">nontrivial</span> <span class=\"n\">R</span>\n</code></pre></div>\n\n<p>then?</p>",
        "id": 214669415,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603785556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/left.2Fright.20cancelative.20semiring/near/214668229\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> My guess is that this will do what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semidomain</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">cancel_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">semiring</span> <span class=\"n\">R.</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n</blockquote>\n<p>.</p>",
        "id": 214669423,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603785582
    },
    {
        "content": "<p>(I have a meeting right now: I will look back at this thread once the meeting is over!)</p>",
        "id": 214669433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603785593
    },
    {
        "content": "<p>Maybe <code>nontrivial</code> should also be added... from a maths point of view the zero ring is probably not a <code>semidomain</code></p>",
        "id": 214669515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603785657
    },
    {
        "content": "<p>I definitely want <code>nontrivial</code> to be part of the definition!  Thank you all for your help!</p>",
        "id": 214674889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603789816
    },
    {
        "content": "<p>After I typed the definition </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">semidomain</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">cancel_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">nontrivial</span> <span class=\"n\">R</span>\n</code></pre></div>\n\n<p>I would then like to show that if <code>R</code> is a semidomain, than also <code>polynomial R</code> is a semidomain:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">semidomain_pol</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semidomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semidomain</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n<p>Is there a way of using the fact that <code>polynomial R</code> already is a semiring and so I only need to define <code>cancel_monoid_with_zero</code> and <code>nontrivial</code>?  Also, many of the  <code>cancel_monoid_with_zero</code> properties should already be available and if I could recycle them, it would be awesome!</p>\n<p>Thanks!</p>",
        "id": 214678322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603792049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Yes, you can do that</p>",
        "id": 214678413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603792103
    },
    {
        "content": "<p>yes, in the instance you can write <code>{field := bla, ..polynomial.semiring}</code></p>",
        "id": 214678445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603792127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semidomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semidomain</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">some_field</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">polynomial.semiring</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 214678457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603792138
    },
    {
        "content": "<p>Maybe you need <code>polynomial.semiring R</code>, depending on whether it takes an explicit argument or not.</p>",
        "id": 214678491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603792162
    },
    {
        "content": "<p>Ah, I never used <code>instance</code>!  I will play around with it!  Thanks!</p>",
        "id": 214678504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603792171
    },
    {
        "content": "<p>Probably <code>.. polynomial.nontrivial</code> also exists</p>",
        "id": 214678517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603792186
    },
    {
        "content": "<p><code>instance</code> is just like <code>def</code> and <code>lemma</code>, but with the extra feature that it adds the declaration to the typeclass system</p>",
        "id": 214678617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603792237
    },
    {
        "content": "<p>So that later on <code>semidomain (polynomial R)</code> can be found automatically by Lean</p>",
        "id": 214678642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603792256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/left.2Fright.20cancelative.20semiring/near/214678617\">said</a>:</p>\n<blockquote>\n<p><code>instance</code> is just like <code>def</code> and <code>lemma</code>, but with the extra feature that it adds the declaration to the typeclass system</p>\n</blockquote>\n<p>This means that if I then type <code>polynomial R</code> and <code>R</code> is a <code>semidomain</code>, Lean will know that <code>polynomial R</code> is a semidomain as well?</p>",
        "id": 214678674,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603792291
    },
    {
        "content": "<p>Ah, ok, you already answered!  Thanks!</p>",
        "id": 214678687,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603792305
    }
]