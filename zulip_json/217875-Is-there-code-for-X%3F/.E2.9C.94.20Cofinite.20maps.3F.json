[
    {
        "content": "<p>Hey, I'd need some code around \"cofinite\" maps, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">s.finite</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">set.preimage</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n</code></pre></div>\n<ol>\n<li>Is there code for it?</li>\n<li>If not, would that belong in mathlib?</li>\n</ol>",
        "id": 316206894,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671178071
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.cofinite\">docs#filter.cofinite</a> - is that related?</p>",
        "id": 316207361,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671178272
    },
    {
        "content": "<p>Do you mean <code>s : set Y</code>? or am I confused</p>",
        "id": 316208257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671178655
    },
    {
        "content": "<p>I do, sorry.</p>",
        "id": 316208361,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671178698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cofinite.20maps.3F/near/316207361\">said</a>:</p>\n<blockquote>\n<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.cofinite\">docs#filter.cofinite</a> - is that related?</p>\n</blockquote>\n<p>I don't think it is? I'm not sure the name here is really good, but that's the best I know.</p>",
        "id": 316208431,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671178738
    },
    {
        "content": "<p>I would say <code>f</code> has finite fibers</p>",
        "id": 316208650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671178849
    },
    {
        "content": "<p>which isn't what you wrote, but it's equivalent</p>",
        "id": 316208675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671178861
    },
    {
        "content": "<p>right</p>",
        "id": 316208683,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671178866
    },
    {
        "content": "<p>disregarding the name, isn't it better to _define_ it as preimages of finite being finite, simply because it's easier to show that it composes, and implies the fiber definition directly (the other direction is a tiny bit more involved) ?</p>",
        "id": 316208825,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671178924
    },
    {
        "content": "<p>Yes maybe! but you will still probably want to know that you can check it on single fibers, anyways</p>",
        "id": 316209806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671179356
    },
    {
        "content": "<p>Alright ,thanks!</p>",
        "id": 316211890,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671180240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 316211917,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671180244
    },
    {
        "content": "<p>That would help a lot with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.preimage\">docs#finset.preimage</a>, which can't be used as soon as your function isn't injective.</p>",
        "id": 316212325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671180405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Cofinite.20maps.3F/near/316208431\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cofinite.20maps.3F/near/316207361\">said</a>:</p>\n<blockquote>\n<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.cofinite\">docs#filter.cofinite</a> - is that related?</p>\n</blockquote>\n<p>I don't think it is? I'm not sure the name here is really good, but that's the best I know.</p>\n</blockquote>\n<p>They definitely are! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.cofinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">s.finite</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">cofinite</span> <span class=\"n\">cofinite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tendsto_def</span><span class=\"o\">,</span> <span class=\"n\">mem_cofinite</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">preimage_compl</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">compl_compl</span> <span class=\"n\">s</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316254623,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671194149
    },
    {
        "content": "<p>In algebraic geometry, maps with finite fibres are called quasi-finite maps (this is not exactly true, there is some other technical condition which is sometimes also assumed but which is true in essentially all applications)</p>",
        "id": 316256136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671194548
    },
    {
        "content": "<p>I'm inclined to suggest <code>function.finite</code> as name for this concept.</p>",
        "id": 316256671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671194712
    },
    {
        "content": "<p>why not <code>function.proper</code>?</p>",
        "id": 316257101,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671194836
    },
    {
        "content": "<p><code>proper</code> is usually interchangeable with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cocompact_map\">docs#cocompact_map</a> (<code>tendsto cocompact cocompact</code>). So maybe this indeed should be named <code>cofinite</code> ...</p>",
        "id": 316295415,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671204940
    },
    {
        "content": "<p>I'm not sure we should use topological terminology when there's no topology around. I guess you could also put some bornology on discrete spaces such that finite sets are bounded. And then <code>cofinite = cobounded</code>, and hence you could use bounded maps for this notion.</p>",
        "id": 316295905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671205071
    },
    {
        "content": "<p>So I would rather have a name that directly corresponds to the finiteness that is inherent in the concept.</p>",
        "id": 316296059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671205102
    },
    {
        "content": "<p>IIRC there is a general categorical notion of properness, and these two are special cases</p>",
        "id": 316296078,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671205106
    },
    {
        "content": "<p>Ok, that's a better justification (-;</p>",
        "id": 316296255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671205156
    },
    {
        "content": "<p>Let me see what the nlab thinks</p>",
        "id": 316296869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671205315
    },
    {
        "content": "<p>Let me apologize in advance to any bystanders...<br>\n<a href=\"https://ncatlab.org/nlab/show/proper+geometric+morphism\">https://ncatlab.org/nlab/show/proper+geometric+morphism</a></p>",
        "id": 316297622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671205508
    },
    {
        "content": "<p>But because of mathlib's use of unbundled constructs it would conflict to refer to this as properness, since then a proper map (in the sense of topology) won't be proper in this sense.</p>",
        "id": 316321000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671211789
    }
]