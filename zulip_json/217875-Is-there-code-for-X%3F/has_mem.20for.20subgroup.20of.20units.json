[
    {
        "content": "<p>I think I asked about this before, but it came up again. Do we have something like this instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_mem_unit_subgroup</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">H</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>If not, should I add it somewhere?</p>",
        "id": 217642977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606145943
    },
    {
        "content": "<p>Hmmm... also, why does this fail?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_mem_unit_subgroup'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- FAILS</span>\n</code></pre></div>",
        "id": 217644087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606146421
    },
    {
        "content": "<p>Works for me! Dirty mathlib?</p>",
        "id": 217647183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606147645
    },
    {
        "content": "<p>It might fail in the presence of <code>has_mem_unit_subgroup</code> though because of the <code>out_param</code> in <code>has_mem</code></p>",
        "id": 217648284,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1606148057
    },
    {
        "content": "<p>Yeah, it's the <code>out_param</code> that's causing the problem. So there is no way to have <code>has_mem A B</code> and <code>has_mem A' B</code> at the same time?!</p>",
        "id": 217649138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606148424
    },
    {
        "content": "<p>Yeah, as far as I know</p>",
        "id": 217649226,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1606148469
    },
    {
        "content": "<p>Do you have any suggestions for making things like  <code>subgroup (units A)</code> not completely awful to work with?</p>",
        "id": 217649411,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606148550
    },
    {
        "content": "<p>I've never tried to work with it, so I don't have anything helpful to say, sorry!</p>",
        "id": 217650409,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1606149021
    }
]