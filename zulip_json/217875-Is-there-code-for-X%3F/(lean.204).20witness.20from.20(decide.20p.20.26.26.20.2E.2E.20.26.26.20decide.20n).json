[
    {
        "content": "<p>Am I missing an easy way to extend this:<br>\n<code>example (a..n : Prop) [Decidable p] .. [Decidable n] (h0 : (p &amp;&amp; .. &amp;&amp; n) = true) : p ∧ .. ∧ n := by</code></p>\n<p>to arbitrarily long conjunctions or do I need to write a tactic?</p>",
        "id": 255643306,
        "sender_full_name": "Chris B",
        "timestamp": 1633033847
    },
    {
        "content": "<p>If <code>p..n</code> are decidable, then <code>p ∧ .. ∧ n</code> is also decidable, so why not use <code>by decide!</code> instead of a <code>... = true</code> hypothesis (presumably closed by <code>rfl</code>)?</p>",
        "id": 255648137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633035869
    },
    {
        "content": "<p>Another alternative is to use the <code>decide</code> function (known as <code>to_bool</code> in lean 3) and <code>of_decide_eq_true</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">h0</span>\n</code></pre></div>",
        "id": 255648702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633036115
    },
    {
        "content": "<p>I'm using (or at least experimenting with) what seems to be Lean 4's preference for Bool when it comes to reflection which I think is due to the kernel bool support. E.g. Nat defines <code>Nat.ble</code>, then the (Nat.ble a b = true &lt;-&gt; Nat.LE a b) lemma, then shows <code>Decidable Nat.le</code> using ble and the reflection lemma.</p>",
        "id": 255648996,
        "sender_full_name": "Chris B",
        "timestamp": 1633036258
    },
    {
        "content": "<p>I think <code>of_decide_eq_true</code> will do what I need in most cases, thanks for that lead.</p>",
        "id": 255649497,
        "sender_full_name": "Chris B",
        "timestamp": 1633036486
    },
    {
        "content": "<p>Actually I guess it depends on how the decidable instance for each prop is defined. It's interesting that <code>Decidable (And p q)</code> doesn't use reflection.</p>",
        "id": 255649716,
        "sender_full_name": "Chris B",
        "timestamp": 1633036572
    },
    {
        "content": "<p>If you really want to swap <code>&amp;&amp;</code> for <code>∧</code>, you can do it with a typeclass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">h0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ToConj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ToConj.base</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToConj</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">decide_eq_true</span><span class=\"o\">,</span> <span class=\"n\">of_decide_eq_true</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ToConj.conj</span> <span class=\"o\">[</span><span class=\"n\">ToConj</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ToConj</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToConj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ToConj.eq</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ToConj.eq</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ToConj.out</span> <span class=\"o\">[</span><span class=\"n\">ToConj</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ToConj.eq.2</span> <span class=\"n\">h0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">ToConj.out</span> <span class=\"n\">h0</span>\n</code></pre></div>",
        "id": 255649841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633036600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.28lean.204.29.20witness.20from.20.28decide.20p.20.26.26.20.2E.2E.20.26.26.20decide.20n.29/near/255648996\">said</a>:</p>\n<blockquote>\n<p>I'm using (or at least experimenting with) what seems to be Lean 4's preference for Bool when it comes to reflection which I think is due to the kernel bool support. E.g. Nat defines <code>Nat.ble</code>, then the (Nat.ble a b = true &lt;-&gt; Nat.LE a b) lemma, then shows <code>Decidable Nat.le</code> using ble and the reflection lemma.</p>\n</blockquote>\n<p>I think <code>Nat.ble</code> has a special status since it is an extern function</p>",
        "id": 255650050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633036664
    },
    {
        "content": "<p>I think <code>Nat.decLe</code> should have approximately equivalent codegen</p>",
        "id": 255650187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633036723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.28lean.204.29.20witness.20from.20.28decide.20p.20.26.26.20.2E.2E.20.26.26.20decide.20n.29/near/255649716\">said</a>:</p>\n<blockquote>\n<p>Actually I guess it depends on how the decidable instance for each prop is defined. It's interesting that <code>Decidable (And p q)</code> doesn't use reflection.</p>\n</blockquote>\n<p>I don't think there would be any advantage to \"using reflection\" here. It's just an if statement</p>",
        "id": 255650436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633036849
    },
    {
        "content": "<p>I'll take the codegen thing and the special status of Nat.ble into account, thanks.</p>",
        "id": 255650678,
        "sender_full_name": "Chris B",
        "timestamp": 1633036976
    },
    {
        "content": "<p>One thing to watch out for though is that <code>Decidable p</code> is an actual inductive type and not a thunk for one, meaning that <code>instDecidableAnd</code> and friends have to be marked <code>macroInline</code> to avoid evaluating both sides of the <code>&amp;&amp;</code> eagerly</p>",
        "id": 255650786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633037022
    },
    {
        "content": "<p>I guess the only other difference would be the size of the proof in the kernel.</p>",
        "id": 255650796,
        "sender_full_name": "Chris B",
        "timestamp": 1633037026
    },
    {
        "content": "<p>Ok that's also really good to know, thank you.</p>",
        "id": 255650880,
        "sender_full_name": "Chris B",
        "timestamp": 1633037047
    },
    {
        "content": "<p>I think that if you use <code>decide p</code> on some proposition <code>p</code> and evaluate <code>decide p = true</code> by <code>rfl</code>, the kernel proof will be short, essentially <code>@Eq.rfl true</code></p>",
        "id": 255651197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633037173
    },
    {
        "content": "<p>And if you use the magic bool evaluator the kernel won't even see the intermediate proof terms</p>",
        "id": 255651256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633037202
    },
    {
        "content": "<p>This has answered a bunch of questions and probably saved me a lot of work. I've never actually inspected an exported <code>decidable</code> proof, but now that I think about it that makes sense since the components of the decision procedure are already in the environment.</p>",
        "id": 255651897,
        "sender_full_name": "Chris B",
        "timestamp": 1633037454
    },
    {
        "content": "<p>It might still be an optimistic fantasy, but ideally <code>Decidable p</code> decision procedures should generate code exactly like the corresponding <code>bool</code> functions. Once you forget the proofs the structure is exactly the same</p>",
        "id": 255652502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633037740
    }
]