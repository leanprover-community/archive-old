[
    {
        "content": "<p>I am quite sure this is already in mathlib, but I cannot find it </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_min_max</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">max_eq_right</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_right</span> <span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">max_eq_left</span> <span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Of course it can be done with other type of numbers or much more generally...</p>\n<p>Thanks!</p>",
        "id": 279792028,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1650615122
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/min_add_max\">docs#min_add_max</a></p>",
        "id": 279792081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650615151
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_min_max</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is the way to answer questions like this. Note that \"equality is not symmetric\" in Lean! In the maths library the convention is to put the more complicated expression on the left hand side of the equality (so that you can <code>rw</code> more easily) , so you would expect the result to be <code>min a b + max a b = a + b</code>, as indeed it is, but <code>library_search</code> is smart enough to spot the result anyway.</p>",
        "id": 279794743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650616976
    },
    {
        "content": "<p>I tried library_search but didn't work. May be because I did not import tactic first?</p>",
        "id": 279808597,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1650625736
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_min_max</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works for me. I often <code>import tactic</code> though because it just guarantees that you have a bunch of basic stuff imported.</p>",
        "id": 279810985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650627286
    }
]