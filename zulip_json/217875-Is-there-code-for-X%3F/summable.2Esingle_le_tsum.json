[
    {
        "content": "<p>Dear All,</p>\n<p>in analogy with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.single_le_sum\">docs#finset.single_le_sum</a>, I was looking for the similar statement for infinite sums, but could not find it.  Is the lemma below (or something similar) in mathlib?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">summable</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">single_le_tsum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">le_add_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">tsum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">tsum_ite_eq_extract</span> <span class=\"n\">fs</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ge</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">rfl.le</span><span class=\"o\">,</span> <span class=\"n\">f0</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">summable</span>\n</code></pre></div>",
        "id": 274131540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646402164
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_tsum\">docs#le_tsum</a> ?</p>",
        "id": 274132355,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1646402462
    },
    {
        "content": "<p>looks like it's exactly what I need, thanks!</p>",
        "id": 274133058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646402700
    },
    {
        "content": "<p>Indeed, this works!  Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">single_le_tsum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_tsum</span> <span class=\"n\">fs</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">f0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274133373,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646402829
    }
]