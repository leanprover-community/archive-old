[
    {
        "content": "<p>Do we not have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.preorder\">docs#sum.preorder</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.preorder\">docs#sigma.preorder</a> and alike?</p>",
        "id": 262844655,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637973060
    },
    {
        "content": "<p>what exactly what you expect for those instances? not sure there's an obvious choice</p>",
        "id": 262844722,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637973162
    },
    {
        "content": "<p>there are two obvious choices. I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.lex\">docs#sum.lex</a> might exist</p>",
        "id": 262844915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637973505
    },
    {
        "content": "<p>The following seems pretty canonical to me...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">preorder_sigma</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">fiber</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">preorder_sigma</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">preorder_sigma</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preorder_sigma</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">preorder_sigma</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">preorder_sigma</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">preorder_sigma</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">preorder_sigma.fiber</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">preorder_sigma.trans</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption'</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 262845328,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637974178
    },
    {
        "content": "<p>And since <code>α ⊕ β ≃ Σ (i : fin 2), if i = 0 then α else β</code> with <code>fin 2</code> having an order, it seems fairly clear what the order on the sum should be...</p>",
        "id": 262845465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637974331
    },
    {
        "content": "<p>I agree with the <code>sigma</code> case, but I don't see why <code>or.inl _ &lt; or.inr _</code> should be the default at all.</p>",
        "id": 262845480,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637974376
    },
    {
        "content": "<p>The only argument is that \"we read from left to write\" (in English, at least)</p>",
        "id": 262845495,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637974420
    },
    {
        "content": "<p>Well, <code>bool</code> has a linear order, and if we do this the ltr way then we can upgrade <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_equiv_sigma_bool\">docs#equiv.sum_equiv_sigma_bool</a> to an orderiso</p>",
        "id": 262846056,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637975246
    },
    {
        "content": "<p>so I guess there is a case</p>",
        "id": 262846059,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637975259
    },
    {
        "content": "<p>The second \"obvious\" order I was referring to is the one generated only from the <code>fiber</code> variant of that inductive</p>",
        "id": 262848151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637978754
    },
    {
        "content": "<p>it looks like you have described <code>sigma.lex</code></p>",
        "id": 262848273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637978930
    },
    {
        "content": "<p>Is that a thing? (Test: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.lex\">docs#sigma.lex</a> )</p>",
        "id": 262848358,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637979116
    },
    {
        "content": "<p>I think that inductive is transitive even without <code>trans</code></p>",
        "id": 262848762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637979880
    },
    {
        "content": "<p>Probably... I was lazy <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 262849032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637980421
    },
    {
        "content": "<p>I'd have personally expected the disjoint union of the orders to be the default one (as it doesn't require an order on the index type) and the lexicographical one to be on a type alias/be accessible using a locale.</p>",
        "id": 262863139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638003899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Order.20on.20.CE.B1.20.E2.8A.95.20.CE.B2/near/262848273\">said</a>:</p>\n<blockquote>\n<p>it looks like you have described <code>sigma.lex</code></p>\n</blockquote>\n<p>Hmm, I shall PR that then</p>",
        "id": 262863227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638004065
    }
]