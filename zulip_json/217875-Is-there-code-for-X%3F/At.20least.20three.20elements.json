[
    {
        "content": "<p>What is the most natural way to express an assumption stating “A type <code>X</code> has at least three elements”? <br>\nMaybe simply <code>card X &gt; 2</code> (using the a coercion from <code>nat</code> to <code>cardinal</code>)?<br>\nIn the proof I’ll need to use this to <code>obtain</code> an element that’s different from two given elements of the type.</p>\n<p>I see there are similar lemmas <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/cardinal.html#cardinal.two_le_iff\"><code>cardinal.two_le_iff</code></a>. Maybe I should add <code>cardinal.three_le_iff</code></p>",
        "id": 272703239,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645457666
    },
    {
        "content": "<p>Is it a finite type?</p>",
        "id": 272703314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645457716
    },
    {
        "content": "<p>No, that would be too restrictive.</p>",
        "id": 272703341,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645457732
    },
    {
        "content": "<p>There is <code>fintype.card</code> and <code>cardinal.mk</code>. The two are different.</p>",
        "id": 272703358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645457738
    },
    {
        "content": "<p>This same condition came up in our work with Bhavik. I wish there was a <code>very_nontrivial</code> typeclass...</p>",
        "id": 272703376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645457748
    },
    {
        "content": "<p>Would <code>cardinal.three_le_iff</code> generalize to <code>exists_finset_card_of_blabla_foo_bar</code>?</p>",
        "id": 272703541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645457817
    },
    {
        "content": "<p>Where you somehow want to say that if you know <code>m + n ≤ cardinal.mk X</code> and <code>s : finset X</code> has <code>s.card ≤ m</code> then there is a <code>t : finset X</code> with <code>n ≤ t.card</code> and <code>s.disjoint t</code>?</p>",
        "id": 272703643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645457870
    },
    {
        "content": "<p>With may some special casing for <code>n = 1</code> and <code>n = 2</code>, where you don't get a <code>t : finset X</code> but some hands-on elements</p>",
        "id": 272703749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645457920
    },
    {
        "content": "<p>Looks reasonable, although pragmatically I think I still want the convenient <code>tree_le_iff'</code> lemma :-D</p>",
        "id": 272703767,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645457930
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_eq_three\">docs#finset.card_eq_three</a></p>",
        "id": 272703812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645457955
    },
    {
        "content": "<p>This seems somewhat compelling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">card_ge</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>especially given the lemma Yael mentioned.</p>",
        "id": 272727097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645471628
    },
    {
        "content": "<p>I was thinking the same, but as a <code>class</code>.</p>",
        "id": 272727155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645471672
    },
    {
        "content": "<p>A reason I like this is that it's very \"local\": you don't need there to be any sort of object that's the cardinality of the whole type, you just need to present a finite set with a certain number of elements.</p>",
        "id": 272727270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645471756
    },
    {
        "content": "<p>That seems like a reasonable class to have. Any reason not to have it be a class?</p>",
        "id": 272727375,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645471810
    },
    {
        "content": "<p>Maybe it could be stated with cardinals.</p>",
        "id": 272727498,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645471893
    },
    {
        "content": "<p>I think 98% of the use cases will be for natural numbers</p>",
        "id": 272727595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645471952
    },
    {
        "content": "<p>Should this then replace <code>nontrivial</code>?</p>",
        "id": 272727607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645471965
    },
    {
        "content": "<p>And <code>nonempty</code>? That sounds like a bootstrapping problem.</p>",
        "id": 272727679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645472028
    },
    {
        "content": "<p>I'm not sure there are any theoretical problem to <code>nonempty</code> being in terms of <code>card_ge</code>, but that seems like more trouble than it's worth (the definitions of <code>multiset</code> and <code>finset</code> would have to find their way to core...)</p>\n<p>It looks like <code>nontrivial</code> isn't <em>that</em> deep, so it seems replaceable (it could be an abbreviation)</p>",
        "id": 272728518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645472658
    },
    {
        "content": "<p>A class?? <span aria-label=\"scream cat\" class=\"emoji emoji-1f640\" role=\"img\" title=\"scream cat\">:scream_cat:</span> Can someone who understands explain this to me?</p>",
        "id": 272728614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645472742
    },
    {
        "content": "<p><code>nonempty (fin 3 ↪ α)</code></p>",
        "id": 272728747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645472826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Just some overengineering for the handful of cases that should probably ever appear: <code>[card_ge α 1]</code>, <code>[card_ge α 2]</code>, <code>[card_ge α 3]</code>. (Assuming the pre-existing cardinality classes should be unified.)</p>",
        "id": 272728969,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645472981
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">}⟩⟩</span>\n</code></pre></div>",
        "id": 272729211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645473168
    },
    {
        "content": "<p>This has the benefit of being easily generalizable (to a point... the automation gets pretty slow)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span> <span class=\"bp\">→</span>\n  <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span> <span class=\"bp\">→</span>\n  <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n<span class=\"o\">⟨⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">}⟩⟩</span>\n</code></pre></div>",
        "id": 272730165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645473794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I mean why not just make it a Prop. Wouldn't it make everyone happier?</p>",
        "id": 272730339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645473928
    },
    {
        "content": "<p>i.e., not a class</p>",
        "id": 272730352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645473932
    },
    {
        "content": "<p>I think the best way is to use <code>list.nodup [a, b, c]</code>, which definitionally unfolds to something pretty close to what you want</p>",
        "id": 272730368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645473940
    },
    {
        "content": "<p>It's not too hard to massage an assumption like <code>fintype.card X &gt;= 3</code> into that</p>",
        "id": 272730468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645474003
    }
]