[
    {
        "content": "<p>Given <code>n : ℕ</code> and a prime <code>p</code>, what is the best way of writing <code>n = (p ^ k) * m</code> with <code>¬  (p ∣ m)</code>? I am sure the results is somewhere in the library, but I don't find it...</p>",
        "id": 265812729,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640184481
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_val_nat\">docs#padic_val_nat</a>, but it is surprisingly deep in the library...</p>",
        "id": 265815613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640186171
    },
    {
        "content": "<p>that's what I use a lot :) the API seems to do most of what you want it to do!</p>",
        "id": 265816777,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640186788
    },
    {
        "content": "<p>How is this done in the context of the Sylow theorems?\"</p>",
        "id": 265816957,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640186895
    },
    {
        "content": "<p>A Sylow subgroup is a maximal <code>p</code>-subgroup</p>",
        "id": 265817090,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640186988
    },
    {
        "content": "<p>So maybe  you can use the maximal power of p which divides n?</p>",
        "id": 265817316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640187089
    },
    {
        "content": "<p>I guess that's essentially defeq to the padic valuation.</p>",
        "id": 265817338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640187108
    },
    {
        "content": "<p>There's also: <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/multiplicity.html\">https://leanprover-community.github.io/mathlib_docs/ring_theory/multiplicity.html</a><br>\nNot sure if there's good API though</p>",
        "id": 265817357,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1640187120
    },
    {
        "content": "<p>Yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicity\">docs#multiplicity</a> seems the most basic definition we have</p>",
        "id": 265817414,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640187142
    },
    {
        "content": "<p>I am just surprised there is nothing for natural numbers, but that is going to work</p>",
        "id": 265817434,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640187163
    },
    {
        "content": "<p>I outlined a possible solution in <a href=\"https://tqft.net/mathlib/data/nat/mul_ind\">file#data/nat/mul_ind</a>, but it requires careful API-writing...</p>",
        "id": 265818755,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640187863
    },
    {
        "content": "<p>I have an open PR <a href=\"https://github.com/leanprover-community/mathlib/pull/10540\">#10540</a> that defines a finsupp <code>factorization (n : ℕ) : ℕ →₀ ℕ</code> which maps each prime factor of <code>n</code> to its multiplicity in <code>n</code> (and any other number to zero).  I'm hoping this might be easier to work with, since we can then make use of the extensive finsupp API.</p>",
        "id": 265819569,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640188312
    },
    {
        "content": "<p>Indeed what I need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">totient_mul_prime_div</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">totient</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n.totient</span>\n</code></pre></div>",
        "id": 265819684,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640188377
    },
    {
        "content": "<p>This is not difficult using <code>multiplicity</code>, so I think I will just prove it by hand</p>",
        "id": 265819726,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640188396
    },
    {
        "content": "<p>I have a draft of a proof of the Euler product formula in <a href=\"https://github.com/leanprover-community/mathlib/pull/10558\">#10558</a> (although this draft PR is now out of sync with <a href=\"https://github.com/leanprover-community/mathlib/pull/10540\">#10540</a>)</p>",
        "id": 265820214,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640188639
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">totient_mul_prime_div</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">totient</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n.totient</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hzero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hfin</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">multiplicity.finite_nat_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">prime.ne_one</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_iff.2</span> <span class=\"n\">hzero</span><span class=\"o\">⟩),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hfin</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">zero_lt_iff.2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">multiplicity.is_greatest'</span> <span class=\"n\">hfin</span> <span class=\"o\">(</span><span class=\"n\">lt_one_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.pow_multiplicity_dvd</span> <span class=\"n\">hfin</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_succ'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hfin</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">multiplicity.eq_coe_iff.1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">nat.totient_mul</span>\n      <span class=\"o\">(</span><span class=\"n\">prime.coprime_pow_of_not_dvd</span> <span class=\"n\">hp</span> <span class=\"n\">this</span><span class=\"o\">),</span> <span class=\"n\">nat.totient_mul</span>\n      <span class=\"o\">(</span><span class=\"n\">prime.coprime_pow_of_not_dvd</span> <span class=\"n\">hp</span> <span class=\"n\">this</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">m.totient</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"n\">hpos</span><span class=\"o\">,</span> <span class=\"n\">totient_prime_pow_succ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">totient_prime_pow_succ</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"n\">hpos</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">m.totient</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">m.totient</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"n\">hpos</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works, but It probably deserves to be splitted.</p>",
        "id": 265827005,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640192335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Writing.20n.20as.20p.5Ek*m/near/265812729\">said</a>:</p>\n<blockquote>\n<p>Given <code>n : ℕ</code> and a prime <code>p</code>, what is the best way of writing <code>n = (p ^ k) * m</code> with <code>¬  (p ∣ m)</code>? I am sure the results is somewhere in the library, but I don't find it...</p>\n</blockquote>\n<p>Yes this was also something coming up in the totient file in the FLT stuff. I got busy before getting around to finding it, but it seems most of what we need is here.</p>",
        "id": 265828229,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1640192977
    },
    {
        "content": "<p>I am going to PR it in ten minutes</p>",
        "id": 265830015,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640193886
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10971\">#10971</a></p>",
        "id": 265831332,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640194602
    },
    {
        "content": "<p>I managed a proof, but it looks like yours is shorter anyway</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity.finite</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">multiplicity.finite_nat_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hp.ne_one</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.pow_multiplicity_dvd</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">dvd</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n      <span class=\"bp\">&lt;</span> <span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">multiplicity.dvd_iff_multiplicity_pos</span> <span class=\"n\">at</span> <span class=\"n\">dvd</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">enat.add_lt_add_iff_left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">multiplicity.ne_top_iff_finite.mpr</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hp.multiplicity_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">multiplicity.multiplicity_pow_self_of_prime</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">enat.coe_get</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n    <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">nat.prime_iff</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265838654,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1640198669
    }
]