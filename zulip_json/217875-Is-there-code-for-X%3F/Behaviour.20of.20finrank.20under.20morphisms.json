[
    {
        "content": "<p>Does mathlib have: the finrank of the map of a submodule by a linear map is less than or equal to the finrank of the original submodule?  Better, that for a linear equiv, it's an equality (as follows by pairing the inequalities in the two directions)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250256984,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629611445
    },
    {
        "content": "<p>We have this for plain ranks (i.e. without the finiteness assumption).</p>",
        "id": 250257107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629611660
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dim_map_le/src\">src#dim_map_le</a></p>",
        "id": 250257121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629611697
    },
    {
        "content": "<p>Ah -- and I suppose I need <code>finite_dimensional R p</code> or it's not true.</p>",
        "id": 250257192,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629611863
    },
    {
        "content": "<p>Trying to translate the <code>dim_map_le</code> lemma using <code>finite_dimensional.finrank_eq_dim</code> but it apparently requires <code>V</code> and <code>W</code> to be in the same universe ... any idea how to get around that?</p>",
        "id": 250257435,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629612230
    },
    {
        "content": "<p>Something <code>lift</code>?</p>",
        "id": 250257436,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629612236
    },
    {
        "content": "<p><code>V</code> and <code>W</code> don't have to be in the same universe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kd\">universe</span> <span class=\"kd\">variable</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cardinal.nat_cast_le</span><span class=\"o\">,</span> <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dim_map_le</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>EDIT: I'm stupid, I assumed them to be in the same universe, and then forgot that I did.</p>",
        "id": 250258438,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629613992
    },
    {
        "content": "<p>If the second example is already proven for <code>rank</code>, then this will translate it to <code>finrank</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))]</span> <span class=\"o\">:</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cardinal.nat_cast_inj</span><span class=\"o\">,</span> <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))],</span>\n  <span class=\"c1\">-- to prove: the result for rank</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250258484,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629614048
    },
    {
        "content": "<p>But yes, a lift will help...</p>",
        "id": 250258562,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629614184
    },
    {
        "content": "<p>I was hoping to deduce <code>finite_dimensional R (p.map f)</code> from <code>finite_dimensional R p</code>, rather than assuming it explicitly -- any idea how to do that?</p>",
        "id": 250258707,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629614431
    },
    {
        "content": "<p>Because from <code>dim_map_le</code> we get that its <code>dim</code> is less than or equal to a natural number.</p>",
        "id": 250258714,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629614465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Behaviour.20of.20finrank.20under.20morphisms/near/250258707\">said</a>:</p>\n<blockquote>\n<p>I was hoping to deduce <code>finite_dimensional R (p.map f)</code> from <code>finite_dimensional R p</code>, rather than assuming it explicitly -- any idea how to do that?</p>\n</blockquote>\n<p>I didn't look, but I hoped that would be a lemma somewhere. Otherwise, it should probably follow from <code>dim_map_le</code>.</p>",
        "id": 250258895,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629614816
    },
    {
        "content": "<p>If <code>V</code> and <code>W</code> are in the same universe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span><span class=\"o\">,</span> <span class=\"n\">is_noetherian.iff_dim_lt_omega</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">dim_map_le</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250259012,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629615053
    },
    {
        "content": "<p>Okay, I am working on the universe variable version of <code>dim_map_le</code></p>",
        "id": 250259017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629615076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> nice!</p>",
        "id": 250259136,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629615170
    },
    {
        "content": "<p>Is this your statement <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"kd\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_dim_map_le</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250259154,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629615229
    },
    {
        "content": "<p>yes, that's what I was aiming at</p>",
        "id": 250259192,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629615247
    },
    {
        "content": "<p>it will need a few other lemmas generalised first</p>",
        "id": 250259195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629615257
    },
    {
        "content": "<p>We have <code>cardinal.lift_sup_le_lift_sup'</code>, newly added exactly for this sort of problem.</p>",
        "id": 250259291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629615464
    },
    {
        "content": "<p>Once <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has the lemma above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">module</span>\n\n<span class=\"kd\">universe</span> <span class=\"kd\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_dim_map_le</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span><span class=\"o\">,</span> <span class=\"n\">is_noetherian.iff_dim_lt_omega</span> <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_lt.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_lt.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.lift_omega</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lift_dim_map_le</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cardinal.nat_cast_le.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_nat_cast.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">},</span>\n    <span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_nat_cast.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lift_dim_map_le</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250259521,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629615755
    },
    {
        "content": "<p>And here is the reduction of the second <code>example</code> into the corresponding lemma for <code>rank</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lift_dim_map_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))]</span> <span class=\"o\">:</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cardinal.nat_cast_inj.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_nat_cast.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">},</span>\n    <span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_nat_cast.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">finrank_eq_dim</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lift_dim_map_eq</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250259633,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629615873
    },
    {
        "content": "<p>I'm going to bed now. Good luck with generalizing <code>dim_map_le</code>!</p>",
        "id": 250259783,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629616130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, <code>lift_dim_map_le</code> is done. Do you want it as a separate PR, or should I just push it to whatever branch you're working on?</p>",
        "id": 250260291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629616933
    },
    {
        "content": "<p>It's on <a href=\"https://github.com/leanprover-community/mathlib/tree/lift_dim_map_le\">branch#lift_dim_map_le</a></p>",
        "id": 250260419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629617103
    },
    {
        "content": "<p>A separate PR from you would be great, thank you! (the branch I was working on when I noticed this gap is very preliminary)</p>",
        "id": 250260639,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629617492
    },
    {
        "content": "<p>Thank you both very much for wrangling these universes for me.</p>",
        "id": 250260686,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629617530
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8800\">#8800</a></p>",
        "id": 250260871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629617859
    },
    {
        "content": "<p>Universes are such a pain. :-) Happily I'd just recently fought them in this file, so remembered how to do it!</p>",
        "id": 250260912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629617884
    },
    {
        "content": "<p>Yes, they really are!!</p>",
        "id": 250260993,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629618027
    },
    {
        "content": "<p>I hope <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> will also PR the proof of the main lemma in the morning -- or Floris I can do it, whatever's easiest for you.</p>",
        "id": 250261059,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629618140
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8815\">#8815</a></p>",
        "id": 250296441,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629671501
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 250296646,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629671809
    }
]