[
    {
        "content": "<p>Does the mathlib already have a version of this and if not, should we add one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mod_pow_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_mod</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- example use case (first semester exam question)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">∣</span> <span class=\"mi\">7</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mod_pow_mod</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279543998,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650461810
    },
    {
        "content": "<p>It's tempting to state it in reverse as <code>nat.pow_mod</code> to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul_mod\">docs#nat.mul_mod</a></p>",
        "id": 279545179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650462390
    },
    {
        "content": "<p>I don't think we have it</p>",
        "id": 279545244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650462424
    },
    {
        "content": "<p>I agree it's probably more useful in reverse</p>",
        "id": 279546519,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650463036
    },
    {
        "content": "<p>The name <code>pow_mod</code> feels a little vague to me, but I guess it matches similar theorems pretty well</p>",
        "id": 279546746,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650463135
    },
    {
        "content": "<p>It should be <code>nat.pow_mod</code></p>",
        "id": 279546785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650463154
    },
    {
        "content": "<p>Note that this matches the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> guide, since the LHS of the reversed expression, <code>(a ^ b) % n</code>, is <code>mod</code> with <code>pow</code> as its left argument</p>",
        "id": 279546988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650463222
    },
    {
        "content": "<p>Want to PR it?</p>",
        "id": 279547022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650463235
    },
    {
        "content": "<p>Alright, I'll set up the PR</p>",
        "id": 279547084,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650463277
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13550\">https://github.com/leanprover-community/mathlib/pull/13550</a> (I hope I'm doing this right)</p>",
        "id": 279550550,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650464998
    },
    {
        "content": "<p>Unfortunately you're not :-) We only accept PRs from non-master branches of the project, rather than from forks, because of issues related to CI. <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> can github user <code>slerpyyy</code> have push access to non-master branches of mathlib? Aaron can you close the PR and make a new one once you can push to a branch?</p>",
        "id": 279552552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650465867
    },
    {
        "content": "<p>Here's the documentation on the procedure: <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> Thanks for making the PR!</p>",
        "id": 279552590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650465897
    },
    {
        "content": "<p>Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 279553083,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1650466112
    },
    {
        "content": "<p>Ah, sorry, I should have read the guide first</p>",
        "id": 279556025,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650467233
    },
    {
        "content": "<p>Give me a moment to clean up this mess and try again</p>",
        "id": 279556070,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650467256
    },
    {
        "content": "<p>Second attempt: <a href=\"https://github.com/leanprover-community/mathlib/pull/13551\">https://github.com/leanprover-community/mathlib/pull/13551</a></p>",
        "id": 279558298,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650468203
    },
    {
        "content": "<p>FYI: you can type <code>#13551</code> to get <a href=\"https://github.com/leanprover-community/mathlib/pull/13551\">#13551</a></p>",
        "id": 279558553,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650468310
    }
]