[
    {
        "content": "<p>Hello everyone. I have a subset of natural numbers, for which I can prove it is bounded and nonempty. How do I show that its Sup belongs to it? (And also, should I use Sup there or something else?)</p>",
        "id": 239615596,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1621526211
    },
    {
        "content": "<p>Or maybe I should ask, how do I best write \"the largest n such that this property holds\"?</p>",
        "id": 239622418,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1621528890
    },
    {
        "content": "<p>Your approach sounds correct, but I'm finding it surprisingly hard to prove</p>",
        "id": 239622612,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1621528973
    },
    {
        "content": "<p>Finite stuff in mathlib is a mess, we're sorry about it.</p>",
        "id": 239622721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621529023
    },
    {
        "content": "<p><code>nat.find</code> gives you the smallest <code>nat</code> with some property.</p>",
        "id": 239623296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621529272
    },
    {
        "content": "<p>In your case, you are looking for the smallest <code>n</code> such that for all <code>m &gt; n</code>, <code>m \\notin S</code>.</p>",
        "id": 239623413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621529312
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.has_Sup\">docs#nat.has_Sup</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.Sup_def\">docs#nat.Sup_def</a>. It might be missing that the Sup is an element of the set.</p>",
        "id": 239623470,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621529347
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max\">docs#finset.max</a> combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max_eq_sup_with_bot\">docs#finset.max_eq_sup_with_bot</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup_eq_supr\">docs#finset.sup_eq_supr</a> help?</p>",
        "id": 239625822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621530229
    },
    {
        "content": "<p>using <code>rw nat.Sup_def at</code> works, but gives me a <code>nat.find ?m_1</code>. I used to deal with such strings by using <code>erw nat.find_eq_iff at</code>, but this time it does not work. So actually, how does one convert  <code>nat.find ?m_1</code> to something useful?</p>",
        "id": 239629441,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1621531686
    },
    {
        "content": "<p>I could try to rewrite this using finsets, thank you.</p>",
        "id": 239629542,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1621531723
    },
    {
        "content": "<p>I managed to do it without finsets in two steps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_in</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_in'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_in</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n.succ</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">ih</span> <span class=\"n\">s</span> <span class=\"n\">h'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.lt_succ_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ne_of_mem_of_not_mem</span> <span class=\"n\">ha</span> <span class=\"n\">hn</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_in'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mmem</span><span class=\"o\">,</span> <span class=\"n\">mbd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sup_in</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mmem</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.Sup_def</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.find_min</span> <span class=\"n\">h</span> <span class=\"n\">H</span> <span class=\"n\">mbd</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.find_spec</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">mmem</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 239630513,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1621532100
    },
    {
        "content": "<p>Now I'm waiting for one of the experts to solve it in two lines :)</p>",
        "id": 239630582,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1621532130
    },
    {
        "content": "<p>not quite two lines, but a little shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sup_mem</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Sup_def</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.find</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">nat.find_spec</span> <span class=\"n\">h2</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.find_min</span> <span class=\"n\">h2</span> <span class=\"o\">((</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">h.ge</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">lt_succ_iff</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">nat.find_spec</span> <span class=\"n\">h2</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hk</span> <span class=\"o\">})</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 239633845,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621533502
    },
    {
        "content": "<p>I think all those proofs are not in the relevant generality. I propose:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.nonempty.Sup_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finite.induction_on</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">hat</span> <span class=\"n\">t_fin</span> <span class=\"n\">ih</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">t.eq_empty_or_nonempty</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">cSup_insert</span> <span class=\"n\">t_fin.bdd_above</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sup_eq_right.mpr</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"n\">ht</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sup_eq_left</span><span class=\"o\">,</span> <span class=\"n\">mem_insert_iff</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1.Sup_mem</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 239639947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621536087
    },
    {
        "content": "<p>The sorry asks to prove that a set of natural numbers which is bounded above is finite. I don't know whether we already know that, but we certainly want to prove it anyway</p>",
        "id": 239640055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621536135
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib/issues/7682\">#7682</a></p>",
        "id": 239649762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621540516
    },
    {
        "content": "<p>Is the statement also true for complete linear orders, without the finiteness assumptions?</p>",
        "id": 239657087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621543741
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 239659456,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1621544859
    },
    {
        "content": "<p>Sup of open interval (0,1) considered as a subset of complete lattice closed interval [0,1] isn't in the set</p>",
        "id": 239667111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621548775
    },
    {
        "content": "<p>It is true for (conditionally) complete discrete linear orders without finiteness, I think</p>",
        "id": 239668480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621549621
    },
    {
        "content": "<p>what you need here is that bounded sets are compact</p>",
        "id": 239668501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621549634
    },
    {
        "content": "<p>What's an example of a complete discrete linear order that isn't itself finite?</p>",
        "id": 239699416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621575785
    }
]