[
    {
        "content": "<p>Is there code for a vector range analogous to the list.range function? If not, should this be added to vector.lean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Vector form of range function -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">vector_range</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">list.range</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 218632479,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1606949904
    },
    {
        "content": "<p>It doesn't currently. I've played around with it for quite some bit. What do you plan to do with it? I've found that working in lists usually ended up being easier.</p>",
        "id": 218633130,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606950320
    },
    {
        "content": "<p>This function was useful for me when I wanted to represent a vector of powers of a polynomial variable, which I do using the expression<br>\n<code>def powers_of_τ : vector (mv_polynomial vars F) m := vector.map (λ i, X_poly^i) (vector_range m)</code><br>\nIn this case I want to use vector rather than list because later I want to take the dot product of this vector with another vector of polynomials, which I do using <code>vector.map₂</code> with <code>*</code> and then calling <code>to_list</code> and <code>sum</code>. I suppose I could convert everything to lists and use <code>list.map₂</code>, but this seems less clean and I think I would later need to prove that these two lists are the same length. This actually raises another point: Is there code for taking the dot product of vectors of ring elements?</p>",
        "id": 218635248,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1606951805
    },
    {
        "content": "<p>Might be easier to do this in <code>fin n \\to R</code></p>",
        "id": 218635325,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606951881
    },
    {
        "content": "<p>Because if you're going to reason about sum, it's going to be some unwieldy thing about <code>foldr</code> or something like it, and you'll be juggling lemmas about associativity and identity elements. In <code>fin n \\to R</code>, you can use all the existing <code>big_operators</code> lemmas about fintypes and fin.</p>",
        "id": 218635460,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606951962
    },
    {
        "content": "<p>That sounds great. What are are these <code>big_operators</code> you are talking about? <code>big_operators</code> does not come up in a search of the lean documentation.</p>",
        "id": 218672994,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1606989750
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html</a></p>",
        "id": 218673212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606989891
    }
]