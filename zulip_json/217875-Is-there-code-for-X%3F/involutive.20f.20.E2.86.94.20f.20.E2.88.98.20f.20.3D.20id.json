[
    {
        "content": "<p>I have a goal of the form <code>map (reverse ∘ reverse) l = l</code> for some nested list <code>l</code>, and would like it to simplify. Unfortunately, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.reverse_reverse\">docs#list.reverse_reverse</a> doesn't apply here, as there is no direct application.</p>\n<p>I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">involutive_comp_self</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.involutive</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">]}</span>\n</code></pre></div>\n\n<p>and then use <code>involutive_comp_self reverse_reverse</code> but this isn't suitable as a <code>simp</code> lemma due to the <code>h</code>. Can I make <code>h</code> be inferred by <code>simp</code> too?</p>\n<p>Should <code>involutive_comp_self </code> be in mathlib?</p>",
        "id": 210977278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600852763
    },
    {
        "content": "<p>(I have no comment about mathlib, but you can simplify the proof to the term <code>funext h</code>.)</p>",
        "id": 210977770,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600853034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I would call the lemma <code>involutive.comp_self</code> (with a <code>.</code>).<br>\nDoes <code>reverse_involutive</code> exist? If not, it should.</p>",
        "id": 210977916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600853124
    },
    {
        "content": "<p>You would then be able to use <code>reverse_involutive.comp_self</code></p>",
        "id": 210977940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600853143
    },
    {
        "content": "<p>Does it make sense to change the definition of <code>reverse_reverse</code> to be <code>involutive reverse</code> instead of <code>reverse reverse l = l</code>?</p>",
        "id": 210978037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600853180
    },
    {
        "content": "<p>No, I think we want both names</p>",
        "id": 210978070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600853203
    },
    {
        "content": "<p>Can we make <code>involutive.comp_self</code> be <code>simp</code> somehow, where the proof of involutiveness is found automatically?</p>",
        "id": 210978115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600853237
    },
    {
        "content": "<p>Yes, you can make it simp, but you will need to feed <code>reverse_involutive</code> into the simp set, for it to work.</p>",
        "id": 210978206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600853292
    },
    {
        "content": "<p>I'm not sure if <code>reverse_involutive</code> should be <code>@[simp]</code> by default.</p>",
        "id": 210978241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600853315
    },
    {
        "content": "<p>If we did that, presumably <code>reverse_reverse</code> could be removed from the simp set?</p>",
        "id": 210978249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600853320
    },
    {
        "content": "<p>Added as part of <a href=\"https://github.com/leanprover-community/mathlib/issues/4222\">#4222</a></p>",
        "id": 210984946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600857494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/involutive.20f.20.E2.86.94.20f.20.E2.88.98.20f.20.3D.20id/near/210978249\">said</a>:</p>\n<blockquote>\n<p>If we did that, presumably <code>reverse_reverse</code> could be removed from the simp set?</p>\n</blockquote>\n<p>I'm skeptical--I don't think there is any way <code>simp</code> could then look at <code>reverse (reverse l)</code> and think, \"gee, I wish I knew <code>reverse</code> was involutive, so I could apply the definition of <code>involutive</code>\"--the reason being that a lemma <code>(h : involutive f) : f (f x) = x</code> isn't a valid form for a <code>simp</code> lemma.<br>\nSimilarly, I think changing the statement of <code>reverse_reverse</code> to be <code>involutive reverse</code> will prevent it from being used conveniently with both <code>simp</code> and <code>rw</code>.</p>",
        "id": 210996727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600865420
    },
    {
        "content": "<p>I think the canonical solution is to have two lemmas here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">reverse_reverse</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x.reverse.reverse</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">reverse_comp_reverse</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"bp\">∘</span> <span class=\"n\">reverse</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n\n<p>Similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_pow\">docs#deriv_pow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_pow'\">docs#deriv_pow'</a>, etc.  (<code>∘</code> is a bit of a pain in simp lemmas sometimes, but it should be fine here.  We should really make it semireducible one day.)</p>",
        "id": 211001560,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600867496
    },
    {
        "content": "<p>Presumably we still want a third lemma, <code>involutive reverse</code>?</p>",
        "id": 211002271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600867795
    },
    {
        "content": "<p>Sure, seems reasonable enough.</p>",
        "id": 211003400,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600868229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/involutive.20f.20.E2.86.94.20f.20.E2.88.98.20f.20.3D.20id/near/210978241\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if <code>reverse_involutive</code> should be <code>@[simp]</code> by default.</p>\n</blockquote>\n<p>IMHO it should definitely be simp, there's no real downside.</p>",
        "id": 211003569,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600868293
    },
    {
        "content": "<p>So now every single involutive <code>def</code> needs two obvious lemmas on top of the original lemma (+ the standard <code>func_inj</code> one). Is there any way to avoid all this repetition?</p>",
        "id": 211003698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600868357
    },
    {
        "content": "<p>Making <code>involutive</code> a class might solve that problem. Would that be sane?</p>",
        "id": 211003847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600868422
    },
    {
        "content": "<p>Well, we tried that with semi-bundled homs, but simp didn't fire in many cases.</p>",
        "id": 211004453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600868646
    },
    {
        "content": "<p>Hence we started the bundled hom story. But I don't think we want bundled involutions.</p>",
        "id": 211004482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600868662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/involutive.20f.20.E2.86.94.20f.20.E2.88.98.20f.20.3D.20id/near/211003698\">said</a>:</p>\n<blockquote>\n<p>So now every single involutive <code>def</code> needs two obvious lemmas on top of the original lemma (+ the standard <code>func_inj</code> one). Is there any way to avoid all this repetition?</p>\n</blockquote>\n<p>If you make both <code>involutive.comp_self</code> and <code>involutive_reverse</code> simp, then you don't need <code>reverse_comp_reverse</code>.  But yeah, it's still two lemmas.</p>",
        "id": 211006786,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600869569
    },
    {
        "content": "<p>You're right, I overcounter. For <code>reverse</code>, in my PR <a href=\"https://github.com/leanprover-community/mathlib/issues/4222\">#4222</a> and master we have</p>\n<ul>\n<li><code>reverse_reverse</code></li>\n<li><code>reverse_involutive := reverse_reverse</code> (new in my PR)</li>\n<li><code>reverse_injective := reverse_involutive.injective</code></li>\n<li><code>reverse_inj : = reverse_injective.eq_iff</code></li>\n</ul>\n<p>Perhaps we can remove some of these</p>",
        "id": 211007316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600869762
    },
    {
        "content": "<p>In your original goal, I think you should also just be able to add <code>function.comp</code> to the list of simp lemmas, and that should enable <code>reverse_reverse</code> to fire</p>",
        "id": 211007790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600869937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/involutive.20f.20.E2.86.94.20f.20.E2.88.98.20f.20.3D.20id/near/211007790\">said</a>:</p>\n<blockquote>\n<p>In your original goal, I think you should also just be able to add <code>function.comp</code> to the list of simp lemmas, and that should enable <code>reverse_reverse</code> to fire</p>\n</blockquote>\n<p>That doesn't work, the goal reduces to <code>l = map (λ (x : list α), x) l</code>, which doesn't match the <code>map_id</code> simp lemma</p>",
        "id": 211009632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600870621
    },
    {
        "content": "<p>So we need <code>map_id' : xs.map (λ x, x) = xs</code>!</p>",
        "id": 211015703,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600873240
    },
    {
        "content": "<p>And the same for every other lemma that currently involves <code>id</code>?</p>",
        "id": 211021343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600875623
    },
    {
        "content": "<p>We already do, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_id\">docs#deriv_id</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_id'\">docs#deriv_id'</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_id''\">docs#deriv_id''</a>, etc.</p>",
        "id": 211022779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600876235
    },
    {
        "content": "<p>Is a simp lemma from <code>id</code> to <code>(λ x, x)</code> sensible to eliminate the duplication?</p>",
        "id": 211023174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600876429
    },
    {
        "content": "<p>(Also, does your suggestion go against or complement the new lemma in my PR?)</p>",
        "id": 211023268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600876454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/involutive.20f.20.E2.86.94.20f.20.E2.88.98.20f.20.3D.20id/near/211022779\">said</a>:</p>\n<blockquote>\n<p>We already do, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_id\">docs#deriv_id</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_id'\">docs#deriv_id'</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_id''\">docs#deriv_id''</a>, etc.</p>\n</blockquote>\n<p>I feel like this is a bit of a symptom. It would be good if we could find a way to avoid these repetitive statements.</p>",
        "id": 211031722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600880363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/involutive.20f.20.E2.86.94.20f.20.E2.88.98.20f.20.3D.20id/near/211006786\">said</a>:</p>\n<blockquote>\n<p>If you make ...<code>involutive_reverse</code> simp, then ...</p>\n</blockquote>\n<p>It seems that while marking <code>involutive reverse</code> with <code>simp</code> is fine, marking <code>injective reverse</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simp_var_head` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> LEFT-HAND SIDE HAS VARIABLE AS HEAD SYMBOL.</span>\n<span class=\"cm\">Some simp lemmas have a variable as head symbol of the left-hand side: -/</span>\n<span class=\"c1\">-- data/list/basic.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.reverse_injective</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side has variable as head symbol: a₁ -/</span>\n</code></pre></div>\n\n<p>I don't understand this error <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, but I assume I should just ignore your request in <a href=\"https://github.com/leanprover-community/mathlib/pull/4222#discussion_r494285415\">https://github.com/leanprover-community/mathlib/pull/4222#discussion_r494285415</a> to make <code>injective reverse</code> <code>simp</code>?</p>",
        "id": 211129740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600953714
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4237\">#4237</a></p>",
        "id": 211136470,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600956655
    }
]