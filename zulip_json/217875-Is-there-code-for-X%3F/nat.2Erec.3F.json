[
    {
        "content": "<p>I've reached the point in a proof where my goal contains <code>nat.rec</code>. I've looked on the mathlib documentation and can't find any theorems or equations that reference it. I've searched for it's definition and it just takes me back to <code>nat</code>. I've tried to <code>unfold</code> it, also to no avail. <code>hint</code> and <code>suggest</code> don't show relevant theorems. What does <code>nat.rec</code> mean and what options do I have to prove statements using it? I understand it has to do with recursive applications of a function, which may be very useful to my proof.</p>",
        "id": 215212290,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604178871
    },
    {
        "content": "<p><code>nat.rec</code> is the primitive recursor for nat</p>",
        "id": 215212292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178892
    },
    {
        "content": "<p>it has no definition as it is part of the axiomatization of nat itself</p>",
        "id": 215212296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178905
    },
    {
        "content": "<p>it's basically one of peano's axioms</p>",
        "id": 215212299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178911
    },
    {
        "content": "<p>To prove statements about it, you should probably do induction on the last argument (the <code>nat</code>), as <code>nat.rec z s (succ n) = s n (nat.rec z s n)</code> and <code>nat.rec z s 0 = z</code> are definitionally true</p>",
        "id": 215212346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178969
    },
    {
        "content": "<p><em>However</em>, it is overwhelmingly more likely that you have unfolded far too much and should step back a couple steps to get unstuck</p>",
        "id": 215212351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604179005
    },
    {
        "content": "<p>To properly <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> your problem I would need to see the context in which your nat.rec goal arose. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 215212415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604179136
    },
    {
        "content": "<p>Thanks for your advice. What tactic could use these definitional truths? <code>change</code>?</p>",
        "id": 215212422,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604179145
    },
    {
        "content": "<p>you can use change, as well as <code>exact</code> or <code>apply</code> or just ignoring the difference and using nothing</p>",
        "id": 215212433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604179188
    },
    {
        "content": "<p>lean's unification works modulo defeq, so if two things are defeq they are essentially interchangeable without any explicit tactic application</p>",
        "id": 215212494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604179227
    },
    {
        "content": "<p>The issue with using <code>change</code> is that it's actually somewhat annoying to write a <code>nat.rec</code> term explicitly because there is an implicit argument, the \"motive\" <code>C</code>, that often can't be inferred from the context of use</p>",
        "id": 215212510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604179314
    },
    {
        "content": "<p>one more reason you should do less unfolding and go back to the recursive function you started with</p>",
        "id": 215212556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604179346
    }
]