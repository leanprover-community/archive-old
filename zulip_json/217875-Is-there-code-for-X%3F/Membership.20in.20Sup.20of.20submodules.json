[
    {
        "content": "<p>Do we have something along the following lines?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 225640438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612839746
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.exists_finset_of_mem_supr\">docs#submodule.exists_finset_of_mem_supr</a> ?</p>",
        "id": 225640876,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612840233
    },
    {
        "content": "<p>Thanks! I don't know how I missed that!</p>",
        "id": 225640989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612840381
    },
    {
        "content": "<p>Take comfort in the fact that your lemma statement is virtually identical to the mathlib gold standard :)</p>",
        "id": 225641009,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612840428
    },
    {
        "content": "<p>The proof in mathlib seems more complicated than necessary.</p>",
        "id": 225641064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612840472
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">directed</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">ι'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">supr_le_supr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">supr_le_supr</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">supr_le_iff</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_eq_union</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_union</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">hy</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">submodule.mem_supr_of_mem</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_union_left</span> <span class=\"n\">_</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">hv</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">refine</span> <span class=\"n\">submodule.mem_supr_of_mem</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_union_right</span> <span class=\"n\">_</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">hv</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">submodule.mem_supr_of_directed</span> <span class=\"n\">ι'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">supr</span> <span class=\"n\">ι'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">cond</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">supr_le_supr2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨{</span><span class=\"n\">i</span><span class=\"o\">},</span><span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ι'</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225642906,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612842420
    },
    {
        "content": "<p>Maybe that's not much better :)</p>",
        "id": 225642924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612842448
    }
]