[
    {
        "content": "<p>I am in a <code>fintype α</code> context, and want to do an inductive proof where <code>set α</code> gets smaller, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">of_fintype</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_atomic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_atomic.mk</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊥</span> <span class=\"o\">},</span>\n  <span class=\"bp\">…</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it seems that even in <code>fintype α</code>, <code>fintype.card s</code> causes an unsolved typeclass instance for <code>fintype (↑s)</code>.<br>\nWhat is the right way to get the cardinality of a set in a fintype?<br>\nOr should I use <code>finset</code>? Can I use the nice set syntax with <code>finset</code>?</p>",
        "id": 270817392,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644054678
    },
    {
        "content": "<p>I guess you need <code>open_locale classical</code> above your declaration.</p>",
        "id": 270817484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644054806
    },
    {
        "content": "<p>Or maybe call <code>classical</code> at the start of your proof</p>",
        "id": 270817488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644054817
    },
    {
        "content": "<p>It might get nicer with <code>finset</code>, indeed.</p>",
        "id": 270817529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644054842
    },
    {
        "content": "<p>Is there syntax or should I use <code>finset.univ.filter (λ …)</code>?</p>",
        "id": 270817543,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644054866
    },
    {
        "content": "<p>Generally I find that when doing inductive proofs on the size of a set, the smoothest lean translation of that proof is not to talk about the size of the set at all but just to use an induction principle like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.induction_on\">docs#finset.induction_on</a></p>",
        "id": 270817553,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644054891
    },
    {
        "content": "<p>I think you have to use filter unfortunately</p>",
        "id": 270817562,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644054903
    },
    {
        "content": "<p>I used <code>induction_on</code> elsewhere, but I am not sure if it works well here especially since I need to do strong induction on the size.</p>",
        "id": 270817574,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644054932
    },
    {
        "content": "<p>I'd guess its still better to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.strong_induction_on\">docs#finset.strong_induction_on</a> if that works in your use case</p>",
        "id": 270817710,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644055090
    },
    {
        "content": "<p>oh, there is  a strong variant there too. silly me :-)</p>",
        "id": 270817727,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644055145
    },
    {
        "content": "<p>Or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.strong_downward_induction_on\">docs#finset.strong_downward_induction_on</a></p>",
        "id": 270817730,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644055155
    },
    {
        "content": "<p>Well these variants are in a different file unfortunately, so maybe not the easiest to discover from the docs</p>",
        "id": 270817744,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644055195
    },
    {
        "content": "<p>Wait, I don't think you need induction at all.</p>",
        "id": 270818235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644055850
    },
    {
        "content": "<p>For the <code>fintype α → is_atomic</code> proof? I wouldn’t be surprised, but I’m curious to hear about it :-)</p>",
        "id": 270818312,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644055981
    },
    {
        "content": "<p>Leave 15min and hopefully I will have cooked up the proof <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 270818327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644056007
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 270818397,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644056069
    },
    {
        "content": "<p>(It’s a lesson I learned in life: A good way to get stuff done by others is to threaten to do it worse…)</p>",
        "id": 270818410,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644056094
    },
    {
        "content": "<p>Absolutely!</p>",
        "id": 270818425,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644056117
    },
    {
        "content": "<p>I have one advantage over you here. It's that I know (actually, authored) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite_order\">docs#locally_finite_order</a>.</p>",
        "id": 270818436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644056146
    },
    {
        "content": "<p>We need a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max\">docs#finset.max</a> which works for nonlinear orders.</p>",
        "id": 270819160,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644057296
    },
    {
        "content": "<p>Here's a rough draft. Notice how I push back the need for induction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.locally_finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.atoms</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.minimal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_minimals_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">minimals</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.minimals_nonempty</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">minimals</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">↔</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_Iic_self</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_finite_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Iic</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">mem_Iic.2</span> <span class=\"n\">le_rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype.to_is_atomic</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_atomic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or_iff_not_imp_left.2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.to_locally_finite_order</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Iic</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set.minimals_nonempty.2</span>\n    <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mem_erase.2</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mem_Iic_self</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_minimals_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_erase</span><span class=\"o\">,</span> <span class=\"n\">mem_Iic</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hb.1.1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">hb.1.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hcb.ne'</span> <span class=\"o\">(</span><span class=\"n\">hb.2</span> <span class=\"o\">⟨</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hcb.le.trans</span> <span class=\"n\">hb.1.2</span><span class=\"o\">⟩</span> <span class=\"n\">hcb.le</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 270820377,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644059042
    },
    {
        "content": "<p>The end manipulation is a bit ugly because <code>is_atomic</code> hasn't been adapted to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_min\">docs#is_min</a> yet. I mean to do this refactor and you thinking this is too ugly might be enough to start me.</p>",
        "id": 270820397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644059098
    },
    {
        "content": "<p>Feel free to PR all that stuff or to tell me to.</p>",
        "id": 270820549,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644059336
    },
    {
        "content": "<p>Thanks! I leave the PRing to you if you don't mind.</p>",
        "id": 270821491,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644060607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , this hasn’t made it towards <code>master</code> yet, has it?</p>",
        "id": 271098627,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644311263
    },
    {
        "content": "<p>No, sorry! I'm really running low on time right now. The ITP paper deadline is today.</p>",
        "id": 271102059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644313015
    },
    {
        "content": "<p>Ok, paper deadline trumps impatient people on zulip. Maybe I can start a draft PR with the above code to take some load off you, but don't worry about it today then :-)</p>",
        "id": 271105421,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644314888
    },
    {
        "content": "<p>Hmm, trying to fill in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finite.minimals_nonempty</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">minimals</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">↔</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but I wonder if it’s true. If the <code>preorder</code> isn't an order, and you let <code>s</code> be two mutually related but unequal elements, then <code>minimals (≤) s</code> is empty. </p>\n<p>But even with a <code>preorder</code> constraint my current attempt at proving this lemma failed; must have taking some wrong corner somewhere. Maybe tomorrow.</p>",
        "id": 271112688,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644319238
    },
    {
        "content": "<p>I would be inclined to say that the definition of <code>minimals</code> is wrong--both elements should be minimal</p>",
        "id": 271113396,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644319718
    },
    {
        "content": "<p>Yeah, I think the definition should be <code>{a ∈ s | ∀ ⦃b⦄, b ∈ s → r b a → r a b}</code> if you're working with a preorder.</p>",
        "id": 271115562,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644320915
    },
    {
        "content": "<p>Yeah, I did that with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_min\">docs#is_min</a> and I forgot to copy over the idea to <code>minimals</code></p>",
        "id": 271116132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644321224
    },
    {
        "content": "<p>I found this lemma in <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.finite.exists_maximal_wrt\">set</a> which seems to do all the heavy lifting needed here already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">set.finite.exists_maximal_wrt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and with that I can provide this instance directly, no induction needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype.to_is_atomic</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_coatomic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_coatomic.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">or_iff_not_imp_left.2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hmax</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">set.finite.exists_maximal_wrt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">set.finite.of_fintype</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hc.2</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hcy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">hc.1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hyt</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hmax</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">le_trans</span> <span class=\"n\">hc.1</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hcy</span><span class=\"o\">),</span> <span class=\"n\">hyt</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hcy</span><span class=\"o\">),</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">lt_self_iff_false</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hcy</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I’ll PR this tomorrow if this is an ok approach</p>",
        "id": 271196051,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644356962
    },
    {
        "content": "<p>Sounds great!</p>",
        "id": 271196512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644357206
    },
    {
        "content": "<p><code>le_refl _ = le_rfl</code></p>",
        "id": 271196552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644357234
    },
    {
        "content": "<p>If this is interactive golf, then also <code>le_of_lt hcy = hcy.le</code>!</p>",
        "id": 271196989,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644357425
    },
    {
        "content": "<p>Also <code>le_trans h ... = h.trans ...</code></p>",
        "id": 271197147,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644357510
    },
    {
        "content": "<p>and <code>(λ x, x) = id</code></p>",
        "id": 271197298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644357601
    }
]