[
    {
        "content": "<p>Imagine I have <code>i j : fin 3</code>  and I want to case on whether <code>j = i</code>, <code>j = i + 1</code>, <code>j = i + 2</code>. Could <code>fin_cases</code> handle that?</p>",
        "id": 259888495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635785370
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Do you want anything beyond this?</p>",
        "id": 259888750,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635785472
    },
    {
        "content": "<p>Oooh, very nice.</p>",
        "id": 259888863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635785523
    },
    {
        "content": "<p>I don't know if this would scale to <code>i j : fin 37</code>.</p>",
        "id": 259888986,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635785593
    },
    {
        "content": "<p>Can't you case on <code>j - i</code>?</p>",
        "id": 259889096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635785644
    },
    {
        "content": "<p>This sounds like <code>fin_cases</code> could go faster on those things.</p>",
        "id": 259889405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635785726
    },
    {
        "content": "<p>In my case, casing on <code>j = i</code> isn't enough, no.</p>",
        "id": 259889418,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635785741
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Is there a quick way to finish?</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259889779,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635785828
    },
    {
        "content": "<p>Exactly what I'm doing is having one <code>i : fin 3</code>, and then I need the other two elements <code>j k : fin 3</code> to build a function <code>fin 3 → ℕ</code>which then is equal to some other function by extensionality and by exhaustion of <code>fin 3</code>.</p>",
        "id": 259889921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635785885
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- there's probably a nicer way to do this</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_sub_cancel'_right</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_value</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_right_eq_self</span><span class=\"o\">],</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- :(</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>norm_num</code> doesn't know <code>1 + 2 = 0</code></p>",
        "id": 259891288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635786409
    },
    {
        "content": "<p>In fact, it seems to be totally stuck on <code>fin</code> in general</p>",
        "id": 259891394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635786469
    },
    {
        "content": "<p><code>import tactic.norm_fin</code>?</p>",
        "id": 259892323,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635786881
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span> <span class=\"n\">tactic.fin_cases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- there's probably a nicer way to do this</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_sub_cancel'_right</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_value</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_right_eq_self</span><span class=\"o\">],</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is done.</p>",
        "id": 259892364,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635786906
    },
    {
        "content": "<p>Here's one possible nicer spelling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">forall_add</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">dx</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">dx</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">equiv.add_left</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">surjective.forall</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">forall_add</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_right_eq_self</span><span class=\"o\">],</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259895655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635788549
    },
    {
        "content": "<p>I didn't know about <code>tactic.norm_fin</code>!</p>",
        "id": 259896783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635789198
    },
    {
        "content": "<p>It's pretty unreliable, however:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_fin</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_fin</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_fin</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_fin</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_fin</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 259897074,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635789351
    },
    {
        "content": "<p>Yes, that makes sense because <code>1, 4</code> are all normalized to <code>1</code>, and we know that <code>+ 1</code> is not <code>id</code>. <code>3</code> is normalized to <code>0</code>, and we know <code>+ 0</code> is <code>id</code>. But not the case for things that don't normalize to 1.</p>",
        "id": 259903130,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635792106
    },
    {
        "content": "<p>It'd be nice if <code>norm_fin</code> discharged something like <code>¬3 = 0</code> when both numerals are <code>fin 37</code>.</p>",
        "id": 259903256,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635792170
    },
    {
        "content": "<p>Otherwise, you can rely on <code>fin_cases i; norm_fin</code></p>",
        "id": 259903264,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635792179
    }
]