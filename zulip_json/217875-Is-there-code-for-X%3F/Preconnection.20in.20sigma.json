[
    {
        "content": "<p>For <code>X : α → Type*</code>, how does one get to the fact that the connected components of <code>sigma X</code> are each in one of the <code>X a</code>?</p>",
        "id": 258682522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634893183
    },
    {
        "content": "<p>I'm assuming that <code>\\alpha</code> is discrete, and <code>X a</code> carries a topology for each <code>a</code>?</p>",
        "id": 258687119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634895669
    },
    {
        "content": "<p>Yup, I'm trying to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.connected</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sigma.is_connected_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_connected</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"n\">is_connected</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">sigma.mk</span> <span class=\"n\">_</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs.nonempty</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sigma.mk</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ht.image</span> <span class=\"n\">_</span> <span class=\"n\">continuous_sigma_mk.continuous_on</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Am I missing <code>discrete α</code>?</p>",
        "id": 258687353,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634895800
    },
    {
        "content": "<p>No, I guess you don't need it.</p>",
        "id": 258687375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634895814
    },
    {
        "content": "<p>I just wanted to be sure that you weren't doing something weird with a topology on <code>\\alpha</code></p>",
        "id": 258687404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634895838
    },
    {
        "content": "<p>Ah yeah, no</p>",
        "id": 258687467,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634895852
    },
    {
        "content": "<p>You need to know that <code>sigma.mk _ '' set.univ</code> is open.</p>",
        "id": 258687638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634895944
    },
    {
        "content": "<p>If <code>s</code> is connected and <code>t</code> is clopen, then <code>s</code> is contained in <code>t</code> or disjoint from <code>t</code>.</p>",
        "id": 258687798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634896022
    },
    {
        "content": "<p>Some variant of that observation should go into mathlib.</p>",
        "id": 258687819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634896043
    },
    {
        "content": "<p>Hmm... &gt;We don't seem to have that yet.</p>",
        "id": 258687870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634896078
    },
    {
        "content": "<p>Also, am I right in thinking the preimage of a preconnected set under a continuous embedding is preconnected?</p>",
        "id": 258687958,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634896108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> No, that doesn't work. You can embed a \"half-moon\" shape into the plane, and pull-back another \"half-moon\" shape that intersects the other one only at the two tips.</p>",
        "id": 258689422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634896939
    },
    {
        "content": "<p>I can make it more precise if that counterexample is too vague.</p>",
        "id": 258689443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634896953
    },
    {
        "content": "<p>Alternative: pull-back the area below the graph of <code>sin</code> under the embedding of the upper half-plane.</p>",
        "id": 258689517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634896995
    },
    {
        "content": "<p>Sad... So I need to add as a condition that the set lies entirely in the range of the embedding.</p>",
        "id": 258690706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634897675
    },
    {
        "content": "<p>Where?</p>",
        "id": 258690762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634897708
    },
    {
        "content": "<p>For the preimage to be preconnected</p>",
        "id": 258691508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634898111
    },
    {
        "content": "<p>But that lemma is not related to your OP right?</p>",
        "id": 258691986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634898366
    },
    {
        "content": "<p>Oh, maybe it is for the version that you posted in code, for your construction of <code>t</code></p>",
        "id": 258692122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634898472
    },
    {
        "content": "<p>If you only want to know that <code>s</code> is contained in some <code>X a</code>, that's \"easier\"</p>",
        "id": 258692199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634898500
    },
    {
        "content": "<p>Oh?</p>",
        "id": 258693053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634898995
    },
    {
        "content": "<p>If you have the lemma that I mentioned before, you only need to prove that <code>sigma.mk a '' set.univ</code> is clopen. But you'll need to do that anyway.</p>",
        "id": 258693643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634899367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Preconnection.20in.20sigma/near/258687638\">said</a>:</p>\n<blockquote>\n<p>You need to know that <code>sigma.mk _ '' set.univ</code> is open.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/open_embedding_sigma_mk\">docs#open_embedding_sigma_mk</a></p>",
        "id": 258705641,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634906498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Preconnection.20in.20sigma/near/258687798\">said</a>:</p>\n<blockquote>\n<p>If <code>s</code> is connected and <code>t</code> is clopen, then <code>s</code> is contained in <code>t</code> or disjoint from <code>t</code>.</p>\n</blockquote>\n<p>We don't have that lemma, right?</p>",
        "id": 258714536,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634910750
    },
    {
        "content": "<p>Also, how does that help me with <code>is_preconnected (sigma.mk a ⁻¹' s)</code>? I need to pullback preconnection at point or another, right?</p>",
        "id": 258714818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634910888
    },
    {
        "content": "<p>I pushed, feel free to explain me in further details/finish off yourself.</p>",
        "id": 258719031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634912755
    }
]