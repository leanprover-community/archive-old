[
    {
        "content": "<p>I might just be blind, but I can't seem to find an existing theorem that proves that a subset of a finset is itself a finset. (I'm also having trouble proving it myself in Lean, so suggestions in that direction would also be valuable.)</p>",
        "id": 215175631,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604122341
    },
    {
        "content": "<p><code>finset.has_subset</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/d5650a7/src/data/finset/basic.lean#L98\">is defined</a> as a relation between two <code>finset</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">⊆</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That is, you can't even state that <code>s</code> is a subset of <code>t</code> unless <code>s</code> and <code>t</code> are both <code>finset</code>s of the same type.</p>\n<p>Can you say a little more about what you're trying to prove?</p>",
        "id": 215176252,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604123598
    },
    {
        "content": "<p>\"Let  s, t be sets s.t. s \\subseteq t. Then <code>fintype s \\to fintype t</code>.\"</p>",
        "id": 215176351,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604123774
    },
    {
        "content": "<p>... Also, how do you type fancy characters in Zulip?</p>",
        "id": 215176361,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604123845
    },
    {
        "content": "<p>(I have VS Code open and I copied and pasted the code into Zulip).</p>\n<p>This might be a bit surprising, but the informal statement \"Let s, t be sets s.t. s \\subseteq t\" doesn't fit well with how we formalize sets in Lean. You could either formalize the sets s and t as two different types, and then you could talk about <code>fintype s</code> and <code>fintype t</code>, but then there isn't a definition of \"subset\" between two arbitrary types. You could, however, provide an injective function from <code>s</code> to <code>t</code>, and then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_injective\">docs#fintype.of_injective</a> says that you can get an instance of <code>fintype s</code> from <code>fintype t</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_injective</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n</code></pre></div>\n<p>Alternatively, you could formalize s and t as two terms of type <code>set α</code> for some other type <code>α</code>, and then it makes good sense to talk about <code>s ⊆ t</code> and <code>s.finite</code> and <code>t.finite</code>, but this is closer to the following instead: \"Let s, t be two subsets of some universal set α\". If you're OK with this, then the theorem you're looking for is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.subset\">docs#set.finite.subset</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.finite</span> <span class=\"o\">:=</span>\n<span class=\"n\">ht.subset</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 215176822,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604124674
    },
    {
        "content": "<p>Note that fintypes, finsets and finite sets are all different things in Lean, there's some (very brief) discussion on <a href=\"https://leanprover-community.github.io/theories/sets.html\">this page on the community website</a>.</p>",
        "id": 215176875,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604124779
    },
    {
        "content": "<p>Hmm... On general principles I kind of want to avoid using <code>noncomputable</code> if I don't have to, though I suppose it's not super important. I think the latter will do in my case; I'll go find out!</p>",
        "id": 215177135,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604125338
    },
    {
        "content": "<p>\"A subset of a finite set is finite\" isn't true constructively for the usual notion of finite set. It needs to be decidable whether each element of the latter set is contained in the former set.</p>",
        "id": 215189280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604147057
    },
    {
        "content": "<p>Huh. But, can't you argue that since the cardinality of a subset is bounded above by the cardinality of the original set, if the original set is finite then the subset must be as well? It isn't a \"constructive proof\" in the sense that it tells you what the actual members of the subset are, but I didn't think that constructive-logic forbade 'proving existence without giving an example' in general... (not that constructivist logic is my specialty or anything)</p>",
        "id": 215192621,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604152120
    },
    {
        "content": "<p>you can't compute the cardinality of a finite set. What's the cardinality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mfrac><mn>1</mn><msup><mi>n</mi><mn>2</mn></msup></mfrac><mo separator=\"true\">,</mo><msup><mi>π</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\sum_{n=1}^{\\infty}\\frac{1}{n^2}, \\pi^2/6\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mopen\">{</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span><span class=\"mclose\">}</span></span></span></span>?</p>",
        "id": 215192654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152181
    },
    {
        "content": "<p>You'll need to figure out if the infinite sum equals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>π</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">\\pi^2/6</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span></span></span></span> and there's no algorithm for that</p>",
        "id": 215192702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152207
    },
    {
        "content": "<p>Can't Doron Zeilberger do that?</p>",
        "id": 215192712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604152226
    },
    {
        "content": "<p>Or is this out of scope of A = B?</p>",
        "id": 215192720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604152237
    },
    {
        "content": "<p>Not even Doron.</p>",
        "id": 215192721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152239
    },
    {
        "content": "<p>He can only do finite sums.</p>",
        "id": 215192724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152246
    },
    {
        "content": "<p>Hmmm, I see</p>",
        "id": 215192727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604152254
    },
    {
        "content": "<p>I never really looked into that stuff carefully</p>",
        "id": 215192733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604152265
    },
    {
        "content": "<p>If you don't like the example, <a href=\"https://mathoverflow.net/questions/330950/two-probably-equal-real-numbers-which-are-not-proved-to-be-equal\">there are more to choose from here</a>.</p>",
        "id": 215192796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152340
    },
    {
        "content": "<p>Well, okay. That saves me some bother, since it basically proves the thing I want to do can't be done without <code>noncomputable</code> lol. Thanks!</p>",
        "id": 215192907,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604152528
    },
    {
        "content": "<p>If you have <code>s ⊆ t</code>, <code>fintype t</code>, and <code>∀ x, decidable (x ∈ s)</code>, then you can get <code>fintype s</code> without <code>noncomputable</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.fintype_subset\">docs#set.fintype_subset</a>.</p>",
        "id": 215193035,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604152686
    },
    {
        "content": "<p>Yeah, but I'm trying to prove that an arbitrary subset of a finite group is finite, so I don't think that I can assume <code>∀ x, decidable (x ∈ s)</code>...</p>",
        "id": 215193060,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604152789
    },
    {
        "content": "<p>... though actually, in my specific case, maybe it is decidable. Hm. It's not quite arbitrary -- I'm trying to prove that the <em>conjugacy classes</em> in specific are finite (and furthermore  there's finitely many of them), so I can prove the class equation. And there <em>is</em> a perfectly decidable way to check that.</p>",
        "id": 215193128,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604152862
    },
    {
        "content": "<p>Okay, I'll poke at it some more then.</p>",
        "id": 215193135,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604152871
    },
    {
        "content": "<p>I assume that all the time when I'm doing normal mathematics. I write <code>open_locale classical</code> at the top of my file and bingo, everything is decidable. If you're doing classical mathematics then this is taken as read.</p>",
        "id": 215193136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152872
    },
    {
        "content": "<p>You have two choices: (a) use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite_of_fintype\">docs#set.finite_of_fintype</a>; (b) add <code>[decidable ...]</code> assumptions to your theorems.</p>",
        "id": 215193145,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604152905
    },
    {
        "content": "<p>I guess that begs the question -- how careful are we about avoiding noncomputable results in library code? I get the impression we'd prefer to avoid it whenever possible, but how hard are we trying?</p>",
        "id": 215193197,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604152961
    },
    {
        "content": "<p>oh you've got the wrong end of the stick entirely. We are very happy to work classically in mathlib.</p>",
        "id": 215193204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152987
    },
    {
        "content": "<p>It's the reason we have so much mathematics in there.</p>",
        "id": 215193215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604152998
    },
    {
        "content": "<p>If you want to use (b), then note that in <code>mathlib</code> we only add <code>[decidable ..]</code> assumptions if they're required to <strong>state</strong> the theorem, not to prove it.</p>",
        "id": 215193218,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604153017
    },
    {
        "content": "<p>Polynomials used to be computable, which made them good for computations, but people found them hard to use, so now they're noncomputable, and easier to work with when it comes to proofs.</p>",
        "id": 215193265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604153054
    },
    {
        "content": "<p>Psht. Alright then, I won't worry about it too much if I can't make this work without <code>noncomputable</code></p>",
        "id": 215193292,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604153126
    },
    {
        "content": "<p>The Gonthier et al proof of the odd order theorem was done completely constructively, as I understand it; but in practice there is only so far you can do with constructive mathematics, and it's not even clear to me that you can get particularly far into an undergraduate maths degree without jumping through innumerable hoops. In mathlib we treat mathematics the way working mathematicians treat it and work classically the moment we run into issues like this.</p>",
        "id": 215193362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604153233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Sometimes adding <code>[decidable]</code> assumptions to lemmas make them more useful in <code>classical</code> context because otherwise sometimes you get different <code>[decidable]</code> instances in LHS and RHS.</p>",
        "id": 215193376,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604153265
    },
    {
        "content": "<p>Somewhat unrelatedly, is there a way to make Lean generate new goals for unfulfilled type class witnesses, instead of just complaining?</p>",
        "id": 215193582,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604153562
    },
    {
        "content": "<p>we have all these <code>fooI</code> tactics. One of them might do what you want. At the very least you can do, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 215193713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604153782
    },
    {
        "content": "<p>Another trick: <code>refine @my_thm _ (id _)</code>.</p>",
        "id": 215199692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604162639
    }
]