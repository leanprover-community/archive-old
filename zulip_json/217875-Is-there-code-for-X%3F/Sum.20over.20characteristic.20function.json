[
    {
        "content": "<p>How can I prove a statement like the following without having to contort myself too much?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_apply_ite</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.filter_ne'</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>By \"contort\", I mean introducing the explicit identity function in the first step, which appears to be necessary for the rewrite.</p>",
        "id": 298285440,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662926392
    },
    {
        "content": "<p>Would using something like <code>refine (finset.sum_ite_apply _ _).trans _</code> work?</p>\n<p>You may need to give some arguments to <code>finset...</code>, or a different number of underscores... (I'm on mobile)</p>",
        "id": 298285808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662926666
    },
    {
        "content": "<p>The point being that refine would match via defeq, while rewrite via syntactic equivalence.  If you manage to apply/refine the right shape, you can get away with looser matching.</p>",
        "id": 298286044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662926844
    },
    {
        "content": "<p><code>refine (finset.sum_apply_ite 0 1 id).trans _,</code> can indeed replace the first two lines of the proof.<br>\nWhether one considers it to be less of a contortion, is perhaps a matter of taste <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 298286138,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662926894
    },
    {
        "content": "<p>(And without specifying <code>id</code>, it does not work, so the problem persists.)</p>",
        "id": 298286186,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662926933
    },
    {
        "content": "<p>You probably can also replace the underscore with <code>(by simp [...])</code>, remove begin, end and refine, make it a one-liner and be happy with it!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 298286329,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662927025
    },
    {
        "content": "<p>Also, replacing the rw by the refine will probably create a shorter proof term.</p>",
        "id": 298286386,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662927066
    },
    {
        "content": "<p>In my application, I actually have <code>... &lt; n + 1</code> instead of <code>... = n</code>, so that <code>.trans</code> does not work.</p>",
        "id": 298286778,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662927385
    },
    {
        "content": "<p>Would <code>(...).le.trans_lt</code> work instead?  This is getting worse and worse, I realize...</p>",
        "id": 298287156,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662927731
    },
    {
        "content": "<p>I'm probably convincing you that the <code>show ... id ...</code> was not so bad, after all, given how the proof could have looked.</p>",
        "id": 298287206,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662927810
    },
    {
        "content": "<p>At some point, a <code>calc</code> proof would be better.  One advantage of <code>calc</code> is that it allows you to lock in the proper defeq you are aiming for and then you can simply provide the correct lemma to fill it in.</p>",
        "id": 298287516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662928052
    },
    {
        "content": "<p>OK, I have found a simpler version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_apply_ite\">docs#finset.sum_apply_ite</a> that works directly (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite\">docs#finset.sum_ite</a>).</p>",
        "id": 298287530,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662928066
    },
    {
        "content": "<p>Which solves the problem (and tells me I should go to bed...).</p>",
        "id": 298287589,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662928091
    },
    {
        "content": "<p>Right now, I'm stuck on the trivial-looking <code>example (n : ℕ) : 1 - n = 1 → n = 0</code>...<br>\nWhat I have is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"bp\">@</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat.one_le_of_lt</span> <span class=\"n\">hp</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which looks unnecessarily complicated.</p>",
        "id": 298287895,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662928454
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_of_sub_eq_succ\">docs#nat.lt_of_sub_eq_succ</a> help?</p>",
        "id": 298288113,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662928666
    },
    {
        "content": "<p>(beginning with a lemma that converts the <code>= 0</code> to <code>&lt; 1</code>?)</p>",
        "id": 298288203,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662928725
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_one_iff\">docs#nat.lt_one_iff</a></p>",
        "id": 298288250,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662928779
    },
    {
        "content": "<p><code>:= nat.lt_one_iff.mp (nat.lt_of_sub_eq_succ h)</code>. Thanks.</p>",
        "id": 298288453,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662928950
    },
    {
        "content": "<p>I just tend not to think of <code>succ</code> when looking for lemmas....</p>",
        "id": 298288465,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662928968
    },
    {
        "content": "<p>I find navigating <code>nat</code> lemmas very tricky.</p>",
        "id": 298288563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662929056
    },
    {
        "content": "<p>One guiding principle that I find useful, is that strict inequality is <em>much</em> stronger than <code>≤</code>, due to truncated subtraction.  So, if I can, I try to get <code>&lt;</code> to do most of the work.</p>",
        "id": 298288696,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662929190
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.sub_eq_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>would be a nice addition to mathlib.</p>",
        "id": 298288736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662929232
    },
    {
        "content": "<p>Indeed, I found the lemma above hoping that <code>nat.sub_eq_</code> would autocomplete to <code>self</code>!</p>",
        "id": 298288842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662929302
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.sub_eq_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 298288849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662929309
    },
    {
        "content": "<p><code>omega</code> is a really cool tactic for all this stuff, it's such a shame that it's banned</p>",
        "id": 298288873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662929337
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite\">docs#finset.sum_ite</a> not work?</p>",
        "id": 298288904,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662929368
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_ne'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 298288992,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1662929411
    },
    {
        "content": "<p><code>n</code> here is a red herring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_ne'</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 298289100,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1662929507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.20characteristic.20function/near/298288904\">said</a>:</p>\n<blockquote>\n<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite\">docs#finset.sum_ite</a> not work?</p>\n</blockquote>\n<p>See <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.20characteristic.20function/near/298287530\">above</a>.</p>",
        "id": 298289264,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662929642
    },
    {
        "content": "<p>seems I need some rest too :)</p>",
        "id": 298289299,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662929674
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 298289626,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1662929932
    },
    {
        "content": "<p>You should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_boole\">docs#finset.sum_boole</a></p>",
        "id": 298293366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662933246
    },
    {
        "content": "<p>True, but one has to find it first...</p>",
        "id": 298350164,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662977202
    },
    {
        "content": "<p>...and the name does not exactly help here. The statement does not involve booleans. Something involving <code>ite</code> and perhaps <code>zero</code> and <code>one</code> would be much more helpful in finding it.</p>",
        "id": 298400341,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662995350
    },
    {
        "content": "<p>Agreed, but I could not come up with a better name.</p>",
        "id": 298400752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662995462
    },
    {
        "content": "<p><code>indicator</code> or <code>single</code> maybe? <code>fun i, ite (i = x) 1 0 = fun i, ite (i != x) 0 1 = pi.single x 1</code></p>",
        "id": 298414084,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1662999157
    },
    {
        "content": "<p>By the way, why does it require a <code>non_assoc_semiring</code>? Is <code>add_monoid</code> not enough?</p>",
        "id": 298414998,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1662999456
    },
    {
        "content": "<p>I guess it is the presence of 0 and 1.</p>",
        "id": 298418465,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663000583
    },
    {
        "content": "<p>add_monoid_with_one is probably enough, now that that exists</p>",
        "id": 298419346,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663000871
    },
    {
        "content": "<p>You should also have its multiplicative counterpart, <code>monoid_with_e</code></p>",
        "id": 298492666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663024207
    }
]