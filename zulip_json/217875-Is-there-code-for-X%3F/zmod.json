[
    {
        "content": "<p>I'm failing to find two of the most basic facts about <code>zmod</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>and worse, I don't seem to be able to prove them... Any help?</p>",
        "id": 198528984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590229522
    },
    {
        "content": "<p>Actually, I guess it's actually the other direction I want in any case.</p>",
        "id": 198529071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590229683
    },
    {
        "content": "<p>You want to look at <code>modeq</code></p>",
        "id": 198529101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590229706
    },
    {
        "content": "<p>That's the language the lemmas are proved in</p>",
        "id": 198529111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590229719
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 198529120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590229763
    },
    {
        "content": "<p>But I don't want to use <code>modeq</code>, because it is horrible. :-) I am working with (Z/NZ) + \\sqrt{3} (Z/NZ).</p>",
        "id": 198529171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590229828
    },
    {
        "content": "<p>It seems like the coercion from <code>nat</code> to <code>zmod</code> isn't particularly well described in the API, so it's hard to extract information from hypotheses about these coercions.</p>",
        "id": 198529218,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590229916
    },
    {
        "content": "<p>I posted a proof of one of these the other day</p>",
        "id": 198529265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590229957
    },
    {
        "content": "<p>I'm on mobile and don't know how to send the link but search for</p>\n<blockquote>\n<p>Whilst proving <code>example  : (R : Type*) [ring R] (p : ℕ) [char_p R p] (a b : ℤ) : (a : R) = b ↔ a ≡ b [ZMOD p]</code> I noticed the following thing: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">sub_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">modeq_iff_dvd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>One a-b, one b-a. This meant that I had to add an <code>eq_comm</code> in the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory</span><span class=\"bp\">.</span><span class=\"n\">quadratic_reciprocity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I think the above lemma is the correct thing to PR to mathlib (with perhaps a better proof) but this experience did make me wonder whether there should be a \"convention\" for the order of the subtractands when proving lemmas of this form</p>\n</blockquote>",
        "id": 198529275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590229983
    },
    {
        "content": "<p>Okay, that lemma does look good.</p>",
        "id": 198529338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590230064
    },
    {
        "content": "<p>It never made it into mathlib?</p>",
        "id": 198529340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590230070
    },
    {
        "content": "<p>I certainly didn't PR it. My life is too full right now, I would PR, get a comment, and then not notice for two weeks and this is a bit annoying</p>",
        "id": 198529361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590230140
    },
    {
        "content": "<p>I guess I still need to adapt it for the nat version instead of int.</p>",
        "id": 198529363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590230148
    },
    {
        "content": "<p>okay, I'll see if I can include something like it</p>",
        "id": 198529365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590230158
    },
    {
        "content": "<p>Unfortunately I use subtraction</p>",
        "id": 198529404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590230179
    },
    {
        "content": "<p>Maybe you can start with WLOG</p>",
        "id": 198529421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590230210
    },
    {
        "content": "<p>Okay,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_coe_eq_int_coe_iff</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_cast_eq_zero_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">int_coe_eq_int_coe_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_coe_eq_int_coe_iff</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">nat_coe_eq_nat_coe_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">int_coe_eq_int_coe_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_zmod_eq_zero_iff_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">nat_coe_eq_nat_coe_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_zero_iff</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>starts with Kevin's lemma and deduces what I needed. (No need for wlog!). I'll bundle it all into an upcoming PR.</p>",
        "id": 198529760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590230889
    },
    {
        "content": "<p>Here's a direct proof of your original examples?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">val_cast_nat</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">val_cast_nat</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">val_cast_nat</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">val_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 198530250,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590231790
    },
    {
        "content": "<p>Could you please try to use <code>norm_cast</code> in all those proofs? Each proof that requires adding a <code>norm_cast</code> attribute benefits to future users beyond its intended use.</p>",
        "id": 198530570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590232329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> mathlib knows <code>char_p (zmod n) n</code>, and your questions ought to be proven for a general such <code>R</code>.</p>",
        "id": 198538211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590244563
    },
    {
        "content": "<p>The second one is (half of) the definition of <code>char_p</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 198538281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590244740
    }
]