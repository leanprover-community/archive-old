[
    {
        "content": "<p>Do we have some construction of the following form? (generalizing <code>lift_on_2</code>, <code>lift_on_3</code>, etc.):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient.lift_on_family'</span>\n  <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 286096782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655223261
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.induction_on_pi\">docs#quotient.induction_on_pi</a> seems close</p>",
        "id": 286097050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655223380
    },
    {
        "content": "<p>Hrrmmm that's a theorem...</p>",
        "id": 286097097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655223407
    },
    {
        "content": "<p>But yet it's close</p>",
        "id": 286097113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655223413
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.choice\">docs#quotient.choice</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.fin_choice\">docs#quotient.fin_choice</a> are the only other things that mention <code>Π i, setoid</code> or the misspelling <code>∀ i, setoid</code></p>",
        "id": 286097395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655223547
    },
    {
        "content": "<p>I can't seem to figure out a way to define <code>quotient.lift_on_family'</code> compputably. Is it possible?</p>",
        "id": 286102259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655225700
    },
    {
        "content": "<p>I doubt it, but not sure exactly how to prove it</p>",
        "id": 286103066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655226079
    },
    {
        "content": "<p>Presumably it's possible if the index type is finite</p>",
        "id": 286106889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655227755
    },
    {
        "content": "<p><code>(Π i, quotient (S i)) → quotient (pi_setoid : setoid (Π i, X i))</code> cannot be defined in ZF without choice, because then <code>Π i, X i</code> could be empty even though <code>X i</code> is nonempty for every <code>i</code> (a choice function is exactly an element of the pi type). In this case, if <code>S i</code> is the equivalence relation that identifies all elements, then <code>quotient (S i)</code> is a singleton for every <code>i</code> and therefore <code>Π i, quotient (S i)</code> is also a singleton, but <code>quotient pi_setoid</code> is empty.</p>",
        "id": 286107465,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655228041
    },
    {
        "content": "<p>Just discovered that it's discussed 7 years ago: <a href=\"https://github.com/leanprover/lean/issues/649#issuecomment-107993581\">https://github.com/leanprover/lean/issues/649#issuecomment-107993581</a></p>",
        "id": 298196289,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662863442
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames</a> I found a similar problem again a few days ago.</p>",
        "id": 298245560,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662899772
    }
]