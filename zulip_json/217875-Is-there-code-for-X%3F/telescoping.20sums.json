[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">telescope</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I didn't look too hard for this one: I gave up after searching for <code>telescop</code> and only finding something silly involving <code>nat</code> subtraction. :-)</p>",
        "id": 202077106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593169855
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> had something similar a little while ago</p>",
        "id": 202077598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593170257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">telescope</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">sum_range_induction</span><span class=\"bp\">;</span> <span class=\"n\">abel</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202082794,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593174251
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>git grep -n <span class=\"s2\">&quot;(f (i+1) - f i) = f n - f 0&quot;</span>\nsrc/algebra/big_operators.lean:560:  ∑ i in range n, <span class=\"o\">(</span>f <span class=\"o\">(</span>i+1<span class=\"o\">)</span> - f i<span class=\"o\">)</span> <span class=\"o\">=</span> f n - f <span class=\"m\">0</span> :<span class=\"o\">=</span>\n</code></pre></div>",
        "id": 202083596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593174888
    },
    {
        "content": "<p>It's called <code>sum_range_sub_of_monotone</code>...</p>",
        "id": 202083644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593174930
    },
    {
        "content": "<p>that's the one scott found. it's about nats.</p>",
        "id": 202083663,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593174946
    },
    {
        "content": "<p>Aaah, I see.</p>",
        "id": 202083682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593174962
    },
    {
        "content": "<p>i'm working to PR the version for groups right now</p>",
        "id": 202083726,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593174971
    },
    {
        "content": "<p>As you can see from the word monotone which seems completely useless</p>",
        "id": 202083730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593174974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Don't forget to tag it with <code>@[to_multiplicative]</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 202083754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593174996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/telescoping.20sums/near/202083730\">said</a>:</p>\n<blockquote>\n<p>As you can see from the word monotone which seems completely useless</p>\n</blockquote>\n<p>... but of course isn't.</p>",
        "id": 202083763,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593175006
    },
    {
        "content": "<p>i don't understand how to_additive works. is there also a thing called to_multiplicative?</p>",
        "id": 202083890,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593175087
    },
    {
        "content": "<p>No, hence the <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 202083920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175108
    },
    {
        "content": "<p>My point is, there is a multiplicative version of this lemma. Prove that, and <code>@[to_additive]</code> will give you the version we are discussing here.</p>",
        "id": 202083960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175140
    },
    {
        "content": "<p>Except that the additive version would then and up with <code>f n + - f 0</code>...</p>",
        "id": 202084009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175176
    },
    {
        "content": "<p>Because the multiplicative version will have <code>f n * (f 0)^-1</code></p>",
        "id": 202084038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175199
    },
    {
        "content": "<p>I'll do what's done for range_induction, and write both explicitly but have the proof of the additive case be a call to the multiplicative one</p>",
        "id": 202084082,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593175204
    },
    {
        "content": "<p>why don't we have <code>has_div</code> for groups?</p>",
        "id": 202084104,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593175213
    },
    {
        "content": "<p>I still don't really know</p>",
        "id": 202084136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175232
    },
    {
        "content": "<p>does it make sense to <code>import tactic.group</code> in algebra.big_operators?</p>",
        "id": 202084488,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593175443
    },
    {
        "content": "<p>My initial reaction would be, yes please</p>",
        "id": 202084559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175487
    },
    {
        "content": "<p>Maybe the big_ops file should be split?</p>",
        "id": 202084577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175502
    },
    {
        "content": "<p>it is pretty large</p>",
        "id": 202084629,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593175545
    },
    {
        "content": "<p>I can imagine that tactics like <code>abel</code> and <code>ring</code> want to know about <code>finset.{prod,sum}</code></p>",
        "id": 202084632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593175547
    },
    {
        "content": "<p>Does it make sense for <code>to_additive</code> to learn to turn <code>x * y^-1</code> into <code>x - y</code>?</p>",
        "id": 202085997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593176322
    },
    {
        "content": "<p>we should have <code>has_div</code> for <code>group</code> and <code>to_additive</code> should learn to turn <code>x/y</code> into <code>x-y</code></p>",
        "id": 202086097,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593176393
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3184\">#3184</a></p>",
        "id": 202086849,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593176786
    },
    {
        "content": "<p>I feel like this is a bad solution.</p>",
        "id": 202086922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593176839
    },
    {
        "content": "<p>Type classes are hard enough already.</p>",
        "id": 202086955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593176866
    },
    {
        "content": "<p>I believe you, but I don't understand</p>",
        "id": 202087265,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593177066
    },
    {
        "content": "<p>It's just solving the problem in the wrong way. For instance now you will also have to add a bunch of lemmas to deal with this strange new <code>/</code> for groups.</p>",
        "id": 202087488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593177221
    },
    {
        "content": "<p>Plus, no one really wants <code>/</code> for groups in the first place, I think.</p>",
        "id": 202087549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593177248
    },
    {
        "content": "<p>You're gaining notation that you don't want, and then incurring all the headaches of type classes as a cost.</p>",
        "id": 202087797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593177385
    },
    {
        "content": "<p>Awesome, thanks! I left some comments on the comments in <a href=\"https://github.com/leanprover-community/mathlib/issues/3184\">#3184</a>.</p>",
        "id": 202087805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593177390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/telescoping.20sums/near/202087805\">said</a>:</p>\n<blockquote>\n<p>Awesome, thanks! I left some comments on the comments in <a href=\"https://github.com/leanprover-community/mathlib/issues/3184\">#3184</a>.</p>\n</blockquote>\n<p>resolved</p>",
        "id": 202090438,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593178648
    }
]