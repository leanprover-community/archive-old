[
    {
        "content": "<p>I want to create a function that outputs a value dependent on a type class being satisfied, otherwise I want the function to output some default value. Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">some_other_function</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">some_other_function</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>Ideally, <code>f</code> would be recognized as a type class instance, but instead we get the error <code>failed to synthesize type class instance for inhabited X</code>.</p>\n<p>Is there any way I can create a function that is tolerant to types which don't satisfy the type class, so long as there is some default value (in this case, <code>false</code>)? </p>\n<p>Thanks for your help.</p>",
        "id": 224606899,
        "sender_full_name": "Chase Norman",
        "timestamp": 1612043353
    },
    {
        "content": "<p>Either <code>∃ [inhabited X], some_other_function X</code> or <code>∃ [inhabited X], by exactI some_other_function X</code></p>",
        "id": 224607317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612043864
    },
    {
        "content": "<p>This is likely to be a bad idea but you could make a second type class containing an <code>option (inhabited X)</code> with two instances, one that uses an <code>inhabited X</code> and a low-priority catch-all instance</p>",
        "id": 224609425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612046028
    },
    {
        "content": "<p>The danger is that the catch-all instance might implicitly be selected when you weren't expecting it to, for example, if you forgot an <code>[inhabited X]</code> instance on an auxiliary function</p>",
        "id": 224609727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612046513
    },
    {
        "content": "<p>Actually I'm a bit confused because what you write doesn't seem to match your example very closely.</p>",
        "id": 224609783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612046574
    }
]