[
    {
        "content": "<p>Do we have a way to express a monoid object in a (monoidal) category? </p>\n<p>Similarly, do we have a concise way to express commutative diagrams as one would want to define a monoid/group/coalgebra/etc object?</p>",
        "id": 204923103,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1595601356
    },
    {
        "content": "<p>Q1: Maybe? I think not yet...<br>\nQ2: Nope. And if you figure out how to solve this, that would be awesome. It seems quite nontrivial to me.</p>",
        "id": 204925496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595602401
    },
    {
        "content": "<ol>\n<li>Yeah - as Johan says, it's not yet in mathlib but it's entirely doable</li>\n</ol>",
        "id": 204925661,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595602463
    },
    {
        "content": "<ol>\n<li>was actually an exercise at LFTCM: <a href=\"https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/thursday/afternoon/category_theory/exercise7.lean\">https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/thursday/afternoon/category_theory/exercise7.lean</a></li>\n</ol>",
        "id": 204926535,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595602847
    },
    {
        "content": "<p>Scott should give a lecture course, and then the next 2000 lines of the category theory library can be students PRing exercises</p>",
        "id": 204927652,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595603376
    },
    {
        "content": "<p>While we're giving category theory some love, I should tell people about the experience Bhavik, Chris and me had at Xena on the Discord last night (we have regular Thursday evening meetings there btw). I'd just refactored <code>abelianization.lean</code>, which claims in its docstring to construct the adjoint functor to the forgetful functor from Ab to Gp but of course it's just an API for abelianisation and doesn't mention categories at all. I saw that Scott had made adjoint functors so suggested we should prove that they really were adjoint.   Then it turned out Ab is + and Gp is * (as it should be!) so there were going to be additives and multiplicatives everywhere (and the API for this stuff is not even complete, for example there's no construction of <code>additive G -&gt;+ A</code> from <code>G -&gt;* multiplicative A</code> unless you abuse the type alias <code>additive (multiplicative A) = A</code>, something which might cause problems later? Anyway when Chris saw this mess his first reaction was \"there are layers upon layers here, proving adjointness might not be easy\". But I'd been refactoring subgroups and had been dealing with additive/multiplicative stuff so knew some tricks, and the functors were defined without too much problem. And when it came to adjointness I just started ploughing through the fields but then Bhavik said that he knew a couple of constructors which would make our life easier. Chris was really surprised when I told him that the condition for functors to be adjoint was that there was some bijection between hom sets and it had to be natural in a sense I couldn't make precise. We looked at the constructor and it involved whiskering and I said I didn't know what that was either (fortunately Bhavik did). But I freely confessed to using adjoint functors in my work. Bhavik told us the constructor which just needed the bijection, I formalised the data and then with baited breath we tried <code>tidy</code> and it did every single goal. Chris was delighted, Bhavik said <code>tidy</code> was OP :-)</p>",
        "id": 204930087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595604489
    },
    {
        "content": "<p>One important thing we learnt <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> was that I would have wasted a bunch of time if Bhavik hadn't told me about the constructor for adjoints which just asks for the equiv, and so maybe these important constructors should be mentioned in the docstring for adjoint?</p>",
        "id": 204930460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595604675
    },
    {
        "content": "<p>The code was written before we start doccing definitions</p>",
        "id": 204930524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595604713
    },
    {
        "content": "<p>I'm a big fan of mentioning alternative constructors in docstrings</p>",
        "id": 204930601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595604740
    },
    {
        "content": "<p>my ~only strategy right now for discovering alternative constructors is to ask <code>suggest</code>; i'd love to sometimes learn about them from docstrings :)</p>",
        "id": 204932197,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595605620
    },
    {
        "content": "<p>The docs still need a lot of love... contributions very, very welcome!</p>",
        "id": 204932477,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595605796
    },
    {
        "content": "<p>maybe we can organize a docs hackathon day</p>",
        "id": 204932574,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595605840
    },
    {
        "content": "<p>I did this \"exercise\" for <a href=\"https://github.com/mattearnshaw/lens/blob/master/src/ccomonoid.lean#L83\">commutative comonoids recently</a>, without realising this it had been posed. It's a bit rough so will try to mould it into PR shape when I can (with the additional theorems).</p>\n<p>Anyway, it raised a question for me, even if it is somewhat idle. In principle there is a distinction between the abstract universal \"monoid object\" and concrete universal \"monoid object in a category\", the latter being a functor from a sketch. For now it is probably needless abstraction but I am curious if anyone has thought about how switching between parametric typeclasses and functors in this way might be carried out</p>",
        "id": 204932575,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1595605841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monoid.20object/near/204932477\">said</a>:</p>\n<blockquote>\n<p>The docs still need a lot of love... contributions very, very welcome!</p>\n</blockquote>\n<p>Reminder for everyone (not targetting any specific part of mathlib): when the days of the great switch to Lean4 will come, everything which is undocumented will much harder to port. Some stuff may disappear completely from mathlib if nobody understands it.</p>",
        "id": 204932871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595606011
    },
    {
        "content": "<p>The other thing to say about Kevin + Bhavik + Chris's experience is that pair/group proving is fun. :-)</p>",
        "id": 204974936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595631673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span>, I haven't thought about that distinction yet.</p>",
        "id": 204974955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595631696
    },
    {
        "content": "<p>I think exploring monoid objects in monoidal categories further would be valuable. Can we obtain all the basic results on (C)DGAs by observing they are (commutative) monoid objects in chain complexes?</p>",
        "id": 204975051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595631795
    },
    {
        "content": "<p>By the way I've got some messy code which does internal category objects, and I made the functors <code>internal_category (Type u) тед Cat</code> and <code>Cat.{u} тед internal_category (Type u)</code> (where <code>internal_category A</code> is the category of categories internal to <code>A</code>), I don't know that this is useful for anyone but I have it at least</p>",
        "id": 204984780,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595645774
    }
]