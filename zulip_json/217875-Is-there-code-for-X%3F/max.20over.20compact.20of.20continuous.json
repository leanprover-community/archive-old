[
    {
        "content": "<p>Has anyone already proven the fact that a continuous function reaches a maximum on any compact set?<br>\nHere's the precise statement I need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.topology</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_max</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAcomp</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 234625993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618469955
    },
    {
        "content": "<p>You have to be careful because A could be empty</p>",
        "id": 234626262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618470034
    },
    {
        "content": "<p>Oh right! But that's fine, I do have this assumption in my drawers.</p>",
        "id": 234626521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618470088
    },
    {
        "content": "<p>All you need is a continuous map from a nonempty compact subset of a topological space so that's the place to start looking</p>",
        "id": 234626721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618470142
    },
    {
        "content": "<p>I can't find this exact theorem but it should be a mix of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.Sup_mem\">docs#is_compact.Sup_mem</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.image\">docs#is_compact.image</a></p>",
        "id": 234630173,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1618471854
    },
    {
        "content": "<p>Found ! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_Sup_image_eq\">docs#is_compact.exists_Sup_image_eq</a></p>",
        "id": 234630494,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1618472029
    },
    {
        "content": "<p>Great! Seems like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_forall_ge\">docs#is_compact.exists_forall_ge</a> is exactly what I need.</p>",
        "id": 234630656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1618472126
    }
]