[
    {
        "content": "<p>I'm looking at the asymptotics API to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo>‚Üí</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">log(1+x)/x \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚Üí</mo><mo>+</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">x \\to +\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">‚àû</span></span></span></span>, and it seems like there is no theorem to convert an equivalent to an <code>is_o</code> relation.</p>\n<p>What I'm looking for is, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>‚àº</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">u \\sim v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚àº</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>, proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v = o(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> is equivalent to proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">u = o(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>.<br>\nIs there a nice way to do it or should there be a convert theorem (that I might have missed)?</p>\n<p>Here's a MWE to illustrate what I'm trying to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotic_equivalent</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotics</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">asymptotics</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.left_comp_log</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">):</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_log1_plus_x_under_x_at_top_nhds_1</span><span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">tendsto_at_top_mono</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_le_one</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">tendsto_id</span><span class=\"o\">),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">asymptotics.is_o</span> <span class=\"n\">real.log</span> <span class=\"n\">id</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">asymptotics.is_o.tendsto_0</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- here I would like to prove log(x) = o(x) is enough to prove log(1 + x) = o(x) knowing log(1 + x) ~ log(x) by left_comp_log.</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">asymptotics.is_o</span> <span class=\"n\">id</span> <span class=\"n\">real.exp</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">asymptotics.is_o.comp_tendsto</span> <span class=\"n\">this</span> <span class=\"n\">real.tendsto_log_at_top</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249863232,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629299061
    },
    {
        "content": "<p>I'm afraid this lemma doesn't exist, but it definitely should. I can't do Lean right now, but I think you should be able to get it by saying that <code>u - v = o(v) = o(g)</code> since <code>v = o(g)</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_o.trans\">docs#asymptotics.is_o.trans</a>), which then implies <code>u = u - v + v = o(g)</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_o.add\">docs#asymptotics.is_o.add</a>)</p>",
        "id": 249875431,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629304147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249875431\">said</a>:</p>\n<blockquote>\n<p>I'm afraid this lemma doesn't exist, but it definitely should. I can't do Lean right now, but I think you should be able to get it by saying that <code>u - v = o(v) = o(g)</code> since <code>v = o(g)</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_o.trans\">docs#asymptotics.is_o.trans</a>), which then implies <code>u = u - v + v = o(g)</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_o.add\">docs#asymptotics.is_o.add</a>)</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 249878131,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629305368
    },
    {
        "content": "<p>FWIW, here's the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent_is_o_of_equivalent_of_o</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_equiv</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ho</span><span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">is_o</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"n\">is_o.add</span> <span class=\"o\">(</span><span class=\"n\">is_o.trans</span> <span class=\"n\">h_equiv</span> <span class=\"n\">ho</span><span class=\"o\">)</span> <span class=\"n\">ho</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249887017,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629309162
    },
    {
        "content": "<p>Enjoy the final proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotic_equivalent</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.specific_asymptotics</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">asymptotics</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">asymptotics</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_nonzero_of_tendsto_at_top</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">htop</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">):</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eventually_at_top</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">‚ü©,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">convert</span> <span class=\"n\">tendsto.eventually</span> <span class=\"n\">htop</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_false_of_not</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hnp</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬¨</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eventually.mono</span> <span class=\"n\">hnp</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hnpx</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hpx</span> <span class=\"n\">hnpx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_o.of_tendsto_at_top</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">htop</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">):</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_iff_tendsto'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eventually_false_of_not</span> <span class=\"o\">(</span><span class=\"n\">eventually_nonzero_of_tendsto_at_top</span> <span class=\"n\">htop</span><span class=\"o\">),</span>\n    <span class=\"n\">convert</span> <span class=\"n\">tendsto.inv_tendsto_at_top</span> <span class=\"n\">htop</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.left_comp_log</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">):</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">fact1</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnonvanish</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eventually_nonzero_of_tendsto_at_top</span> <span class=\"o\">(</span><span class=\"n\">is_equivalent.tendsto_at_top</span> <span class=\"n\">h</span> <span class=\"n\">htop</span><span class=\"o\">)),</span>\n      <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_iff_tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_false_left</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">div_one</span><span class=\"o\">,</span> <span class=\"n\">pi.sub_apply</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">tendsto.congr'</span>\n        <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=·∂†</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">eventually.mono</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àß</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">real.log_div</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hx.1</span> <span class=\"n\">hx.2</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eventually_nonzero_of_tendsto_at_top</span> <span class=\"n\">htop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">hnonvanish</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">real.continuous_at_log</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto.comp</span>\n        <span class=\"o\">((</span><span class=\"n\">is_equivalent_iff_tendsto_one</span> <span class=\"n\">hnonvanish</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">fact2</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n      <span class=\"n\">asymptotics.is_o.of_tendsto_at_top</span>\n        <span class=\"o\">(</span><span class=\"n\">real.tendsto_log_at_top.comp</span>\n        <span class=\"o\">((</span><span class=\"n\">asymptotics.is_equivalent.tendsto_at_top_iff</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">htop</span><span class=\"o\">)),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_o.trans</span> <span class=\"n\">fact1</span> <span class=\"n\">fact2</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.left_comp_log'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">):</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">asymptotics.is_equivalent.left_comp_log</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"n\">asymptotics.is_equivalent.tendsto_at_top_iff</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">htop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.is_o_of_equivalent_of_o</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_equiv</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ho</span><span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">is_o</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"n\">is_o.add</span> <span class=\"o\">(</span><span class=\"n\">is_o.trans</span> <span class=\"n\">h_equiv</span> <span class=\"n\">ho</span><span class=\"o\">)</span> <span class=\"n\">ho</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">log_is_o_of_id</span><span class=\"o\">:</span>\n  <span class=\"n\">is_o</span> <span class=\"n\">real.log</span> <span class=\"n\">id</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">asymptotics.is_o.congr'</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"bp\">‚àò</span> <span class=\"n\">real.log</span> <span class=\"bp\">=·∂†</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">real.log</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">real.exp</span> <span class=\"bp\">‚àò</span> <span class=\"n\">real.log</span> <span class=\"bp\">=·∂†</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">refine</span> <span class=\"n\">eventually.mono</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">real.exp_log</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eventually_at_top</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"o\">‚ü©,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">refine</span> <span class=\"n\">asymptotics.is_o.comp_tendsto</span>\n      <span class=\"n\">_</span> <span class=\"n\">real.tendsto_log_at_top</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span>\n        <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_iff_tendsto'</span>\n          <span class=\"o\">(</span><span class=\"n\">eventually_false_of_not</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"n\">real.exp_ne_zero</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n        <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">real.tendsto_pow_mul_exp_neg_at_top_nhds_0</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">real.exp_neg</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_log1_plus_x_under_x_at_top_nhds_1</span><span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">asymptotics.is_o</span> <span class=\"n\">real.log</span> <span class=\"n\">id</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">asymptotics.is_o.tendsto_0</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span>\n      <span class=\"n\">asymptotics.is_equivalent.is_o_of_equivalent_of_o</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">real.log</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span>\n      <span class=\"n\">asymptotics.is_equivalent.left_comp_log'</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">asymptotics.is_equivalent.refl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add_is_o</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">asymptotics.is_o_pow_pow_at_top_of_lt</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exactI</span> <span class=\"n\">real.order_topology</span><span class=\"o\">,</span> <span class=\"c1\">-- why is this needed?</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">log_is_o_of_id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I find it strange that I need to do <code>exactI real.order_topology</code> but I'm super happy with the result :-) (the original proof involved to prove L'Hopital Rule + derivatives stuff for logs for +‚àû/+‚àû and it was getting too messy.)</p>",
        "id": 249894329,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629312306
    },
    {
        "content": "<p>The <code>I</code> in <code>exactI</code> can't be needed. It means \"please put something in the type class game for later use\" while there is no later tactic there.</p>",
        "id": 249894761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629312483
    },
    {
        "content": "<p>Presumably one of the tactic does instance search too late (<code>apply</code> is very prone to do that, and I guess <code>convert</code> can do it too) and you could simply use <code>apply_instance</code> instead of <code>exactI</code>.</p>",
        "id": 249894887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629312537
    },
    {
        "content": "<p>Makes sense, then, thanks!</p>",
        "id": 249896631,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629313172
    },
    {
        "content": "<p>I think at some point I had an epsilon-delta proof of L'H√¥pital's rule +‚àû/+‚àû but it was extremely long and boring so I just didn't have the energy to turn it into a PR</p>",
        "id": 249901259,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629315429
    },
    {
        "content": "<p>I'm sure you can improve Ryan's proof, filling in missing mathlib lemmas along the way.</p>",
        "id": 249902090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629315837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249894761\">said</a>:</p>\n<blockquote>\n<p>The <code>I</code> in <code>exactI</code> can't be needed. It means \"please put something in the type class game for later use\" while there is no later tactic there.</p>\n</blockquote>\n<p>Actually that's the case with intro-like tactics, but for exact-like tactics the typeclass context is adjusted <em>before</em> the call to exact. <code>exactI e</code> means \"use all instances in the local context to elaborate <code>e</code> and use it to finish the goal\"</p>",
        "id": 249902291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629315924
    },
    {
        "content": "<p>Yes, I thought about this during dinner.</p>",
        "id": 249903474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629316556
    },
    {
        "content": "<p>This took way longer than expected because I wanted to make everything PR-ready (and also because I'm starting to be really tired), but here it is : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotic_equivalent</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.specific_asymptotics</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">asymptotics</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">asymptotics</span> <span class=\"n\">topological_space</span>\n\n<span class=\"c1\">--to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_ne_at_top</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eventually_gt_at_top</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hx.ne.symm</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--to mathlib (maybe rename is_o_one_iff ?)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_o_one_iff_left</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"bp\">ùïÇ</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚à•</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">at_top_basis'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">tendsto_right_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one.trans_le</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h.def</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Ici</span><span class=\"o\">,</span> <span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">this.ne.symm</span><span class=\"o\">),</span>\n        <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">is_o_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">h.eventually</span> <span class=\"o\">(</span><span class=\"n\">eventually_ge_at_top</span> <span class=\"n\">c</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">)],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">hc.ne.symm</span><span class=\"o\">),</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_O_with.eventually_eq_zero_imp</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"bp\">ùïÇ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_O_with</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.bound.mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_O.eventually_eq_zero_imp</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"bp\">ùïÇ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_O</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_O_with</span> <span class=\"k\">in</span> <span class=\"n\">hc.eventually_eq_zero_imp</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"c1\">-- TODO : `tendsto f l at_top` is too strong, `‚àÄ·∂† x in l, ‚à•f x - 1‚à• ‚â• Œµ` should be enough</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.left_comp_log_of_tendsto_at_top'</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">htop.eventually</span> <span class=\"o\">(</span><span class=\"n\">eventually_ne_at_top</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">hg.mp</span> <span class=\"o\">(</span><span class=\"n\">h.symm.is_O.eventually_eq_zero_imp.mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mt</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact1</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_iff_tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">div_one</span><span class=\"o\">,</span> <span class=\"n\">pi.sub_apply</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">real.log_one</span> <span class=\"bp\">‚ñ∏</span> <span class=\"o\">((</span><span class=\"n\">is_equivalent_iff_tendsto_one</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">this.congr'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hfx</span> <span class=\"n\">hgx</span><span class=\"o\">,</span> <span class=\"n\">real.log_div</span> <span class=\"n\">hfx</span> <span class=\"n\">hgx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact2</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n    <span class=\"n\">asymptotics.is_o_one_iff_left.mpr</span> <span class=\"o\">(</span><span class=\"n\">tendsto_norm_at_top_at_top.comp</span> <span class=\"bp\">$</span>\n      <span class=\"n\">real.tendsto_log_at_top.comp</span> <span class=\"n\">htop</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_o.trans</span> <span class=\"n\">fact1</span> <span class=\"n\">fact2</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.left_comp_log_of_tendsto_at_top</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">asymptotics.is_equivalent.left_comp_log_of_tendsto_at_top'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">h.tendsto_at_top_iff.mp</span> <span class=\"n\">htop</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_o.congr_is_equivalent_left</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ho</span><span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_equiv</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">is_o.add</span> <span class=\"o\">(</span><span class=\"n\">is_o.trans</span> <span class=\"n\">h_equiv</span> <span class=\"n\">ho</span><span class=\"o\">)</span> <span class=\"n\">ho</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">real.is_o_id_exp_at_top</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">id</span> <span class=\"n\">real.exp</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_iff_tendsto</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.exp_pos.ne</span> <span class=\"n\">hx.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">real.tendsto_div_pow_mul_exp_add_at_top</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">real.is_o_log_id_at_top</span><span class=\"o\">:</span>\n  <span class=\"n\">is_o</span> <span class=\"n\">real.log</span> <span class=\"n\">id</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"n\">asymptotics.is_o.congr'</span> <span class=\"o\">(</span><span class=\"n\">eventually_eq.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">eventually_gt_at_top</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">real.exp_log</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">real.is_o_id_exp_at_top.comp_tendsto</span> <span class=\"n\">real.tendsto_log_at_top</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_log1_plus_x_under_x_at_top_nhds_0</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">id</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_equivalent.refl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add_is_o</span>\n  <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_one_iff_left.mpr</span> <span class=\"n\">tendsto_norm_at_top_at_top</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">real.is_o_log_id_at_top.congr_is_equivalent_left</span> <span class=\"bp\">$</span>\n  <span class=\"n\">this.left_comp_log_of_tendsto_at_top'</span> <span class=\"n\">tendsto_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto_0</span>\n</code></pre></div>",
        "id": 249922382,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629327820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249922382\">said</a>:</p>\n<blockquote>\n<p>This took way longer than expected because I wanted to make everything PR-ready (and also because I'm starting to be really tired), but here it is : </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotic_equivalent</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.specific_asymptotics</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">asymptotics</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">asymptotics</span> <span class=\"n\">topological_space</span>\n\n<span class=\"c1\">--to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_ne_at_top</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eventually_gt_at_top</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hx.ne.symm</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--to mathlib (maybe rename is_o_one_iff ?)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_o_one_iff_left</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"bp\">ùïÇ</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚à•</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">at_top_basis'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">tendsto_right_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one.trans_le</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h.def</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Ici</span><span class=\"o\">,</span> <span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">this.ne.symm</span><span class=\"o\">),</span>\n        <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">is_o_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">h.eventually</span> <span class=\"o\">(</span><span class=\"n\">eventually_ge_at_top</span> <span class=\"n\">c</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">)],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">hc.ne.symm</span><span class=\"o\">),</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_O_with.eventually_eq_zero_imp</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"bp\">ùïÇ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_O_with</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.bound.mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_O.eventually_eq_zero_imp</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"bp\">ùïÇ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_O</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_O_with</span> <span class=\"k\">in</span> <span class=\"n\">hc.eventually_eq_zero_imp</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"c1\">-- TODO : `tendsto f l at_top` is too strong, `‚àÄ·∂† x in l, ‚à•f x - 1‚à• ‚â• Œµ` should be enough</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.left_comp_log_of_tendsto_at_top'</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">htop.eventually</span> <span class=\"o\">(</span><span class=\"n\">eventually_ne_at_top</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">hg.mp</span> <span class=\"o\">(</span><span class=\"n\">h.symm.is_O.eventually_eq_zero_imp.mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mt</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact1</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_iff_tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">div_one</span><span class=\"o\">,</span> <span class=\"n\">pi.sub_apply</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">real.log_one</span> <span class=\"bp\">‚ñ∏</span> <span class=\"o\">((</span><span class=\"n\">is_equivalent_iff_tendsto_one</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">this.congr'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hfx</span> <span class=\"n\">hgx</span><span class=\"o\">,</span> <span class=\"n\">real.log_div</span> <span class=\"n\">hfx</span> <span class=\"n\">hgx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact2</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n    <span class=\"n\">asymptotics.is_o_one_iff_left.mpr</span> <span class=\"o\">(</span><span class=\"n\">tendsto_norm_at_top_at_top.comp</span> <span class=\"bp\">$</span>\n      <span class=\"n\">real.tendsto_log_at_top.comp</span> <span class=\"n\">htop</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_o.trans</span> <span class=\"n\">fact1</span> <span class=\"n\">fact2</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_equivalent.left_comp_log_of_tendsto_at_top</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span><span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">at_top</span><span class=\"o\">):</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">real.log</span> <span class=\"bp\">‚àò</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">asymptotics.is_equivalent.left_comp_log_of_tendsto_at_top'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">h.tendsto_at_top_iff.mp</span> <span class=\"n\">htop</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">asymptotics.is_o.congr_is_equivalent_left</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ho</span><span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_equiv</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">is_o.add</span> <span class=\"o\">(</span><span class=\"n\">is_o.trans</span> <span class=\"n\">h_equiv</span> <span class=\"n\">ho</span><span class=\"o\">)</span> <span class=\"n\">ho</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">real.is_o_id_exp_at_top</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">id</span> <span class=\"n\">real.exp</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_iff_tendsto</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.exp_pos.ne</span> <span class=\"n\">hx.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">real.tendsto_div_pow_mul_exp_add_at_top</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- to mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">real.is_o_log_id_at_top</span><span class=\"o\">:</span>\n  <span class=\"n\">is_o</span> <span class=\"n\">real.log</span> <span class=\"n\">id</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"n\">asymptotics.is_o.congr'</span> <span class=\"o\">(</span><span class=\"n\">eventually_eq.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">eventually_gt_at_top</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">real.exp_log</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">real.is_o_id_exp_at_top.comp_tendsto</span> <span class=\"n\">real.tendsto_log_at_top</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_log1_plus_x_under_x_at_top_nhds_0</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">id</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_equivalent.refl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add_is_o</span>\n  <span class=\"o\">(</span><span class=\"n\">asymptotics.is_o_one_iff_left.mpr</span> <span class=\"n\">tendsto_norm_at_top_at_top</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">real.is_o_log_id_at_top.congr_is_equivalent_left</span> <span class=\"bp\">$</span>\n  <span class=\"n\">this.left_comp_log_of_tendsto_at_top'</span> <span class=\"n\">tendsto_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto_0</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so beautiful</p>",
        "id": 249922646,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629328061
    },
    {
        "content": "<p>Oh and I forgot some easy generalizations, wait a second</p>",
        "id": 249922719,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629328099
    },
    {
        "content": "<p>I +1 the condition on <code>left_comp_log_of_tendsto_at_top</code>, it should be enough to say that f is eventually not approaching 1.</p>",
        "id": 249922738,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629328123
    },
    {
        "content": "<p>it should be cool to write down that <code>log (1 + x) / x^n ‚Üí 0</code> and <code>log = o(x^n)</code> in fact for any n ‚â• 1 I think (?)</p>",
        "id": 249922794,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629328183
    },
    {
        "content": "<p>for any <code>n</code>!</p>",
        "id": 249923286,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1629328644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249923286\">said</a>:</p>\n<blockquote>\n<p>for any <code>n</code>!</p>\n</blockquote>\n<p>but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>x</mi><mo>‚Üí</mo><mo>+</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">log x ‚Üí +‚àû</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">gx</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">‚àû</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚Üí</mo><mo>+</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">x ‚Üí +‚àû</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">‚àû</span></span></span></span> ?!</p>",
        "id": 249923810,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629329053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249922794\">said</a>:</p>\n<blockquote>\n<p>it should be cool to write down that <code>log (1 + x) / x^n ‚Üí 0</code> and <code>log = o(x^n)</code> in fact for any n ‚â• 1 I think (?)</p>\n</blockquote>\n<p>Yes, it should be pretty easy to generalize to naturals ‚â• 1. It should also be possible to generalize to reals &gt; 0, though it may be a bit harder.</p>",
        "id": 249923816,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629329061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249923816\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249922794\">said</a>:</p>\n<blockquote>\n<p>it should be cool to write down that <code>log (1 + x) / x^n ‚Üí 0</code> and <code>log = o(x^n)</code> in fact for any n ‚â• 1 I think (?)</p>\n</blockquote>\n<p>Yes, it should be pretty easy to generalize to naturals ‚â• 1. It should also be possible to generalize to reals &gt; 0, though it may be a bit harder.</p>\n</blockquote>\n<p>The theorem for the limits already exist, but for reals &gt; 0 do not I believe, so more generalization to do :&gt;</p>",
        "id": 249923841,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629329090
    },
    {
        "content": "<p>I think Ya√´l might have thought that we are talking about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚Üí</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x\\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> ?</p>",
        "id": 249923962,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629329193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249923841\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249923816\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249922794\">said</a>:</p>\n<blockquote>\n<p>it should be cool to write down that <code>log (1 + x) / x^n ‚Üí 0</code> and <code>log = o(x^n)</code> in fact for any n ‚â• 1 I think (?)</p>\n</blockquote>\n<p>Yes, it should be pretty easy to generalize to naturals ‚â• 1. It should also be possible to generalize to reals &gt; 0, though it may be a bit harder.</p>\n</blockquote>\n<p>The theorem for the limits already exist, but for reals &gt; 0 do not I believe, so more generalization to do :&gt;</p>\n</blockquote>\n<p>Which theorem are you thinking about ? (the one that already exists)</p>",
        "id": 249924117,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629329367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249924117\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249923841\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249923816\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249922794\">said</a>:</p>\n<blockquote>\n<p>it should be cool to write down that <code>log (1 + x) / x^n ‚Üí 0</code> and <code>log = o(x^n)</code> in fact for any n ‚â• 1 I think (?)</p>\n</blockquote>\n<p>Yes, it should be pretty easy to generalize to naturals ‚â• 1. It should also be possible to generalize to reals &gt; 0, though it may be a bit harder.</p>\n</blockquote>\n<p>The theorem for the limits already exist, but for reals &gt; 0 do not I believe, so more generalization to do :&gt;</p>\n</blockquote>\n<p>Which theorem are you thinking about ? (the one that already exists)</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.tendsto_pow_mul_exp_neg_at_top_nhds_0\">docs#real.tendsto_pow_mul_exp_neg_at_top_nhds_0</a></p>",
        "id": 249924178,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629329408
    },
    {
        "content": "<p>Oh yeah the <code>exp</code> one</p>",
        "id": 249924379,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629329576
    },
    {
        "content": "<p>Indeed I can't find it for rpow</p>",
        "id": 249924566,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629329704
    },
    {
        "content": "<p>Also, feel free to PR any part of my code if you want to take care of it.</p>",
        "id": 249924641,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629329760
    },
    {
        "content": "<p>It might be feasible to make it so that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mrow><mi>x</mi><mo>‚Üí</mo><mo>+</mo><mi mathvariant=\"normal\">‚àû</mi></mrow></msub><msup><mi>x</mi><mi>Œ±</mi></msup><mi>exp</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mo>‚àí</mo><mi>Œ≤</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\lim_{x \\to +\\infty} x^{\\alpha} \\exp(-\\beta x) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mtight\">+</span><span class=\"mord mtight\">‚àû</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord\">‚àí</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">Œ≤</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ±</mi><mo separator=\"true\">,</mo><mi>Œ≤</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\alpha, \\beta &gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">Œ≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> would be the general theorem, so we could have the generalization over reals with limits of form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><msup><mrow><mi>log</mi><mo>‚Å°</mo></mrow><mi>Œ≤</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>x</mi><mi>Œ±</mi></msup></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\dfrac{\\log^{\\beta}(x)}{x^{\\alpha}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.296448em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6104479999999999em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9334479999999998em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">Œ≤</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>",
        "id": 249924698,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629329779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249924641\">said</a>:</p>\n<blockquote>\n<p>Also, feel free to PR any part of my code if you want to take care of it.</p>\n</blockquote>\n<p>If you prefer to do it, feel free, in all cases, I will try to PR some parts of my project (Ostrowski theorems) so it will be an arduous path, if I come around your parts and no PR is opened, or you do not have time, I am okay with shepherding it and doing the required changes :)</p>",
        "id": 249924752,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629329849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249924752\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249924641\">said</a>:</p>\n<blockquote>\n<p>Also, feel free to PR any part of my code if you want to take care of it.</p>\n</blockquote>\n<p>If you prefer to do it, feel free, in all cases, I will try to PR some parts of my project (Ostrowski theorems) so it will be an arduous path, if I come around your parts and no PR is opened, or you do not have time, I am okay with shepherding it and doing the required changes :)</p>\n</blockquote>\n<p>I can do it, but I have other PRs to work on, so it might wait a little. If you're okay with that then I'll take care of the PR.</p>",
        "id": 249925208,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1629330252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249925208\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249924752\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Asymptotics.20conversions.20from.20equivalents/near/249924641\">said</a>:</p>\n<blockquote>\n<p>Also, feel free to PR any part of my code if you want to take care of it.</p>\n</blockquote>\n<p>If you prefer to do it, feel free, in all cases, I will try to PR some parts of my project (Ostrowski theorems) so it will be an arduous path, if I come around your parts and no PR is opened, or you do not have time, I am okay with shepherding it and doing the required changes :)</p>\n</blockquote>\n<p>I can do it, but I have other PRs to work on, so it might wait a little. If you're okay with that then I'll take care of the PR.</p>\n</blockquote>\n<p>Definitely not in a hurry, thanks!</p>",
        "id": 249925541,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1629330549
    }
]