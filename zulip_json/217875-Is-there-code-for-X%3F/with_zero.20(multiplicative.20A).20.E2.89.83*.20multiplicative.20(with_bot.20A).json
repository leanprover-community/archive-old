[
    {
        "content": "<p>Do we have something like this anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">with_zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">with_zero.to_additive</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">multiplicative</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_equiv.refl</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_zero.to_additive_zero</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero.to_additive</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">multiplicative.of_add</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_zero.to_additive_coe</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero.to_additive</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">multiplicative.of_add</span> <span class=\"o\">(</span><span class=\"n\">x.to_add</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_zero.to_additive_symm_bot</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero.to_additive.symm</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_zero.to_additive_coe_of_add</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero.to_additive.symm</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">multiplicative.of_add</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 272980650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645636823
    },
    {
        "content": "<p>I ask because this combined with <a href=\"https://github.com/leanprover-community/mathlib/pull/8889\">#8889</a> gives an <code>if</code>-free definition of <a href=\"https://github.com/leanprover-community/mathlib/pull/12245\">#12245</a>'s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">infty_valuation_def</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ratfunc</span> <span class=\"n\">Fq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">with_zero.to_additive.symm</span> <span class=\"bp\">$</span>\n  <span class=\"n\">multiplicative.of_add</span> <span class=\"o\">(</span><span class=\"n\">r.num.degree.map</span> <span class=\"n\">coe</span> <span class=\"bp\">-</span> <span class=\"n\">r.denom.degree.map</span> <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(cc <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>)</p>",
        "id": 272981162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645637022
    },
    {
        "content": "<p>As far as I know this is not in mathlib.<br>\nI think it would be nice to have the <code>with_top</code> version of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">with_zero.to_additive</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">multiplicative</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_equiv.refl</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>It might help to easily relate the <code>valuation</code> <code>infty_valuation</code> with its associated <code>add_valuation</code> (and more generally for other nonarchimedean valuations).</p>",
        "id": 272986350,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1645638838
    },
    {
        "content": "<p>Currently in mathlib we seem to have more API for <code>valuation</code> and <code>with_zero</code> than for <code>add_valuation</code> and <code>with_top</code>, so I just use <code>valuation</code>, but it would be nice if there were a simple way to convert from one to the other.</p>",
        "id": 272986650,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1645638926
    },
    {
        "content": "<p><del>You're right, <code>with_top</code> is probably the right choice, not <code>with_bot</code>, since that also makes this  preserve the ordering relation.</del></p>",
        "id": 272993616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645641728
    },
    {
        "content": "<p>I retract that comment, <code>with_bot</code> is the one that preserves order after all</p>",
        "id": 272993829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645641878
    },
    {
        "content": "<p>With valuations in particular, Maria's convention is the useful one, because additive valuations like \"v(n) = the highest power of p dividing n\" have v(0)=+∞ and when converting to a multiplicative valuation you reverse the order.</p>",
        "id": 272994434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645642195
    },
    {
        "content": "<p>v_mult(n)=e^v_add(n) with 0&lt;e&lt;1 (traditionally e=1/p)</p>",
        "id": 272994620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645642267
    },
    {
        "content": "<p>I can't quite make the precise connection between your comment and my isomorphism above, although I can believe it's there</p>",
        "id": 272994889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645642389
    },
    {
        "content": "<p>If G is a totally ordered abelian group then with_bot G and with_top G are order isomorphic via <code>inv</code>.</p>",
        "id": 272995072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645642481
    },
    {
        "content": "<p>Yes, so I think I'd argue you should be chaining the equiv I suggest above with such an <code>inv</code> order isomorphism</p>",
        "id": 272995133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645642521
    },
    {
        "content": "<p>I guess we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.inv\">docs#order_iso.inv</a> but no <code>with_*</code> version?</p>",
        "id": 272995192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645642557
    },
    {
        "content": "<p>Hmm, I still think I'm missing something - <code>order_iso.inv : G ≃o order_dual G</code>, so either the total order changes things in a way I can't see, or you mean that <code>with_top G ≃o with_bot (order_dual G)</code> via inv.</p>",
        "id": 272995418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645642669
    },
    {
        "content": "<p>You're rght -- there is an unsolvable \"op\" problem here. Additive valuations have the axiom v(ab)&gt;= min v(a) v(b) and multiplicative valuations have the axiom v(ab) &lt;= max v(a) v(b) and this is already culturally embedded. This is what's behind Maria's comment.</p>",
        "id": 272995954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645642898
    },
    {
        "content": "<p>Right, so there's an <code>order_dual</code> hiding in the difference too</p>",
        "id": 272997578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645643632
    },
    {
        "content": "<p>It took me forever, but I think you're describing <code>foo</code> or <code>bar</code> in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">control.equiv_functor</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">order_iso.with_bot_dual</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">order_iso.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">order_iso.with_top_dual</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">with_top</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">order_iso.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">order_iso.with_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_top</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">with_top</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_equiv</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">equiv_functor.map_equiv</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">equiv_functor.map_equiv</span><span class=\"o\">,</span> <span class=\"n\">equiv_functor.map</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">with_top.none_eq_top</span><span class=\"o\">,</span> <span class=\"n\">with_top.some_eq_coe</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e.map_rel_iff</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">with_top</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">order_iso.with_top</span> <span class=\"o\">(</span><span class=\"n\">order_iso.inv</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">bar.trans</span> <span class=\"n\">order_iso.with_top_dual.symm</span>\n</code></pre></div>",
        "id": 272998880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645644247
    },
    {
        "content": "<p>Right! We use <code>foo</code> and then <code>to_additive</code> when translating from mult to add</p>",
        "id": 272999313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645644461
    },
    {
        "content": "<p>Oh duh, did I forget to add the above <code>with_top</code>/<code>with_bot</code> equivalences?</p>",
        "id": 272999511,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645644544
    },
    {
        "content": "<p>The other important one we're missing is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">order_iso.with_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_top</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">with_top</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 272999590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645644590
    },
    {
        "content": "<p>Have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/11677\">#11677</a> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 272999808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645644679
    },
    {
        "content": "<p>I needed those for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lattice_hom\">docs#lattice_hom</a> in order to construct the free functor from <code>Lattice</code> to <code>BoundedLattice</code>.</p>",
        "id": 272999889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645644718
    },
    {
        "content": "<p>I don't see the <code>order_iso</code> version there</p>",
        "id": 272999948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645644728
    },
    {
        "content": "<p>No, it's not there, but I was about to add it</p>",
        "id": 273000107,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645644820
    },
    {
        "content": "<p>I edited it above</p>",
        "id": 273000859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645645198
    },
    {
        "content": "<p>The proof is gross, we should probably have an <code>equiv_functor</code> instance for <code>with_top</code></p>",
        "id": 273000931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645645214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/with_zero.20.28multiplicative.20A.29.20.E2.89.83*.20multiplicative.20.28with_bot.20A.29/near/272998880\">said</a>:</p>\n<blockquote>\n<p>It took me forever, but I think you're describing <code>foo</code> or <code>bar</code> in:<br>\n&lt;snip&gt;</p>\n</blockquote>\n<p>I PR'd these three isos in <a href=\"https://github.com/leanprover-community/mathlib/pull/12264\">#12264</a></p>",
        "id": 273034629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645664591
    },
    {
        "content": "<p>The last pieces are in <a href=\"https://github.com/leanprover-community/mathlib/pull/12275\">#12275</a>. I'm not sure exactly how useful these are, but I think with all of them together you can push the type tags around while preserving structure.</p>",
        "id": 273117557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645721887
    },
    {
        "content": "<p>You should definitely have a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/GroupWithZero\">branch#GroupWithZero</a></p>",
        "id": 273118098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645722087
    },
    {
        "content": "<p>Is there any overlap? I don't see it</p>",
        "id": 273120123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645722912
    },
    {
        "content": "<p>My <code>monoid_hom.with_zero</code> is very close to your <code>mul_equiv.with_zero_congr</code>.</p>",
        "id": 273122304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645723828
    },
    {
        "content": "<p>It's also very close to the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_zero.map\">docs#with_zero.map</a> we already have, right?</p>",
        "id": 273126075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645725532
    },
    {
        "content": "<p>Yeah</p>",
        "id": 273142029,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645732890
    }
]