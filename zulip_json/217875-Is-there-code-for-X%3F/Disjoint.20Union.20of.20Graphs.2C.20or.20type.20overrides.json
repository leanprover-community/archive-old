[
    {
        "content": "<p>Hello,  I'm not sure if this belongs here or in new-members, but I am trying to define the disjoint union for a family of graphs;  where we just want <code>a b : Σ m, β m</code> to be adjacent when they are in the same graph and adjacent in it so <code>adj _ a.snd b.snd -&gt; adj _ a b</code> but this doesn't typecheck since <code>a.snd</code> and <code>b.snd</code> have type <code>β a.fst</code> and <code>β b.fst</code>.  The only case we care about is when theyre in the same graph <code>a.fst = b.fst</code> anyway, so adding that in explicitly is fine, and we modify it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ds_union_broke</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">)}</span>\n  <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span> <span class=\"bp\">→</span>\n    <span class=\"n\">simple_graph.adj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a.snd</span> <span class=\"n\">b.snd</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>they still dont typecheck in the adjacency condition, but now by assumption these are equal.  So I was wondering if there was someway we could tell Lean to allow it.  </p>\n<p>I was able to modify it by adding a coercion, it typechecks just fine now, but its too unwieldy for me to prove anything with it.  I think the rw in the coe isn't explicit enough, but I don't know of any other approach</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">worthless_coe</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ds_union</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">)}</span>\n  <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span> <span class=\"bp\">→</span>\n    <span class=\"n\">simple_graph.adj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">worthless_coe</span> <span class=\"n\">ᾰ</span> <span class=\"n\">a.snd</span><span class=\"o\">)</span> <span class=\"n\">b.snd</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"c1\">-- cant prove symm, but loopless is easy</span>\n</code></pre></div>\n<p>So I was wondering how people usually deal with Σ types and how to force lean to bend the knee in these situations.</p>",
        "id": 264364569,
        "sender_full_name": "Sigma",
        "timestamp": 1639083201
    }
]