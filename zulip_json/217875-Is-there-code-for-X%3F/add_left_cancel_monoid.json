[
    {
        "content": "<p>I can't find the name of the structure in which addition is left-cancellative, like <code>add_left_cancel_semigroup</code>, but with a zero that plays well with the addition, like in an <code>add_monoid</code>. My natural guess would be <code>add_left_cancel_monoid</code>, but this doesn't exist. I just want to cover <code>â„•</code> and groups, in fact, so any typeclass containing the two and with the two above properties would be enough for me.</p>\n<p>By the way, this kind of question would not make sense with a structure like the one for topological spaces, with a rather small spine with the main players, and mixins to add all kinds of properties. I wish the algebraic hierarchy would also be like this...</p>",
        "id": 193544782,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586503988
    },
    {
        "content": "<p>Why not just define it? It's not difficult and you get all the theorems for free</p>",
        "id": 193544878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">add_left_cancel_monoid</span> <span class=\"n\">A</span> <span class=\"kn\">extends</span> <span class=\"n\">add_left_cancel_semigroup</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"n\">A</span>\n</pre></div>\n\n\n<p>add instances for groups and nat and you are ready to go</p>",
        "id": 193544975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504207
    },
    {
        "content": "<p>Sure, but then I will also need to add an instance for <code>nnreal</code>, and maybe some other guy I am not thinking of.</p>",
        "id": 193545009,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586504253
    },
    {
        "content": "<p>only if you need it</p>",
        "id": 193545013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504265
    },
    {
        "content": "<p>With mixins, there would be no need to define a new class.</p>",
        "id": 193545020,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586504275
    },
    {
        "content": "<p>I'm not convinced that this is actually saving much in this instance</p>",
        "id": 193545081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504299
    },
    {
        "content": "<p>what I described seems pretty easy</p>",
        "id": 193545094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504313
    },
    {
        "content": "<p>And the natural place for it is in core...</p>",
        "id": 193545108,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586504332
    },
    {
        "content": "<p>No, you can do that anywhere</p>",
        "id": 193545115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504341
    },
    {
        "content": "<p>there is no requirement that this be in core</p>",
        "id": 193545123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504348
    },
    {
        "content": "<p>mathlib does this in a few places, inserting new classes in the middle of the hierarchy</p>",
        "id": 193545150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504375
    },
    {
        "content": "<p>Sure, I am just saying that the <em>natural</em> place is in core, in <code>init/algebra/groups.lean</code>, close to <code>add_monoid</code> and <code>add_left_cancel_semigroup</code>.</p>",
        "id": 193545216,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586504406
    },
    {
        "content": "<p>maybe, but that isn't a reason to complain about it, that's an organizational decision</p>",
        "id": 193545238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504435
    },
    {
        "content": "<p>Actually it seems that the winds are blowing to take more of the algebraic hierarchy out of core anyway</p>",
        "id": 193545254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504465
    },
    {
        "content": "<p>I don't want to be dismissive about mixins, but it is a complicated issue that affects many things and I think that any reinvestigation should be carefully thought out; single examples aren't enough unless the difference is really stark</p>",
        "id": 193545393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586504620
    }
]