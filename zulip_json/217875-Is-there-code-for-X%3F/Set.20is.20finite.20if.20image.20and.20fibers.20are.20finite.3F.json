[
    {
        "content": "<p>Do we have something like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finite.of_finite_image_and_fibers</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span>\n</code></pre></div>\n<p>(This could also be an <code>iff</code> statement, I suppose.)<br>\nThere is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.of_finite_image\">docs#set.finite.of_finite_image</a>, but this requires the map to be injective.</p>",
        "id": 317204553,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671642033
    },
    {
        "content": "<p>Here is a proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finite.of_finite_image_and_fibers</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">set.Union_exists</span><span class=\"o\">,</span> <span class=\"n\">set.bUnion_and'</span><span class=\"o\">,</span> <span class=\"n\">set.Union_Union_eq_right</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union</span><span class=\"o\">,</span>\n               <span class=\"n\">set.mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.finite.subset</span> <span class=\"o\">(</span><span class=\"n\">set.finite.bUnion</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 317225113,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671648209
    },
    {
        "content": "<p>And a similar kind of statement that might also be missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_iff_infinite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bij_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.infinite</span> <span class=\"bp\">↔</span> <span class=\"n\">t.infinite</span>\n</code></pre></div>",
        "id": 317243705,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671654669
    },
    {
        "content": "<p><code>infinite_iff_infinite</code> is close to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.infinite_iff\">docs#equiv.infinite_iff</a></p>",
        "id": 317664441,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1671846127
    },
    {
        "content": "<p>if you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bij_on.equiv\">docs#set.bij_on.equiv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.infinite_coe_iff\">docs#set.infinite_coe_iff</a></p>",
        "id": 317664563,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1671846254
    },
    {
        "content": "<p>OK, thanks. My proof was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_iff_not</span><span class=\"o\">,</span> <span class=\"n\">not_infinite</span><span class=\"o\">,</span> <span class=\"n\">not_infinite</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">set.bij_on.image_eq</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">finite.image</span> <span class=\"n\">f</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n          <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">finite.of_finite_image</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">bij_on.inj_on</span> <span class=\"n\">h</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set.bij_on.image_eq</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but yours is a one-liner</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">set.infinite_coe_iff.symm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">equiv.infinite_iff</span> <span class=\"o\">(</span><span class=\"n\">set.bij_on.equiv</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">set.infinite_coe_iff</span>\n</code></pre></div>",
        "id": 317709716,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671881609
    },
    {
        "content": "<p>I somehow tried to avoid using subtypes...</p>",
        "id": 317709778,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671881642
    }
]