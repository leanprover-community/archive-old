[
    {
        "content": "<p>We have <code>unique</code> but it's Type-valued. I think I want to say \"I have one element\" in a Prop-valued way. I went for the definition of <code>is_singleton</code> below (and proved the lemmas I need for the application in LTE), but is this not the sort of thing I should be doing? Is this in the library already and I just missed it? If not, is there a reason it's not there?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_singleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">is_singleton.default</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_singleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nonempty.some</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">punit.is_singleton</span> <span class=\"o\">:</span> <span class=\"n\">is_singleton</span> <span class=\"o\">(</span><span class=\"n\">punit</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">punit.unique</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_singleton.to_subsingleton</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">is_singleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">subsingleton</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">rcases</span> <span class=\"n\">hX</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_singleton_iff_forall_bijective_to_punit</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_singleton</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">finj</span> <span class=\"n\">fsurj</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">using</span> <span class=\"n\">fsurj</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">g</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finj</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_singleton_iff_forall_bijective_to_is_singleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_singleton</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">is_singleton</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"n\">Y</span> <span class=\"n\">hY</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hY.to_subsingleton</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">punit</span> <span class=\"n\">punit.is_singleton</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">finj</span> <span class=\"n\">fsurj</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">using</span> <span class=\"n\">fsurj</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">g</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finj</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_singleton_iff_exists_bijective_to_punit</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_singleton</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">finj</span><span class=\"o\">,</span> <span class=\"n\">fsurj</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">using</span> <span class=\"n\">fsurj</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">g</span> <span class=\"n\">punit.star</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finj</span> <span class=\"bp\">$</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_singleton_iff_exists_bijective_to_is_singleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_singleton</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">is_singleton</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">punit.is_singleton</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">)],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">hY</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">finj</span><span class=\"o\">,</span> <span class=\"n\">fsurj</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">using</span> <span class=\"n\">fsurj</span><span class=\"o\">,</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hY.to_subsingleton</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">g</span> <span class=\"n\">hY.default</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finj</span> <span class=\"bp\">$</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260587918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636308372
    },
    {
        "content": "<p>Can't you just use [subsingleton X] [nonempty X]?</p>",
        "id": 260588352,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636309016
    },
    {
        "content": "<p>Oh that's maybe why it's not there.</p>",
        "id": 260588368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636309047
    },
    {
        "content": "<p>The one thing I don't know how to do is conjure a term x : X, without doing cases on the nonempty hyp. Probably doing it on id h, to retain it in the TC cache.</p>",
        "id": 260588439,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636309130
    },
    {
        "content": "<p>Use \"arbitrary\", I guess</p>",
        "id": 260588456,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636309154
    },
    {
        "content": "<p><code>obtain ⟨x⟩ := id ‹nonempty α›</code> is probably reasonable idiomatic</p>",
        "id": 260588536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636309228
    },
    {
        "content": "<p>Do we have the lemma that conjures <code>nonempty (unique X)</code> from <code>[subsingleton X] [nonempty X]</code>?</p>",
        "id": 260588640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636309355
    },
    {
        "content": "<p>We have the defn that makes a unique X from data and subsingleton X. Probably not yet what you're asking about.</p>",
        "id": 260588831,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636309625
    },
    {
        "content": "<p>What's that def?</p>",
        "id": 260589333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636310432
    },
    {
        "content": "<p>Ah found it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">casesI</span> <span class=\"o\">‹</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">unique_of_subsingleton</span><span class=\"o\">,</span>  <span class=\"c1\">-- put `unique X` in the context</span>\n</code></pre></div>",
        "id": 260589438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636310622
    },
    {
        "content": "<p>I think it would be nice to have a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#inhabit\">tactic#inhabit</a> that allows you to specify an alias for the default element.</p>",
        "id": 260590056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636311463
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inhabit</span> <span class=\"n\">X</span> <span class=\"k\">with</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 260590062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636311472
    },
    {
        "content": "<p>This could be as simple as being a shortcut for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inhabit</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 260590124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636311514
    },
    {
        "content": "<p>Why do you have all this <code>unfreezingI</code>/<code>haveI</code>/etc. stuff if <code>is_singleton</code> is not a class?</p>",
        "id": 260591393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636313293
    },
    {
        "content": "<p>You mean in <code>is_singleton.to_subsingleton</code>? I have no idea. I tried doing cases and I got the *frozen local instance\" error</p>",
        "id": 260594312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636317541
    },
    {
        "content": "<p>MWE (note that <code>nonempty</code> is a class):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_singleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_singleton.to_subsingleton</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">is_singleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">subsingleton</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- cases hX, -- \"failed to revert 'hX', it is a frozen local instance \"</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">rcases</span> <span class=\"n\">hX</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260596236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636320239
    },
    {
        "content": "<p>this does seem like a bug, right? as it shouldn't be in the instance cache at all</p>",
        "id": 260596972,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636321218
    },
    {
        "content": "<p>yeah, it's definitely a bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_singleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_singleton.to_subsingleton</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">is_singleton</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">subsingleton</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--rw is_singleton at hX ; works if you do this!</span>\n  <span class=\"c1\">--have := classical.arbitrary (unique X) ; no instance error</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260597057,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636321353
    },
    {
        "content": "<p>I think lean is seeing through <code>is_singleton</code> and finding the <code>class</code> attribute on  <code>nonempty</code></p>",
        "id": 260599412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636324404
    },
    {
        "content": "<p>but if you <code>rw</code> it to the <code>nonempty</code> term you don't get the issue</p>",
        "id": 260600098,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636325356
    },
    {
        "content": "<p>I am confused how because <a href=\"https://github.com/leanprover-community/lean/blob/91905440982bf28d2f1da4da534d5b126a595a54/src/library/type_context.cpp#L346\">the code seems pretty bulletproof</a></p>",
        "id": 260600163,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636325414
    }
]