[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_map_seq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Is this true? I want it for filters.</p>",
        "id": 210649006,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600576478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_map_seq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">bind_map_eq_seq</span><span class=\"o\">,</span> <span class=\"n\">bind_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">bind_pure_comp_eq_map</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 210649121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600576759
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 210649885,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600578379
    },
    {
        "content": "<p>Have you tried using <code>simp with norm_monad</code>. That might do it completely automatically</p>",
        "id": 210649897,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600578446
    },
    {
        "content": "<p>Actually <code>norm_functor</code> might be enough</p>",
        "id": 210649900,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600578476
    },
    {
        "content": "<p>Oh nice, that also works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_map_seq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"k\">with</span> <span class=\"n\">functor_norm</span>\n</code></pre></div>\n\n\n<p>However, instantiating to filters doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map_map_seq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">map_map_seq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">filter</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n <span class=\"c1\">-- Goal: ⊢ filter.has_seq = applicative.to_has_seq</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>So clearly I'm doing something I'm not supposed to do...</p>\n<p>I might be multiple levels deep into <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>. My previous goal was the following lemma, where after the following partial proof I wanted to rewrite with the aforementioned lemma.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">list</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">monoid</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">tendsto_pure_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tendsto</span><span class=\"o\">,</span> <span class=\"n\">pure_le_iff</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">continuous_iff_continuous_at</span><span class=\"o\">],</span> <span class=\"n\">intros</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">continuous_at</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nhds_nil</span><span class=\"o\">,</span> <span class=\"n\">mem_of_nhds</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nhds_cons</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210650204,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600579139
    },
    {
        "content": "<p>Your lemma only needs <code>applicative m</code> and <code>is_lawful_applicative m</code> as an assumption. When you change that, your monad will no longer be converted into an applicative in the general lemma</p>",
        "id": 210650315,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600579365
    },
    {
        "content": "<p>I see, that works. Thanks!<br>\nIt still seems to be a design flaw that <code>filter</code> has multiple transitive <code>has_seq</code> instances. Or is that inevitable?</p>",
        "id": 210650415,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600579563
    },
    {
        "content": "<p>No, that seems like a mistake. In <code>filter/basic.lean</code>, line 1452:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">applicative</span> <span class=\"n\">filter</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">seq</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>What happens if you delete that line?</p>",
        "id": 210650504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600579746
    },
    {
        "content": "<p>Having a separate <code>monad</code> and <code>applicative</code> instance is useful for monad transformers because you have different assumptions for each:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">applicative</span> <span class=\"o\">(</span><span class=\"n\">foo_t</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">foo_t</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>But that does not apply for <code>filter</code></p>",
        "id": 210650553,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600579829
    },
    {
        "content": "<p>A couple of things break later on (not too many). It seems to be done intentionally, since line 1438 says:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- this section needs to be before applicative, otherwise the wrong instance will be chosen</span>\n</code></pre></div>",
        "id": 210650627,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600579974
    },
    {
        "content": "<p>Actually, here's the answer:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean#L1387-L1393\">https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean#L1387-L1393</a></p>",
        "id": 210650628,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600579977
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 210650646,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600580028
    },
    {
        "content": "<p>The <code>applicative</code> and <code>monad</code> definitions are distinct, that's why you have to pick the right one in the lemma that you were proving in this thread</p>",
        "id": 210650694,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600580099
    }
]