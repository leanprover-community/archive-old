[
    {
        "content": "<p>Is there no <code>instance nonzero (fin n.succ.succ)</code> defined anywhere? Proving <code>0 \\ne 1</code> for those sorts of <code>fin</code> types would be much easier. Should something like this go <code>data/fin</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">nonzero_fin</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_veq</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 202253172,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593375547
    },
    {
        "content": "<p>I think if you want to use <code>fin n</code> as a ring using <code>zmod</code> instead works better as it has more support, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.nonzero\">docs#zmod.nonzero</a> for instance, which takes <code>fact (1 &lt; n)</code> as a (typeclass) argument.</p>",
        "id": 202254136,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593376917
    },
    {
        "content": "<p>It's really trying to get <code>matrix.one_val_ne</code> to work in a pleasant way for matrices of <code>fin 2</code> or larger.</p>",
        "id": 202254211,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593377012
    },
    {
        "content": "<p>In that case it sounds like you aren't really using the ring structure? You just want to say that if the cardinality of a fintype is at least 2 then [something]? I guess the mathlib way is not to prefer <code>fin n</code> as the indexing set of a matrix over any other fintype.</p>",
        "id": 202254446,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593377307
    },
    {
        "content": "<p>Or maybe I misunderstood, do you want matrices valued in <code>fin n</code> or with <code>fin n</code> as the index set?</p>",
        "id": 202254458,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593377340
    },
    {
        "content": "<p>I understand that matrices can be indexed with any fintype. It's easiest to instantiate a matrix of a fixed dimension with fin n, unless I don't understand something</p>",
        "id": 202257350,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593381288
    },
    {
        "content": "<p>Sure if you want an explicit matrix to play with thats definitely true, but as you mentioned \"get matrix.one_val_ne to work\" I thought you wanted to prove a library result about something. If you say a bit more what you mean by getting that result to work it will be clearer for me.</p>",
        "id": 202257427,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593381448
    },
    {
        "content": "<p>It seems like you want to prove <code>0 ≠ 1</code> for <code>fin 2</code>. I think it will be better not to use type classes for this. (Especially since <code>matrix.one_val_ne</code> doesn't want a type class argument anyways.)</p>",
        "id": 202259529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593385298
    }
]