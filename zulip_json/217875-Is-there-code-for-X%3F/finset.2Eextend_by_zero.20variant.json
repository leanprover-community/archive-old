[
    {
        "content": "<p>Is something like this already somewhere? I didn't see anything in <code>algebra.big_operators.basic</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.sum_extend_by_zero'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">finset.sum_add_sum_compl</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250020484,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629394947
    },
    {
        "content": "<p>Yes there is something close</p>",
        "id": 250020523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629394968
    },
    {
        "content": "<p>!docs#finset.sum_extend_by_zero</p>",
        "id": 250020847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629395093
    },
    {
        "content": "<p>Argh! Not on Discord.</p>",
        "id": 250020863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629395102
    },
    {
        "content": "<p>Is this what you were looking for?</p>",
        "id": 250021065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629395179
    },
    {
        "content": "<p>That lemma's why this got a <code>'</code> -- I want to change the bounds of the sum to <code>finset.univ</code></p>",
        "id": 250021223,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629395261
    },
    {
        "content": "<p>I guess it could also be a <code>finset.sum_subset_extend</code>, where you can extend the bound while introducing an <code>ite</code>.</p>",
        "id": 250021385,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629395339
    },
    {
        "content": "<p>Ah yeah I assume not then.</p>",
        "id": 250021411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629395351
    },
    {
        "content": "<p>Does it exist if you phrase it in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.indicator\">docs#set.indicator</a>?</p>",
        "id": 250022137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629395690
    },
    {
        "content": "<p>I'd forgotten about that function, but I don't see anything.</p>\n<p>Maybe another question is whether there's something pre-existing for the following <code>finset.sum_subset_extend</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.sum_subset_extend</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finset.sum_subset</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.sum_attach</span><span class=\"o\">],</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">ht</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">],</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span><span class=\"n\">finset.sum_attach</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.extend_by_zero'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sum_subset_extend</span> <span class=\"o\">(</span><span class=\"n\">subset_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250022796,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629395967
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sum_indicator_subset\">docs#set.sum_indicator_subset</a>?</p>",
        "id": 250023503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629396224
    },
    {
        "content": "<p>Thanks, <code>sum_extend_by_zero'</code> is equivalent to the following dance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">set.sum_indicator_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subset_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set.indicator_apply</span><span class=\"o\">,</span> <span class=\"n\">mem_coe</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 250025485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629396961
    },
    {
        "content": "<p>Is <code>refl</code> not enough to close the goal after the rw?</p>",
        "id": 250026781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629397463
    },
    {
        "content": "<p>It's mid-proof.  I wanted <code>finset.sum_extend_by_zero'</code> specifically to get a sum into a particular form.</p>",
        "id": 250027111,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629397600
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/7d8fc747f273c0be4f7a3f384c43cb69320daeec/src/combinatorics/simple_graph/adj_matrix.lean#L183\">https://github.com/leanprover-community/mathlib/blob/7d8fc747f273c0be4f7a3f384c43cb69320daeec/src/combinatorics/simple_graph/adj_matrix.lean#L183</a></p>",
        "id": 250027400,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629397733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.indicator_function</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.sum_extend_by_zero'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">set.sum_indicator_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.subset_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>was what I was thinking of</p>",
        "id": 250039461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629402423
    },
    {
        "content": "<p>I guess<code>set.indicator</code> is unpleasant here because it has the wrong decidable instance</p>",
        "id": 250039496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629402439
    },
    {
        "content": "<p>So I guess we should rewrite every proof in the file about <code>set.indicator</code> to be about <code>ite</code>, and then reprove the <code>indicator</code> / <code>classical.decidable</code> version as a special case?</p>",
        "id": 250039821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629402591
    },
    {
        "content": "<p>Another pain point is that <code>set.indicator</code> is for sets, but these are finsets. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Have you thought about making <code>finset</code> a <code>set_like</code>? Then <code>indicator</code> could be generalized for any <code>set_like</code>, and the <code>set.indicator_apply</code> lemma could put things in terms of the correct <code>has_mem</code>.</p>",
        "id": 250041693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629403341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.2Eextend_by_zero.20variant/near/250039496\">said</a>:</p>\n<blockquote>\n<p>I guess<code>set.indicator</code> is unpleasant here because it has the wrong decidable instance</p>\n</blockquote>\n<p>I was just using <code>set.indicator</code> and discovered that it contains <code>classical</code> decidability instances in its definition. This should be fixed, right?</p>",
        "id": 256748701,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633703537
    },
    {
        "content": "<p><code>classical</code> decidability instances in definitions are a deliberate design choice</p>",
        "id": 256749226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633703756
    },
    {
        "content": "<p>They just should never appear directly in lemmas</p>",
        "id": 256749282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633703765
    },
    {
        "content": "<p>If a decidability instance in a <em>definition</em> is tripping you up, then either:</p>\n<ul>\n<li>Your use case requires definitional equality and you're probably in for a bad time anyway</li>\n<li>You're unfolding when you should be using API</li>\n</ul>",
        "id": 256749395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633703810
    },
    {
        "content": "<p>OK thanks, let me see if I can resolve my situation with this useful guide.</p>",
        "id": 256749538,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633703870
    },
    {
        "content": "<p>FWIW I just used the same pattern as your example above: <code>convert</code>, <code>ext</code>, <code>congr</code> instead of <code>exact</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/9629/files#diff-ece920d3095b577efda5ca995226b64d018390dfbefdb264722220712d38682bR727\">https://github.com/leanprover-community/mathlib/pull/9629/files#diff-ece920d3095b577efda5ca995226b64d018390dfbefdb264722220712d38682bR727</a></p>",
        "id": 256751448,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633704632
    }
]