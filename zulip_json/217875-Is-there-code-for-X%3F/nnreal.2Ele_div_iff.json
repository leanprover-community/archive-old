[
    {
        "content": "<p>There are a few lemmas for <code>linear_ordered_field</code> that still work for <code>ℝ≥0</code>, such as the example below.</p>\n<p>Do they already exist in mathlib? Is there a better way to prove things like this? Can they be generalized beyond <code>ℝ≥0</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nnreal.le_div_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a_pos</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b_pos</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c_pos</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_div_iff</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240173823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621942571
    },
    {
        "content": "<p>Ah! Found it. One of the four is there, and the others can be proved the same way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nnreal.le_div_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">le_div_iff</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">$</span> <span class=\"n\">pos_iff_ne_zero.2</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal.le_div_iff'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">le_div_iff'</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">$</span> <span class=\"n\">pos_iff_ne_zero.2</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal.div_le_iff'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">div_le_iff'</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">$</span> <span class=\"n\">pos_iff_ne_zero.2</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 240174716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621943124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> To what extend can (are) these lemmas be generalized with the ordered refactor (<a href=\"https://github.com/leanprover-community/mathlib/issues/7645\">#7645</a>)?</p>",
        "id": 240237605,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621970855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> , the refactor has not reached <code>ring</code>s yet: I am still generalizing algebraic structures with a single operation.  Rings are next, of course, but I have not tested them yet.  I think that this PR should go as is now and after the <code>ordered</code> refactor will have progressed, <code>data</code> will be modified to use it.</p>",
        "id": 240300230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622022597
    },
    {
        "content": "<p>Btw, the current elaboration of <a href=\"https://github.com/leanprover-community/mathlib/issues/7645\">#7645</a> successfully built on my machine: I am hopeful that CI will also build it successfully.  In particular, the <code>norm_num</code> and <code>linarith</code> issues have been fixed!</p>",
        "id": 240300405,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622022710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> , the refactor is looking absolutely great. Thanks a lot for doing this!</p>",
        "id": 240300535,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622022780
    },
    {
        "content": "<p>Sébastien, I am glad that you like it!  It is quite a bit of work, but it is also rewarding: I learned a lot about typeclasses!</p>",
        "id": 240300596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622022830
    },
    {
        "content": "<p>Yes, this kind of work is great for learning a lot more about the system.</p>",
        "id": 240304650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622025291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nnreal.2Ele_div_iff/near/240300230\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> , the refactor has not reached <code>ring</code>s yet: I am still generalizing algebraic structures with a single operation.  Rings are next, of course, but I have not tested them yet.  I think that this PR should go as is now and after the <code>ordered</code> refactor will have progressed, <code>data</code> will be modified to use it.</p>\n</blockquote>\n<p>Ah, that makes sense. These lemmas would currently fall into the ordered ring category. After the refactor they can probably (hopefully) be stated for ordered <code>group_with_zero</code>.</p>",
        "id": 240364761,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622051901
    }
]