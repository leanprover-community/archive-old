[
    {
        "content": "<p>Do we have <code>f : nat -&gt; nat -&gt; nat</code> defined by <code>f m n := (m + n).choose n</code>? I've been refactoring Bernoulli numbers and I've been working with binomial coefficients <code>n.choose k</code> a lot. One is forever having to carry around a proof of <code>k &lt;= n</code> to ensure that the coefficient does not have pathological behaviour, the basic \"symmetry\" <code>n.choose k = n.choose (n - k)</code> needs it. And the rewrite lemmas are ugly e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">choose_mul_succ_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>-- ugh. Is that even the best form? I think <code>(n - k + 1)</code> would be easier to work with because if you have <code>n.choose k</code> then you almost certainly have a proof of <code>k &lt;= n</code> in your context because you need it to do anything. But actually this just a clue that the corresponding theorem for <code>f</code> above will be more beautiful, and indeed it is. Currently Bernoullli numbers are defined in terms of <code>choose</code> but they would be easier to work with, I suspect, if I refactor the entire file and replace the definition with <code>f</code>. What is its name?</p>",
        "id": 220798362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608737359
    },
    {
        "content": "<p>I think I might be saying that there is an argument for interpreting the binomial theorem <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>i</mi></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>X</mi><mi>i</mi></msup><msup><mi>Y</mi><mrow><mi>n</mi><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(X+Y)^n=\\sum_{i=0}^n\\binom niX^iY^{n-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> as actually a sum over <code>i : nat.antidiagonal n</code> of <code>f i.1 i.2 * X^i.1 * Y^i.2</code></p>",
        "id": 220798928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608737737
    },
    {
        "content": "<p>I think this is a good idea</p>",
        "id": 220799151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608737902
    },
    {
        "content": "<p>how about <code>binom'</code> as name?</p>",
        "id": 220799161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608737919
    },
    {
        "content": "<p>the <code>'</code> should be a warning sign that it's not exactly <code>binom</code></p>",
        "id": 220799180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608737935
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">choose_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bryan_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bryan</span> <span class=\"n\">a.succ</span> <span class=\"n\">b.succ</span> <span class=\"bp\">=</span> <span class=\"n\">bryan</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"bp\">+</span> <span class=\"n\">bryan</span> <span class=\"n\">a.succ</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Bryan wins hands down. This must be some standard function in quantum stuff.</p>",
        "id": 220800790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608739149
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bryan</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>     <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bryan</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">bryan</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bryan_eq_choose</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bryan</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.choose_self</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">bryan</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">bryan</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n    <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">nat.choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bryan_eq_choose</span><span class=\"o\">,</span> <span class=\"n\">bryan_eq_choose</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat.choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_right_comm</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 220802514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608740283
    },
    {
        "content": "<p>I don't know who Bryan is, but these coefficients show up in the multiplication table of divided power polynomial algebras. Maybe we can derive a name from that?</p>",
        "id": 220802827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608740478
    },
    {
        "content": "<p>how about we call the function <code>pascal</code>?</p>",
        "id": 220803568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608740952
    },
    {
        "content": "<p><code>pascal a b</code> is \"<code>a</code> steps left, <code>b</code> steps right\" in Pascal's triangle.</p>",
        "id": 220803598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608740979
    },
    {
        "content": "<p>I don't know. I would prefer <code>binom'</code> over <code>pascal</code>. Maybe <code>binom_symm</code> to emphasize that it's a symmetric version of <code>binom</code>?</p>",
        "id": 220804431,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608741506
    },
    {
        "content": "<p>What about a generalization, <code>list.multinomial : list ℕ → ℕ</code> where <code>[c1, ..., cn].multinomial</code> is the coefficient of <code>x1^c1 * ... * xn^cn</code> in <code>(x1 + ... + xn)^(c1 + ... + cn)</code>?  Then <code>bryan a b = [a, b].multinomial</code>.</p>",
        "id": 220804629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1608741641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, your proposed <code>list.multinomial</code> is invariant to the order of the list, right? So maybe <code>multiset.multinomial</code> or perhaps a function <code>(ι → ℕ) → ℕ</code> would also make sense, then it would be <code>multinomial ![a, b]</code></p>",
        "id": 220805125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608742015
    },
    {
        "content": "<p>Indeed, it's invariant under <code>list.perm</code>, so it descends to <code>multiset</code>.  With <code>(ι → ℕ) → ℕ</code>, were you thinking that this is whenever <code>ι</code> is a <code>fintype</code>?</p>",
        "id": 220805295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1608742128
    },
    {
        "content": "<p>Or you could use <code>finsupp</code></p>",
        "id": 220805367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608742185
    },
    {
        "content": "<p>This way the formula could be used in a polynomial ring generated by an arbitrary type :)</p>",
        "id": 220805395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608742201
    },
    {
        "content": "<p>I guess this general binomial formula should be in mathlib anyway</p>",
        "id": 220805513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608742254
    },
    {
        "content": "<p>Johan suggests <code>pascal</code> which I think is a lovely name if we can't get one. I asked on Twitter . Here's a basic API (with proofs, but it would probably be easier to prove everything from first principles if there is a need):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- pascal</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.choose.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_def</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">pascal</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">choose_eq_factorial_div_factorial</span> <span class=\"o\">(</span><span class=\"n\">le.intro</span> <span class=\"n\">rfl</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_spec</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">pascal</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">choose_mul_factorial_mul_factorial</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_eq_of_eq_add</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_symm</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pascal_def</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_zero_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">choose_self</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_zero_left</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pascal_symm</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">▸</span> <span class=\"n\">pascal_zero_right</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_one_left</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">pascal</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">choose_one_right</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_comm</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_one_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pascal_symm</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">▸</span> <span class=\"n\">pascal_one_left</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_succ_succ</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a.succ</span> <span class=\"n\">b.succ</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">a.succ</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">pascal</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">choose_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"mi\">3</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_two_left'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"mi\">2</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"bp\">*</span> <span class=\"n\">n.succ.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">pascal_one_left</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pascal_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">choose_pos</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le.intro</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_mul_pascal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a.succ</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a.succ</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">pascal</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a.succ</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">succ_mul_choose_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">succ_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_mul_pascal'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b.succ</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal_symm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">succ_mul_pascal</span><span class=\"o\">,</span> <span class=\"n\">pascal_symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_mul_pascal''</span> <span class=\"o\">:</span> <span class=\"n\">a.succ</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b.succ</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_mul_pascal</span><span class=\"o\">,</span> <span class=\"n\">succ_mul_pascal'</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this is strictly stronger than choose_le_succ_of_lt_half_left (edge cases)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pascal_succ_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">pascal</span> <span class=\"n\">a.succ</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">_root_.mul_le_mul_left</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.succ</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b.succ</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">factorial_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">factorial_pos</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b.succ</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">pascal</span> <span class=\"n\">a.succ</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">factorial_succ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">factorial_succ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal_spec</span><span class=\"o\">,</span> <span class=\"n\">pascal_spec</span><span class=\"o\">,</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">mono</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_le_succ</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pascal_le_middle</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">pascal</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 220808205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608743930
    },
    {
        "content": "<p>PS I had to import <code>tactic</code> because I am lazy.</p>",
        "id": 220808240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608743955
    },
    {
        "content": "<p>I think there's something in <code>data.nat.choose</code> which should make the last proof easier, possibly</p>",
        "id": 220808405,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608744061
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">choose_le_middle</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 220808423,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608744081
    },
    {
        "content": "<p>If you commit to always writing <code>(a+b).choose a</code>, does there need to be a special name for it?  Argument duplication is certainly annoying, but it seems like <code>pascal</code> would lead to API duplication.</p>\n<p>I don't know how it looks for the Bernoulli number refactoring, but at least in the code you gave, writing the expanded version seems like it might be ok (except for the last lemma):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.choose.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">choose_eq_factorial_div_factorial</span> <span class=\"o\">(</span><span class=\"n\">le.intro</span> <span class=\"n\">rfl</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_spec</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">choose_mul_factorial_mul_factorial</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_eq_of_eq_add</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_symm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal_def</span><span class=\"o\">,</span> <span class=\"n\">pascal_def</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_zero_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">choose_self</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_zero_left</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">pascal_symm</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">▸</span> <span class=\"n\">pascal_zero_right</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_one_left</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">choose_one_right</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">add_comm</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_one_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">pascal_symm</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">▸</span> <span class=\"n\">pascal_one_left</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_succ_succ</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">choose_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pascal_two_left'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"bp\">*</span> <span class=\"n\">n.succ.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">pascal_one_left</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pascal_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">choose_pos</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le.intro</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_mul_pascal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a.succ</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">succ_mul_choose_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">succ_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_mul_pascal'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal_symm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">succ_mul_pascal</span><span class=\"o\">,</span> <span class=\"n\">pascal_symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_mul_pascal''</span> <span class=\"o\">:</span> <span class=\"n\">a.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a.succ</span> <span class=\"bp\">=</span> <span class=\"n\">b.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_mul_pascal</span><span class=\"o\">,</span> <span class=\"n\">succ_mul_pascal'</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this is strictly stronger than choose_le_succ_of_lt_half_left (edge cases)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pascal_succ_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;=</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">_root_.mul_le_mul_left</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.succ</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b.succ</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">factorial_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">factorial_pos</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b.succ</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a.succ</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">factorial_succ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">factorial_succ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal_spec</span><span class=\"o\">,</span> <span class=\"n\">pascal_spec</span><span class=\"o\">,</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">mono</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_le_succ</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pascal_le_middle</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 220811095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1608745795
    },
    {
        "content": "<p>I think the frustration is that you keep needing to prove <code>a &lt;= a + b</code> each time, but an api for <code>pascal</code> wouldn't need this (correct me if I'm wrong Kevin!)</p>",
        "id": 220811333,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608745932
    },
    {
        "content": "<p>This is the correct thing to prove (and it works for me):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pascal_le_middle</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">pascal</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">hm</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hn_1</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succ_inj'</span><span class=\"o\">,</span> <span class=\"n\">hn_1</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">le_succ</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"n\">h3</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">pascal_succ_le</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220813308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608747293
    },
    {
        "content": "<p>Yes this is exactly the issue. When dealing with \"trivial\" statements about n choose k which follow immediately from the expression in terms of factorials and basic stuff like <code>factorial_succ</code>, you are forever hobbling along because any e.g. casts you're doing won't do <code>sub</code> unless you explicitly tell them to by feeding in the relevant inequality. The API has come out beautifully. <code>choose</code> is defined as junk values if k &gt; n but I think restricting the domain like this gives in some sense a more fundamental function.</p>",
        "id": 220813568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608747466
    },
    {
        "content": "<p>And furthermore I claim that if I define <code>Bernoulli</code> using <code>pascal</code> instead of <code>choose</code> then my proofs will be nicer.</p>",
        "id": 220815103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608748446
    },
    {
        "content": "<p>OK I've pushed a branch <code>binomial</code>. I've build the API mostly from the <code>choose</code> API but I strongly suspect it would have been easier to build it from the ground up, as it's much easier to steer than <code>choose</code>.</p>",
        "id": 220815250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608748530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/(m.2Bn)!.2F(m!n!)/near/220813568\">said</a>:</p>\n<blockquote>\n<p>Yes this is exactly the issue. When dealing with \"trivial\" statements about n choose k which follow immediately from the expression in terms of factorials and basic stuff like <code>factorial_succ</code>, you are forever hobbling along because any e.g. casts you're doing won't do <code>sub</code> unless you explicitly tell them to by feeding in the relevant inequality. The API has come out beautifully. <code>choose</code> is defined as junk values if k &gt; n but I think restricting the domain like this gives in some sense a more fundamental function.</p>\n</blockquote>\n<p>The thing I'm wondering about is what <code>binomial</code>/<code>pascal</code> gives you that a bunch of lemmas about expressions of the form <code>(a+b).choose a</code> wouldn't?  All I'm really able to see is that you don't have to write the <code>a</code> argument twice.</p>\n<p>Secondly (and more importantly), if you're going through the effort of defining <code>pascal</code>, why not do the natural generalization to the multinomial coefficient?  This is probably not the best way to define it, but there's at least</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.multinomial</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">m.sum</span><span class=\"bp\">!</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m.map</span> <span class=\"n\">nat.factorial</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multinomial_eq_choose</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">multinomial</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.multinomial</span><span class=\"o\">,</span> <span class=\"n\">nat.choose_eq_factorial_div_factorial</span> <span class=\"o\">(</span><span class=\"n\">nat.le.intro</span> <span class=\"n\">rfl</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 220819355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1608751435
    },
    {
        "content": "<p>(I'm not against <code>binomial</code> -- I wish this is what mathematicians used rather than <code>choose</code> -- but I'm worrying that <code>binomial</code> is \"just\" <code>choose</code>, and it will end up involving lots of duplication of the API since you would need to unfold the definition to rewrite.)</p>",
        "id": 220820078,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1608751928
    },
    {
        "content": "<p>The problem is that in practice you get <code>n.choose k</code> and a proof that <code>k &lt;= n</code> and this is just harder to deal with. The lemmas with <code>(a+b).choose a</code> are nice, but they force the user to get their binomial coefficients into this form. if your \"default\" API is <code>binomial</code> instead of <code>choose</code> then your proofs are shorter because the API is more natural.</p>",
        "id": 220836880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608766677
    },
    {
        "content": "<p>Is there some reason though to define <code>binomial a b</code> rather than <code>[a, b].multinomial</code> or something similar?  I was thinking that <code>multinomial</code> would be a useful generalization to have, it's not much more complex to define, and it seems to have the properties that you want.</p>",
        "id": 220839810,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1608769745
    },
    {
        "content": "<p>Yeah that would be fine</p>",
        "id": 220839897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608769857
    },
    {
        "content": "<p>off-topic: I think the binomial polynomial is nice to have, i.e. <code>x.choose k</code> where <code>k</code> is a natural number and <code>x</code> is an element of a ring on which <code>k!</code> is invertible</p>",
        "id": 220850768,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608789099
    },
    {
        "content": "<p>sometimes <code>k!</code> is invertible is not necessary, for example <code>x.choose k</code> can be defined for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\"> x\\in\\mathbb{Z}_p </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 220850833,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608789233
    },
    {
        "content": "<p>Yes I agree, we will need this very soon in a project a student of mine is working on</p>",
        "id": 220859788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608803355
    },
    {
        "content": "<p>It would be a nice project to formalize the classification of integer values polynomials <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220873005,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608820301
    },
    {
        "content": "<p>That would need Jz Pan's generalisation of <code>choose</code>. In fact there are some subtleties there. As they point out, binomial coefficients can be evaluated if n is a p-adic integer but this isn't true for eg the Witt vectors of a field with p^2 elements.</p>",
        "id": 220874177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608821765
    },
    {
        "content": "<p>There's a generalization of the integer valued stuff to rings of integers of number fields here:<br>\n<a href=\"http://www.ma.huji.ac.il/~deshalit/new_site/files/Integer-valued.pdf\">http://www.ma.huji.ac.il/~deshalit/new_site/files/Integer-valued.pdf</a></p>",
        "id": 220874410,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608822072
    },
    {
        "content": "<p>Yeah we need Lubin-Tate groups too! They're really fun and we have a lot of the framework available.</p>",
        "id": 220874472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608822156
    },
    {
        "content": "<p>... and local class field theory?</p>",
        "id": 221044572,
        "sender_full_name": "Jz Pan",
        "timestamp": 1609141387
    },
    {
        "content": "<p>Right</p>",
        "id": 221050928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609150118
    },
    {
        "content": "<p>I have a student who did group cohomology, we should start with the statements</p>",
        "id": 221050947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609150153
    },
    {
        "content": "<p>Seems to me that there are a LOT of prereqs to get done before one can even define the local reciprocity map...</p>",
        "id": 221064274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609165828
    },
    {
        "content": "<p>Yeah, but from where I'm standing they all look feasible.</p>",
        "id": 221065225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609166742
    },
    {
        "content": "<p>I mean, making the type of the map, not making the map itself! The map itself will be hard work. But first one should state the theorem.</p>",
        "id": 221065299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609166789
    }
]