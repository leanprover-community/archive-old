[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"c1\">-- TODO surely this is in mathlib?</span>\n<span class=\"kd\">def</span> <span class=\"n\">continuous_linear_map.eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 273453480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646033073
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.apply\">docs#continuous_linear_map.apply</a></p>",
        "id": 273461728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646039293
    },
    {
        "content": "<p>You even get <code>E →L[𝕜] (E →L[𝕜] F) →L[𝕜] F</code> (adding linearity with respect to <code>x</code> compared to your wish)</p>",
        "id": 273461798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646039345
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.coe_lm\">docs#continuous_linear_map.coe_lm</a></p>",
        "id": 273462886,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1646040061
    },
    {
        "content": "<p>Do we not have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→+*</span> <span class=\"bp\">𝕜₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_isometric</span> <span class=\"n\">σ₁₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">continuous_linear_map.eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜₂</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map.mk_continuous</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">f</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">f.le_op_norm</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 292067444,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659645768
    },
    {
        "content": "<p>Ah, nevermind, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.apply'\">docs#continuous_linear_map.apply'</a></p>",
        "id": 292068048,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659646068
    },
    {
        "content": "<p>Ha! I didn't even realize I was posting in an old thread. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 292068427,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659646298
    },
    {
        "content": "<p>As far as I know it's only recently that one has been able to spot this; now if you start a \"new\" thread with a title which happens to be the title of an old thread (at least in the app) you get a right-arrow button by the title which lets you jump to the thread without having to post anything in it.</p>",
        "id": 292070653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659647537
    },
    {
        "content": "<p>Pro Tip: <code>Ctrl</code>-<code>.</code> will also do that (-;</p>",
        "id": 292108659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659676461
    }
]