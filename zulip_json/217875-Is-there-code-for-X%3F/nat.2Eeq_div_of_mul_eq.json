[
    {
        "content": "<p>Is this missing or is my search-fu just weak today?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_div_of_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hc</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel_left</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194300022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587042317
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_div_of_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>",
        "id": 194300346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042442
    },
    {
        "content": "<p>It's not an exact match, but once you get rid of the equality assumption it's essentially just <code>nat.mul_div_cancel</code></p>",
        "id": 194300511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042500
    },
    {
        "content": "<p>Does this go in data.nat.basic or is there a reason it's not there? Often for things that are true for rings/fields/whatever and nat, the general result is in the root namespace and then nat has its own version</p>",
        "id": 194300651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587042563
    },
    {
        "content": "<p>actually there are closer matches too, it looks like</p>",
        "id": 194300717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042593
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_div_of_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hc</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_eq_of_eq_mul_left</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>",
        "id": 194300872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042639
    },
    {
        "content": "<p>I think most of these theorems are normalized with the operation on the left side of the equality</p>",
        "id": 194300944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042674
    },
    {
        "content": "<p><code>nat.div_eq_of_eq_mul_left</code> was what I was missing -- I searched for <code>eq_div</code> :-/</p>",
        "id": 194300994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587042697
    },
    {
        "content": "<p>ironically the proof is longer because the names are more cumbersome</p>",
        "id": 194301109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042731
    },
    {
        "content": "<p>We could have more variations, but I think there is something like 8 versions of just this one theorem if you commute the two equalities and the multiplication</p>",
        "id": 194301330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042815
    },
    {
        "content": "<p>and then another 8 for the biconditional version</p>",
        "id": 194301391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042838
    },
    {
        "content": "<p>the biconditional isn't true for nat because of CS division</p>",
        "id": 194301489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587042860
    },
    {
        "content": "<p>but I absolutely take your point.</p>",
        "id": 194301504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587042868
    },
    {
        "content": "<p>the biconditional assumes divisibility</p>",
        "id": 194301513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042872
    },
    {
        "content": "<p>pretty sure it's already available</p>",
        "id": 194301545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042888
    },
    {
        "content": "<p>yes I ran into versions of it</p>",
        "id": 194301561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587042897
    },
    {
        "content": "<p>(in general the biconditional assumes whatever it needs to to make it true)</p>",
        "id": 194301588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042910
    },
    {
        "content": "<p>What caught me out is that eq_div gave me some positive hits, which made me not look for div_eq</p>",
        "id": 194301625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587042932
    },
    {
        "content": "<p>we could try making library_search find these but there are a lot of axes of variation</p>",
        "id": 194301782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587042985
    },
    {
        "content": "<p>I also had \\ne 0 and not 0 &lt;</p>",
        "id": 194301837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587043005
    },
    {
        "content": "<p>I <em>think</em> that most nat theorems try to use 0 &lt; consistently but I could be wrong</p>",
        "id": 194301935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587043061
    },
    {
        "content": "<p>of course there are theorems like <code>pos_iff_ne_zero</code> to make it not matter which</p>",
        "id": 194302031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587043085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Eeq_div_of_mul_eq/near/194301837\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Eeq_div_of_mul_eq/near/194301837\">said</a>:</p>\n<blockquote>\n<p>I also had \\ne 0 and not 0 &lt;</p>\n</blockquote>\n<p>This is the top of my list for <code>library_search</code> working harder. It's trivial to implement, but a matter of testing performance.</p>",
        "id": 194302577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587043322
    },
    {
        "content": "<p>What about getting hits even if you get some assumptions wrong or missing?</p>",
        "id": 194302696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587043371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Eeq_div_of_mul_eq/near/194302696\" title=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat.2Eeq_div_of_mul_eq/near/194302696\">said</a>:</p>\n<blockquote>\n<p>What about getting hits even if you get some assumptions wrong or missing?</p>\n</blockquote>\n<p>Isn't that tactic called <code>suggest</code>?</p>",
        "id": 194305411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587044424
    },
    {
        "content": "<p>Possibly, but I think it is important to also look at hypotheses and score more highly theorems that don't just match everything</p>",
        "id": 194305565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587044503
    },
    {
        "content": "<p><code>suggest</code> returns everything (up to a limit, default 50) that <code>apply</code>s against the goal, and sorts the results by (number of remaining goals, number of local hypotheses used to fill arguments).</p>",
        "id": 194307078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587045154
    },
    {
        "content": "<p>(preferring, of course, matches that leave _few_ remaining goals, and use _many_ local hypotheses)</p>",
        "id": 194307163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587045195
    },
    {
        "content": "<p>It would be good to explore other orderings.</p>",
        "id": 194307339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587045261
    },
    {
        "content": "<p>Just watching the whole library_search thing evolve over time makes it clear that it's a <strong>much</strong> harder problem than I had initially realised.</p>",
        "id": 194307944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587045553
    },
    {
        "content": "<p>Like any tactic, I guess you have to decide what it can and can't do, and then make it do what it's supposed to do, but with library_search there seem to be so many near-misses that it looks almost impossible to axiomatise what tricks you actually want it to know.</p>",
        "id": 194308171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587045623
    },
    {
        "content": "<p>now you're thinking like a CS guy</p>",
        "id": 194308855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587045899
    },
    {
        "content": "<p>yay for less magical thinking and more questioning \"how\"</p>",
        "id": 194309017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587045966
    },
    {
        "content": "<p>now all you need to do is learn ML and go back to magical thinking and not knowing how</p>",
        "id": 194309229,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587046048
    },
    {
        "content": "<p>is ML machine learning or something to do with caml?</p>",
        "id": 194309298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587046075
    },
    {
        "content": "<p>machine learning</p>",
        "id": 194309312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587046081
    },
    {
        "content": "<p>I watched someone writing code in Isabelle/HOL once</p>",
        "id": 194309382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587046099
    },
    {
        "content": "<p>and every now and again they'd have some little lemma of the kind which I find quite fun to prove, and they hit it with a hammer and then went to do something else for 5 minutes</p>",
        "id": 194309451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587046126
    },
    {
        "content": "<p>where's the fun in that?</p>",
        "id": 194309522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587046157
    },
    {
        "content": "<p><code>apply</code> is so incredibly fast that we can actually throw a lot of extra lemmas into the <code>solve_by_elim</code> step in <code>suggest</code> (i.e. apply local hypotheses after applying the lemma from the library), as long as we're careful that they are lemmas that cause \"linear\" (or maybe even quadratic, with tight depth bounds) growth in the time <code>solve_by_elim</code> spends. As long as they all \"use up\" something in the goal they are basically okay.</p>",
        "id": 194309536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587046164
    },
    {
        "content": "<p>So certainly things like getting between <code>\\ne 0</code> and <code>0 &lt;</code> goals is plausible.</p>",
        "id": 194309607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587046196
    },
    {
        "content": "<p>and it's all set up to add extra lemmas in. <code>solve_by_elim</code> is already very configurable, and <span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span>'s PR <a href=\"https://github.com/leanprover-community/mathlib/issues/2429\" title=\"https://github.com/leanprover-community/mathlib/issues/2429\">#2429</a> (which unfortunately mangled a merge at the moment) exposes that configurability to the user of <code>suggest</code> or <code>library_search</code>.</p>",
        "id": 194309857,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587046289
    },
    {
        "content": "<p>So it's relatively easy to start experimenting with plausible lemmas to add. If we're confortable adding some to \"the default set\" it will just be a matter of tagging them with <code>@[suggest]</code> or something similar.</p>",
        "id": 194310013,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587046342
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 194311748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587047089
    }
]