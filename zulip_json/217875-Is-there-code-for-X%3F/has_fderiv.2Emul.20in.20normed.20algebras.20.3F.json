[
    {
        "content": "<p>Do we really lack the following lemmas ? I only see lemmas about product in the field :/</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕂</span> <span class=\"bp\">𝔸</span> <span class=\"bp\">𝔸'</span> <span class=\"bp\">𝔼</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"bp\">𝔼</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕂</span> <span class=\"bp\">𝔼</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"bp\">𝕂</span> <span class=\"bp\">𝔸</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_comm_ring</span> <span class=\"bp\">𝔸'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"bp\">𝕂</span> <span class=\"bp\">𝔸'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝔼</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔸</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"bp\">𝔼</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕂</span><span class=\"o\">]</span> <span class=\"bp\">𝔸</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">𝔼</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔸'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c'</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"bp\">𝔼</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕂</span><span class=\"o\">]</span> <span class=\"bp\">𝔸'</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_strict_fderiv_at.mul'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝔼</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">haa'</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbb'</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_strict_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">b'</span> <span class=\"bp\">+</span> <span class=\"n\">a'.smul_right</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">continuous_linear_map.lmul</span> <span class=\"bp\">𝕂</span> <span class=\"bp\">𝔸</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bounded_bilinear_map.has_strict_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"n\">haa'.prod</span> <span class=\"n\">hbb'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Should replace the current `has_strict_fderiv_at.mul` ?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">has_strict_fderiv_at.mul''</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝔼</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hcc'</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdd'</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">d</span> <span class=\"n\">d'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_strict_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">d'</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">convert</span> <span class=\"n\">hcc'.mul'</span> <span class=\"n\">hdd'</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 252101041,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1630875002
    },
    {
        "content": "<p>I think it is, I remember noticing it before.</p>",
        "id": 252101495,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630875548
    },
    {
        "content": "<p>In fact, this is most of what's missing to make <code>units 𝔸</code> into a Lie group (and it shouldn't be very difficult).</p>",
        "id": 252101514,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630875584
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/9fc45d81e8d6eb7968e0c1c7aa3938044e4af61b/src/geometry/manifold/instances/units_of_normed_algebra.lean#L37\">https://github.com/leanprover-community/mathlib/blob/9fc45d81e8d6eb7968e0c1c7aa3938044e4af61b/src/geometry/manifold/instances/units_of_normed_algebra.lean#L37</a></p>",
        "id": 252101588,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630875619
    }
]