[
    {
        "content": "<p>I was surprised that this does not exists yet, given that we have filter.has_mul, filter.has_add and so on. Or maybe it's hidden somewhere where I can't find it? Should I make a PR?</p>",
        "id": 275381919,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1647355326
    },
    {
        "content": "<p>filter.has_inv also seems to be missing.</p>",
        "id": 275382645,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1647355615
    },
    {
        "content": "<p>If you're going to edit this file, then please add missing docstrings as well.</p>",
        "id": 275468766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647408255
    },
    {
        "content": "<p>I'm filling in similar gaps in <a href=\"https://tqft.net/mathlib/algebra/pointwise\">file#algebra/pointwise</a> in <a href=\"https://github.com/leanprover-community/mathlib/pull/12694\">#12694</a> if that draws inspiration. I can also just do it if you do not feel like it.</p>",
        "id": 275484183,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647422367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/filter.2Ehas_scalar.20missing.3F/near/275484183\">said</a>:</p>\n<blockquote>\n<p>I'm filling in similar gaps in <a href=\"https://tqft.net/mathlib/algebra/pointwise\">file#algebra/pointwise</a> in <a href=\"https://github.com/leanprover-community/mathlib/pull/12694\">#12694</a> if that draws inspiration. I can also just do it if you do not feel like it.</p>\n</blockquote>\n<p>Pretty please.</p>",
        "id": 275530398,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1647445570
    },
    {
        "content": "<p>Preliminatory work in <a href=\"https://github.com/leanprover-community/mathlib/pull/12789\">#12789</a></p>",
        "id": 275740617,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647558615
    },
    {
        "content": "<p>It looks like we can streamline the definitions. Having a think...</p>",
        "id": 275928076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647721823
    },
    {
        "content": "<p>So I see that your PR was merged with a TODO. Are you still working on it? If not, I could make a PR with stuff that I have already regarding smul and inv.</p>",
        "id": 276723885,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648297922
    },
    {
        "content": "<p>Yes I am :)</p>",
        "id": 276723898,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648297957
    },
    {
        "content": "<p>I figured that we could significantly shorten the API by writing constructors in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_bot_hom\">docs#sup_bot_hom</a>.</p>",
        "id": 276723908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648298002
    },
    {
        "content": "<p>Alright, thanks. Can you elaborate on how you plan to use sup_bot_hom?</p>",
        "id": 276724066,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648298248
    },
    {
        "content": "<p>If you have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_mul\">docs#filter.has_mul</a>, you see that the reason the definition works is that <code>(s₁ ∪ s₂) * t = s₁ * t ∪ s₂ * t</code>, <code>s * (t₁ ∪ t₂) = s * t₁ ∪ s * t₂</code>, <code>∅ * s = ∅</code>, <code>s * ∅ = ∅</code>. Hence you can replace <code>(*)</code> by any <code>f : sup_bot_hom (set α) (sup_bot_hom (set β) (set γ))</code> and it will just work.</p>",
        "id": 276724212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648298426
    },
    {
        "content": "<p>Interesting. So it should also work in the case of smul since smul is supremum-preserving?</p>",
        "id": 276724298,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648298555
    },
    {
        "content": "<p>Exactly! And <code>neg</code>, and <code>inv</code> (with a unary variant)...</p>",
        "id": 276724319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648298628
    },
    {
        "content": "<p>Great. Looking forward to it.</p>",
        "id": 276724444,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648298781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span>, is there anything that you want which is not on <a href=\"https://github.com/leanprover-community/mathlib/tree/more_filter_pointwise\">branch#more_filter_pointwise</a>? For example, more stuff analogous to <a href=\"https://tqft.net/mathlib/data/set/pointwise\">file#data/set/pointwise</a></p>",
        "id": 276925646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648498511
    },
    {
        "content": "<p>Great work! You have a lot of stuff that I need. Here's one I don't see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.smul_subset_smul_left</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsub</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t'</span> <span class=\"bp\">•</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>but I guess we can get that one using <code>set.image2_subset_left</code>? Here's another, which actually took me a while to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">filter.inv_smul_of_smul</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f'.ne_bot</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 276928642,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648500190
    },
    {
        "content": "<p>Oh I can add that first one real quick.</p>",
        "id": 276931864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648501922
    },
    {
        "content": "<p>I am not quite sure the second one should be a lemma. I feel like we could split it down. Also, it weirdly mixes instance and explicit <code>ne_bot</code> arguments.</p>",
        "id": 276932059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648502021
    },
    {
        "content": "<p>Yeah, I guess I am confused about whether ne_bot should be instance arguments or regular arguments since mathlib sometimes does one or the other or both.</p>",
        "id": 277040562,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648575392
    },
    {
        "content": "<p>In any case, the second lemma is a very peculiar result that I needed for proving another more interesting result.</p>",
        "id": 277040816,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1648575498
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13062\">#13062</a> for the first half</p>",
        "id": 277144235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648646989
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13170\">#13170</a> for the second half</p>",
        "id": 277760967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649091130
    },
    {
        "content": "<p>I was just looking at that. Looks really nice.</p>",
        "id": 277763111,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649091947
    },
    {
        "content": "<p>Glad you like it!</p>",
        "id": 277773159,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649096136
    },
    {
        "content": "<p>Can't you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.bind\">docs#filter.bind</a> for these map constructions?</p>",
        "id": 277773533,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649096331
    },
    {
        "content": "<p>I would be eager to know how, because <a href=\"https://github.com/leanprover-community/mathlib/pull/13170\">#13170</a> was all about adding seminontrivial API.</p>",
        "id": 277773646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649096396
    },
    {
        "content": "<p>Can't you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.bind\">docs#filter.bind</a> for these map constructions?</p>",
        "id": 277773728,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649096421
    },
    {
        "content": "<p>(sorry for the duplication. I'm on mobile with my university's \"very good\" wifi)</p>",
        "id": 277773893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649096477
    },
    {
        "content": "<p>Note that we care about definitional equality. My <code>filter.map₂</code> allows you to get the basically simplest condition.</p>",
        "id": 277773953,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649096512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span>, there you have it!</p>",
        "id": 278682757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649765144
    },
    {
        "content": "<p>Awesome. Thank you so much. I will update my code.</p>",
        "id": 278715939,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649780163
    },
    {
        "content": "<p>Sorry it took near a month. mathlib do be like that.</p>",
        "id": 278715996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649780199
    },
    {
        "content": "<p>No worries. I'm having a some trouble using lemmas like <code>filter.mem_inv</code>. The lemma that I was using was this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">filter.mem_inv_iff</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>What's the easiest way to get this result from <code>filter.mem_inv</code>?</p>",
        "id": 278763664,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649803775
    },
    {
        "content": "<p>You can instantiate <code>t</code> to be <code>s⁻¹</code>.</p>",
        "id": 278763916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649803952
    },
    {
        "content": "<p>Sorry, I don't follow.</p>",
        "id": 278764771,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649804569
    },
    {
        "content": "<p>Also, I'm getting this error in one of my proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"n\">has_scalar.smul</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">has_inv.inv</span> <span class=\"n\">g</span> <span class=\"bp\">×ᶠ</span> <span class=\"bp\">↑</span><span class=\"n\">k'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">k'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span>\n</code></pre></div>\n<p>Are these things not definitionally equal?</p>",
        "id": 278764966,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649804710
    },
    {
        "content": "<p>I mean that the <code>t</code> in <code>∃ t ∈ f, t⁻¹ ⊆ s</code> can always be taken as <code>s⁻¹</code>.</p>",
        "id": 278765084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649804782
    },
    {
        "content": "<p>I believe not, because I defined <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter\">docs#filter</a>.map₂, without referring to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map\">docs#filter.map</a>. So defeq breaking isn't that surprising. This should be a lemma about <code>map₂</code> and <code>uncurry</code>, though, and I can try writing it down if you show me your code.</p>",
        "id": 278765217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649804901
    },
    {
        "content": "<blockquote>\n<p>I mean that the t in ∃ t ∈ f, t⁻¹ ⊆ s can always be taken as s⁻¹.</p>\n</blockquote>\n<p>Ah, you're right. I will still need to create a lemma for this though. I thought I could get away with a oneliner conversion.</p>\n<p>Here's the snippet from the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">k'</span> <span class=\"k\">with</span> <span class=\"n\">hdef</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">k.ne_bot</span> <span class=\"o\">:=</span> <span class=\"n\">filter.ne_bot.map</span> <span class=\"o\">(</span><span class=\"n\">filter.ne_bot.prod</span> <span class=\"o\">(</span><span class=\"n\">filter.ne_bot.map</span> <span class=\"n\">hnb</span> <span class=\"n\">has_inv.inv</span><span class=\"o\">)</span> <span class=\"n\">k'.ne_bot</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 278765487,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649805143
    },
    {
        "content": "<p>Why not use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.ne_bot.smul\">docs#filter.ne_bot.smul</a>?</p>",
        "id": 278765550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649805216
    },
    {
        "content": "<p>Ah, cool. Let me try it with that.</p>",
        "id": 278765625,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649805254
    },
    {
        "content": "<p>Yep, that worked.</p>",
        "id": 278765760,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649805377
    },
    {
        "content": "<p>Sorry, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_ne_bot_iff\">docs#smul_ne_bot_iff</a></p>",
        "id": 278765762,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649805379
    },
    {
        "content": "<p>Oh misread twice. That cancelled out</p>",
        "id": 278765779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649805396
    },
    {
        "content": "<p>Ah shucks. There are other parts of the code showing the \"invalid type ascription\" issue. I guess I'll have to rethink some of these proofs.</p>",
        "id": 278765959,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1649805559
    }
]