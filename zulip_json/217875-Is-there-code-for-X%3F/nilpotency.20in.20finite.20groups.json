[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , your order is ready:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A finite group is nilpotent iff the normalizer condition holds, and iff all sylow groups are</span>\n<span class=\"sd\">normal and iff its the direct product of its sylow groups.  -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">is_nilpotent_of_finite_tfae</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span>\n  <span class=\"o\">[</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">normalizer_condition</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">,</span>\n    <span class=\"n\">nonempty</span> <span class=\"o\">((</span><span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.support</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">normalizer_condition_of_is_nilpotent</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">introsI</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">sylow.normal_of_normalizer_condition</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nonempty.intro</span> <span class=\"o\">(</span><span class=\"n\">sylow.direct_product_of_normal</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">is_nilpotent_of_product_of_sylow_group</span> <span class=\"n\">e</span> <span class=\"o\">},</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270746187,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643995700
    },
    {
        "content": "<p>It’s still missing the connection to “all maximal groups are normal”, for which I have not looked yet at how to prove the implication back (probably using Frattini's argument as done <a href=\"https://math.stackexchange.com/questions/2664340/nilpotent-iff-every-maximal-subgroup-is-normal\">here</a>). And of course there is a DAG of outstanding 10 PRs that I have to clean up, get through review, in addition to the 19 PRs created over the last three weeks and already merged; <a href=\"https://github.com/leanprover-community/mathlib/issues/11723\">PR overview</a>.</p>",
        "id": 270746529,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643995880
    },
    {
        "content": "<p>Yes, the Frattini's argument proof doesn't seem too bad.</p>",
        "id": 270749332,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1643997200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> that is awesome! Thank you for the valuable addition to mathlib! </p>\n<p>It turns out that the community here (led on this occasion by Patrick Massot)  have written down an \"official\" definition of \"an undergraduate degree\", and now we have the challenge to teach it to Lean. However I have my own unofficial definition of an undergraduate degree, which is \"everything I learnt in my undergraduate classes\" and this is one of the few theorems in my group theory class which was not already in mathlib. Thanks very much!</p>",
        "id": 270753678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643999276
    },
    {
        "content": "<p>Do we already have the statement that a non-top subgroup of a finite group is contained in a maximal (<code>is_coatom</code>) subgroup? It seems that the statement should look like <code>is_coatomic (subgroup G)</code>, but <code>grep</code> doesn’t find a lemma of that form.</p>",
        "id": 270772637,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644008799
    },
    {
        "content": "<p>I think we don't</p>",
        "id": 270773014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644009003
    },
    {
        "content": "<p>However I'm wondering what's the correct generality for this. I think it has little to do with subgroups.</p>",
        "id": 270773055,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644009029
    },
    {
        "content": "<p>Shouldn't it hold in any finite top order?</p>",
        "id": 270773123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644009067
    },
    {
        "content": "<p>Yes, I think that instance should do.</p>",
        "id": 270773183,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644009104
    },
    {
        "content": "<p>Eh, we don't have <code>fintype -&gt; is_coatomic</code> either <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 270773292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644009149
    },
    {
        "content": "<p>Isn’t that the instance you were suggesting?</p>",
        "id": 270774021,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644009516
    },
    {
        "content": "<p>Yeah! I just thought it was there already. Wanna do it or should I?</p>",
        "id": 270774548,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644009810
    },
    {
        "content": "<p>I just <code>sorried</code>’d it in my proof, at <a href=\"https://github.com/leanprover-community/mathlib/pull/11841/files#diff-ab70e1f803f9921c903cc935dd827a15a25f8323fad19b349c8f756bb396c059R555\">https://github.com/leanprover-community/mathlib/pull/11841/files#diff-ab70e1f803f9921c903cc935dd827a15a25f8323fad19b349c8f756bb396c059R555</a> and will call it a day for now. If I find the instance on <code>master</code> or  some PR when I come back to it tomorrow I wouldn’t mind :-)</p>",
        "id": 270777906,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644011545
    },
    {
        "content": "<p>Hmm, on <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/nilpotency.20in.20finite.20groups/near/270746187\">Feb 4</a> I claimed that the theorem about the various different definitions of nilpotency for finite groups is ready, after three weeks of leaning. Turns out it wasn’t quite ready, and it took another 6 weeks to actually get “the” PR in. (Quotation marks because it actually took  <a href=\"https://github.com/leanprover-community/mathlib/issues/11723\">45 PRs</a> with at least 424 commits  – thanks to all the patient reviewers, especially <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ).</p>\n<p>But here it is:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/nilpotent.html#is_nilpotent_of_finite_tfae\">https://leanprover-community.github.io/mathlib_docs/group_theory/nilpotent.html#is_nilpotent_of_finite_tfae</a><br>\nor maybe prettier<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/7f1ba1a333d66eed531ecb4092493cd1b6715450/src/group_theory/nilpotent.lean#L898-L903\">https://github.com/leanprover-community/mathlib/blob/7f1ba1a333d66eed531ecb4092493cd1b6715450/src/group_theory/nilpotent.lean#L898-L903</a></p>\n<p>The biggest chunk during PR review was probably <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/noncomm_pi_coprod.html\"><code>noncomm_pi_coprod</code></a>; the construction of <code>{ϕ : Π (i : ι), (N i →* M) // pairwise commutes mumble mumble} ≃ ((Π (i : ι), N i) →* M)</code>, and expanding the API of the underlying <code>finset.noncomm_prod</code> function.</p>",
        "id": 275872235,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647644097
    }
]