[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">finsupp.dom_congr :</span>\n<span class=\"cm\">  Π {α : Type u_4} {β : Type u_5} {M : Type u_6} [_inst_1 : add_comm_monoid M],</span>\n<span class=\"cm\">    α ≃ β → (α →₀ M) ≃+ (β →₀ M)</span>\n<span class=\"cm\">    -/</span>\n\n<span class=\"c1\">-- what is the non-finsupp version of finsupp.dom_congr</span>\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">((</span><span class=\"n\">S</span> <span class=\"bp\">≃</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>What's the regular function version called? I don't know how to find out without asking.</p>",
        "id": 264804798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639452928
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_equiv.arrow_congr\">docs#add_equiv.arrow_congr</a>?</p>",
        "id": 264823848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639469680
    },
    {
        "content": "<p>Oh nice! Thanks! I didn't know <code>→</code> was called <code>arrow</code>.</p>",
        "id": 264841638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639480351
    },
    {
        "content": "<p>It's a bit annoying that we sometimes have one definition <code>(M ≃ N) → (P ≃+ Q) → ((M → P) ≃+ (N → Q))</code> (like <code>arrow_congr</code>) and other times (like <code>finsupp.dom_congr</code>) have two, <code>(M ≃ N) → ((M → P) ≃+ (N → P))</code> and <code>(P ≃+ Q) → ((M → P) ≃+ (M → Q))</code>. IMO the separate definitions make slightly more sense as they're simpler operations.</p>",
        "id": 264842288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639480795
    }
]