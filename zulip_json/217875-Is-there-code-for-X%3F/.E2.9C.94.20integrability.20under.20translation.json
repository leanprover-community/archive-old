[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/integrability.20under.20translation/near/294511001\">said</a>:</p>\n<blockquote>\n<p>Probably you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integrable.comp_add_right\">docs#measure_theory.integrable.comp_add_right</a>, though I've not tested.</p>\n</blockquote>\n<p>Thanks Junyan! That theorem seems really helpful. Though I had used another way to implement it, by mimicking the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/integral/interval_integral.html#interval_integrable.comp_mul_left\">https://leanprover-community.github.io/mathlib_docs/measure_theory/integral/interval_integral.html#interval_integrable.comp_mul_left</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">volume_add_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measure_theory.measure.map</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"bp\">=</span>\n  <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"n\">real.is_add_left_invariant_real_volume.map_add_left_eq_self</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integrable_comp_add_left</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">interval_integrable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">interval_integrable_iff'</span> <span class=\"n\">at</span> <span class=\"n\">hf</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">measurable_embedding</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">measurable_embedding_add_left</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">volume_add_right</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">measure_theory.integrable_on</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span><span class=\"n\">measure_theory.integrable_on</span><span class=\"o\">,</span> <span class=\"n\">measurable_embedding.integrable_on_map_iff</span> <span class=\"n\">A</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hf</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 294525461,
        "sender_full_name": "LiXiang",
        "timestamp": 1661075454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424209\">LiXiang</span> has marked this topic as resolved.</p>",
        "id": 294525483,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661075470
    }
]