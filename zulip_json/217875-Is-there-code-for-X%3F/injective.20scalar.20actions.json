[
    {
        "content": "<p>Do we have a typeclass that says <code>∀ b : β, function.injective ((• b) : α → β)</code> or <code>∀ b : β, ∀ a1 a2 : α, a1 • b = a2 • b → a1 = a2</code> or similar?</p>\n<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/faithful_mul_semiring_action\">docs#faithful_mul_semiring_action</a>; should I just generalize that to <code>has_faithful_scalar</code> and make it a mixin?</p>",
        "id": 248460346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628159451
    },
    {
        "content": "<p>That's not the same as what you're asking about. (Note that for a <code>mul_semiring</code> action,  <code>(• 0)</code> is basically never injective.) What you want is more like a free action.</p>",
        "id": 248461138,
        "sender_full_name": "Reid Barton",
        "timestamp": 1628160129
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_smul_regular\">docs#is_smul_regular</a> what you are after, but made into a typeclass?  I was the one who introduced <code>is_smul_regular</code>, but I did not make it into a typeclass.</p>",
        "id": 248461155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1628160141
    },
    {
        "content": "<p><code>is_smul_regular</code> states that left-smul is injective, Eric is looking for right-smul, right?</p>",
        "id": 248461222,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628160225
    },
    {
        "content": "<p>Ah, I was unsure which injectivity it was that Eric wanted...</p>",
        "id": 248461271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1628160253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/injective.20scalar.20actions/near/248461138\">said</a>:</p>\n<blockquote>\n<p>That's not the same as what you're asking about. (Note that for a <code>mul_semiring</code> action,  <code>(• 0)</code> is basically never injective.) What you want is more like a free action.</p>\n</blockquote>\n<p>Oh you're right, I got my binders in the wrong places</p>",
        "id": 248461302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628160299
    },
    {
        "content": "<p>BTW: I was thinking about defining something like <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s proposed typeclass, namely a typeclass for algebras where <code>algebra_map</code> is injective.</p>",
        "id": 248461347,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628160337
    },
    {
        "content": "<p>So you're looking for <code>function.injective ((•) : α → β → β)</code>, then?</p>",
        "id": 248461419,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628160377
    },
    {
        "content": "<p>yes, I think I am</p>",
        "id": 248461434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628160393
    },
    {
        "content": "<p>Which is what <code>faithful_mul_semiring_action</code> states after all, I think?</p>",
        "id": 248461463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628160427
    },
    {
        "content": "<p>Looks like it</p>",
        "id": 248462039,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628160931
    },
    {
        "content": "<p>So yes, I agree with \"just generalize that to has_faithful_scalar and make it a mixin?\"</p>",
        "id": 248462129,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628161004
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8555\">#8555</a></p>",
        "id": 248465092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628163359
    },
    {
        "content": "<p>I managed to bump the number of instances from 2 to 8, so this generalization seems pretty justified. I'm sure there are more, but I'm out of motivation to look for them.</p>",
        "id": 248475228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628169416
    }
]