[
    {
        "content": "<p>I'm having trouble finding this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 257403940,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634145658
    },
    {
        "content": "<p>Surely we have this (or I guess maybe the family version with <code>v : ι → V</code> instead of <code>s</code>) somewhere?</p>",
        "id": 257404036,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634145705
    },
    {
        "content": "<p>Well I now have this disgusting proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n  <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">hI₁</span><span class=\"o\">,</span> <span class=\"n\">hI₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_maximal_independent</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hI₁</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">submodule.span_mono</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">submodule.span_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">submodule.subset_span</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht₁</span><span class=\"o\">,</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hI₂</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">ht₂</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.smul_mem</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"n\">ht₂</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">ht₁</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht₂</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I'm sure this must already exist somewhere. Any advice, much appreciated.</p>",
        "id": 257406270,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634146607
    },
    {
        "content": "<p>Haha, the module doc claims it's there: \"We also prove that, when working over a field,<br>\nany family of vectors includes a linear independent subfamily spanning the same subspace.\"</p>\n<p>But I don't see it yet.</p>",
        "id": 257430532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634156141
    },
    {
        "content": "<p>OK I'm just about done for the day but I'll pick this up again tomorrow then.</p>",
        "id": 257431228,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634156417
    },
    {
        "content": "<p>The linear algebra library (esp. the fancy strong rank condition stuff) is really awesome so I guess I was surprised at this (apparent?) gap.</p>",
        "id": 257431313,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634156473
    },
    {
        "content": "<p>The linear algebra library has undergone lots of revisions and modifications: it could really do with a nice tutorial / howto document!</p>",
        "id": 257431659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634156610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Linear.20basis.20from.20spanning.20set/near/257430532\">said</a>:</p>\n<blockquote>\n<p>Haha, the module doc claims it's there: \"We also prove that, when working over a field,<br>\nany family of vectors includes a linear independent subfamily spanning the same subspace.\"</p>\n</blockquote>\n<p>Filippo was looking for the set version, not the indexed family one, but I guess you looked for both.</p>",
        "id": 257432563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634156989
    },
    {
        "content": "<p>Yes, I couldn't find either. I'm fearing that when someone tracks this down it will be me that accidentally deleted it in some PR. :-)</p>",
        "id": 257433029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634157156
    },
    {
        "content": "<p>Exciting! <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 257433154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634157220
    },
    {
        "content": "<p>Does a git blame on that docstring help?</p>",
        "id": 257445259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634162272
    },
    {
        "content": "<p>Somehow I was blind yesterday evening. We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_linear_independent\">docs#exists_linear_independent</a> So for example we can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">ht₂</span><span class=\"o\">,</span> <span class=\"n\">ht₃</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exists_linear_independent</span> <span class=\"o\">(</span><span class=\"n\">linear_independent_empty</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.empty_subset</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht₁</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">submodule.span_mono</span> <span class=\"n\">ht₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">submodule.span_le.mpr</span> <span class=\"n\">ht₂</span><span class=\"o\">),</span> <span class=\"n\">ht₃</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257512486,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634207284
    },
    {
        "content": "<p>I'm not sure if I prefer my <code>submodule.span k t = submodule.span k s</code> or the equivalent statement in the conclusion of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_linear_independent\">docs#exists_linear_independent</a> <code>s ⊆ submodule.span k t</code> but I think the specialisation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_linear_independent\">docs#exists_linear_independent</a> to the case when we're extending the empty set is worth adding so I'll do that now.</p>",
        "id": 257512718,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634207418
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9708\">#9708</a></p>",
        "id": 257513746,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634208026
    },
    {
        "content": "<p>Yes, the specialization is definitely helpful: at least two of us looks at <code>exists_linear_independent</code> and failed to see how to use it immediately. :-)</p>",
        "id": 257594140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634240857
    }
]