[
    {
        "content": "<p>Am I right in thinking that we don't have the predicate that an R-module (R a ring) is projective? This works really nicely as a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_projective</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>I've managed to prove it's equivalent to the universal property (maps from M lift along surjections) (I was lazy with universes as you can see, but this is still the right definition I think even in a more universe-polymorphic setting). Mathematically the definition says that the obvious R-linear map from (free R-module on M) to M splits, and what's nice about it is that it doesn't quantify over any other types.</p>\n<p>Now I'm going to show my ignorance of mathlib: where does this definition go? Is this the kind of predicate one wants on R-modules? My guess is yes. Or should this go in some category file dealing with R-modules where I then prove some statement about lifting epimorphisms in the category of R-modules? Should I be proving the universal property as an \"explicit\" statement about lifting along surjections or as some kind of category theoretical statement about projective objects in categories?</p>",
        "id": 230478288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615884739
    },
    {
        "content": "<p>It doesn't answer any of your questions, but your sum expression looks like it would have API somewhere in <code>linear_algebra</code>, and reminds me a little of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total\">docs#finsupp.total</a></p>",
        "id": 230479114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615885230
    },
    {
        "content": "<p><code>finsupp.total M M R id (s m) = m</code> I guess</p>",
        "id": 230479499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615885404
    },
    {
        "content": "<p>I think this should go to a new folder about homological algebra</p>",
        "id": 230480344,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615885820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I think my answer to your main question is \"both\".</p>",
        "id": 230483112,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615887334
    },
    {
        "content": "<p>I mean, there should be a file <code>projective_object</code> (perhaps under <code>category_theory/abelian</code>) giving the general definition in any category,</p>",
        "id": 230483486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615887532
    },
    {
        "content": "<p>and then in <code>algebra/category/Module/???</code> there should be the lemma that this agrees with your characterisation when in the category of R-modules.</p>",
        "id": 230483567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615887593
    },
    {
        "content": "<p>and your characterisation above should be in <code>algebra/module/projective.lean</code></p>",
        "id": 230483746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615887671
    },
    {
        "content": "<p>(and probably should use different universes for <code>R</code> and <code>M</code>)</p>",
        "id": 230552649,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615914482
    },
    {
        "content": "<p>Apparently, this \"dual basis lemna\" also holds for semimodules: <a href=\"https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://www.anubih.ba/Journals/vol-1,no-2,y05/03revdeore.pdf&amp;ved=2ahUKEwirvOCaqLXvAhVHmYsKHUclDh4QFjADegQICRAC&amp;usg=AOvVaw3kkdmXsDcjIB1-z070daQY\">https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://www.anubih.ba/Journals/vol-1,no-2,y05/03revdeore.pdf&amp;ved=2ahUKEwirvOCaqLXvAhVHmYsKHUclDh4QFjADegQICRAC&amp;usg=AOvVaw3kkdmXsDcjIB1-z070daQY</a></p>",
        "id": 230554902,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615915232
    },
    {
        "content": "<p>What's the analogue of this for injective semimodules?</p>",
        "id": 230556541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615915752
    },
    {
        "content": "<p>I wonder whether the following equivalent characterization is helpful: A (right) module $P$ is projective if and only if $P \\otimes_R Hom(P, R) \\to End(P), p \\otimes f\\mapsto (q \\mapsto p f(q))$ is an isomorphism. One disadvantage at the moment is that there are no bimodules yet and tensor products are only defined for commutative rings. I don't know whether it is an advantage that you don't need to talk about 'elements'.</p>",
        "id": 230556589,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615915764
    },
    {
        "content": "<p>It seems that Zulip uses double dollars for math: e.g., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mo separator=\"true\">,</mo><mi>R</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>E</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P \\otimes_R Hom(P, R) \\to End(P)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 230604278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615933845
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 230605053,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615934317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Projective.20R-modules.2E/near/230483486\">said</a>:</p>\n<blockquote>\n<p>I mean, there should be a file <code>projective_object</code> (perhaps under <code>category_theory/abelian</code>) giving the general definition in any category,</p>\n</blockquote>\n<p>I got started on this last year (see <a href=\"https://github.com/leanprover-community/mathlib/blob/projective/src/category_theory/abelian/projective.lean\">here</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/projective/src/algebra/category/Module/projective.lean\">here</a>). I then tried to prove that in a category with enough projectives every object has a projective resolution, but the then-current definition of chain complex in mathlib made this very difficult (and then Part III happened and I didn't have time to work on it). Hopefully the improved chain complexes from LTE will make this less painful.</p>",
        "id": 230648905,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1615966561
    },
    {
        "content": "<p><span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 230659018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615972314
    },
    {
        "content": "<p>I'm engaging with chain complexes in LTE but right now I'm still doing the groundwork (if V has equalisers then so does complexes over V etc).</p>",
        "id": 230665829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615975697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Projective.20R-modules.2E/near/230665829\">said</a>:</p>\n<blockquote>\n<p>I'm engaging with chain complexes in LTE but right now I'm still doing the groundwork (if V has equalisers then so does complexes over V etc).</p>\n</blockquote>\n<p>Oh, that sounds fun. Can I help with something there? I need something to play with to try out the new chain complex design.</p>",
        "id": 230669544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615977731
    },
    {
        "content": "<p>Feel free to play with the mess in the file <code>src/system_of_complexes/complex.lean</code> in the branch <code>ses_to_les</code>. Because I am trying to set things up for general categories rather than just R-modules I am forced to use the category theory library. We have these \"lawless complexes\" -- a new <code>differential_object I V</code> definition (which clashes with mathlib I think? I'm using the local one) and in order to state that exact sequences make sense I need to prove that if V has zero morphisms, equalizers and images then so does <code>differential_object I V</code>. My proof for equalizers is timing out and I'm stuck on the proof for images :-) Bhavik helpfully suggested that I also assume <code>has_image_maps</code> which definitely helped.</p>",
        "id": 230670196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615978094
    },
    {
        "content": "<p>Mathematically here is the sort of thing which is going on. A term of type <code>differential_object I V</code> is a map <code>I -&gt; V</code> (the objects, indexed by <code>I</code>) and then <code>d i j : X_i -&gt; X_j</code> for all i,j. Morphisms have to preserve <code>d</code>, so e.g. you can make a \"single object\" X_j in one degree with 0's everywhere, but if you have a lawless complex Y and a map X_j -&gt; Y_j then you might not get a map (single X_i) -&gt; Y_j because d j j might not be zero on Y_j. This is a mild stumbling block in the way of \"proving things for the product by deducing them from the factors\".</p>",
        "id": 230670478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615978250
    },
    {
        "content": "<p>Note that Kevin wrote a fair amount of docs on that <code>ses_to_les</code> branch</p>",
        "id": 230670561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615978312
    },
    {
        "content": "<p>Maybe they should be backported to <code>master</code>, because they are independent of any other experiments.</p>",
        "id": 230670633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615978332
    },
    {
        "content": "<p>They are a bit incoherent, they are more like notes. But I can definitely expand them into docs</p>",
        "id": 230670640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615978336
    },
    {
        "content": "<p>Once the sorried instances are there (V has images -&gt; lawless complex I V has images, and same for equalizers) one can then say that if V is an abelian category then there is a notion of short exact sequence for the complexes. The reason this is so slow-going is that instead of just \"cheating\" and using some concrete category I'm following Markus' example -- he defined exact sequences for any category with zero morphisms, images and equalizers, so I have defined short exact sequences in the same generality.</p>",
        "id": 230671169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615978640
    },
    {
        "content": "<p>Oh and the reason <code>has_image_maps</code> comes into things is that if you are trying to factor f:X -&gt; Y (a morphism of complexes) through a monic, and you can factor each f_i:X_i -&gt; Y_i, and if I_i is the image of f_i, then you need to come up with <code>d</code> maps which commute with everything in order to make the I_i into an object of the complex category, so you need a machine which maps images to images, and it's <code>has_image_maps</code></p>",
        "id": 230672318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615979285
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230673632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615979976
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230673644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615979982
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230673705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615980007
    },
    {
        "content": "<p>oh, this is all garbage, sorry</p>",
        "id": 230673764,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615980034
    },
    {
        "content": "<p>I think I am still very confused by this lawless chain complex business, and don't understand at what point we're going to restrict to something equivalent to the real definition....</p>",
        "id": 230673991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615980141
    },
    {
        "content": "<p>and I don't quite understand why we're trying to construct <code>has_equalizers</code> and similar things on <code>differential_object</code>.</p>",
        "id": 230674443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615980406
    },
    {
        "content": "<p>Once we pass to the subcategory that actually models chain complexes, we'll lose the <code>has_equalizers</code> instance, and I don't really understand why we expect it to be any less work to reconstruct than to build it on the subcategory in the first place.</p>",
        "id": 230674483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615980444
    },
    {
        "content": "<p>This is something that I don't have a good feeling for yet.</p>",
        "id": 230677861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615982316
    },
    {
        "content": "<p>The transition between <code>complex_like</code> and <code>differential_object</code> is not completely transparent. E.g., lifting the <code>shift</code> functor was more work than I hoped.</p>",
        "id": 230678068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615982412
    },
    {
        "content": "<p>Oh I had just assumed that putting all the structure on the differential object was the \"natural next step\".</p>",
        "id": 230678779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615982749
    },
    {
        "content": "<p>I should perhaps add that I am still not at all sold on this <code>bool</code> parameter. Perhaps we should just have a predicate on I x I saying \"this one can be nonzero\".</p>",
        "id": 230680910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615983917
    },
    {
        "content": "<p>so for a succ_str you get maps from X(i) to X(j) iff either r i j or r j i depending on what your convention is</p>",
        "id": 230681084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615983996
    },
    {
        "content": "<p>If we want to use this also for modeling double complexes, then we should also have a predicate on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi><mo>×</mo><mi>ι</mi><mo>×</mo><mi>ι</mi></mrow><annotation encoding=\"application/x-tex\">\\iota \\times \\iota \\times \\iota</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ι</span></span></span></span> saying which compositions should be zero.</p>",
        "id": 230681252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615984102
    },
    {
        "content": "<p>But I'm not sure if we should want to reuse this for double complexes</p>",
        "id": 230682589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615984731
    },
    {
        "content": "<p>How about this: a double complex is two commuting d's both satisfying d^2=0</p>",
        "id": 230683091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615984962
    },
    {
        "content": "<p>I'm moving to #maths to continue the discussion about long exact sequences.</p>",
        "id": 230691055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615988335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, could we PR the stuff from your <a href=\"https://github.com/leanprover-community/mathlib/tree/projective\">branch#projective</a> outside of the work in <code>src/algebra/homology/</code>? I agree that we should use projective resolutions as yet another test case for good chain complex designs, but that is going to be easier if we have the uncontroversial parts of this branch already in mathlib.</p>",
        "id": 230781634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616020968
    },
    {
        "content": "<p>(I can also try this sometime if you're busy with other things.)</p>",
        "id": 230781920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616021155
    },
    {
        "content": "<p>I probably won't get around to making a PR soon, so feel free to have a go</p>",
        "id": 230785283,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1616023145
    }
]