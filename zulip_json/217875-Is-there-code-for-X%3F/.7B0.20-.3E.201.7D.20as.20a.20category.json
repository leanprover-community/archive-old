[
    {
        "content": "<p>Is there a quick way of referrring to <code>fin 2</code> directly as a category (whose objects are 0 and 1, and 0 \\r 1 the only nonidentity morphism)?</p>",
        "id": 232808399,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1617303920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> it should just work</p>",
        "id": 232808474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617303952
    },
    {
        "content": "<p>every type that has an ordering is automatically a category</p>",
        "id": 232808554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617303972
    },
    {
        "content": "<p>Aha, what category does that give for a non-ordered set?</p>",
        "id": 232808746,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1617304059
    },
    {
        "content": "<p>If the type has a preorder instance, then it gets the assocaited category instance automatically</p>",
        "id": 232808822,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617304083
    },
    {
        "content": "<p>otherwise there is no category instance</p>",
        "id": 232808853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617304088
    },
    {
        "content": "<p>You can explicitly use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.discrete\">docs#category_theory.discrete</a> if you want the \"discrete\" category on a type</p>",
        "id": 232808899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617304116
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/default.lean#L280\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/default.lean#L280</a> is the place where <code>preorder</code>s get turned into cats</p>",
        "id": 232809263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617304250
    },
    {
        "content": "<p>(To be honest, this may have been a bad design decision and we should have a type synonym - as with <code>discrete</code> - to get this instance from a preorder.)</p>",
        "id": 232885728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617360551
    },
    {
        "content": "<p>Anecdotal: I haven't experienced downsides of the current design.</p>",
        "id": 232937412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617389484
    }
]