[
    {
        "content": "<p>Any easy way to prove this lemma? It looks trivial, but I can't find a short proof.<br>\nIs there some similar lemma in mathlib that can be applied here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>My attempt</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">_inst_2</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">n_def</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">generalizing</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">_inst_1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.card_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">n_def</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">n_def</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">finset.not_mem_empty</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">_inst_1</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x₀</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">x₁</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₁</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x₁</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hx₁</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x₁</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype_of_finset_card_le</span> <span class=\"n\">s.card</span><span class=\"o\">,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">s₁</span><span class=\"o\">,</span>\n      <span class=\"n\">fapply</span> <span class=\"n\">finset.card_le_card_of_inj_on</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">x₂</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">⟩</span> <span class=\"n\">hx₂</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hs</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x₃</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">⟩</span> <span class=\"n\">hx₂</span> <span class=\"o\">⟨</span><span class=\"n\">x₄</span><span class=\"o\">,</span> <span class=\"n\">hx₃</span><span class=\"o\">⟩</span> <span class=\"n\">hx₄</span> <span class=\"n\">hx₅</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hx₅</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx₅</span> <span class=\"o\">}},</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">f₁_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">by_cases</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x₁</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x₁</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x₁</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">f₁</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">hs₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">s₁.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- `s₁` is effectively `s` without `x₁`, so `s₁.card = s.card - 1`</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">hn</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x₁</span><span class=\"o\">}</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">f₁</span> <span class=\"n\">s₁</span> <span class=\"n\">hs₁</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"o\">⟩,</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">h₆</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- if `f₁` goes through `x₁`, then `n₂ - 1`, else `n₂`,</span>\n           <span class=\"c1\">-- then use induction on `n₂`</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 266557825,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641043771
    },
    {
        "content": "<p>My instinct would be to get an element a of alpha, define a map from the natural numbers into alpha sending n to f^n(a), use a result from the library saying this isn't injective and put things together from there</p>",
        "id": 266558264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641044404
    },
    {
        "content": "<p>A rough proof, its basically what kevin said</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.function.iterate</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nonempty.elim</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"c1\">-- I'm not sure what the cleanest way to do this is</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">not_injective_infinite_fintype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.injective</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">hh</span> <span class=\"k\">with</span> <span class=\"n\">hlt</span> <span class=\"n\">hlt</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tsub_add_cancel_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hlt</span><span class=\"o\">),</span> <span class=\"n\">function.iterate_add_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tsub_pos_of_lt</span> <span class=\"n\">hlt</span><span class=\"o\">)</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tsub_pos_of_lt</span> <span class=\"n\">hlt</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266558571,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641044942
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266559124,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641045825
    }
]