[
    {
        "content": "<p>The lemma nat.coprime.lcm_eq_mul states that if natural numbers <code>a</code> and <code>b</code> are <code>coprime</code>, then <code>lcm a b = a * b</code>. Does a version of this lemma for more than two elements exist, i.e. something like: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.range</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.log</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.multiset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.lcm_eq_prod_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">nat.coprime</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">s.lcm</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270761911,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1644003089
    },
    {
        "content": "<p>You should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pairwise\">docs#set.pairwise</a> for <code>h</code></p>",
        "id": 270765965,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644005130
    },
    {
        "content": "<p>Probably we don't have this lemma.</p>",
        "id": 270766315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644005293
    },
    {
        "content": "<p>Note that the name should mention <code>nat</code> somewhere</p>",
        "id": 270766397,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644005339
    },
    {
        "content": "<p>Thanks. I will try to understand how the pairwise comes in after having proved the lemma. The following is my current attempt. I feel like I am simply missing some <code>generalizing</code> trick. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.range</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.log</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.multiset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.finset</span>\n\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.coprime_prod_of_pairwise_coprime</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">nat.coprime</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.coprime</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.coprime_one_right_iff</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_empty</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"n\">hynt</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.prod_insert</span> <span class=\"n\">hynt</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">nat.coprime.mul_right</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n     <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.nat.lcm_eq_prod_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">nat.coprime</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">s.lcm</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_empty</span><span class=\"o\">,</span> <span class=\"n\">finset.lcm_empty</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"n\">hxnt</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.prod_insert</span> <span class=\"n\">hxnt</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.lcm_insert</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hco</span> <span class=\"o\">:</span> <span class=\"n\">nat.coprime</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.coprime_prod_of_pairwise_coprime</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">id.def</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">lcm_eq_nat_lcm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hco.lcm_eq_mul</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270767355,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1644005825
    },
    {
        "content": "<p>Try starting your first proof with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.induction_on</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"n\">hynt</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>That should make it pretty straightforward</p>",
        "id": 270767764,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1644006114
    },
    {
        "content": "<p>Thanks. I just looked again in the docs and found finset.induction_on' which works much better.</p>",
        "id": 270767869,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1644006172
    },
    {
        "content": "<p>Or <code>revert h,</code> before <code>apply finset.induction_on s,</code>, but I didn't try that</p>",
        "id": 270767886,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1644006177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> How would I go about formulating <code>h</code> using <code>pairwise</code>?</p>",
        "id": 270772074,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1644008518
    },
    {
        "content": "<p>Ah, got it. You need <code>coe_t</code> to convert a finset to a set.</p>",
        "id": 270772597,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1644008775
    },
    {
        "content": "<p>We should generalize <code>set.pairwise</code> to <code>has_mem</code>.</p>",
        "id": 270777921,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644011554
    },
    {
        "content": "<p>Unfortunately, <code>pairwise</code> is already taken globally</p>",
        "id": 270778296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644011772
    },
    {
        "content": "<p><code>pairwise_on</code>?</p>",
        "id": 270780424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644012862
    },
    {
        "content": "<p>You won me!</p>",
        "id": 270780504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644012902
    },
    {
        "content": "<p>That's actually even better than the current state of things because <code>open set</code> often results in rapid death by ambiguity.</p>",
        "id": 270780560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644012942
    }
]