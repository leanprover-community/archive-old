[
    {
        "content": "<p>Am I blind or do we not have the <code>inner_product_space (α × β)</code> instance?</p>",
        "id": 258926997,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635148807
    },
    {
        "content": "<p>You need a <code>def l2_prod</code>, because the default norm on the product is the maximum.</p>",
        "id": 258945922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635161517
    },
    {
        "content": "<p>Is <code>pi_Lp.inner_product_space</code> the instance you're looking for?</p>",
        "id": 258955927,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1635167251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Inner.20product.20space.20on.20.CE.B1.20.C3.97.20.CE.B2/near/258955927\">said</a>:</p>\n<blockquote>\n<p>Is <code>pi_Lp.inner_product_space</code> the instance you're looking for?</p>\n</blockquote>\n<p>Yes, this would be the usual workaround.</p>",
        "id": 258955998,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1635167280
    },
    {
        "content": "<p>Should we have <code>prod_Lp</code> to match <code>pi_Lp</code>?</p>",
        "id": 258958138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635168308
    },
    {
        "content": "<p>Let's wait until (if ever) it's needed for something -- the definition of the metric/normed space instances on <code>pi_Lp</code> requires several little inequality proofs which it would be sad to have to repeat.  See also<br>\n<a href=\"#narrow/stream/116395-maths/topic/Fubini's.20for.20fin.202.20-.3E.20R/near/222194513\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Fubini's.20for.20fin.202.20-.3E.20R/near/222194513</a></p>",
        "id": 258959069,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1635168738
    },
    {
        "content": "<p>You can use equivalence to <code>Π b : bool, cond (ulift α) (ulift β)</code> to get all structures (probably with poor definitional equalities).</p>",
        "id": 259007367,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635189700
    },
    {
        "content": "<p>Just checking if there were any changes in mathlib since this discussion? What's the easiest way to make an <code>inner_product_space</code> on <code>E₁ × E₂</code>, where both are themselves inner product spaces (with the inner form on the product being the direct sum of the two forms)?</p>",
        "id": 292769533,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660142949
    },
    {
        "content": "<p>There was this recent discussion: <a href=\"#narrow/stream/116395-maths/topic/prod.20of.20inner.20product.20spaces/near/291488589\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/prod.20of.20inner.20product.20spaces/near/291488589</a></p>\n<p>This resulted in <a href=\"https://github.com/leanprover-community/mathlib/pull/15833\">#15833</a>, but that's a refactor of <code>pi_Lp</code>, not a <code>prod_Lp</code> type (but any <code>prod_Lp</code> should follow the refactor).</p>",
        "id": 292769964,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660143101
    },
    {
        "content": "<p>So, at this moment, I think you can use <code>pi_Lp 2 E</code> in the finite case, where <code>E : fin 2 → Type*</code> such that <code>E 0 = E₁</code> and <code>E 1 = E₂</code>. However, if no one else does it, I'll probably get around to making this <code>prod_Lp</code> type. (No promises right now though.)</p>",
        "id": 292770571,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660143304
    },
    {
        "content": "<p>Ah, thanks. I can't seem to even get this much started... Do I have the syntax wrong somehow?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E₁</span> <span class=\"n\">E₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[derive [add_comm_group, module ℝ]</span><span class=\"o\">]</span><span class=\"kd\">def</span> <span class=\"n\">new_space</span> <span class=\"o\">:=</span> <span class=\"n\">E₁</span> <span class=\"bp\">×</span> <span class=\"n\">E₂</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">new_space</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 292772487,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660143876
    },
    {
        "content": "<p>Your <code>new_space</code> takes <code>E₁</code> and <code>E₂</code> as explicit arguments, so <code>instance : inner_product_space ℝ (new_space E₁ E₂) := sorry</code> is valid</p>",
        "id": 292773948,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660144381
    },
    {
        "content": "<p>You can see this in the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">new_space</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">new_space</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">E₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E₂</span><span class=\"o\">],</span>\n    <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So, the issue it's having is with <code>new_space</code>, and it says : \"hey this thing isn't a type! It's a thing that takes two types which are <code>inner_product_space</code>s and it returns another type!\"</p>",
        "id": 292774692,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660144553
    },
    {
        "content": "<p>Ah, thanks! I'm an idiot...</p>",
        "id": 292776657,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660145178
    },
    {
        "content": "<p>Hmm any hint on how to get that <code>E : fin 2 → Type*</code> to work? I tried this and it's not working... Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pi_Lp</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">E₁</span><span class=\"o\">,</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)),</span>\n</code></pre></div>",
        "id": 292780916,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660146510
    },
    {
        "content": "<p>The problem here is that your <code>E₁</code> and <code>E₂</code> need to live in a common type universe because <code>E : fin 2 → Type*</code> really means <code>E : fin 2 → Type u</code> (polymorphic over the universe parameter <code>u</code>). But you declared <code>(E₁ E₂ : Type*)</code>, which really means <code>(E₁ : Type u)</code> and <code>(E₂ : Type v)</code> for some universes <code>u</code> and <code>v</code>, but then your <code>![E₁, E₂] 0 : Type u</code> but <code>![E₁, E₂] 1 : Type v</code> which doesn't work. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E₁</span> <span class=\"n\">E₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[derive [add_comm_group, module ℝ]</span><span class=\"o\">]</span><span class=\"kd\">def</span> <span class=\"n\">new_space</span> <span class=\"o\">:=</span> <span class=\"n\">E₁</span> <span class=\"bp\">×</span> <span class=\"n\">E₂</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">new_space</span> <span class=\"n\">E₁</span> <span class=\"n\">E₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">pi_Lp</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">E₁</span><span class=\"o\">,</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)),</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 292789817,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660149216
    },
    {
        "content": "<p>However, if you're really going to do this, I highly suggest the method described in the other thread of pulling back the structure from <code>pi_Lp</code>. It's much easier.</p>",
        "id": 292790105,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660149307
    },
    {
        "content": "<p>Thanks! I <em>am</em> trying to pull back the structure, but I guess I'm doing it wrong...? (And how would I do it if the two spaces are really quite different, so they come from different universes...?)</p>",
        "id": 292793428,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660150459
    },
    {
        "content": "<p>This doesn’t answer your question, but I would suggest indexing by <code>bool</code> rather than ˋfin 2`, it makes things less annoying to work with imo</p>",
        "id": 292795349,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660151095
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_add_comm_group.induced\">docs#normed_add_comm_group.induced</a></p>",
        "id": 292795435,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660151131
    },
    {
        "content": "<p>This takes an additive group monomorphism and pulls back the norm structure (including topological, metric and bornological structures) along the map. Then all you need is this map, but <code>add_equiv</code>s should be easy to come by here.</p>",
        "id": 292796337,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660151456
    },
    {
        "content": "<p>Ok thanks, I'll try it!...</p>",
        "id": 292796593,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660151536
    },
    {
        "content": "<p>Looks like we don't have a pullback specifically for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a>. <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> or am I missing it? I figure you are very familiar with this part of the library by now <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 292797150,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660151730
    },
    {
        "content": "<p>I've never seen it and I can't find it either, so we probably don't have it :/</p>",
        "id": 292803942,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660154258
    },
    {
        "content": "<p>And also if we had it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.inner_product_space\">docs#submodule.inner_product_space</a> would probably be defined in terms of it</p>",
        "id": 292804136,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660154322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> just to warn you this is probably going to be a bit painful. If you want to try doing it then go for it, getting experience on how to manage this boilerplate side of the library is certainly valuable. But if you really need it and don't want to spend too much time on this I could have a go at it</p>",
        "id": 292804876,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660154587
    },
    {
        "content": "<p>(If anyone else wants to tackle it I'd be happy not to have to do it of course, but someone should do it at some point)</p>",
        "id": 292806348,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660155074
    },
    {
        "content": "<p>Thanks; I seem to have found a work-around for what I need that bypasses this construction... I certainly am not competent in how to manage the boilerplate!...</p>",
        "id": 292837096,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1660167488
    },
    {
        "content": "<p>A question for down the road: do we want separate <code>pi_Lp r β</code> and <code>prod_Lp r α β</code>, or should we copy <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lex\">docs#lex</a> and have <code>Lp r (Π i, β i)</code> and <code>Lp r (α × β)</code>?</p>",
        "id": 292851174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660176416
    },
    {
        "content": "<p>(I think this is only a question of spelling, it doesn't actually generalize any interesting theorems)</p>",
        "id": 292851215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660176459
    },
    {
        "content": "<p>It does mean that the \"copy the algebraic structure\" boilerplate is needed once not twice</p>",
        "id": 292851300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660176529
    },
    {
        "content": "<p>That's a nice idea, I didn't realize that's how <code>lex</code> works. It took me a few minutes to read and process it.</p>",
        "id": 292852683,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660177751
    },
    {
        "content": "<p>Having authored <code>lex</code>, I unsurprisingly like this approach <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 292854417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660179644
    },
    {
        "content": "<p>Let's not attempt this until the existing ennreal refactor has gone through</p>",
        "id": 292892514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660209115
    },
    {
        "content": "<p>Did someone implement <code>prod_Lp</code>? If not I'll do it tomorrow.</p>",
        "id": 295124008,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661373993
    },
    {
        "content": "<p>no, I haven't bothered. I do have a PR implementing equivalence between <code>lp</code> and other spaces sitting on the queue, in case anyone want to review it: <a href=\"https://github.com/leanprover-community/mathlib/pull/15872\">#15872</a></p>",
        "id": 295126858,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661375193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inner.20product.20space.20on.20.CE.B1.20.C3.97.20.CE.B2/near/295124008\">said</a>:</p>\n<blockquote>\n<p>Did someone implement <code>prod_Lp</code>? If not I'll do it tomorrow.</p>\n</blockquote>\n<p>did you do that?</p>",
        "id": 310583113,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668681583
    }
]