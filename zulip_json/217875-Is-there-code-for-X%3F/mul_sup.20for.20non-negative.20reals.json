[
    {
        "content": "<p>I found a version of <code>mul_sup</code> for <code>nnreal</code>, but not for <code>real</code>, is there an easy way to get it for non-negative <code>real</code>?</p>",
        "id": 267367251,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1641748102
    },
    {
        "content": "<p>Adapted from <code>nnreal.mul_sup</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_sup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sup_eq_max</span><span class=\"o\">,</span> <span class=\"n\">max_eq_right</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">max_eq_right</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sup_eq_max</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267368045,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641749226
    },
    {
        "content": "<p>Maybe there is already a similar lemma in mathlib, but I can't find it.</p>",
        "id": 267368099,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641749285
    },
    {
        "content": "<p>Also, <a href=\"https://tqft.net/mathlib/data/real/pointwise\">file#data/real/pointwise</a> for <code>Sup</code> instead of <code>sup</code></p>",
        "id": 267370189,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641752149
    },
    {
        "content": "<p>Presumably this should actually be stated about <code>max</code>?</p>",
        "id": 267370814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641753034
    },
    {
        "content": "<p>Not the most general version of the lemma</p>",
        "id": 267370827,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753062
    },
    {
        "content": "<p>What makes that any more / less general?</p>",
        "id": 267370927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641753205
    },
    {
        "content": "<p><code>sup</code> is more general than <code>max</code>, so the <code>max</code> statement is a one-liner from the one for <code>sup</code>.</p>",
        "id": 267370975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753248
    },
    {
        "content": "<p>Of course, over an arbitrary type, not just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span></p>",
        "id": 267370980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753270
    },
    {
        "content": "<p>We don't have a typeclass to express this over an arbitrary type though? Or do we?</p>",
        "id": 267370986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641753292
    },
    {
        "content": "<p>Surely we do, after all we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_sup\">docs#mul_sup</a></p>",
        "id": 267370996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753309
    },
    {
        "content": "<p>Just take <code>ordered_semiring</code> as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_le_mul_of_nonneg_left\">docs#mul_le_mul_of_nonneg_left</a> and Patrick's proof goes through.</p>",
        "id": 267371021,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753341
    },
    {
        "content": "<p>Well the ennreal one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.max_mul\">docs#ennreal.max_mul</a></p>",
        "id": 267371094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641753428
    },
    {
        "content": "<p>Nuke that lemma!</p>",
        "id": 267371105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753452
    },
    {
        "content": "<p>I'm not really sure what you're describing above without a code sample, but I assume you're not at lean right now</p>",
        "id": 267371125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641753480
    },
    {
        "content": "<p>Okay, the <code>sup</code> statement is hard to get because lattice groups are so baby in mathlib.</p>",
        "id": 267371248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753646
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">max_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_eq_right</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"o\">),</span> <span class=\"n\">max_eq_right</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_eq_left</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"o\">),</span> <span class=\"n\">max_eq_left</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267371380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641753865
    }
]