[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> wrote a Python program which can solve moderately easy Euclidean geometry problems. I'm looking into what it would take to port it to Lean and the main blocking point is of course the scarcity of Euclidean geometry results in mathlib.</p>",
        "id": 281605908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652025666
    },
    {
        "content": "<p>We're thinking of first tackling triangle similarities. So I'm wondering whether we have the type of similarities (ratio-preserving maps) and the type of oriented similarities (oriented angle-preserving maps).</p>",
        "id": 281605947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652025722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> is probably the most well-informed on the current state of Euclidean geometry in mathlib and might also have some comments on the best way forward.</p>",
        "id": 281606095,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1652025924
    },
    {
        "content": "<p>Ahah! I was about to send \"cc <span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span>\"</p>",
        "id": 281606161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652026012
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/IMO.20Geometry\">a recent discussion</a>. Pretty much everything about isometries in mathlib should generalise in some way to similarities (with the definition making sense in general metric spaces or indeed <code>pseudo_emetric_space</code>s; note that as in that discussion, many results for congruent or similar triangles should actually be stated for arbitrary indexed families of points, not for the special case of triangles), and a good starting point is probably applying the hom refactor to isometries so that lemmas that are true for all kinds of types for bundled similarities can then be stated for a single type class rather than separately for at least five types of bundled isometries and a corresponding five new types of bundled similarities. (Or more types if you also add types restricted to be orientation-preserving.)</p>\n<p>One large group of trivial lemmas that we don't have is lemmas to transport various geometrical definitions across isometries / similarities. Pretty much every geometrical definition we have should transport across isometries and many also across similarities with appropriate scaling if the definition involves distance in some way.</p>\n<p>Another fact I don't think we have is that a (not necessarily surjective) isometry of Euclidean spaces is an affine map (I did that some time ago outside of mathlib in the Euclidean context, but the appropriate form to add for mathlib would be stated for strictly convex spaces, which were added more recently).</p>",
        "id": 281607758,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1652028285
    },
    {
        "content": "<p>Ahah, I was trying to not get into refactoring isometries, but I guess the time has come. Can you explain me the naming convention around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometric\">docs#isometric</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometry\">docs#isometry</a>? I would have swapped both names (or maybe renamed <code>isometry</code> to <code>is_isometry</code>).</p>",
        "id": 281608336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652029192
    },
    {
        "content": "<p><code>isometric</code> should be <code>isometry_equiv</code> to be consistent with <code>linear_isometry_equiv</code> and <code>affine_isometry_equiv</code>, unless there some other naming convention involved that I'm missing. We don't currently have a bundled type for not-necessarily-bijective isometries without additional properties such as linearity (but renaming <code>isometry</code> to <code>is_isometry</code> seems reasonable with or without adding such a bundled type).</p>",
        "id": 281625775,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1652055761
    },
    {
        "content": "<p>I will be trying to work on this soon as well. As I also asked in the other discussion, what exactly does \"applying the hom refactor to isometries\" mean? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 282543443,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652726959
    },
    {
        "content": "<p>Isometries survived both refactors so far, so I'm gonna change them to follow the latest design</p>",
        "id": 282550165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652730122
    },
    {
        "content": "<p>Oh that's technical. Originally, we had unbundled hom predicates/classes: \"<code>f</code> is a function and <code>f</code> distributes over multiplication\". Then we switched to bundled homs: \"<code>f</code> is a group homomorphism\". And now we added on top hom classes: \"<code>ring_hom</code> is a type of group homomorphisms\".</p>",
        "id": 282550166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652730122
    },
    {
        "content": "<p>Ah ok, I was aware of the bundled homs but not the top hom classes, thanks</p>",
        "id": 282551514,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652730815
    },
    {
        "content": "<p>If you don't mind explaining, what led to these changes? (Or just link some relevant discussion lol.) Was it just to get rid of the duplicate code had to be rewritten every time a new hom-class was added? Were there downsides to this?</p>",
        "id": 282556910,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652733332
    },
    {
        "content": "<p>Also, how soon do you plan on working on these refactors? Would you mind if I helped out? I don't really know what your plan would be though but I'd love to hear what you wanna do</p>",
        "id": 282557109,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652733421
    },
    {
        "content": "<p>It's a matter of days now. I need to find some time in between my revisions.</p>",
        "id": 282562470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652736103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Similarities/near/282556910\">said</a>:</p>\n<blockquote>\n<p>If you don't mind explaining, what led to these changes? (Or just link some relevant discussion lol.) Was it just to get rid of the duplicate code had to be rewritten every time a new hom-class was added? Were there downsides to this?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/Typeclasses.20for.20morphisms\">Here's the thread where we developed the morphism class pattern.</a></p>\n<p>The point is indeed that each time you introduce a new, more specialized, type of morphisms (like <code>ring_hom</code> specializes <code>monoid_hom</code>), you need to copy over a huge amount of code: everything about <code>monoid_hom</code> is still true about <code>ring_hom</code>. Moreover, whenever you add a declaration involving <code>monoid_hom</code>s, you also need to duplicate it to <code>ring_hom</code>s. So with this setup you get a kind of multiplicative explosion of code. And it's quite possible you forget to copy new lemmas over, so the next time someone wants to use your results they have to go back and copy it over (as happened often in mathlib).</p>\n<p>In the morphism class refactor, we decided that instead of taking a parameter <code>f : M →* N</code> of a fixed type <code>monoid_hom</code>, instead the type of <code>f</code> should be an arbitrary <code>F</code> as long as all elements of <code>F</code> are (also) monoid homomorphisms, expressed as <code>monoid_hom_class F M N</code>.</p>\n<p><a href=\"https://arxiv.org/abs/2202.01629\">If you want the full gory details, check out section 6 of my paper on the class-based patterns in mathlib.</a></p>",
        "id": 282629911,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652789441
    },
    {
        "content": "<p>Oh! Thanks, the paper is wonderful btw. I always wondered how exactly typeclasses worked and could never understand any of the technical stuff, but your paper explained most everything very well</p>",
        "id": 282699142,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652817806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> At the end of section 6 you say that \"work is still ongoing to provide a suitable generic form of standard operations such as composition and identity maps,\" which is interesting because I was wondering why we still had all the <code>*_hom.id</code> and <code>*_hom.comp</code> (and actualy a lot of <code>*_hom.map_add</code>?) lemmas sitting around. How do you think this will be done?</p>",
        "id": 282719389,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652829191
    },
    {
        "content": "<p>I've started trying to refactor <code>topology.metric_space.isometry</code>. I'm working with the definitions below and the entire file actually ports very easily with minimal changes. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> what do you think? I'm just wondering if you mind me just get started with the refactor now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.antilipschitz</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fun_like.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">setup</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- An isometry (also known as isometric embedding) is a map preserving the edistance</span>\n<span class=\"sd\">between pseudoemetric spaces, or equivalently the distance between pseudometric space.  -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">isometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edist_eq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">isometry_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edist_eq'</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">isometry.to_isometry_class</span> <span class=\"o\">:</span>\n  <span class=\"n\">isometry_class</span> <span class=\"o\">(</span><span class=\"n\">isometry</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">isometry.to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">congr'</span> <span class=\"o\">},</span>\n  <span class=\"n\">edist_eq'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">isometry.edist_eq'</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">isometry</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fun_like.has_coe_to_fun</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_fun_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">isometry</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f.to_fun</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">isometry</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">fun_like.ext</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n\n<span class=\"sd\">/-- Copy of a `isometry` with a new `to_fun` equal to the old one. Useful to fix definitional</span>\n<span class=\"sd\">equalities. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">copy</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">isometry</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isometry</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f'</span><span class=\"o\">,</span>\n  <span class=\"n\">edist_eq'</span> <span class=\"o\">:=</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">f.edist_eq'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">setup</span>\n</code></pre></div>",
        "id": 282721364,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652830645
    },
    {
        "content": "<p>It's a bit of a dirty and technical job which I know perfectly how to do so I would suggest not bothering with that, but you do you <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 282721486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652830782
    },
    {
        "content": "<p>One annoying thing is that I seem to have to manually insert <code>f : α → β</code> to get lean to coerce from <code>f : F</code>. Did I setup something wrong with the <code>fun_like</code> things?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">isometry_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">isometry_class</span> <span class=\"n\">G</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lipschitz</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_with</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">lipschitz_with.of_edist_le</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">isometry_class.edist_eq'</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282721493,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652830789
    },
    {
        "content": "<p>Hm ok, I'll leave it to you then!</p>",
        "id": 282722142,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652831282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Similarities/near/282719389\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> At the end of section 6 you say that \"work is still ongoing to provide a suitable generic form of standard operations such as composition and identity maps,\" which is interesting because I was wondering why we still had all the <code>*_hom.id</code> and <code>*_hom.comp</code> (and actualy a lot of <code>*_hom.map_add</code>?) lemmas sitting around. How do you think this will be done?</p>\n</blockquote>\n<p>I actually experimented with a couple of approaches for <code>id</code> and <code>comp</code> (and <code>symm</code> for isomorphisms), but found none completely convincing yet:</p>\n<ul>\n<li>Introduce a typeclass of the form <code>has_id (F : Type*) (A : out_param Type*) [fun_like F A A]</code> saying there is a map <code>(has_id.id : F)</code> which coerces to the identity: <code>((has_id.id : F) : A → A) = id</code>. Similarly for <code>has_comp (F G : Type*) (H A B C : out_param Type*) [fun_like F B C] [fun_like G A B] [fun_like H A C]</code>. Main drawback is that the typeclass system really isn't robust against so many (out) parameters, so I ended up writing a lot of type ascriptions.</li>\n<li>Define a type of bundled identity/composition/inverse maps, which are structured basically the same as <code>has_id</code>/<code>has_comp</code>/<code>has_symm</code> but you use them as explicit parameters: <code>(compFGH : comp_like F G H A B C)</code> instead of <code>[has_comp F G H A B C]</code>. The drawback here is that have to explicitly distinguish all these different maps, and you can't make theorems like <code>comp f (symm f) = id</code> into <code>simp</code> lemmas since <code>id</code> is a free parameter now.</li>\n<li>Use definitions from the category theory library. Main drawback is that this usually requires putting everything into the same universe level.</li>\n</ul>\n<p>I believe with some improvements to the typeclass system, something like the first approach could work out reasonably well, at the expense of putting even more stress onto that part of the system.</p>",
        "id": 282765958,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652868508
    },
    {
        "content": "<p>The remaining duplicates like <code>*_hom.map_add</code> are deprecated and should be removed now that morphism classes are stable, it just takes a lot of work to clean up all occurrences. I would appreciate any help! :D</p>",
        "id": 282766157,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652868623
    },
    {
        "content": "<p>Oh, that is nice to know. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> I may attempt to at some point, indeed!</p>",
        "id": 282879053,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1652933458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Similarities/near/282721486\">said</a>:</p>\n<blockquote>\n<p>It's a bit of a dirty and technical job which I know perfectly how to do so I would suggest not bothering with that, but you do you <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>I ended up starting similarities in <a href=\"https://github.com/leanprover-community/mathlib/pull/14315\">#14315</a>, I hope you don't mind <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 283255031,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1653258157
    },
    {
        "content": "<p>Hmm, I would have bundled <code>r</code> in the structure.</p>",
        "id": 283255128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653258315
    },
    {
        "content": "<p>Usually the pattern is to have both versions of the bundling; I guess it depends which one is useful</p>",
        "id": 283256423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653260222
    },
    {
        "content": "<p>I see! I'm probably not the right person to decide which one it should be, so it's helpful to know what everyone thinks</p>",
        "id": 283256816,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1653260718
    },
    {
        "content": "<p>I was looking for any precedence with this kind of parameterized types but couldn't really find anything like this specifically. I just went unbundled to match the <code>lipschitz_with K f</code> pattern</p>",
        "id": 283256978,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1653260948
    },
    {
        "content": "<p>The big difference is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lipschitz_with\">docs#lipschitz_with</a> is a predicate, not a bundled hom.</p>",
        "id": 283256993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653260993
    },
    {
        "content": "<p>Yeah, so the analogy is probably very flawed</p>",
        "id": 283257053,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1653261029
    },
    {
        "content": "<p>Your current design can't work because <code>r</code> will typically not be uniquely inferrable from <code>α</code> and <code>β</code>.</p>",
        "id": 283257079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653261085
    },
    {
        "content": "<p>I guess the other question is whether we actually want to be bundling <code>f</code> here when things like <code>lipshitz_with</code> are not bundled</p>",
        "id": 283257310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653261393
    },
    {
        "content": "<p>Ok now I am thinking about it more and unbundling does mean you had to carry around <code>r</code> everywhere you go</p>",
        "id": 283257335,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1653261472
    },
    {
        "content": "<p>I'll try to see how it goes if I bundle everything</p>",
        "id": 283258068,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1653262615
    },
    {
        "content": "<p>I've pushed the changes.</p>",
        "id": 283259319,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1653264364
    }
]