[
    {
        "content": "<p>Why does not Lean find that some dependent products of groups are groups, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The issue often appears when one wants to take a pi-type on a set.</p>\n<p>It seems related to the fact that instances such as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">pi.mul_one_class</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>that puts a multiplication with one on a pi type, lack a dependent version, such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pi.mul_one_class'</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_1</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span><span class=\"bp\">```</span>\n\n<span class=\"n\">Should</span> <span class=\"n\">it</span> <span class=\"n\">be</span> <span class=\"n\">added</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 303596019,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1665569242
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/Sort-indexed.20pi.20type\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Sort-indexed.20pi.20type</a></p>",
        "id": 303597625,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665569829
    },
    {
        "content": "<p>I have the full files for groups and modules ready on <code>con-nf</code> if you need them, but the current consensus is that we should not add them if we don't need them</p>",
        "id": 303597706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665569882
    },
    {
        "content": "<p>So the consensus is that rather than having some</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"bp\">→*</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>we should work with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toto</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"bp\">→*</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 303601198,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1665571519
    },
    {
        "content": "<p>Yes, basically.</p>",
        "id": 303606268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665573763
    }
]