[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.lsmul\">docs#linear_map.lsmul</a>. Isn't there a right multiplication version that doesn't need commutativity? It's not hard to show:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_map.rsmul</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289319414,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657630830
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.smul_right\">docs#linear_map.smul_right</a></p>",
        "id": 289319827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631011
    },
    {
        "content": "<p>That (<code>linear_map.id.smul_right y</code>) works, thanks!</p>",
        "id": 289319991,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657631088
    },
    {
        "content": "<p>Probably, we should have a name for this specific linear map.</p>",
        "id": 289320129,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631158
    },
    {
        "content": "<p>It is used, e.g., in the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at_filter/src\">src#has_deriv_at_filter</a></p>",
        "id": 289320204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631173
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_span_singleton\">docs#linear_map.to_span_singleton</a> is that map</p>",
        "id": 289321418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657631747
    },
    {
        "content": "<p>That's an unhelpful name...</p>",
        "id": 289322301,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657632153
    },
    {
        "content": "<p>Definitely</p>",
        "id": 289323121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657632517
    },
    {
        "content": "<p>I also feel like <code>smul_right</code> ought to be defined in terms of it, not vice versa</p>",
        "id": 289323161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657632539
    }
]