[
    {
        "content": "<p>I have a very clumsy construction that takes a functor between categories of different universes, makes a functor between new categories of the same universe (via <code>ulift</code>), applies a lemma for such functors, then lowers the result down into the original universes.  I'm sure there must be a better way than what I have: <a href=\"https://github.com/leanprover-community/mathlib/issues/6288\">#6288</a></p>\n<p>(I'm also wondering what the reason is for <code>Top.limit_cone</code> requiring functors to be between categories of the same universe -- if there weren't this constraint, then the above complexity would go away.)</p>",
        "id": 226750371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613608857
    },
    {
        "content": "<p>All of the constructions about limits and cones require the indexing category to have its objects and homs in the same universe as the homs of the category <code>C</code> - combined with the fact that Top is a large category, this is the reason for the universe restrictions you mention. I'm working on a branch which relaxes this restriction (it turns out that most of the time you don't need it at all)</p>",
        "id": 226832115,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613663935
    },
    {
        "content": "<p>In this specific case though, <code>F.sections</code> is a sigma type, so its universe is the maximum of the universe of the objects of both categories, so if they're different then the type <code>F.sections</code> will live in a higher universe than you started with (this is problematic if you naively try to take a Type v indexed limit in Type u, where the limit ends up being in Type (max u v) and hence might not exist in your original category) so for this it would make sense to have <code>u = v</code>.</p>",
        "id": 226832944,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613664114
    },
    {
        "content": "<p>All that said, there are cases when certain \"large\" limits do exist, even if the construction <code>F.sections</code> is too big too fit, so there could be constructions saying something like, if <code>c</code> is a cone over your (not necessarily small) directed order, and it happens to be a limiting cone (plus the finite+nonempty stuff you assumed) then the apex of the cone is nonempty too</p>",
        "id": 226833434,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613664222
    },
    {
        "content": "<p>The distinction here is that I'm not assuming <code>F.sections</code> <em>is</em> the limit object, instead saying that if you give me any limit object and tell me it's a limit, then I can tell you it's nonempty</p>",
        "id": 226833579,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613664253
    },
    {
        "content": "<p>Thanks for the information <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>.  It makes a good amount of sense to set things up for categorical constructions.</p>\n<p>(A couple of weeks ago I tried out a variation on categories where the homomorphism class is indexed by the objects:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasHom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This lets you have homomorphisms between things even if there's no formal \"category\" object that encompasses everything under consideration -- for example this lets you use the same notation for functors as for other homomorphisms.  It all seems to be rather unwieldy to use (and you can end up with some absurdly large type signatures), but it's sort of interesting because it would let you do things like have hom sets between topological spaces themselves, rather than needing to wrap the spaces up as terms of <code>Top</code>.  I just thought I'd share since it's vaguely related, and I'm definitely not recommending that we change anything! <a href=\"https://gist.github.com/kmill/7da8de685e602917dc939ec768d0f26c\">https://gist.github.com/kmill/7da8de685e602917dc939ec768d0f26c</a>)</p>",
        "id": 227032353,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613770715
    },
    {
        "content": "<p>Related to that (and still related to the topic of functors), I had a hard time writing down the S combinator as a functor.  The library already has the I and K combinators, and if we had S then we could mechanically turn lambda expressions into their functor versions.  Does this already exist somewhere? or does someone have more fortitude than myself to write it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Functor.S</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 227033226,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613771169
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">diag</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functor.W</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">uncurry</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">whiskering_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">diag</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functor.B</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">whiskering_right</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functor.C</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">functor.flip</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">t.app</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n      <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">nat_trans.naturality_app</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functor.S</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">β</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">functor.flip</span> <span class=\"o\">((</span><span class=\"n\">Functor.B.obj</span> <span class=\"o\">(</span><span class=\"n\">Functor.B.obj</span> <span class=\"n\">Functor.W</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">Functor.B.obj</span> <span class=\"n\">Functor.B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Functor.C</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This works <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 227042966,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613775550
    },
    {
        "content": "<p>Even better would be to show Cat is cartesian closed and construct these combinators in any cartesian closed category</p>",
        "id": 227043830,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613776023
    },
    {
        "content": "<p>Someone should PR it!</p>",
        "id": 227080041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613813732
    }
]