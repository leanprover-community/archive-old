[
    {
        "content": "<p>Do we have a theorem that says that localization of Z at any integer is an additive group. </p>\n<p>I can find theorems in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization\">docs#localization</a> that say that the multiplicative localization of a monoid is a monoid and that additive localization of an add_monoid is an add_monoid but I can't find one that says that multiplicative localization of an add_monoid is an add_monoid. Thanks,</p>",
        "id": 264576998,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639247363
    },
    {
        "content": "<p>In general you can't do multiplicative localization of an <code>add_monoid</code>. You'll need some ring-like structure for that.</p>",
        "id": 264577260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639247684
    },
    {
        "content": "<p>But localization of rings is done, and there is a reasonably fleshed-out API for it.</p>",
        "id": 264577264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639247703
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/localization.html#localizations-of-commutative-rings\">https://leanprover-community.github.io/mathlib_docs/ring_theory/localization.html#localizations-of-commutative-rings</a></p>",
        "id": 264577298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639247763
    },
    {
        "content": "<p>Whoa! Thanks a lot, this is exactly what I need. I didn't know that there was a separate API specifically for ring localization.</p>",
        "id": 264577362,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639247865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 264577364,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639247868
    },
    {
        "content": "<p>Historically that was the first of the localisation files ;-) Back then I didn't know what we were doing so just told Kenny to follow the books</p>",
        "id": 264577762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248342
    },
    {
        "content": "<p>Do we know how to localize a module though?<br>\nI couldn't find it anywhere.</p>",
        "id": 264603040,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639283386
    },
    {
        "content": "<p>We didn't need it for the definition of schemes but I don't know if it was added later</p>",
        "id": 264622138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639314034
    },
    {
        "content": "<p>There is the <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/tensor_product.html\">tensor product of an algebra with a module</a> but I can't find <del>universal property</del> (edit: analogue of Strickland's localization predicate) for localization of modules.<br>\nBTW, is \"submodule\" in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.localization_localization_submodule\">docs#is_localization.localization_localization_submodule</a> a typo?</p>",
        "id": 264628542,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1639322806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.9C.94.20Add.20group.20structure.20on.20localization/near/264628542\">said</a>:</p>\n<blockquote>\n<p>BTW, is \"submodule\" in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_localization.localization_localization_submodule\">docs#is_localization.localization_localization_submodule</a> a typo?</p>\n</blockquote>\n<p>Indeed...</p>",
        "id": 264628626,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639322901
    },
    {
        "content": "<p>We should have the universal property of the base change. Combining that with the universal property of the localization (of rings) should give you the universal property for the localization of a module defined as the base change. Of course this wouldn't give you the characteristic predicate that we have for localization of rings, but maybe it's good enough for what you need?</p>",
        "id": 264628954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639323425
    },
    {
        "content": "<p>I don't really need that. Just that I had a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">∀</mi><mtext> </mtext><mi>m</mi><mo separator=\"true\">,</mo><msub><mi>I</mi><mi>m</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> I = 0 \\iff \\forall\\ m, I_m = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6684em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, and I was wondering if I could generalize it into modules painlessly. But I suppose we will soon need it as someone is currently working on sheaves of modules.</p>",
        "id": 264629357,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639323995
    },
    {
        "content": "<p>Side note: It would be great if there was a way to unify these constructions of structure sheaves.<br>\nOr else we would end up with five copies of basically the same thing: two for (graded) rings, two for (graded) modules, and one for the localization thing that Junyan is working on.</p>",
        "id": 264629533,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639324287
    },
    {
        "content": "<p>I'm confused. What are the 5 sheaves?</p>",
        "id": 264630222,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639325255
    },
    {
        "content": "<p>For structure sheaves surely it's only Spec(A) and Proj(A)?</p>",
        "id": 264630591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639325766
    },
    {
        "content": "<p>Wouldn't the sheaf associated to a (graded) module be basically the same construct as well?</p>",
        "id": 264630631,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639325868
    },
    {
        "content": "<p>Oh sure, that's not a structure sheaf, that's what confused me. But this is a construction of a sheaf of O_X-modules on Proj(R) from a graded R-module, we can't really unify it with the construction of O_X or the construction of a sheaf on an affine scheme</p>",
        "id": 264632897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639328981
    }
]