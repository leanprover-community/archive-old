[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span> <span class=\"c1\">-- or whatever</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I've tried <code>library_search</code>, <code>suggest</code> and <code>hint</code>. Is this function supposed to have a name or be in some system?</p>",
        "id": 197538532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589454961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> have you tried looking into the actual proof?</p>",
        "id": 197548723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589461305
    },
    {
        "content": "<p>aha I did it explicitly:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/polynomial.lean#L138\">https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/polynomial.lean#L138</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Transport an ideal of `R[X]` to an `R`-submodule of `R[X]`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">of_polynomial</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">C_mul&#39;</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197549124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589461458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra_operations</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">to_submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I was surprised <code>smul</code> was hard</p>",
        "id": 197551766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462209
    },
    {
        "content": "<p>I still can't do it and your proof doesn't cover this case</p>",
        "id": 197551846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462244
    },
    {
        "content": "<p>I don't really know how the library is set up but isn't a sub-S-module also a sub-R-module?</p>",
        "id": 197551995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589462309
    },
    {
        "content": "<p>Mathematically, sure.</p>",
        "id": 197552109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462366
    },
    {
        "content": "<p>but we're talking about submodules of <code>S</code>, right? Is <code>submodule S S</code> preferred to <code>ideal S</code>?</p>",
        "id": 197552239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462413
    },
    {
        "content": "<p>I'm just trying to remove irrelevant distractions like <code>ideal</code>. But now I am not entirely sure it is irrelevant. How does one turn an S-module into an R-module?</p>",
        "id": 197552375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589462472
    },
    {
        "content": "<p>there's a canonical map R -&gt; S from <code>[algebra R S]</code></p>",
        "id": 197552433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462499
    },
    {
        "content": "<p>and I want to pull back along that canonical map, and because that map is canonical, an S-module or S-submodule is an R-module or R-submodule canonically</p>",
        "id": 197552573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462551
    },
    {
        "content": "<p>My instinct is that automation should be making that map for me</p>",
        "id": 197552620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462577
    },
    {
        "content": "<p>because registering the instance <code>[algebra R S]</code> means that now there is a canonical map which should be somehow inserted into a system?</p>",
        "id": 197552707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589462621
    },
    {
        "content": "<p>Is there not something like <code>comap</code> for modules? Or am I just looking in the wrong place?</p>",
        "id": 197552730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589462634
    },
    {
        "content": "<p>There's <code>map</code> and <code>comap</code> for submodules (and for ideals, which is slightly different). You need to feed it a ring hom.</p>",
        "id": 197563286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589466673
    },
    {
        "content": "<p>But I don't think it has been hooked up to the <code>algebra</code> API</p>",
        "id": 197563613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589466795
    }
]