[
    {
        "content": "<p>Hello! I am now writing some exercises like <code>( ( 5 ^ 2 ) logb ( 5 ^ 4 ) ) = 2</code> (which means that logarithm of 5^4 in base 5^2 is 2).<br>\nI would like to know if there is already a way to  write logarithm in this way in Lean (seems like I didn't find it in <code>real.log</code>), or I need write a simple function which takes 2 arguments to define this <code>logb</code>. Thank you in advance!</p>",
        "id": 237458981,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1620203326
    },
    {
        "content": "<p>You would need to write a function for this. I don't think <code>logb</code> is defined in lean, although it's not hard: <code>logb b x = log x / log b</code></p>",
        "id": 237459235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620203455
    },
    {
        "content": "<p>so in lean that would look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_log</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">logb</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">log</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">logb</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">real</span>\n</code></pre></div>",
        "id": 237459574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620203604
    },
    {
        "content": "<p>(also, fancy meeting you here, I can see you've been writing metamath from the spaces <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)</p>",
        "id": 237459691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620203653
    },
    {
        "content": "<p>Thank you for this so concrete example <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! Aha it is the grammar of metamath <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 237459824,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1620203717
    },
    {
        "content": "<p>Has this been implemented yet? Edit: I PR'd it.</p>",
        "id": 266868278,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1641332768
    }
]