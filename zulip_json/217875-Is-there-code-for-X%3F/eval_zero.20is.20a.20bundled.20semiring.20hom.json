[
    {
        "content": "<p>Dear All,</p>\n<p>I would like to use the following two facts.</p>\n<ol>\n<li>If <code>R</code> is a commutative (semi-)ring, then, for each <code>r : R</code>, the evaluation map <code>eval r : R →+* polynomial R</code> exists <em>as a bundled homomorphism</em>.</li>\n<li>The composition <code>eval r ∘ C : R →+* R</code> is <code>id</code> again, <em>as a bundled homomorphism</em>.</li>\n</ol>\n<p>Are they in Lean?  I can find many of these in their <em>un</em>bundled versions, but not the bundled ones.</p>\n<p>I am really only interested in evaluating at <code>0</code>, so this would be enough.</p>\n<p>Thanks!</p>",
        "id": 218080024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606475363
    },
    {
        "content": "<p>You can use <code>aeval x</code>, which is an <code>alg_hom</code> from the <code>R</code>-algebra <code>polynomial R</code> to <code>R</code>, i.e. a ring homomorphism which preserves the image of <code>C : R -&gt; polynomial R</code>.</p>",
        "id": 218080356,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606475628
    },
    {
        "content": "<p>Evaluation at <code>0</code> is <code>constant_coeff</code>, right? It exists for <code>mv_polynomial</code>, but maybe not for <code>polynomial</code>.</p>",
        "id": 218080359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606475632
    },
    {
        "content": "<p>In case you want something like a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I have started as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">eval0</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"mi\">0</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">eval_one</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">),</span> <span class=\"n\">eval_zero</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eval_add</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 218080413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606475648
    },
    {
        "content": "<p>It would be good to add it. Should be a not so big PR</p>",
        "id": 218080427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606475652
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.aeval_C\">docs#polynomial.aeval_C</a> close?</p>",
        "id": 218080462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606475689
    },
    {
        "content": "<p>I would prefer calling it <code>constant_coeff</code>, and defining it in terms of <code>coeff</code>, but then have a lemma that relates it to <code>(a)eval 0</code></p>",
        "id": 218080488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606475709
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 218080513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606475741
    },
    {
        "content": "<p>Thanks!  I will take a look at <code>aeval</code>, <code>aeval_C</code> and  <code>constant_coeff</code>!</p>",
        "id": 218080515,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606475742
    },
    {
        "content": "<p>So, is the consensus then that <code>eval 0</code> should be singled out and be called <code>constant_coeff</code>?</p>",
        "id": 218080639,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606475838
    },
    {
        "content": "<p>Is the lemma you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.eval_C\">docs#polynomial.eval_C</a>?</p>",
        "id": 218080754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606475913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/eval_zero.20is.20a.20bundled.20semiring.20hom/near/218080754\">said</a>:</p>\n<blockquote>\n<p>Is the lemma you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eval_C\">docs#eval_C</a>?</p>\n</blockquote>\n<p>I believe so!  Thanks!</p>",
        "id": 218080848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606476004
    },
    {
        "content": "<p>(Thanks for correcting the link, I was going to mention it!)</p>",
        "id": 218080883,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606476018
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> was looking into bundling <code>polynomial.eval</code></p>",
        "id": 218080885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606476021
    },
    {
        "content": "<p>Is there a standard way to go from the statement <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.eval_C\">docs#polynomial.eval_C</a><br>\n(<code>@[simp] lemma eval_C : (C a).eval x = a := eval₂_C _ _</code>)<br>\nto the assertion that the composition <code>eval r ∘ C</code> equals <code>id</code>?</p>",
        "id": 218081286,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606476309
    },
    {
        "content": "<p><code>funext $ λ _, eval_C</code> gives the proof you need</p>",
        "id": 218081383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606476365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Thank you very much!  I did not know what <code>funext</code> was!</p>\n<p>This might also bypass the issue that I had with bundled things: I had some trouble communicating with Lean, but I may now try more extensively with <code>funext</code>!</p>",
        "id": 218081804,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606476696
    },
    {
        "content": "<p><code>by {ext, simp}</code> would also close the goal</p>",
        "id": 218081897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606476749
    },
    {
        "content": "<p>Computer scientists make a lot of fuss about functional extensionality, but this fuss has nothing to do with what we're doing. Extensionality is the general principle that two objects are equal if they're made of the same stuff. For example the axiom of extensionality in ZFC says that two sets are equal if and only if they have the same elements. In Lean this idea is taken much further; if you have two structures (for example subgroups, each defined as a subset plus some proofs) then the <code>ext</code> tactic should reduce a goal of <code>H = K</code> to \"for all x, x in H &lt;-&gt; x in K\"</p>",
        "id": 218082799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606477419
    },
    {
        "content": "<p>I have a branch with bundled <code>polynomial.eval</code> but it doesn't compile at the moment.</p>",
        "id": 218117665,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1606500612
    },
    {
        "content": "<p>I'm going to split it into smaller pieces and PR during the next week.</p>",
        "id": 218117890,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1606500790
    },
    {
        "content": "<p>I've been using <code>eval₂_ring_hom (ring_hom.id R) r</code> for evaluation  at <code>r</code> as a <code>ring_hom</code>, is there some reason to avoid this that I'm not aware of?</p>",
        "id": 218120449,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1606503151
    },
    {
        "content": "<p>It's somewhat long, but otherwise should be fine. I think <code>aeval</code> is a lot shorter (-;</p>",
        "id": 218120953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606503596
    },
    {
        "content": "<p>But it's an <code>alg_hom</code></p>",
        "id": 218121012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606503633
    },
    {
        "content": "<p>In Lean 4 will be able to work like mathematicians, and not care if it's a function or a ring hom or a monoid hom or an algebra hom? [he asked, fully expecting the answer \"no\"]</p>",
        "id": 218121236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606503843
    },
    {
        "content": "<p>You mean: unbundled homs?</p>",
        "id": 218121333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606503931
    },
    {
        "content": "<p>I severely hope the answer will be yes</p>",
        "id": 218121345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606503943
    },
    {
        "content": "<p>oh yeah that's exactly what I mean!</p>",
        "id": 218121618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504202
    },
    {
        "content": "<p><del>Doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial\">docs#polynomial</a>.eval₂_ring_hom have a sdifferent signature to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.aeval\">docs#polynomial.aeval</a>?</del></p>",
        "id": 218121676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606504232
    }
]