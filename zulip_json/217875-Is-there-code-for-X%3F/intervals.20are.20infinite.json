[
    {
        "content": "<p>Does this already exist?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Ioo</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>(edited for truth)</p>",
        "id": 206173456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596735793
    },
    {
        "content": "<p>I'm pretty sure the answer is no, and I proved it with undue difficulty:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Ioo</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">infinite</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc₁</span><span class=\"o\">,</span> <span class=\"n\">hc₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">dense</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">well_founded_of_trans_of_irrefl</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">has_min</span> <span class=\"n\">univ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc₁</span><span class=\"o\">,</span> <span class=\"n\">hc₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz₁</span><span class=\"o\">,</span> <span class=\"n\">hz₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">dense</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">hm</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz₁</span><span class=\"o\">,</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hz₂</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"n\">trivial</span> <span class=\"n\">hz₂</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206176287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596737075
    },
    {
        "content": "<p>Could you please add type annotations to have and obtain?</p>",
        "id": 206177609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596737800
    },
    {
        "content": "<p>Another similar question: in case of a conditionally compete order the cardinality is at least the cardinality of <code>2^nat</code></p>",
        "id": 206177893,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596737973
    },
    {
        "content": "<p>A bold assumption that I can figure out what the types actually are <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 206180668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596739383
    },
    {
        "content": "<p>Did you know you can put a <code>_</code> where I have one on the <code>m</code> line?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Ioo</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">infinite</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc₁</span><span class=\"o\">,</span> <span class=\"n\">hc₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">dense</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">well_founded_of_trans_of_irrefl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Ioo</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">has_min</span> <span class=\"n\">univ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc₁</span><span class=\"o\">,</span> <span class=\"n\">hc₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz₁</span><span class=\"o\">,</span> <span class=\"n\">hz₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">dense</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">hm</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz₁</span><span class=\"o\">,</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hz₂</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"n\">trivial</span> <span class=\"n\">hz₂</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206181111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596739575
    },
    {
        "content": "<p>Sorry, I mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_lattice\">docs#conditionally_complete_lattice</a></p>",
        "id": 206184168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596741006
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk_Ioo_real/src\">src#cardinal.mk_Ioo_real</a></p>",
        "id": 206186857,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596742607
    },
    {
        "content": "<p>Together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.infinite_iff/src\">src#cardinal.infinite_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.cantor/src\">src#cardinal.cantor</a> you got it.</p>",
        "id": 206186928,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596742670
    },
    {
        "content": "<p>I actually want not just <code>real</code> though</p>",
        "id": 206187034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596742715
    },
    {
        "content": "<p>Oh edit, nvm: this is for arbitrary dense orders</p>",
        "id": 206187038,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596742717
    },
    {
        "content": "<p>Then it doesn't exist AFAIK.</p>",
        "id": 206187086,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596742748
    }
]