[
    {
        "content": "<p>I wrote the theorem that states that the generator of a (principal) prime ideal is prime.<br>\nShould this go to matlib ? Are there things to add to this ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.principal_ideal_domain</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">submodule.is_principal.prime_generator_of_prime</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">submodule.is_principal</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_prime</span><span class=\"o\">:</span> <span class=\"n\">ideal.is_prime</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ne_bot</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">):</span>\n  <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">submodule.is_principal.generator</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">submodule.is_principal.eq_bot_iff_generator_eq_zero</span> <span class=\"n\">I</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ne_bot</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p₁</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">ideal.eq_top_of_is_unit_mem</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">submodule.is_principal.generator_mem</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_prime.1</span> <span class=\"n\">p₁</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">submodule.is_principal.mem_iff_generator_dvd</span> <span class=\"n\">I</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_prime.2</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 225611628,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1612820015
    },
    {
        "content": "<p>I have no idea whether we already have that. But if not then the process will be a lot smoother if you read <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>, especially the style guide.</p>",
        "id": 225612093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612820218
    },
    {
        "content": "<p>Looks like mathlib doesn't have this exact statement, although <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.span_singleton_prime\">docs#ideal.span_singleton_prime</a> should get you most of the way there. The only thing that I would also add before making this PR is the converse statement, turning the result into an <code>iff</code>.</p>",
        "id": 225668030,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612865950
    }
]