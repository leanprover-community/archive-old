[
    {
        "content": "<p>Do we have the following or something that easily implies it? I could not find it by <code>library_search</code> or in what I thought were the obvious places to look.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_induced</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ¥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topo_Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ¥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_f_tends</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">))))</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">x</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nhds</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">topological_space.induced</span> <span class=\"n\">f</span> <span class=\"n\">topo_Œ≤</span><span class=\"o\">)</span> <span class=\"n\">x‚ÇÄ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds.mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">open_U</span> <span class=\"n\">U_ni_x‚ÇÄ</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">is_open_induced_iff</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">topo_Œ≤</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">open_U</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span> <span class=\"n\">V</span> <span class=\"o\">,</span> <span class=\"n\">open_V</span> <span class=\"o\">,</span> <span class=\"n\">preim_V_eq_U</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">preim_V_eq_U</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds.mp</span> <span class=\"n\">h_f_tends</span> <span class=\"n\">V</span> <span class=\"n\">open_V</span> <span class=\"n\">U_ni_x‚ÇÄ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246287502,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626474091
    },
    {
        "content": "<p>If you're willing to abuse definitional equality a bit, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nhds_induced</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">map_le_iff_le_comap.mp</span> <span class=\"n\">h_f_tends</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246291439,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626478029
    },
    {
        "content": "<p>Oh ... and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_comap_iff\">docs#filter.tendsto_comap_iff</a> is apparently how to do it without such abuse.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nhds_induced</span><span class=\"o\">,</span> <span class=\"n\">tendsto_comap_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 246291567,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626478202
    },
    {
        "content": "<p>Wow, thank you very much again!</p>\n<p>(...and I'd anyway be more than willing to abuse definitional equality. The <em>goals accomplished</em> justify the means, is what they say if I remember right.)</p>",
        "id": 246291920,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626478614
    }
]