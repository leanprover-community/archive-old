[
    {
        "content": "<p><code>apply_instance</code> fails for the following. Is this instance missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.subset_properties</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">totally_disconnected_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 216020565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604862569
    },
    {
        "content": "<p>probably</p>",
        "id": 216020635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604862640
    },
    {
        "content": "<p>Okay, I have an ugly proof. I'm sure someone who is more familiar with the discrete_topology and/or totally_disconnected_space api can come up with a 1-liner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.subset_properties</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">totally_disconnected_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">T</span> <span class=\"n\">hT</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">is_open_discrete</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_open_discrete</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">ht</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216021167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604863488
    },
    {
        "content": "<p>I see that in the same file there is also <code>totally_separated</code>, which also seems like it would be true for a discrete space and implies <code>totally_disconnected</code></p>",
        "id": 216021314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604863670
    },
    {
        "content": "<p>I have no idea what <code>totally_separated</code>means</p>",
        "id": 216021362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604863689
    },
    {
        "content": "<p>the FOL description is there in the definition</p>",
        "id": 216021382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604863738
    },
    {
        "content": "<p>I don't have any deep understanding of the term but those symbols look true</p>",
        "id": 216021395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604863758
    },
    {
        "content": "<p>and more to the point it looks a bit easier to prove those symbols than the ones in <code>totally_disconnected</code></p>",
        "id": 216021448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604863815
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">totally_separated_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨{</span><span class=\"n\">b</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">is_open_discrete</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">is_open_discrete</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 216021581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604864023
    },
    {
        "content": "<p>Funny, I used {a} and {a}\\^c, instead of {b}^\\c and {b}, and ended up with a messy proof again!</p>",
        "id": 216021733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604864219
    },
    {
        "content": "<p>yep I started with that but then you have to throw in commutativity because <code>a \\in {b}^c</code> unfolds to <code>b != a</code></p>",
        "id": 216021741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604864250
    },
    {
        "content": "<p>Anyway, can you PR this?</p>",
        "id": 216021744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604864274
    },
    {
        "content": "<p>Oooh, that doesn't even require classical!</p>",
        "id": 216021881,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604864469
    },
    {
        "content": "<p>it does, you have to prove <code>{b}^c \\cup {b} = univ</code></p>",
        "id": 216021939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604864534
    },
    {
        "content": "<p>Oh right</p>",
        "id": 216021953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604864580
    }
]