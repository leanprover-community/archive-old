[
    {
        "content": "<p>Are the following n-ary versions of <code>zip_with</code> useful, or can we already emulate them using a combination of other definitions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">zip_with3</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">δ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">::</span><span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">zip_with3</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zip_with4</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ε</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">::</span><span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">::</span><span class=\"n\">us</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">::</span> <span class=\"n\">zip_with4</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span> <span class=\"n\">us</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zip_with5</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ζ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ζ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">::</span><span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">::</span><span class=\"n\">us</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">::</span><span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">zip_with5</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span> <span class=\"n\">us</span> <span class=\"n\">vs</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 238551937,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620857322
    },
    {
        "content": "<p>It's slightly less efficient but <code>zip_with f l1 l2</code> is equivalent to (roughly) <code>(zip l1 l2).map f</code> and this generalizes to <code>(zip l1 $ zip l2 $ zip l3 l4).map f</code></p>",
        "id": 238552185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620857473
    },
    {
        "content": "<p>modulo (un)currying...</p>",
        "id": 238553175,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620858105
    },
    {
        "content": "<p>Haskell goes up to <code>zipWith7</code> apparently</p>",
        "id": 238554908,
        "sender_full_name": "David Wärn",
        "timestamp": 1620859216
    },
    {
        "content": "<p>we could beat that easily</p>",
        "id": 238590059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620890525
    },
    {
        "content": "<p>I added up to 5 in <a href=\"https://github.com/leanprover-community/mathlib/issues/7596\">#7596</a> (I only needed the 5-ary one)</p>",
        "id": 238590510,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620890956
    },
    {
        "content": "<p>Fwiw you could also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zip_with_3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"n\">zip_with</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">cs</span> <span class=\"c1\">-- `id = ($)`</span>\n</code></pre></div>",
        "id": 238592570,
        "sender_full_name": "David Wärn",
        "timestamp": 1620892661
    },
    {
        "content": "<p><code>zip_with id</code>, or <code>zipWith ($)</code>, is like <code>&lt;*&gt;</code>. It's basically a lift of the binary function <code>($)</code>, and iterating it lets you lift any n-ary function. (<code>zip_with f as</code> can also be written as <code>zip_with id (map f as)</code>)</p>",
        "id": 238593487,
        "sender_full_name": "David Wärn",
        "timestamp": 1620893310
    },
    {
        "content": "<p>Oh, that is indeed a nice definition. In that case, do we still want dedicated n-ary zip_with functions, or shall I remove them from the PR?</p>",
        "id": 238651163,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620926047
    },
    {
        "content": "<p>I think it might be worth having them but defining them as David suggests</p>",
        "id": 238672049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620935882
    }
]