[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.quotient</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.mkq</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This seems like a core part of the API for <code>submodule.mpq</code>, but I can't seem to find it ....? Any pointers?</p>",
        "id": 274667592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646821344
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.ker_mkq\">docs#submodule.ker_mkq</a>?</p>",
        "id": 274667804,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646821467
    },
    {
        "content": "<p>I guess that is the pointless version. :-)</p>",
        "id": 274668822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646822088
    },
    {
        "content": "<p>I will add this later.</p>",
        "id": 274668844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646822109
    },
    {
        "content": "<p>Ah ops! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient.mk_eq_zero\">docs#submodule.quotient.mk_eq_zero</a> then, but it uses <code>quotient.mk</code></p>",
        "id": 274668988,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646822202
    },
    {
        "content": "<p>But the two are defeq, indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.mkq</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">submodule.quotient.mk_eq_zero</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 274671783,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646823755
    },
    {
        "content": "<p>Ah, I should have tried <code>library_search!</code>.</p>",
        "id": 274730890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646850164
    },
    {
        "content": "<p>I added another copy of this lemma stated in terms of <code>mkq</code> so that <code>simp</code> can use it, in <a href=\"https://github.com/leanprover-community/mathlib/pull/12639\">#12639</a>.</p>",
        "id": 275140880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647159213
    }
]