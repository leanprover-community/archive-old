[
    {
        "content": "<p>Dear All,</p>\n<p>is the lemma below already in mathlib?</p>\n<p>Two challenges.</p>\n<ul>\n<li>Can you find a simpler proof?</li>\n<li>Can you find a clunkier proof? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> </li>\n</ul>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">int.nnnorm_eq_nat_abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">n</span><span class=\"bp\">∥₊</span> <span class=\"bp\">=</span> <span class=\"n\">n.nat_abs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">norm_to_nnreal</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real.coe_to_nnreal'</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span><span class=\"o\">,</span> <span class=\"n\">norm_nonneg</span><span class=\"o\">,</span> <span class=\"n\">nnreal.coe_nat_cast</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.norm_eq_abs</span><span class=\"o\">],</span>\n  <span class=\"n\">rw_mod_cast</span> <span class=\"bp\">←</span> <span class=\"n\">n.abs_eq_nat_abs</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272361708,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645161678
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">int.nnnorm_eq_nat_abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">n</span><span class=\"bp\">∥₊</span> <span class=\"bp\">=</span> <span class=\"n\">n.nat_abs</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nnreal.coe_nat_abs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 272361885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645161949
    },
    {
        "content": "<p>Thank you very much!  I had not imagined that the lemma could go the opposite way!</p>",
        "id": 272361970,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645162042
    },
    {
        "content": "<p>My high-tech method was that I grepped mathlib for <code>nat_abs</code> and then searched for <code>∥</code> in the output (in emacs, when you run a shell command the output goes into an editable and searchable buffer)</p>",
        "id": 272362044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645162126
    },
    {
        "content": "<p>Thank you also for teaching me another way to search the library!</p>",
        "id": 272362073,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645162179
    },
    {
        "content": "<p>Working with this, I am always hoping for <code>(nnreal.coe_nat_abs n).symm</code> to be a <code>simp</code> lemma.  Am I wrong in thinking that this lemma should be stated in the opposite direction and be simp?</p>",
        "id": 272362562,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645162815
    },
    {
        "content": "<p>Here's a simplified proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">int.nnnorm_eq_nat_abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">n</span><span class=\"bp\">∥₊</span> <span class=\"bp\">=</span> <span class=\"n\">n.nat_abs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nnreal.eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_nnnorm</span><span class=\"o\">,</span> <span class=\"n\">int.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">int.cast_abs</span><span class=\"o\">,</span> <span class=\"n\">int.abs_eq_nat_abs</span><span class=\"o\">,</span> <span class=\"n\">int.cast_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">nnreal.coe_nat_cast</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I did this because the proof of <code>nnreal.coe_nat_abs</code> took advantage of some definitional equalities, and I wanted to be sure there actually were lemmas linking the two sides.</p>",
        "id": 272362732,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645163047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nnnorm.20and.20int.2Enat_abs/near/272362562\">said</a>:</p>\n<blockquote>\n<p>Working with this, I am always hoping for <code>(nnreal.coe_nat_abs n).symm</code> to be a <code>simp</code> lemma.  Am I wrong in thinking that this lemma should be stated in the opposite direction and be simp?</p>\n</blockquote>\n<p>I'm not sure... Maybe the idea is that when you have a real-valued expression, you'd rather put things into the <code>∥n∥₊</code> form since it's more likely that you have expressions involving nnnorm rather than nat_abs?</p>",
        "id": 272363076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645163606
    },
    {
        "content": "<p>Makes sense, thanks!  This is not the direction I'm going, but I can see that your point of view is more sensible in general!</p>",
        "id": 272365426,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645166333
    },
    {
        "content": "<p>The fact that we have both norm_cast and push_cast indicates that mathematicians don't have any hard and fast rules about which way they want to argue. I've also seen examples where when you're making the API you want something to simp in one direction but then in an application you'd rather it went in the other direction</p>",
        "id": 272374693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645173847
    },
    {
        "content": "<p>I did not know that <code>push_cast</code> was a thing!  Whenever two expressions look the same, I will add <code>push_cast</code> to the loop of tactics to try to get lean to agree that they are really the same!</p>",
        "id": 272375080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645174101
    }
]