[
    {
        "content": "<p>I would like to define a function into a Cartesian product. What I do not know is how to work with the elements of a Cartesian product. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A.product</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">x.1.product</span> <span class=\"n\">x.2</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276812208,
        "sender_full_name": "George Shakan",
        "timestamp": 1648421529
    },
    {
        "content": "<p>Can you write down what you're trying to do in maths? This looks like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 276812375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648421771
    },
    {
        "content": "<p><code>let f : A.product B := λ x , x.1.product x.2</code> is about as nonsensical as <code>let n : ℕ := λ x, 3 * x</code></p>",
        "id": 276812397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648421858
    },
    {
        "content": "<p>Sure, I am trying to prove <a href=\"https://en.wikipedia.org/wiki/Ruzsa_triangle_inequality\">Ruzsa's triangle inequality</a>. To do so, I am trying to define various functions from Cartesian products. For instance, the main point of the proof is to define a tricky f : (A- B) X C -&gt; (A-C) X (B-C) and show it is an injection.</p>",
        "id": 276812839,
        "sender_full_name": "George Shakan",
        "timestamp": 1648422409
    },
    {
        "content": "<p>What does <code>-</code> mean there?</p>",
        "id": 276812897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648422505
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.has_sub\">docs#finset.has_sub</a></p>",
        "id": 276812900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648422513
    },
    {
        "content": "<p>The thing is that what you're talking about is not really a function, George.</p>",
        "id": 276812909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648422549
    },
    {
        "content": "<p>This is because you first have to write <code>c</code> in <code>A - B</code> as <code>a - b</code> with <code>a ∈ A</code> and <code>b ∈ B</code>.</p>",
        "id": 276812968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648422609
    },
    {
        "content": "<p>You would be better off using a double counting argument.</p>",
        "id": 276812996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648422719
    },
    {
        "content": "<p>(which is really the \"proper\" way of writing what you're trying to do)</p>",
        "id": 276813039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648422738
    },
    {
        "content": "<p>Sure, I can try it this way, but still I am curious about the original question</p>",
        "id": 276813055,
        "sender_full_name": "George Shakan",
        "timestamp": 1648422784
    },
    {
        "content": "<p>I would first define <code>f : α → α → α → α := λ a b c, (a - c, b - c)</code>, then consider <code>λ x : α × α, f (first_witness x.1) (second_witness x.1) x.2</code>.</p>",
        "id": 276813143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648422915
    },
    {
        "content": "<p>To answer the original question, I think either of these has a suitable type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">-</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">-</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"c1\">-- use x.1, x.1.prop, x.2, x.2.prop etc</span>\n<span class=\"c1\">--^      ^ data here</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">-</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">-</span><span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"c1\">-- use x.1.1, x.prop.1, x.1.2, x.prop.2 etc</span>\n<span class=\"c1\">--^  ^   data here</span>\n</code></pre></div>",
        "id": 276813305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648423158
    },
    {
        "content": "<p>Missing some <code>noncomputable</code>s here and there <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 276813364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648423223
    },
    {
        "content": "<p>Seemed like a fun challenge doing it directly; here's a tactic mode definition (not recommended! this is a first draft)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">-</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_product</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_sub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">hp1</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hp1</span> <span class=\"n\">using</span> <span class=\"n\">hp1</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">p.1.2</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">p.1.2</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_product</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p.1.2</span><span class=\"o\">,</span> <span class=\"n\">hp1.1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_sub</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p.1.2</span><span class=\"o\">,</span> <span class=\"n\">hp1.2.1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276813586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648423656
    }
]