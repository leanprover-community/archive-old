[
    {
        "content": "<p>I need a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod_ite_eq/src\">src#prod_ite_eq</a>, that says:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">prod_dite_eq</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>but it seems tricky to prove from the available API. Any ideas?</p>",
        "id": 201274463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592490109
    },
    {
        "content": "<p><code>split_ifs</code> then use <code>prod_single</code> etc</p>",
        "id": 201274652,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592490177
    },
    {
        "content": "<p>So as an intermediate step in the <code>a ∈ s</code> branch, the RHS will become <code>∏ x in {a}, b x _</code>?</p>",
        "id": 201276173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592490859
    },
    {
        "content": "<p>right</p>",
        "id": 201276352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592490951
    },
    {
        "content": "<p>or rather the LHS</p>",
        "id": 201276361,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592490957
    },
    {
        "content": "<p>Perhaps this modification of <code>prod_ite</code> will help? (Works for me in <code>algebra/big_operators.lean</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">prod_dite</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"err\">∪</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filter_union_filter_neg_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">prod_union</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">disjoint_right</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">})</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n      <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg2</span><span class=\"bp\">;</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">prod_bij</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">mem_attach</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201276481,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1592491006
    },
    {
        "content": "<p>That looks very promising!</p>",
        "id": 201276545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592491045
    },
    {
        "content": "<p>I'll see if I can make a quick PR</p>",
        "id": 201276674,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1592491093
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_dite_eq</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_eq_single</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_eq_one</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201277153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592491336
    },
    {
        "content": "<p>Looks good. Right now I'm going to copy-and-paste Kenny's proof into my branch which will eventually turn into PRs, but <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> yours seems like a good thing to have in <code>big_operators.lean</code> too.</p>",
        "id": 201277643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592491582
    },
    {
        "content": "<p><code>prod_apply_dite</code> and <code>prod_dite</code> are <a href=\"https://github.com/leanprover-community/mathlib/issues/3110\">#3110</a> and I will let you PR <code>prod_dite_eq</code> :)</p>",
        "id": 201282015,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1592493257
    }
]