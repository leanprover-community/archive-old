[
    {
        "content": "<p>Is there a tactic like <code>induction</code> but that takes into account the existence of an assumption <code>n ≠ 0</code>?</p>",
        "id": 224417016,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1611880920
    },
    {
        "content": "<p>Why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 224417201,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611881066
    },
    {
        "content": "<p>That's what I did but I am wondering if there's a built-in alternative</p>",
        "id": 224417290,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1611881157
    },
    {
        "content": "<p>I don't expect that this specific version of induction is avalable in mathlib, the closest equivalent I know is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_induction\">docs#nat.le_induction</a>. You might be able to call that with <code>induction n using nat.le_induction</code>.</p>",
        "id": 224454084,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611916825
    },
    {
        "content": "<p>But <code>induction</code> is pretty picky about the induction principles you can be <code>using</code>.</p>",
        "id": 224454172,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611916879
    },
    {
        "content": "<p>What does <code>induction'</code> do? Of course you can just make your own induction principle and then <code>apply</code> it.</p>",
        "id": 224456337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611918169
    },
    {
        "content": "<p>You need to watch Jannis' CPP talk.</p>",
        "id": 224457759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611919106
    },
    {
        "content": "<p>I looked for this but couldn't find the link :-(</p>",
        "id": 224489540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611935255
    },
    {
        "content": "<p>There is <code>pnat.strong_induction_on</code> but you have to convert your statement to use <code>pnat</code>.</p>",
        "id": 224493689,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611936533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/induction.20on.20n.20where.20n.20.E2.89.A0.200/near/224454084\">said</a>:</p>\n<blockquote>\n<p>I don't expect that this specific version of induction is avalable in mathlib, the closest equivalent I know is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_induction\">docs#nat.le_induction</a>. You might be able to call that with <code>induction n using nat.le_induction</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> This seems to be what I want, but <code>induction n using nat.le_induction</code> doesn't work. Do you know how else I can invoke that lemma?</p>",
        "id": 224570802,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1611991371
    },
    {
        "content": "<p>Are you looking for <code>obtain ⟨k, rfl⟩ := nat.exists_eq_succ_of_ne_zero hn</code>? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_succ_of_ne_zero\">docs#nat.exists_eq_succ_of_ne_zero</a></p>",
        "id": 224573731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611996323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Followed by <code>induction k</code>? I think that would accomplish what I'm looking for. However, the downside is that later I would need to use something like <code>Exists.intro (succ k) rfl</code> so that I won't have to deal with <code>k.succ.succ</code> everywhere (please correct me if that's not true or there's a better way to deal with that).</p>",
        "id": 224603376,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612038345
    },
    {
        "content": "<p>(I know I can leave everything in terms of <code>k.succ.succ</code> but that would make my proof very messy)</p>",
        "id": 224603742,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612038846
    },
    {
        "content": "<p>I don't really understand what you're asking for</p>",
        "id": 224608168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612044352
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_succ_of_ne_zero\">docs#nat.exists_eq_succ_of_ne_zero</a> allows me to work with a base case of <code>n=1</code>, which is what I am looking for. However, using it also means that my inductive step will be in terms of <code>k.succ.succ</code> instead of <code>n.succ</code>. I know that <code>k.succ.succ</code> is equal to <code>n.succ</code>, so technically this isn't a problem, but for stylistic reasons it is preferable to me to have things in terms of <code>n.succ</code> and not <code>k.succ.succ</code>. This means that I will essentially have to \"undo\" what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_succ_of_ne_zero\">docs#nat.exists_eq_succ_of_ne_zero</a> does, which seems silly. I'm asking if there's a way to avoid the mess with <code>k.succ.succ</code> entirely.<br>\nSorry if things are still unclear. I can try to put together an MWE if you think that will help.</p>",
        "id": 224614827,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612055019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/induction.20on.20n.20where.20n.20.E2.89.A0.200/near/224493689\">said</a>:</p>\n<blockquote>\n<p>There is <code>pnat.strong_induction_on</code> but you have to convert your statement to use <code>pnat</code>.</p>\n</blockquote>\n<p>Seems like nat -&gt; pnat can lift instances were missing to make this easier to do in a tactic block, so I've added <a href=\"https://github.com/leanprover-community/mathlib/issues/5977\">#5977</a></p>",
        "id": 224620483,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612065218
    },
    {
        "content": "<p>Are you looking for <code>obtain ⟨k, hk⟩ := nat.exists_eq_succ_of_ne_zero hn</code> (note: hk instead of rfl)?</p>",
        "id": 224622118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612068087
    },
    {
        "content": "<p>I had tried that but it causes problems: I need the assumption <code>n = k.succ</code> in order to use the inductive hypothesis when really <code>n = k.succ.succ</code> is true.</p>",
        "id": 224622338,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612068385
    },
    {
        "content": "<p>Then I still don't understand your problem. If your mathematical statement isn't \"given n is not 0, P n can be proven by showing P 1 and P    (k + 1) -&gt; P (k + 2)\", then what is it?</p>",
        "id": 224622660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612068854
    },
    {
        "content": "<p>That is what I'm trying to prove, what I'm running into with that is more of a technical problem. I've put together an mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  case nat.succ</span>\n<span class=\"cm\">  p : ℕ → Prop,</span>\n<span class=\"cm\">  n : ℕ,</span>\n<span class=\"cm\">  hn : n ≠ 0,</span>\n<span class=\"cm\">  k : ℕ,</span>\n<span class=\"cm\">  ih : n = k.succ → p n,</span>\n<span class=\"cm\">  hk : n = k.succ.succ</span>\n<span class=\"cm\">  ⊢ p n</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Obviously the very thing I am trying to prove is  \"since it is true for <code>k.succ</code> it is true for <code>k.succ.succ</code>,\" but I'm not sure how I can call <code>ih</code> in its above state.</p>\n<p>Interestingly, I've found that I can do as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">k.succ</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and then complete the proof in terms of <code>m</code>.</p>",
        "id": 224624930,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612071869
    },
    {
        "content": "<p>What's your base case?</p>",
        "id": 224625125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612072188
    },
    {
        "content": "<p>It might help to state a mwe that is actually provable, by adding appropriate hypotheses about <code>p n</code></p>",
        "id": 224625193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612072268
    },
    {
        "content": "<p>Sure. I'll post the actual proof I'm working on. I was trying to demonstrate with something more general.</p>",
        "id": 224625268,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612072370
    },
    {
        "content": "<p>I mean a general induction lemma</p>",
        "id": 224625275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612072382
    },
    {
        "content": "<p>Your first example should work if you use <code>induction k generalizing n</code></p>",
        "id": 224625296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612072433
    },
    {
        "content": "<p>for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n   <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 224625298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612072437
    },
    {
        "content": "<p>adjust the statements of <code>H1</code> and <code>H2</code> until they match the assumptions you want</p>",
        "id": 224625350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612072470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  case nat.succ</span>\n<span class=\"cm\">  p : ℕ → Prop,</span>\n<span class=\"cm\">  n : ℕ,</span>\n<span class=\"cm\">  hn : n ≠ 0,</span>\n<span class=\"cm\">  h1 : p 1,</span>\n<span class=\"cm\">  h2 : ∀ {m : ℕ}, p m → p (m + 1),</span>\n<span class=\"cm\">  k : ℕ,</span>\n<span class=\"cm\">  ih : n = k.succ → p n,</span>\n<span class=\"cm\">  hk : n = k.succ.succ</span>\n<span class=\"cm\">  ⊢ p n</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">k.succ</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_ne_zero</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note that in the second example the <code>let</code> line is not necessary. In my proof, however, it is, since  working with <code>k.succ.succ</code> everywhere will be messy.</p>",
        "id": 224626440,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612074133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/induction.20on.20n.20where.20n.20.E2.89.A0.200/near/224625296\">said</a>:</p>\n<blockquote>\n<p>Your first example should work if you use <code>induction k generalizing n</code></p>\n</blockquote>\n<p>This works! But it also causes things to get messy in my particular proof.</p>",
        "id": 224627034,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612075079
    },
    {
        "content": "<p>I think the <code>let</code> version is a totally reasonable thing to do here</p>",
        "id": 224637739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612090236
    },
    {
        "content": "<p>That is pretty much the conclusion I came to as well. I suppose that there are always going to be finicky cases like my own that require an extra line or two, but it seems like your suggestion of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_succ_of_ne_zero\">docs#nat.exists_eq_succ_of_ne_zero</a> is the most convenient option here.</p>",
        "id": 224689839,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612161012
    },
    {
        "content": "<p>Thank you all for your help!!</p>",
        "id": 224689843,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1612161019
    }
]