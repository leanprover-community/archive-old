[
    {
        "content": "<p>Is there such a coercion?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"bp\">$</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 302654621,
        "sender_full_name": "Youjack",
        "timestamp": 1665063702
    },
    {
        "content": "<p>No, you're meant to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.map\">docs#finset.map</a> explicitly.</p>",
        "id": 302656406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665064168
    },
    {
        "content": "<p>Given that there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_fn_dom\">docs#lift_fn_dom</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_subtype\">docs#coe_subtype</a>, it's a little surprising that there's not a <code>has_lift (set {(x : α) // p x}) (set α)</code> instance at least</p>",
        "id": 302658358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665064646
    },
    {
        "content": "<p>I'm going off the existence of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_list\">docs#lift_list</a> for my mild surprise -- one would expect there were other container types (like <code>set</code> or <code>finset</code>) that have similar <code>has_lift</code> instances.</p>",
        "id": 302658574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665064690
    },
    {
        "content": "<p>I make it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.map\">docs#finset.map</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"bp\">$</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.map</span> <span class=\"bp\">$</span> <span class=\"n\">function.embedding.subtype</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 302661825,
        "sender_full_name": "Youjack",
        "timestamp": 1665065500
    },
    {
        "content": "<p>I agree with Kyle, a <code>has_lift</code> makes sense for \"functor\" like containers</p>",
        "id": 302692279,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1665073599
    },
    {
        "content": "<p>But then that will need a bunch more API, right?</p>",
        "id": 302692486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665073665
    },
    {
        "content": "<p><code>finset</code> isn't a lawful functor though</p>",
        "id": 302692492,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1665073668
    },
    {
        "content": "<p>I don't think we have any API for <code>lift_list</code> either</p>",
        "id": 302692599,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1665073691
    },
    {
        "content": "<p>What should be the coercion from <code>finset {a : α // p a}</code> to <code>set α</code> be?</p>",
        "id": 302692726,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665073733
    },
    {
        "content": "<p>No default coercion, the same way a <code>has_lift</code> doesn't actually provide a coercion, you have to opt into it</p>",
        "id": 302693012,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1665073833
    },
    {
        "content": "<p>Ah, is this just for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a>?</p>",
        "id": 302694045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665074156
    },
    {
        "content": "<p>No, the coercion arrow looks for <code>has_lift</code> instances, and every <code>has_coe</code> instance gives a <code>has_lift</code> instance automatically</p>",
        "id": 302698462,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665075559
    },
    {
        "content": "<p>The <code>lift</code> tactic is sort of for going the opposite direction of the coercion arrow, confusingly.</p>",
        "id": 302698628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665075605
    },
    {
        "content": "<p><code>can_lift</code> is the appropriate class for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a> <a href=\"https://github.com/leanprover-community/mathlib/blob/9cf494e0c4e277137e102249e0d098274ee23081/src/tactic/lift.lean#L22\">https://github.com/leanprover-community/mathlib/blob/9cf494e0c4e277137e102249e0d098274ee23081/src/tactic/lift.lean#L22</a></p>",
        "id": 302698667,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665075617
    },
    {
        "content": "<p>I think it's reasonable for the API to just be \"<code>↑</code> is not the simp-normal form, unfold it\"</p>",
        "id": 302778321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665116142
    }
]