[
    {
        "content": "<p>Is this lemma in mathlib? I haven't found it, but I feel like it should exist</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span>  <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"n\">x'</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x'</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_self_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289520052,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657745963
    },
    {
        "content": "<p>Maybe it's named something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_left_inj\">docs#inner_left_inj</a>?</p>",
        "id": 289524622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657748344
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space.ext_inner_right\">docs#inner_product_space.ext_inner_right</a></p>",
        "id": 289525584,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1657748882
    },
    {
        "content": "<p>I guess we don't have the version that says <code>function.injective (inner x)</code>?</p>",
        "id": 289527135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657749795
    },
    {
        "content": "<p>Isn't that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space.ext_inner_left\">docs#inner_product_space.ext_inner_left</a>?</p>",
        "id": 289555716,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657780022
    },
    {
        "content": "<p>I guess maybe that puts the quantifier in a different place.</p>",
        "id": 289555737,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657780063
    }
]