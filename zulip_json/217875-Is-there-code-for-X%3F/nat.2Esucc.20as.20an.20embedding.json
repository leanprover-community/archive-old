[
    {
        "content": "<p>Do we have nat.succ as an embedding? Probably as an order embedding, which I can then forget to just an embedding.</p>",
        "id": 288736349,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657144667
    },
    {
        "content": "<p>I'm surprised that there isn't any for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.succ\">docs#order.succ</a>, actually... cc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 288736884,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657145015
    },
    {
        "content": "<p>That's very easy to write, actually.</p>",
        "id": 288736963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657145054
    },
    {
        "content": "<p>all we need is a no_top_order, right?</p>",
        "id": 288737190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657145167
    },
    {
        "content": "<p>I'm sort of surprised <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.to_embedding\">docs#function.injective.to_embedding</a> doesn't exist.</p>\n<p>Anyway, there's at least <code>function.embedding.mk _ nat.succ_injective</code> for now.</p>",
        "id": 288737230,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657145210
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.succ_pred.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">order</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">succ_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_max_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- `order.succ` as an order embedding. -/</span>\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">succ_embedding</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">order_embedding.of_map_le_iff</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">succ_le_succ_iff</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">order</span>\n</code></pre></div>",
        "id": 288737309,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657145280
    },
    {
        "content": "<p>Could hardly do shorter! <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 288737371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657145297
    },
    {
        "content": "<p>We also need antisymmetry because <code>succ</code> is potentially misbehaved on indistinguishable points.</p>",
        "id": 288737433,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657145347
    },
    {
        "content": "<p>We have addition as an order embedding somewhere, so one could use that. Don't remember what it's called at the moment.</p>",
        "id": 288737905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657145678
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_right_embedding\">docs#add_right_embedding</a></p>",
        "id": 288745195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657151521
    },
    {
        "content": "<p>That's the plain embedding. We don't have that as the order one?</p>",
        "id": 288751188,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657157408
    },
    {
        "content": "<p>There's already sections in the <code>order/succ_pred/basic.lean</code> file that have these exact assumptions as <code>variables</code></p>",
        "id": 288831288,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657211625
    },
    {
        "content": "<p>So this definition should be PR'd at the end of said section</p>",
        "id": 288831299,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657211634
    },
    {
        "content": "<p>Also, the analogous embedding for <code>pred</code> should be PR'd too</p>",
        "id": 288831358,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657211646
    }
]