[
    {
        "content": "<p>I see we have <code>algbraic-geometry</code>and a directory <code>topology.sheaves</code>, but am I right in thinking that I still cannot talk about sheaves of objects of a category on a topological space? I want to put a sheaf of rings on a topological space.</p>",
        "id": 204710501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445578
    },
    {
        "content": "<p>We built this in a hands-on manner in the schemes repo, without using any categories. But we now have presheaves in this generality (see <code>PresheafedSpace</code>), so the natural thing to do next is sheaves.</p>",
        "id": 204710696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445681
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- locally ringed spaces</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebraic_geometry</span><span class=\"bp\">.</span><span class=\"n\">presheafed_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebraic_geometry</span>\n<span class=\"kn\">structure</span> <span class=\"n\">ringed_space</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PresheafedSpace</span> <span class=\"n\">CommRing</span><span class=\"o\">)</span>\n<span class=\"c1\">-- is a sheaf</span>\n</code></pre></div>\n\n\n<p>The statement I need is that for a bunch of open sets, the canonical map from F(union) to prod_i F(U_i) is the equalizer in the category of sets of the usual two restriction maps from prod_i F(U_i) to prod_{i,j}F(U_i\\cap F(U_j).</p>",
        "id": 204711480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595446146
    },
    {
        "content": "<p>Nope we still don't have a satisfactory version of this, sorry.</p>",
        "id": 204735221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595460828
    },
    {
        "content": "<p>I've kept intending to go back to this, but keep getting hung up on the decision \"try again with the sheaf condition on a topology, or just define sites?\"</p>",
        "id": 204735302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595460876
    },
    {
        "content": "<p>There is an ancient branch called <code>sheaves</code>, but I've no memory of what it contains. :-)</p>",
        "id": 204735345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595460918
    },
    {
        "content": "<p>haha, you tricked me, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>.</p>\n<p>I made a new branch (<code>sheaf_condition_in_Type</code>) and started over again, aiming to prove <a href=\"https://stacks.math.columbia.edu/tag/0073\">https://stacks.math.columbia.edu/tag/0073</a>. </p>\n<p>It's not there yet, but hopefully downhill from here --- I think I've done all of the \"maths proof\", and the remaining sorries are either easy facts about cones, or about functors preserving limits.</p>",
        "id": 204757955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595476051
    },
    {
        "content": "<p>I have no idea whether we actually use that tag in practice but it would not surprise me if we do</p>",
        "id": 204765614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595487523
    },
    {
        "content": "<p>So the issue is \"which definition gives us something we can actually prove theorems about\"?</p>",
        "id": 204765640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595487573
    },
    {
        "content": "<p>Yay, all sorries done. This was much easier than last time I tried.</p>",
        "id": 204767995,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595489891
    },
    {
        "content": "<p>So what are the next things to try out?</p>\n<ol>\n<li>write out the element-wise sheaf condition in <code>Type</code>?</li>\n<li>show that the presheaves of rings of functions on topological spaces we already have are sheaves?</li>\n<li>the gluing exercise?</li>\n<li>wonder how to do sheaves over modules (with the ring varying)?</li>\n</ol>",
        "id": 204769596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595491249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> This is cool</p>",
        "id": 204770536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595491932
    },
    {
        "content": "<p>Where is the code?</p>",
        "id": 204770540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595491935
    },
    {
        "content": "<p><code>sheaf_condition_in_Type</code></p>",
        "id": 204770575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595491959
    },
    {
        "content": "<p>Ok, I'll take a look right now</p>",
        "id": 204770582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595491967
    },
    {
        "content": "<p>in <code>src/topology/sheaves/sheaf/concrete_category.lean</code></p>",
        "id": 204770605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595492003
    },
    {
        "content": "<p>it's first cut code, but should be pretty easy to golf</p>",
        "id": 204770617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595492015
    },
    {
        "content": "<p>and seems worth commenting properly :-)</p>",
        "id": 204770630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595492029
    },
    {
        "content": "<p>Awww, there are no oleans yet</p>",
        "id": 204770637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595492039
    },
    {
        "content": "<p>I'll take those for the one-but-last commit</p>",
        "id": 204770718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595492085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I would be interested in (1), (2), (3), (4), and also</p>\n<ol start=\"5\">\n<li>Sheafification</li>\n<li>Pullback and pushforward of sheaves</li>\n</ol>",
        "id": 204771022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595492302
    },
    {
        "content": "<p>yeah, sheafification would be a good goal</p>",
        "id": 204771069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595492349
    },
    {
        "content": "<ol start=\"7\">\n<li>Stress-test the code by defining the structure sheaf on the prime spectrum</li>\n</ol>",
        "id": 204771071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595492350
    },
    {
        "content": "<p>via plus construction?</p>",
        "id": 204771080,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595492365
    },
    {
        "content": "<p>Probably, yes</p>",
        "id": 204771091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595492384
    },
    {
        "content": "<p>I guess this only works for certain \"coefficient\" categories</p>",
        "id": 204771146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595492404
    },
    {
        "content": "<p>I've done sheafification for sheaves on a lawvere tierney topology, I'm in the process of doing the specialisation to sites</p>",
        "id": 204793462,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595509355
    },
    {
        "content": "<p>This would give sheafification on set-valued sheaves on a site, and since I've got the adjunction to forgetful and preservation of finite limits, ring-valued sheaves and whatever should drop out</p>",
        "id": 204793686,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595509446
    },
    {
        "content": "<p>Actually one annoyingly missing thing is that preservation of finite products + equalizers gives preservation of finite limits, strictly speaking I only have the former, though the second is true in Lean (since preserving limits is subsingleton)</p>",
        "id": 204793805,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595509497
    },
    {
        "content": "<p>Johan and I have been working on something very low-brow, and verified that the presheaf of functions (not continuous or anything) really is a sheaf.</p>",
        "id": 204798199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595511768
    },
    {
        "content": "<p>I think the most usable thing to do would be for me to define the equivalence of categories (or topoi?) between my specialised category of sheaves and your concrete category of sheaves, so that you quickly get all the nice categorical properties but don't have to deal with a weird topos api</p>",
        "id": 204798528,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595511940
    },
    {
        "content": "<p>Will things translate nicely along such an equivalence?</p>",
        "id": 204798909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595512104
    },
    {
        "content": "<p>I would expect that it is better to show that <code>Shv(C)</code> is a topos</p>",
        "id": 204798939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595512129
    },
    {
        "content": "<p>And maybe have a class <code>[grothendieck_topos]</code> that contains extra API on top of the elementary topos stuff</p>",
        "id": 204798992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595512157
    },
    {
        "content": "<p>I think categorical properties should transfer nicely at least - if you've got that Shv(C) is a category and I can show it's equivalent to my sh(j), then it should drop out that Shv(C) is a topos too</p>",
        "id": 204799425,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595512370
    },
    {
        "content": "<p>Ok... aren't there defs involved that need nice definitions for future hapiness?</p>",
        "id": 204799521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595512427
    },
    {
        "content": "<p>Or is everything subsingleton?</p>",
        "id": 204799550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595512436
    },
    {
        "content": "<p>There are (non-subsingleton) defs involved, but if the entire structure of a topos is transferred along an equivalence, all the defs should play nicely with each other</p>",
        "id": 204799682,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595512493
    },
    {
        "content": "<p>(This is my guess, at least)</p>",
        "id": 204799756,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595512526
    },
    {
        "content": "<p>Sure, but will they play nice with defs outside of topos theory...</p>",
        "id": 204801453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595513225
    },
    {
        "content": "<p>For example, the exponential object in <code>Shv(C)</code> might want to be the \"obvious\" definition, instead of something pulled through an equivalence.</p>",
        "id": 204801545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595513270
    },
    {
        "content": "<p>Because at some point you are going to take sections of that sheaf, and want to treat it as a (un)curried function [I always forget whether it's curry or uncurry]</p>",
        "id": 204801676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595513315
    },
    {
        "content": "<p>Right I see your concern, but my hope is that since we have the universal property, you can transport across the adjunction and treat it as an uncurried function directly</p>",
        "id": 204804434,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595514548
    },
    {
        "content": "<p>Aha... let's hope that works (-;</p>",
        "id": 204804799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595514703
    },
    {
        "content": "<p>I suspect a bigger annoyance might be if you want to work with the product of sheaves - essentially the same problem as if you want to give an element of the cartesian product of types, it's not just the type product because of the <code>has_binary_products Type</code> instance. My way around this for Type has been to use generalised elements - just giving the nat bij between 1 -&gt; X and X, and we have an obvious nat bij between C -&gt; X x Y and pairs C -&gt; X, C -&gt; Y, and putting this together lets you get the element of type X x Y given just an element of type X and element of type Y, which does play well with the other definitions and lemmas; I don't know if something analogous works in geometry though</p>",
        "id": 204814418,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595518954
    },
    {
        "content": "<p>I think some lemmas to work with generalised elements might be really useful actually, especially in a well-powered category (like any grot top)</p>",
        "id": 204814553,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595519023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I just thoroughly commented our proof from last night. It's on the branch. I propose we do the continuous function version as well, and stage that off as a PR before continuing. I'm happy enough that this setup is viable.</p>",
        "id": 204915388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595597627
    },
    {
        "content": "<p>That's a lovely commenting job!  You have one interesting TODO:</p>\n<blockquote>\n<p>In fact, I'd like to do it for any \"functions satisfying a local condition\", for which there's a sketch at <a href=\"https://github.com/leanprover-community/mathlib/issues/1462\">https://github.com/leanprover-community/mathlib/issues/1462</a></p>\n</blockquote>\n<p>If you introduce this class of functions, I think it can be used elsewhere in the library.  For example, Sébastien has the definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/structure_groupoid.local_invariant_prop\">docs#structure_groupoid.local_invariant_prop</a> for conditions on functions which are local + invariant under a groupoid; maybe that could extend your class.</p>",
        "id": 204917071,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595598575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Sheaves.20of.20category-objects/near/204814418\">said</a>:</p>\n<blockquote>\n<p>I suspect a bigger annoyance might be if you want to work with the product of sheaves - essentially the same problem as if you want to give an element of the cartesian product of types, it's not just the type product because of the <code>has_binary_products Type</code> instance. My way around this for Type has been to use generalised elements - just giving the nat bij between 1 -&gt; X and X, and we have an obvious nat bij between C -&gt; X x Y and pairs C -&gt; X, C -&gt; Y, and putting this together lets you get the element of type X x Y given just an element of type X and element of type Y, which does play well with the other definitions and lemmas; I don't know if something analogous works in geometry though</p>\n</blockquote>\n<p>This is a bigger problem in topology--Top <code>has_limits</code> and therefore <code>has_binary_products</code> but they aren't the ones that we have many nontrivial theorems about, and it's not so easy to connect them. For example, try proving that locally compact spaces are exponentiable and so products by them preserve pushouts. All the nontrivial math is done (I needed it for lean-homotopy-theory), but the pieces don't fit together.</p>",
        "id": 205070723,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595804066
    },
    {
        "content": "<p>In lean-homotopy-theory I only needed the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo>×</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">- \\times [0, 1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> and I didn't ever really need the fact that it's a product in the sense of category theory, so I just defined it directly using <code>prod</code>, and then it connected directly to all the relevant facts about product spaces that we already have.</p>",
        "id": 205071055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595804646
    },
    {
        "content": "<p>But that doesn't really seem like the correct approach for mathlib to take.</p>",
        "id": 205071131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595804874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Sheaves.20of.20category-objects/near/205070723\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Sheaves.20of.20category-objects/near/204814418\">said</a>:</p>\n<blockquote>\n<p>I suspect a bigger annoyance might be if you want to work with the product of sheaves - essentially the same problem as if you want to give an element of the cartesian product of types, it's not just the type product because of the <code>has_binary_products Type</code> instance. My way around this for Type has been to use generalised elements - just giving the nat bij between 1 -&gt; X and X, and we have an obvious nat bij between C -&gt; X x Y and pairs C -&gt; X, C -&gt; Y, and putting this together lets you get the element of type X x Y given just an element of type X and element of type Y, which does play well with the other definitions and lemmas; I don't know if something analogous works in geometry though</p>\n</blockquote>\n<p>This is a bigger problem in topology--Top <code>has_limits</code> and therefore <code>has_binary_products</code> but they aren't the ones that we have many nontrivial theorems about, and it's not so easy to connect them. For example, try proving that locally compact spaces are exponentiable and so products by them preserve pushouts. All the nontrivial math is done (I needed it for lean-homotopy-theory), but the pieces don't fit together.</p>\n</blockquote>\n<p>Alright, I'll give this a go - is the hard part showing that locally compact spaces are exponentiable or that products by them preserve pushouts?</p>",
        "id": 205366588,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596034130
    },
    {
        "content": "<p>There's no hard part really. You can consult <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/exponentiable.lean\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/exponentiable.lean</a></p>",
        "id": 205378549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596039410
    },
    {
        "content": "<p>So which pieces don't fit together? I'm confused about what you're proposing the problem here is</p>",
        "id": 205378892,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596039567
    },
    {
        "content": "<p>mathlib products</p>",
        "id": 205379306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596039768
    },
    {
        "content": "<p>I'm not sure if this is what you meant, but I got:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">prod_colimit_iso</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">⟶</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">⟶</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">α</span> <span class=\"err\">⨯</span> <span class=\"n\">pushout</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≅</span> <span class=\"n\">pushout</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>without any pain</p>",
        "id": 205381265,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596040731
    },
    {
        "content": "<p>source?</p>",
        "id": 205381312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596040759
    },
    {
        "content": "<p><a href=\"https://gist.github.com/b-mehta/bbdc500ab81bc07b3c31d22878187c19\">https://gist.github.com/b-mehta/bbdc500ab81bc07b3c31d22878187c19</a></p>",
        "id": 205381445,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596040819
    },
    {
        "content": "<p>Presumably much of it could be improved since I don't know the topology api at all well</p>",
        "id": 205381465,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596040830
    },
    {
        "content": "<p>but other than that I just tried what was most obvious to me and didn't golf at all, and it happened in 64 lines</p>",
        "id": 205381519,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596040852
    },
    {
        "content": "<p>This is using the specific construction of products for <code>Top</code> right?</p>",
        "id": 205381883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596041015
    },
    {
        "content": "<p>No, just the universal property</p>",
        "id": 205381907,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596041027
    },
    {
        "content": "<p>what is <a href=\"https://gist.github.com/b-mehta/bbdc500ab81bc07b3c31d22878187c19#file-reid-lean-L27-L31\">https://gist.github.com/b-mehta/bbdc500ab81bc07b3c31d22878187c19#file-reid-lean-L27-L31</a> then?</p>",
        "id": 205382160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596041143
    },
    {
        "content": "<p>anyways, it's hard to explain the issue with a self-contained example because it is really a global problem</p>",
        "id": 205382267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596041195
    },
    {
        "content": "<p>Right but I maintain that it's a problem I've never had</p>",
        "id": 205382308,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596041214
    },
    {
        "content": "<p>You will have it!</p>",
        "id": 205382353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596041239
    },
    {
        "content": "<p>When? :)</p>",
        "id": 205382737,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596041421
    },
    {
        "content": "<p>I don't know but when you do let me know. I've pretty much given up on following the category theory library for now.</p>",
        "id": 205383565,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596041868
    }
]