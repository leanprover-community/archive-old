[
    {
        "content": "<p>How do I prove <code>example (i : fin 1) : i = 0 ∨ i = 1</code>? <code>cases i</code> does not work.</p>",
        "id": 284695470,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654140802
    },
    {
        "content": "<p>I need it for this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.linear_independent_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">ext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">h.left</span><span class=\"o\">)</span> <span class=\"n\">h.right</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_sub.sub</span> <span class=\"n\">h.left</span><span class=\"o\">)</span> <span class=\"n\">h.right</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">suggest</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- wanna do cases i</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284695556,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654140917
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#fin_cases\">tactic#fin_cases</a> should work here, as <code>fin_cases i</code></p>",
        "id": 284695789,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654141205
    },
    {
        "content": "<p>By the way, do you know about the <code>linear_combination</code> tactic?  It will give the values of <code>g 0</code> and <code>g 1</code> much more easily.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h.2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 284695906,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1654141411
    }
]