[
    {
        "content": "<p>Planned features:</p>\n<ul>\n<li>special support for <code>rw</code>, <code>simp</code></li>\n<li>special support for <code>exact</code></li>\n<li>premise selection/lemma suggestion</li>\n<li>full push-button proof search (currently, <code>gptf</code> performs one-step lookahead on all the predictions returned by the model)</li>\n<li>support for running your own transformer language model locally</li>\n</ul>\n<p>ideas welcome!</p>",
        "id": 223144765,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1610989578
    },
    {
        "content": "<p>Would it be feasible to have some kind of caching mechanism for suggestions? Right now I can use vscode-lean's copy-to-comment button to put the suggestions in a comment, but this ends up modifying the Lean file, which then triggers the server to run <code>gptf</code> again. Maybe we should have the infoview handle this sort of thing.</p>",
        "id": 223181677,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611023547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/274007-lean-gptf/topic/Feature.20requests/near/223181677\">said</a>:</p>\n<blockquote>\n<p>Would it be feasible to have some kind of caching mechanism for suggestions? Right now I can use vscode-lean's copy-to-comment button to put the suggestions in a comment, but this ends up modifying the Lean file, which then triggers the server to run <code>gptf</code> again. Maybe we should have the infoview handle this sort of thing.</p>\n</blockquote>\n<p>ah, it would be nice to have a custom interaction monad <code>begin [gptf] ... end</code> which runs a <code>state_t search_state tactic</code> --- then the user would be able to step through the entire breadth-first search, reorder the search queue, manually backtrack, look up previous predictions, etc.</p>\n<p>the <code>smt</code> mode does a similar caching of <code>ematch</code> lemmas (indeed, the <code>smt</code> mode is just <code>state_t smt_state tactic</code>)</p>",
        "id": 223185451,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1611028984
    }
]