[
    {
        "content": "<p>Hello everybody, we found a way to train a noticeably better (and smaller) model, now available as the default engine <code>formal-large-lean-0119-mix-v1-c4</code> in the <code>lean-gptf</code> beta. It drove the dozen new PRs we merged yesterday and we're excited to have you guys try it out!</p>\n<p>Also, now that <code>mathlib</code> has been bumped to <code>3.26.0</code>, I have bumped <code>lean-gptf</code> to use <code>3.26.0</code> and thus it should be much easier to just add <code>lean-gptf</code>as a dependency to your own project and try using the <code>gptf</code> tactic there. Note, it has only been trained on 80% of a mathlib from 1 month ago, but it would be really interesting to see how well it can generalize to new domains/projects.</p>",
        "id": 224288437,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1611814962
    },
    {
        "content": "<p>The new model is, strangely enough, very fond of using semicolons. It synthesized the following proof of <code>list.kunion_kerase</code> in a single shot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.kerase</span> <span class=\"n\">a</span> <span class=\"n\">l₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">kunion</span> <span class=\"o\">(</span><span class=\"n\">list.kerase</span> <span class=\"n\">a</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">list.kerase</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">l₁.kunion</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">generalizing</span> <span class=\"n\">l₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">l₂</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224288460,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1611815024
    },
    {
        "content": "<p>(the proof of this theorem did not appear in training data)</p>",
        "id": 224288466,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1611815037
    },
    {
        "content": "<p>Deleted model <code>formal-3b-lean-webmath-1230-v2-c4</code>  which  predated the current one <code>formal-large-lean-0119-mix-v1-c4</code>, in preparation for the release of a new model. If you get errors related to <code>formal-3b-lean-webmath-1230-v2-c4</code> please update to master (and please don't hesitate to reach out!)</p>",
        "id": 225287750,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1612524891
    }
]