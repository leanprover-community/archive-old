[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249373\">Stanislas Polu</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/HOList.20or.20Lean.3F/near/240914292\">said</a>:</p>\n<blockquote>\n<p>We've just open-sourced our new REPL (based on <span class=\"user-mention silent\" data-user-id=\"116045\">Jesse Michael Han</span>'s <a href=\"https://github.com/jesse-michael-han/lean-gptf\">lean-gptf</a>) for Lean 3 loosely following <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>'s <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/HOList.20or.20Lean.3F/near/240134935\">proposed interface</a>. It exposes a JSON interface easy to integrate from your language of choice:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lean --run src/repl.lean\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">[</span><span class=\"s2\">\"init_search\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"int.prime.dvd_mul\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">]]</span>\n<span class=\"p\">{</span><span class=\"nt\">\"error\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"search_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state\"</span><span class=\"p\">:</span><span class=\"s2\">\"⊢ ∀ {m n : ℤ} {p : ℕ}, nat.prime p → ↑p ∣ m * n → p ∣ m.nat_abs ∨ p ∣ n.nat_abs\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"0\"</span><span class=\"p\">}</span>\n\n<span class=\"p\">[</span><span class=\"s2\">\"run_tac\"</span><span class=\"p\">,[</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"s2\">\"intros\"</span><span class=\"p\">]]</span>\n<span class=\"p\">{</span><span class=\"nt\">\"error\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"search_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state\"</span><span class=\"p\">:</span><span class=\"s2\">\"m n : ℤ,\\tp : ℕ,\\thp : nat.prime p,\\th : ↑p ∣ m * n\\t⊢ p ∣ m.nat_abs ∨ p ∣ n.nat_abs\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"1\"</span><span class=\"p\">}</span>\n\n<span class=\"p\">[</span><span class=\"s2\">\"run_tac\"</span><span class=\"p\">,[</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"s2\">\"apply (nat.prime.dvd_mul hp).mp\"</span><span class=\"p\">]]</span>\n<span class=\"p\">{</span><span class=\"nt\">\"error\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"search_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state\"</span><span class=\"p\">:</span><span class=\"s2\">\"m n : ℤ,\\tp : ℕ,\\thp : nat.prime p,\\th : ↑p ∣ m * n\\t⊢ p ∣ m.nat_abs * n.nat_abs\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"2\"</span><span class=\"p\">}</span>\n\n<span class=\"p\">[</span><span class=\"s2\">\"run_tac\"</span><span class=\"p\">,[</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span><span class=\"s2\">\"rw ← int.nat_abs_mul\"</span><span class=\"p\">]]</span>\n<span class=\"p\">{</span><span class=\"nt\">\"error\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"search_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state\"</span><span class=\"p\">:</span><span class=\"s2\">\"m n : ℤ,\\tp : ℕ,\\thp : nat.prime p,\\th : ↑p ∣ m * n\\t⊢ p ∣ (m * n).nat_abs\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"3\"</span><span class=\"p\">}</span>\n\n<span class=\"p\">[</span><span class=\"s2\">\"run_tac\"</span><span class=\"p\">,[</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"s2\">\"3\"</span><span class=\"p\">,</span><span class=\"s2\">\"simp\"</span><span class=\"p\">]]</span>\n<span class=\"p\">{</span><span class=\"nt\">\"error\"</span><span class=\"p\">:</span><span class=\"s2\">\"run_tac_failed: pos=(some ⟨1, 2⟩) msg=simplify tactic failed to simplify\"</span><span class=\"p\">,</span><span class=\"nt\">\"search_id\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state_id\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">}</span>\n\n<span class=\"p\">[</span><span class=\"s2\">\"run_tac\"</span><span class=\"p\">,[</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"s2\">\"3\"</span><span class=\"p\">,</span><span class=\"s2\">\"exact int.coe_nat_dvd_left.mp h\"</span><span class=\"p\">]]</span>\n<span class=\"p\">{</span><span class=\"nt\">\"error\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"search_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"0\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state\"</span><span class=\"p\">:</span><span class=\"s2\">\"no goals\"</span><span class=\"p\">,</span><span class=\"nt\">\"tactic_state_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"4\"</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>It smoothly handles and return tactic application errors and allows multiplexing of proof searches on a single REPL (interleaving of <code>run_tac</code> and <code>init_search</code> commands). It is still subject to a few crashes, but empirically they happen less than 0.01% of the time, which is within bound for a production use at scale. We've successfully run pools of 128+ REPLs each multiplexing 64+ searches in parallel.</p>\n<p>Hopefully, this will help make Lean 3 (and surely 4 very soon) a prime choice for machine learning research.</p>\n<p>The project is hosted here: <a href=\"https://github.com/openai/lean-gym\">https://github.com/openai/lean-gym</a> -- Contributions and feedback welcome!</p>\n</blockquote>",
        "id": 240914674,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1622538921
    }
]