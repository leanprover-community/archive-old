[
    {
        "content": "<p>lean-gptf just helped me finish this proof: <a href=\"https://github.com/dwrensha/mathematical-puzzles-in-lean/blob/85f3a4c903dc33a50b1ea03499f55e4646850daf/src/bulgaria1998_q3.lean\">https://github.com/dwrensha/mathematical-puzzles-in-lean/blob/85f3a4c903dc33a50b1ea03499f55e4646850daf/src/bulgaria1998_q3.lean</a></p>",
        "id": 233256835,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617674956
    },
    {
        "content": "<p>I'm starting to think of it as an \"autocomplete\" feature.</p>",
        "id": 233256913,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617675011
    },
    {
        "content": "<p>Two places where I specifically remember it helping:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">i</span>\n          <span class=\"bp\">=</span> <span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 233257162,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617675225
    },
    {
        "content": "<p>When you say “autocomplete”, do you mean you used the prefix feature, or that it completes the proof?</p>",
        "id": 233264724,
        "sender_full_name": "Jason Rute",
        "timestamp": 1617682784
    },
    {
        "content": "<p>\"the prefix feature\" is not something that I know about</p>",
        "id": 233306003,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617710470
    },
    {
        "content": "<p>I mean that it feels like a bit like writing natural language in Google Docs, where sometimes Google will suggest three or four words to finish your sentence.</p>",
        "id": 233306319,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617710615
    },
    {
        "content": "<p>In both the lean-gptf and the Google Docs case, I am often impressed with the context-dependence and accuracy of the predictions.</p>",
        "id": 233306449,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617710668
    },
    {
        "content": "<p>But also in both cases, I don't expect the AI to help if I don't already basically have the high level idea of what I'm trying to say already laid out.</p>",
        "id": 233306748,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617710820
    },
    {
        "content": "<p>I find myself reaching for <code>gptf</code> when I think \"I know there are probably some lemmas or tactics in mathlib that will easily close this goal, but I'm too lazy to wade through the mathlib docs to find them (and <code>library_search</code> isn't helping)\".</p>",
        "id": 233307559,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617711190
    },
    {
        "content": "<p>(It occurs to me that maybe I ought to try the simpler <code>suggest</code> tactic more.)</p>",
        "id": 233308000,
        "sender_full_name": "David Renshaw",
        "timestamp": 1617711416
    },
    {
        "content": "<p><code>hint</code> is also helpful in these situations (I think <code>suggest</code> suggests lemmas and <code>hint</code> suggests tactics)</p>",
        "id": 233308693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617711788
    },
    {
        "content": "<p>As for the prefix feature <code>gptf {pfx:= “rw”}</code> , say, forces it to give you a tactic command starting with “rw”.</p>",
        "id": 233312357,
        "sender_full_name": "Jason Rute",
        "timestamp": 1617713514
    },
    {
        "content": "<p><code>gptf</code> is often faster than <code>library_search</code> <span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span></p>",
        "id": 233313299,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1617713835
    }
]