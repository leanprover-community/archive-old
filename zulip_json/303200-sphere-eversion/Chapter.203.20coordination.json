[
    {
        "content": "<p>We are ready to start working on Chapter 3. This is the chapter where all the manifold theory is concentrated. On paper in the real world this chapter would be three lines long, saying the local proofs obviously globalize (I'm lying a bit because there is also half a page about getting parametricity for  free). But mathlib lacks a lot of infrastructure about vector bundles.</p>",
        "id": 273976019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646316012
    },
    {
        "content": "<p>Discussions with Sébastien and Heather gives the following first targets:</p>\n<ul>\n<li>topological vector bundle of continuous linear maps from one topological vector bundle to another. </li>\n<li>pull-back bundles</li>\n<li>induced <code>has_groupoid</code> structure on a topological vector bundle over a base which <code>has_groupoid</code></li>\n</ul>",
        "id": 273976248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646316082
    },
    {
        "content": "<p>The first two points are not there even for topological vector bundles over topological spaces. Then the third point is needed to get smooth structures everywhere.</p>",
        "id": 273976390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646316125
    },
    {
        "content": "<p>Once these are done, we'll need to upgrade the tangent bundle to a smooth vector bundle, and then define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>J</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J^1(M, N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> for smooth manifolds <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>.</p>",
        "id": 273976556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646316179
    },
    {
        "content": "<p>An independent goal is:</p>\n<ul>\n<li>prove existence of nice atlases as discussed in <a href=\"#narrow/stream/303200-sphere-eversion/topic/Smooth.20extensions\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Smooth.20extensions</a></li>\n</ul>",
        "id": 273977085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646316397
    },
    {
        "content": "<p>Anyone who wants to tackle one of those four accessible points is very welcome to say it here.</p>",
        "id": 273977261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646316469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/273976248\">said</a>:</p>\n<blockquote>\n<p>Discussions with Sébastien and Heather gives the following first targets:</p>\n<ul>\n<li>topological vector bundle of continuous linear maps from one topological vector bundle to another. </li>\n</ul>\n</blockquote>\n<p>I think this one, in particular, should develop quite similarly to the corresponding construction for the direct sum of two vector bundles, which I have nearly finished: <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-direct-sum\">branch#vb-direct-sum</a></p>",
        "id": 273977653,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1646316628
    },
    {
        "content": "<p>So that can serve as a model (or I myself can do that, after I finish the direct sum).</p>",
        "id": 273977730,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1646316660
    },
    {
        "content": "<p>I have another independent target to add:</p>\n<ul>\n<li>Define the homotopy of maps underlying the formal sphere eversion. This is the family $j_t$ of the beginning of the proof of <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#thm:sphere_eversion\">https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#thm:sphere_eversion</a></li>\n</ul>",
        "id": 273978021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646316782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/273976248\">said</a>:</p>\n<blockquote>\n<ul>\n<li>induced <code>has_groupoid</code> structure on a topological vector bundle over a base which <code>has_groupoid</code></li>\n</ul>\n</blockquote>\n<p>For this one, it's first necessarily to define the correct groupoid.  Given a structure groupoid <code>G</code> over a model space <code>H</code>, you want to define the groupoid of local homeomorphisms of <code>F \\times H</code> whose sources and targets contain only full fibres of <code>F</code>, and which are linear in each fibre, and which cover <code>G</code>.</p>",
        "id": 273978037,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1646316789
    },
    {
        "content": "<p>Yesterday I returned to working on Sphere Eversion after a break and I would be grateful for help clarifying:</p>\n<ul>\n<li>Who is working on what</li>\n<li>What has been done so far, in particular I am not clear on the status of each the following:<ul>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:updating\">Lemma 3.2</a></li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:stability_cover\">Lemma 3.6</a></li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:loc_ultim_const\">Lemma 3.10</a></li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:transfer\">Lemma 3.21</a></li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:param_trick\">Lemma 3.23</a></li>\n</ul>\n</li>\n</ul>\n<p>I note that:<br>\n<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> said:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> already claimed Lemma 3.2</p>\n</blockquote>\n<p><a href=\"#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290324201\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290324201</a></p>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> said:</p>\n<blockquote>\n<p>I'm behind the schedule on Lemma 3.6 (waiting for CI on <a href=\"https://github.com/leanprover-community/mathlib/pull/15490\">#15490</a> to merge it and PR the actual proof)</p>\n<p>In the meantime, here is Lemma 3.10: <a href=\"https://github.com/leanprover-community/mathlib/pull/15580\">#15580</a></p>\n<p>Do we have all definitions for L 3.23?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290321458\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290321458</a><br>\n<a href=\"#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290453258\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290453258</a></p>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> said:</p>\n<blockquote>\n<p>I am now continuing with Definition 3.20 and Lemma 3.21</p>\n</blockquote>\n<p><a href=\"#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290357122\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290357122</a></p>",
        "id": 292741636,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660133109
    },
    {
        "content": "<p>It seems to me that the Blueprint should be updated since:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/15580\">#15580</a> seems to be a proof of Lemma 3.10</li>\n<li>Earlier this morning I updated the Blueprint with a simpler proof of <code>nice_atlas</code></li>\n<li>I just pushed <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/730f134f41eff363e0250db7cc1e3895707442b5\">https://github.com/leanprover-community/sphere-eversion/commit/730f134f41eff363e0250db7cc1e3895707442b5</a> to fix a dependency error</li>\n<li>We may have proofs of some of the other lemmas mentioned above</li>\n</ul>",
        "id": 292742266,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660133351
    },
    {
        "content": "<p>Finally I would be very grateful if we could permanently fix the issue with the stale dependency graph. I swear the URL has changed more than once. We have both: <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">bad link</a> and <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph_document.html\">good link</a>.</p>",
        "id": 292742537,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660133447
    },
    {
        "content": "<p>cc also <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 292742729,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660133520
    },
    {
        "content": "<p>I restarted to work on Lemma 3.21 again today. It's mostly done, I think.</p>",
        "id": 292748385,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660135717
    },
    {
        "content": "<p>The dependency graph issue is the reason I'm not updating the blueprint myself anymore: my installation generates the dependency graph at the bad link...</p>",
        "id": 292748432,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660135748
    },
    {
        "content": "<p>There is one more thing that needs to be fixed in the dependency graph: I removed the edge from <code>one_jet_extension_prop</code> to <code>holonomic_section</code>, but <code>one_jet_extension_prop</code> needs an edge to some other vertex.</p>",
        "id": 292748700,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660135860
    },
    {
        "content": "<p>I agree that clarification is much needed.<br>\n<span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/292741636\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> said:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> already claimed Lemma 3.2</p>\n</blockquote>\n<p><a href=\"#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290324201\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Lemma.203.2E6/near/290324201</a></p>\n</blockquote>\n<p>I think Heather unclaimed this to work on constructing the family of formal immersions used in the actual sphere eversion case.</p>",
        "id": 292750564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660136547
    },
    {
        "content": "<p>I'm confused about Lemma 3.6. I thought that Yury did it but I'm not 100% sure</p>",
        "id": 292751272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660136787
    },
    {
        "content": "<p>IIUC he had a proof but may not have PR'd it as he waited for some other work to get merged in Mathlib.</p>",
        "id": 292751375,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660136836
    },
    {
        "content": "<p>Regarding the blueprint, I know it's currently a mess. In providence I tried to update it but couldn't build on my laptop. I'll try again (but I'm still on my laptop)</p>",
        "id": 292751600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660136933
    },
    {
        "content": "<p>Thanks. If it helps, that revolting commutative diagram is now gone!</p>",
        "id": 292751684,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660136972
    },
    {
        "content": "<p>There's no emergency btw and it might not be the best use of your time to do it from your laptop. I just wanted a bit more clarity on where we stand.</p>",
        "id": 292751879,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660137045
    },
    {
        "content": "<p>I can explain the dep_graph url issue. The problem is that the blueprint in this project isn't built in CI, it is built locally and pushed to the repository. Hence anyone who has an outdate leanblueprint plugin for plastex will generate the dep graph in the old way. The reason why there is an old way and a new way it that LTE became too big to have a single dep graph and I arranged that each part of a blueprint can have a dep graph.</p>",
        "id": 292753336,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660137636
    },
    {
        "content": "<p>Sounds like it's Johan's fault then ;-)</p>",
        "id": 292753635,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660137724
    },
    {
        "content": "<p>I'll buy you a beer next time we meet, if that helps...</p>",
        "id": 292756102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660138577
    },
    {
        "content": "<p>I finished and pushed Lemma 3.21</p>",
        "id": 292769017,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660142762
    },
    {
        "content": "<p>Shall I take a look at <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:ample_iff_loc\">Lemma 3.26</a> next?</p>",
        "id": 292770483,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660143271
    },
    {
        "content": "<p>Yes, that would be great.</p>",
        "id": 292775756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660144883
    },
    {
        "content": "<p>Note that the numbering was shifted because I removed an intermediate lemma.</p>",
        "id": 292776882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660145272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/292751272\">said</a>:</p>\n<blockquote>\n<p>I'm confused about Lemma 3.6. I thought that Yury did it but I'm not 100% sure</p>\n</blockquote>\n<p>I managed to find it, Yury indeed did it in <a href=\"https://github.com/leanprover-community/mathlib/pull/15609\">#15609</a>.</p>",
        "id": 292820321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660160320
    },
    {
        "content": "<p>Let me try to summarize the current status, knowing that some numbering changed today:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:updating\">Properties of updating</a> is currently not claimed by anyone. The definition of smooth open embedding is already there in <code>src/global/smooth_embedding.lean</code> and the required proof is all topology, not differential geometry. </li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:nice_atlas\">Existence of a nice atlas</a> is claimed by Oliver and almost done</li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:param_trick\">The parametricity lemma</a> is available. Yury asked whether definitions are there but I don't think he did anything.</li>\n<li><a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:ample_iff_loc\">The localization of a ample relation is ample</a> is claimed by Floris.</li>\n</ul>",
        "id": 292822211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660161060
    },
    {
        "content": "<p>Thanks, this is really helpful!</p>",
        "id": 292827468,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660163195
    },
    {
        "content": "<p><code>lem:ample_iff_loc</code> turned out to be easy. I'll take a look at the parametricity lemma next.</p>",
        "id": 293080507,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660299915
    },
    {
        "content": "<p>I've finished various other non-Sphere-Eversion bits and pieces so while I'm waiting for <a href=\"https://github.com/leanprover-community/mathlib/pull/15980\">#15980</a> to land in Mathlib I'm going to start on <code>lem:updating</code> this morning.</p>",
        "id": 293476814,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660548877
    },
    {
        "content": "<p>Today I pushed proofs of <code>lem:nice_atlas</code> and <code>lem:updating</code> (after adding the definition <code>def:update</code> yesterday).</p>",
        "id": 293774827,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660674150
    },
    {
        "content": "<p>I also changed the informal statement of <code>lem:updating</code> in the blueprint slightly (the main point being that I dropped the second compact set <code>L</code> from the input since it did nothing).</p>",
        "id": 293775127,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660674247
    },
    {
        "content": "<p>Amazing, thank you very much!</p>",
        "id": 293784305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660677621
    },
    {
        "content": "<p>Cool! Looks like you're now rapidly converging!</p>",
        "id": 293839682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660716183
    },
    {
        "content": "<p>I'll start work on <code>lem:localisation_stability</code> later this morning.</p>",
        "id": 293855344,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660725050
    },
    {
        "content": "<p>Happily <code>lem:localisation_stability</code> turned out to be trivial: now done!</p>",
        "id": 293873356,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660733462
    },
    {
        "content": "<p>I did have to tweak the <code>def:localisation_data</code> and <code>lem:ex_localisation</code> but I think all correct now.</p>",
        "id": 293873514,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660733532
    },
    {
        "content": "<p>So what is even left?</p>",
        "id": 293877955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660735483
    },
    {
        "content": "<p>It sounds to me like half of the non-green things at <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph_document.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph_document.html</a> are actually green already?</p>",
        "id": 293878014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660735506
    },
    {
        "content": "<p>I think that there are five nodes (four lemmas and a definition) which would turn green if we updated the dependency graph now. I believe the following is what remains:</p>\n<ol>\n<li><code>lem:param_trick</code> [I think Floris has claimed this]</li>\n<li><code>lem:param_for_free</code></li>\n<li><code>lem:ample_parameter</code></li>\n<li><code>lem:improve_htpy_loc</code></li>\n<li><code>lem:open_ample_immersion</code></li>\n<li><code>thm:open_ample</code></li>\n<li><code>thm:sphere_eversion</code></li>\n</ol>",
        "id": 293882000,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660737218
    },
    {
        "content": "<p>A lot of the lemmas that remained were indeed meant to be easy (including <code>lem:localisation_stability</code>), but they still require some work and it's very nice to have them done. And <code>lem:updating</code> still had some content.</p>",
        "id": 293890079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660740580
    },
    {
        "content": "<p>There are also sorries in the project currently, and I don't really know what is their status.</p>",
        "id": 293890274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660740652
    },
    {
        "content": "<p>Yeah I picked off a few easy ones. I'm going to take a day or so to do a little Mathlib work. When I resume on this project, I'll start by surveying the <code>sorry</code>s not captured in the dependency graph.</p>",
        "id": 293890499,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660740726
    },
    {
        "content": "<p>I'm very happy this is moving. I still think we can finish before the end of summer.</p>",
        "id": 293890642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660740785
    },
    {
        "content": "<p>We can definitely finish soon. When does the Summer end?</p>",
        "id": 293890712,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660740807
    },
    {
        "content": "<p>I'll answer this question when we'll be done</p>",
        "id": 293890772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660740838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/293890274\">said</a>:</p>\n<blockquote>\n<p>There are also sorries in the project currently, and I don't really know what is their status.</p>\n</blockquote>\n<p>I looked over these earlier today. Excluding <code>sorry</code>s in the <code>unused</code> folder we currently have the following <code>sorry</code> counts:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>src/to_mathlib/analysis/normed_space/operator_norm.lean:1\nsrc/to_mathlib/geometry/manifold/misc_manifold.lean:1\nsrc/global/relation.lean:8\nsrc/global/one_jet_sec.lean:1\nsrc/global/one_jet_bundle.lean:4\nsrc/global/immersion.lean:5\nsrc/global/gromov.lean:2\n</code></pre></div>\n<p>Some will definitely not be needed and for others there is some uncertainty about whether they will ultimately be needed. Also at least three are already captured in our dependency graph.</p>",
        "id": 294869304,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661262580
    },
    {
        "content": "<p>After this I convinced myself that the best thing I could do would be to start work on the lemma <code>lem:improve_htpy_loc</code> so I have just pushed <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/50b32a92cfb19488f906fed7a1aafb66d1d45c4e\">a commit</a> adding its formal statement.</p>",
        "id": 294869534,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661262649
    },
    {
        "content": "<p>I fixed an apparent typo in the Blueprint as part of that commit. The statement of this lemma is quite complicated so hopefully I got it right. I'll start working on the proof later this afternoon so I suppose I'll find out as I work on that over the next day or two.</p>",
        "id": 294869820,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661262736
    },
    {
        "content": "<p>I think the easiest remaining node in the dependency graph might be <code>lem:open_ample_immersion</code> if anyone is interested in a target.</p>",
        "id": 294870268,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661262888
    },
    {
        "content": "<p>Thank you very much Oliver. I'm sorry I see this so late.</p>",
        "id": 294931304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661282159
    },
    {
        "content": "<p>The story of <code>lem:improve_htpy_loc</code> is that I thought that Chapter 2 was finished but then when I tried to add LaTeX details in Chapter 3 I realized what I wrote in Chapter 2 was not strong enough. So if you aren't too far into that lemma it would probably make more sense to postpone proving it until we make sure we can actually use it in the <a href=\"https://github.com/leanprover-community/sphere-eversion//blob/65fd7bf8cb9448abe84531efc04e834c6fb09779/src/global/gromov.lean#L35\">main theorem</a>.</p>",
        "id": 294931693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661282314
    },
    {
        "content": "<p>OK no problem! I'll pick something else tomorrow morning.</p>",
        "id": 294948372,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661289717
    },
    {
        "content": "<p>Picking the main theorem would be nice for instance <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 294948461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661289741
    },
    {
        "content": "<p>Indeed! Let's see.</p>",
        "id": 294948517,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661289780
    },
    {
        "content": "<p>I started working on <code>lem:open_ample_immersion</code> this morning. I hope to finish later today.</p>",
        "id": 295220036,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661431809
    },
    {
        "content": "<p>If anyone is looking for a useful self-contained lemma then I think closing <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/4b4a78cd5c7c3081f32aaa4bb98e548260e0c0cb/src/global/immersion.lean#L57\">this sorry</a> would make a good target. It is the statement that the immersion relation for smooth maps between manifolds is open.</p>",
        "id": 295220406,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661431966
    },
    {
        "content": "<p>(It's just a globalisation of the fact that the set of injective maps is open in the space of linear maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(E, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span>.)</p>",
        "id": 295220536,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661432022
    },
    {
        "content": "<p>Thanks Oliver. Here is a global update:</p>\n<ul>\n<li>Oliver is working on <code>lem:open_ample_immersion</code></li>\n<li>Floris will soon state a more general version of Gromov theorem than what is currently in the Lean code base. He needs to include the relative version and C⁰-close version</li>\n<li>Floris will work on parametricity for free (this is a set of three nodes in the graph: <code>param_trick</code>, <code>param_for_free</code> and <code>ample_parameter</code>)</li>\n<li>Patrick will sorry the homotopy of formal immersions for sphere eversion, waiting to hear from Heather's rotations and deduce existence of sphere eversion from the statement of Gromov's theorem</li>\n<li>Nobody should work on proving <code>improve_htpy_loc</code> until we made sure it's enough to prove Gromov's theorem</li>\n<li>Gromov's theorem isn't assigned yet, but note that is can be cut in half: use parametricity for free to get rid of parameters and do the actual work.</li>\n</ul>",
        "id": 295242328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661438482
    },
    {
        "content": "<p>I just pushed a proof of <code>lem:open_ample_immersion</code>. In fact, following a suggestion from the blueprint, I really just took the existing proof of <code>lem:open_ample_immersion_loc</code>, split it up a bit and used that. I then also removed <code>lem:open_ample_immersion_loc</code> entirely.</p>",
        "id": 295266894,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661445225
    },
    {
        "content": "<p>I just bumped mathlib.</p>",
        "id": 295377493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661503364
    },
    {
        "content": "<p>Today I'm going to work on proving that the (global) immersion relation is open. (We have that it is ample as of yesterday.)</p>",
        "id": 295378222,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661503758
    },
    {
        "content": "<p>Very good.</p>",
        "id": 295378272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661503792
    },
    {
        "content": "<p>I'm working in <code>global/immersion.lean</code> right now.</p>",
        "id": 295378337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661503810
    },
    {
        "content": "<p>Is it worth it to regenerate the dependency graph for enthusiastic onlookers like me?</p>",
        "id": 295378478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661503874
    },
    {
        "content": "<p>Sadly it's basically up to date.</p>",
        "id": 295378617,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661503945
    },
    {
        "content": "<p>The graph is up to date</p>",
        "id": 295378622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661503947
    },
    {
        "content": "<p>You're confused because Oliver wrote yesterday he proved <code>lem:open_ample_immersion</code> but that was a typo, he proved half of it (the non-trivial half on paper).</p>",
        "id": 295378750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661504036
    },
    {
        "content": "<p>Aha</p>",
        "id": 295378826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661504057
    },
    {
        "content": "<p>That's right. I'm just about to push a commit which will clarify this.</p>",
        "id": 295378898,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661504086
    },
    {
        "content": "<p>Actually I can't proceed further until Floris pushes his fix to Gromov's theorem statement.</p>",
        "id": 295379033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661504150
    },
    {
        "content": "<p>So I'll wait for Oliver's push then push my thing in the same file and do something else until Floris pushes</p>",
        "id": 295379133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661504188
    },
    {
        "content": "<p>I should push in about nine minutes. Just waiting on a build after pulling the Mathlib bump.</p>",
        "id": 295379170,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661504209
    },
    {
        "content": "<p>OK the build was slow but I have now pushed.</p>",
        "id": 295380417,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661504732
    },
    {
        "content": "<p>That was expected, the bump changed files very low in the project hierarchy because the main change was Yury replacing <code>with_top Nat</code> by <code>enat</code> everywhere in calculus.</p>",
        "id": 295380577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661504781
    },
    {
        "content": "<p>I pushed a tiny commit and I'll wait for Floris now.</p>",
        "id": 295380664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661504826
    },
    {
        "content": "<p>I pushed the fix. Sorry for the delay.</p>",
        "id": 295410913,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661516284
    },
    {
        "content": "<p>No problem. I did some admin in the mean time.</p>",
        "id": 295411251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661516407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> do we agree that you now work on parametricity for free?</p>",
        "id": 295415613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661517935
    },
    {
        "content": "<p>Yes, I'm working on that and param trick now!</p>",
        "id": 295415804,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661517991
    },
    {
        "content": "<p>Great!</p>",
        "id": 295415841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661518003
    },
    {
        "content": "<p>Can I propose that we try to use variable names indicating their type? In places like <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/global/relation.lean#L150\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/global/relation.lean#L150</a> I find it confusing that we have three manifolds <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and lots of <code>∀ (s : P) (x : M)</code>, especially the <code>x : M</code> when the next manifold is called <code>X</code></p>",
        "id": 295425450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661521333
    },
    {
        "content": "<p>I understand. <br>\nIt is a bit tricky to do this consistently, since we sometimes want the codomain manifold to be a <code>topological_space</code> and sometimes to be a <code>metric_space</code>, which means we probably want to use different letters for them.<br>\nI have been trying (since yesterday) to use <code>s</code>, <code>t</code> and <code>x</code> for the variable names following the conventions in chapters 1 &amp; 2:</p>\n<ul>\n<li><code>x</code> is an element in the (domain) space we're considering</li>\n<li><code>s</code> is a parameter</li>\n<li><code>t</code> is the variable indicating how far you are along a homotopy</li>\n</ul>\n<p>Would you be happy/happier if I replace <code>X</code> by <code>M''</code> or <code>M₂</code>?</p>",
        "id": 295426482,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661521619
    },
    {
        "content": "<p>I never claimed the blueprint was consistent <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 295426614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661521659
    },
    {
        "content": "<p>In fact it would be even better to make the union of blueprint and Lean code consistent.</p>",
        "id": 295426761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661521693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> could you push as soon as you have definitions and statements for the parametricity related stuff? It would allow me to start working on Gromov's theorem.</p>",
        "id": 295841860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661778772
    },
    {
        "content": "<p>What definitions do you need? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ψ</mi></mrow><annotation encoding=\"application/x-tex\">\\Psi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ψ</span></span></span></span> is <code>bundle_snd</code>, the section <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>F</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> is <code>F.uncurry</code> (where <code>F</code> is a <code>family_one_jet_sec</code>) and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"script\">R</mi><mi>P</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathcal{R}^P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span></span></span></span> is <code>R.relativize IP P</code></p>",
        "id": 295845144,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661779914
    },
    {
        "content": "<p>Feel free to rename any of these definitions</p>",
        "id": 295845606,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661780067
    },
    {
        "content": "<p>I think we have enough definitions indeed. So we need statements.</p>",
        "id": 295846989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661780562
    },
    {
        "content": "<p>Those are also already there. See blueprint. (<code>ample_parameter</code> in the blueprint is <code>rel_mfld.ample.relativize</code>.)</p>",
        "id": 295847415,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661780702
    },
    {
        "content": "<p>I'm sorry, I've doing administration while waiting for answers instead of looking at the project code. I guess I no longer have any excuse to do administration instead of working on the project.</p>",
        "id": 295847657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661780769
    },
    {
        "content": "<p>I guess I haven't stated <code>param_for_free</code> yet. If you already need that, I can try to prioritize it.</p>",
        "id": 295847699,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661780790
    },
    {
        "content": "<p>Oh but the graph isn't updated. Stated stuff should have green outlines.</p>",
        "id": 295847866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661780861
    },
    {
        "content": "<p>Yes, prioritizing stating <code>param_for_free</code> would be great</p>",
        "id": 295847917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661780875
    },
    {
        "content": "<p>I'll try to update the graph in the mean time.</p>",
        "id": 295848006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661780897
    },
    {
        "content": "<p>You're right, I didn't update the graph yet. I'll prioritize it.</p>",
        "id": 295848166,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661780961
    },
    {
        "content": "<p>Compiling the blueprint reveals that <code>param_for_free</code> is stated as <code>rel_mfld.relativize_satisfies_h_principle</code>!</p>",
        "id": 295849199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661781317
    },
    {
        "content": "<p>Actually the graph currently claims that <em>everything</em> is stated! Of course it doesn't mean we won't add 50 lemmas...</p>",
        "id": 295849357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661781369
    },
    {
        "content": "<p>Yes, I realized that I had already (tried) to state it. I accidentally stated it as an <code>iff</code> though, but I should have stated it as follows. I will push</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- This might need some additional assumptions or other modifications. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rel_mfld.satisfies_h_principle.satisfies_h_principle_with</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">rel_mfld</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">IX</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R.relativize</span> <span class=\"n\">IP</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">satisfies_h_principle</span> <span class=\"o\">(</span><span class=\"n\">C₁</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"n\">x.2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">R.satisfies_h_principle_with</span> <span class=\"n\">IP</span> <span class=\"n\">C₁</span> <span class=\"n\">C₂</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 295849383,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661781377
    },
    {
        "content": "<p>Working on Gromov's theorem will allow to test all those statements.</p>",
        "id": 295849469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661781418
    },
    {
        "content": "<p>Tell me when you push and I'll recompile the blueprint</p>",
        "id": 295849615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661781465
    },
    {
        "content": "<p>currently compiling to check if I broke anything...</p>",
        "id": 295849963,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661781568
    },
    {
        "content": "<p>Damn, I think I messed up in <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/04cb6032f9a8f367c4022d21b544eba496cedce6\">04cb6032f9</a>. I asked Yury to prove a lemma from the blueprint and he proved something that looked simpler. It was the middle of my vacations so I didn't check and assumed my version was overcomplicated without a purpose. But now that I reading back the proof of Gromov's theorem I remember why my complicated version was needed.</p>",
        "id": 295851089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661781942
    },
    {
        "content": "<p>The issue is that assumptions in Yury's version are too strong.</p>",
        "id": 295851259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661781988
    },
    {
        "content": "<p>And I was too quickly to happily believe I overcomplicated things.</p>",
        "id": 295851357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661782019
    },
    {
        "content": "<p>This shouldn't be too bad to fix.</p>",
        "id": 295851436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661782045
    },
    {
        "content": "<p>Oh, that is very unfortunate...</p>",
        "id": 295851481,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661782059
    },
    {
        "content": "<p>I pushed, btw</p>",
        "id": 295851491,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661782062
    },
    {
        "content": "<p>Btw, in the current online version of the blueprint, I noticed that <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#def:convenient_indexing\">https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#def:convenient_indexing</a> is disjoint from the rest of the graph.</p>",
        "id": 295851878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661782180
    },
    {
        "content": "<p>That's very much related to the story I was just telling</p>",
        "id": 295851981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661782209
    },
    {
        "content": "<p>I compiled the blueprint and pushed.</p>",
        "id": 295852438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661782334
    },
    {
        "content": "<p>Did you compile against an unpushed commit? The <code>lean</code> links in the dependency graph reference <code>4a1d60ccffec5b40c83aadfc5f779fe74147997b</code> which seems to be missing.</p>",
        "id": 295853012,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661782469
    },
    {
        "content": "<p>Oh, I see what happened <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 295853102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661782502
    },
    {
        "content": "<p>I'll fix it</p>",
        "id": 295853117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661782506
    },
    {
        "content": "<p>Graph is looking good though!</p>",
        "id": 295853134,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661782508
    },
    {
        "content": "<p>TODO: find a way to hide the <code>(is_closed_empty : is_closed (∅ : set empty))</code> I just added to the project.</p>",
        "id": 295855208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661783140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> do you confirm we don't have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rel_mfld.is_open_relativize</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">EP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_7</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">HP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_8</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_9</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">EX</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_10</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">HX</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_11</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_12</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">EP</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">EP</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">HP</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">IP</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"n\">ℝ</span> <span class=\"n\">EP</span> <span class=\"n\">HP</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">HP</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">IP</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">EX</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">EX</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">HX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">IX</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"n\">ℝ</span> <span class=\"n\">EX</span> <span class=\"n\">HX</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">HX</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">IX</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">rel_mfld</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">IX</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">rel_mfld.relativize</span> <span class=\"n\">IP</span> <span class=\"n\">P</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 295856364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661783492
    },
    {
        "content": "<p>I pushed anyway, with this statement sorried.</p>",
        "id": 295857309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661783813
    },
    {
        "content": "<p>That is correct.<br>\nIt would require continuity of <code>bundle_snd</code>, which shouldn't be too hard (but probably we should prove smoothness first).</p>",
        "id": 295857360,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661783833
    },
    {
        "content": "<p>Feel free to add a bunch of sorry'd lemmas like that, they should be easy to knock down.</p>",
        "id": 295857434,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661783871
    },
    {
        "content": "<p>I can confirm that the properties stated for <code>relativize</code> (including the one I just wrote) are enough to <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/78c26e31b68b02e5a47a0f319db35f906f1f8999/src/global/gromov.lean#L39-L51\">deduce</a> the parametric h-principle from the non-parametric one.</p>",
        "id": 295857542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661783899
    },
    {
        "content": "<p>It's becoming harder to avoid confronting the last big proof. Luckily I need to go away for a little while (my family will return from vacations tonight and I need to prepare a bit).</p>",
        "id": 295857823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661784003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/295855208\">said</a>:</p>\n<blockquote>\n<p>TODO: find a way to hide the <code>(is_closed_empty : is_closed (∅ : set empty))</code> I just added to the project.</p>\n</blockquote>\n<p>This is hilarious. Sometimes Lean goes too far in allowing us to prove things without thinking. Lean was asking me to prove some subset  of the parameter space was closed while deducing parametric Gromov from the non-parametric one. So I thought: there is no parameter here so this must be the empty set of the empty type. But actually this was the copy-paste typo that we noticed the other day in the statement but nobody fixed. So that closed set wasn't used at all and Lean would have been happy with any closed set in any topological space! And my vague semi-conscious rationalization wasn't even consistent: I should have written <code>unit</code> instead of <code>empty</code> since the non-parametric situation correspond to a parameter space which is <code>unit</code>, not <code>empty</code>...</p>",
        "id": 295929549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787063
    },
    {
        "content": "<p>Ha!</p>",
        "id": 295929668,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661787109
    },
    {
        "content": "<p>All is well anyway.</p>",
        "id": 295929702,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661787119
    },
    {
        "content": "<p>Now I need to find and kill anyone who saw that, in order to protect my academic reputation.</p>",
        "id": 295929831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787143
    },
    {
        "content": "<p>You just needed an initial object for any old category.</p>",
        "id": 295929936,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661787175
    },
    {
        "content": "<p>Your reputation is very safe IMHO.</p>",
        "id": 295929992,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661787191
    },
    {
        "content": "<p>My only consolation is that I saw the issue as soon as put <code>begin/end</code> for non-parametric Gromov and looked at the tactic state.</p>",
        "id": 295930047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787212
    },
    {
        "content": "<p>Speaking of tactic state, I can't wait for the magic tricks Lean 4 will use to turn</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">H</span>\n<span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span>\n<span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">_inst_4</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_5</span><span class=\"o\">:</span> <span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_6</span><span class=\"o\">:</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">manifold</span>\n</code></pre></div>",
        "id": 295934071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787291
    },
    {
        "content": "<p>And now Lean seeks revenge and asks me to prove <code>X</code> is non-empty.</p>",
        "id": 295936141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787663
    },
    {
        "content": "<p>I'm pretty sure the blueprint version of <code>std_localisation_data</code> does not have any non-emptyness assumption, but I guess Lean may be right anyway.</p>",
        "id": 295940180,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787786
    },
    {
        "content": "<p>This could be my fault. I <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/98aa3670bbd40556bcb02441df10b44d42519a31/src/global/smooth_embedding.lean#L313\">did this</a> for convenience.</p>",
        "id": 295940588,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661787904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> could you have a look at <code>global/localization_data.lean</code> and figure out whether those nonempty assumptions are really needed? There are also several linting errors in that file.</p>",
        "id": 295940600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787907
    },
    {
        "content": "<p>I don't mind proving a preliminary lemma saying the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span>-principle holds for empty manifold (or  additing that assumption everywhere if it doesn't, who knows?) but I'd rather avoid it if possible.</p>",
        "id": 295940778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787962
    },
    {
        "content": "<p>Our comments crossed. I'll take a look. I'm very close to turning an ellipse green though. Would you like me to look now?</p>",
        "id": 295940801,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661787964
    },
    {
        "content": "<p>There is no emergency, I can add the assumption to Gromov's theorem for now.</p>",
        "id": 295940914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661787989
    },
    {
        "content": "<p>OK I'll take it up as soon as I've finished my goal. If that means excising it from the statement of Gromov's theorem, then I'll do that too.</p>",
        "id": 295941015,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661788021
    },
    {
        "content": "<p>I'm editing Gromov's theorem so please don't touch it yet. If you could simply investigate whether we can remove nonempty from the localisation file it would be great.</p>",
        "id": 295941851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661788249
    },
    {
        "content": "<p>I also noticed that Gromov's theorem misses finite dimensionality assumptions. This didn't occur to me because manifold implies finite dimension in my mind.</p>",
        "id": 295942023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661788288
    },
    {
        "content": "<p>I'm wrestling with some annoying linear algebra and I doubt I'll get to this <code>nonempty M</code> stuff for at least an hour.</p>",
        "id": 295942312,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661788368
    },
    {
        "content": "<p>No problem</p>",
        "id": 295942339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661788379
    },
    {
        "content": "<p>I'm adding assumptions to the theorem for now</p>",
        "id": 295942392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661788395
    },
    {
        "content": "<p>There are lots of assumptions to add anyway because all the localization stuff assume finite dimensional manifolds without boundary.</p>",
        "id": 295943566,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661788765
    },
    {
        "content": "<p>And this totally makes sense, this is the default meaning of manifold and this should be enough for us.</p>",
        "id": 295943721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661788808
    },
    {
        "content": "<p>And of course the blueprint is totally inconsistent here.</p>",
        "id": 295943842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661788846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/295378750\">said</a>:</p>\n<blockquote>\n<p>You're confused because Oliver wrote yesterday he proved <code>lem:open_ample_immersion</code> but that was a typo, he proved half of it (the non-trivial half on paper).</p>\n</blockquote>\n<p><code>lem:open_ample_immersion</code> is now genuinely sorry-free.</p>",
        "id": 295954338,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661792060
    },
    {
        "content": "<p>I'm being called to dinner now. I'll tidy up the <code>nonempty M</code> issue this evening if I can find some time or else I'll take it up tomorrow morning.</p>",
        "id": 295954655,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661792161
    },
    {
        "content": "<p>Great!</p>",
        "id": 295955080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661792286
    },
    {
        "content": "<p>I just finished the lemma <code>param_trick</code>. <em>By far</em> the hardest part was showing that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>F</mi><mo>ˉ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\bar F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8201em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span><span style=\"top:-3.2523em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1667em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span></span></span></span> is smooth.</p>",
        "id": 296175317,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661880182
    },
    {
        "content": "<p>link: <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:param_trick\">https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:param_trick</a></p>",
        "id": 296175352,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661880197
    },
    {
        "content": "<p>Great!</p>",
        "id": 296180788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661881796
    },
    {
        "content": "<p>It's very sad to read that obvious smoothness proofs are still so hard, but very good to have this lemma!</p>",
        "id": 296180964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661881839
    },
    {
        "content": "<p>I'm currently fighting off-by-one discrepancies when piecing various lemmas together...</p>",
        "id": 296181070,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661881875
    },
    {
        "content": "<p>There is no problem at all but it's very time consuming and annoying</p>",
        "id": 296181130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661881897
    },
    {
        "content": "<p>The main problem was the library building part of it; I had to prove that the derivative (as a continuous linear map) of a smooth map between manifolds is smooth in the point where you take the derivative. And then I had to generalize that to partial derivatives. I think it makes more sense that it is hard if you have to do library building as a part of it.</p>",
        "id": 296197591,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661887148
    },
    {
        "content": "<p>I also finished <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#lem:ample_parameter\"><code>ample_parameter</code></a>, so the 4 hour old blueprint is 3 lemmas behind <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 296197772,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661887210
    },
    {
        "content": "<p>Wonderful!</p>",
        "id": 296212298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661889830
    },
    {
        "content": "<p>Are those 3 lemmas fully sorry-free or do they still depend on some library building sorries?</p>",
        "id": 296212595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661889941
    },
    {
        "content": "<p>The 2 lemmas I pushed are fully sorry-free, I checked with <code>#print axioms</code>.</p>",
        "id": 296212661,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661889964
    },
    {
        "content": "<p>Do you have a clear view of where the current sorries are used?</p>",
        "id": 296212765,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661890019
    },
    {
        "content": "<p>If some are not used then it would be nice to comment them out.</p>",
        "id": 296212851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661890057
    },
    {
        "content": "<p>I've tried to put a comment near most of my recent sorry's when I think we're likely not using them (and also replacing <code>sorry</code> by <code>admit</code> so we can count by word search). I can go over the sorry's tomorrow to see which ones we are likely not using.<br>\nI believe there are not much sorry's in the files I've been recently using.</p>",
        "id": 296213355,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661890274
    },
    {
        "content": "<p>I think <code>htpy_one_jet_sec.unlocalize</code> in <code>global/relation</code> is yours? Will we need that?</p>",
        "id": 296213458,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661890323
    },
    {
        "content": "<p>About unlocalize, we should find out pretty soon</p>",
        "id": 296213873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661890512
    },
    {
        "content": "<p>But clearly if it is useful then it will be at the very end.</p>",
        "id": 296213904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661890525
    },
    {
        "content": "<p>What about one_jet_bundle_model_space_chart_at and one_jet_bundle_model_space_homeomorph?</p>",
        "id": 296214601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661890780
    },
    {
        "content": "<p>They are probably stuff I wrote at the very beginning of Chapter 3 and maybe there are n longer relevant</p>",
        "id": 296214678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661890804
    },
    {
        "content": "<p>As unlocalize, they were meant to use allow using Chapter 2 in Chapter 3.</p>",
        "id": 296214842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661890870
    },
    {
        "content": "<p>Yeah, I haven't touched them, and I don't to what extend we need those to glue chapter 2 to chapter 3.</p>",
        "id": 296216225,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661891417
    },
    {
        "content": "<p>Ok, let's wait.</p>",
        "id": 296216549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661891556
    },
    {
        "content": "<p>In the mean time the graph got updated: <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph_document.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph_document.html</a></p>",
        "id": 296216644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661891595
    },
    {
        "content": "<p>It's starting to look good. Too bad nice_atlas went in the wrong direction.</p>",
        "id": 296216681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661891612
    },
    {
        "content": "<p>I'm done for today. I just push <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/e7e165e59b366466e620d5ad42c513664adb6712\">https://github.com/leanprover-community/sphere-eversion/commit/e7e165e59b366466e620d5ad42c513664adb6712</a> which features actually starting the main big proof.</p>",
        "id": 296221056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661893493
    },
    {
        "content": "<p>Things are going pretty smoothly so far, but it's always painful to have a local context with more than 60 items.</p>",
        "id": 296221342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661893602
    },
    {
        "content": "<p>(at least there are only 23 numbered instances, which is way less than the maximum reached when deducing the parametric result from the unparametric one).</p>",
        "id": 296221459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661893658
    },
    {
        "content": "<p>Wow, amazing progress! Congratulations <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span></p>",
        "id": 296224000,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661894837
    },
    {
        "content": "<p>I’ll fix <code>nice_atlas</code> tomorrow. It’s rather messy because I’ve pushed for the quickest way to cater for the two changes but there are absolutely no mathematical issues so I’m confident I can do it tomorrow.</p>",
        "id": 296224396,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661894999
    },
    {
        "content": "<p>I just pushed <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/ba3ab0478213c8d20f3d4829dff54f61ac8217c5\">https://github.com/leanprover-community/sphere-eversion/commit/ba3ab0478213c8d20f3d4829dff54f61ac8217c5</a> to help handling the very large proof states at the end of the project.</p>",
        "id": 296282435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661936212
    },
    {
        "content": "<p>Nice! Would have been useful in LTE as well <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 296282621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661936293
    },
    {
        "content": "<p>This is a customized version of Ed's interactive_expr file from mathlib. It makes sure goals are printed before the local context so that you don't have to scroll to see the goal. And it adds options for permanent tactic state filtering (hacking the trace option framework as usual)</p>",
        "id": 296282635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661936298
    },
    {
        "content": "<p>All this as been possible in Lean 3 forever, but people were too lazy to dive into this (admittedly rather intimidating) file.</p>",
        "id": 296282747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661936354
    },
    {
        "content": "<p>Let me clarify: the big file I added in that commit is a file taken from mathlib with something like 15 added lines</p>",
        "id": 296283127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661936496
    },
    {
        "content": "<p>Filtering, as in <a href=\"/user_uploads/3121/YWw5Jv6PgaMEsdUH8FIrWWkQ/image.png\">this</a>?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YWw5Jv6PgaMEsdUH8FIrWWkQ/image.png\" title=\"this\"><img src=\"/user_uploads/3121/YWw5Jv6PgaMEsdUH8FIrWWkQ/image.png\"></a></div>",
        "id": 296283319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661936568
    },
    {
        "content": "<p>Those aren't persistent, for me.</p>",
        "id": 296283384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661936592
    },
    {
        "content": "<p>Yaël, what you show isn't persistent.</p>",
        "id": 296283446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661936622
    },
    {
        "content": "<p>Ah, so it's being reset when you touch the file?</p>",
        "id": 296283482,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661936640
    },
    {
        "content": "<p>It's much worse, it's reset when you move to the next line of your proof.</p>",
        "id": 296283564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661936657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/296282747\">said</a>:</p>\n<blockquote>\n<p>All this as been possible in Lean 3 forever, but people were too lazy to dive into this (admittedly rather intimidating) file.</p>\n</blockquote>\n<p>Also, <a href=\"https://github.com/leanprover-community/mathlib/pull/15959\">#15959</a> <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 296283609,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661936683
    },
    {
        "content": "<p>What I <strong>really</strong> want is being able to inspect error states. This would have been handy countless times.</p>",
        "id": 296283697,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661936718
    },
    {
        "content": "<p>Now I need to un-train my brain which is asking my right hand to go to the mouse scroll button every time I finish typing a line.</p>",
        "id": 296284115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661936874
    },
    {
        "content": "<p>Oh, the new tactic state view looks very useful!</p>",
        "id": 296286116,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661937700
    },
    {
        "content": "<p>FYI: I'm currently reformulating <code>satisfies_h_principle_with</code>, I'm replacing the <code>{C₁ : set P} {C₂ : set M}</code> with a single set <code>{C : set (P × M)}</code>. The previous phrasing was pretty unnatural.</p>",
        "id": 296326357,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661953030
    },
    {
        "content": "<p>I guess I'll be able to adapt.</p>",
        "id": 296328287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661953633
    },
    {
        "content": "<p>I fixed all current proofs, which was trivial.</p>",
        "id": 296328565,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661953729
    },
    {
        "content": "<p>Did you push? This will surely create conflicts</p>",
        "id": 296329485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661954022
    },
    {
        "content": "<p>I just pushed</p>",
        "id": 296329587,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661954050
    },
    {
        "content": "<p>I'm happy to resolve all conflicts if you push a compiling development to a branch (now or later).</p>",
        "id": 296329654,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661954080
    },
    {
        "content": "<p>I was talking nonsense, this doesn't affect at all the proof I'm working on since I'm working on the non-parametric case.</p>",
        "id": 296330086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661954233
    },
    {
        "content": "<p>Sorry about the noise.</p>",
        "id": 296330117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661954242
    },
    {
        "content": "<p>Does <code>param_for_free</code> still seem doable?</p>",
        "id": 296330449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661954341
    },
    {
        "content": "<p>For casual observers, let me point out the blueprint proof of that lemma is \"This obviously follows from lemma 3.22. \"</p>",
        "id": 296330543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661954371
    },
    {
        "content": "<p>It's doable, but of course, Lemma 3.22 is only part of the work (though hopefully more than half of it).</p>",
        "id": 296335144,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661955720
    },
    {
        "content": "<p>The extra work comes from transforming the homotopy on the product back to a homotopy with parameters.</p>",
        "id": 296335364,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661955780
    },
    {
        "content": "<p>Isn't that (un)curryfication?</p>",
        "id": 296335703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661955877
    },
    {
        "content": "<p>yeah</p>",
        "id": 296335724,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661955887
    },
    {
        "content": "<p>but of course, if you have extra structure, (un)currying might be non-trivial. Lemma 3.22 is uncurrying, and now I have to curry back.</p>",
        "id": 296335916,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661955946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>: shall I change all equalities in <code>rel_mfld.satisfies_h_principle</code> and <code>rel_mfld.satisfies_h_principle_with</code> to equalities of elements in <code>J¹(M, M')</code> (instead of equalities of formal solutions / 1-jet sections)? That might simplify some things.</p>",
        "id": 296337029,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661956261
    },
    {
        "content": "<p>Indeed that will probably simplify things a bit.</p>",
        "id": 296340819,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661957356
    },
    {
        "content": "<p>ok, I'll go ahead</p>",
        "id": 296340909,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661957383
    },
    {
        "content": "<p>I pushed. For the non-parametric version only the first Prop-field changed.</p>",
        "id": 296343049,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661957788
    },
    {
        "content": "<p>Did you check the immersion file is still ok?</p>",
        "id": 296344427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661958114
    },
    {
        "content": "<p>It seems ok</p>",
        "id": 296345917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661958514
    },
    {
        "content": "<p>I just pushed after reaching what was my goal for this morning.</p>",
        "id": 296369010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661960487
    },
    {
        "content": "<p>I did the last paragraph of the main theorem:</p>\n<blockquote>\n<p>Now that the inductive construction is completed, we apply Lemma 3.9 to make sure our sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is locally ultimately constant, hence it converges pointwise to a smooth homotopy relative to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and ending at a holonomic section of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\">R</span></span></span></span>. </p>\n</blockquote>\n<p>which is slightly less than 100 lines in Lean.</p>",
        "id": 296369438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661960604
    },
    {
        "content": "<p>But I had to make some change to what I assumed from the inductive construction. One change was clearly correcting a typo but another one has some content, I'll need to think a bit.</p>",
        "id": 296369721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661960678
    },
    {
        "content": "<p>But I only have 12 minutes now so I'll rather remove a tiny sorry I just introduced.</p>",
        "id": 296369831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661960712
    },
    {
        "content": "<p>Ok I proved it and added it to <code>to_mathlib/topology/misc.lean</code> which is now 644 lines long... <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 296373100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661961160
    },
    {
        "content": "<p>Note: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bUnion_mono\">docs#set.bUnion_mono</a> exists.</p>",
        "id": 296373639,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661961320
    },
    {
        "content": "<p>And I'm doing even worse: I have a few tiny topology lemmas currently polluting the relation file <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 296373891,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661961385
    },
    {
        "content": "<p>Oh, I'm also polluting.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">univ_prod_inter_univ_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is really properly a part of differential topology.</p>",
        "id": 296374230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661961474
    },
    {
        "content": "<p>that checks out ^^</p>",
        "id": 296374348,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661961503
    },
    {
        "content": "<p>I pushed and I'll move to admin and then go back home. I don't know yet whether I'll have time for the project tonight.</p>",
        "id": 296375904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661961653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/295940600\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> could you have a look at <code>global/localization_data.lean</code> and figure out whether those nonempty assumptions are really needed? There are also several linting errors in that file.</p>\n</blockquote>\n<p>I finally had time to check this. Unfortunately these <code>nonempty</code> instances <em>are</em> necessary because <code>index_type</code> always has at least one element. Thus for example <code>nice_atlas</code> demands that there is at least one embedding of <code>F</code> into <code>M</code> but <code>F</code> always contains <code>0</code> and so is non-empty and thus <code>M</code> must be also.</p>",
        "id": 296647685,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662048147
    },
    {
        "content": "<p>The way to fix this would be to fix this deficiency in <code>index_type</code> but given that you have already suffered one round of off-by-one-ness pain for indexing, I doubt it's worth it for now.</p>",
        "id": 296647973,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662048243
    },
    {
        "content": "<p>How hard would it be to prove the main theorem assuming <code>is_empty M</code>? Can't be that hard, I hope?</p>",
        "id": 296648642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662048460
    },
    {
        "content": "<p>Of course in the worse case scenario we can simply start the proof with a case disjunction according to whether M is empty or not, but it feels a bit silly.</p>",
        "id": 296650404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662049002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/296647973\">said</a>:</p>\n<blockquote>\n<p>The way to fix this would be to fix this deficiency in <code>index_type</code> but given that you have already suffered one round of off-by-one-ness pain for indexing, I doubt it's worth it for now.</p>\n</blockquote>\n<p>Guess what? Today I suffered back and partly reverted yesterday's change of mind.</p>",
        "id": 296650497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662049038
    },
    {
        "content": "<p>Life is so much easier on paper or blackboard.</p>",
        "id": 296650538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662049052
    },
    {
        "content": "<p>Today had a lot more admin and off-by-one suffering than I hoped for, but I'm back to a stable situation (I just pushed). Now I hope the inductive construction is really setup.</p>",
        "id": 296650745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662049111
    },
    {
        "content": "<p>I need to go back home now (and I'm too hungry to Lean anyway), but I'll have at least one more hour tonight.</p>",
        "id": 296651071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662049213
    },
    {
        "content": "<p>It's only 18:20!!</p>",
        "id": 296651237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662049274
    },
    {
        "content": "<p>I have 25 minutes biking and then I need to cook</p>",
        "id": 296651559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662049383
    },
    {
        "content": "<p>Today was a <em>very</em> long day... But I did finish <code>param_for_free</code> and updated the blueprint.<br>\nNow I also need to go home :-)</p>",
        "id": 296679629,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662058275
    },
    {
        "content": "<p>Great! Thank you very much for your perseverance!</p>",
        "id": 296682004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662059042
    },
    {
        "content": "<p>Only three dependency graph nodes to go! One is <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> rotation project, one is chapter two coming back for an encore and the last one is Gromov's theorem for open ample relations (aka the whole project, but we are pretty close).</p>",
        "id": 296682862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662059320
    },
    {
        "content": "<p>Nooooo, the <a href=\"https://github.com/leanprover-community/sphere-eversion//blob/707b0d1de8f5634f0d47627d68b1c9765b452ef2/src/global/smooth_embedding.lean#L400\">definition of updating</a> is also given in the restricted context of <code>smooth_manifold_with_corners 𝓘(𝕜, EX) X</code></p>",
        "id": 296690582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662062342
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 296690608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662062356
    },
    {
        "content": "<p>We really need to put a huge warning in the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/model_with_corners_self\">docs#model_with_corners_self</a> and the corresponding module docstring.</p>",
        "id": 296690805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662062416
    },
    {
        "content": "<p>Ha Ha! Generalizing in math is <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/d1f5ce303f3d6c382ddfac95b093693ca2939429\">so easy</a>!</p>",
        "id": 296692310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662063064
    },
    {
        "content": "<p>It even has some content, the new definition and its companion 40 lines long lemma now work with manifolds with boundaries and corners.</p>",
        "id": 296692419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662063122
    },
    {
        "content": "<p>I recommend Oliver to do more copy-pasting. Copy-pasting variable lists (or lemma statements) of similar situations is a good way to get the formulation of a particular concept right.<br>\nI expected that <code>[smooth_manifold_with_corners 𝓘(𝕜, E)]</code> would not occur in mathlib at all, but actually I am wrong: <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> uses <code>[smooth_manifold_with_corners 𝓘(ℂ, E) M]</code> once in <a href=\"https://tqft.net/mathlib/geometry/manifold/complex\">file#geometry/manifold/complex</a>, which likely should also be generalized.</p>",
        "id": 296693297,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662063519
    },
    {
        "content": "<p>I agree this is a good tip (which I will follow) and I did formalise the statement of <code>nice_update_of_eq_outside_compact</code> (which was fortunately easy to generalise) but in my defence, I did <em>not</em> formalise the original statement of <code>nice_atlas</code>.</p>",
        "id": 296694211,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662063951
    },
    {
        "content": "<p>Super job on <code>param_for_free</code> btw!</p>",
        "id": 296694363,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662064003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/global/relation.lean#L93\">this docstring</a> is outdated, right?</p>",
        "id": 296694409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662064034
    },
    {
        "content": "<p>I'm being told I must help with packing now. See you all in a week!</p>",
        "id": 296694496,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662064069
    },
    {
        "content": "<p>Have good vacations!</p>",
        "id": 296694603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662064107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> That's fair; and if you copied/mimicked these variables from the nice_atlas formulation, then you cannot be faulted for that at all. Good vacations!</p>",
        "id": 296694843,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662064215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/296694409\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/global/relation.lean#L93\">this docstring</a> is outdated, right?</p>\n</blockquote>\n<p>Yes, that is correct</p>",
        "id": 296694860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662064228
    },
    {
        "content": "<p>I'd like to make clear I wasn't \"faulting\" anyone <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 296694968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662064279
    },
    {
        "content": "<p>(although mathematically it might still be correct, since 100% of a construction is still a part of a construction <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 296695000,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662064302
    },
    {
        "content": "<p>I think you're missing a negation in your last message?</p>",
        "id": 296695035,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662064322
    },
    {
        "content": "<p>And the dependency graph makes it very clear that we were expecting impedance mismatch exactly here. This node has 10 in-going edges!</p>",
        "id": 296695241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662064414
    },
    {
        "content": "<p>I pushed a commit that will create conflict so please pull. I split off parametricity for free from the relation file.</p>",
        "id": 296696948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662065196
    },
    {
        "content": "<p>I reach the first point where I see <code>rel_loc.jet_sec EM EX</code> in the main proof!</p>",
        "id": 296700969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662066853
    },
    {
        "content": "<p>This mean the central object of Chapter 2 is entering the main proof of Chapter 3.</p>",
        "id": 296701002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662066870
    },
    {
        "content": "<p>However it seems that <code>global/relation.lean</code> misses a 1-parameter version of <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/d1f5ce303f3d6c382ddfac95b093693ca2939429/src/global/relation.lean#L350\">one_jet_sec.localize</a>. I mean it seem we don't have <code>htpy_one_jet_sec.localize</code> (or, more to the point <code>htpy_formal_sol.localize</code>).</p>",
        "id": 296701289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662067010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> in case you need a new project...</p>",
        "id": 296701318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662067025
    },
    {
        "content": "<p>The funny thing is <code>htpy_one_jet_sec.unlocalize</code> <em>is</em> there.</p>",
        "id": 296701472,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662067087
    },
    {
        "content": "<p>I also bumped mathlib. It means we now have access to <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s awesome work on dot notation. This will allow to get rid of a lot of <code>to_one_jet_section</code> etc.</p>",
        "id": 296703570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662068066
    },
    {
        "content": "<p>And I'm done for today.</p>",
        "id": 296703579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662068073
    },
    {
        "content": "<p>I proved 4 sorry's in <code>localisation</code>, 1 sorry in <code>one-jet_bundle</code> (smoothness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ψ</mi></mrow><annotation encoding=\"application/x-tex\">\\Psi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ψ</span></span></span></span>) and 1 in <code>relation</code> (smoothness of <code>transfer</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ψ</mi><mrow><mi>g</mi><mo separator=\"true\">,</mo><mi>h</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\psi_{g,h}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">h</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>)</p>",
        "id": 297246962,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662392925
    },
    {
        "content": "<p>Great!</p>",
        "id": 297248240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662393481
    },
    {
        "content": "<p>I've been besieged by students all day <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 297248327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662393509
    },
    {
        "content": "<p>I wrote some statements but the situation still isn't clarified</p>",
        "id": 297248451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662393566
    },
    {
        "content": "<p>I'll try to work more tonight.</p>",
        "id": 297248489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662393588
    },
    {
        "content": "<p>If you don't know what to do, I think we need tu upgrade transfer to a smooth open embedding.</p>",
        "id": 297249787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662394091
    },
    {
        "content": "<p>There's still a bunch of sorry's I can attack. I started looking into the computation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>J</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><msup><mi>V</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J^1(V,V&#x27;)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">V&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are vector spaces, and I will continue with that tomorrow.</p>",
        "id": 297273781,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662408490
    },
    {
        "content": "<p>But I'll look into that after that, if you are (reasonably) certain that we will use it.</p>",
        "id": 297274552,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662409081
    },
    {
        "content": "<p>The story is that on paper I thought it was enough to discuss updating maps from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> using embeddings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>:</mo><mi>X</mi><mo>↪</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">h : X \\hookrightarrow M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><mi>Y</mi><mo>↪</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">g : Y \\hookrightarrow N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>. The reasoning is that a section <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>V</mi><mo>→</mo><msup><mi>J</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>W</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F : V \\to J^1(V, W)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span></span></span></span> is a map from the manifold <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> to the manifold <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>J</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>W</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J^1(V, W)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span></span></span></span> with some extra condition. But now I think this trick isn't usable in a formal context. We need a clean API around modifying sections of jet bundles. The thing is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>:</mo><mi>X</mi><mo>↪</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">h : X \\hookrightarrow M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><mi>Y</mi><mo>↪</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">g : Y \\hookrightarrow N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> give rise to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ψ</mi><mo>:</mo><msup><mi>J</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo>↪</mo><msup><mi>J</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\psi : J^1(X, Y) \\hookrightarrow J^1(M, N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> (this is the transfer map) and we can use the updating API with the pair <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>h</mi><mo separator=\"true\">,</mo><mi>ψ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(h, \\psi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mclose\">)</span></span></span></span> but this requires an API registering that sections becomes sections and a convenient smoothness condition.</p>",
        "id": 297283387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662417571
    },
    {
        "content": "<p>I've started stating stuff, but many statement miss some side-conditions. At least in <code>global/relation.lean</code> I think all sorries that require additional conditions are clearly marked.</p>",
        "id": 297283542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662417679
    }
]