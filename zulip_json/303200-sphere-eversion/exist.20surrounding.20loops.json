[
    {
        "content": "<p>In the proof of Lemma 1.15, <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:%E2%88%83_surrounding_loops\"><code>∃_surrounding_loops</code></a>, how do we get the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0191em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>?<br>\nI understand that the lemma <code>local_loops</code> gives for each point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>U</mi><mo>∖</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">x \\in U \\setminus K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> a local family of loops, but I don't see how we get a finite family such that the domains cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>∖</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">U \\setminus K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>. We're not assuming that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> is bounded, right? The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">0\\le i \\le N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> later in the proof suggests that we're working with a finite family. Or are we working with a countable family, and is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> some kind of limit?</p>",
        "id": 263888326,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638812976
    },
    {
        "content": "<p>Thinking about it more, we do need a countably infinite sequence. And by Cor 1.14, the sequence is locally eventually constant (each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> has a neigborhood <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> such that the sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>↦</mo><msubsup><mi>γ</mi><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><msub><mi mathvariant=\"normal\">∣</mi><mi>U</mi></msub></mrow><annotation encoding=\"application/x-tex\">n\\mapsto \\gamma_n&#x27;|_U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.453em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is eventually constant, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>γ</mi><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\gamma_n&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9989em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.453em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> are the successive stages of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>), so taking the limit shouldn't be too hard.</p>",
        "id": 263897906,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638816663
    },
    {
        "content": "<p>I'm sorry there is a typo in that proof \"a local finite covering\" doesn't mean anything, I meant to write \"a locally finite covering\".</p>",
        "id": 263899554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638817340
    },
    {
        "content": "<p>I don't know why I wrote this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>. Indeed this is all meant to give rise to a sequence which, at any given point, is ultimately constant hence trivially (on paper, maybe not in Lean...) converging.</p>",
        "id": 263899957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638817510
    },
    {
        "content": "<p>Makes sense. Where in the argument do you need the fact that the covering is locally finite?</p>",
        "id": 263900024,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638817552
    },
    {
        "content": "<p>The actual reason is we always write this without thinking about it. The technical reason is probably that we first argue there is a locally finite cover before arguing we can get a countable cover.</p>",
        "id": 263900564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638817803
    },
    {
        "content": "<p>Ok, fair. I think this proof doesn't need it, so I'll try using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.countable_cover_nhds_within\">docs#topological_space.countable_cover_nhds_within</a>.</p>",
        "id": 263900975,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638818012
    },
    {
        "content": "<p>Great! One good side of formal mathematics is that whoever proves the lemma is the winner in any argument about what is needed in the proof.</p>",
        "id": 263901412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638818203
    },
    {
        "content": "<p>Thinking about it more, the locally finiteness does seem needed. If every neighborhood of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> intersects infinitely many sets, then I think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> might be discontinuous at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>: at every stage we get the guarantee that we don't change <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>γ</mi><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\gamma&#x27;_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9989em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.453em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> around a neighborhood of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, but these neighborhoods might be shrinking, and the intersection of all of them need not be a neighborhood of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>",
        "id": 263987348,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638876281
    },
    {
        "content": "<p>Note for contributors: Floris is currently distracted by Lean 4 meta-programming so don't hesitate to contribute if you like covering lemmas. There is a candidate lemma <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/to_mathlib/topology/coverings.lean\">here</a> which is hopefully enough, together with a proof strategy.</p>",
        "id": 264901253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639505587
    },
    {
        "content": "<p>This lemma is meant to cover up the bluff in <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#a0000000038\">this paper proof</a>.</p>",
        "id": 264901428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639505663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> this is a good opportunity to contribute if you want, since you wrote all the paracompact stuff.</p>",
        "id": 264901539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639505724
    },
    {
        "content": "<p>Could you please point me to the lemma we want to prove and the lemma we want to use in the proof?</p>",
        "id": 264902018,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639505972
    },
    {
        "content": "<p>The actual target is <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#a0000000038\">here</a> (except there is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> which should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span>) and the candidate technical lemma independent  of the project is <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/to_mathlib/topology/coverings.lean\">here</a>.</p>",
        "id": 264902246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639506070
    },
    {
        "content": "<p>I'll have a look tonight or tomorrow.</p>",
        "id": 264908407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639508378
    },
    {
        "content": "<p>I indeed didn't have time to look at this yet today.</p>\n<p>I looked at it a bit now, and this was indeed the step I was stuck on. </p>\n<p>Two minor comments:</p>\n<ul>\n<li>I think in the proof you first want to get a sequence <code>u</code> and <code>v</code> indexed by some <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable\">docs#encodable</a> type (as a union/sigma of countably many finite types), and as a separate step change the encodable type to <code>nat</code>.</li>\n<li>To do the last step (encodable ~&gt; nat) you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable\">docs#encodable</a>.decode₂, but you need a default \"junk\" value for your <code>u</code> and <code>v</code>. For this I think you need an minor additional assumption (either <code>[nonempty X]</code> or <code>P \\empty</code>)</li>\n</ul>",
        "id": 264931532,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639518794
    },
    {
        "content": "<p>It would be great if you can look at this Yury!</p>",
        "id": 264931738,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639518896
    },
    {
        "content": "<p>I'd be willing to assume <code>P \\empty</code>, but I guess we can also start with a case disjunction (hopefully the statement holds for the empty space).</p>",
        "id": 264931778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518914
    },
    {
        "content": "<p>I suggest the following:</p>\n<ol>\n<li>Modify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/refinement_of_locally_compact_sigma_compact_of_nhds_basis_set\">docs#refinement_of_locally_compact_sigma_compact_of_nhds_basis_set</a> so that it outputs an <code>encodable</code> type (done locally, I'll PR later tonight).</li>\n<li>Use it to get a locally finite covering by open sets <code>v a</code> such that <code>P (v a)</code> and each <code>closure (v a)</code> is compact.</li>\n<li>Use the shrinking lemma (we can do it because a paracompact t2 space is normal) to get a refinement <code>u a</code> such that <code>closure (u a) ⊆ v a</code>.</li>\n<li>Use the embedding of the index type to <code>nat</code> coming from <code>[encodable]</code> to get a family indexed by natural numbers (we need either <code>nonempty X</code> or <code>P \\empty</code> for this step).</li>\n</ol>",
        "id": 265063260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639597057
    },
    {
        "content": "<p>We talked about using the shrinking lemma. We concluded that using the shrinking lemma directly didn't work, because we want the <code>v</code>'s to be locally finite and the <code>u</code>s to cover the space. But maybe you have an idea that we missed.</p>",
        "id": 265072343,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639600941
    },
    {
        "content": "<p>The shrinking lemma gives only that the <code>u</code>s are locally finite.</p>",
        "id": 265072489,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639601040
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_Union_eq_closed_subset\">docs#exists_Union_eq_closed_subset</a></p>",
        "id": 265072842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639601231
    },
    {
        "content": "<p>If you start with a covering by <code>v i</code> such that <code>closure (v i)</code> is compact, then the new <code>u i</code> will be compact as well and they will cover the space.</p>",
        "id": 265072901,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639601265
    },
    {
        "content": "<p>UPD: you don't need to modify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/refinement_of_locally_compact_sigma_compact_of_nhds_basis_set\">docs#refinement_of_locally_compact_sigma_compact_of_nhds_basis_set</a> because we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite.countable_of_sigma_compact\">docs#locally_finite.countable_of_sigma_compact</a></p>",
        "id": 265074863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639602256
    },
    {
        "content": "<p>You're right. I misremembered the problem.</p>\n<p>I think the problem is that <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>'s lemma is not actually the one we want, we want something slightly different (sorry!).<br>\nWe are really interested in the case where everything is restricted to some given open set <code>V</code>, except that the compactness of <code>u</code> has to hold in <code>X</code>, not in <code>V</code>. So this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.paracompact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sigma_compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">⊆</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">locally_finite</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Applying Patrick's <code>foo</code> to <code>V</code> gives you almost everything, except only that <code>u n</code> is compact <em>in <code>V</code></em>, but it might not be compact (or even closed) in <code>X</code>. <br>\nPatrick, do you agree that this is the version we want?</p>",
        "id": 265076551,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639603254
    },
    {
        "content": "<p>Note: to get countability in a previous attempt, I used <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.countable_cover_nhds_within\">docs#topological_space.countable_cover_nhds_within</a>. (We also know <code>[second_countable X]</code>, if needed.)</p>",
        "id": 265076947,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639603452
    },
    {
        "content": "<p>You get countability from <code>locally_finite</code> for free, see above.</p>",
        "id": 265078940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639604413
    },
    {
        "content": "<p>I'll have a look later tonight.</p>",
        "id": 265079139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639604528
    },
    {
        "content": "<p>Unfortunately I have very little time tonight. But I don't understand Floris's objection. If <code>u n</code> is compact in <code>V</code> then it's compact in <code>X</code>. The inclusion of <code>V</code> into <code>X</code> is continuous hence it maps compact sets to compact sets.</p>",
        "id": 265084985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639607177
    },
    {
        "content": "<p>Now I'm not sure if my objection holds anymore.</p>\n<p>So we restrict our attention to <code>V</code> and ignore <code>X</code>, in step (2) we get <code>v a</code> with <code>closure (v a)</code> compact, and then the shrinking lemma gives you <code>u i</code> such that <code>closure (u i) ⊆ v i</code>. This means that <code>closure (u i)</code> will be compact, since it is a closed subset of a compact set. <br>\nFrom the perspective of <code>X</code>, we know that <code>coe '' closure (v a)</code> is compact, hence closed, so <code>closure (coe ''  v a) = coe '' closure (v a)</code> is also compact. Similarly, <code>closure (u a)</code> is compact (in <code>V</code>), hence <code>closure (coe '' u a)</code> is compact (in <code>X</code>).</p>\n<p>Ok, so I now think again that applying the shrinking lemma will work. <br>\nI  thought earlier that it wouldn't suffice, because I forgot to take into account (in an intermediate lemma) that we're working with compact sets in <code>V</code> not just closed sets (where we would have a problem that being closed in <code>V</code> is weaker than being closed in <code>X</code>).</p>",
        "id": 265095460,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639613357
    },
    {
        "content": "<p>Can you prove <code>[sigma_compact_space V]</code>?</p>",
        "id": 265117156,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639636540
    },
    {
        "content": "<p>Could you please explain what are <code>X</code>, <code>V</code>, and <code>P</code> in the actual proof?</p>",
        "id": 265146417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639656829
    },
    {
        "content": "<p>I mean, in the proof where you're going to apply this lemma.</p>",
        "id": 265146431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639656841
    },
    {
        "content": "<p>We're applying this lemma <code>foo</code> in Lemma 1.15 of the blueprint. The <code>X</code> is <code>foo</code> is <code>E</code> in the blueprint, <code>V</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>∖</mo><mover accent=\"true\"><msubsup><mi>U</mi><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">U \\setminus \\overline{U_0&#x27;}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.2663em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9337em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7337em;\"><span style=\"top:-2.4337em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.0448em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.8537em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span></span></span> and <code>P(O)</code> means \"there is a family of loops in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">L</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo separator=\"true\">,</mo><mi>β</mi><mo separator=\"true\">,</mo><mi>O</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{L}(g,\\beta,O,\\Omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Ω</span><span class=\"mclose\">)</span></span></span></span>\"(defined in Def 1.11, and we know that this locally holds by Lemma 1.12)</p>",
        "id": 265149324,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639658444
    },
    {
        "content": "<p>I <em>think</em> we know that <code>V</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-compact, but type-class inference will not find it automatically...</p>",
        "id": 265149389,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639658503
    },
    {
        "content": "<p>Is an open subset of a finite dimensional vector space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-compact?</p>",
        "id": 265149488,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639658543
    },
    {
        "content": "<p>Yes it is, if we use the fact that open and closed sets in a locally compact Hausdorff space is again locally compact. I cannot find this fact in mathlib though (it cannot be an instance, but does it exist as a lemma?).</p>",
        "id": 265150068,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639658901
    },
    {
        "content": "<p>I'm going to add <code>open_embedding.locally_compact</code> and <code>closed_embedding.locally_compact</code>.</p>",
        "id": 265150750,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639659305
    },
    {
        "content": "<p>(unless you're already working on these)</p>",
        "id": 265150784,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639659327
    },
    {
        "content": "<p>I am not currently working on this.</p>",
        "id": 265152205,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639660004
    },
    {
        "content": "<p>I think it would also be useful to specialize them to <code>is_open.subtype_locally_compact_space</code> and <code>is_closed.subtype_locally_compact_space</code> (that might be something people look for, like I did)</p>",
        "id": 265152473,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639660129
    },
    {
        "content": "<p>Sure.</p>",
        "id": 265152728,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639660282
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10844\">#10844</a></p>",
        "id": 265168706,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639667141
    },
    {
        "content": "<p>I'm getting back to this.<br>\nI think Patrick's <code>foo</code> (where we the neighborhoods satisfying <code>P</code> around all <code>x</code>) is not quite sufficient to get my formulation of <code>foo</code> (where we have the neighborhoods satisfying <code>P</code> only for <code>x</code> in some open set <code>V</code>).<br>\nApplying Patrick's <code>foo</code> to <code>V</code> gives us most of the things, but we get the locally finiteness of <code>v</code> only for <code>x ∈ V</code>. This means that the <code>v</code>s in my formulation might not be locally finite around points on the boundary of <code>V</code>.<br>\nThis will be problematic if we want the <code>γ</code>in the conclusion of <code>exists_surrounding_loops</code> to be continuous globally (not just in the <code>U</code> of that theorem).<br>\nTo get my version of <code>foo</code>, we probably have to follow Patrick's proof strategy, unless I'm missing something again.</p>",
        "id": 267481452,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641840073
    },
    {
        "content": "<p>I just pushed a proof of <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:%E2%88%83_surrounding_loops\">Lemma 1.16</a> (previously 1.15), where the only sorry is (my formulation of) <code>foo</code> above.<br>\nThe rest of the proof was still quite tricky: constructing the sequence of loops, proving that they were locally eventually constant, constructing the limit, and proving all the properties of the limit. In the end I wrote a small library for eventually constant and locally eventually constant sequences (w.r.t. an arbitrary filter).<br>\nI also made some changes that are relevant for the blueprint (I will update the blueprint once the whole proof is finished):</p>\n<ul>\n<li>In the lemma <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#cor:extend_loops\"><code>extend_loops</code></a> I added the condition that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> equals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>γ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\gamma_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (also) near the complement <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>U</mi><mn>1</mn><mi>c</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">U_1^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9314em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span>: this allows for much more control of the behavior of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> and allows us to show that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0191em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> are locally eventually constant on all points (also outside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>).</li>\n<li>In the proof of Lemma 1.16 it is fine if the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> cover all of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>, we can remove mentioning <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>U</mi><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">U_0&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span> from the proof. Then we can still conclude that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> coincides with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> near <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>: since the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0191em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> are locally eventually constant and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is compact, we can conclude that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>γ</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\gamma^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0191em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> is eventually constant on some neighborhood of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>.</li>\n</ul>",
        "id": 267752948,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642006658
    },
    {
        "content": "<p>This sounds wonderful! I  missed your previous message in this thread. I'll try to understand what you wrote.</p>",
        "id": 267757223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642008250
    },
    {
        "content": "<p>Nice work Floris!</p>\n<p>I've been taking a break from Sphere Eversion for the last month or so but I plan to resume in about a week after I finish some other bits and pieces. I'll probably start attacking the reparameterisation lemma.</p>",
        "id": 267761622,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1642010198
    },
    {
        "content": "<p>I think my formulation of <code>foo</code> is false: it is possible that for <code>x</code> on the boundary of <code>V</code> there is no neighborhood <code>O</code> around <code>x</code> where <code>P O</code> holds. In that case, it is impossible to choose the <code>v</code> in the conclusion so that it is locally finite around <code>x</code>. <br>\n<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'll come by your office this afternoon, maybe we can discuss possible solutions.</p>",
        "id": 267844881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642067035
    },
    {
        "content": "<p>I'm got going to Orsay this week because of my arm. Because my accident has been declared as a work accident and I was ordered to stop working for one week, I can't go to my office. If I have another accident there then the administrative situation would become a nightmare.</p>",
        "id": 267846905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642068171
    },
    {
        "content": "<p>But we can have a video call.</p>",
        "id": 267846925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642068186
    },
    {
        "content": "<p>I'll think about this lemma in the beginning of the afternoon</p>",
        "id": 267846956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642068213
    },
    {
        "content": "<p>Oh I see. I hope your arm is recovering well, though!</p>",
        "id": 267850478,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642070370
    },
    {
        "content": "<p>I see two possibilities:</p>\n<ul>\n<li>In the conclusion of <code>exists_surrounding_loops</code> change the everywhere continuity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> to the continuity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> (this would mean I'm taking back the Christmas present I gave you <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> )</li>\n<li>Strengthen the conditions of <code>exists_surrounding_loops</code> so that we can get the continuity conclusion everywhere, for example by requiring all conditions on the closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> (in which case we can reformulate it using a closed set). But that is probably not okay for the situations in which we apply this lemma, though.</li>\n</ul>",
        "id": 267851878,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642071151
    },
    {
        "content": "<p>Indeed there is no way <code>foo2</code> can be true.</p>",
        "id": 267878019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642085004
    },
    {
        "content": "<p>I think we could strengthen the conditions by requiring them on the closure of U (I don't want to give my Christmas present).</p>",
        "id": 267878176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642085054
    },
    {
        "content": "<p>If you're quite confident that this will not cause issues, I can make those changes.<br>\nIf you're unsure, we can also keep this on hold for now and continue with the dependencies, and see what exactly we need.</p>",
        "id": 267878643,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642085250
    },
    {
        "content": "<p>We won't use the loop family near the boundary of U anyway.</p>",
        "id": 267878790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642085307
    },
    {
        "content": "<p>In proposition 1.3, the average value condition will only be used on a compact set contained in U</p>",
        "id": 267879073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642085447
    },
    {
        "content": "<p>Maybe the reparametrization lemma will become harder to state if we change that. It's pretty difficult to make sure everything will fit without trying. It would be an interesting problem if this wasn't entirely a formalization artifact (on paper nothing exists outside <code>U</code>).</p>",
        "id": 267886257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642088379
    },
    {
        "content": "<p>It means I need to work more on the applications of Chapter 1 in Chapter 2. But everything is even slower than usual with a single arm.</p>",
        "id": 267886416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642088435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I'm pretty we can assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> are smooth on a neighborhood of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>U</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{U}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> in Proposition 1.3.</p>",
        "id": 267890358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642090153
    },
    {
        "content": "<p>With these modifications I finished <code>exists_surrounding_loops</code>.<br>\nThe new statement is below. Note that the <code>C</code> in the formulation below is the closure of <code>U</code> in the blueprint and <code>U'</code> is any open neighborhood of <code>C</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_surrounding_loops</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">U'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU'</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hCU'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⊆</span> <span class=\"n\">U'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Ω</span><span class=\"n\">_op</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"bp\">∩</span> <span class=\"n\">fst</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U'</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Ω</span><span class=\"n\">_conn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">is_connected</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">Ω</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">continuous_at</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb_in</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hconv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">convex_hull</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">Ω</span><span class=\"o\">))</span>\n  <span class=\"o\">{</span><span class=\"n\">γ₀</span> <span class=\"o\">:</span>  <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">loop</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hγ₀_surr</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝ˢ</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">surrounding_family_in</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">γ₀</span> <span class=\"n\">V</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">loop</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">surrounding_family_in</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">γ</span> <span class=\"n\">C</span> <span class=\"bp\">Ω</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝ˢ</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">γ₀</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 268301782,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642443579
    },
    {
        "content": "<p>Great!</p>",
        "id": 268302251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642443922
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 268302266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642443939
    },
    {
        "content": "<p>Congratulations indeed, this is superb!</p>",
        "id": 268318595,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1642456703
    },
    {
        "content": "<p>I'm feeling guilty because I've succumbed to the temptation to do a bit more Lie theory but I plan to dive back into Sphere Eversion within days.</p>",
        "id": 268318597,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1642456705
    },
    {
        "content": "<p>I resumed work on Sphere Eversion this morning. Am I right in thinking that thanks to Floris we can turn <code>exists_surrounding_loops</code> green as soon as we fill in this sorry <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/c742b11ca210a17dbad69584b5fa4137d552f991/src/to_mathlib/analysis/calculus.lean#L289\">times_cont_diff_clm_apply</a> ?</p>",
        "id": 271832084,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644848505
    },
    {
        "content": "<p>Should I go ahead and do this?</p>",
        "id": 271832097,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644848514
    },
    {
        "content": "<p>Yes, please</p>",
        "id": 271833894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644849301
    },
    {
        "content": "<p>I've just opened <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/49\">https://github.com/leanprover-community/sphere-eversion/pull/49</a> which closes this sorry.</p>",
        "id": 271891251,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644874129
    },
    {
        "content": "<p>I'll spend a bit more time on this again tomorrow, partly as the code could do with some work but mostly because I'm not too happy that I introduced another finite-dimensionality assumption. Still, it's another sorry squashed!</p>",
        "id": 271891443,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644874217
    },
    {
        "content": "<p>I didn't spend too much time thinking about this lemma. Is it true in infinite dimension?</p>",
        "id": 271893413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644874926
    },
    {
        "content": "<p>I don’t know! I didn’t think hard about it yet.</p>",
        "id": 271893859,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644875175
    },
    {
        "content": "<p>I thought about it and the finite-dimensionality I added was not required. I've just updated the PR so that it no longer requires this hypothesis. It still uses another possibly-redundant finite-dimensionality assumption (which I did not introduce) but I think this isn't worth worrying about.</p>",
        "id": 271984668,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644936621
    },
    {
        "content": "<p>Nice! Do you still want to work on this PR or is it ok?</p>",
        "id": 271988974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644938378
    },
    {
        "content": "<p>I've just finished messing with it.</p>",
        "id": 271990826,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644939153
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 271995384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644940983
    },
    {
        "content": "<p>I've just pushed <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/50\">https://github.com/leanprover-community/sphere-eversion/pull/50</a> which nukes some more trivial <code>sorry</code>s rendering <code>loops/surrounding.lean</code> now <code>sorry</code>-free.</p>",
        "id": 272012924,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1644947873
    },
    {
        "content": "<p>And <code>#print axioms exists_surrounding_loop</code> confirms!</p>",
        "id": 272016090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644949182
    },
    {
        "content": "<p>For some reason this lemma has turned blue again here: <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html</a></p>",
        "id": 272848400,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645555380
    },
    {
        "content": "<p>We really need to find time to switch to building the blueprint during CI.</p>",
        "id": 272852330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645557048
    },
    {
        "content": "<p>The reason why this lemma turned blue is not very interesting (it's a side effect of splitting the LTE blueprint into two parts), but this wouldn't have been an issue with a CI build instead of local build and pushing the built files.</p>",
        "id": 272852667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645557206
    }
]