[
    {
        "content": "<p>We've finally hit the point where assuming inner product spaces everywhere this was locally more convenient strikes back.</p>",
        "id": 295964650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661795459
    },
    {
        "content": "<p>The problem is that we don't have product inner product spaces. See <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inner.20product.20space.20on.20.CE.B1.20.C3.97.20.CE.B2\">this topic</a></p>",
        "id": 295964791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661795512
    },
    {
        "content": "<p>When reducing to the non-parametric case we use a product manifold. This is fine if there are no inner product spaces around. But then the localization work uses inner product spaces everywhere. If I understood correctly at that time, this was simply convenient when building diffeomorphisms between balls and whole spaces.</p>",
        "id": 295965061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661795610
    },
    {
        "content": "<p>If this is indeed the only reason then the correct fix is clearly to go back to <code>global/smooth_embedding.lean</code> and work harder there.</p>",
        "id": 295965211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661795652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span></p>",
        "id": 295965323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661795688
    },
    {
        "content": "<p>And then we'll need to propagate that change to <code>localization_data.lean</code>, but I hope this is easy</p>",
        "id": 295965537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661795753
    },
    {
        "content": "<p>I feel that it will be easier  to do as much as we can using inner product spaces, and then only at the end transform it to a statement about normed spaces (possibly using the fact that all norms are equivalent on a finite dimensional vector space). Otherwise you are dealing with 2 different norms when dealing e.g. with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff_bump\">docs#cont_diff_bump</a>.</p>",
        "id": 295968814,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661796794
    },
    {
        "content": "<p>Yes, we probably need to state and prove wrapper lemmas that use the current version.</p>",
        "id": 295979392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661800404
    },
    {
        "content": "<p>I'll think about this first thing tomorrow morning but my first instance is to attempt what Floris has suggested.</p>",
        "id": 295982337,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661801569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Inner.20product.20are.20not.20that.20cheap/near/295968814\">said</a>:</p>\n<blockquote>\n<p>possibly using the fact that all norms are equivalent on a finite dimensional vector space</p>\n</blockquote>\n<p>Will <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.to_continuous_linear_equiv\">docs#linear_equiv.to_continuous_linear_equiv</a> be enough or do you really need the inequality version of equivalent norms ?</p>",
        "id": 295982932,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1661801826
    },
    {
        "content": "<p>Actually I'm not 100% convinced equivalence of norms is strong enough: we may care about more than the topology.</p>",
        "id": 295983020,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661801870
    },
    {
        "content": "<p>I'll have to think about it in the morning but filling in missing API for <code>inner_product_space</code> might be the thing to do.</p>",
        "id": 295983119,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661801907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Inner.20product.20are.20not.20that.20cheap/near/295983020\">said</a>:</p>\n<blockquote>\n<p>Actually I'm not 100% convinced equivalence of norms is strong enough: we may care about more than the topology.</p>\n</blockquote>\n<p>Yes but continuous linear maps are smooth so having a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_equiv\">docs#continuous_linear_equiv</a> should be enough to preserve differentiability, right ?</p>",
        "id": 295983650,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1661802125
    },
    {
        "content": "<p>Perhaps I'm being stupid but here's an example of what concerns me. Consider the map defined in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph_unit_ball\">docs#homeomorph_unit_ball</a> and suppose we have the l1 norm. Surely it's not smooth?</p>",
        "id": 295986254,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661802402
    },
    {
        "content": "<p>Unfortunately I must close my laptop for the evening now. I'll take this up tomorrow.</p>",
        "id": 295986419,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661802479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Inner.20product.20are.20not.20that.20cheap/near/295986254\">said</a>:</p>\n<blockquote>\n<p>Perhaps I'm being stupid but here's an example of what concerns me. Consider the map defined in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph_unit_ball\">docs#homeomorph_unit_ball</a> and suppose we have the l1 norm. Surely it's not smooth?</p>\n</blockquote>\n<p>It isn't in general, but it should be in finite dimension right? Or am I missing something stupid? EDIT: I am, the ball is not the same anymore</p>",
        "id": 295986762,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1661802605
    },
    {
        "content": "<p>The norm itself isn't smooth, even away from zero.</p>",
        "id": 295986923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661802677
    },
    {
        "content": "<p>This specific map doesn't look like it's smooth. But in finite dimension there is always a diffeomorphism between the unit ball and the whole space (this is not completely trivial!)</p>",
        "id": 295986938,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1661802684
    },
    {
        "content": "<p>SÃ©bastien, this is precisely the topic.</p>",
        "id": 295987021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661802724
    },
    {
        "content": "<p>Actually we only care about the fact that points have a neighborhood basis made of sets that are diffeomorphic to the whole space.</p>",
        "id": 295987115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661802768
    },
    {
        "content": "<p>I mean for application in the sphere eversion project</p>",
        "id": 295987135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661802778
    },
    {
        "content": "<p>So this is probably the statement that we should be aiming for.</p>",
        "id": 295987178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661802796
    },
    {
        "content": "<p>This is much easier: use the one from the inner product space, composed with a continuous linear equiv coming from the fact that norms are equivalent.</p>",
        "id": 295987274,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1661802829
    },
    {
        "content": "<p>Indeed this is what I'm suggesting.</p>",
        "id": 295987336,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661802844
    },
    {
        "content": "<p>I'll take this up now.</p>",
        "id": 296053734,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661846753
    },
    {
        "content": "<p>Would it help to push a commit immediately which restates <code>lem:nice_atlas</code> and <code>lem:ex_localisation</code> so that they demand <code>normed_space</code> instead of <code>inner_product_space</code> but with sorried proofs until I finish.?</p>",
        "id": 296054264,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661847020
    },
    {
        "content": "<p>Yes, please.</p>",
        "id": 296068674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661853035
    },
    {
        "content": "<p>I've been trapped in admin all morning but I hope I'll have lean time this afternoon.</p>",
        "id": 296069105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661853212
    },
    {
        "content": "<p>OK I'll push up a sorried commit relaxing <code>inner_product_space</code> to <code>normed_space</code> in the next few minutes.</p>",
        "id": 296069622,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661853417
    },
    {
        "content": "<p>OK I've done that.</p>",
        "id": 296070287,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661853674
    },
    {
        "content": "<p>As I feared, we are also hitting issues with product manifolds.</p>",
        "id": 296087870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661861550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> am I right to think that the moment we write <code>smooth_manifold_with_corners ð(â, E) M</code> we decide we won't ever take a product?</p>",
        "id": 296088043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661861639
    },
    {
        "content": "<p>We should be using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/model_with_corners.boundaryless\">docs#model_with_corners.boundaryless</a> , right?</p>",
        "id": 296088139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661861668
    },
    {
        "content": "<p>I mean that if we have <code>smooth_manifold_with_corners ð(â, E) M</code> and <code>smooth_manifold_with_corners ð(â, E') M'</code> then we won't have <code>smooth_manifold_with_corners ð(â, E Ã E') (M Ã M')</code>, right?</p>",
        "id": 296088300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661861734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> I'm pretty sure this is exactly where <code>boundaryless</code> was invented so we need that assumption in the localization_data file</p>",
        "id": 296088807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661861915
    },
    {
        "content": "<p>Yes, I think that's the current situation. Concrete manifolds are typically constructed using <code>ð(â, E)</code>, but abstract theorems should be stated assuming <code>boundaryless</code> because that's stable under products.</p>\n<p>If you see ways to improve on this, don't hesitate to do it! You should have played enough with the manifolds to see the weak points of the current implementation and possible improvements, hopefully.</p>",
        "id": 296089027,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1661861986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> So I should change the localisation data API so that it demands hypotheses of the form <code>{I : model_with_corners â E E} [I.boundaryless]</code> rather than <code>ð(â, E)</code> ?</p>",
        "id": 296089755,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661862237
    },
    {
        "content": "<p>I'm not sure whether this is enough or whether you need <code>{I : model_with_corners â E H}</code>. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ?</p>",
        "id": 296090036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862332
    },
    {
        "content": "<p>The test case is exactly we want to apply the localisation API to a product.</p>",
        "id": 296090166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862372
    },
    {
        "content": "<p>I expect I can settle that myself once I attempt it. I've literally just seen this <code>boundaryless</code> for the first time now. I think I get the idea.</p>",
        "id": 296090197,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661862382
    },
    {
        "content": "<p>This all comes from the goal to deduce the parametric theorem from the unparametric one applied to a product.</p>",
        "id": 296090259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862413
    },
    {
        "content": "<p>Yes I see that.</p>",
        "id": 296090286,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661862420
    },
    {
        "content": "<p>While you're at it, please also make <code>E</code> an explicit argument in <code>std_localisation_data</code></p>",
        "id": 296090417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862469
    },
    {
        "content": "<p>I suppose I should pause the work to close <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/f5b16d2cc0d9b7d4bcb1f13642181e02ccbf8d30/src/global/smooth_embedding.lean#L329\">this sorry</a> and take this up now instead?</p>",
        "id": 296090446,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661862480
    },
    {
        "content": "<p>That would be fantastic</p>",
        "id": 296090543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862511
    },
    {
        "content": "<p>Because we need to make sure lemmas fit together before working on proving them (since we are sure the proofs we are talking about will work in the end)</p>",
        "id": 296090623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862544
    },
    {
        "content": "<p>OK. I'll take five minutes to tidy up and push what I have and then I'll pivot to seeing if I can adjust the <code>std_localisation_data</code> API along these lines.</p>",
        "id": 296090665,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661862562
    },
    {
        "content": "<p>Awesome</p>",
        "id": 296090703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862577
    },
    {
        "content": "<p>Don't hesitate to push with sorries if the statements are ok and you checked the lemma applies to a product manifold.</p>",
        "id": 296090835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862608
    },
    {
        "content": "<p>Understood.</p>",
        "id": 296090964,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661862661
    },
    {
        "content": "<p>I'm sorry I haven't though more carefully about all this, but this is all specific to formalization.</p>",
        "id": 296090975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661862665
    },
    {
        "content": "<p>Ah sure, this sort of thing is part of the point the project!</p>",
        "id": 296091073,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661862712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Inner.20product.20are.20not.20that.20cheap/near/296090036\">said</a>:</p>\n<blockquote>\n<p>I'm not sure whether this is enough or whether you need <code>{I : model_with_corners â E H}</code>. <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> ?</p>\n</blockquote>\n<p>Definitely <code>{I : model_with_corners â E H}</code>.</p>",
        "id": 296091705,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1661862937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 296092210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661863098
    },
    {
        "content": "<p>I saw it :)</p>",
        "id": 296092267,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661863116
    },
    {
        "content": "<p>OK I've pushed a commit parking the work on closing the <code>sorry</code> introduced by relaxing <code>inner_product_space</code> to <code>normed_space</code> and I'll start looking into fixing the API for <code>std_localisation_data</code> now.</p>",
        "id": 296093428,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661863495
    },
    {
        "content": "<p>This is going to take a while even though it's totally straightforward. I hope to finish this today but I cannot guarantee.</p>",
        "id": 296101748,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661866163
    },
    {
        "content": "<p>Thanks</p>",
        "id": 296105128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661867321
    },
    {
        "content": "<p>OK I've just pushed a commit which I think should give you the API you need for <code>std_localisation_data</code></p>",
        "id": 296107405,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661867878
    },
    {
        "content": "<p>Unfortunately the various quick revisions means that the code quality in <code>smooth_embedding.lean</code> is getting quite low but for now this is a secondary concern.</p>",
        "id": 296110990,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661867913
    },
    {
        "content": "<p>Assuming what I've done for <code>std_localisation_data</code> is correct, I suppose I might as well make corresponding changes for <code>nice_update_of_eq_outside_compact</code> (even though in this case I think we could get away with what we have).</p>",
        "id": 296111342,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661868009
    },
    {
        "content": "<p>It would be morally correct to do it everywhere but it shouldn't be needed</p>",
        "id": 296111682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661868095
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 296111759,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661868117
    },
    {
        "content": "<p>Maybe I'll leave that lemma alone then and see about de-sorrying the file <code>smooth_embedding.lean</code>.</p>",
        "id": 296115427,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661868138
    },
    {
        "content": "<p>I'm going to take a short break to listen to some Wodehouse while I walk in the sun. Please let me know if what I've done for <code>std_localisation_data</code> does not look right.</p>",
        "id": 296115862,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661868251
    },
    {
        "content": "<p>Sorry, I was finishing some \"almost done\" proof. I'll look right now</p>",
        "id": 296125496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661868786
    },
    {
        "content": "<p>I can confirm we are back on track (but with more sorries and less green in the graph <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>)</p>",
        "id": 296137677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661870698
    },
    {
        "content": "<p>I had to add <code>nonempty</code> assumptions everywhere but I haven't proved the 2-sphere is nonempty since I hope we'll get rid of this assumption in the main theorem.</p>",
        "id": 296138019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661870793
    },
    {
        "content": "<p>I pushed.</p>",
        "id": 296138261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661870876
    },
    {
        "content": "<p>We seem to have no graph at all now!</p>",
        "id": 296138526,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661870950
    },
    {
        "content": "<p>No graph, no problem.</p>",
        "id": 296138597,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1661870970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Inner.20product.20are.20not.20that.20cheap/near/296138019\">said</a>:</p>\n<blockquote>\n<p>I had to add <code>nonempty</code> assumptions everywhere</p>\n</blockquote>\n<p>Yes, I haven't forgotten about this. Hopefully I can resolve this tomorrow.</p>",
        "id": 296138800,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661871020
    },
    {
        "content": "<p>Woohoo, all nodes in the graph are green! (at least until the graph is non-empty again.)</p>",
        "id": 296139262,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661871158
    },
    {
        "content": "<p>This was the usual suspect: I had an outdated leanblueprint plugin on this computer</p>",
        "id": 296139401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661871203
    },
    {
        "content": "<p>I'm compiling again...</p>",
        "id": 296139416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661871209
    },
    {
        "content": "<p>We no longer have a graph where all nodes are green so we should get back to work.</p>",
        "id": 296140211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661871443
    },
    {
        "content": "<p><del>It doesn't matter but I don't understand why <code>lem:open_ample_immersion</code> did not turn green.</del> I must add the <code>leanok</code> to <code>lem:open_ample_immersion</code>.</p>",
        "id": 296140228,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1661871449
    },
    {
        "content": "<p>The proof isn't marked <code>\\leanok</code></p>",
        "id": 296140503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661871536
    },
    {
        "content": "<p>I've just pushed a commit which finishes the proof of <code>nice_atlas</code> (again). This time it:</p>\n<ul>\n<li>Holds for any <code>normed_space</code> rather than just <code>inner_product_space</code>s</li>\n<li>Works for any boundaryless <code>model_with_corners</code> rather than just <code>model_with_corners_self</code></li>\n</ul>",
        "id": 296620440,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662046804
    },
    {
        "content": "<p>Because I bootstrap the result for <code>normed_space</code>s up from the easier result for <code>inner_product_space</code>s there is a funny dance at the end which was amazingly easy thanks to a great API that we have for Euclidean spaces, bases, and equivalence of norms in finite dimensions. It starts here: <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/4efaab178715ab819997010c4c8b3907f518ea8e/src/to_mathlib/analysis/normed_space/misc.lean#L165\">https://github.com/leanprover-community/sphere-eversion/blob/4efaab178715ab819997010c4c8b3907f518ea8e/src/to_mathlib/analysis/normed_space/misc.lean#L165</a></p>",
        "id": 296621142,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662047017
    },
    {
        "content": "<p>Great!</p>",
        "id": 296650226,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662048957
    }
]