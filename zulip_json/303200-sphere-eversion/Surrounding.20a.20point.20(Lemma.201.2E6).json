[
    {
        "content": "<p>The first important goal of the preliminaries in the loop chapter was to prove <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:int_cvx\">Lemma 1.6</a>:</p>\n<p>If a point lies in the convex hull of an open set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>, then it is surrounded by some collection of points belonging to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>. </p>\n<p>Recall that in a real vector space with dimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>. A point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is surrounded by points <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>p</mi><mi>d</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_0, …, p_d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> if those points are affinely independent and there exist weights <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">w_i ∈ (0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>w</mi><mi>i</mi></msub><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x=∑_iw_ip_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>The current state is a bit messy because we have both <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/loops/convexity.lean\">convexity.lean</a> and <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/loops/int_cvx.lean\">int_cvx.lean</a>. But Oliver Nash is making really good progress on this lemma, proving refinements on Carathéodory's lemma and setting up the theory of barycentric coordinates in mathlib.</p>",
        "id": 256757834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633707181
    },
    {
        "content": "<p>I'm very close with this now. I think <a href=\"https://github.com/leanprover-community/mathlib/issues/9629\">#9629</a> is the last piece for Mathlib and within a day or so I hope to have a PR to the Sphere Eversion repo which completely proves this lemma (and tidies up the little bit of mess mentioned above).</p>",
        "id": 256758602,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633707507
    },
    {
        "content": "<p>Thanks for this! When we were doing Sperner's lemma, we got stuck on precisely that.</p>",
        "id": 256760579,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633708337
    },
    {
        "content": "<p>If I can be helpful for anything else, feel free to ping!</p>",
        "id": 256760610,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633708352
    },
    {
        "content": "<p>I'm done for the day so I've pushed up a branch showing work in progress: <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/26\">https://github.com/leanprover-community/sphere-eversion/pull/26</a> I'd estimate one solid day's work should close its <code>sorry</code> and tidy it up into something we could consider merging.</p>",
        "id": 256772579,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633713093
    },
    {
        "content": "<p>(so realistically, probably two days!)</p>",
        "id": 256772826,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633713183
    },
    {
        "content": "<p>I'm _still_ pushing on this lemma. I could go faster but I'm keen to try and do things the Right Way. The latest piece is: <a href=\"https://github.com/leanprover-community/mathlib/issues/9674\">#9674</a></p>",
        "id": 257217773,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634050982
    },
    {
        "content": "<p>Is it possibly worth to do an LTE-like <code>for_mathlib</code>folder and then focus on merging that after? Mathlib PRs are all well and good but can sometimes be slow</p>",
        "id": 257218266,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634051157
    },
    {
        "content": "<p>I think Floris has started this <a href=\"https://github.com/leanprover-community/sphere-eversion/tree/master/src/to_mathlib\">here</a> but I haven't caved in just yet.</p>",
        "id": 257218430,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634051207
    },
    {
        "content": "<p>I agree it is probably necessary and it's likely I'll use this release valve to speed up my progress sooner or later.</p>",
        "id": 257218496,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634051236
    },
    {
        "content": "<p>I now have a sorry-free proof of this lemma <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/26\">here</a> It needs significant tidy up (and also needs two Mathlib PRs to merge first) but it's nice to be sorry-free!</p>",
        "id": 257708603,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634308894
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/26\">https://github.com/leanprover-community/sphere-eversion/pull/26</a> is now ready for review. Repeating a comment I made on GH, for posterity this work uses the following 31 PRs to Mathlib:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9776\">#9776</a> feat(linear_algebra/affine_space/independent): affine equivalences preserve affine independence of sets of points</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9747\">#9747</a> feat(linear_algebra/affine_space/independent): add exists_affine_independent</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9727\">#9727</a> feat(analysis/normed_space/add_torsor_bases): the convex hull has non-empty interior iff the affine span is top</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9708\">#9708</a> feat(linear_algebra/linear_independent): add variant of exists_linear_independent</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9695\">#9695</a> feat(linear_algebra/affine_space/affine_subspace): add lemma affine_equiv.span_eq_top_iff </li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9674\">#9674</a> feat(linear_algebra/{dimension,affine_space/finite_dimensional}): independent subsets of finite-dimensional spaces are finite.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9657\">#9657</a> feat(linear_algebra/affine_space/finite_dimensional): upgrade affine_independent.affine_span_eq_top_of_card_eq_finrank_add_one to an iff</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9629\">#9629</a> feat(linear_algebra/affine_space/barycentric_coords): we can recover a point from its barycentric coordinates</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9583\">#9583</a> feat(analysis/normed_space/add_torsor_bases): the interior of the convex hull of a finite affine basis is the set of points with strictly positive barycentric coordinates</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9564\">#9564</a> feat(linear_algebra/affine_space/barycentric_coords): barycentric coordinates are 1 in zero dimensions</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9543\">#9543</a> feat(analysis/normed_space/add_torsor_bases): barycentric coordinates are open maps (in finite dimensions over a complete field)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9540\">#9540</a> feat(analysis/normed_space/banach): open mapping theorem for maps between affine spaces</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9538\">#9538</a> feat(analysis/normed_space/affine_isometry): affine maps are open iff their underlying linear maps are</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9515\">#9515</a> feat(analysis/normed_space/add_torsor_bases): barycentric coordinates are continuous</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9508\">#9508</a> feat(topology/basic): interior of finite intersection is intersection of interiors</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9499\">#9499</a> feat(analysis/convex/combination): lemmas connecting convex hull with affine combinations and barycentric coordinates</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9472\">#9472</a> feat(linear_algebra/affine_space/barycentric_coords): define barycentric coordinates</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9471\">#9471</a> feat(topology/maps): for a continuous open map, preimage and interior commute</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9453\">#9453</a> feat(linear_algebra/affine_space/combination): add lemma finset.map_affine_combination</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9418\">#9418</a> feat(analysis/normed_space/add_torsor_bases): add lemma exists_subset_affine_independent_span_eq_top_of_open</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9360\">#9360</a> feat(linear_algebra/affine_space/affine_map): add missing simp lemma affine_map.homothety_apply_same</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9113\">#9113</a> feat(linear_algebra/affine_space/affine_subspace): prove that a set whose affine span is top cannot be empty.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9103\">#9103</a> feat(linear_algebra/affine_space/combination, analysis/convex/combination): basic lemmas about affine combinations, center of mass, centroid </li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9070\">#9070</a> feat(linear_algebra/affine_space/independent): homotheties preserve affine independence</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9057\">#9057</a> feat(analysis/convex/basic): the affine image of the convex hull is the convex hull of the affine image</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9044\">#9044</a> feat(analysis/convex/topology): add lemma convex.subset_interior_image_homothety_of_one_lt</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/9005\">#9005</a> feat(linear_algebra/affine_space/independent): affine independence is preserved by affine maps</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8983\">#8983</a> feat(linear_algebra/affine_space/affine_equiv): affine homotheties as equivalences </li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8895\">#8895</a> feat(order/well_founded): define function.argmin, function.argmin_on</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8892\">#8892</a> feat(analysis/convex/caratheodory): strengthen Caratheodory's lemma to provide affine </li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8865\">#8865</a> feat(algebra/big_operators/basic): add prod_dite_of_false, prod_dite_of_true</li>\n</ul>",
        "id": 258020068,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634560025
    },
    {
        "content": "<p>Wow! No wonder I couldn't prove it when I needed it for Sperner's lemma.</p>",
        "id": 258025756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634562496
    },
    {
        "content": "<p>I think only a subset of at most 10 of these are the bit you needed for that. There are also some shortcuts which, rightly or wrongly, I avoided.</p>",
        "id": 258027537,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1634563242
    },
    {
        "content": "<p>This is really great. Thanks a lot for all your work on this! I'm especially happy to see that it already brought a lot of very natural things to mathlib.</p>",
        "id": 258035327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634566492
    },
    {
        "content": "<p>It may take longer to do development this way, but the outcome is really nice!</p>",
        "id": 258109122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634595237
    },
    {
        "content": "<p>This lemma is now officially <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">green</a>! The blueprint has also been updated by Oliver to explain the proof he actually formalized. One very nice thing is that the proof includes stuff that would definitely be proved on paper by drawing a small picture and nothing else, for instance this <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:int_homothety_cvx\">new lemma</a>.</p>",
        "id": 258266216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634675269
    }
]