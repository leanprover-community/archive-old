[
    {
        "content": "<p>I'm having trouble getting the topology right for the construction of the vector bundle of continuous linear maps from <code>E‚ÇÅ</code> to <code>E‚ÇÇ</code>, where <code>E‚ÇÅ</code> is a vector bundle modelled on a topological (or normed if easier) vector space <code>F‚ÇÅ</code> and <code>E‚ÇÇ</code> is a vector bundle modelled on  <code>F‚ÇÇ</code>.</p>\n<p>I believe that to make the construction work, one needs to choose a topology on every space of operators <code>A ‚ÜíL[ùïú] B</code>, in such a way that the following two properties hold for all topological spaces <code>B</code> and all topological (or normed if easier) vector spaces <code>F‚ÇÅ</code>, <code>F‚ÇÇ</code>, <code>F‚ÇÉ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pre</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">F‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F‚ÇÇ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"n\">F‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">Œµ</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">F‚ÇÇ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F‚ÇÉ</span><span class=\"o\">),</span> <span class=\"n\">p.2</span> <span class=\"bp\">‚àò</span><span class=\"n\">L</span> <span class=\"n\">Œµ</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">post</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">F‚ÇÇ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F‚ÇÉ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"n\">F‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">Œµ</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">F‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F‚ÇÇ</span><span class=\"o\">),</span> <span class=\"n\">Œµ</span> <span class=\"n\">p.1</span> <span class=\"bp\">‚àò</span><span class=\"n\">L</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(It may be that I have already assumed too much in reducing to these properties.  But I think I can see my way to the end of the construction from here, if they work out.)</p>\n<p>I tried proving these properties for (a) the operator norm topology, (b) the topology of pointwise convergence, and couldn't get them to work out, at least in the naive follow-one's-nose approach.  In the case (a) I could reduce to a property which doesn't hold in general for (a) but does for (b), and in the case (b) I could reduce to a property which doesn't hold in general for (b) but does for (a)!  See <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom-toy\">branch#vb-hom-toy</a> .</p>\n<p>Is there a clever way to make either (a) or (b) work?  Is one of the other operator topologies more appropriate?  Or did I assume too much in reducing to these two properties, perhaps there's a construction of the bundle which bypasses them?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span></p>",
        "id": 275878604,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647650159
    },
    {
        "content": "<p>The only reference I know of for infinite-dimensional vector bundles is Lang's <em>Differentiable Manifolds</em>, and if I'm reading correctly he assumes more structure on them than mathlib does:  namely a fixed collection of trivializations for the bundle, such that the coordinate changes <code>B ‚Üí (F ‚âÉL[ùïú] F)</code> for any pair of trivializations are continuous (wrt the operator norm topology) on the appropriate domain.</p>",
        "id": 275886464,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647660558
    },
    {
        "content": "<p>Possibly relevant (but I haven't read them in detail yet):<br>\n<a href=\"https://mathoverflow.net/questions/4943/vector-bundle-with-non-smoothly-varying-transition-functions\">https://mathoverflow.net/questions/4943/vector-bundle-with-non-smoothly-varying-transition-functions</a><br>\n<a href=\"https://mathoverflow.net/questions/54550/the-third-axiom-in-the-definition-of-infinite-dimensional-vector-bundles-why\">https://mathoverflow.net/questions/54550/the-third-axiom-in-the-definition-of-infinite-dimensional-vector-bundles-why</a></p>",
        "id": 275886734,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647660955
    },
    {
        "content": "<p>It definitely sounds like the mathlib definition doesn't assume enough to cover infinite dimension. This is not surprising at all. Nobody here is doing differential geometry in infinite dimension, and there are lots of subtle points.</p>",
        "id": 275900443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647682280
    },
    {
        "content": "<p>Yes, I agree with Patrick, we have overlooked that the conditions we impose are not strong enough in general. This shows (once again) that the good stress test for definitions is trying to prove nontrivial things with them!</p>",
        "id": 275918132,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1647707838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275886464\">said</a>:</p>\n<blockquote>\n<p>a fixed collection of trivializations for the bundle, such that the coordinate changes <code>B ‚Üí (F ‚âÉL[ùïú] F)</code> for any pair of trivializations are continuous (wrt the operator norm topology) on the appropriate domain.</p>\n</blockquote>\n<p>I think it would be possible to define a <code>structure_groupoid</code> for <code>B √ó F</code>, such that the property here is equivalent to <code>has_groupoid</code> for the given trivializations.</p>",
        "id": 275922395,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647713893
    },
    {
        "content": "<p>This will mean that the vector bundle definition is no longer a <code>Prop</code>; it will have data.  (We go from the <em>existence</em> of trivializations, to a <em>choice</em> of trivializations whose coordinate changes satisfy the above property.)</p>",
        "id": 275922524,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647714101
    },
    {
        "content": "<p>So, currently we have the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">topological_vector_bundle</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">total_space_mk_inducing</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"n\">total_space_mk</span> <span class=\"n\">E</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">locally_trivial</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">trivialization</span> <span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"n\">e.base_set</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and this could be changed to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">topological_vector_bundle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">total_space_mk_inducing</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"n\">total_space_mk</span> <span class=\"n\">E</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">atlas</span> <span class=\"o\">[]</span>            <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">trivialization</span> <span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"o\">[]</span>         <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">trivialization</span> <span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_chart_source</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base_set</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">chart_mem_atlas</span> <span class=\"o\">[]</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">chart_at</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"n\">atlas</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which obviously extends <code>charted_space (B √ó F) (total_space E)</code>.</p>",
        "id": 275923258,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647715050
    },
    {
        "content": "<p>(Just noticed <span class=\"user-mention\" data-user-id=\"267205\">@Nicol√≤ Cavalleri</span> is not subscribed to this stream; fixed.)</p>",
        "id": 275923354,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647715152
    },
    {
        "content": "<p>Are you saying that the better definition of topological vector bundle in Lang does not only depend on the topology and the vector space structure in the fibers, but that there is an additional choice to be made? If that's the way to go, then so be it!</p>",
        "id": 275925910,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1647718807
    },
    {
        "content": "<p>That's right, the additional choice is of a collection/\"atlas\" of trivializations, which are mutually-compatible in the sense that the associated co-ordinate changes <code>B ‚Üí (F ‚âÉL[ùïú] F)</code> are continuous (on the right subset of <code>B</code>), for the operator-norm topology on <code>F ‚âÉL[ùïú] F</code>.  At the moment we only know that the associated maps <code>B √ó F ‚Üí F</code> are continuous, which I think is the same as saying that the co-ordinate changes are continuous for the topology of pointwise convergence on <code>F ‚âÉL[ùïú] F</code>.</p>",
        "id": 275929015,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647723112
    },
    {
        "content": "<p>Also, maybe later we'll want to assume that the co-ordinate changes <code>B ‚Üí (F ‚âÉL[ùïú] F)</code> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> or smooth.</p>",
        "id": 275929076,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647723160
    },
    {
        "content": "<p>I sketched out a new definition of topological vector bundle at <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-groupoid\">branch#vb-groupoid</a>, open to comments!</p>",
        "id": 275947902,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647751992
    },
    {
        "content": "<p>Ok probably I should have followed Lang too in the first place, I did not know either that the theory was different in infinite dimensions!</p>",
        "id": 275962097,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647775544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275929015\">said</a>:</p>\n<blockquote>\n<p>That's right, the additional choice is of a collection/\"atlas\" of trivializations, which are mutually-compatible in the sense that the associated co-ordinate changes <code>B ‚Üí (F ‚âÉL[ùïú] F)</code> are continuous (on the right subset of <code>B</code>), for the operator-norm topology on <code>F ‚âÉL[ùïú] F</code>.  At the moment we only know that the associated maps <code>B √ó F ‚Üí F</code> are continuous, which I think is the same as saying that the co-ordinate changes are continuous for the topology of pointwise convergence on <code>F ‚âÉL[ùïú] F</code>.</p>\n</blockquote>\n<p>At the moment the model space fiber <code>F</code> is not a normed space, but just a topological vector space. What do you you mean by operator-norm topology? Just the strong topology of linear continuous maps right?</p>",
        "id": 275963977,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647778559
    },
    {
        "content": "<p>Btw, another nice reference besides Lang on the infinite dimensional case which does not assume the vector spaces to be Banach is \"The convenient setting of global analysis\" by Kriegl and Michor!</p>",
        "id": 275964294,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647779075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275963977\">said</a>:</p>\n<blockquote>\n<p>At the moment the model space fiber <code>F</code> is not a normed space, but just a topological vector space. What do you you mean by operator-norm topology? Just the strong topology of linear continuous maps right?</p>\n</blockquote>\n<p>No, Lang actually assumes that the fibre model <code>F</code> is a Banach space.  I believe the strong topology is the topology of pointwise convergence, right?  That topology's not good enough -- it doesn't satisfy that evaluation and composition are continuous, I believe.</p>",
        "id": 275974417,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647792974
    },
    {
        "content": "<p>Whereas the operator norm topology does: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_bounded_bilinear_map_apply\">docs#is_bounded_bilinear_map_apply</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_bounded_bilinear_map_comp\">docs#is_bounded_bilinear_map_comp</a></p>",
        "id": 275974433,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647793020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275964294\">said</a>:</p>\n<blockquote>\n<p>Btw, another nice reference besides Lang on the infinite dimensional case which does not assume the vector spaces to be Banach is \"The convenient setting of global analysis\" by Kriegl and Michor!</p>\n</blockquote>\n<p>Yes, I looked there yesterday; they assume the vector spaces are \"convenient\" (a definition we don't have, but it apparently admits an appropriate generalization of the operator norm topology), and they also make the further assumption we're discussing (fixed collection of trivializations, which are mutually-compatible in the sense that the associated co-ordinate changes <code>B ‚Üí (F ‚âÉL[ùïú] F)</code> are continuous).</p>",
        "id": 275974540,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647793199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275974417\">said</a>:</p>\n<blockquote>\n<p>No, Lang actually assumes that the fibre model <code>F</code> is a Banach space.  I believe the strong topology is the topology of pointwise convergence, right?  That topology's not good enough -- it doesn't satisfy that evaluation and composition are continuous, I believe.</p>\n</blockquote>\n<p>Sorry I thought you were referring to the current code not to Lang. And no by strong topology I do not mean pointwise convergence, I mean the topology of bounded convergence (like in Wiki: <a href=\"https://en.wikipedia.org/wiki/Topologies_on_spaces_of_linear_maps\">https://en.wikipedia.org/wiki/Topologies_on_spaces_of_linear_maps</a>)</p>",
        "id": 275975925,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647794767
    },
    {
        "content": "<p>I'd guess what Michor and Kriegl do generalizes to TVSs with that topology</p>",
        "id": 275976093,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647794847
    },
    {
        "content": "<p>Btw my confusion originates from the fact that from the code you rewrote up to now you did not change TVS to normed spaces so my questions better reformulated would be what was your plan to extend Lang to topological vector spaces</p>",
        "id": 275976558,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647795207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275976558\">said</a>:</p>\n<blockquote>\n<p>Btw my confusion originates from the fact that from the code you rewrote up to now you did not change TVS to normed spaces so my questions better reformulated would be what was your plan to extend Lang to topological vector spaces</p>\n</blockquote>\n<p>I'm not sure what you mean by this.  I assumed a Banach space fibre <a href=\"https://github.com/leanprover-community/mathlib/blob/589f505792acbef0c2a2c5fe3226342f3e0e40c0/src/geometry/manifold/topological_vector_bundle.lean#L36\">here</a>, and so far (the construction isn't complete yet) have used that this implies that composition and inversion on <code>F ‚âÉL[ùïú] F</code> are continuous.</p>",
        "id": 275977477,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647796341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275975925\">said</a>:</p>\n<blockquote>\n<p>by strong topology I do not mean pointwise convergence, I mean the topology of bounded convergence (like in Wiki: <a href=\"https://en.wikipedia.org/wiki/Topologies_on_spaces_of_linear_maps\">https://en.wikipedia.org/wiki/Topologies_on_spaces_of_linear_maps</a>)</p>\n</blockquote>\n<p>Maybe <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> can tell us how far we are from having this definition?  (Or is it one of the things recently added?)</p>",
        "id": 275977680,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647796637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275977477\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what you mean by this.  I assumed a Banach space fibre <a href=\"https://github.com/leanprover-community/mathlib/blob/589f505792acbef0c2a2c5fe3226342f3e0e40c0/src/geometry/manifold/topological_vector_bundle.lean#L36\">here</a>, and so far (the construction isn't complete yet) have used that this implies that composition and inversion on <code>F ‚âÉL[ùïú] F</code> are continuous.</p>\n</blockquote>\n<p>I only looked at the file <code>vector_bundle</code> and I missed it, now things make sense! At any rate it would be cool to keep the TVS generality so to take into account Frechet vector bundles too, if the the strong topology for TVS is not too hard to implement</p>",
        "id": 275979494,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647799039
    },
    {
        "content": "<p>What do people actually use in practice? Are there people solving PDEs on manifolds who need all this generality and more, or is this just the mathlib \"work in maximal generality for as long as possible\" thing?</p>",
        "id": 275979882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647799453
    },
    {
        "content": "<p>Here's an example I remember offhand: all the \"generic\" statements in Morse theory.  See Theorem 5.4 in <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwirqZCZpNX2AhX9j4kEHcc2AZcQFnoECAoQAQ&amp;url=https%3A%2F%2Fmath.berkeley.edu%2F~hutching%2Fteach%2F276-2010%2Fmfp.ps&amp;usg=AOvVaw3C9MetB9FiM5_Wk2ABG6yQ\">these notes</a> by Hutchings, and the applications (eg Prop 5.5) that follow.</p>",
        "id": 275980404,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647800101
    },
    {
        "content": "<p>Oh wow, is what we have general enough to define Banach manifolds?</p>",
        "id": 275980802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647800686
    },
    {
        "content": "<p>S√©bastien's manifolds <em>are</em> Banach manifolds!</p>",
        "id": 275980830,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647800736
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">has_groupoid</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 275980882,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647800803
    },
    {
        "content": "<p>I had never internalised this; my mental model of them was always that \"probably there are some assumptions which make things locally R^n somewhere\". Thanks!</p>",
        "id": 275980958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647800912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275977680\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275975925\">said</a>:</p>\n<blockquote>\n<p>by strong topology I do not mean pointwise convergence, I mean the topology of bounded convergence (like in Wiki: <a href=\"https://en.wikipedia.org/wiki/Topologies_on_spaces_of_linear_maps\">https://en.wikipedia.org/wiki/Topologies_on_spaces_of_linear_maps</a>)</p>\n</blockquote>\n<p>Maybe <span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> can tell us how far we are from having this definition?  (Or is it one of the things recently added?)</p>\n</blockquote>\n<p>It is rather close, it depends of course on what kind of statements you need. I am more focusing on getting the polar topologies sorted out, but after that I can do topologies for linear maps.</p>",
        "id": 275980975,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647800940
    },
    {
        "content": "<p>there seem to be reasons to have manifolds over Fr√©chet spaces: <a href=\"https://www.ams.org/journals/bull/1982-07-01/S0273-0979-1982-15004-2/S0273-0979-1982-15004-2.pdf\">https://www.ams.org/journals/bull/1982-07-01/S0273-0979-1982-15004-2/S0273-0979-1982-15004-2.pdf</a></p>",
        "id": 275981390,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647801527
    },
    {
        "content": "<p>(we don't have Fr√©chet spaces yet)</p>",
        "id": 275981507,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647801677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275980975\">said</a>:</p>\n<blockquote>\n<p>It is rather close, it depends of course on what kind of statements you need. I am more focusing on getting the polar topologies sorted out, but after that I can do topologies for linear maps.</p>\n</blockquote>\n<p>I'll push ahead with the normed version and keep track of what properties we need.  My guess would be that one needs not too much to define <em>topological</em> vector bundles, but rather more (perhaps a whole rewrite of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff\">docs#cont_diff</a>?) for <em>smooth</em> vector bundles.</p>",
        "id": 275981855,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647802188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275981390\">said</a>:</p>\n<blockquote>\n<p>there seem to be reasons to have manifolds over Fr√©chet spaces: <a href=\"https://www.ams.org/journals/bull/1982-07-01/S0273-0979-1982-15004-2/S0273-0979-1982-15004-2.pdf\">https://www.ams.org/journals/bull/1982-07-01/S0273-0979-1982-15004-2/S0273-0979-1982-15004-2.pdf</a></p>\n</blockquote>\n<p>I think Fr√©chet manifold also come up in deformation theory!</p>",
        "id": 275981995,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647802330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275981855\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/275980975\">said</a>:</p>\n<blockquote>\n<p>It is rather close, it depends of course on what kind of statements you need. I am more focusing on getting the polar topologies sorted out, but after that I can do topologies for linear maps.</p>\n</blockquote>\n<p>I'll push ahead with the normed version and keep track of what properties we need.  My guess would be that one needs not too much to define <em>topological</em> vector bundles, but rather more (perhaps a whole rewrite of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff\">docs#cont_diff</a>?) for <em>smooth</em> vector bundles.</p>\n</blockquote>\n<p>I also think this! Indeed my comment was only referring to topological vector bundles: despite I think there could be reasons to have more generality in manifolds too the dimension of the refactor is clearly very different so I was suggesting that for vector bundles just cause it seemed doable besides useful</p>",
        "id": 275982091,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1647802453
    },
    {
        "content": "<p>I need to (or at least ought to) stop working on this for a few days, but if anyone would like to help pick off some sorries, the approach for the redefinition should now be fairly stable.  See <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-vb\">branch#redefine-vb</a>.  The sorries in <code>topology/vector_bundle</code> and <code>topology/vector_bundle_hom</code> should hopefully be correct and doable.  Making the tangent bundle a vector bundle is now a fair bit of work, so <code>geometry/manifold/tangent_bundle</code> now has a ton of errors which I haven't looked through carefully yet.</p>",
        "id": 276094107,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647887080
    },
    {
        "content": "<p>Alternatively, we could revert <a href=\"https://github.com/leanprover-community/mathlib/pull/8295\">#8295</a>, so temporarily no longer have a <code>topological_vector_bundle</code> instance for the tangent bundle.  This would allow the rest of the refactor to go through faster.</p>",
        "id": 276096247,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647887911
    },
    {
        "content": "<p>I'll take a look at those sorries</p>",
        "id": 276103316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647891546
    },
    {
        "content": "<p>Thanks Patrick!  Many should be one-liners, so hopefully not hard to make progress.</p>",
        "id": 276103523,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647891670
    },
    {
        "content": "<p>I removed the first two sorries in <code>vector_bundle.lean</code>.</p>",
        "id": 276116846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647898318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> do we know that inversion is continuous on <code>F ‚ÜíL[R] F</code>?</p>",
        "id": 276167479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647944886
    },
    {
        "content": "<p>Yes, under the hypothesis of completeness.</p>",
        "id": 276167514,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647944915
    },
    {
        "content": "<p>Somewhere in <code>normed_space.units</code></p>",
        "id": 276167532,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647944926
    },
    {
        "content": "<p>We don't have any completeness assumption in that vector bundle file, right?</p>",
        "id": 276167624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647944981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_ring.inverse_continuous_at\">docs#normed_ring.inverse_continuous_at</a> together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.to_ring_inverse\">docs#continuous_linear_map.to_ring_inverse</a></p>",
        "id": 276167642,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647944994
    },
    {
        "content": "<p>Not yet, but feel free to add it, Lang assumes Banach.</p>",
        "id": 276167708,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945010
    },
    {
        "content": "<p>Maybe it's because I don't understand what you were doing.</p>",
        "id": 276167823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945092
    },
    {
        "content": "<p>Could you take a look at the diff in <a href=\"https://github.com/leanprover-community/mathlib/commit/f969fdc27bf9b28057803b5723eb72373601e9d2\">https://github.com/leanprover-community/mathlib/commit/f969fdc27bf9b28057803b5723eb72373601e9d2</a></p>",
        "id": 276167855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945117
    },
    {
        "content": "<p>I'm changing the intermediate statements in that proof, but maybe I'm simply confused.</p>",
        "id": 276167938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945149
    },
    {
        "content": "<p>In that proof in particular I didn't think very hard about the intermediate statements, so very likely you're right.</p>",
        "id": 276168249,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945325
    },
    {
        "content": "<p>The argument is, \"we want a fact about continuity of transition between <code>e</code> and <code>e'</code>, let's convert that to a fact about continuity of <code>Œµ</code>\", right?</p>",
        "id": 276168462,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945423
    },
    {
        "content": "<p>The issue is that what seems to come naturally is the continuity of <code>Œµ</code> composed with inversion</p>",
        "id": 276168538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945465
    },
    {
        "content": "<p>The remaining sorry in my proof is <code>have : continuous_on (Œª p : B √ó F, (p.1, (Œµ p.1).symm p.2)) (s √óÀ¢ (univ : set F)),</code></p>",
        "id": 276168615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945491
    },
    {
        "content": "<p>Note the <code>(Œµ p.1).symm</code></p>",
        "id": 276168640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945508
    },
    {
        "content": "<p>I wonder if I should have swapped <code>e</code> and <code>e'</code> right at the start? At</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">continuous_coord_change</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"bp\">‚àà</span> <span class=\"n\">trivialization_atlas</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_transitions</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">e.to_local_equiv.symm.trans</span> <span class=\"n\">e'.to_local_equiv</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>that is (in the definition of <code>topological_vector_bundle</code>).</p>",
        "id": 276168700,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945550
    },
    {
        "content": "<p>And I find this suspicious</p>",
        "id": 276168705,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945554
    },
    {
        "content": "<p>That could be the explanation</p>",
        "id": 276168737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945569
    },
    {
        "content": "<p>Maybe there is some inconsistency between the definition of topological bundles and topological vector bundles</p>",
        "id": 276168804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945602
    },
    {
        "content": "<p>There wasn't before, so if there is, I introduced it with that axiom <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 276168871,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945637
    },
    {
        "content": "<p>Do you want to try changing it there and all the way down?</p>",
        "id": 276168908,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945663
    },
    {
        "content": "<p>What would be the new version?</p>",
        "id": 276168970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647945704
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">continuous_coord_change</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"bp\">‚àà</span> <span class=\"n\">trivialization_atlas</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_transitions</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">e'.to_local_equiv.symm.trans</span> <span class=\"n\">e.to_local_equiv</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 276169030,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945723
    },
    {
        "content": "<p>(swap <code>e</code> and <code>e'</code>)</p>",
        "id": 276169073,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945738
    },
    {
        "content": "<p>And likewise in <code>topological_vector_bundle_core</code> probably (?)</p>",
        "id": 276169134,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647945775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/276168871\">said</a>:</p>\n<blockquote>\n<p>There wasn't before, so if there is, I introduced it with that axiom <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>(I guess it's also perfectly possible that both directions are truly needed ... if so, that would be where Lang's Banach hypothesis comes in, to make inversion continuous.)</p>",
        "id": 276169653,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647946068
    },
    {
        "content": "<p>Switching certainly make that proof much easier</p>",
        "id": 276169735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647946105
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib/commit/de241ba3b61f8efc70fe15a51cc6dfd18267356c\">https://github.com/leanprover-community/mathlib/commit/de241ba3b61f8efc70fe15a51cc6dfd18267356c</a></p>",
        "id": 276170034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647946277
    },
    {
        "content": "<p>Great! Now to see whether the <code>symm</code> pops up somewhere else ... :)</p>",
        "id": 276170185,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647946358
    },
    {
        "content": "<p>That file is ok at least</p>",
        "id": 276170226,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647946399
    },
    {
        "content": "<p>But there is still a <code>continuous_coord_change</code> sorry at the very bottom</p>",
        "id": 276170260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647946427
    },
    {
        "content": "<p>For product bundles</p>",
        "id": 276170286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647946441
    },
    {
        "content": "<p>We really struggle with naming consistency for product-related stuff. Compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.prod\">docs#continuous_linear_map.prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_equiv.prod\">docs#continuous_linear_equiv.prod</a></p>",
        "id": 276183378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647953565
    },
    {
        "content": "<p>I got a bit of time and did one sorry from the direct sum section.</p>",
        "id": 276278850,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647999021
    },
    {
        "content": "<p>I finished the direct sum construction. I didn't understand why you replace one of my proofs from yesterday by a much more complicated one so I reverted that change (adding one more supporting definition to my proof).</p>",
        "id": 276309215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648029436
    },
    {
        "content": "<p>I also removed two sorries from <code>vector_bundle_hom.lean</code>, but I should do something else this afternoon.</p>",
        "id": 276316046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648033088
    },
    {
        "content": "<p>In order to deal with the <a href=\"https://github.com/leanprover-community/mathlib/blob/920dea82ac7164683b7d9950f31d520b5532fc03/src/topology/vector_bundle_hom.lean#L253-L254\">remaining sorries</a> in that proof, we may need to fill more fundamental holes. I think we don't have a topology on <code>continuous_linear_equiv</code>, even if everything is normed. Do you confirm? What was your plan for those sorries?</p>",
        "id": 276316292,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648033220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/276309215\">said</a>:</p>\n<blockquote>\n<p>I finished the direct sum construction. I didn't understand why you replace one of my proofs from yesterday by a much more complicated one so I reverted that change (adding one more supporting definition to my proof).</p>\n</blockquote>\n<p>It looked simpler but then I squeezed a simp :(</p>",
        "id": 276318744,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648034569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/276316292\">said</a>:</p>\n<blockquote>\n<p>In order to deal with the <a href=\"https://github.com/leanprover-community/mathlib/blob/920dea82ac7164683b7d9950f31d520b5532fc03/src/topology/vector_bundle_hom.lean#L253-L254\">remaining sorries</a> in that proof, we may need to fill more fundamental holes. I think we don't have a topology on <code>continuous_linear_equiv</code>, even if everything is normed. Do you confirm?</p>\n</blockquote>\n<p>I agree, there's no topology on <code>continuous_linear_equiv</code>; do we need it though?</p>",
        "id": 276318825,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648034615
    },
    {
        "content": "<p>I was hoping <br>\n<span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/276316292\">said</a>:</p>\n<blockquote>\n<p>Do you confirm? What was your plan for those sorries?</p>\n</blockquote>\n<p>I didn't think it through yet but I was hoping it (the continuity) would be some abstract nonsense from the alternative expression as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Œµ‚ÇÇ</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶‚ÇÅ</span> <span class=\"o\">(</span><span class=\"n\">Œµ‚ÇÅ</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 276319178,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648034779
    },
    {
        "content": "<p>composition is jointly continuous, <code>Œ¶‚ÇÇ </code> and <code>Œ¶‚ÇÅ </code> are continuous-linear so continuous, <code>Œµ‚ÇÇ</code> and <code>Œµ‚ÇÅ </code> are <code>continuous_on</code>, and (aha)! <code>linear_equiv.symm</code> is continuous by the argument we were discussing before, if we assume completeness.</p>",
        "id": 276319388,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648034884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/276318744\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/bundle.20of.20continuous.20linear.20maps/near/276309215\">said</a>:</p>\n<blockquote>\n<p>I finished the direct sum construction. I didn't understand why you replace one of my proofs from yesterday by a much more complicated one so I reverted that change (adding one more supporting definition to my proof).</p>\n</blockquote>\n<p>It looked simpler but then I squeezed a simp :(</p>\n</blockquote>\n<p>Even without squeezing it was longer.</p>",
        "id": 276321444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648036036
    },
    {
        "content": "<p>Anyway, I'll let you handle those two sorries, I have some proofreading to do and an overdue referee report to work on. But I think we can define a topology on <code>M ‚âÉSL[œÉ] M'</code> using the embedding into <code>(M ‚ÜíSL[œÉ] M') √ó (M' ‚ÜíSL[œÉ'] M)</code> and prove we get a topological group, and then adapt your work on inversion to prove that inversion is continuous at a continuous linear map coming from an continuous linear equiv. We'll need all this one day anyway.</p>",
        "id": 276321805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648036268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I pushed a continuity proof. It is rather messy and uses temporary names but it type-checks.</p>",
        "id": 276626268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648218432
    },
    {
        "content": "<p>But there are rather serious elaboration issues when manipulating spaces of continuous semilinear maps. A lot of statement take ages to elaborate. This has nothing to do with proofs, the statements are slow. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> if you are bored you can have a look at this <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-vb\">branch#redefine-vb</a>, especially <code>src/topology/vector_bundle_hom.lean</code></p>",
        "id": 276626699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648218614
    },
    {
        "content": "<p>I'm currently working on <code>exists_loops</code>, but I'll try to take a look later.</p>",
        "id": 276634298,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648221599
    },
    {
        "content": "<p>Awesome!  (I'll come back to this after the talk on Saturday, sorry for the absence.)</p>",
        "id": 276638390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648223284
    },
    {
        "content": "<p>What do you think of PR'ing this now like I was proposing, temporarily reverting the claim that the tangent bundle is a vector bundle?</p>",
        "id": 276638525,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648223353
    },
    {
        "content": "<p>There are still two sorries in the <code>vector_bundle_hom</code> file, but I hope they have no mathematical content</p>",
        "id": 276640826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648224142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I knocked off the second-last sorry, and I also found a way to drop the completeness hypothesis (by using the reverse of one of the transition functions, so the continuity of the inverse comes for free).</p>",
        "id": 276966976,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648538721
    },
    {
        "content": "<p>Great!</p>",
        "id": 276967616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648539190
    },
    {
        "content": "<p>I got distracted by partitions of unity that were blocking two other quests, but I'll return to vector bundles soon (but probably not today).</p>",
        "id": 276967719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648539244
    },
    {
        "content": "<p>I proved the last sorry.  The proof was </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">e‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">he‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">e‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">he‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 277058357,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648584448
    },
    {
        "content": "<p>We have the bundle of continuous linear maps!  I'm going to start PR'ing, not the construction itself, but some preliminary re-working of the vector bundle files which will make the later diffs easier to read.</p>",
        "id": 277058464,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648584496
    },
    {
        "content": "<p>There will also be a lot of cleanup to do in <a href=\"https://github.com/leanprover-community/mathlib/blob/c4b598d7068e23eba51174824c033ef7810d3c99/src/topology/vector_bundle_hom.lean#L220-L271\">https://github.com/leanprover-community/mathlib/blob/c4b598d7068e23eba51174824c033ef7810d3c99/src/topology/vector_bundle_hom.lean#L220-L271</a></p>",
        "id": 277058957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648584748
    },
    {
        "content": "<p>We probably miss lemmas stated as explained in <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement\">https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement</a></p>",
        "id": 277059059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648584797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I have been getting the refactor ready for PR, <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-vb-only\">branch#redefine-vb-only</a> (this is just the refactor, not the bundle of continuous linear maps).  How do you feel about <a href=\"https://github.com/leanprover-community/mathlib/commit/5ffef8f3901241d54b35a1549f9f6af8aa677284\">this version</a> of the abstract-nonsense argument you had <a href=\"https://github.com/leanprover-community/mathlib/commit/864cb9724519afb35939e468362c8257630aa3ee\">disliked</a> when it wasn't given its own declaration?</p>",
        "id": 277686116,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649052739
    },
    {
        "content": "<p>I was able to prove that the tangent bundle is a vector bundle under the stricter definition, but it's messy.</p>",
        "id": 277686251,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649052870
    },
    {
        "content": "<p>Indeed we clearly need <code>continuous_linear_map.prod_mapL</code>, at least in our current way to do things. I'm still a little worried that our setup requires so much work to get such easy continuity results.</p>",
        "id": 277687816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649054556
    },
    {
        "content": "<p>And we'll need a docstring for this definition.</p>",
        "id": 277687834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649054580
    },
    {
        "content": "<p>And of course we florised versions, as in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M‚ÇÅ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">R‚ÇÅ</span> <span class=\"n\">M‚ÇÅ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÉ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">R‚ÇÅ</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M‚ÇÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÑ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M‚ÇÉ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">R‚ÇÅ</span> <span class=\"n\">M‚ÇÉ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M‚ÇÑ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÖ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">R‚ÇÅ</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous.prod_mapL</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous.prod_map_equivL</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚âÉ</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚âÉ</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">√ó</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span> <span class=\"bp\">√ó</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_on.prod_mapL</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_on.prod_map_equivL</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚âÉ</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚âÉ</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">√ó</span> <span class=\"n\">M‚ÇÉ</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">M‚ÇÇ</span> <span class=\"bp\">√ó</span> <span class=\"n\">M‚ÇÑ</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 277690039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649056288
    },
    {
        "content": "<p>So that <a href=\"https://github.com/leanprover-community/mathlib/commit/5ffef8f3901241d54b35a1549f9f6af8aa677284#diff-79d90cc0e04ff77cc1545538bb22d0bb33304bc4b687d2e3912626f2585a91c6R1051-R1054\">https://github.com/leanprover-community/mathlib/commit/5ffef8f3901241d54b35a1549f9f6af8aa677284#diff-79d90cc0e04ff77cc1545538bb22d0bb33304bc4b687d2e3912626f2585a91c6R1051-R1054</a> can become <code>exact hŒµ.prod_map_equivL hŒ∑</code></p>",
        "id": 277690171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649056382
    },
    {
        "content": "<p>And now I'll go teaching.</p>",
        "id": 277690238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649056441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/13165\">#13165</a></p>",
        "id": 277734614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649080805
    },
    {
        "content": "<p>I finished cleaning up the refactor branch and opened <a href=\"https://github.com/leanprover-community/mathlib/pull/13175\">#13175</a>.</p>",
        "id": 277826404,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649132939
    },
    {
        "content": "<p>I merged <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom\">branch#vb-hom</a> with master.</p>\n<p>There are some diverging changes in the vector bundle and fiber bundle file, and for now I chose the changes of the library. This breaks some definitions in the hom file. On the other hand, we should be able to use some of the new additions to the library (like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle.trivialization.symm\">docs#topological_vector_bundle.trivialization.symm</a>) to simplify some proofs.</p>",
        "id": 283776708,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653411935
    },
    {
        "content": "<p>In this branch, the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_fiber_prebundle\">docs#topological_fiber_prebundle</a> is modified to not require a topology on the fibers. Do we indeed want to make that change?</p>",
        "id": 283776827,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653411971
    },
    {
        "content": "<p>I think we should make that change, yes.  This is the first use of <code>topological_fiber_prebundle</code> as far as I know, and it's not surprising that before that constructor had been used, we hadn't thought closely about what information would typically be available during the construction.</p>",
        "id": 283785483,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653416171
    },
    {
        "content": "<p>Ok, that seems reasonable. I separated that change out in <a href=\"https://github.com/leanprover-community/mathlib/pull/14377\">#14377</a>.</p>",
        "id": 283866233,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653475866
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom-floris\">branch#vb-hom-floris</a> I finished the definition of the topological vector bundle of continuous linear maps. <br>\nI started a new branch, because I wanted to define many notions differently (using various new definitions on trivializations, such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_bundle.pretrivialization.symm\">docs#topological_vector_bundle.pretrivialization.symm</a> and some others in <a href=\"https://github.com/leanprover-community/mathlib/pull/14484\">#14484</a>).<br>\nIt depends on <a href=\"https://github.com/leanprover-community/mathlib/pull/14462\">#14462</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/14484\">#14484</a>.</p>",
        "id": 284511765,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654018303
    },
    {
        "content": "<p>A bunch or PRes were merged so I created  <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom-again\">branch#vb-hom-again</a> which sits on top of <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-symmL\">branch#vb-symmL</a> which is currently borsed. The new <code>vector_bundle/hom.lean</code> has sorries in this branch but hopefully <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> will still have an easier time picking this up than rebasing on master.</p>",
        "id": 284754237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654180686
    },
    {
        "content": "<p>Thanks! I rebased on master and fixed the proofs. I'll clean up this branch and PR it today.</p>",
        "id": 284853038,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654247268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> on <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom\">branch#vb-hom</a> you define <code>trivialization.continuous_linear_map</code> for <em>any</em> two trivializations of the original vector bundles, not just the ones in the <code>trivialization_atlas</code> of the original vector bundles. <br>\nIt is easy to do it for the ones in the <code>trivialization_atlas</code> (using <code>trivialization_of_mem_pretrivialization_atlas</code>), but to what extend is it reasonable to do this for <em>any</em> <code>trivialization</code>? Don't we run into trouble if we have a trivialization which has a non-continuous coordinate change function w.r.t. the standard trivializations?</p>",
        "id": 284868324,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654258010
    },
    {
        "content": "<p>I don't understand what is the issue. I guess the vector bundle structure is defined using the relevant trivializations, but this particular declaration is more general, although it will be useless in the general case.</p>",
        "id": 284876901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654262245
    },
    {
        "content": "<p>The topology on the fibers is also defined using the relevant trivializations. <br>\nIf you want to define the continuous linear map trivialization between two trivializations <code>e1</code> and <code>e2</code>, I think you need that <code>e1</code> and <code>e2</code> have continuous coordinate change w.r.t. the trivializations in the atlas.</p>",
        "id": 284878714,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654263073
    },
    {
        "content": "<p>What do you mean by \"If you want to define the continuous linear map trivialization\"? Isn't it what Heather did?</p>",
        "id": 284882320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654264704
    },
    {
        "content": "<p>No, because the continuity proof depended on the lemma <code>continuous_triv_change_continuous_linear_map</code> (on <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom\">branch#vb-hom</a>) that contains sorries.</p>\n<p>I defined the bundle of continuous linear maps, I proved the lemma <code>continuous_on_continuous_linear_map_coord_change</code> (on <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom-floris\">branch#vb-hom-floris</a> or <a href=\"https://github.com/leanprover-community/mathlib/tree/vb-hom-again\">branch#vb-hom-again</a>), where I needed the hypotheses that the trivializations are in the atlas. The conclusion of my lemma is also stronger: the coordinate change function as a function into the space of continuous linear maps is continuous. This is needed since we redefined vector bundles so that they have the correct definition for infinite-dimensional spaces.</p>\n<p>And now I'm inquiring whether it is possible to define <code>trivialization.continuous_linear_map</code> without assuming that the original trivializations lie in the corresponding atlases, as Heather's code claimed to do. If this is possible, I might need to prove some weaker continuity condition for the coordinate change function, which doesn't require that the trivializations are in the atlas, but I don't know what condition we would need exactly. I hope this explains my question.</p>",
        "id": 284883913,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654265441
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/14541\">#14541</a> with the vector bundle of continuous linear maps, depending on <a href=\"https://github.com/leanprover-community/mathlib/pull/14535\">#14535</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/14539\">#14539</a></p>",
        "id": 284971304,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1654338525
    },
    {
        "content": "<p>Thanks! Did you see that the linter is unhappy with <a href=\"https://github.com/leanprover-community/mathlib/pull/14541\">#14541</a>?</p>",
        "id": 285039964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654440782
    }
]