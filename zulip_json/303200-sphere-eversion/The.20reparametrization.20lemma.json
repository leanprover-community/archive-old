[
    {
        "content": "<p>Gromov's reparametrization lemma roughly says that if you have a loop <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo>:</mo><msup><mi mathvariant=\"double-struck\">S</mi><mn>1</mn></msup><mo>→</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma : \\mathbb{S}^1 \\to E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> for some real vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is in the interior of the convex hull of the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> then one can reparametrize <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>, ie precompose it will a diffeomorphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{S}^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> to ensure the average value of the new loop is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>. In addition this can be done parametrically for any family of loops and target points. The proof uses smoothness of barycentric coordinates, smooth partitions of unity and integration. On paper the proof talks about measures but they are all measures admitting a smooth density with respect to the Lebesgue measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{S}^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> so measure theory is not really involved.</p>",
        "id": 256758195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633707344
    },
    {
        "content": "<p>I've been slowly making progress on this lemma and pushing progress to <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/51\">https://github.com/leanprover-community/sphere-eversion/pull/51</a></p>\n<p>The actual content of the result is that one can construct a smooth density function (representing a measure) with certain properties. Given this, one just uses the change-of-variables formula for an interval integral to get the actual result. The PR above (still very much WIP) does not address the content at all but just sets up the basic structure.</p>",
        "id": 272814513,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645542107
    },
    {
        "content": "<p>Sounds good! Don't hesitate to write documentation (module-level and declaration-level docstrings) as you go. Also you can push directly to master if you want. If you fear collisions with Floris then I suggests Floris creates a new file for <code>exists_loop</code> instead of having it in the reparametrization file where I originally put it.</p>",
        "id": 272821596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645544918
    },
    {
        "content": "<p>It makes me think than when you'll be ready to go to the partition of unity argument you should probably talk with Floris about how he proved the <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/5ee821167e8ee5337a65f1c6cef4ee4c98b391b5/src/loops/surrounding.lean#L721\">extend_loop lemma</a></p>",
        "id": 272821851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645545005
    },
    {
        "content": "<p>Thanks, my current plan is to squash the easy <code>sorry</code>s I've introduced so that this is reduced entirely to the existence of the density function. (This will probably take me a day or two.) Then I will either establish the local existence _or_ reduce the global existence to the local existence via the partition of unity arguement. Once I get there I'll pester Floris.</p>",
        "id": 272826687,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645546769
    },
    {
        "content": "<p>I'm happy to stay on this branch till I've reduce the problem to the existence of the density and then I may start working against master.</p>",
        "id": 272826776,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645546801
    },
    {
        "content": "<p>On second thought I think I might merge <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/51\">https://github.com/leanprover-community/sphere-eversion/pull/51</a> and start working off master now.</p>",
        "id": 272842935,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645553041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> this would just move <code>exists_loops</code> out of <code>loops/reparameterization.lean</code> and into a new file <code>loops/exists.lean</code>. Is that OK with you? Any other concerns etc?</p>",
        "id": 272843048,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645553085
    },
    {
        "content": "<p>No concerns here. I haven't touched the relevant declarations recently.</p>",
        "id": 272845071,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645553980
    },
    {
        "content": "<p>Ok, I merged.</p>",
        "id": 272845552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645554189
    },
    {
        "content": "<p>Excellent, thanks!</p>",
        "id": 272845568,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645554196
    },
    {
        "content": "<p>And I confirm the project still builds <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 272845608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645554209
    },
    {
        "content": "<p>I see the reparametrization file still contains <code>smooth_at</code> but now everything should be smooth everywhere.</p>",
        "id": 272846027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645554372
    },
    {
        "content": "<p>Yes, there is a bit of legacy which I'll efface shortly.</p>",
        "id": 272846055,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645554393
    },
    {
        "content": "<p>Also make sure you always keep <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement\">https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement</a> in mind, it works really well.</p>",
        "id": 272846170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645554446
    },
    {
        "content": "<p>Yes!</p>",
        "id": 272846890,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645554713
    },
    {
        "content": "<p>I was a total convert to this once I saw the comments Floris generously left at <a href=\"https://github.com/leanprover-community/mathlib/pull/10354\">#10354</a> (and which I still must get back to some day).</p>",
        "id": 272847044,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645554777
    }
]