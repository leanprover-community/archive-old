[
    {
        "content": "<p>I redefined <code>surrounding_family</code> today. There was a mistake in its definition, since <code>U</code> did not occur in the definition of <code>surrounding_family g b γ U</code>.</p>\n<p>According to the blueprint the definition should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">surrounding_family</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">loop</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">surrounds</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">surrounds</span> <span class=\"bp\">$</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"bp\">↿</span><span class=\"n\">γ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I actually redefined it to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">surrounding_family</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">loop</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">surrounds</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">surrounds</span> <span class=\"bp\">$</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"bp\">↿</span><span class=\"n\">γ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The difference is that <code>base</code> and <code>t₀</code> hold for <em>all</em> points in <code>E</code>. <br>\nThis way, I could reuse the proof of <code>satisfied_or_refund</code> by changing ~12 characters (introducing and using an assumption called <code>hx</code> twice). (Unrelatedly I also refactored the proof of <code>satisfied_or_refund</code>.)<br>\nI hope this definition is be fine, since those fields should be easy to satisfy globally. Do you think this will cause problems <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>?</p>",
        "id": 262093795,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637340692
    },
    {
        "content": "<p>Of course not mentioning U was a typo. And of course in the traditional way of writing math, everything would be defined only on U. I hope the new version will be convenient but this is purely a formalization question, it has no mathematical content.</p>",
        "id": 262122639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637352417
    },
    {
        "content": "<p>So I can't answer before trying to use it.</p>",
        "id": 262122749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637352473
    },
    {
        "content": "<p>That's reasonable. Let's try it (and I understand that this has no mathematical content).</p>",
        "id": 262125753,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637353914
    }
]