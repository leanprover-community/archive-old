[
    {
        "content": "<p>Recently I've been wondering whether we should try to make everything in Chapter 1 smooth on the whole space to simplify things in Chapter 2. We already know we need things to be defined on a neighborhood of the closure of the open sets we really care about. What I currently think is that we should prove the data in Proposition 1.3 smoothly extend to the whole space. Of course this isn't quite true in this context, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">β</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> could go to infinity near infinity in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>. But we can pick any closed set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> contained in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> and find new <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">β</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">Ω</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span> that are defined everywhere and coincide with the old ones on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>.</p>",
        "id": 272545128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645307594
    },
    {
        "content": "<p>There is a relevant discussion in <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Bump.20functions\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Bump.20functions</a>.</p>",
        "id": 272545137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645307622
    },
    {
        "content": "<p>The idea is to multiply <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">β</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> by a function which is one near <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and has compact support in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>, and replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Ω</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">Ω_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> by the whole <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> outside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>. The new <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> we actually care about would be the interior of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>.</p>",
        "id": 272545313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645307785
    },
    {
        "content": "<p>Recall that in real life those <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> sets come from charts of a manifold and we can definitely assume they are relatively compact in images of larger charts still covering the manifold.</p>",
        "id": 272545355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645307861
    },
    {
        "content": "<p>I'll try to find time this week to make sure this all work on paper and update the blueprint. But anyone should feel free to do it first.</p>",
        "id": 272545424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645307928
    },
    {
        "content": "<p>I thought a bit more about this and actually we won't even have to extend anything if the manifold library is usable enough.</p>",
        "id": 272618052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645392899
    },
    {
        "content": "<p>This will answer a question I've had since the very beginning of manifolds in Lean. What mathlib calls manifolds are manifolds equipped with a preferred atlas. Now we'll learn whether equivalent atlas can indeed be manipulated easily. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> we'll need to tell Lean that every manifold without boundary has an atlas where all charts take value into the whole model vector space and the preimages of the unit ball in the model space cover the manifold. And we'll need Lean to be happy to use only such an atlas instead of whatever came with the original \"manifold with a prefered atlas, known as manifold in mathlib\". Any advice is welcome.</p>",
        "id": 272618260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645393125
    },
    {
        "content": "<p>You can definitely prove that any manifold is diffeomorphic to a manifold whose atlas satisfies the property you want. But I am not sure it is the way to go: the atlas is only some data useful to get the right notion of smoothness, but it's not something you have to use in your proofs once the notion of smoothness is here. For instance, you could prove that there exists a family of local diffeomorphisms with the properties you mention, with domains covering the manifold, and this should probably be enough for all your proofs without touching the atlas at all.</p>",
        "id": 272621176,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1645396319
    },
    {
        "content": "<p>If you don't want to use the word \"atlas\" for a family of local diffeomorphisms whose domains cover the manifold and whose targets are the model space then I'll be happy not to use it (although it will sound a bit silly). The question is whether this family will be easy to use. I guess we'll see when trying.</p>",
        "id": 272680480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645445792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I confirm that I'll get rid of <code>U</code> in Chapters 1 and 2, using the existence of nice atlases in Chapter 3. I'm sorry I underestimated how painful it would be to handle <code>U</code>.  I thought about how to handle it from a Lean point of view, but it created mathematical complications that I didn't anticipate.</p>",
        "id": 272699074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645455682
    },
    {
        "content": "<p>OK, thanks for the notice.</p>",
        "id": 272699364,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645455809
    },
    {
        "content": "<p>I spent all morning reviewing PRs but I'm back working on reparameterisation lemma now.</p>",
        "id": 272699513,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645455861
    },
    {
        "content": "<p>I might be misunderstanding, but we're only changing that the functions are continuous/smooth everywhere instead of just on <code>U</code>, right? That's what we were already doing in the formalization.</p>",
        "id": 272701130,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645456620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Smooth.20extensions/near/272701130\">said</a>:</p>\n<blockquote>\n<p>I might be misunderstanding, but we're only changing that the functions are continuous/smooth everywhere instead of just on <code>U</code>, right? That's what we were already doing in the formalization.</p>\n</blockquote>\n<p>I mean U=univ in the main proposition of chapter 1. Of course there are still lemmas where open sets appear.</p>",
        "id": 272701776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645456946
    },
    {
        "content": "<p>The reparametrization lemma has U=univ</p>",
        "id": 272701915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645457023
    },
    {
        "content": "<p>Oh, I see. Yeah, that will probably simplify some things.</p>",
        "id": 272704011,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645458059
    },
    {
        "content": "<p>I updated the blueprint. I hope Chapter 1 and 2 are now using the whole E wherever possible. I'll now update Lean code.</p>",
        "id": 272730477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645474011
    },
    {
        "content": "<p>I propagated the change to reparametrization.lean and the files in the <code>local</code> folder. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I commented out your WIP version of <code>exists_loop</code> because I wasn't 100% sure how to fix it.</p>",
        "id": 272735011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645477533
    },
    {
        "content": "<p>Sounds good! I'll take a look at it.</p>",
        "id": 272782361,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645524476
    },
    {
        "content": "<p>Is there a missing file?</p>",
        "id": 272784507,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645525817
    },
    {
        "content": "<p><code>import notations</code> failing.</p>",
        "id": 272784529,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1645525827
    }
]