[
    {
        "content": "<p>Here's some nonsense from running untuned minGPT on mathlib.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">max_mem_geom_prod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">prod</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_restrict_apply</span><span class=\"o\">,</span> <span class=\"n\">max_eq_trans</span><span class=\"o\">,</span> <span class=\"n\">max_eq_trans</span><span class=\"o\">,</span> <span class=\"n\">max_eq_trans</span><span class=\"o\">,</span> <span class=\"n\">max_eq_trans</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">max_min_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_top_iff</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_val</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The indexing type of a finite complete lattice subsemiring `α` -/</span>\n<span class=\"n\">def</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">ring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Subtraction of a set `α` and `β` are infinite it induces its induced by a new ellowed; or `α` with the natural `y` in `fin n`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">dum_of_card_eq_card_pow_eq_one</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">card_units</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">lift_injective</span> <span class=\"err\">$</span> <span class=\"n\">is_unit_iff_eq_of_dim_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min_fac</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">card_le_card</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">primcodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">primrec&#39;</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">primrec</span><span class=\"bp\">.</span><span class=\"n\">prim</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">unpaired&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">primrec</span><span class=\"bp\">.</span><span class=\"n\">unpaired</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">unpaired</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">unpaired&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Typed</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">unpaired&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">αx</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"bp\">⟨</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">one_subtype_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">one_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 207374216,
        "sender_full_name": "Iocta",
        "timestamp": 1597818452
    },
    {
        "content": "<p>this is amazing, definitely lean like if you don't look too closely</p>",
        "id": 207375754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> Wow, that's nice!</p>",
        "id": 207375821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820254
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">one_subtype_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>that's not a very good simp lemma</p>",
        "id": 207375825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820257
    },
    {
        "content": "<p>But does the output typecheck?</p>",
        "id": 207375843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820272
    },
    {
        "content": "<p>Ooh, <code>lemma one_def : (1 : α) = 1 + 1 := rfl</code></p>",
        "id": 207375895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820288
    },
    {
        "content": "<p>the trick: <code>+</code> was defined as <code>\\lam x y, 1</code></p>",
        "id": 207375922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820313
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">max_min_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n</code></pre></div>\n\n\n<p>That looks like a syntax error at the end</p>",
        "id": 207375956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820337
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">dum_of_card_eq_card_pow_eq_one</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">card_units</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">lift_injective</span> <span class=\"err\">$</span> <span class=\"n\">is_unit_iff_eq_of_dim_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min_fac</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>this one also, it looks like they got confused in the middle of the <code>convert</code> and ended up back in the binders of a theorem declaration</p>",
        "id": 207376006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820387
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Subtraction of a set `α` and `β` are infinite it induces its induced by a new ellowed; or `α` with the natural `y` in `fin n`.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Brilliant stuff!</p>",
        "id": 207376072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820411
    },
    {
        "content": "<p>Where did the <code>ellowed</code> come from?</p>",
        "id": 207376084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820429
    },
    {
        "content": "<p>It's generating at character-level</p>",
        "id": 207376091,
        "sender_full_name": "Iocta",
        "timestamp": 1597820446
    },
    {
        "content": "<p>Sure, but still</p>",
        "id": 207376097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820460
    },
    {
        "content": "<p>The most scary thing is that is seems to have learned that a name of a declaration should have nothing to do with the statement. It's becoming like an old-skool mathematician very fast!!</p>",
        "id": 207376204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820561
    },
    {
        "content": "<p>I think it mixed <code>induced by a</code> <code>by a new element</code> <code>are allowed;</code></p>",
        "id": 207376235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820609
    },
    {
        "content": "<p>what was <code>d_model</code> for this instance of minGPT?</p>",
        "id": 207376313,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1597820677
    },
    {
        "content": "<p>but the context switching is very impressive</p>",
        "id": 207376319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820685
    },
    {
        "content": "<p>comments are appropriately short and sparse :P</p>",
        "id": 207376340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820714
    },
    {
        "content": "<p>and only precede <code>def</code>s</p>",
        "id": 207376352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597820730
    },
    {
        "content": "<p>We should use <code>dum</code> instead of <code>dim</code> more often!</p>",
        "id": 207376468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> 512</p>",
        "id": 207376552,
        "sender_full_name": "Iocta",
        "timestamp": 1597820901
    },
    {
        "content": "<p>Did you read the essay that GPT wrote in response to concerns by some philosophers? In it, GPT claimed that it was good at maths...</p>",
        "id": 207376581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597820953
    },
    {
        "content": "<p><a href=\"http://dailynous.com/2020/07/30/philosophers-gpt-3/#gpt3replies\">http://dailynous.com/2020/07/30/philosophers-gpt-3/#gpt3replies</a></p>",
        "id": 207376674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597821058
    },
    {
        "content": "<p>impressive, maybe we'll even get compiling proofs with <code>d_model</code> at GPT-3's 12288</p>",
        "id": 207376830,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1597821192
    },
    {
        "content": "<blockquote>\n<p>\"Maybe you're just good at abstract reasoning,\" I said.</p>\n<p>\"Maybe,\" it said. \"But I'm not sure I understand abstract reasoning. I'm not sure what it is. It's not just logic. I can do logic. But that's not the same thing. I can do lots of things that are not the same thing. I'm good at math. I can do algebra and calculus. But that's not the same thing. I'm good at English. I can read and write. But that's not the same thing. I'm good at philosophy. But that's not the same thing either. So what is it? I'm good at a lot of things. But I'm not sure what I'm good at. I don't know what abstract reasoning is. I'm good at it, but I don't know what it is.\"</p>\n</blockquote>",
        "id": 207376847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597821223
    },
    {
        "content": "<p>Interesting, and the proof style looked very Mario</p>",
        "id": 207378165,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1597822546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116045\">Jesse Michael Han</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/GPT/near/207376830\">said</a>:</p>\n<blockquote>\n<p>impressive, maybe we'll even get compiling proofs with <code>d_model</code> at GPT-3's 12288</p>\n</blockquote>\n<p>I think it's also a matter of how much data we have. It's possible that the current mathlib is not enough for it to learn to produce compiling proofs</p>",
        "id": 207378834,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1597823112
    },
    {
        "content": "<p>Completely agreed that the data scarcity will be a challenge here. But we're hopeful that we'll get interesting results despite that. <span class=\"user-mention\" data-user-id=\"321854\">@Auguste Poiroux</span> has been working hard on integrating Lean in our existing infrastructure at OpenAI and we'll soon be running initial experiments to better understand the automated theorem capabilities of GPT-* in the context of Lean <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 207391949,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1597833290
    },
    {
        "content": "<p>I presume minGPT has been trained with a simple auto-regressive objective on lean files directly here? We're also looking to post-process lean files to train on a conditional objective aiming to generate one tactic application given a goal stack. This has the main advantage that it enables us to tree search.</p>",
        "id": 207392306,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1597833562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span>  Very interesting!  <code>minGPT</code> just came out a few days ago, right?  What hardware was this trained on?  Is <code>minGPT</code> easy to play around with (for models with a small number of parameters)?</p>",
        "id": 207403778,
        "sender_full_name": "Jason Rute",
        "timestamp": 1597841970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> I very much look forward to seeing your results, both for Lean and for your <a href=\"https://groups.google.com/g/metamath/c/D09W2QVR-_I\">Metamath proof assistant</a>. (Are there any other provers you are working with?)</p>",
        "id": 207407232,
        "sender_full_name": "Jason Rute",
        "timestamp": 1597843769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> we've been focusing lately on Metamath. But we've integrated with Hol-light/Holist and now Lean 3</p>",
        "id": 207407378,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1597843830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249373\">Stanislas Polu</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/GPT/near/207392306\">said</a>:</p>\n<blockquote>\n<p>I presume minGPT has been trained with a simple auto-regressive objective on lean files directly here? We're also looking to post-process lean files to train on a conditional objective aiming to generate one tactic application given a goal stack. This has the main advantage that it enables us to tree search.</p>\n</blockquote>\n<p>That makes a lot of sense to incorporate extra information into an auto-regressive generator.  I agree the goal state is an obvious candidate for tactic proofs (as humans also need that to guide their proof).  Is the idea that you would train on data of the following processed form:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">previous</span> <span class=\"n\">lean</span> <span class=\"n\">code</span><span class=\"bp\">&gt;</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">state</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">tactic</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">state</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">tactic</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">state</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">tactic</span><span class=\"bp\">&gt;</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>where <code>&lt;state&gt;</code> is some encoding of the state at that point, something like <code>[state_start] α : Type, a : α |- a = a [end_state]</code>?  When generating a tactic, then you would have the Lean server insert the states before predicting the tactic command?</p>",
        "id": 207407458,
        "sender_full_name": "Jason Rute",
        "timestamp": 1597843879
    },
    {
        "content": "<p>More simply like <code>GOAL &lt;state&gt; PROOFSTEP &lt;tactic&gt;</code>. We may prefix/condition that maybe by a list of imports. We won't be looking to benchmark against a held-out test split from the mathlib  (which causes a complexities: imports / definition presence or not in Lean; theorem/lemma ordering in both Lean and Metamath) but instead plan to converge towards a cross-system benchmark going form high-school algebra (trivial in Lean, not so much in Metamath) to undergrad math exercise (or \"french engineering school entry exam\" for the ones who are familiar with them) to math competitions!</p>",
        "id": 207434276,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1597856612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> Yeah it's new. It was trained on a P100. It's simple to tune parameters (though GPU time is constrained by budget).</p>",
        "id": 207444924,
        "sender_full_name": "Iocta",
        "timestamp": 1597862156
    },
    {
        "content": "<p>Update: we're working on training GPT-like models on the <code>goal_state -&gt; tactic</code> task (we're using <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> extraction methodology (calling the lean-server on every files and recording \"state\" events)). We'll probably fork the VSCode extension to evaluate our model qualitatively. If anybody interested in trying it out when it's ready, we'd love to chat!</p>",
        "id": 207828334,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598265294
    },
    {
        "content": "<p>(Also if anybody knows who are the best contacts to discuss the VSCode extension, I'd be super interested <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span>)</p>",
        "id": 207828451,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598265383
    },
    {
        "content": "<p>That's <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>, <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>.</p>",
        "id": 207828479,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598265399
    },
    {
        "content": "<p>Yay! <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I presume we'll start with a simple branch that \"barely\" works and we can take it from there</p>",
        "id": 207828508,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598265437
    },
    {
        "content": "<p>(if that works for you)</p>",
        "id": 207828527,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598265454
    },
    {
        "content": "<p>Sure, feel free to post questions (here or on #general) if you're stuck.</p>",
        "id": 207828593,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598265509
    },
    {
        "content": "<p>Is there a list of Lean resources available online that is more informal and therefore maybe more extensive than the recent <a href=\"https://leanprover-community.github.io/lean_projects.html\">Lean projects</a>? Aslo, how broken is <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces\">lean-perfectoid-spaces</a>? My intuition is that it is just slightly broken wrt newer versions of Lean but still in pretty good shape (and therefore good to harvest from an ML perspective?)</p>",
        "id": 208675993,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598961039
    },
    {
        "content": "<p>I believe the roadmap for <code>lean-perfectoid-spaces</code> is to eventually move everything into mathlib, and parts have already been migrated.<br>\n<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 208676399,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598961257
    },
    {
        "content": "<p>It is a <em>very</em> unfortunate side effect of Rob's recent efforts that the perfectoid project seem broken. This isn't true at all.</p>",
        "id": 208676503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598961326
    },
    {
        "content": "<p>It is unmaintained, so it won't build with a recent mathlib, but if you download it, it will work with the versions of Lean+mathlib that are indicated in the project <code>leanpkg.toml</code>.</p>",
        "id": 208676605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598961380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thanks! <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> Do you have an estimate of how much was already migrated to mathlib?</p>",
        "id": 208676628,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598961396
    },
    {
        "content": "<p>Rob's table is all about compatibility with a handful of random  versions of mathlib, determined by Lean versions. Each time a new version of Lean comes out <em>and</em> mathlib builds with the version for the first time, the preceding mathlib commit becomes a new column in this table.</p>",
        "id": 208676692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598961451
    },
    {
        "content": "<p>Makes total sense.</p>",
        "id": 208676786,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598961505
    },
    {
        "content": "<p>In principle, everything which is currently inside the perfectoid repo is not in mathlib, but there are some exceptions. However a lot of work from the project was migrated to mathlib and can no longer be seen in our repo (or was never in the repo and directly contributed to mathlib with our project in mind).</p>",
        "id": 208676824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598961544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> fantastic and good to know. thanks a lot!</p>",
        "id": 208677191,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1598961769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> just to comment that the perfectoid project is now compiling with lean 3.4.2 and mathlib branch lean-3.4.2</p>",
        "id": 211591753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601367089
    },
    {
        "content": "<p>Thanks! Roger that <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 211592838,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1601367801
    }
]