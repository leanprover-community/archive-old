[
    {
        "content": "<p>If you miss Galactica, you may enjoy talking to OpenAI's latest ChatGPT: <a href=\"http://chat.openai.com\">chat.openai.com</a>. It's not very good at math though: <a href=\"https://twitter.com/solodolomoon/status/1598184458313953281\">https://twitter.com/solodolomoon/status/1598184458313953281</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/solodolomoon/status/1598184458313953281\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/86c266846d996312a108112e2f09c36ce22d8779/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313532303535313239343331333834343733362f3470444d735079425f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/OpenAI\">@OpenAI</a> WTH!! <a href=\"https://t.co/EOZYhXwEbR\">https://twitter.com/solodolomoon/status/1598184458313953281/photo/1</a></p><span>- bhavin (@solodolomoon)</span><div class=\"twitter-image\"><a href=\"https://t.co/EOZYhXwEbR\"><img src=\"https://uploads.zulipusercontent.net/4d4b7698bcd1154e7a3e0c4ee8af53f3a30bdab0/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4669336b503962575141416548712d2e706e673a7468756d62\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/EOZYhXwEbR\"><img src=\"https://uploads.zulipusercontent.net/eab2382622f50142f26a4909b23a44174474fa7d/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4669336b503961586b41413070422d2e706e673a736d616c6c\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/EOZYhXwEbR\"><img src=\"https://uploads.zulipusercontent.net/4998895b4ea031005a571c81dee23e60a26c3cf7/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4669336b50396957414145673441692e706e673a7468756d62\"></a></div></div></div>",
        "id": 313224481,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669882696
    },
    {
        "content": "<p>Other interesting examples:<br>\n<a href=\"https://twitter.com/srikumarks/status/1598158895692021760\">https://twitter.com/srikumarks/status/1598158895692021760</a> and replies<br>\n<a href=\"https://twitter.com/ashleydaviesl/status/1598110039004573696\">https://twitter.com/ashleydaviesl/status/1598110039004573696</a><br>\n<a href=\"https://twitter.com/AndrewBroz/status/1598151011495219200\">https://twitter.com/AndrewBroz/status/1598151011495219200</a><br>\n<a href=\"https://twitter.com/dtaylor84/status/1598094448592064513\">https://twitter.com/dtaylor84/status/1598094448592064513</a> (this is probably copied from an exposition like <a href=\"https://www.numere-prime.ro/calculated-gcf-hcf-gcd-greatest-highest-common-factor-divisor.php?number1=17&amp;number2=21\">this</a>)<br>\nbonus: <a href=\"https://twitter.com/aron_brand/status/1597619580444487682\">https://twitter.com/aron_brand/status/1597619580444487682</a> (another model, not ChatGPT)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/srikumarks/status/1598158895692021760\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/ff3e224efd383aca5fe404ce6ac87bc7192a4d96/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313133303734353536382f6d652d666163655f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/goodside\">@goodside</a> Certainly seems better! .. though pianos do have strings. <a href=\"https://t.co/rdFzIT7Njb\">https://twitter.com/srikumarks/status/1598158895692021760/photo/1</a></p><span>- Srikumar Subramanian (@srikumarks)</span><div class=\"twitter-image\"><a href=\"https://t.co/rdFzIT7Njb\"><img src=\"https://uploads.zulipusercontent.net/67ce192f0ca8c95acffc95c5b2502e62bc2fc437/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4669334d347a466155414d484f76772e6a70673a736d616c6c\"></a></div></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ashleydaviesl/status/1598110039004573696\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/6794f3c25ae22c88d5f038b5b55c8ed38e7516b3/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313531343335303039333333313332303834302f436a6977637730755f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/Peter_0_0_g\">@Peter_0_0_g</a> <a href=\"https://twitter.com/goodside\">@goodside</a> Writing plays also works quite well, and you can often get it to rephrase what it just said as a concrete plan, which seems to get around the initial hesitation it has of writing factual information</p><span>- Ashley Davies 🦔 (@ashleydaviesl)</span></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/AndrewBroz/status/1598151011495219200\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/55b19d0e1756d22573fd6e724ea180e016085a8f/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313339363539363632303731363639353535352f59306c304e4639345f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/goodside\">@goodside</a> This family of questions trips ChatGPT up quite a bit. I tried another question with a correct answer that is definitely available in the training data, &amp; it trips up here too for similar reasons: <a href=\"https://t.co/JxNTYQq6iW\">https://twitter.com/AndrewBroz/status/1598151011495219200/photo/1</a></p><span>- Andrew Brož 🇺🇦 (@AndrewBroz)</span><div class=\"twitter-image\"><a href=\"https://t.co/JxNTYQq6iW\"><img src=\"https://uploads.zulipusercontent.net/5e5e41fbcc09eaa22dec10f5c0428cf24ad23e75/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46693346504148586b41493749666d2e6a70673a736d616c6c\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/JxNTYQq6iW\"><img src=\"https://uploads.zulipusercontent.net/45d798e6aceb63412cbca86fa26cf60fe65166be/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46693346325f69586b4145386a66492e6a70673a736d616c6c\"></a></div></div></div>",
        "id": 313225036,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669882915
    },
    {
        "content": "<p>I tried it on autoformalization.  Conversation:</p>\n<blockquote>\n<p>Me: I'd like to test your ability to formalize math into interactive theorem provers like Coq and Lean.</p>\n<p>GPTChat: Sure, I'd be happy to help with that. To use a formal theorem prover like Coq or Lean, you need to first specify the theorem or mathematical statement that you want to prove. Then, you can use the tools and techniques provided by the theorem prover to build a formal proof of the theorem, step by step. This usually involves defining any necessary mathematical concepts or lemmas, and using a combination of logical reasoning and basic axioms and rules of inference to gradually build up the proof.</p>\n<p>Me: Please translate, \"the direct product of two Abelian groups is Abelian\" into Lean using the mathlib library.</p>\n<p>GPTChat: To express the statement \"the direct product of two Abelian groups is Abelian\" in Lean using the mathlib library, you could use the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Define the direct product of G and H</span>\n<span class=\"kd\">def</span> <span class=\"n\">direct_product</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">H</span>\n\n<span class=\"c1\">-- Show that the direct product is an Abelian group</span>\n<span class=\"kd\">instance</span> <span class=\"n\">direct_product_is_abelian_group</span> <span class=\"o\">:</span> <span class=\"n\">abelian_group</span> <span class=\"o\">(</span><span class=\"n\">direct_product</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Show that the direct product is a group</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Show that the direct product is Abelian</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g1</span> <span class=\"n\">g2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This code first imports the necessary definitions from the <a href=\"http://algebra.group\">algebra.group</a> library in mathlib. Then, it defines a function direct_product that takes two groups G and H and returns their direct product as a new group. Finally, it uses the abelian_group typeclass to show that the direct product of G and H is an Abelian group.</p>\n</blockquote>",
        "id": 313269485,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669898565
    },
    {
        "content": "<p>(That doesn't work by the way.)</p>",
        "id": 313269924,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669898724
    },
    {
        "content": "<p>Interesting that it assumed <code>abelian</code> was a mixin in the hypotheses, but assumed it was bundled in the conclusion</p>",
        "id": 313272748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669899598
    },
    {
        "content": "<p>Tried getting it to solve the first advent of code problem in python, then in lean4 </p>\n<blockquote>\n<p>Hey, can you help me solve advent of code in python ? <br>\nA text file is given with 1 integer per line. Groups of integers are delimited by an empty line. Find the maximal group sum within the file</p>\n</blockquote>\n<blockquote>\n<p>Sure! This sounds like a fun problem to solve. First, let's make sure we understand the requirements and constraints of the problem.</p>\n<p>According to your description, the input file contains multiple groups of integers, with each group being separated by an empty line. Your task is to find the maximal sum of any of these groups.</p>\n<p>To solve this problem, we can first read the input file line by line, using the open() and readlines() functions in Python. Then, we can use a loop to iterate over each line of the input file, and parse the integers in each line. We can then keep track of the current group sum as well as the maximal group sum seen so far, updating them as needed as we go through each line of the input file.</p>\n<p>Here is some sample code that illustrates how you can solve this problem in Python:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Open the input file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'input.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Read the file lines</span>\n  <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Initialize the maximal group sum</span>\n<span class=\"n\">max_group_sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># Initialize the current group sum</span>\n<span class=\"n\">current_group_sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># Loop over each line of the input file</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n  <span class=\"c1\"># If the line is empty, update the maximal group sum</span>\n  <span class=\"c1\"># if the current group sum is greater than the maximal</span>\n  <span class=\"c1\"># group sum seen so far, and reset the current group sum</span>\n  <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">():</span>\n    <span class=\"n\">max_group_sum</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_group_sum</span><span class=\"p\">,</span> <span class=\"n\">current_group_sum</span><span class=\"p\">)</span>\n    <span class=\"n\">current_group_sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n  <span class=\"c1\"># Otherwise, parse the integers in the line and</span>\n  <span class=\"c1\"># add them to the current group sum</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()]</span>\n    <span class=\"n\">current_group_sum</span> <span class=\"o\">+=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Update the maximal group sum one last time</span>\n<span class=\"n\">max_group_sum</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_group_sum</span><span class=\"p\">,</span> <span class=\"n\">current_group_sum</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print the maximal group sum</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">max_group_sum</span><span class=\"p\">)</span>\n</code></pre></div>\n<blockquote>\n<p>Amazing, can you do this in Lean4 ?</p>\n</blockquote>\n<blockquote>\n<p>Yes, we can solve this problem using Lean4, a proof assistant and programming language. Lean4 is a powerful language that can be used to write programs that are both correct and efficient.</p>\n<p>Here is a solution to the problem using Lean4:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">maximal_group_sum</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">max_group_sum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">current_group_sum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">lines.forEach</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">line</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">line.isEmpty</span> <span class=\"k\">then</span>\n      <span class=\"n\">max_group_sum</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">max_group_sum</span> <span class=\"n\">current_group_sum</span>\n      <span class=\"n\">current_group_sum</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">numbers</span> <span class=\"o\">:=</span> <span class=\"n\">line.split</span> <span class=\"s2\">\" \"</span>\n      <span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">numbers.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.toNat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n      <span class=\"n\">current_group_sum</span> <span class=\"o\">:=</span> <span class=\"n\">current_group_sum</span> <span class=\"bp\">+</span> <span class=\"n\">sum</span><span class=\"o\">)</span>\n  <span class=\"n\">max</span> <span class=\"n\">max_group_sum</span> <span class=\"n\">current_group_sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"n\">xs.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">line</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not</span> <span class=\"n\">line.isEmpty</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">maximal_group_sum</span> <span class=\"n\">lines</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">result</span>\n  <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Evaluate</span> <span class=\"n\">main</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">input</span> <span class=\"n\">provided</span> <span class=\"n\">as</span> <span class=\"n\">command</span> <span class=\"n\">line</span> <span class=\"n\">arguments</span>\n<span class=\"n\">builtin.lean.builtin.export</span><span class=\"bp\">!</span> <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 313274586,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1669900046
    },
    {
        "content": "<p>Does it compile? Run?  Solve the problem?</p>",
        "id": 313301199,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669907332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/ChatGPT.20.2F.20Galactica/near/313301199\">said</a>:</p>\n<blockquote>\n<p>Does it compile? Run?  Solve the problem?</p>\n</blockquote>\n<p>just eyeballed it for now. There at least seems to be an extra filtering of empty lines in \"main\". Otherwise it doesn't look too far off. I'd need to set up lean4 to check for real though <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <br>\nI was mostly surprised that ChatGPT seems to know about lean4</p>",
        "id": 313304211,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1669908104
    },
    {
        "content": "<p>the python solution is basically the same thing I wrote ^^</p>",
        "id": 313304346,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1669908132
    },
    {
        "content": "<p>I've tried getting it to give formal proofs in lean3 of statements in minif2f, I got nothing that worked though.</p>",
        "id": 313304492,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1669908178
    },
    {
        "content": "<p>I love also how it advertises Lean 4 so well: </p>\n<blockquote>\n<p>Yes, we can solve this problem using Lean4, a proof assistant and programming language. Lean4 is a powerful language that can be used to write programs that are both correct and efficient.</p>\n</blockquote>",
        "id": 313310527,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669909840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359917\">@Timothee Lacroix</span> If you click the \"view in playground\", in the top corner of the info box it will take you to an online editor for Lean 4.  It is mixing up monadic and non-monadic syntax in the first function (and it forgot the <code>let mut</code>).  Also, List doesn't need to be imported.  But still, it is a good start.</p>",
        "id": 313312300,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669910351
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <br>\n<a href=\"/user_uploads/3121/NcaQarQFdpKieT0Meuu04dip/Screenshot-2022-12-01-at-15-31-33-ChatGPT.png\">Screenshot-2022-12-01-at-15-31-33-ChatGPT.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NcaQarQFdpKieT0Meuu04dip/Screenshot-2022-12-01-at-15-31-33-ChatGPT.png\" title=\"Screenshot-2022-12-01-at-15-31-33-ChatGPT.png\"><img src=\"/user_uploads/3121/NcaQarQFdpKieT0Meuu04dip/Screenshot-2022-12-01-at-15-31-33-ChatGPT.png\"></a></div>",
        "id": 313391822,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669933991
    },
    {
        "content": "<p>At least it sounds very confident in its answers (regardless of their correctness):<br>\n<a href=\"/user_uploads/3121/wVPl5JV20x3g84-cv6s05Bi4/Screenshot-2022-12-01-at-15-38-07-ChatGPT.png\">Screenshot-2022-12-01-at-15-38-07-ChatGPT.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wVPl5JV20x3g84-cv6s05Bi4/Screenshot-2022-12-01-at-15-38-07-ChatGPT.png\" title=\"Screenshot-2022-12-01-at-15-38-07-ChatGPT.png\"><img src=\"/user_uploads/3121/wVPl5JV20x3g84-cv6s05Bi4/Screenshot-2022-12-01-at-15-38-07-ChatGPT.png\"></a></div>",
        "id": 313392607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669934347
    },
    {
        "content": "<p>Oh boy, this is starting to sound like some discussions I might have during office hours about homework solutions:<br>\n<a href=\"/user_uploads/3121/lSxL_HWQ4UJF0SpQ6wutrgfo/Screenshot-2022-12-01-at-15-40-49-ChatGPT.png\">Screenshot-2022-12-01-at-15-40-49-ChatGPT.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lSxL_HWQ4UJF0SpQ6wutrgfo/Screenshot-2022-12-01-at-15-40-49-ChatGPT.png\" title=\"Screenshot-2022-12-01-at-15-40-49-ChatGPT.png\"><img src=\"/user_uploads/3121/lSxL_HWQ4UJF0SpQ6wutrgfo/Screenshot-2022-12-01-at-15-40-49-ChatGPT.png\"></a></div>",
        "id": 313392924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669934481
    },
    {
        "content": "<p>Are we really really sure they are not simply paying some undergrad to answer those questions pretending to be a computer?</p>",
        "id": 313393427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669934697
    },
    {
        "content": "<p>It's really hard to tell!</p>",
        "id": 313393512,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669934733
    },
    {
        "content": "<p>So, it is possible ChatGPT has seen (some of) them in the training data? Especially the question about pi - I guess it is quite classical and can be even in textbooks</p>",
        "id": 313407590,
        "sender_full_name": "Tom Chen",
        "timestamp": 1669941967
    },
    {
        "content": "<p>If it read textbooks about transcendence of pi (which I agree it probably did) then it still did a very bad job a regurgitating the proof.</p>",
        "id": 313435980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669963677
    },
    {
        "content": "<p>At least it can do the \"hello world\" of mathematics:</p>\n<blockquote>\n<blockquote>\n<p>Can you prove that there are infinitely many prime numbers?</p>\n</blockquote>\n<p>Yes, there are infinitely many prime numbers. One way to prove this is by contradiction. Suppose there are only finitely many prime numbers, say p1, p2, p3,...,pn. We can then construct a new number N by multiplying all of these prime numbers together and adding one: N = (p1 * p2 * p3 * ... * pn) + 1.</p>\n<p>Since N is not divisible by any of the prime numbers p1, p2, p3,...,pn (because it has a remainder of 1 when divided by any of these numbers), it must be either a prime number itself or have a prime factor that is not in the list of known prime numbers. In either case, this contradicts our assumption that the list of prime numbers was complete, so there must be infinitely many prime numbers.</p>\n</blockquote>",
        "id": 313446165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669968888
    },
    {
        "content": "<p>The response I got to Adam's question:</p>\n<blockquote>\n<p>Sure, here is an example of a nontrivial element of the absolute Galois group of the rational numbers: complex conjugation. The absolute Galois group of the rationals is the group of all automorphisms of the field of rational numbers, which are essentially just invertible mappings of the rationals to themselves that preserve the field operations of addition, subtraction, multiplication, and division. Complex conjugation is an automorphism of the field of complex numbers that fixes the real numbers and negates the imaginary part of any complex number. It can be extended to an automorphism of the field of rational numbers by fixing all of the rational numbers, so it is an element of the absolute Galois group of the rationals.</p>\n</blockquote>",
        "id": 313446285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669968958
    },
    {
        "content": "<p><a href=\"https://twitter.com/colin_fraser/status/1598237975120609280\">https://twitter.com/colin_fraser/status/1598237975120609280</a> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/colin_fraser/status/1598237975120609280\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/9f1039dda696499eb82bd3ce6379c8a79d6f1061/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313131333836333731353635393530393736302f4a63466755506a445f6e6f726d616c2e706e67\"></a><p>More of the chat bot being bad at math <a href=\"https://t.co/LbcgQ3JlMW\">https://twitter.com/colin_fraser/status/1598237975120609280/photo/1</a></p><span>- Colin Fraser (@colin_fraser)</span><div class=\"twitter-image\"><a href=\"https://t.co/LbcgQ3JlMW\"><img src=\"https://uploads.zulipusercontent.net/19aaa089c395c399fce1def3629bfc2b51caf341/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46693455393573614d41496d5f634b2e6a70673a7468756d62\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/LbcgQ3JlMW\"><img src=\"https://uploads.zulipusercontent.net/8a2619775bbe66288d2920305811e99718627e33/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46693455393570616341493764396e2e6a70673a7468756d62\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/LbcgQ3JlMW\"><img src=\"https://uploads.zulipusercontent.net/5bd12f2e8d2b1552225ef404eb08c44fb8c00c0e/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46693455393573616741454641795f2e6a70673a7468756d62\"></a></div></div></div>",
        "id": 313448490,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669969909
    },
    {
        "content": "<p>Seems good at taking advice: <a href=\"https://imgur.com/a/7Px4EtE\">https://imgur.com/a/7Px4EtE</a><br>\nDoes make me want to see how nice the outputs could be if you hooked error/warning messages up to it, so that it refines it repeatedly before showing the output.</p>",
        "id": 313572864,
        "sender_full_name": "MinusGix",
        "timestamp": 1670009028
    },
    {
        "content": "<p>You can ask it to write you a poem about category theory: <br>\n<a href=\"https://twitter.com/math3ma/status/1598776068969619456\">https://twitter.com/math3ma/status/1598776068969619456</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/math3ma/status/1598776068969619456\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/a414d1ce40f2efe65ad46fa0899d0562633a1a17/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313033393836343539363237323736323838302f31414c35675944435f6e6f726d616c2e6a7067\"></a><p>ChatGPT waxes poetic about category theory: <a href=\"https://t.co/nsuB1J1O2x\">https://twitter.com/math3ma/status/1598776068969619456/photo/1</a></p><span>- Tai-Danae Bradley (@math3ma)</span><div class=\"twitter-image\"><a href=\"https://t.co/nsuB1J1O2x\"><img src=\"https://uploads.zulipusercontent.net/d6080e7ea17e7505ce2f525b1ae913f097f9c390/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46695f2d4a4a34555541493278734e2e6a70673a7468756d62\"></a></div></div></div>",
        "id": 313646679,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1670055781
    }
]