[
    {
        "content": "<p><a href=\"https://arxiv.org/abs/2004.10667\" title=\"https://arxiv.org/abs/2004.10667\">Simple Dataset for Proof Method Recommendation in Isabelle/HOL (Dataset Description)</a> by Yutaka Nagashima</p>",
        "id": 195642202,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588116920
    },
    {
        "content": "<p>I really the abstract on this paper:</p>\n<blockquote>\n<p>Recently, a growing number of researchers have applied machine learning to assist users of interactive theorem provers. However, the expressive nature of underlying logics and esoteric structures of proof documents impede machine learning practitioners from achieving a large scale success in this field. In this data description, we present a simple dataset that represents the essence of choosing appropriate proof methods in Isabelle/HOL. Our simple data format allows machine learning practitioners to try machine learning tools to predict proof methods in Isabelle/HOL, even if they are unfamiliar with theorem proving.</p>\n</blockquote>",
        "id": 195642221,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588116950
    },
    {
        "content": "<p>I was just thinking that we need to make a list of all these datasets (especially as I add some to the list).</p>",
        "id": 195642284,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588116989
    },
    {
        "content": "<p>Here is the dataset: <a href=\"https://archive.org/details/PaMpeR_2018\" title=\"https://archive.org/details/PaMpeR_2018\">https://archive.org/details/PaMpeR_2018</a></p>",
        "id": 195642346,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588117075
    },
    {
        "content": "<p>So I read this paper.  It's not really a paper at all, but a short description and motivation for a dataset.  So let me briefly describe the dataset.</p>\n<ul>\n<li>It is the dataset used to build <a href=\"https://doi.org/10.1145/3238147.3238210\" title=\"https://doi.org/10.1145/3238147.3238210\">PaMpeR</a>, a proof method recommendation system for Isabelle/HOL by the same author.  The idea is very simple: predict the <em>proof method</em> (the Isabelle word for tactic) for a given goal (and context).  The author already has a system for doing this (PaMpeR), but I think they are looking for assistance (or competition) in improving their prediction algorithm.</li>\n<li>The dataset is very simple.  It is the simplest dataset for theorem proving that I know of, and the hope is that it will attract “machine learning researchers” to this area.  The dataset is just 382,801 lines of this:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>~/shared/afp-2018-02-26_eval/thys/Incompleteness/Coding_Predicates.thy722 auto 1,0,0,0,1,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n</code></pre></div>\n\n\n<p>You may say: I see the proof method (<code>auto</code> in this case), but where is the goal?  Also what are all those 0s and 1s?  That is where the simplicity comes in.  They have already gone through the difficult step of turning the goal (and context) into 108 (I count 113 actually) Boolean attributes.  This has both significant plusses and minuses.</p>",
        "id": 196135857,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588561158
    },
    {
        "content": "<p>On the minus side, I doubt it will attract serious ML researchers.  This sort of thing is basically a solved problem (or at least is no harder than a number of other standard datasets).  Also, by holding the “feature extraction” constant, they limit the possible improvements.  It is very possible that the largest gains in accuracy would come from a better feature extractor.  I would say much of the current research on ML for theorem proving is focused on feature extraction for formulas (especially for premises selection).</p>\n<p>On the plus side this dataset is pretty easy to work with.  If you are looking to try out machine learning and want a (theorem proving) dataset to start with, this one is a good first project.</p>",
        "id": 196135913,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588561282
    },
    {
        "content": "<p>I plan to take a look at it soon.  I <em>might</em> make my own intro to ML tutorial using this dataset.  It will give me a chance to brush up on my skills, and hopefully share important information with those interested in ML for TP from the TP side.  I’ll start with simple algorithms like logistic regression, SVMs, naive Bayes, etc.   Since PaMPeR is implemented in Standard ML, these have the advantage that they would be easy to code.  (I mean the prediction function would be easy to code, where the prediction function takes inputs from the 113 Boolean attributes in addition to the model parameters, e.g. the logistic regression coefficients.  The parameters could be read from a file, where the parameters were trained using an ML package in Python.)  Then I will venture into the powerful black boxes, like gradient boosted trees and neural networks.  (Although, honestly a small neural network could be easy to program in Standard ML and be reasonably performant as well.)</p>\n<p><a href=\"https://arxiv.org/abs/1806.07239\" title=\"https://arxiv.org/abs/1806.07239\">The arXiv version of the PaMPeR paper</a> has all the statistics of how well the author did against their benchmarks on their evaluation dataset.  They provide a ranked list of tactics.  About 29% of times their tactic is what the human used.  (However, if they guess <code>simp</code> always, they would be right 26% of the time).  If one looks at their top 5 predictions, the human tactic appears in the top-5 about 73.55%.  (Again, compare this to the fact that the top 5 most frequent tactics account for 70.2% of tactics uses.)  </p>\n<p>It is too preliminary to say for sure, but after a little playing around, I think some simple models from sci-kit learn and some simple neural models can increase those numbers up to by 5 to 10 percentage points, but I don't know if that is significantly more useful or not.   </p>\n<p>I’ll post back when I have something for concrete.</p>",
        "id": 196136510,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588562325
    },
    {
        "content": "<p>However, I should also mention that while the original PaMPeR paper provides some metrics, the dataset doesn’t contain is a clearly defined evaluation metric.  While this makes it hard to “compete” on getting the best scores, it is a real issue that working data scientists have to deal with every day.  Does one want to predict just the most likely tactic, or the top three most likely tactics?  Given that some tactics appear way more often than others, is it better to suggest a rarely used tactic and get it right or to suggest the most common tactic just because it is the most common?  Last, given that the goal of this is to help others write Isabelle, is it important to test the prediction on new areas of math.  Maybe the algorithm can recognize that one theorem is just like another in the same file, but totally fail when it gets to a new file written by a different author doing different math in a different style?  These are important questions for us to think about.</p>",
        "id": 196136577,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588562423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/Paper.3A.20Simple.20Dataset.20for.20.2E.2E.2E.20Isabelle.2FHOL/near/196136510\" title=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/Paper.3A.20Simple.20Dataset.20for.20.2E.2E.2E.20Isabelle.2FHOL/near/196136510\">said</a>:</p>\n<blockquote>\n<p>I plan to take a look at it soon. I might make my own intro to ML tutorial using this dataset.</p>\n</blockquote>\n<p>Did you ever come around doing that? I might be interested in doing this, at I'd like to help to lay out the plans here. It might be interesting since this seems to be a hard field to get into, so producing a tutorial seems worthwhile. Would it be in python? Does Isabelle have a python API? I couldn't tell if it did just from the papers &amp; short reports.</p>",
        "id": 196698102,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1588799529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246156\">@Brando Miranda</span> See <a href=\"https://colab.research.google.com/drive/1tbq976M3XaFxqXTgDGuTXKvKkd9_5gUJ#scrollTo=y7iUy2RmYxA4\" title=\"https://colab.research.google.com/drive/1tbq976M3XaFxqXTgDGuTXKvKkd9_5gUJ#scrollTo=y7iUy2RmYxA4\">this colab notebook</a> for some initial results.  I tried a number of basic models (that would be easy to code in Standard ML since that is what PaMPeR is written it).  I've done absolutely no hyper parameter tuning or cross-validation, etc.  You are welcome to take this and turn it into something useful (I've sort of got interested in other things right now).  Here are a few TODOs I intended to do before loosing interest:</p>\n<ul>\n<li>hyperparameter tuning (manually and/or automatically, for example try different regularization types and amounts for logistic regression)</li>\n<li>k-fold cross-validation (the dataset is fast to train on, so it should be possible to do say 10-fold CV)</li>\n<li>contact Yutaka Nagashima and get his thoughts.  (Better, get him involved here on Zulip!)</li>\n<li>I think a better version of CV would be to split the training set up by the file hierarchy into 10-100 roughly equal sections where for example <code>/shared/afp-2018-02-26_eval/thys/Integration</code> is a section.  Then one would train on all the other sections and validate on this one.  I think this is really important, because if tools like this are to be useful, it is important to apply them to other mathematical theories.  This is my largest pet peeve against the ML for TP research.  It doesn't taking the user workflow into account, leading to inflated accuracy numbers.</li>\n</ul>",
        "id": 196709140,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588806461
    },
    {
        "content": "<p>Also, here is <a href=\"https://colab.research.google.com/drive/1G_tyJgTfu8hxrDsReSJiDAsZVel_xMm-?usp=sharing\" title=\"https://colab.research.google.com/drive/1G_tyJgTfu8hxrDsReSJiDAsZVel_xMm-?usp=sharing\">a neural network model</a>.  I used Fast AI, but that was maybe a mistake.  Fast AI is a fast, but the interface is super confusing.  I think Keras would have been better.  However, I think (if my fast AI code isn't broken) that it gives pretty good results, not amazing, but pretty good.</p>",
        "id": 196709972,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588807140
    },
    {
        "content": "<p>Something people outside of Machine Learning often don't know is that a small neural network like this (2-3 hidden layers) would be easy to code in almost any language (just the forward pass) and reasonably performant.  If one only needs to evaluate it only hundreds of times a second or so (which would be enough for PaMPeR I think) that shouldn't be a problem.  Then one could train the network in Tensorflow/Pytorch in python and save the weights in a file.</p>",
        "id": 196710204,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588807343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246156\">@Brando Miranda</span> Wrote:</p>\n<blockquote>\n<p>Would it be in python? Does Isabelle have a python API? I couldn't tell if it did just from the papers &amp; short reports.</p>\n</blockquote>\n<p>To be clear, I was only talking about the dataset which is just a tabular dataset.  There is no connection to Isabelle (and no formulas of any kind in the dataset since they already did the feature extraction).  Really, it is a funny dataset since if one didn't know it came from theorem proving, it would look like any other tabular dataset out there.</p>",
        "id": 196712239,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588809171
    },
    {
        "content": "<p>But if you are curious, I think PaMPeR is written in Standard ML (which I assume is the metalanguage for Isabelle).  I think they even wrote (and trained) a decision tree in SML.</p>",
        "id": 196712357,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588809243
    }
]