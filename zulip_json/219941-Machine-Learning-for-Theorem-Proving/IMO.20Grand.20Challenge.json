[
    {
        "content": "<p>(creating a new topic here since AITP participants might not be subscribed to the IMO-gc channel)</p>\n<p>(<a href=\"https://jesse-michael-han.github.io/blog/imo-gc-geo/\">blog post</a> about building IMO geometry solvers for reference)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/AITP.202020/near/210270846\">said</a>:</p>\n<blockquote>\n<p>I have a question about geometry in the IMO challenge that neither watching the talk nor skimming through the blog post answers. Do you actually have Lean code formalizing geometry problem? Did you formalize Euclidean geometry in Lean 4?</p>\n</blockquote>\n<p>our current solvers are written in Haskell, and operate in a fragment of Tarski's elementary geometry (conservatively expanded with definable function symbols). they are proof producing, but do not target Lean4 proof terms.</p>\n<p>in principle, everything we have done could be implemented in Lean4, but Haskell was a convenient choice for rapid prototyping</p>",
        "id": 210271867,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1600267370
    },
    {
        "content": "<p>I see. Let's hope your last sentence will soon sound very strange <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> .</p>",
        "id": 210272598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600267662
    },
    {
        "content": "<blockquote>\n<p>our current solvers are written in Haskell, and operate in a fragment of Tarski's elementary geometry (conservatively expanded with definable function symbols). they are proof producing, but do not target Lean4 proof terms.</p>\n</blockquote>\n<p>I'll add that we used many high-level lemmas without proof, and relied on numerical diagrams for NDGs such as distinctness of points and non-collinearity. The goal was to experiment with different solver architectures efficiently.</p>",
        "id": 210273147,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1600267876
    },
    {
        "content": "<p>What does NDGs means?</p>",
        "id": 210273309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600267937
    },
    {
        "content": "<p>It stands for \"non-degeneracy conditions\".</p>",
        "id": 210273546,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1600268033
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 210274331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600268337
    },
    {
        "content": "<p>to elaborate a little: often, NDGs like exactly which points are distinct, what circles are not trivial, etc. are not explicit in the official problem statements, and are sometimes not even provable from the rest of the problem; we approximated human intuition for these kinds of assumptions by synthesizing a diagram for the problem and reading NDGs off of them</p>",
        "id": 210274660,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1600268450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> </p>\n<blockquote>\n<p>(it took a team of mathematicians months to formally construct a single perfectoid space in Lean)<br>\nwell... we actually only have the empty perfectoid space. And I think that it took Kevin &lt; 3hrs (but of course it took us months to <em>define</em> its type).</p>\n</blockquote>",
        "id": 210286216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600273418
    },
    {
        "content": "<p>I was expecting it to be <code>rfl</code></p>",
        "id": 210287592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600274075
    },
    {
        "content": "<p>but it turned out I had to prove that an arbitrary projective limit of zero topological rings was bi-continuously isomorphic to the zero topological ring</p>",
        "id": 210287664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600274112
    },
    {
        "content": "<p>In an IMO problem, \"triangle\" implies nondegenerate (and the mathlib definition also requires that); \"circle\" implies positive radius (but I'm less sure whether that should be included in a bundled <code>euclidean_geometry.sphere</code> definition, as more lemmas may well work without that condition and it may also be useful to construct such a bundled object from centre plus radius without proving the radius positive at that point).</p>",
        "id": 210312236,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1600286188
    },
    {
        "content": "<p>Some nondegeneracy conditions are the appropriate formal interpretation of words such as \"between\" or \"again\" in the problem statement. Other conditions that don't come from such explicit words in the problem statement aren't generally safe to assume. For example, IMO 2019 problem 2 has some solutions that involve looking that the point of intersection of two lines that might be parallel, and the mark scheme deducted marks if you did that without handling the special case where those lines were parallel.</p>",
        "id": 210312593,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1600286347
    },
    {
        "content": "<p>It wouldn't surprise me if some older problems (from before leaders could readily play with moving points around in geometry software to see what configurations can occur), especially older shortlist problems, do fail to mention such conditions at all, however. (Cf. IMO 1994 shortlist problem G2, which was false.)</p>",
        "id": 210313179,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1600286606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> You should build a web interface for that diagram generator! It looks awesome. (Could it run in WASM on a modern laptop, or is that asking too much?) Bonus points if you can add the <code>tikz</code> code next to the output.</p>",
        "id": 210356844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600328440
    },
    {
        "content": "<p>Your blogpost is very interesting, btw</p>",
        "id": 210356880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600328468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/IMO.20Grand.20Challenge/near/210273147\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>our current solvers are written in Haskell, and operate in a fragment of Tarski's elementary geometry (conservatively expanded with definable function symbols). they are proof producing, but do not target Lean4 proof terms.</p>\n</blockquote>\n<p>I'll add that we used many high-level lemmas without proof, and relied on numerical diagrams for NDGs such as distinctness of points and non-collinearity. The goal was to experiment with different solver architectures efficiently.</p>\n</blockquote>\n<p>It sounds like you have a long list of geometrical definitions and lemmas found to be useful for formal synthetic geometry proofs. It would be good for that list to be available somewhere as a checklist for anyone expanding mathlib's support for Euclidean geometry. (Of course definitions and lemmas going in mathlib should be in suitably general form, possibly more general than you needed for your purposes. For example, results in <code>geometry.euclidean</code> are proved in general dimensions, for <code>simplex</code> not <code>triangle</code>, where applicable (even two-dimensional results take place in a two-dimensional subspace of a possibly larger space), and anything true more generally for affine spaces (or affine spaces over an ordered field, etc., but not depending on anything Euclidean) should go in <code>linear_algebra.affine_space</code>.)</p>",
        "id": 210376974,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1600342828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> Responded here: <a href=\"#narrow/stream/208328-IMO-grand-challenge/topic/Geometry/near/210413765\">https://leanprover.zulipchat.com/#narrow/stream/208328-IMO-grand-challenge/topic/Geometry/near/210413765</a></p>",
        "id": 210414240,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1600359899
    }
]