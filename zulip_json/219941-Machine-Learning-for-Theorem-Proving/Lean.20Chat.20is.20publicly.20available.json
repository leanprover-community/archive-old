[
    {
        "content": "<p>The Lean Chat app developed by myself and <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>  is now publicly available as <a href=\"https://marketplace.visualstudio.com/items?itemName=hoskinson-ml.lean-chat-vscode\">VS-code extension</a>. Users no longer need to provide their own OpenAI API key. </p>\n<p>The interface is similar to previous demos. To open the app, hit <code>cmd+shift+p</code> in VS code and run the command <code>Open chat</code>. Type the statement of a theorem in LaTeX, and the app will try to formalize the statement. If the returned declaration is incorrect, you can give the system instructions for what to fix in a natural, dialogue-like way. </p>\n<p>Additionally, you can now give feedback to the system on whether each formalization attempt is correct or not. We will use this feedback to further improve the quality of outputs.  </p>\n<p>Under the hood, the user's inputs are wrapped in a few-shot prompt and completed by the Codex language model, accessed through the OpenAI API. </p>\n<p>I'm excited to see what the community does with this app! I'd love to hear about any striking examples of successes or failures, any interesting patterns you discover, and of course reports of any bugs. </p>\n<p><a href=\"/user_uploads/3121/YlWwr4Xk7mSdE7DGBvVfeYc7/Screenshot-from-2022-08-02-12-43-27.png\">example with groups, </a> <a href=\"/user_uploads/3121/PRmn9--_nCoiEfP6w5YwezrI/Screenshot-from-2022-08-02-12-24-57.png\">example with topology</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YlWwr4Xk7mSdE7DGBvVfeYc7/Screenshot-from-2022-08-02-12-43-27.png\" title=\"example with groups, \"><img src=\"/user_uploads/3121/YlWwr4Xk7mSdE7DGBvVfeYc7/Screenshot-from-2022-08-02-12-43-27.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PRmn9--_nCoiEfP6w5YwezrI/Screenshot-from-2022-08-02-12-24-57.png\" title=\"example with topology\"><img src=\"/user_uploads/3121/PRmn9--_nCoiEfP6w5YwezrI/Screenshot-from-2022-08-02-12-24-57.png\"></a></div>",
        "id": 291736823,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1659459151
    },
    {
        "content": "<p>Holy crap, this is pretty amazing.</p>",
        "id": 291760098,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659470103
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/eDRfBnNDGNcPiNA9ogNhv1Pr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eDRfBnNDGNcPiNA9ogNhv1Pr/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/eDRfBnNDGNcPiNA9ogNhv1Pr/image.png\"></a></div>",
        "id": 291760100,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659470105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20Chat.20is.20publicly.20available/near/291760098\">said</a>:</p>\n<blockquote>\n<p>Holy crap, this is pretty amazing.</p>\n</blockquote>\n<p>My (anecdotal) experience so far is that the app has rather good knowledge of advanced mathematics. The error rate for theorems about abelian categories isn't much, if at all, higher than the error rate for elementary number theory.</p>",
        "id": 291764325,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1659472081
    },
    {
        "content": "<p>I think that might depend heavily on what one means by \"advanced\": certainly Mathlib contains hardly any (if any) mathematics that a mainstream mathematician would call advanced. Still, I'm very impressed and curious to see more.</p>",
        "id": 291765383,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659472580
    },
    {
        "content": "<p>It seems to have trouble with olympiad-type puzzles like those in <a href=\"https://github.com/dwrensha/mathematical-puzzles-in-lean\">https://github.com/dwrensha/mathematical-puzzles-in-lean</a>. <br>\n<a href=\"/user_uploads/3121/Rgn4aggIsSSjpjUJZxedRpgz/chat.png\">chat.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Rgn4aggIsSSjpjUJZxedRpgz/chat.png\" title=\"chat.png\"><img src=\"/user_uploads/3121/Rgn4aggIsSSjpjUJZxedRpgz/chat.png\"></a></div>",
        "id": 291779403,
        "sender_full_name": "David Renshaw",
        "timestamp": 1659480692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20Chat.20is.20publicly.20available/near/291779403\">said</a>:</p>\n<blockquote>\n<p>It seems to have trouble with olympiad-type puzzles like those in <a href=\"https://github.com/dwrensha/mathematical-puzzles-in-lean\">https://github.com/dwrensha/mathematical-puzzles-in-lean</a>. <br>\n<a href=\"/user_uploads/3121/Rgn4aggIsSSjpjUJZxedRpgz/chat.png\">chat.png</a></p>\n</blockquote>\n<p>Interesting. I tried rephrasing the prompt and reply in a few different ways, but could never get the model to include both the divisibility condition and the digits condition. </p>\n<p>Although in general, writing all mathematical symbols with latex, even when it seems unnecessary to do so (in this example, $n$ rather than n) gives better results. For the language model, the dollar signs are a cue that it should be doing mathematical reasoning.</p>",
        "id": 291790093,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1659490228
    },
    {
        "content": "<p>You need a post to Zulip button so we can more easily share our findings. :)</p>",
        "id": 291790793,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659491227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284997\">@Zhangir Azerbayev</span> <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> Really cool! Minor feature request: <code>Ctrl</code>-<code>Enter</code> as keyboard shortcut for \"Send\".</p>",
        "id": 292111086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659679054
    },
    {
        "content": "<p>I'm currently trying to coach it through</p>\n<blockquote>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> be a Lie group. Then the tangent space at the identity element is a Lie algebra.</p>\n</blockquote>\n<p>But it's not cooperating about getting the conclusion right, and the assumptions are missing the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is a <em>Lie</em> group.</p>",
        "id": 292111153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659679122
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span>  <span class=\"n\">tangent_space_at_identity_is_lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">tangent_space_at_identity</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 292111164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659679146
    },
    {
        "content": "<blockquote>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> be a Lie group over a non-trivially normed field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ùïú</mi></mrow><annotation encoding=\"application/x-tex\">ùïú</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span>. Then the tangent space at the identity element of  is a Lie algebra over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ùïú</mi></mrow><annotation encoding=\"application/x-tex\">ùïú</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span>.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span>  <span class=\"n\">tangent_space_at_identity_is_lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lie_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lie_algebra</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">tangent_space_at_identity</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 292115857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659683273
    },
    {
        "content": "<p>Can I ask how the not-needing-a-key works? Is there a key \"hidden\" in the built extension? Or is OpenAPI just configured to allow public access now to this model? (Specifically, should I expect to be able to get this working in neovim now?)</p>",
        "id": 292117419,
        "sender_full_name": "Julian Berman",
        "timestamp": 1659684495
    },
    {
        "content": "<p>I suspect that you needing to be signed into GitHub via vs code matters, but I‚Äôm also curious about Julian‚Äôs question.</p>",
        "id": 292139031,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659698028
    },
    {
        "content": "<p>I want to know if it is possible to add settings to play with the examples in  the prompt (and maybe even the other parts of the prompt so I could see how it works in Coq) or if this violates the Codex TOS.</p>",
        "id": 292139226,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659698142
    },
    {
        "content": "<p>In order to satisfy the Codex TOS, OpenAI require us to make each user of the API log in or be identifiable in some way. We implemented this by having users sign in to github via the vscode extension, and we use the github ids as the identifier. </p>\n<p>If you do want to experiment with the codex api, you can find our sourcecode (including prompts) <a href=\"https://github.com/edayers/lean-chat-server\">here</a>, and then you need to <a href=\"https://openai.com/blog/openai-codex/\">apply to Codex for an API key</a>.</p>\n<p>We also welcome contributions <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 292139754,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1659698456
    },
    {
        "content": "<p>Other minor change suggestions:</p>\n<ul>\n<li>‚ÄúOpen Chat‚Äù doesn‚Äôt see very plugin specific.  ‚ÄúLean: Open Chat‚Äù or ‚ÄúOpen Lean Chat‚Äù maybe would be better.</li>\n<li>The app is easy to use, but still having a better description and set of instructions on  plugin page would go along way to user friendliness.</li>\n<li>the navy blue message bubbles on black background in dark mode is readable, but maybe could be better.</li>\n<li>going backwards is unintuitive.  I don‚Äôt see the reason to go backwards twice (hit clear twice) to undo my last prompt.  Also often I just want to edit my last prompt so it is annoying to have it completely deleted from the text box.</li>\n</ul>\n<p>But these are just nitpicks.  It is very cool.</p>",
        "id": 292140198,
        "sender_full_name": "Jason Rute",
        "timestamp": 1659698711
    },
    {
        "content": "<p>I'm not sure whether OpenAI will permit us to let users play with adding custom prompts and so on. But that can also be a feature to add.</p>",
        "id": 292140408,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1659698848
    },
    {
        "content": "<p><a href=\"https://github.com/zhangir-azerbayev/lean-chat-vscode/issues\">I've opened some issues</a> feel free to add more bugs and requests!</p>",
        "id": 292140946,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1659699174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> is hitting <a href=\"https://lean-chat-server.deno.dev/\">https://lean-chat-server.deno.dev/</a> with additional traffic also OK with you? Or you're saying you prefer stuff other than the VSCode extension run its own proxy?</p>",
        "id": 292247904,
        "sender_full_name": "Julian Berman",
        "timestamp": 1659783093
    },
    {
        "content": "<p>Another little success story: I copied the statement of Burnside's theorem from wiki</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>if G is a finite group of order p a q b {\\displaystyle p^{a}q^{b}} {\\displaystyle p^{a}q^{b}} where p and q are prime numbers, and a and b are non-negative integers, then G is solvable\n</code></pre></div>\n<p>and fed it to the chat without cleaning up at all. So <code>p a q b {\\displaystyle p^{a}q^{b}} {\\displaystyle p^{a}q^{b}}</code> was literally in the input.</p>\n<p>The first output was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span>  <span class=\"n\">solvable_finite_group_of_prime_power_order</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">solvable</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>And then I told it</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>The predicate for solvability of groups is called `is_solvable` instead of `solvable`.\n</code></pre></div>\n<p>After that it game me a statement that Lean was happy with.</p>",
        "id": 293505888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660563903
    },
    {
        "content": "<p>As far as I know, this result is not yet in mathlib.</p>",
        "id": 293505923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660563919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20Chat.20is.20publicly.20available/near/293505923\">said</a>:</p>\n<blockquote>\n<p>As far as I know, this result is not yet in mathlib.</p>\n</blockquote>\n<p>Interestingly, prompting the app with proper latex gives a worse result. Although the model partially redeems itself by understanding the quite high level instruction \"no need for the existential\". </p>\n<p><a href=\"/user_uploads/3121/Nax240Iig1mSj7RzNAXvqZfY/burnside.png\">burnside.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Nax240Iig1mSj7RzNAXvqZfY/burnside.png\" title=\"burnside.png\"><img src=\"/user_uploads/3121/Nax240Iig1mSj7RzNAXvqZfY/burnside.png\"></a></div>",
        "id": 293601298,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1660589363
    },
    {
        "content": "<blockquote>\n<p>There are infinitely many prime numbers.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span>  <span class=\"n\">infinite_primes</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 293852258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660723623
    },
    {
        "content": "<blockquote>\n<p>This only says that a prime exists. I'm asking for the existence of <em>infinitely</em> many primes.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span>  <span class=\"n\">infinite_primes</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">prime</span> <span class=\"n\">q</span> <span class=\"bp\">‚àß</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 293852421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660723707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20Chat.20is.20publicly.20available/near/293852421\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>This only says that a prime exists. I'm asking for the existence of <em>infinitely</em> many primes.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span>  <span class=\"n\">infinite_primes</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">prime</span> <span class=\"n\">q</span> <span class=\"bp\">‚àß</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Wow such a cool example!</p>",
        "id": 293854504,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1660724658
    },
    {
        "content": "<p>The funny part is that it is probably just an alignment problem -- the model knows how to formalize the original statement, but doesn't know it is _supposed_ to formalize it correctly since there is so much data on the internet where things are wrong the first time.</p>",
        "id": 293913157,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1660747965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span>, I'm really curious about this alignment issue. How does one even begin to diagnose whether this is actually the case?</p>",
        "id": 298881561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663198565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20Chat.20is.20publicly.20available/near/298881561\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span>, I'm really curious about this alignment issue. How does one even begin to diagnose whether this is actually the case?</p>\n</blockquote>\n<p>by tweaking the prompt and seeing if the error rate goes down :) a sufficiently good model perhaps spends most of its energy just trying to guess the quality of the page it is on and what kind of errors it expects to see, and indeed additional context in the prompt that correlates with higher quality web pages can often help a lot. I don't know the prompt that is being used now but one could try prepending something that sounds official.</p>",
        "id": 299582825,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1663600276
    }
]