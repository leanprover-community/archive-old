[
    {
        "content": "<p>When I first started writing about ML for TP papers, there were just a few and it was easy to keep track of them, but now there are many more to keep tabs on.  I’m thankful that <span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span>  pointed me towards <a href=\"https://arxiv.org/abs/2108.11204\">Subgoal Search For Complex Reasoning Tasks</a> (<a href=\"https://sites.google.com/view/subgoal-search\">website</a>).</p>",
        "id": 259817127,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727205
    },
    {
        "content": "<p>When I first started to learn how to program, it was when I was a math postdoc.  (Actually that is not entirely true, I learned QBasic in high school, and dabbled in other program languages for the next 15 years, but it wasn’t until my postdoc that I really made a commitment to know how to code well.)  I learned Python via <a href=\"http://CodinGames.com\">CodinGames.com</a> which is a really fun way to learn to code.  As I was moving up in the lessons, the hardest problems were always search problems.  First they started off easy, like find the shortest path in a maze (breadth-first search) or a graph (Dijkstra’s algorithm).  Later they started to become harder.  I had to avoid visiting the same nodes.  I had to automatically spot and prune dead-end paths, and have a good heuristic for what nodes to visit first.  (If you think search is easy, try to think how to algorithmically solve a sudoku or a mind sweeper puzzle.)</p>",
        "id": 259817134,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727212
    },
    {
        "content": "<p>The problem with search is that is by its nature an exponential problem.  You are exploring a tree or graph of nodes.  The only way to make it tractable is to find the right way to divide up your search space.</p>",
        "id": 259817137,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727219
    },
    {
        "content": "<p>Now, let’s think of a puzzle like the Rubik’s cube or <a href=\"https://en.wikipedia.org/wiki/Sokoban\">Sokoban</a>.  These puzzles are much harder than on a typical programming practice problem.  Can we come up with a general purpose search algorithm for solving such problems?  By general purpose, I mean:</p>\n<ol>\n<li>We don’t just put in a task-specific algorithm like a known solution for the Rubik’s cube.</li>\n<li>However, because these problems are hard, we are allowed to train an algorithm to learn how to solve a class of problems over the course of hours or days (but only using easy-to-generate training data, again not bringing in fancy-pants problem-specific knowledge).</li>\n</ol>",
        "id": 259817139,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727227
    },
    {
        "content": "<p>Of course, I’m not as interested in the Rubik’s cube as I am in theorem proving, which is arguably the ultimate search problem.  Nonetheless, the Rubik’s cube is a great playground for search.  Indeed, one of my first deep learning projects was training a neural network to solve the Rubik’s cube using only reinforcement learning via the same algorithm as AlphaZero.  <a href=\"https://github.com/jasonrute/puzzle_cube\">It worked</a>, but not spectacularly well.  It could only find solutions if they were relatively short.  Less than a year later, however another team <a href=\"https://arxiv.org/pdf/1805.07470.pdf\">did solve the problem</a> I was working on.  Their big idea was that you can work backward, starting at the goal state to generate high quality training data.</p>",
        "id": 259817142,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727236
    },
    {
        "content": "<p>However, their idea wouldn’t work well in theorem proving, since you can’t generate training data by working backwards from the goal.  Many tactics and logical axioms are not uniquely reversible.  (This is what makes it difficult, for example, to generate synthetic proofs.)</p>",
        "id": 259817144,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727243
    },
    {
        "content": "<p>Tools, like GPT-f, TacticToe, DeepHOL, Tactician, ProverBot9001 and all the others that I’m forgetting to mention, do work reasonably well even by forward reasoning where one just chooses the next tactic, rule, or axiom.  This tree search however works mostly because in Lean and other provers, many proofs are not that long.  (If it is not obvious, when we say GPT-f solves X% of theorems, the theorems which are AI solvable are heavily skewed towards those with very short proofs.)</p>",
        "id": 259817145,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727252
    },
    {
        "content": "<p><strong>Summary</strong></p>",
        "id": 259817150,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727262
    },
    {
        "content": "<p>What this paper does is fairly simple.  Instead of having an agent pick the next low-level action (e.g. twist the Rubik’s cube clockwise around the red face), it picks the next <em>subgoal</em> and then finds a path to that subgoal.  In the Rubik’s cube case, a subgoal is another configuration of the cube that is about 4 low-level actions into the future.  This isn’t that different from human reasoning where we don’t think “put one foot in front of the other”, but instead think “let’s go to lunch at the pizza place”.</p>",
        "id": 259817158,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727273
    },
    {
        "content": "<p>An in many ways, this is exactly the kind of insight needed when approaching search problems with machine learning.  While we need better machine learning algorithms to make decisions on what to do next, a 20x speedup in a search isn’t going to help if the algorithm is really exponential.  What is immensely more important is to give our algorithms a better choice of what to pivot on when searching the space.  If an algorithm is just focusing on low level actions, it is going to get lost in the weeds.  I know <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span>’s approach to this dilemma is to have humans provide a domain-specific canvas by which a human outlines a solution and fills in the routine details.  The human specifies the big important choices in the search and has an AI make those choices.  This is not a bad approach.  However, this paper gives a different task-agnostic solution: have the algorithm itself choose a list of subgoals to work on.</p>",
        "id": 259817161,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727280
    },
    {
        "content": "<p>I consider this not as a final step but only the beginning.  In many ways, AI has gone backwards in regards to search.  In classical AI, search and specifically finding ways to efficiently divide up and prune a search space are a key part of classical AI subjects, such as SAT solvers, constraint programing, integer programming, and more.  How can we incorporate those back into neural AI, but also use neural networks to increase the generality of these approaches?  Ideally, instead of hard coding a domain specific solution, we would like our algorithm to find one automatically.</p>",
        "id": 259817163,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727286
    },
    {
        "content": "<p>Now, as for the specific paper, there are a few ingredients one needs for this to work:</p>\n<ol>\n<li><em>Subgoal generator</em>: A way to generate subgoals.  (They used CNNs or Transformers, both powerful neural networks.)</li>\n<li><em>Low-level conditional generator</em>: A way to find a path of low-level actions from your current goal to the proposed next subgoal.  (They used brute force when tractable, or a neural network when not.)</li>\n<li><em>Value function</em> A way to score the subgoals by say estimating the distance to a solution. (Using neural networks.)</li>\n<li><em>High-level Planner</em> This is the algorithm for the high-level search which goes from subgoal to subgoal.  (They used best-first search or Monte Carlo Tree Search.)</li>\n</ol>",
        "id": 259817167,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727293
    },
    {
        "content": "<p>In many ways, nothing about the above 4 components themselves are remarkable.  By using different technologies for each problem, they show that really what is great about their approach is that it is just the main idea of picking subgoals 3-4 moves ahead that works.  (Although, it should be pointed out that modern language generation models like Transformers really make the subgoal generation feasible for a variety of problems.)</p>",
        "id": 259817169,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727299
    },
    {
        "content": "<p>As for training data, while one could certainly combine this with reinforcement learning, they didn’t need to.  It was enough to use “off policy data”, which is a fancy way of saying that they don’t need access to the puzzle simulator to train their model.  Instead, it was trained on data which came from other data sources.  For the Rubik’s cube they just used random reversed paths starting from the goal.  In Sokoban, they used some reinforcement learning runs from another algorithm.</p>",
        "id": 259817171,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727306
    },
    {
        "content": "<p>As for the training goals, they are quite simple.  The subgoal generator predicts the state 4 (or 3) moves ahead; the low level generator predicts the next action given a current state and the target subgoal; and the value function predicts the number of actions.</p>",
        "id": 259817172,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727315
    },
    {
        "content": "<p>The results seem pretty impressive, especially considering there was no reinforcement learning, and they used a smaller computational budget than many similar solutions.</p>",
        "id": 259817174,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727321
    },
    {
        "content": "<p><strong>Theorem proving</strong></p>",
        "id": 259817212,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727327
    },
    {
        "content": "<p>Given how simple this idea is, it should definitely be tried in theorem proving.  (And it would be fairly easy to execute with a method similar to GPT-f.)  Indeed the authors showed their model performed well on <a href=\"https://arxiv.org/abs/2007.02924\">INT</a>, an inequality theorem proving benchmark.</p>",
        "id": 259817213,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727335
    },
    {
        "content": "<p>Now to apply it to Lean, Coq, etc, one has to consider a few factors:</p>\n<ol>\n<li>Theorem proving is not as linear as solving a Rubik’s cube.  Tactics can split the tactic goal into multiple goals.  Should the predicted “subgoal” (as used in this paper) be a full goal stack or just one of the goals in the stack?</li>\n<li>Tactics are powerful actions which can significantly change the tactic goal in many complicated ways.  It is not clear how well we can predict the exact tactic state one move ahead much less three.</li>\n<li>There are a lot of symmetries in tactic goals, such as the renaming variables or changing the order of some hypotheses.  In the above search algorithms, there was caching of repeated subgoals since they are graph-search problems.  This becomes a lot harder when one has to deal with “pseudo-repeats”.    This is even a worse problem in robots and video game research (such as Montezuma’s revenge) where many states are near equivalents to each other.</li>\n</ol>",
        "id": 259817216,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727345
    },
    {
        "content": "<p>To properly get a grip on issues (2) and (3), it might be necessary to train a contrastive model (not too different from self-supervised contrastive learning) which measures how “equivalent” two states are.</p>",
        "id": 259817217,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727351
    },
    {
        "content": "<p>I think this is worth trying (especially as language models get cheaper and easier to train).  However, even if this particular algorithm fails on formal theorem proving, I think this paper (and <a href=\"https://deepmind.com/research/publications/2020/Divide-and-Conquer-Monte-Carlo-Tree-Search-For-Goal-Directed-Planning\">other</a> <a href=\"https://eng.uber.com/go-explore/\">similar</a> <a href=\"https://ai.googleblog.com/2019/02/introducing-planet-deep-planning.html\">papers</a>) really highlight the need to not get sucked into thinking of theorem proving as manipulating low level tactics, but instead think of it as bouncing back and forth between big ideas / plans / strategies / goals.  While this sounds lofty, this paper clearly shows that simple adjustments to the search algorithm can work quite well.</p>",
        "id": 259817219,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727358
    },
    {
        "content": "<p><strong>Why it works</strong></p>",
        "id": 259817221,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727364
    },
    {
        "content": "<p>They also try to give an explanation for why this trick works.  Since they are using valuations to estimate the distance to the solution, and using those valuations to guide their search (e.g. best first search), they note how unstable and non-monotone those valuation estimates are when going one low-level step at a time, but how that improves with jumps of four low-level steps.  While I don’t disagree with this, I think there is a larger picture here which hasn’t been explored.   Also, they try to test this hypothesis in section 4.6 using synthetic data, but I think they are changing too many things at once in that experiment.</p>",
        "id": 259817223,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727370
    },
    {
        "content": "<p>I see three possible advantages: (1) lumping multiple path segments into one action, (2) better distance-to-the-goal valuations, , (3) making better use of the policy probabilities.  I think if we are careful we could design experiments to test all of these ideas (possibly on synthetic data which would make the evaluation computationally easier).</p>",
        "id": 259817224,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727377
    },
    {
        "content": "<p>For my idea (1), since there are many paths leading to the same subgoal, by thinking of subgoals as the actions instead of the low-level actions we are condensing many paths into one action.  This both reduces our search space significantly, and gives our better action probabilities, since now we are considering the probability of all paths which lead to that subgoal instead of just the one we took.  (Also, in Sokoban, by considering states of distance exactly 4, one is effectively splitting the state space in half due to the even/odd parity of moving along a lattice.)  There are a few ways to measure the effect of this.  One is to consider tree search spaces instead of graph search spaces.  (An example of a tree search space is filling in a Sudoku puzzle in order.)  Another way is to consider generate sequences of four low-level actions as a big action instead of generating subgoals as the “action”.  (For many problems this greatly increases the action space since a number of 4-sequence moves lead to the same next subgoal.)</p>",
        "id": 259817226,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727383
    },
    {
        "content": "<p>The other two advantages, (2) better valuations, and (3) using the policy probabilities better, are a bit tricky to disentangle.  When scoring a state, there are two compatible approaches.  A distance-to-the-goal valuation looks ahead and asks “how good is this position relative to where I want to be?”  It ignores the history of the path so far.   Another approach is to look backwards, and ask “how likely is this path to be the right path which leads me to the goal?”  While none of the search algorithms in the paper do this in full, a standard approach is just to multiply all the probabilities of each action (where here an action is a jump in state), to get a cumulative probability of the path so far.  One could replace the valuation in the best first search for example with this measure, which is likely more stable than a distance-to-the-goal valuation.  Now, what this paper does do is take the probability of a single action (again an action being a jump in state) into account.  A longer jump in state is a bigger chunk of the whole path and therefore is a more accurate representation of the path and how good it is, which is why I’m saying that long distance subgoals are using the policy probabilities better (at least in there approach).  I see a number of experiments here: (a) Pick tree search problems with trivial valuations (like filling in a Sudoku in order).  If subgoals do better than one step, then this isn’t due to better valuations or combining action paths.  (b) Repeat the same but score according to the cumulative probability.  See if longer step sizes are better.  (c) Find a tree search problem which only requires distance-to-the-goal valuations and just randomly chooses actions according to a uniform policy (for example moving in a grid world but attaching path history to each state).  Then measure the effect of larger step sizes.</p>",
        "id": 259817231,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727391
    },
    {
        "content": "<p>Overall, I think there is a lot of science and mathematics of search that we in neural network based AI need to learn, rediscover, or invent.  The main models so far for this sort of thing have been simple search algorithms taught in undergraduate CS courses, or algorithms designed for adversarial games.  I really love papers like this which challenge the accepted wisdom.  Now the next question is, can we develop a theory of neural search based on this and other ideas which take the results to the next level?</p>",
        "id": 259817232,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635727394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> Thanks (as usual <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>) for your intersting summary!</p>",
        "id": 259831055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635748149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/Subgoal.20Search.20For.20Complex.20Reasoning.20Tasks/near/259817219\">said</a>:</p>\n<blockquote>\n<p>... really highlight the need to not get sucked into thinking of theorem proving as manipulating low level tactics, but instead think of it as bouncing back and forth between big ideas / plans / strategies / goals.</p>\n</blockquote>\n<p>Quick remark: mathlib proofs are filled with <code>have</code> steps, which are subgoal-creating rather than \"low-level\". Systems trained on mathlib will automatically attempt these actions, though I'd agree that additional look-ahead-informed-data-augmentation could accentuate this direction.</p>",
        "id": 259875213,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1635779235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/Subgoal.20Search.20For.20Complex.20Reasoning.20Tasks/near/259875213\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/Subgoal.20Search.20For.20Complex.20Reasoning.20Tasks/near/259817219\">said</a>:</p>\n<blockquote>\n<p>... really highlight the need to not get sucked into thinking of theorem proving as manipulating low level tactics, but instead think of it as bouncing back and forth between big ideas / plans / strategies / goals.</p>\n</blockquote>\n<p>Quick remark: mathlib proofs are filled with <code>have</code> steps, which are subgoal-creating rather than \"low-level\". Systems trained on mathlib will automatically attempt these actions, though I'd agree that additional look-ahead-informed-data-augmentation could accentuate this direction.</p>\n</blockquote>\n<p>Just wanted to share that this statement is supported by experimental evidence. Models trained on mathlib indeed inherit the capability to introduce cuts with <code>have</code> statements <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 259932320,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1635807493
    }
]