[
    {
        "content": "<p><a href=\"https://www.cs.unibo.it/~sacerdot/PAPERS/tphol09.pdf\" target=\"_blank\" title=\"https://www.cs.unibo.it/~sacerdot/PAPERS/tphol09.pdf\">https://www.cs.unibo.it/~sacerdot/PAPERS/tphol09.pdf</a></p>",
        "id": 154848944,
        "sender_full_name": "William Whistler",
        "timestamp": 1547136111
    },
    {
        "content": "<p>Paper by Gonthier et al. that takes unification hints to the limit for proof automation: <a href=\"https://software.imdea.org/~aleks/papers/lessadhoc/journal.pdf\" target=\"_blank\" title=\"https://software.imdea.org/~aleks/papers/lessadhoc/journal.pdf\">https://software.imdea.org/~aleks/papers/lessadhoc/journal.pdf</a> - see also Coq code with examples <a href=\"https://github.com/coq-community/lemma-overloading\" target=\"_blank\" title=\"https://github.com/coq-community/lemma-overloading\">https://github.com/coq-community/lemma-overloading</a></p>",
        "id": 154849729,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1547136685
    },
    {
        "content": "<p>Interesting paper! I will have to explore the lemma-overloading library on the weekend.</p>",
        "id": 154873490,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1547155798
    },
    {
        "content": "<p>And here is the <a href=\"https://hal.inria.fr/hal-00816703/file/main.pdf\" target=\"_blank\" title=\"https://hal.inria.fr/hal-00816703/file/main.pdf\">tutorial paper</a>, from proceedings of itp 2013, on which this afternoon demos were based.</p>",
        "id": 154875627,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1547157689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> This was an extremely interested session. Lean has support for unification hints, and nobody knew about it... <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span> You might be interested, and I guess skimming these papers is one way to get up to speed.</p>",
        "id": 154903922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547197962
    },
    {
        "content": "<p>Assia, was very surprised to hear that we had unbundled categories. We could at some point try unification hints in the hierarchy of categorical classes.</p>",
        "id": 154903964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547198032
    },
    {
        "content": "<p>Aleks Nanevski recently presented the \"unification hints to the limit\" paper referenced above for a non-academic functional programming audience: <a href=\"https://www.youtube.com/watch?v=yFIaP1YCcxQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=yFIaP1YCcxQ\">https://www.youtube.com/watch?v=yFIaP1YCcxQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"yFIaP1YCcxQ\" href=\"https://www.youtube.com/watch?v=yFIaP1YCcxQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=yFIaP1YCcxQ\"><img src=\"https://i.ytimg.com/vi/yFIaP1YCcxQ/default.jpg\"></a></div>",
        "id": 154966221,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1547263701
    },
    {
        "content": "<p>That's a very nice talk! Thanks <span class=\"user-mention\" data-user-id=\"198375\">@Karl Palmskog</span><br>\nTl;dr: If you hate rewriting stuff by associativity and commutativity, the speaker shows how to use unification hints to make this completely transparent.</p>",
        "id": 154983884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547299246
    },
    {
        "content": "<p>Very nice indeed.<br>\nHere's a Lean analogue of the main example of the talk:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">le_sup_class</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">le_sup_class_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_sup_class</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">le_sup_class_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">le_sup_class</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">le_sup_class</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">le_sup_left</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">le_sup_class_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">le_sup_class</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">le_sup_class</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">le_sup_right</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">le_sup</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">le_sup_class</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"err\">⊔</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"err\">⊔</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_sup</span>\n</pre></div>",
        "id": 155160653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547549605
    },
    {
        "content": "<p>I guess it could just be <code>le_class</code>--you could put the fact <code>x ⊓ y ≤ x</code> into the same system.</p>",
        "id": 155161018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547550049
    },
    {
        "content": "<p>The point is that type class inference did the dirty work for you.</p>",
        "id": 155161531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547550781
    },
    {
        "content": "<p>And then, in the talk they used \"canonical structures\" instead of type class inference. I don't know if unification hints would give an additional benefit over type class inference...</p>",
        "id": 155164104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547553984
    },
    {
        "content": "<p>I really like Reid's example. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What is your opinion on these things? Do you think they are useful? Or just cute hacks?</p>",
        "id": 155164150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547554062
    },
    {
        "content": "<p>My very poor understanding of Cyril's point was that canonical structures and unification hints made a different part of the system do the work.</p>",
        "id": 155164159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547554080
    },
    {
        "content": "<p>I've used them in restricted circumstances</p>",
        "id": 155164160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554081
    },
    {
        "content": "<p>this is slightly different from Cyril's unification hints</p>",
        "id": 155164208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554098
    },
    {
        "content": "<p>I have an example from <code>dioph</code> where I use typeclass inference to prove natural number inequalities so I can write things like <code>&amp;5 : fin 10</code> with an appropriate notation</p>",
        "id": 155164233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554160
    },
    {
        "content": "<p>Can one prove <code>a+b+c+d+e+f+g+h=b+(f+h)+(c+e+(a+g+d))</code> like this?</p>",
        "id": 155164258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547554196
    },
    {
        "content": "<p>not easily</p>",
        "id": 155164337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547554235
    },
    {
        "content": "<p>I'll stick to <code>ring</code> :-)</p>",
        "id": 155164358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547554271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Of course you can, thanks for asking!  (But seriously, please use <code>simp</code> or <code>ring</code> instead.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">ac_cancel_core</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_eq</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ac_cancel_core</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">left</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel_core</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel_core</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">is_eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">right</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel_core</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel_core</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">is_eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel_core</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">ac_cancel_core</span>\n\n<span class=\"n\">class</span> <span class=\"n\">ac_cancel</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_eq</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ac_cancel</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">core</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel_core</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">is_eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">plus</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">is_eq</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">is_eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">ac_cancel</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ac_refl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ac_cancel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">is_eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ac_refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ac_refl</span>\n\n<span class=\"c1\">-- fails due to maximum class instance depth</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"n\">f</span><span class=\"bp\">+</span><span class=\"n\">g</span><span class=\"bp\">+</span><span class=\"n\">h</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">+</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">g</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">ac_refl</span>\n</pre></div>",
        "id": 155165730,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547555898
    },
    {
        "content": "<p>Oh wow! :-) So again if I've understood correctly, this is Lean's type class unification doing the work here, so C++, as opposed to if I used <code>ring</code> when it would be an algorithm written in Lean. </p>\n<p>Wait -- did Gabriel just write the <code>add_comm_group</code> tactic which sometimes comes up? After Mario's <code>ring</code> people noticed that whilst it solved many of the questions that schoolkids would find trivial (like the one in my example), we were missing variants. One was a variant which solved problems in <code>add_comm_group</code>s and one was a variant which solved problems in modules. Neither of these things are rings, so the tactic had limited use in these situations.</p>",
        "id": 155165937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547556161
    },
    {
        "content": "<p>Or maybe <code>simp</code> already does this case? But again this is a different part of the system I guess.</p>",
        "id": 155165968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547556190
    },
    {
        "content": "<p>I would say that the algorithm is \"written in lean\" in this case</p>",
        "id": 155165972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547556207
    },
    {
        "content": "<p>it's basically using lean like prolog</p>",
        "id": 155165974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547556215
    },
    {
        "content": "<p>remember that \"prolog like search\" thing?</p>",
        "id": 155165981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547556227
    },
    {
        "content": "<p>vividly</p>",
        "id": 155165984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547556233
    },
    {
        "content": "<p>this is how you write programs in prolog, as big backtracking searches</p>",
        "id": 155166033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547556255
    },
    {
        "content": "<p>you have to be very careful about what instances you put in the classes, as they control the search</p>",
        "id": 155166043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547556298
    },
    {
        "content": "<p>See also the examples in <a href=\"https://github.com/leanprover/presentations/tree/master/20170116_POPL/backchain\" target=\"_blank\" title=\"https://github.com/leanprover/presentations/tree/master/20170116_POPL/backchain\">https://github.com/leanprover/presentations/tree/master/20170116_POPL/backchain</a></p>",
        "id": 155168520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547558666
    },
    {
        "content": "<p>In particular <a href=\"https://github.com/leanprover/presentations/blob/master/20170116_POPL/backchain/back.lean#L87-L88\" target=\"_blank\" title=\"https://github.com/leanprover/presentations/blob/master/20170116_POPL/backchain/back.lean#L87-L88\">https://github.com/leanprover/presentations/blob/master/20170116_POPL/backchain/back.lean#L87-L88</a> directly mentions that paper</p>",
        "id": 155168644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547558806
    }
]