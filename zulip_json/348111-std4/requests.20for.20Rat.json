[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Rat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normalize_eq_mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat.gcd</span> <span class=\"o\">(</span><span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">normalize</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">normalize</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">maybeNormalize</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normalize_eq_normalize_iff</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">normalize</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=</span> <span class=\"n\">normalize</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>in say <code>Std.Data.Rat.Lemmas</code>? These would be very helpful for the mathlib side of <code>Rat</code>.</p>",
        "id": 315790565,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671016060
    },
    {
        "content": "<p>yes, most of the Rat lemmas are missing. Most of the theorems in <code>data.rat.basic</code> should end up in there eventually</p>",
        "id": 315803511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671019936
    },
    {
        "content": "<p>Okay, I have proofs of these in <code>Data.Rat.Basic</code>. The proofs don't immediately lift to <code>Std</code> (using <code>cases'</code>, etc), so I'll just leave these there for now.</p>",
        "id": 315805255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671020519
    },
    {
        "content": "<p>Cool, it will be a lot easier to migrate them once you have mostly working proofs already</p>",
        "id": 315805928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671020708
    },
    {
        "content": "<p>Cleaning up <code>cases'</code> etc is comparatively easy</p>",
        "id": 315805989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671020731
    }
]