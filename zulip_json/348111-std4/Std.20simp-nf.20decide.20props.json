[
    {
        "content": "<p>while moving <code>List.Pairwise</code> to Std I got caught by this simp issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- in current Std:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- unsolved goal: ¬¬P → P</span>\n\n<span class=\"c1\">-- the simp set used in mathlib4:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">decide_not</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_eq_true'</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_false_iff_not</span><span class=\"o\">,</span> <span class=\"n\">Classical.not_not</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- the constructive simp set:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">decide_not</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_eq_false'</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_iff</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>would it be okay for us to add a simp lemma of the form <code>[Decidable P] -&gt; ¬¬P &lt;-&gt; P</code>? or would that interfere with mathlib4 simp normal form?</p>",
        "id": 322883938,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674406313
    },
    {
        "content": "<p>Is the goal with Std simp-normal form to push everything into proposition world, and then rely on re-deriving <code>Decidable (some complicated proposition)</code> to apply classical simplifications like not_not?</p>",
        "id": 322884544,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674406612
    },
    {
        "content": "<p>you should just use <code>not_not</code> as a local or file-local simp lemma</p>",
        "id": 322884935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674406826
    },
    {
        "content": "<p>It feels doable for Std simp to generate constructive proofs of stuff like this. But I guess that would require a pretty broad rework of both Std and Mathlib simp lemmas.</p>",
        "id": 322885286,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674407012
    },
    {
        "content": "<p>&amp; if we're not shooting for that, then I would probably suggest just marking not_not simp in Std. It feels very odd that this goal isn't closed by no-arg simp.</p>",
        "id": 322885478,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674407119
    },
    {
        "content": "<p><code>Std</code> is not optimizing for its own proofs</p>",
        "id": 322887361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674408291
    },
    {
        "content": "<p>it's not a global simp lemma because the mathlib simp lemma overrides it</p>",
        "id": 322887397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674408319
    },
    {
        "content": "<p>if there is a way to add this lemma without regressing mathlib simp, great</p>",
        "id": 322887499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674408376
    },
    {
        "content": "<p>but if the only issue is that it makes std proofs harder that's a non-goal</p>",
        "id": 322887578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674408408
    }
]