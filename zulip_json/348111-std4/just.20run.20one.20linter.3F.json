[
    {
        "content": "<p>How do I run one linter as opposed to <code>#lint</code> which runs all of them? I tried <code>#lint only</code> but I couldn't get it to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The element of `MulOpposite α` that represents `x : α`. -/</span> <span class=\"n\">op</span> <span class=\"o\">::</span>\n  <span class=\"sd\">/-- The element of `α` represented by `x : αᵐᵒᵖ`. -/</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/-- Multiplicative opposite of a type. -/</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ᵐᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SemiconjBy</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">semiconj_by_unop</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">SemiconjBy</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">SemiconjBy</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">only</span> <span class=\"n\">simpComm</span> <span class=\"c1\">-- docBlame linter reports</span>\n</code></pre></div>",
        "id": 316632389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671393808
    },
    {
        "content": "<p>The syntax for <code>#lint</code> looks a bit overambitious:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#lint\"</span>\n  <span class=\"n\">project</span><span class=\"o\">:(</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"n\">verbosity</span><span class=\"o\">:(</span><span class=\"s2\">\"+\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"-\"</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"n\">fast</span><span class=\"o\">:</span><span class=\"s2\">\"*\"</span><span class=\"bp\">?</span>\n  <span class=\"n\">only</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\" only\"</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"n\">linters</span><span class=\"o\">:(</span><span class=\"n\">ppSpace</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>\n<p>The <code>project</code> field is problematic because it overlaps with <code>only</code> (which is not a token and so is parsed like an identifier). So most likely what is happening in your example is that <code>only</code> is the project name, the <code>only</code> flag is not set, and <code>simpComm</code> is an explicit linter specification. (Notice that in the printout it says \"found N errors in D declarations (...) in <strong>only</strong> with L linters\".)</p>",
        "id": 316636260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671396485
    },
    {
        "content": "<p>I think the most sensible way to fix this is to make <code>project</code> use an option-like syntax such as <code>#lint+* (project := my_proj) only simpComm</code></p>",
        "id": 316636342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671396597
    }
]