[
    {
        "content": "<p>What should <code>LawfulOrd</code> actually be? This was briefly mentioned in another thread. The current version in <code>Std.Classes.Ordering</code> seems to run against other usages of <code>Lawful*</code> in at least two ways:</p>\n<ol>\n<li>\n<p>The current version applies to a function <code>cmp : α → α → Ordering</code> rather than an instance of <code>Ord α</code>, which is just a wrapper around such a function. This seems to be against other such classes such as <code>LawfulBEq</code> which is about an instance of  <code>BEq α </code> rather than a function <code>beq : α → α → Bool</code>.</p>\n</li>\n<li>\n<p>The current version of <code>LawfulOrd</code> only requires symmetry,  the extension <code>TransOrd</code> additionally requires transitivity, neither requires that equality is tight in the sense that <code>cmp x y = eq →  x = y</code>. In other cases, <code>Lawful*</code> is not the greatest common denominator but rather \"least common generalization\".  Using that guidance, it would be better if the symmetry-only version to be called <code>SymmOrd</code>,  then extended to <code>TransOrd</code> as it is now, and finally <code>LawfulOrd</code> should require tight equality on top of symmetry and transitivity.</p>\n</li>\n</ol>\n<p>Of course, there are arguments that warrant going against prior usage. That <code>LawfulOrd</code> and <code>TransOrd</code> use a function <code>cmp : α → α → Ordering</code> rather than an instance of <code>Ord α</code> makes these classes more nimble. There is also an argument that <code>Lawful*</code> should actually be the greatest common denominator rather than everything but the kitchen sink.</p>\n<p>Personally, I like all  the options here with no preference for one or the other, but we can't have it every way. That said, I do like some uniformity and a mix of  all these options is not uniform at all.</p>",
        "id": 304139893,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665795637
    },
    {
        "content": "<p>The names are indeed misleading there.  <code>TotalBLE</code> says it requires a total order, but then omits all axioms for the order.  I also think that the name <code>LawfulCmp</code> implies a linear order (since <code>LawfulBEq</code> excludes \"non-Hausdorff\" equivalence relations as well).</p>",
        "id": 304141797,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665797867
    },
    {
        "content": "<p>To play devil's advocate, <code>LinearCmp</code> would be much clearer in actual meaning.</p>\n<p>Returning to angel's advocate, for typical development process <code>LawfulCmp</code> can be assumed to have all the typical properties I could need, just like any other <code>Lawful*</code> class.</p>",
        "id": 304142655,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665798867
    },
    {
        "content": "<p>PS: Just trying to clarify why this case is difficult in my mind, I don't mean anything special by \"devil\" and \"angel\".</p>",
        "id": 304142818,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665799061
    },
    {
        "content": "<p>Practically speaking, I don't think we can buy anything by weakening transitivity or reflexivity.  Most of this \"lawful\" zoo is pointless busywork in my eyes.</p>\n<p>The only generalization that I can see practical applications for is weakening antisymmetry (and analogous properties).  We often want to e.g. sort on one field, or use an <code>id</code> field for indexing, etc.  Having <code>LawfulPartialBEq</code> (refl.+trans.+symm.), <code>LawfulPartialOrd</code> (\"defined by a total preorder,\" there must be some slick way to say this), <code>LawfulHashable</code> (<code>LawfulPartialBEq</code> + equivalent elems have the same hash), etc., helps with that.</p>",
        "id": 304144061,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665800513
    },
    {
        "content": "<p>There is two different potential meaning of <code>Lawful</code>:</p>\n<ol>\n<li><code>fun a b =&gt; compare a b = .lt</code> satisfies some order laws (such as a partial order)</li>\n<li><code>[LE α] [LT α]</code> and <code>a ≤ b ⇔ compare a b ≠ .gt</code> <code>a &lt; b ⇔ compare a b = .lt</code>.</li>\n</ol>\n<p>I think the current <code>LawfulBEq</code> has meaning (2) because it is not about general equivalent relation, rather it requires <code>BEq α</code> aligns with <code>Eq α</code>.<br>\nOne benefit of (2) is that additional constraints (totality, transitivity) can be added as additional class instance requirements like <code>[PartialOrd α]</code> or <code>[TotalOrd α]</code>.</p>",
        "id": 304146303,
        "sender_full_name": "pcpthm",
        "timestamp": 1665803059
    },
    {
        "content": "<p>I'm open to renaming the classes if they seem confusing. I don't really want to take a stand on what <code>LawfulOrd</code> should mean, and these classes exist primarily as internal things for std to be able to state its invariants.</p>",
        "id": 304148364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665804985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/348111-std4/topic/About.20LawfulOrd/near/304141797\">said</a>:</p>\n<blockquote>\n<p>The names are indeed misleading there.  <code>TotalBLE</code> says it requires a total order, but then omits all axioms for the order.  </p>\n</blockquote>\n<p>To be fair, it is actually an order that is total. It just isn't anything else.</p>",
        "id": 304148404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665805042
    },
    {
        "content": "<p>Linear order and total order are often used interchangeably, but the former suggests that transitivity is an axiom more strongly IMO</p>",
        "id": 304148481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665805113
    },
    {
        "content": "<p>But this kind of bikeshedding over what the classes \"mean\", or whether <code>cmp</code> should be a regular argument or a typeclass arg to <code>LawfulCmp</code>, are something I would like to avoid. These classes have the shapes that are required for the use cases that exist in std. We talked in the other thread about maybe making <code>RBMap</code> take its <code>cmp</code> argument via typeclass instead of explicitly, and if we do that then <code>LawfulCmp</code> would also change to match.</p>",
        "id": 304148684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665805368
    },
    {
        "content": "<p>One other point of possible confusion is that when we say a relation is \"symmetric\" we usually mean <code>R x y -&gt; R y x</code>, and that is not the kind of symmetry that <code>LawfulCmp</code> is talking about. The requirement of <code>LawfulCmp</code> is more like \"this comparator induces an order coherently\".</p>",
        "id": 304148813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665805529
    },
    {
        "content": "<p>Personally, I think <code>LawfulBEq</code> is not well named. (I would like us to get to the point that we can call it <code>DecidableEq</code>, but we aren't there yet.) <code>LawfulX</code> in my opinion should refer to the weakest requirements under which reasoning is possible, something close to \"well formed\". I think we should expect the \"default case\" for <code>BEq</code> is that it represents an equivalence relation, i.e. <code>Setoid</code>. Asking for equality on-the-dot is quite often too much to ask for in programming contexts, so I'm skeptical that <code>LawfulOrd</code> meaning a comparator that induces a (transitive, antisymmetric) linear order will get much use in data structures, although it might show up in instances when you happen to have this stronger property.</p>",
        "id": 304149395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665806183
    },
    {
        "content": "<p>Yes, I also think that an antisymmetry-less version could be very useful.</p>",
        "id": 304149415,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665806230
    },
    {
        "content": "<p>I agree with everything that has been said. After some greping, I noticed that with the exception of  <code>LawfulBEq</code>, all of the <code>Lawful*</code> classes in core are exact characterizations. For example, <code>LawfulFunctor</code>, <code>LawfulApplicative</code>, <code>LawfulMonad</code> are all unambiguously what they should mean. So perhaps the issue is that <code>Lawful*</code> shouldn't be used in contexts where it's not obvious what that means. So neither <code>LawfulBEq</code> nor <code>LawfulOrd</code> should exist because the meaning is too ambiguous?</p>\n<p>Since Leo appears to be in favor of Gabriel's redefinition of <code>DecidableEq</code>, the issue with <code>LawfulBEq</code> might disappear on its own in core lean4. In the mean time, perhaps <code>Lawful*</code> should be avoided in  std4 unless the meaning is unambiguous? Does that sound like a reasonable conclusion?</p>",
        "id": 304154394,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665812158
    },
    {
        "content": "<p>I think that still leaves open the question of what to call <code>LawfulCmp</code> though. I don't think <code>SymmCmp</code> is a good name because I don't think symmetry has the right connotation in this context, even though the axiom itself can be called a kind of symmetry. What about <code>OrderedCmp</code>, in the sense \"comparator that induces an order\"? Although if it is replaced with a theorem about an <code>Ord</code> implementation then <code>OrderedOrd</code> doesn't make a whole lot of sense.</p>",
        "id": 304155294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665813214
    },
    {
        "content": "<p>How about <code>OppCmp</code>? (It might help to rename <code>Ordering.swap</code> to <code>Ordering.opp</code> at the same time.)</p>",
        "id": 304157457,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665815639
    },
    {
        "content": "<p><code>OrderedCmp</code> doesn't make sense to me since the Condorcet pattern satisfies the axiom:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">|</span>\n<span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">|</span>\n<span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span>\n<span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span>\n</code></pre></div>",
        "id": 304157769,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665815942
    },
    {
        "content": "<p>I think a key part in this confusion is the meaning of the word \"order\".  From what I can tell, Mario doesn't regard transitivity as a key requirement for orders.</p>",
        "id": 304157862,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665816005
    },
    {
        "content": "<blockquote>\n<p>since the Condorcet pattern satisfies the axiom</p>\n</blockquote>\n<p>Or for anybody who can't read diagrams: <code>a &lt; b</code> and <code>b &lt; c</code> but <code>c &lt; a</code>.</p>",
        "id": 304157924,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665816090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/348111-std4/topic/About.20LawfulOrd/near/304157862\">said</a>:</p>\n<blockquote>\n<p>I think a key part in this confusion is the meaning of the word \"order\".  From what I can tell, Mario doesn't regard transitivity as a key requirement for orders.</p>\n</blockquote>\n<p>This is why I said the naming question is hard. It's just a relation. (Actually this one axiom is enough to at least prove that <code>.eq</code> is reflexive and <code>.lt</code> is irreflexive.)</p>",
        "id": 304159095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665817096
    },
    {
        "content": "<p>but it does have orderish names like <code>.lt</code> as a result of its return type</p>",
        "id": 304159118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665817138
    },
    {
        "content": "<p>This is called a complete simple directed graph, or a tournament, but that's irrelevant. I have no good suggestion. Maybe <code>ProperCmp</code>? It has the same issue as <code>LawfulCmp</code> but at least there are no other uses of  <code>Proper*</code> as far as I know.</p>",
        "id": 304159755,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665817672
    },
    {
        "content": "<p>What about <code>DirectedCmp</code>?</p>",
        "id": 304159826,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665817715
    },
    {
        "content": "<p>To me, that suggests that every comparison has only one direction.</p>",
        "id": 304160197,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665818052
    },
    {
        "content": "<p>Unfortunately <code>Directed</code> already has a meaning in order theory and it's not what we want</p>",
        "id": 304162436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665819718
    },
    {
        "content": "<p>What about <code>OrientedCmp</code>? Kind of similar connotation but the nearest math word is not used in order theory</p>",
        "id": 304162734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665819865
    },
    {
        "content": "<p><code>OrientedCmp</code> sounds great to me!</p>\n<p>Do you mean <code>Directed</code> in the sense that any two elements have an upper bound?  I don't think that confusion would occur  in this case since any preorder arising from a comparison function must be total, so any subset is automatically directed.</p>",
        "id": 304164094,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1665820731
    }
]