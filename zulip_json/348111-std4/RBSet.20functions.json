[
    {
        "content": "<p>Could we also have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `s.filter p` returns the subset of the set `s` satisfying the predicate `p`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">RBSet</span> <span class=\"n\">α</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RBSet</span> <span class=\"n\">α</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"sd\">/-- `sdiff s t` returns the set of elements that are in `s` but not in `t`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sdiff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">RBSet</span> <span class=\"n\">α</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RBSet</span> <span class=\"n\">α</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in <code>Std</code>?</p>",
        "id": 303105993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665305052
    },
    {
        "content": "<p>And a few more requests:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Std.RBMap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">keys</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">m.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">ks</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">::</span> <span class=\"n\">ks</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">values</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">m.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">vs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mergeWith</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"n\">other</span> <span class=\"o\">:</span> <span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mapVal</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">RBMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 303351170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665455218
    },
    {
        "content": "<p>That <code>DecidableEq</code> instance does <em>not</em> say what you want it to</p>",
        "id": 303354361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665458659
    },
    {
        "content": "<p>We could have a <code>BEq</code> instance but it definitely won't be lawful</p>",
        "id": 303354372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665458686
    },
    {
        "content": "<p>Let me <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> regarding the <code>DecidableEq</code>!</p>\n<p>In mathlib3's <code>linarith</code>, we define <code>monom := rb_map ℕ ℕ</code> and then <code>sum := rb_map monom ℤ</code>.</p>\n<p>I want to replace these with <code>Monom := RBMap ℕ ℕ Ord.compare</code> and <code>Sum := RBMap Monom ℤ Ord.compare</code>, but for this to work I need an instance of <code>Ord (RBMap ℕ ℕ Ord.compare)</code>.</p>",
        "id": 303368318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665470663
    },
    {
        "content": "<p>what does <code>Ord</code> mean there?</p>",
        "id": 303368389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665470710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Okay, I implemented everything on the list, except for the <code>DecidableEq</code> instance (I implemented a <code>BEq</code> instance instead)</p>",
        "id": 303371938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665472703
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Ord.lean#L16\"><code>Ord</code></a></p>",
        "id": 303372103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665472808
    },
    {
        "content": "<p>I just need the function <code>RBMap ℕ ℕ cmp → RBMap ℕ ℕ cmp → Ordering</code> (where <code>cmp : ℕ → ℕ → Ordering</code> is the obvious one).</p>",
        "id": 303372216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665472900
    },
    {
        "content": "<p>The <code>keys</code> and <code>values</code> implementations are nice!</p>",
        "id": 303373014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665473338
    },
    {
        "content": "<p>Could we also have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Std.HashMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">keys</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">m.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ks</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">::</span> <span class=\"n\">ks</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">values</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">m.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">vs</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">consVal</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">self.find</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.insert</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">L</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.insert</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Std.HashMap</span>\n</code></pre></div>\n<p>I'm happy to do <code>consVal</code> locally if you don't want it. Lean3 core had <code>rb_lmap</code> with a bit of API around this.</p>",
        "id": 303373122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665473402
    },
    {
        "content": "<p>Oh, <code>RBMap</code> should totally be using <code>Ord</code> instead of having a <code>cmp</code> in the type as it is currently. I don't think we want to encourage nonstandard <code>Ord</code> implementations, at least outside the implementation itself - people should typedef either the key type or the map type to supply a nonstandard <code>Ord</code> implementation</p>",
        "id": 303376808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665475098
    },
    {
        "content": "<p>I'll take a look at <code>consVal</code> tomorrow. For multimaps, it's a tough call whether it is better to use <code>List</code> or <code>Array</code> in the values. <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> made some observations yesterday about how it's a performance pitfall to use <code>HashMap K (Array V)</code> because you have to be careful to use the thing linearly, but maybe it's fine if we make an API around this? Assuming we do ensure linear usage, is it a performance issue to be making arrays of size ~8 all the time if the median number of uses is 1 or 2? Just spitballing based on my guesses about typical multimap usage patterns.</p>",
        "id": 303377546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665475438
    },
    {
        "content": "<p>Speaking of <code>Ord</code>. Is there Lawful version of <code>Ord</code> in std or in main Lean? I could not find it.</p>",
        "id": 303569083,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665557700
    },
    {
        "content": "<p>What does lawful mean though? For <code>RBSet</code>, we need the comparator function to be lawful in the sense of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TransCmp#doc\">docs4#TransCmp</a>, which would be spelled <code>TransCmp compare</code> if used as a prop mixin on <code>Ord</code></p>",
        "id": 303582517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665563960
    },
    {
        "content": "<p>Lawful <code>Ord</code> for linear ordering would mean that it can decide <code>Eq</code> and <code>LT</code>.</p>",
        "id": 303626829,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665581263
    }
]