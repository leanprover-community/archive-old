[
    {
        "content": "<p>Thoughts on putting the core definitions for SAT (CNF formulas, satisfiability, etc.) in Std?</p>\n<p>It's a bit outside the scope. I personally would prefer to put it in a separate library, but I'd like us to settle on one set of core defs for all SAT-related projects, for easy interop.</p>\n<p><strong>A non-exhaustive list of (not nec. equivalent) core SAT definitions from different Lean4 projects:</strong><br>\nMy encoding library: <a href=\"https://github.com/JamesGallicchio/eternity2/blob/main/lean/Eternity2/SATSolve/EncCNF.lean\">https://github.com/JamesGallicchio/eternity2/blob/main/lean/Eternity2/SATSolve/EncCNF.lean</a><br>\nMario's LRAT checker: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Sat/FromLRAT.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Sat/FromLRAT.lean</a><br>\nJoe's LRAT checker: <a href=\"https://github.com/joehendrix/lean-sat-checker/blob/main/SatChecker/Core.lean\">https://github.com/joehendrix/lean-sat-checker/blob/main/SatChecker/Core.lean</a><br>\nSiddhartha's pure Lean SAT solver: <a href=\"https://github.com/siddhartha-gadgil/Saturn/blob/main/Saturn/Core.lean\">https://github.com/siddhartha-gadgil/Saturn/blob/main/Saturn/Core.lean</a><br>\nWojciech's (abandoned?) SAT core library: <a href=\"https://github.com/Vtec234/lean-sat/blob/main/LeanSat/Data/Cnf.lean\">https://github.com/Vtec234/lean-sat/blob/main/LeanSat/Data/Cnf.lean</a></p>\n<p><strong>Also some lean3 projects</strong><br>\nCayden's encoding library: <a href=\"https://github.com/ccodel/verified-encodings/blob/master/src/cnf/clause.lean\">https://github.com/ccodel/verified-encodings/blob/master/src/cnf/clause.lean</a><br>\nRyan Greenblatt's verified DPLL solver: <a href=\"https://github.com/rgreenblatt/verified_sat/blob/master/src/types.lean\">https://github.com/rgreenblatt/verified_sat/blob/master/src/types.lean</a></p>",
        "id": 319161476,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672740850
    },
    {
        "content": "<p>The main outlier I see is Cayden's, where the CNF formulas are parametric on the underlying variable type (which is Nat in all other instances). I think it's justified in the encoding library, but unnecessarily general for the other projects.</p>",
        "id": 319162289,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672741149
    },
    {
        "content": "<p>I also don't want to duplicate work with <a href=\"https://github.com/ufmg-smite/lean-smt\">https://github.com/ufmg-smite/lean-smt</a>, but I don't see any CNF-specific stuff there.</p>",
        "id": 319163032,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672741428
    },
    {
        "content": "<p>Anyways, if these defs don't fit in Std, I'll put together a separate repo for it.</p>",
        "id": 319163192,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672741493
    },
    {
        "content": "<p>I think that an obstacle to standardization is that depending on what you want to use the CNF for, there are different requirements on the representation. For example <code>List Clause</code> is okay if you only ever need to fold the whole thing but would be absurdly inefficient for a SAT solver. So realistically the library would need to include something like <code>PersistentCnf</code> and <code>Cnf</code>, like <code>List</code> vs <code>Array</code>. But even then, what if you need a clause-database type representation which isn't an Array but some more specific data structure? I think the one thing we could all agree on is the mathematical model which would just be some inductive datatype of propositional formulas :)</p>",
        "id": 319230324,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1672762859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319162289\">said</a>:</p>\n<blockquote>\n<p>The main outlier I see is Cayden's, where the CNF formulas are parametric on the underlying variable type (which is Nat in all other instances). I think it's justified in the encoding library, but unnecessarily general for the other projects.</p>\n</blockquote>\n<p>If you want to emit efficient code, it seems the thing to do is parameterize over the <em>literal</em> type e.g. so that it can be <code>UInt64</code> and the first bit denotes the polarity. Parameterizing over the variable type forces a representation <code>Literal Î½</code> which afaik Lean will represent as boxed which is a lot of pointer dereferencing when these are accessed often.</p>",
        "id": 319231345,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1672763140
    },
    {
        "content": "<p>I would mainly want to agree on a mathematical model, but preferably one that is also reasonably efficient for any sort of program interoperation between projects.</p>",
        "id": 319251303,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672769237
    },
    {
        "content": "<p>Or, maybe if we get a good collections interface in Std, we can parameterize the CNF type by the collection types...</p>",
        "id": 319251564,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672769312
    },
    {
        "content": "<p>I agree with Wojciech, this is an area where you can't really standardize the data representation because that depends a lot on what the solver is doing or how it works. The only thing I would expect could be shared are things like <code>List.all</code> for defining the model</p>",
        "id": 319282709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672781153
    },
    {
        "content": "<p>I don't think Lean would be viable for writing high-performance SAT solvers at the moment, so I wasn't really thinking about that as an application. I'm moreso looking for us to maintain something akin to <a href=\"https://pysathq.github.io/\">PySAT</a> which is a library for encoding to CNF and interfacing with external SAT solvers.</p>\n<p>Maybe for now I just work on building out the PySAT equivalent library, and then we can see if it's a good place for mathlib's LRAT verifier and Cayden's verified encodings to be housed.</p>",
        "id": 319336637,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672817902
    },
    {
        "content": "<p>(And any other SAT-adjacent projects that we want to maintain longterm)</p>",
        "id": 319336755,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672817990
    },
    {
        "content": "<p>I know nothing about programming but out of interest why do you not think lean would be viable for writing high-performance SAT solvers?</p>",
        "id": 319344749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672822223
    },
    {
        "content": "<p>Maybe what we want is a type class that explains how to decode some type <code>X</code> into a SAT instance (with variables of type <code>a</code>)</p>",
        "id": 319344993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672822335
    },
    {
        "content": "<p>that does sound more promising, although I still wonder what kind of common interface we can give to the different SAT-like types</p>",
        "id": 319345434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672822543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319344749\">said</a>:</p>\n<blockquote>\n<p>I know nothing about programming but out of interest why do you not think lean would be viable for writing high-performance SAT solvers?</p>\n</blockquote>\n<p>We can probably get decently close (i.e. within an order of magnitude) to high performance SAT solvers with lean code if the compiler doesn't fail us, but to get the last bit of performance requires more control over data layout than we have any intention of providing in pure lean code. In this regime the next best thing is to link to a C function or library and axiomatize its behavior using <code>implemented_by</code>; you could still get pretty close to full verification that way if the model is fine-grained enough.</p>",
        "id": 319345941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672822746
    },
    {
        "content": "<p>I actually would be super interested in getting lean faster than C on such codes and have thought about this quite a bit. A lot of the vectorization/performance tricks that we apply in <a href=\"https://dl.acm.org/doi/10.1145/3428263\">https://dl.acm.org/doi/10.1145/3428263</a> and <a href=\"https://dl.acm.org/doi/10.1145/3485539\">https://dl.acm.org/doi/10.1145/3485539</a> could potentially work better in lean.</p>",
        "id": 319368231,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672831313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319368231\">said</a>:</p>\n<blockquote>\n<p>I actually would be super interested in getting lean faster than C on such codes and have thought about this quite a bit. A lot of the vectorization/performance tricks that we apply in <a href=\"https://dl.acm.org/doi/10.1145/3428263\">https://dl.acm.org/doi/10.1145/3428263</a> and <a href=\"https://dl.acm.org/doi/10.1145/3485539\">https://dl.acm.org/doi/10.1145/3485539</a> could potentially work better in lean.</p>\n</blockquote>\n<p>Why do you believe they could work better in Lean?</p>",
        "id": 319379448,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1672835598
    },
    {
        "content": "<p>In C++ we face issues with (a) pointer aliasing, (b) partial evaluating the type-specific variants - the templates become crazy, (c) it is hard to supply proofs that certain low-precision types are sufficient, (d) and we cannot synthesis vector code effectively from C++. Lean's pure nature makes pointer aliasing simple to work with and lean is more modular and flexible such that b&amp;d can be addressed, and (c) is what lean is anyway good at.</p>",
        "id": 319408965,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672844989
    },
    {
        "content": "<p>I feel we could build e..g something like <a href=\"https://terralang.org/\">https://terralang.org/</a> in lean with an LLVM/MLIR backend.</p>",
        "id": 319409127,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845021
    },
    {
        "content": "<p>Also, the macro system in lean will make many of these things a lot easier, and the interactive proof mode could probably be used to make this process more approachable from a human perspective.</p>",
        "id": 319409277,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845066
    },
    {
        "content": "<p>Also, if you look at how the simplex algorithm is implemented, it is really rewriting matrices in-place. Hence, the initial algorithm can be nicely written in a purely functional style yet the generated code could be fully in place. If we then find a good way to (a) specialize the code according to types and (b) switch between those variants with little overhead we are good.</p>",
        "id": 319409758,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845194
    },
    {
        "content": "<p>Given that we now have an LLVM backend we could implement sth like the clang/gcc vector extensions: <a href=\"https://clang.llvm.org/docs/LanguageExtensions.html#vectors-and-extended-vectors\">https://clang.llvm.org/docs/LanguageExtensions.html#vectors-and-extended-vectors</a></p>",
        "id": 319410055,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845280
    },
    {
        "content": "<p>Which expose fast SIMD code to the programmers.</p>",
        "id": 319410088,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845288
    },
    {
        "content": "<p>Compilers such as GHC do not have a good SIMD backend, so they have a hard time implementing these.</p>",
        "id": 319410148,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845311
    },
    {
        "content": "<p>LLVM also has excellent support for <a href=\"https://clang.llvm.org/docs/LanguageExtensions.html#checked-arithmetic-builtins\">Checked arithmetic builtins</a> and even SIMD versions of those, which again is sth that we could use.</p>",
        "id": 319410365,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845369
    },
    {
        "content": "<p>Finally, and now we go crazy (but I like that) we could even encode rationals as floats/doubles. <a href=\"/user_uploads/3121/CNYyNfzsrFZMvvbVs25OYYLA/ideas_fast-ap-integers.md-at-main-opencompl_ideas.pdf\">ideas_fast-ap-integers.md-at-main-opencompl_ideas.pdf</a></p>",
        "id": 319410844,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845521
    },
    {
        "content": "<p>And again, to decide when a float is precise and when we need to fall-back to arbitrary precision rationals we certainly would benefit from lean as a language.</p>",
        "id": 319411064,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672845589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319409127\">said</a>:</p>\n<blockquote>\n<p>I feel we could build e..g something like <a href=\"https://terralang.org/\">https://terralang.org/</a> in lean with an LLVM/MLIR backend.</p>\n</blockquote>\n<p>that's pretty interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span> do you know this well? I'm curious how this differs from <a href=\"https://fstarlang.github.io/lowstar/html/Introduction.html#the-essence-of-low\">Low*</a>, or is it very similar?</p>",
        "id": 319429849,
        "sender_full_name": "AndrÃ©s Goens",
        "timestamp": 1672851341
    },
    {
        "content": "<p>I guess it's similar. What's nice about Terra is that it integrates with llvm which means you get well optimized code that is JIT compiled without going through C and you can also have access of llvms vector abstractions.</p>",
        "id": 319430477,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851527
    },
    {
        "content": "<p>What makes Terra special is that you can use  Lua variables from terras low level code and Lua can access Terra variables. It's very dynamic yet fast.</p>",
        "id": 319430613,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851577
    },
    {
        "content": "<p>I feel in lean we could do the same, but maybe even nicer with dynamic syntax extensions, eventually exposing mlir abstractions,...</p>",
        "id": 319430804,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851619
    },
    {
        "content": "<p>If this goes well we could give the lean users access to very low level abstractions, yet allowing for fast code to be generated. This will also help scilean and such.</p>",
        "id": 319431070,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851691
    },
    {
        "content": "<p>It probably would require some kind of compiler support to treat these low-level abstractions specially in code generation, right?</p>",
        "id": 319431237,
        "sender_full_name": "AndrÃ©s Goens",
        "timestamp": 1672851732
    },
    {
        "content": "<p>Lean already allows for annotations for using c.</p>",
        "id": 319431368,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851771
    },
    {
        "content": "<p>We could add annotations for using custom llvm and MLIR as implementation of a lean function.</p>",
        "id": 319431447,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851792
    },
    {
        "content": "<p>And then some macro magic to provide a lean api to end-users.</p>",
        "id": 319431564,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851827
    },
    {
        "content": "<p>Coincidentally we already have an llvm backend, so what's missing is mostly macro magic.</p>",
        "id": 319431641,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851844
    },
    {
        "content": "<p>I guess also the <a href=\"https://arxiv.org/abs/1703.00053\">right abstractions</a> if we'd want to reason about that code</p>",
        "id": 319432047,
        "sender_full_name": "AndrÃ©s Goens",
        "timestamp": 1672851969
    },
    {
        "content": "<p>Do you know anybody who could be interested in collaborating on the macro aspects of this?</p>",
        "id": 319432074,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672851977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319431447\">said</a>:</p>\n<blockquote>\n<p>We could add annotations for using custom llvm and MLIR as implementation of a lean function.</p>\n</blockquote>\n<p>I mean this would just be an attribute with special support in the LLVMEmitter in the Lean code generator no?<br>\n<span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319431564\">said</a>:</p>\n<blockquote>\n<p>And then some macro magic to provide a lean api to end-users.</p>\n</blockquote>\n<p>If we have Lean functions tagged as implement by LLVM/MLIR what additional macro magic do we need?</p>",
        "id": 319432433,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1672852089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">AndrÃ©s Goens</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319432047\">said</a>:</p>\n<blockquote>\n<p>I guess also the <a href=\"https://arxiv.org/abs/1703.00053\">right abstractions</a> if we'd want to reason about that code</p>\n</blockquote>\n<p>Maybe. I feel that this could be orthogonal. It would be nice if this is verified, but I am unsure finding canonical semantics for everything will be easy. The current c annotations also do not come with semantics and are already very useful. Offering a way to add verification seems to be beneficial as an opt in.</p>",
        "id": 319432687,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672852197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik BÃ¶ving</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319432433\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319431447\">said</a>:</p>\n<blockquote>\n<p>We could add annotations for using custom llvm and MLIR as implementation of a lean function.</p>\n</blockquote>\n<p>I mean this would just be an attribute with special support in the LLVMEmitter in the Lean code generator no?<br>\n<span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> <a href=\"#narrow/stream/348111-std4/topic/SAT.20core.20defs.20in.20Std.3F/near/319431564\">said</a>:</p>\n<blockquote>\n<p>And then some macro magic to provide a lean api to end-users.</p>\n</blockquote>\n<p>If we have Lean functions tagged as implement by LLVM/MLIR what additional macro magic do we need?</p>\n</blockquote>\n<p>In theory we could supply a string of llvm-it that the llvm emitter than translates. This is easy and maybe just a minor change. I feel it would be nice if we would actually parse the LLVM-IR into lean data structure to be able to check certain properties early on and also to be able to eventually attach semantics. But maybe that is indeed step two?</p>",
        "id": 319433186,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672852377
    },
    {
        "content": "<p>I mean the C stuff is just parsed as strings right now as well :D there was a time where we even had full C expressions instead of just function support.</p>\n<p>What kind of semantics are you thinking about here?</p>",
        "id": 319434043,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1672852673
    },
    {
        "content": "<p>I guess in the end it boils down to how superficial the Lean data structure is that it represents it. A data structure that represents the LLVM/MLIR syntax is surely an improvement over a string, but I'd argue not a terribly big one. If we'd want some sort of semantic representation of the LLVM/MLIR code to be able to e.g. typecheck some of the code, which I think we'd need for your points (a) and (b) perhaps above, although I don't fully understand those. For your point (c) a semantic embedding sounds indispensable, whereas for (d) this probably would already be very useful just to be able to code generate something opaque.</p>",
        "id": 319434324,
        "sender_full_name": "AndrÃ©s Goens",
        "timestamp": 1672852795
    },
    {
        "content": "<p><a href=\"https://github.com/opencompl/lean-mlir\">https://github.com/opencompl/lean-mlir</a> shows our experiments on a lean-based parser for MLIR as well as ideas to build modular semantics. It's very much work-in-progress, so many of these questions are unanswered. However, I am sure <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> and <span class=\"user-mention\" data-user-id=\"484617\">@SÃ©bastien Michelland</span> and others have ideas to share. I am happy to just start with a string-to-llvm annotation and feel there could be some very low-hanging fruits, e.g. a (type-generic) SIMD implementation for lean?</p>",
        "id": 319434905,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672852998
    },
    {
        "content": "<p>That allow for manual SIMDization.</p>",
        "id": 319434942,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672853009
    },
    {
        "content": "<p>I feel adding a string-only LLVM annotation as a first step could be a nice start and we could improve on this incrementally. I would guess such a patch is &lt; 100 LOC.</p>",
        "id": 319435114,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672853055
    },
    {
        "content": "<p>(maybe this conversation could be split off into a new topic?)</p>",
        "id": 319435461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672853171
    },
    {
        "content": "<p>(yes, I don't know how to. This belongs into lean4 dev or at the least into a separate thread. I don't want to experiment to not break this long thread. Anybody knows how to split threads?)</p>",
        "id": 319435746,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672853279
    },
    {
        "content": "<p>I think you need admin permissions... <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ? (saw you online; this discussion might also be of interest to the dev team)</p>",
        "id": 319447190,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672857083
    },
    {
        "content": "<p>35 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"341532\" href=\"/#narrow/stream/341532-lean4-dev/topic/Lean.20LLVM.2FMLIR\">#lean4 dev &gt; Lean LLVM/MLIR</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 319468413,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672864451
    },
    {
        "content": "<p>Okay, first commit of <a href=\"https://github.com/JamesGallicchio/LeanSAT\">LeanSAT</a> has dropped :) it's currently just what I had already written for another project, but it is already pretty nice to build encodings with</p>",
        "id": 321480015,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673786479
    },
    {
        "content": "<p>I currently plan to add docs, more examples, and an IPASIR interface with (hopefully) more solvers.</p>",
        "id": 321480210,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673786563
    },
    {
        "content": "<p>And then I'll probably go in the direction of Reid's suggestion and add a SAT encodable/decodable typeclass</p>",
        "id": 321480509,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673786717
    },
    {
        "content": "<p>LMK if there's something else you'd like to see in it!</p>",
        "id": 321480620,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673786767
    },
    {
        "content": "<p>a test suite / CI would be nice</p>",
        "id": 321480771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673786842
    }
]