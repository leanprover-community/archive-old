[
    {
        "content": "<p>I'm working on the <code>ArrayN</code> addition to <code>Std</code>. In order to implement <code>ArrayN.ofFn : (Fin n -&gt; α) -&gt; ArrayN α n</code> I need a bunch of lemmas about folding over ranges with start 0 and step 1</p>\n<p>Has anyone already written stuff in this direction? I'm trying to compare with my implementation in LeanColls to see if there's a better way.</p>",
        "id": 306095329,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666722489
    },
    {
        "content": "<p>Mainly <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>; I'm not sure where it'd be located in SciLean <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 306095411,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666722517
    },
    {
        "content": "<p>Relevant LeanColls implementation stuff, one of my <a href=\"https://github.com/JamesGallicchio/LeanColls/blob/main/LeanColls/Range.lean#L55\">Range folds</a> and the resulting <a href=\"https://github.com/JamesGallicchio/LeanColls/blob/main/LeanColls/Array/Basic.lean#L48\">Array.init</a></p>",
        "id": 306096171,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666722697
    },
    {
        "content": "<p>My main questions are</p>\n<p>(1) is there a generalization of my range folds, particularly <code>foldl''</code>, for ranges with <code>step &gt; 1</code>? I've found a generalization for <code>start &gt; 0</code>, but not for <code>step &gt; 1</code>.</p>\n<p>(2) how should Std include these range folds? I see three possibilities:</p>\n<ul>\n<li>implement them on the builtin <code>Std.Range</code>, with proof obligations to show <code>start = 0, step = 1</code></li>\n<li>implement them on a new <code>Range</code> structure with one field <code>stop</code></li>\n<li>implement them as functions that just directly take a <code>Nat</code> (the stop value)</li>\n</ul>\n<p>(3) are these range folds even necessary to implement <code>ArrayN.ofFn</code> cleanly?</p>",
        "id": 306098034,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666723262
    },
    {
        "content": "<p>I'm personally in favor of adding a new <code>Range</code> structure, but I'm not sure what to call it :P maybe <code>SimpleRange</code>?</p>",
        "id": 306098337,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666723363
    },
    {
        "content": "<p>I will look into this more closely later. Now I can point you to few places in SciLean where I do similar stuff.</p>\n<p>Similar to <code>Array.init</code>, in SciLean there is: <a href=\"https://github.com/lecopivo/SciLean/blob/23f8276cb251cced7d61dae41ef665506cfe2d0a/SciLean/Data/DataArray/DataArray.lean#L77\"><code>DataArray.intro</code></a>. It is using for loop instead of fold and it is not really written in a way that it is easy to prove anything about it. </p>\n<p>Similar to <code>fold''</code> SciLean there is <a href=\"https://github.com/lecopivo/SciLean/blob/23f8276cb251cced7d61dae41ef665506cfe2d0a/SciLean/Data/FunRec.lean#L10\"><code>funRec</code></a> but it is not using ranges at all, so probably not relevant.</p>",
        "id": 306108427,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666726909
    },
    {
        "content": "<p>Thank you for the links, I'll take a look at both!</p>",
        "id": 306108738,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666727034
    },
    {
        "content": "<p>To (3) can't you just initialize simple <code>Array</code> with a standard <code>fold</code> and then prove that the resulting array has size <code>n</code>? Instead of proving the array size at every step.</p>",
        "id": 306108969,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666727105
    },
    {
        "content": "<p>I'm just quickly looking at you code base and to me it looks like that having <code>n</code> <code>m</code> and <code>h</code> in the type of <code>ArrayUninit</code> is just making your time really complicated. Can't you just have a function that returns the size, the capacity and the proof(probably as axiom) for <code>ArrayUninit</code>?</p>",
        "id": 306111619,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666728087
    },
    {
        "content": "<p>The type similar to <code>ArrayUninit</code> is my <a href=\"https://github.com/lecopivo/SciLean/blob/23f8276cb251cced7d61dae41ef665506cfe2d0a/SciLean/Data/DataArray/DataArray.lean#L7\"><code>DataArray</code></a> that internally is just a <code>ByteArray</code> (currently is a structure with its guts open that can lead to some inconsistencies, at some point I should make it opaque or make it to a quotient)</p>",
        "id": 306112274,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666728273
    },
    {
        "content": "<p>Also what is the point of <code>ArrayUninit</code>? You can do <code>Array.mkEmpty n</code> which internally allocates big enough buffer such that calling <code>n</code> times <code>push</code> should be fast.</p>",
        "id": 306112638,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666728391
    },
    {
        "content": "<p>Ohh I see you have <code>ArrayBuffer</code> but you don't have many theorems about it. I think I should read your code more and think about the stuff a bit more ...</p>",
        "id": 306113373,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666728689
    },
    {
        "content": "<p>Yeah, my array hierarchy is a reimplementation of the builtin arrays, so a bunch of stuff could definitely be simpler. Not sure how necessary it was to reimplement everything, but I found it cool that I could make the C API so small :)</p>",
        "id": 306115026,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666729305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/348111-std4/topic/Range.20folds/near/306108969\">said</a>:</p>\n<blockquote>\n<p>To (3) can't you just initialize simple <code>Array</code> with a standard <code>fold</code> and then prove that the resulting array has size <code>n</code>? Instead of proving the array size at every step.</p>\n</blockquote>\n<p>Definitely -- but I ended up finding it was easier to prove inline. I'm experimenting with more abstractions now, though, so I'll see if I can get anywhere</p>",
        "id": 306115232,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666729369
    },
    {
        "content": "<p>I see, just when seeing the implementation of <code>Array.init</code> I got a huge wtf moment and it took me quite some time to understand what is going on there. Especially as the actual code it interleaved with the proof, it is hard to figure out what is what.</p>",
        "id": 306116219,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666729737
    },
    {
        "content": "<p>Definitely. I'm currently seeing if I can implement for-loop-with-loop-invariant, which would make that code way cleaner I think.</p>",
        "id": 306125542,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666733019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/348111-std4/topic/Range.20folds/near/306098034\">said</a>:</p>\n<blockquote>\n<p>(1) is there a generalization of my range folds, particularly <code>foldl''</code>, for ranges with <code>step &gt; 1</code>? I've found a generalization for <code>start &gt; 0</code>, but not for <code>step &gt; 1</code>.</p>\n</blockquote>\n<p>I think I found a generalization, and one I quite like! :P<br>\nforIn with invariant: <a href=\"https://github.com/JamesGallicchio/std4/blob/iterators/Std/Classes/Collections/Iterable.lean#L165\">https://github.com/JamesGallicchio/std4/blob/iterators/Std/Classes/Collections/Iterable.lean#L165</a><br>\nrelevant range implementation: <a href=\"https://github.com/JamesGallicchio/std4/blob/iterators/Std/Data/Range.lean\">https://github.com/JamesGallicchio/std4/blob/iterators/Std/Data/Range.lean</a></p>",
        "id": 306342049,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666822214
    },
    {
        "content": "<p>the types are like super ugly but I think with enough syntax sugar it could look equivalent to Why3/Dafny stuff</p>",
        "id": 306342121,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666822250
    }
]