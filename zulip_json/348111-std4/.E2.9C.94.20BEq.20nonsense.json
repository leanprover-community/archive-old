[
    {
        "content": "<p>Does anyone know which lemma proves this? Are we missing one? It seems like it should be a single line proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hEq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hNe</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 303496874,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665513301
    },
    {
        "content": "<p>You should be able to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eq_of_HEq#doc\">docs4#Eq_of_HEq</a></p>",
        "id": 303497434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513503
    },
    {
        "content": "<p>Of that's not there</p>",
        "id": 303497514,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/348111-std4/topic/BEq.20nonsense/near/303497434\">said</a>:</p>\n<blockquote>\n<p>You should be able to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eq_of_HEq#doc\">docs4#Eq_of_HEq</a></p>\n</blockquote>\n<p>Thanks, but this is not heq! In Lean 4 <code>==</code> means <code>BEq</code></p>",
        "id": 303497523,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665513546
    },
    {
        "content": "<p>Bah</p>",
        "id": 303497537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513553
    },
    {
        "content": "<p>Does that require <code>LawfulBEq</code>?</p>",
        "id": 303497790,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1665513658
    },
    {
        "content": "<p>this is false in general I think</p>",
        "id": 303497793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513659
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 303497808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513662
    },
    {
        "content": "<p><code>BEq</code> just gives you the function <code>==</code></p>",
        "id": 303497838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513682
    },
    {
        "content": "<p>but a priori it has no relationship with <code>=</code></p>",
        "id": 303497860,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513691
    },
    {
        "content": "<p>I think it should be true by cases on bool, since <code>a != b ≜ !(a == b)</code></p>",
        "id": 303497876,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665513698
    },
    {
        "content": "<p>I'm mostly wondering if this has a proof somewhere already since it's quite basic</p>",
        "id": 303498035,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665513777
    },
    {
        "content": "<p>Oh <code>!=</code> is not <code>\\neq</code></p>",
        "id": 303498037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/348111-std4/topic/BEq.20nonsense/near/303497876\">said</a>:</p>\n<blockquote>\n<p>I think it should be true by cases on bool, since <code>a != b ≜ !(a == b)</code></p>\n</blockquote>\n<p>ah :p this might be a <code>cc</code> moment</p>",
        "id": 303498191,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1665513846
    },
    {
        "content": "<p>(<code>cc</code> still being unimplemented of course)</p>",
        "id": 303498210,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1665513856
    },
    {
        "content": "<p>this is an instance of <code>b = true -&gt; b ≠ false</code></p>",
        "id": 303498229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665513867
    },
    {
        "content": "<p>which I believe is a lemma that exists</p>",
        "id": 303498262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665513880
    },
    {
        "content": "<p>You mean <code>→ b ≠ false</code>?</p>",
        "id": 303498319,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665513903
    },
    {
        "content": "<p>note that <code>hEq : a == a'</code> means <code>hEq : (a == a') = true</code></p>",
        "id": 303498333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665513904
    },
    {
        "content": "<p>oh no not quite, it's <code>b = true -&gt; !b ≠ true</code></p>",
        "id": 303498530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665513986
    },
    {
        "content": "<p>Ok i'll add that to <code>Logic.lean</code></p>",
        "id": 303499052,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665514170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> has marked this topic as resolved.</p>",
        "id": 303499619,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665514341
    },
    {
        "content": "<p>I would do it in the opposite order, which looks quite natural: <code>example : !b ↔ ¬b := by cases b &lt;;&gt; decide</code></p>",
        "id": 303502179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665515282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_eq_true</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hEq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hNe</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">not_eq_true.1</span> <span class=\"n\">hNe</span> <span class=\"n\">hEq</span>\n</code></pre></div>",
        "id": 303502446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665515375
    },
    {
        "content": "<p>I think the implicit insertion of <code>= true</code> is a bit confusing magic, so I wrote it as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Bool.not_eq_true_iff_neq_true</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 303502646,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665515442
    }
]