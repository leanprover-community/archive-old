[
    {
        "content": "<p>Am I right in that <code>xgcd_aux_rec</code> can just be marked with <code>nolint unusedHavesSuffices</code> and this is a spurious error? The <code>have</code> in <code>xgcdAux</code> is necessary in general but perhaps not in the application?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">mod_lt</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">succ</span> <span class=\"n\">k</span>\n    <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">xgcd_aux_rec</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">xgcdAux</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">xgcdAux</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">/- The `unusedHavesSuffices` linter reports:</span>\n<span class=\"cm\">THE FOLLOWING DECLARATIONS HAVE INEFFECTUAL TERM MODE HAVE/SUFFICES BLOCKS. In the case of `have` this is a term of the form `have h := foo, bar` where `bar` does not refer to `foo`. Such statements have no effect on the generated proof, and can just be replaced by `bar`, in addition to being ineffectual, they may make unnecessary assumptions in proofs appear as if they are used. For `suffices` this is a term of the form `suffices h : foo, proof_of_goal, proof_of_foo` where `proof_of_goal` does not refer to `foo`. Such statements have no effect on the generated proof, and can just be replaced by `proof_of_goal`, in addition to being ineffectual, they may make unnecessary assumptions in proofs appear as if they are used.  -/</span>\n<span class=\"cm\">#check @xgcd_aux_rec /- unnecessary have this : r' % succ k &lt; succ k -/</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 317002149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671557789
    },
    {
        "content": "<p>Hello everyone, to add some context: <br>\nThis is basically the only thing holding up <code>data.nat.bits</code> at the moment</p>",
        "id": 317007518,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671559405
    },
    {
        "content": "<p>This in turn opens up the possibility of finishing <code>data.nat.even_odd_rec</code></p>",
        "id": 317007655,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671559447
    },
    {
        "content": "<p>You can add an equation lemma for <code>xgcdAux</code> that does not contain the rogue <code>have</code></p>",
        "id": 317014689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671561617
    },
    {
        "content": "<p>Indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xgcdAux_zero</span> <span class=\"o\">:</span> <span class=\"n\">xgcdAux</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">xgcdAux_succ</span> <span class=\"o\">:</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span>\n  <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">xgcd_aux_rec</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">xgcdAux</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">xgcdAux_succ</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>now works. Thanks!</p>",
        "id": 317031478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671567128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, did this get PR'd somewhere? We need it on two branches.</p>",
        "id": 317050406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671574905
    },
    {
        "content": "<p>No sorry! I've done nothing, but hopefully it's clear how to proceed in this case. I've not looked at <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> 's issue.</p>",
        "id": 317050790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671575064
    },
    {
        "content": "<p>This can also be reported to core, the equation compiler generator should try to remove these unused haves</p>",
        "id": 317050899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671575117
    },
    {
        "content": "<p>I don't even know where you pulled your code from, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>. Is it a version of the code in <code>EuclideanDomain.defs</code>, specialised to Int/Nat?</p>",
        "id": 317050977,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575152
    },
    {
        "content": "<p>This was a question posted by someone in another thread, which I was trying to solve.</p>",
        "id": 317051057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671575173
    },
    {
        "content": "<p>it looks like data.int.gcd to me</p>",
        "id": 317051100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671575194
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EInt.2EGcd.20-.20NormNum/near/316990729\">Here</a> is Riccardo's question</p>",
        "id": 317051161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671575229
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316990743\">Here</a> is Shreyas' question but I didn't follow that one up.</p>",
        "id": 317051261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671575277
    },
    {
        "content": "<p>Ah, I see. I was starting from Shreyas' question, which is not from data.int.gcd.</p>",
        "id": 317051452,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575341
    },
    {
        "content": "<p>That one is probably being caused by the nolints on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[</span><span class=\"s2\">\"unusedHavesSuffices\"</span><span class=\"o\">,</span> <span class=\"s2\">\"EuclideanDomain.xgcdAux_rec\"</span><span class=\"o\">],</span>\n <span class=\"o\">[</span><span class=\"s2\">\"unusedHavesSuffices\"</span><span class=\"o\">,</span> <span class=\"s2\">\"EuclideanDomain.xgcd_zero_left\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but where the <code>have</code> term is leaking through and being detected by the linter again later.</p>",
        "id": 317051676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575416
    },
    {
        "content": "<p>In that case I feel like the linter is wrong, as the <code>have</code> there is being used to prove termination.</p>",
        "id": 317051961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575535
    },
    {
        "content": "<p>I can work around that lint by using <code>  decreasing_by (exact mod_lt _ _hr)</code> instead of a <code>have</code> term. Not sure, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, if you'd like an issue opened on the linter for this.</p>",
        "id": 317052237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575669
    },
    {
        "content": "<p>yes I was going to suggest that as well</p>",
        "id": 317052313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671575707
    },
    {
        "content": "<p>it's a bit more awkward in general since you get called in who knows what context</p>",
        "id": 317052357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671575729
    },
    {
        "content": "<p>I don't think the linter can do much about it, it is very far from having enough information to understand the situation</p>",
        "id": 317052549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671575796
    },
    {
        "content": "<p>We're going to need to be very cautious about nolinting <code>unusedHavesSuffices</code>, given that it can cause linter problems with downstream declarations that use the nolinted one.</p>",
        "id": 317052642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575844
    },
    {
        "content": "<p>But I've just removed the only ones in <code>nolints.json</code>, so we're good for now.</p>",
        "id": 317052695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575873
    },
    {
        "content": "<p>Is this worth a mention in the porting wiki?</p>",
        "id": 317052903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671575950
    },
    {
        "content": "<p>Given we only had one such nolint, and it's now gone, I'm not sure it's worth taking up the bandwidth in the wiki. Searching for unusedHavesSuffices on zulip will find this thread.</p>",
        "id": 317056617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671577638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/348111-std4/topic/spurious.20.60unusedHavesSuffices.60.20linter.20error.3F/near/317031478\">said</a>:</p>\n<blockquote>\n<p>Indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xgcdAux_zero</span> <span class=\"o\">:</span> <span class=\"n\">xgcdAux</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">xgcdAux_succ</span> <span class=\"o\">:</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span>\n  <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">xgcd_aux_rec</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">xgcdAux</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">xgcdAux_succ</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>now works. Thanks!</p>\n</blockquote>\n<p>Where did you write this proof? <code>rfl</code> doesn't work for me to prove <code>xgcdAux_succ</code>.</p>",
        "id": 317117558,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671615922
    },
    {
        "content": "<p>In any case I still have the linter error in <a href=\"https://github.com/leanprover-community/mathlib4/pull/981\">981</a>.</p>",
        "id": 317120412,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671616870
    },
    {
        "content": "<p>I wrote it in your branch IIRC. I'll try again.</p>",
        "id": 317125388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671618485
    },
    {
        "content": "<p>Oh there is a chance I wrote it just in core Lean when I was trying to minimise.</p>",
        "id": 317125743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671618607
    },
    {
        "content": "<p>yeah I can't reproduce -- maybe it didn't work at all :-/</p>",
        "id": 317126671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671618917
    },
    {
        "content": "<p>oh lol those are autoImplicit <code>q</code>s!</p>",
        "id": 317128842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671619679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xgcdAux_succ</span> <span class=\"o\">:</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span>\n  <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works. autoImplicit is a constant source of confusing errors as well as being sometimes wonderful.</p>",
        "id": 317128986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671619721
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">gcd_a_zero_right</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcdA</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">gcdA</span> <span class=\"n\">xgcd</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xgcdAux_succ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>lints. I'll fix the errors and push.</p>",
        "id": 317129276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671619812
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 317129352,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671619840
    },
    {
        "content": "<p>Ok pushed. Hopefully there'll be a green tick in 10 minutes or so...</p>",
        "id": 317130095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671620082
    }
]