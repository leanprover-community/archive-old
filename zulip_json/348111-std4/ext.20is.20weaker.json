[
    {
        "content": "<p>Because we index lemmas in <code>ext</code> differently in Lean 4, we have the following regression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Works in Lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ext</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">x.n</span> <span class=\"bp\">=</span> <span class=\"n\">y.n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Doesn't work in Lean 4</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Ext</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">x.n</span> <span class=\"bp\">=</span> <span class=\"n\">y.n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>     <span class=\"c1\">-- Does nothing</span>\n  <span class=\"n\">exact</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 311851300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669218031
    },
    {
        "content": "<p>Now, maybe this is an antipattern, but it is widely used in mathlib. We can add the extra ext lemmas for the synonyms, but if it's okay to just make <code>ext</code> more powerful I'd prefer that.</p>",
        "id": 311851444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669218081
    },
    {
        "content": "<p>This is expected behavior. It came up when we did the backport removal of the <code>@[ext foo]</code> attribute</p>",
        "id": 311939106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669262536
    },
    {
        "content": "<p>Typeclass search also doesn't unfold regular definitions, and this is useful behavior</p>",
        "id": 311939143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669262563
    },
    {
        "content": "<p>I don't think we should unfold definitions here and just require you to annotate the definition with <code>@[ext]</code> if you want to inherit the extensionality lemma</p>",
        "id": 311939196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669262629
    },
    {
        "content": "<p>Okay. The common example of this is going to be defining the <code>hom</code> field of a category, where it's not just annotating a definition, but I think probably requires stating a new lemma.</p>",
        "id": 312038237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669303148
    },
    {
        "content": "<p>At least in mathlib3 ext is still seeing through such cases.</p>",
        "id": 312038514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669303232
    },
    {
        "content": "<blockquote>\n<p>At least in mathlib3 ext is still seeing through such cases.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16760#issuecomment-1264924780\">An example</a> where this causes problems: after changing irreducible to semireducible we need to change an <code>ext</code> to avoid an infinite loop.</p>",
        "id": 312044013,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669305077
    }
]