[
    {
        "content": "<p>Pushed a <a href=\"https://github.com/leanprover/std4/pull/89\">draft PR</a> with a half-compiling version of <code>Perm</code> in Std. De-mathlib'ing the file is very time consuming...</p>\n<p>I've dropped all lemmas involving <code>Associative</code>/<code>Commutative</code>, <code>Mathlib.Data.List.Lattice</code> lemmas, <code>permutations</code>, and a couple other smaller things</p>",
        "id": 322224540,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674117783
    },
    {
        "content": "<p>Okay, stopping for now. I think I'm a majority of the way to the lemmas that are <code>sorry</code> in <a href=\"https://github.com/leanprover/std4/pull/38\">https://github.com/leanprover/std4/pull/38</a> !</p>",
        "id": 322234367,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674121204
    },
    {
        "content": "<p>Hm... I'm starting to wonder if maybe we should move some of the Mathlib.Init.Logic definitions to Std, in particular <code>Symmetric</code>, <code>Transitive</code>, <code>Reflexive</code>, <code>Associative</code>, <code>Commutative</code>. I can just expand the definitions in place, but .. I dunno ..</p>",
        "id": 322724252,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674307411
    },
    {
        "content": "<p>This is likely a good idea, especially if the <code>Associative</code>/<code>Commutative</code> classes are used by automation like <code>ac_refl</code> (currently it uses <code>Lean.IsCommutative</code>, <code>Lean.IsAssociative</code>).</p>",
        "id": 322757206,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674321105
    },
    {
        "content": "<p>I'm also having to move <code>List.mem_map'</code> to Std. This is the same as <code>mem_map</code> except the equality is flipped:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mem_map</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">mem_cons</span><span class=\"o\">,</span> <span class=\"n\">mem_map</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">or_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_or</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_map'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm not sure why the divergence happened in the first place. Weirdly <code>mem_map'</code> doesn't prove with the same proof as <code>mem_map</code> due to the order of equality in <code>mem_cons</code>.</p>",
        "id": 322760963,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674323042
    },
    {
        "content": "<p><code>mem_map'</code> in mathlib is marked with <code>-- Porting TODO: fix `List.mem_map` in Std to this statement.</code> so perhaps this is good :)</p>",
        "id": 322761071,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674323107
    },
    {
        "content": "<p>A first pass of Perm compiles. I removed so many lemmas that I'm not sure I'll be able to close out sorries in <a href=\"https://github.com/leanprover-community/std/pull/38\">std#38</a> but I'd like to rebase it to actually see what else we need. thoughts on the best way to do that?</p>",
        "id": 322895398,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674413484
    },
    {
        "content": "<p>Ok, learned lots about git remotes and attempted a rebase, but there were a few conflicts that require actual thought. Probably won't get around to it until tomorrow.</p>",
        "id": 322904836,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674419648
    },
    {
        "content": "<p>Even if you don't manage to close all the sorries I would still encourage you to push what you have! With incremental progress we'll get there eventually.</p>",
        "id": 322921319,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674433056
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 322926664,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674437428
    },
    {
        "content": "<p>I'm starting to wonder if I should also be reorganizing stuff in this PR, because I'm not sure I entirely understand how all these lemmas were organized in mathlib. Like, should I move <code>Pairwise</code> to the pairwise file? and <code>Forall2</code> to the forall2 file? it makes way more sense to me to be there than <code>Basic</code>.</p>",
        "id": 322959416,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674461328
    },
    {
        "content": "<p>but I think I will stick to the simple translation for now, and we can clean it up in a future PR.</p>",
        "id": 322959538,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674461390
    }
]