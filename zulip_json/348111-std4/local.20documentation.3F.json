[
    {
        "content": "<p>I would like to contribute to the documentation effort, and I'm wondering what the idiomatic way to generate local documentation for std4 is.</p>\n<p>Should I hack into the <code>lakefile.lean</code> as discussed on <a href=\"https://github.com/leanprover/doc-gen4#usage\">docgen 4</a>, or is there a clean way to do this?</p>",
        "id": 313511204,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1669991223
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> , I don't know the answer to this question as I've never used doc-gen locally</p>",
        "id": 313511495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669991305
    },
    {
        "content": "<p>I'm only asking this because std4 does not have the magic <code>lakefile.lean</code> bit for docgen. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wouldn't it make sense to have it there?</p>",
        "id": 313511954,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1669991438
    },
    {
        "content": "<p>Possibly, if you can make it work I'll take a PR for that</p>",
        "id": 313512020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669991461
    },
    {
        "content": "<p>Well following <a href=\"https://github.com/leanprover/doc-gen4#usage\">https://github.com/leanprover/doc-gen4#usage</a> does work, but the documentation generated is all broken. Seems like missing images and broken CSS or something</p>",
        "id": 313512537,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1669991614
    },
    {
        "content": "<p>It makes it hard to write doc if I can't make sure it looks nice and lean, I'll wait for <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> to get back to us in case he's got a solution</p>",
        "id": 313512810,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1669991699
    },
    {
        "content": "<p>What is in the mathlib4 lakefile works locally without issues. For me. Once upon a time there was an idea to ship doc-gen with lean which would allow lake to provide this facet natively but that was postponed at least for now. </p>\n<p>If something is broken with the local documentation I'd say that's either a bug or a mistake you made. I can try generating it locally myself when I'm home.</p>",
        "id": 313523061,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669994671
    },
    {
        "content": "<p>the question is about std4 not mathlib4 though. Do the links still work if you run the same code in std4?</p>",
        "id": 313525444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669995277
    },
    {
        "content": "<p>Yes they should work arbitrarily there is nothing specific to mathlib in doc-gen that I can think of</p>",
        "id": 313526526,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669995574
    },
    {
        "content": "<p>Okay doc-gen is broken because of some lake stuff again let me fix that first and then I'll see how it plays with std4</p>",
        "id": 313533500,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669997495
    },
    {
        "content": "<p>So apparently this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">EIO.toIO'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Lake.mkLoadConfig</span> <span class=\"o\">{</span><span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span><span class=\"o\">})</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>is broken now because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"bp\">'</span><span class=\"n\">u_1'</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">DocGen4.lakeSetup'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">occur</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">nor</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">explicit</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">provided</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">occurring</span> <span class=\"n\">at</span> <span class=\"n\">expression</span>\n  <span class=\"n\">Lake.mkLoadConfig.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">Lake.LakeOptions.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">FilePath.mk</span> <span class=\"s2\">\".\"</span><span class=\"o\">)</span> <span class=\"n\">Lake.defaultConfigFile</span> <span class=\"n\">leanInstall</span><span class=\"bp\">?</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span>\n      <span class=\"n\">EmptyCollection.emptyCollection.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">List.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">false</span> <span class=\"n\">Lake.Verbosity.normal.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>because: Lake.Verbosity is in Type u now? <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> why is that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Verbosity</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">quiet</span>\n<span class=\"bp\">|</span> <span class=\"n\">normal</span>\n<span class=\"bp\">|</span> <span class=\"n\">verbose</span>\n<span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n</code></pre></div>\n<p>and in general, how do I address this? It appears lean can (and I think rightfully so?) not infere the universe levels here?</p>\n<p>I guess this works :D</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Lake.Verbosity</span>\n  <span class=\"k\">let</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"n\">Lake.mkLoadConfig</span> <span class=\"o\">{</span><span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">verbosity</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Lake.Verbosity.normal</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>but that feels awful</p>",
        "id": 313535071,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669997932
    },
    {
        "content": "<p><code>mkLoadConfig.{0}</code> should work</p>",
        "id": 313535508,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669998043
    },
    {
        "content": "<p>Ah I tried the annotation directly at verbosity but it didn't like that...is there a reason we support it at the function but not like <code>.verbose.{0}</code>?</p>",
        "id": 313535923,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669998163
    },
    {
        "content": "<p>Looks slightly cursed, but for consistency we probably should, yeah</p>",
        "id": 313536598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669998342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> just built locally after fixing the compilation issue with the latest version of lean:<br>\n<a href=\"/user_uploads/3121/1GW7xR0J18o7CCwxMi--Boh1/image.png\">image.png</a> <br>\nlooks fine to me.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1GW7xR0J18o7CCwxMi--Boh1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/1GW7xR0J18o7CCwxMi--Boh1/image.png\"></a></div>",
        "id": 313547847,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670001491
    },
    {
        "content": "<p>Looks awesome!</p>",
        "id": 313547979,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670001528
    },
    {
        "content": "<p>Can you verify on your end?</p>",
        "id": 313548013,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670001537
    },
    {
        "content": "<p>On it</p>",
        "id": 313548042,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670001545
    },
    {
        "content": "<p>That's why you haven't been thanked yet</p>",
        "id": 313548064,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670001554
    },
    {
        "content": "<p>:D</p>",
        "id": 313548294,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670001610
    },
    {
        "content": "<p>you'll have to do a <code>lake -Kdoc=on update</code> then <code>lake -Kdoc=on build Std:docs</code></p>",
        "id": 313548388,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670001650
    },
    {
        "content": "<p>It does work, thanks!</p>",
        "id": 313549375,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670001922
    },
    {
        "content": "<p>Minor remark however, the search feature seems to be broken</p>",
        "id": 313549421,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670001937
    },
    {
        "content": "<p>Searching <code>array</code> for instance yields</p>\n<p><a href=\"/user_uploads/3121/XP4Sk20AJnaGNX6W9j7Xs9xs/Screenshot-2022-12-02-at-18.25.59.png\">Screenshot-2022-12-02-at-18.25.59.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XP4Sk20AJnaGNX6W9j7Xs9xs/Screenshot-2022-12-02-at-18.25.59.png\" title=\"Screenshot-2022-12-02-at-18.25.59.png\"><img src=\"/user_uploads/3121/XP4Sk20AJnaGNX6W9j7Xs9xs/Screenshot-2022-12-02-at-18.25.59.png\"></a></div>",
        "id": 313549568,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670001974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/local.20documentation.3F/near/313512020\">said</a>:</p>\n<blockquote>\n<p>Possibly, if you can make it work I'll take a PR for that</p>\n</blockquote>\n<p>I made it work! Slight problem with the search feature but I have my best guy on it</p>",
        "id": 313549759,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670002037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is <code>lake -Kdoc=on build Std:docs</code> reasonable to you or do you want <code>-Kenv=dev</code> or something else?</p>",
        "id": 313550749,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670002312
    },
    {
        "content": "<p>doc=on seems fine</p>",
        "id": 313550972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670002371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/348111-std4/topic/local.20documentation.3F/near/313549421\">said</a>:</p>\n<blockquote>\n<p>Minor remark however, the search feature seems to be broken</p>\n</blockquote>\n<p>Ehhh, its kind of a legacy feature specifically for mathlib that I should probably remove at some point, you're not supposed to actually use the search by pressing enter or the button but rather by clicking on the suggestions it provides you with.</p>",
        "id": 313552938,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670002896
    },
    {
        "content": "<p>I would be fine with that but I don't get any suggestions <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>\n<p><a href=\"/user_uploads/3121/HNndCOlfU5afMgL9JrYcLUX8/Screenshot-2022-12-02-at-18.43.16.png\">Screenshot-2022-12-02-at-18.43.16.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HNndCOlfU5afMgL9JrYcLUX8/Screenshot-2022-12-02-at-18.43.16.png\" title=\"Screenshot-2022-12-02-at-18.43.16.png\"><img src=\"/user_uploads/3121/HNndCOlfU5afMgL9JrYcLUX8/Screenshot-2022-12-02-at-18.43.16.png\"></a></div>",
        "id": 313553498,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670003044
    },
    {
        "content": "<p>FYI: <a href=\"https://github.com/leanprover/std4/pull/50\">https://github.com/leanprover/std4/pull/50</a></p>",
        "id": 313554156,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670003237
    },
    {
        "content": "<p>Interesting, I do</p>",
        "id": 313554191,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670003251
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Xl0eW_cakPyTAYGlKrsI5LEk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xl0eW_cakPyTAYGlKrsI5LEk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Xl0eW_cakPyTAYGlKrsI5LEk/image.png\"></a></div>",
        "id": 313554229,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670003268
    },
    {
        "content": "<p>I don't know what I'm doing wrong, maybe it just recognizes its master</p>",
        "id": 313555102,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670003541
    },
    {
        "content": "<p>Does your console show something maybe?</p>",
        "id": 313555246,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670003588
    },
    {
        "content": "<p>Was running on firefox, just tried on chrome, and console does not say anything helpful except maybe</p>\n<blockquote>\n<p>Access to script at 'file:///Users/adrien/repos/std4/mine/build/doc/instances.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, isolated-app, chrome-extension, chrome, https, chrome-untrusted.</p>\n</blockquote>",
        "id": 313555911,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670003809
    },
    {
        "content": "<p>Ah, you're just opening these HTML files directly that's not gonna work because of this issue.</p>",
        "id": 313557679,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670004240
    },
    {
        "content": "<p>You need to host a local http server like for example <code>python3 -m http.server</code> in the directory <code>doc/</code> in your std4 checkout</p>",
        "id": 313557776,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670004258
    },
    {
        "content": "<p>Oh I see, I did what I usually do with Rust docs my bad</p>",
        "id": 313559117,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670004677
    },
    {
        "content": "<p>If i was a better web developer I could probably fix this but I have to admit this website only looks so good because I cannibalized the original doc-gen massively I don't actually know what I'm doing in the browser :D</p>",
        "id": 313559245,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670004717
    },
    {
        "content": "<p>Well I can relate to that <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
        "id": 313559878,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1670004891
    }
]