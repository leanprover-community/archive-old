[
    {
        "content": "<p>Hello!</p>\n<p>Are there any thoughts on having stuff from Rust's <code>std::convert</code>? i.e. <code>From</code>, <code>TryFrom</code>, <code>Into</code>, etc. Is this a direction Std wants to move in? If not, what would be the alternative way of encoding conversions?</p>",
        "id": 322390572,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1674166770
    },
    {
        "content": "<p>hm that seems like more of a language design question, I would rather take it to the core team</p>",
        "id": 322391684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674167224
    },
    {
        "content": "<p>Right now conversions seem to be expressed either via typeclasses that fix one side like <code>ToString</code>, <code>ToExpr</code>, <code>FromJson</code>, or via intrinsic methods like <code>UInt32.toUInt64</code></p>",
        "id": 322392242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674167431
    },
    {
        "content": "<p>there is also the coercion system of course, which we use a lot more expansively than rust</p>",
        "id": 322392345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674167480
    },
    {
        "content": "<p>it doesn't seem like a good idea to have fallible conversions as coercions to option/except though</p>",
        "id": 322392440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674167519
    },
    {
        "content": "<p>There are the various <code>String.toXXX?</code> functions that go into Option, but I'm not sure how well those generalize. Are those typeclasses used in Rust in the way we use coercions?</p>",
        "id": 322394530,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674168295
    },
    {
        "content": "<p>Ok, thanks. For <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, the original problem is you want to write things like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Repr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"n\">asBytes</span> <span class=\"o\">:</span> <span class=\"n\">ToByteArray</span> <span class=\"n\">Repr</span>  <span class=\"c1\">-- ideally this can be resolved as an instance when constructing Fields</span>\n  <span class=\"n\">toRepr</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>Here <code>Field</code> is to denote a large prime field for cryptographic computations. Ideally, we would want to have some representation of field elements as bytes -- but we also may want to represent them with something with more information than just <code>ByteArray</code>. Hence, we have the need to say instead \"we have some <code>Repr</code>, and <code>Repr</code> can be converted to <code>ByteArray</code>.\"</p>\n<p>I look at this code though, and I feel like there's something off.</p>",
        "id": 322396413,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1674169071
    },
    {
        "content": "<p>The rust code would look something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Repr</span><span class=\"w\"> </span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">AsMut</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">to_repr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Repr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 322396924,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1674169294
    },
    {
        "content": "<p>which, interestingly, does not use <code>{Try}{From,Into}</code></p>",
        "id": 322400531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674171062
    },
    {
        "content": "<p>I don't think we really have any equivalent of <code>AsRef</code>, since that is making an assertion about the actual byte representation of the value</p>",
        "id": 322400671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674171127
    },
    {
        "content": "<p>Oh, yes <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> I guess here the example is using <code>AsRef</code>.</p>",
        "id": 322401546,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1674171610
    },
    {
        "content": "<p>What would be the best way to replicate the Rust code in Lean?</p>",
        "id": 322401621,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1674171658
    },
    {
        "content": "<p>what do you want to do with the bytes?</p>",
        "id": 322401693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674171705
    },
    {
        "content": "<p>An answer to Mario's question is what is needed. However, if I'm right about your use case, Leo's \"views\" idea is something to look into. See: <br>\n&lt;<a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Error.3A.20unknown.20free.20variable.20'_uniq.2E402'/near/275522380\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Error.3A.20unknown.20free.20variable.20'_uniq.2E402'/near/275522380</a>&gt;</p>\n<p>PS: I vaguely recall a better reference on Zulip but I couldn't find it and I might have dreamed it. In any case, the test that Leo links to in the thread above is useful to grasp the idea.</p>",
        "id": 322406847,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1674174597
    },
    {
        "content": "<p>For reference, the idea of a view is from the paper \"the view from the left\" by Conor mc bride</p>",
        "id": 322420912,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1674183748
    }
]