[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Even though I mentioned in a Github comment that I closed the <code>set</code> typed <code>perm.support</code> because of your <code>dec_trivial</code>, I still went and did the work to make sure it still works. You can check <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/perm-support-refactor\">branch#pechersky/perm-support-refactor</a>, <code>group_theory.specific_groups.alternating</code> compiles without having to change the <code>dec_trivial</code> step</p>",
        "id": 237413359,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620169010
    },
    {
        "content": "<p>Some of the proofs got simpler, and I bet some of the juggling you had to do with <code>(f : {x // x ∈ (σ.support : set α)} ≃ {x // x ∈ (τ.support : set α)})</code> can get much neater</p>",
        "id": 237413502,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620169098
    },
    {
        "content": "<p>I didn't do much refactoring to remove <code>fintype</code></p>",
        "id": 237413540,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620169126
    },
    {
        "content": "<p>Just wanted to check that <code>dec_trivial</code> still works</p>",
        "id": 237413557,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620169138
    },
    {
        "content": "<p>So if you and co agree, we can do it piece by piece. I also hope that for the solvability, after I actually get the <code>form_perm</code> working, you'll be able to express all of this cleaner.</p>",
        "id": 237413625,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620169185
    },
    {
        "content": "<p>That’s great. I bet that the explicit calculations will get easier with <code>form_perm</code>, but I’m still pleased that this way works.</p>",
        "id": 237438476,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620188310
    },
    {
        "content": "<p>So I think, if possible, we get the file separation refactor merged when we can, then try to go the <code>finset -&gt; set</code> refactor on top of that. The branch shows that it is possible with the current state of master (and your PR), but that branch has all sorts of cruft on it -- it'll be easier to start anew</p>",
        "id": 237438598,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620188424
    },
    {
        "content": "<p>Additionally, we can choose to keep all of them statements about <code>card</code> on <code>fintype</code> underlying types, and transfer those over to the more general case later as well.</p>",
        "id": 237438631,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620188464
    },
    {
        "content": "<p>One way to do this would be to have an initial helper lemma stating that on a <code>fintype</code>, <code>perm.support</code> (the set version), when coerced via <code>set.to_finset</code>, is equal to the current definition that uses <code>finset.univ.filter</code>.</p>",
        "id": 237438847,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620188668
    }
]