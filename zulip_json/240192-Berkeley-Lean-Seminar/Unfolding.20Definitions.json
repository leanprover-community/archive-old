[
    {
        "content": "<p>I was playing around with unfolding definitions and I was getting a little stuck. For example,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">[(</span><span class=\"bp\">≤</span><span class=\"o\">)],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>turns the goal into</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">less_than_or_equal</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>but after that, how would you unfold/unravel the definition of \"less_than_or_equal_to\"?</p>",
        "id": 201068669,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1592338764
    },
    {
        "content": "<p>Right click on the definition and peek it to see what it is.</p>",
        "id": 201068771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592338811
    },
    {
        "content": "<p>If you know how something is defined, it's much easier to figure out how to deal with it.</p>",
        "id": 201068811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592338837
    },
    {
        "content": "<p>Oh -- you'll have to write <code>#check nat.less_than_or_equal</code> -- we are still a couple of pull requests away from being able to click on stuff in the goal (it's coming soon)</p>",
        "id": 201068918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592338909
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 201069045,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1592338959
    },
    {
        "content": "<p>So do you understand the definition?</p>",
        "id": 201069066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592338971
    },
    {
        "content": "<p>I understand what it's doing, although I'm not familiar with some of the words/symbols used</p>",
        "id": 201069332,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1592339091
    },
    {
        "content": "<p>The only command being used is <code>inductive</code> -- everything else is being defined. Did you look at chapter 7 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> on inductive types?</p>",
        "id": 201069609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592339235
    },
    {
        "content": "<p>I'll take a look at that. I guess I was asking more about unfolding definitions in general, rather than this specific one.</p>",
        "id": 201069779,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1592339330
    },
    {
        "content": "<p>If you write <code>#print prefix nat.less_than_or_equal</code> you'll see all the things generated when Lean made that inductive type, but most of them were generated by a computer and are of no relevance to you. The key things are <code>rec</code>, <code>refl</code> and <code>step</code>; everything else is made from them.</p>",
        "id": 201069812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592339347
    },
    {
        "content": "<p>To deal with unfolding in general you need to know what's going on. The techniques vary depending on what the thing you're trying to get to the bottom of is.</p>",
        "id": 201069893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592339398
    },
    {
        "content": "<p>Got it</p>",
        "id": 201070455,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1592339662
    },
    {
        "content": "<p><code>unfold X</code> means something like <code>simp only [X._equation_lemma_1, X._equation_lemma_2, ...]</code> so it only works for things with equation lemmas, e.g. a definition made using the equation compiler and some other definitions. I'm not sure there's a general answer to your question. Often if you look at the definition of something then directly after it there's a lemma proved which shows you how to unfold the thing using a rewrite.</p>",
        "id": 201070735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592339817
    },
    {
        "content": "<p>My understanding is also that <code>dsimp</code> does things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>-reduction. Is that correct?</p>",
        "id": 201071378,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592340233
    },
    {
        "content": "<p>Yes I think it does, although you might be able to switch this off somehow with some option to dsimp</p>",
        "id": 201071671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340378
    },
    {
        "content": "<p>What if you only want to do <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>-reduction and nothing else?</p>",
        "id": 201072644,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592340863
    },
    {
        "content": "<p>You can do it manually with <code>change</code>, or there might be some options to <code>simp</code>, or there will be some weird way of doing it using some meta command which does precisely beta reduction. You could ask in #general, preferably with an explicit example</p>",
        "id": 201072767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592340947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Unfolding.20Definitions/near/201072644\">said</a>:</p>\n<blockquote>\n<p>What if you only want to do <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>-reduction and nothing else?</p>\n</blockquote>\n<p>I don't know exactly what it does, but <code>dsimp only</code> (short for <code>dsimp only []</code>) does <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>-reductions and seemingly little (if anything) else.  I've been using <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s suggestion of <code>change</code>, too, for getting things into the right form.  The <code>convert_to</code> tactic looks interesting, but I haven't tried it yet.</p>",
        "id": 201075243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592342164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Unfolding.20Definitions/near/201068771\">said</a>:</p>\n<blockquote>\n<p>Right click on the definition and peek it to see what it is.</p>\n</blockquote>\n<p>I haven't understood why it looks like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">less_than_or_equal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">less_than_or_equal</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">less_than_or_equal</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">less_than_or_equal</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>rather than something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">my_less_than_or_equal</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">my_less_than_or_equal</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">my_less_than_or_equal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">my_less_than_or_equal</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Is it just a matter of taste to factor out the <code>a</code>?  (I've seen this pattern elsewhere in the standard library and mathlib, too.)</p>",
        "id": 201097744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592363708
    },
    {
        "content": "<p>Yes I <em>think</em> it's just a matter of taste. You could ask the experts to make sure</p>",
        "id": 201104625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592374199
    }
]