[
    {
        "content": "<p>I'm currently trying to solve --0079 in 09_limits_final.lean<br>\nThis is my proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">bdd_below_segment</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">negf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">continuous_at_pt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_opposite</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">bdd_above_segment</span> <span class=\"n\">negf</span> <span class=\"k\">with</span> <span class=\"n\">negm</span> <span class=\"n\">hnegm</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">negm</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xab</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hnegm</span> <span class=\"n\">x</span> <span class=\"n\">xab</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- works until here</span>\n  <span class=\"c1\">-- now, I just need to move terms around an inequality</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- linarith fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Does anybody know what might be wrong with this? <br>\nThe solution file does something very similar and <code>linarith</code> works in a similar context.</p>\n<p>Thanks in advance!</p>",
        "id": 201553284,
        "sender_full_name": "Shreesha S",
        "timestamp": 1592774437
    },
    {
        "content": "<p>You've run into a bug in the tutorial that I ran into (that I've been meaning to submit a pull request for to fix).  First, to see what's going on, at the top of the file comment out <code>set_option pp.beta true</code>.</p>",
        "id": 201553640,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592775046
    },
    {
        "content": "<p>When <code>pp.beta</code> is true, the goal window will automatically beta reduce expressions, leading to some bewilderment that certain things should work but don't seem to.  The issue is that you were seeing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hnegm</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">negm</span>\n</code></pre></div>\n\n\n<p>when, secretly, it was actually</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hnegm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">negm</span>\n</code></pre></div>\n\n\n<p>This is a non-beta-reduced term.  To beta reduce it (and nothing more (I think)), do <code>dsimp only at hnegm</code>.</p>",
        "id": 201553763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592775257
    },
    {
        "content": "<p>So I guess first doing <code>dsimp at nhegm,</code> will make <code>linarith</code> work as expected here?</p>",
        "id": 201553765,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592775262
    },
    {
        "content": "<p>oops, sent at the same time as your last message I guess</p>",
        "id": 201553770,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592775285
    },
    {
        "content": "<p>This is not a bug in Lean because <code>linarith</code> won't beta reduce expressions for you by design, since beta reduction can make terms arbitrarily complicated (lambda calculus can compute all recursively enumerable functions, after all).</p>",
        "id": 201553822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592775370
    },
    {
        "content": "<p>Wow that works! thanks a lot<br>\nSo what exactly does <code>set_option pp.beta true</code> do?</p>",
        "id": 201553883,
        "sender_full_name": "Shreesha S",
        "timestamp": 1592775512
    },
    {
        "content": "<p>Do you understand what <code>hnegm : (λ (x : ℝ), -f x) x ≤ negm</code> means in my message above?</p>",
        "id": 201553901,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592775549
    },
    {
        "content": "<p>But, specifically, it is setting a pretty printer option to beta reduce terms before showing them in the goal window.</p>",
        "id": 201553907,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592775584
    },
    {
        "content": "<p>I think I do.. It was a lambda function but the final goal was not. It had to be reduced.. <br>\nAhh got it...</p>",
        "id": 201553951,
        "sender_full_name": "Shreesha S",
        "timestamp": 1592775627
    },
    {
        "content": "<p>Beta reduction is the rule that says when you apply a lambda expression to an argument, you can substitute that argument into the body of the lambda expression.  It models function application.</p>",
        "id": 201553957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592775632
    },
    {
        "content": "<p>I think I get it now... thanks a lot!</p>",
        "id": 201554011,
        "sender_full_name": "Shreesha S",
        "timestamp": 1592775723
    },
    {
        "content": "<p>I'd looked into <code>linarith</code>, and what it does is look for linear inequalities and locate all the \"atoms\", which are the individual terms of the inequalities.  It does some <em>really</em> basic equality checking of these atoms, and it won't factor out anything even if it could decide it can factor stuff out later.  Like <code>(λ (x : ℝ), -f x) x</code> ends up being one of the atoms of <code>hnegm</code>.  While this is equal to <code>-f x</code>, it won't notice <code>f x</code> is a better atom.  Anyway, in your case you had <code>negm</code>, <code>f x</code>, and <code>-f x</code> as atoms, so it's not able to prove any inequalities.</p>",
        "id": 201554214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592775871
    },
    {
        "content": "<p>By the way, there is another tactic, <code>linarith!</code>, which is more aggressive about looking for atoms. But it also fails in this case</p>",
        "id": 201554227,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592775920
    },
    {
        "content": "<p>I got the impression from perusing the source it fails because the atom is <code>-f x</code> and it doesn't know how to continue factoring things out.  (I really had hoped <code>linarith!</code> would work, but it sort of makes sense not trying to \"fix\" it if <code>dsimp</code> works well enough.)</p>",
        "id": 201554282,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592776006
    },
    {
        "content": "<p>It's a little clunky, but <code>linarith [show -f x ≤ negm, from by dsimp at hnegm; exact hnegm],</code> also works</p>",
        "id": 201554392,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592776212
    },
    {
        "content": "<p>By the way, it's sort of a relief that I'm not the only one that had this issue with these tutorials.  I myself spent a couple frustrating hours trying to get to the bottom of it (and I was about ready to wait another few years to learn a computer proof assistant -- it's no fun fighting with invisible representations of things in a language with a complicated type system!).  Apparently Patrick Massot's students never had this issue, but I wonder if it's more likely to appear with PhD students rather than undergrads because a PhD student is more likely to have confidence about what should actually work.  (That is, it appears for undergrads, too, but they'll just try something else because they think they're doing something wrong.)</p>",
        "id": 201554447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592776346
    },
    {
        "content": "<p>Another thing instead of <code>dsimp</code> is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">hnegm</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>if you want some control over the final representation.</p>",
        "id": 201554466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592776426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Bug.20in.20lean.3F.3F/near/201554447\">said</a>:</p>\n<blockquote>\n<p>By the way, it's sort of a relief that I'm not the only one that had this issue with these tutorials.  I myself spent a couple frustrating hours trying to get to the bottom of it (and I was about ready to wait another few years to learn a computer proof assistant -- it's no fun fighting with invisible representations of things in a language with a complicated type system!).  Apparently Patrick Massot's students never had this issue, but I wonder if it's more likely to appear with PhD students rather than undergrads because a PhD student is more likely to have confidence about what should actually work.  (That is, it appears for undergrads, too, but they'll just try something else because they think they're doing something wrong.)</p>\n</blockquote>\n<p>I think the existence of the zulip chat is actually one of the main things that makes Lean tolerable to learn.</p>",
        "id": 201554512,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592776462
    },
    {
        "content": "<p>Yeah, this is certainly an invaluable resource.  I get a lot of help through even just the search box at the top.</p>",
        "id": 201554526,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592776516
    },
    {
        "content": "<p>I don't think I've ever asked a question on the new members stream which didn't get some kind of answer within 5 minutes</p>",
        "id": 201554571,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592776579
    },
    {
        "content": "<p>But I do feel like the documentation available online for Lean is a bit lacking right now</p>",
        "id": 201554579,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592776609
    },
    {
        "content": "<p>Some of it's for Lean 2, which is confusing.  Yesterday I was trying to figure out how to do the different specialized <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">rewrite rules</a>, but I'm thinking they don't exist anymore.</p>",
        "id": 201554647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592776718
    },
    {
        "content": "<p>Some of them definitely still work, not sure about all of them</p>",
        "id": 201554876,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592777098
    },
    {
        "content": "<p>Oh and I guess some of them still exist but now have different notation? Like it looks like <code>rw → h</code> used to be <code>rw -h</code>?</p>",
        "id": 201554971,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592777248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Bug.20in.20lean.3F.3F/near/201554971\">said</a>:</p>\n<blockquote>\n<p>Oh and I guess some of them still exist but now have different notation? Like it looks like <code>rw → h</code> used to be <code>rw -h</code>?</p>\n</blockquote>\n<p>I can't get either to work.  The <a href=\"https://leanprover.github.io/reference/tactics.html#the-rewriter\">documentation</a> suggests <code>←</code> is the only thing you can do.  I think maybe those Lean 2 rewrite rules were replaced  by <code>conv</code>.</p>",
        "id": 201555277,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592777682
    },
    {
        "content": "<p>Oh, I made a typo. I meant <code>←</code></p>",
        "id": 201555364,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592777854
    },
    {
        "content": "<p>But for instance, <code>rw h at *</code> still works I think</p>",
        "id": 201555367,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592777876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Bug.20in.20lean.3F.3F/near/201555367\">said</a>:</p>\n<blockquote>\n<p>But for instance, <code>rw h at *</code> still works I think</p>\n</blockquote>\n<p>Yeah, that's part of its grammar:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"o\">([</span> <span class=\"o\">(</span><span class=\"err\">←?</span> <span class=\"n\">expr</span><span class=\"o\">),</span> <span class=\"bp\">...</span> <span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"err\">←?</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">at</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"err\">⊢</span> <span class=\"bp\">|</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">))</span><span class=\"err\">?</span>\n</code></pre></div>\n\n\n<p>This says every rewrite can optionally end in an <code>at</code> expression, consisting of either <code>at *</code> or <code>at</code> followed by any number of identifiers or <code>*</code>.</p>\n<p>This ends up being defined using parser combinators in <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L359\"><code>interactive.lean</code> line 359</a>  (which is used in the <code>meta def rewrite</code> a bit further down.)</p>",
        "id": 201556296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592779604
    },
    {
        "content": "<p>Oops, that file only defined everything before the \"at\".  The <code>meta def rewrite</code> also refers to <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive_base.lean#L75\"><code>interactive_base.lean</code> line 75</a> for the <code>at</code> part.</p>",
        "id": 201556486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592779938
    }
]