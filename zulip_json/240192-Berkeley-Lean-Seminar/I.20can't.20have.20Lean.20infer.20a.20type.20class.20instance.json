[
    {
        "content": "<p>I have been playing around the following snippet I wrote in which I attempted to show that every Boolean algebra is an ortholattice:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">boolean_algebra</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ortholattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">neg_is_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_compl</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">boolean_algebra</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">to_ortholattice</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ortholattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">boolean_algebra</span>\n</code></pre></div>\n\n\n<p>Ortholattices have negations, and so do Boolean algebras.  I want to construct a term of type <code>has_neg  α</code> and I want to just use that coming from α being a boolean algebra, but I get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_neg</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>What is going on?</p>",
        "id": 200314616,
        "sender_full_name": "Kentarô YAMAMOTO",
        "timestamp": 1591756860
    },
    {
        "content": "<p>I think it's because you're not asserting there is an instance <code>boolean_algebra  α</code>.  If you change the beginning of the instance definition to the following, it seems OK:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">to_ortholattice</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ortholattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 200315125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591757572
    },
    {
        "content": "<p>I think you might want to be defining your ortholattice as a class, and then provide an instance of ortholattice given boolean_algebra (assuming the ortholattice structure is unique)</p>",
        "id": 200315261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591757797
    },
    {
        "content": "<p>Like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">boolean_algebra</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">ortholattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">neg_is_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_compl</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">boolean_algebra</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">to_ortholattice</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ortholattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">boolean_algebra</span>\n</code></pre></div>",
        "id": 200315362,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591757998
    },
    {
        "content": "<p>(as I understand it, class/instance gives a way to define structures and specific instances of those constructors in such a way that Lean will automatically supply you with one of those instances when you request it with the [...] argument notation.  It's a bit more free-form than Haskell's typeclasses, if you're familiar with those.)</p>",
        "id": 200315509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591758207
    },
    {
        "content": "<p>Thank you (also thank you for spotting my error in typing structure instead of class...)</p>",
        "id": 200316513,
        "sender_full_name": "Kentarô YAMAMOTO",
        "timestamp": 1591759691
    }
]