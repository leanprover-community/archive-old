[
    {
        "content": "<p>In Multiplication World level 9, we prove <code>a*(b*c)=b*(a*c)</code>. I wanted to do <code>rw mul_comm, rw mul_assoc, rw mul_comm,</code> with the final rewrite applied to the parenthesized multiplication on the LHS (since beforehand we have <code>b*(c*a)</code>). Is this possible? I managed to prove it using induction but this seemed unnecessary.</p>",
        "id": 198817013,
        "sender_full_name": "Zachary Stier",
        "timestamp": 1590524725
    },
    {
        "content": "<p>You should be able to do <code>rw mul_comm b c</code></p>",
        "id": 198817139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590524768
    },
    {
        "content": "<p>I think there's also a way to enter only the left hand side of a goal and use rewrites there, but I can't remember how to do it</p>",
        "id": 198817241,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590524824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/tactic.20at.20a.20target/near/198817139\">said</a>:</p>\n<blockquote>\n<p>You should be able to do <code>rw mul_comm b c</code></p>\n</blockquote>\n<p>Yes, this works, thanks!</p>",
        "id": 198817437,
        "sender_full_name": "Zachary Stier",
        "timestamp": 1590524925
    },
    {
        "content": "<p>My understanding is that mul_comm is a two-argument function, and giving it b and c causes it to be a concrete instance of commutativity.  <code>rw mul_comm b</code> might have worked, too, since it partially applies the function with b.</p>",
        "id": 198819268,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590525958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/tactic.20at.20a.20target/near/198817241\">said</a>:</p>\n<blockquote>\n<p>I think there's also a way to enter only the left hand side of a goal and use rewrites there, but I can't remember how to do it</p>\n</blockquote>\n<p>I think <code>conv</code> and maybe <code>conv_lhs</code> are relevant keywords</p>",
        "id": 198829794,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590532376
    },
    {
        "content": "<p>Yes, the example on this docs page about <code>conv</code> is almost exactly the example zach brought up:<br>\n<a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 198830095,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590532634
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198830248,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590532777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/tactic.20at.20a.20target/near/198830095\">said</a>:</p>\n<blockquote>\n<p>Yes, the example on this docs page about <code>conv</code> is almost exactly the example zach brought up:<br>\n<a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>\n</blockquote>\n<p>Oh awesome, thanks! This looks like a very useful/general way to resolve these kinds of proofs.</p>",
        "id": 198922896,
        "sender_full_name": "Zachary Stier",
        "timestamp": 1590599635
    },
    {
        "content": "<p>once you take off the training wheels of the natural number game, the right way to deal with chaining commutativity and associativity is to apply the <code>ring</code> tactic</p>",
        "id": 198923530,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590599941
    },
    {
        "content": "<p><code>ring at h</code> will do something like \"apply commutativity, associativity, and distributivity until the expression is in normal form\"</p>",
        "id": 198923590,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590599980
    },
    {
        "content": "<p>(also, hi! nice to see you here <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> )</p>",
        "id": 198923759,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590600050
    }
]