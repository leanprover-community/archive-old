[
    {
        "content": "<p>In general, when should one use <code>set</code> or <code>subtype</code> to encode what are done by using sets on paper?   Also, I found <code>@[instance]\ndef set.has_coe_to_sort {α : Type u_1} :\nhas_coe_to_sort (set α)</code> in mathlib, but how can one go the other direction, i.e., from subtypes to sets?</p>",
        "id": 200840385,
        "sender_full_name": "Kentarô YAMAMOTO",
        "timestamp": 1592180547
    },
    {
        "content": "<p>I can't really answer this this due to inexperience, but here are a few observations.</p>\n<p>The definitions of <code>set</code> and <code>subtype</code> are as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>A set is merely a predicate on a particular type, and <code>x ∈ s</code> is notation for <code>s x</code>, which is to say the predicate is true for <code>x</code>.  A subtype, however, consists of pairs of an element of the type along with a proof that it satisfies a fixed property.  So, you can write <code>x : subtype α p</code> with the <code>:</code> notation.  The coersion you mention lets you use sets in place of types; in particular, if <code>s</code> and <code>s'</code> are sets, you can write <code>f : s → s'</code>, and it will coerce these sets to subtypes automatically.</p>\n<p>Sets and subtypes have the following sort of inverse pair:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">prop₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">prop₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</code></pre></div>\n\n\n<p>So, an element of a subtype <em>is</em> an element <code>x : α</code> along with a proof of <code>x ∈ s</code>.</p>\n<p>Interestingly, the definition of <code>∃</code> is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Exists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exists</span>\n</code></pre></div>\n\n\n<p>While this uses <code>Sort</code> rather than <code>Type</code> (allowing <code>α</code> to be <code>Prop</code>) and looks nearly the same as <code>subtype</code>, a key difference is that an <code>Exists</code> is a <code>Prop</code> rather than a <code>Type u</code>.  Because of proof irrelevance, two instances of <code>Exists</code> are equal even if their <code>w</code> values are different.  In contrast, two instances of <code>subtype</code> are equal iff their <code>val</code> members are equal (note: proof irrelevance means the <code>property</code> proofs don't come into the equality test).</p>",
        "id": 200845861,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592190911
    },
    {
        "content": "<p>In fact, it appears <code>subtype</code> itself <em>is</em> the coersion from sets to types.  Given a set <code>s : set α</code>, then, since <code>s</code> is just a predicate, <code>subtype s</code> is a type consisting of all pairs <code>⟨x, h⟩</code> with <code>x : α</code> and <code>h : x ∈ s</code>.</p>\n<p>The standard library has the definition</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>but it could just as well be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 200846399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592191940
    },
    {
        "content": "<p>A (sub)set is a term, not a type. It doesn't have terms, but it has elements. A subtype is a type. They're two different ways of carrying the same concepts around</p>",
        "id": 200852813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592201783
    },
    {
        "content": "<p>Also, consider a category whose objects are given by all the types in a universe (terms of <code>Type u</code>) and whose morphism sets are the functions between these types.  The <code>Prop</code> type pretty much gives a <a href=\"https://ncatlab.org/nlab/show/subobject+classifier\">subobject classifier</a>.  Given an object <code>α</code> and a function <code>f : α → Prop</code>, one can consider the preimage of <code>true</code> as a subset of <code>α</code> (called a <code>set</code> in Lean).  The <code>subtype</code> type constructor gives an object <code>subtype f</code> that has a monomorphism <code>subtype f → α</code> whose image is exactly that preimage.</p>\n<p>If you're wanting to work with this full category, it seems like it's better to use <code>subtype</code>s than <code>set</code>s.  However, for local reasoning <code>set</code>s seem to be rather useful.  (That said, if <code>s</code> is a set, then <code>↑s</code> is <code>subtype s</code>, and if you've got <code>h : x ∈ s</code> in your context, then it's easy enough to bundle together an element <code>⟨x, h⟩ : ↑x</code>. So you're not limiting yourself by using <code>set</code>s.)</p>",
        "id": 200930662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592247435
    },
    {
        "content": "<p>One of the most important, and most confusing, basic things to internalise, is that the type <code>set X</code> is the type of subsets of <code>X</code>, but it is called neither <code>subset X</code> or <code>powerset X</code></p>",
        "id": 200931049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592247661
    },
    {
        "content": "<p>Yeah, that took me a bit of mental reconfiguration.  My first non-confusing way of thinking about it was that it's like the category of sets with \"universe\" <code>X</code>, though the analogy is lacking since <code>set X</code> doesn't have any of the functions between sets.  Something I found helpful thinking about is the <a href=\"https://en.wikipedia.org/wiki/Axiom_schema_of_specification\">axiom of separation</a> and how subsets \"are\" the extension of a predicate.</p>\n<p>(Where the analogy is also lacking is it seems there shouldn't be an <code>X</code> where <code>set X</code> \"is\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathsf{Set}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">S</span><span class=\"mord mathsf\">e</span><span class=\"mord mathsf\">t</span></span></span></span></span>.  To \"be\" this category, what we'd want is for every term of <code>set X</code> to have a corresponding term of <code>X</code>, but you seem to get a Russell's paradox.  Not to mention there being a set that contains itself in the form of <code>(λ x, true) : set X</code>, so it would violate the axiom of regularity.)</p>",
        "id": 200933773,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592249225
    },
    {
        "content": "<p>Right: a subset of X is the same as a function X -&gt; Prop. I think it's difficult to imagine the category of all sets in this way, because you can't have an abstract set in type theory, you can only have a subset of X, and X is a type so its \"elements\" (terms) don't have elements.</p>",
        "id": 200934544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592249628
    },
    {
        "content": "<p>I guess what I was thinking is how you can sometimes have internal versions of different constructions.  There might have been functions <code>f : set X → X</code> and <code>mem : X → X → Prop</code> with the property that <code>x ∈ s ↔ mem x (f s)</code> for every <code>x : X</code> and <code>s : set X</code>, but now that I think about it cardinality prevents this possibility.  (So this sort of thing can't possibly work for at least three different reasons now <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>.  However... if you only use <em>definable</em> sets I'm unsure whether this is impossible, though likely <code>f</code> wouldn't be anything computable.)</p>",
        "id": 200936040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1592250406
    }
]