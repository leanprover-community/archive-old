[
    {
        "content": "<p>In the advanced multiplication world, I was trying to prove something by cases, and one of the goals was <code>0 = succ b</code>.  Is there a way to tell it that this is a contradiction? I thought <code>0</code> and <code>succ</code> were constructors.</p>",
        "id": 198859460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590565649
    },
    {
        "content": "<p>If your <em>goal</em> is <code>0 = succ b</code> then you can't make any further progress -- you'll have to get a contradiction from your hypotheses.</p>",
        "id": 198877483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590578161
    },
    {
        "content": "<p>Oh right, thanks. Not sure why I thought that should have been possible.  (In any case, I passed this pons asinorum -- somehow even after carefully thinking through the induction argument, it took 100x longer than all the exercises to that point. Inequality world has been fine so far, but <code>a \\le b \\or b \\le a</code> gave me pause since it didn't seem constructive at first.)</p>",
        "id": 198928704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590602493
    },
    {
        "content": "<p>you don't need things to be constructive</p>",
        "id": 198929272,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590602723
    },
    {
        "content": "<p>How do you set up \"assume not(a \\le b)\"?  With everything I tried, Lean complained about how the existential wasn't decidable.</p>",
        "id": 198929520,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590602826
    },
    {
        "content": "<p>(also what does \"i pass this pons asinorum means?)</p>",
        "id": 198929535,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590602833
    },
    {
        "content": "<p><code>by_cases a \\le b</code>?</p>",
        "id": 198929570,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590602846
    },
    {
        "content": "<p>should apply the law of excluded middle to split your proof in two, in on branch you have <code>a ≤ b</code> and in the other you have <code>¬ a ≤ b</code></p>",
        "id": 198929641,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590602881
    },
    {
        "content": "<p>\"pons asinorum\" referred to an early theorem in Euclid's elements that many had a difficult time getting through.  (I think it's the one about the base angles of an isosceles triangle being the same.)</p>",
        "id": 198929843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590602951
    },
    {
        "content": "<p>hah okay, i was confused because google told me exactly what it was, but i still didn't understand your meaning</p>",
        "id": 198929919,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590602982
    },
    {
        "content": "<p>is <code>by_cases</code> what you want? or <code>by_contradiction</code>?</p>",
        "id": 198929942,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590602995
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_contradiction\">tactic#by_contradiction</a> ?</p>",
        "id": 198929997,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603004
    },
    {
        "content": "<p>ugh the linkifier doesn't work because the title of the relevant section is \"by_contra / by_contradiction\"</p>",
        "id": 198930089,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603044
    },
    {
        "content": "<p><code>by_cases a \\le b</code> gives <code>by_cases tactic failed, type of given expression is not decidable state</code></p>",
        "id": 198930170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603084
    },
    {
        "content": "<p>what is \"the linkifier\" btw?</p>",
        "id": 198930197,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590603102
    },
    {
        "content": "<p>I think the issue is that <code>a \\le b</code> is actually an existential statement, but I don't appreciate why it's not decidable yet</p>",
        "id": 198930329,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603145
    },
    {
        "content": "<p>try typing <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a></p>",
        "id": 198930360,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  I think it should be something like <code>by_cases h : a \\leq b</code></p>",
        "id": 198930363,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590603159
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#have\">tactic#have</a></p>",
        "id": 198930439,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590603197
    },
    {
        "content": "<p>oh cool</p>",
        "id": 198930453,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590603200
    },
    {
        "content": "<p>can you give me the URL of the level you're playing?</p>",
        "id": 198930456,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603201
    },
    {
        "content": "<p>it shouldn't matter that it's not decidable, because we're mathematicians</p>",
        "id": 198930486,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603218
    },
    {
        "content": "<p>I think I used it without the <code>h : </code> in earlier exercises, but it gives the same error.</p>",
        "id": 198930495,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603224
    },
    {
        "content": "<p><a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=10&amp;level=9\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=10&amp;level=9</a></p>",
        "id": 198930501,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603228
    },
    {
        "content": "<p>maybe you can tell it to not worry by using the <code>classical</code> tactic</p>",
        "id": 198930643,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603273
    },
    {
        "content": "<p>Indeed you can</p>",
        "id": 198930686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603298
    },
    {
        "content": "<p>when i write a lean file locally, i start with the following after my imports</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</code></pre></div>",
        "id": 198930948,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603408
    },
    {
        "content": "<p>and I haven't had to worry about declaring <code>classical</code></p>",
        "id": 198930974,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603424
    },
    {
        "content": "<p>but i guess for the NNG this is required</p>",
        "id": 198930985,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603431
    },
    {
        "content": "<p>for anyone following along at home, we came up with this proof script as a way to start off <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=10&amp;level=9\">this level</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">classical</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 198931159,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590603506
    },
    {
        "content": "<p>If you open an issue I will fix this so that you don't have to put <code>classical</code></p>",
        "id": 198931266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590603586
    },
    {
        "content": "<p>How do you convert a not-exists into a for-all-not?</p>",
        "id": 198931322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603603
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_neg\">tactic#push_neg</a></p>",
        "id": 198931348,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590603623
    },
    {
        "content": "<p>The next question would be how you import <code>tactic.push_neg</code> from within the body of a proof.</p>",
        "id": 198931823,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603843
    },
    {
        "content": "<p>aargh</p>",
        "id": 198931848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590603854
    },
    {
        "content": "<p>You should just clone the repo and fill in the sorrys in VS Code, adding imports which you need :D</p>",
        "id": 198931919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590603888
    },
    {
        "content": "<p>Anyway, I'm just trying the classical version as an exercise.  I got a perfectly good induction argument.</p>",
        "id": 198931975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590603917
    },
    {
        "content": "<p>I probably should have followed Kevin Buzzard's advice, but I pushed through and did <code>push_neg</code> by hand, so now I have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>I'm not seeing how I would prove this from <code>f</code>.</p>",
        "id": 198933884,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590604768
    },
    {
        "content": "<p>well, at some point you'll probably have to use induction</p>",
        "id": 198934055,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590604844
    },
    {
        "content": "<p>Do you have le_total yet?</p>",
        "id": 198937435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590606379
    },
    {
        "content": "<p>This would be for <code>le_total</code> itself.  (Just finished the natural number game.  It was a nice way to get acquainted with Lean! I knew a bit of Agda coming into it, which was likely helpful.)</p>",
        "id": 198937946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590606629
    }
]