[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I refactored the definition of covering space (<a href=\"https://github.com/leanprover-community/mathlib/tree/covering\">branch#covering</a>). I think that it might be helpful to have both a structure with data (<code>even_covering</code>) and a predicate (<code>evenly_covered</code>). The structure with data is useful for explicit constructions (e.g., <code>translate</code>). The predicate is useful for higher-level stuff (e.g., <code>covering_map</code>). You will need to <code>git pull</code> to get the new definition.</p>",
        "id": 288230415,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1656714479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> An interesting question: Currently we are asserting a homeomorphism <code>f ⁻¹' {x} × U ≃ₜ f ⁻¹' U</code> compatible with mapping to <code>U</code>. Do we also want to assert compatibility with mapping from <code>f ⁻¹' {x}</code>? This is a sort of rigidity property that prevents permutation of <code>f ⁻¹' {x}</code>.</p>",
        "id": 288237765,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1656722304
    },
    {
        "content": "<p>If the fibers are discrete, then compatibility with <code>f ⁻¹' {x}</code> can be achieved by permutation. So the question is just whether we want to impose compatibility with <code>f ⁻¹' {x}</code> when the fibers are not discrete. (Is there a nice example of non-discrete fibers?)</p>",
        "id": 288240660,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1656726133
    },
    {
        "content": "<p>I guess the obvious example is <code>I × U</code> for <code>I</code> not discrete.</p>",
        "id": 288241523,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1656727496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Are you aware of <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> 's branch on <a href=\"https://github.com/leanprover-community/mathlib/tree/shing-covering-spaces-2\">covering spaces</a>?</p>",
        "id": 288406051,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656939187
    },
    {
        "content": "<p>(I didn't do much on that branch so I wouldn't really bother with looking at it)</p>",
        "id": 288406418,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1656939410
    },
    {
        "content": "<p>BTW: Are you still working on homotopy-related stuff? Because during summer I wanted to start looking a bit into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> on my spare time, and would like to avoid stepping on anyone's toes.</p>",
        "id": 288407367,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656939901
    },
    {
        "content": "<p>Not really, I have a few other things going on so I wouldn't worry about what I'm doing.</p>",
        "id": 288419048,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1656946850
    },
    {
        "content": "<p>I thought that we had pi_1 and were well on the way to pi_n by now? But you mean the relation with covering spaces? That would be cool.</p>",
        "id": 288426701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656951351
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> wants to get to the relation between fundamental groups and covering spaces.</p>",
        "id": 288451427,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1656969366
    },
    {
        "content": "<p>yeah that would be a really cool thing to have.</p>",
        "id": 288456349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656972889
    },
    {
        "content": "<p>AFAIK we only have the type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> but not yet that it is a group, no?</p>",
        "id": 288520954,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657024279
    },
    {
        "content": "<p>What is the mathlib name? Then you can ask the docs which instances it carries, right?</p>",
        "id": 288522366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657024946
    },
    {
        "content": "<p>I think it's a group (according to mathlib)</p>",
        "id": 288523758,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657025597
    },
    {
        "content": "<p>IIRC we even have the fundamental group<em>oid</em></p>",
        "id": 288523795,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657025617
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fundamental_group\">docs#fundamental_group</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fundamental_groupoid\">docs#fundamental_groupoid</a></p>",
        "id": 288523911,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657025650
    },
    {
        "content": "<p>Oh sure, I was thinking about the version with paths and homotopies in <code>topology/homotopy</code>.</p>",
        "id": 288524176,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657025779
    },
    {
        "content": "<p>I'm not sure what you mean.... the fundamental groupoid is the groupoid whose objects are the points of X and whose morphisms are homotopy equivalences of paths</p>",
        "id": 288524518,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657025932
    },
    {
        "content": "<p>do we have two versions of the fundamental group?</p>",
        "id": 288524593,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657025963
    },
    {
        "content": "<p>I have <a href=\"https://github.com/leanprover-community/mathlib/pull/14724\">#14724</a> in mind</p>",
        "id": 288524923,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657026088
    },
    {
        "content": "<p>Ah I see, that's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 288525501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657026343
    },
    {
        "content": "<p>I would have expected to use iterated loop-spaces and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to construct this</p>",
        "id": 288525722,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657026425
    },
    {
        "content": "<p>I opened a pull request with the definition: <a href=\"https://github.com/leanprover-community/mathlib/pull/15276\">#15276</a></p>",
        "id": 289346373,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657641519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inducing.is_open_iff</span> <span class=\"o\">(</span><span class=\"n\">inducing_coe</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">subtype.preimage_coe_eq_preimage_coe_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_open.inter</span> <span class=\"n\">b</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303942851,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1665705790
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">induced_topology</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span><span class=\"o\">)):</span><span class=\"n\">is_open</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 305246596,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1666303978
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">induced_topology</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span><span class=\"o\">)):</span><span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_open_iff_forall_mem_open.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU1</span><span class=\"o\">,</span> <span class=\"n\">hU2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV1</span><span class=\"o\">,</span> <span class=\"n\">hV2</span><span class=\"o\">,</span> <span class=\"n\">hV3</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_nhds_iff.mp</span> <span class=\"n\">hU1</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">set.inter_subset_left</span> <span class=\"n\">A</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">mylem</span> <span class=\"n\">V</span> <span class=\"n\">A</span> <span class=\"n\">hV2</span> <span class=\"o\">((</span><span class=\"n\">continuous_inclusion</span> <span class=\"n\">hV1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open_preimage</span> <span class=\"n\">_</span> <span class=\"n\">hU2</span><span class=\"o\">),</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hV3</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 305248234,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1666304798
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mylem</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inducing_coe.is_open_iff.mp</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n  <span class=\"n\">subtype.preimage_coe_eq_preimage_coe_iff.mp</span> <span class=\"n\">c</span> <span class=\"bp\">▸</span> <span class=\"n\">b.inter</span> <span class=\"n\">hs</span>\n</code></pre></div>",
        "id": 305248912,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1666305047
    }
]