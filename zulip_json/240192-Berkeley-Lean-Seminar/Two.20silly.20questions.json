[
    {
        "content": "<p>What is the difference between passing in something like  \"function \\&lt; a b \\&gt; \" and just doing \"function a b\"</p>\n<p>Related to this, what exactly is rintro \\&lt;a b\\&gt;  doing? What does it mean when one of those is replaced with rfl?</p>",
        "id": 200283634,
        "sender_full_name": "Rahul Dalal",
        "timestamp": 1591733540
    },
    {
        "content": "<p><code>\\&lt;a, b\\&gt;</code> is one term, and <code>a b</code> is two.</p>",
        "id": 200283748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733604
    },
    {
        "content": "<p>Sometimes you want to deal with the type of natural numbers less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>. In Lean this is the \"canonical set of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>\" and it's denoted <code>fin n</code>.</p>",
        "id": 200283938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733673
    },
    {
        "content": "<p>A term of type <code>fin n</code> is two things: a natural number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>, and a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m&lt;n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>. The way I thought about such a concept for decades was that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> was a number and the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m&lt;n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> was a proof, and that numbers and proofs were entirely different things. An interesting consequence of doing maths in Type theory rather than set theory is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> is a term, and a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m&lt;n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> is also a term.</p>",
        "id": 200284143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733762
    },
    {
        "content": "<p>So a term of type <code>fin n</code> is a package of data, consisting both of <code>m</code> and the proof that <code>m&lt;n</code>. In particular if <code>a : fin n</code> then <code>a</code> is <em>not</em> a natural number.</p>",
        "id": 200284449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733906
    },
    {
        "content": "<p>So given that <code>a</code> is some kind of package of data, one has to know how to get to <code>m</code> and the proof.</p>",
        "id": 200284575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733987
    },
    {
        "content": "<p>To figure out how to do this, we need to look at the definition of <code>fin n</code> by typing something like <code>#check fin</code> and then right clicking on <code>fin</code> and peeking at the definition. We find that <code>fin n</code> is defined to be a <code>structure</code>, which means an inductive type with one constructor.</p>",
        "id": 200284724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734065
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_lt</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200284749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734084
    },
    {
        "content": "<p>So if <code>a : fin n</code> then <code>a.val</code> will be the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> above, and <code>a.is_lt</code> will be the proof that it's less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>.</p>",
        "id": 200284797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734111
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>In this example, the claim is that for every x of type <code>fin 10</code> we can find an <code>m</code> such that <code>m&lt;10</code>. Note that <code>m=x</code> won't do, because <code>x</code> isn't a natural number, despite the fact that sometimes people will refer to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> as \"a natural number less than 10\". It's not that, it's a term of type <code>fin 10</code> so it's a pair.</p>",
        "id": 200285000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734223
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- I always do this</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  x : fin 10</span>\n<span class=\"cm\">  ⊢ ∃ (m : ℕ), m &lt; 10</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  x : fin 10</span>\n<span class=\"cm\">  ⊢ x.val &lt; 10</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200285132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734287
    },
    {
        "content": "<p>The natural number we use is <code>x.val</code>, and the proof it satisfies the right thing is <code>x.is_lt</code>.</p>",
        "id": 200285169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734315
    },
    {
        "content": "<p>Another way of getting the terms out of a structure is to use the <code>cases</code> command.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- I always do this</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  m : ℕ,</span>\n<span class=\"cm\">  hm : m &lt; 10</span>\n<span class=\"cm\">  ⊢ ∃ (m : ℕ), m &lt; 10</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hm</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200285278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734366
    },
    {
        "content": "<p><code>cases</code> is a core Lean tactic. Sometimes structures are fancier objects though, with 3 or more fields, or fields containing other structures, and so the <code>rcases</code> tactic was born, which can take more complex structures apart. For this the standard cases syntax of just listing variable names wasn't powerful enough, so they started with these pointy brackets.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- I always do this</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hm</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200285551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734497
    },
    {
        "content": "<p><code>intro, rcases</code> was such a common idiom that <code>rintro</code> was born:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hm</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200285623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734545
    },
    {
        "content": "<p>This introduces x and then instantly takes it apart into its pieces.</p>",
        "id": 200285663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734568
    },
    {
        "content": "<p>Here's a silly structure:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- I always do this</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">silly</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">silly</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200285875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734663
    },
    {
        "content": "<p>To make a term of type <code>silly</code> you need to supply two naturals, a boolean, a proof that the two naturals are equal, and a proof that one of the naturals is less than 37.</p>",
        "id": 200285949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734700
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 200286104,
        "sender_full_name": "Rahul Dalal",
        "timestamp": 1591734754
    },
    {
        "content": "<p>Using our <code>rintro</code> skills we can solve this example as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">silly</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hnm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal is now a mess</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  n : ℕ,</span>\n<span class=\"cm\">  b : bool,</span>\n<span class=\"cm\">  m : ℕ,</span>\n<span class=\"cm\">  h : n &lt; 37,</span>\n<span class=\"cm\">  hnm : m = n</span>\n<span class=\"cm\">  ⊢ m &lt; 37</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hnm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ n &lt; 37</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200286228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734822
    },
    {
        "content": "<p>(<code>dsimp</code> simplifies <code>{m := blah, ... }.m</code> to <code>blah</code>)</p>",
        "id": 200286359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734873
    },
    {
        "content": "<p>But <code>rintro</code> has got one more trick up its sleeve -- instead of rintroing <code>hnm</code> we can put <code>rfl</code> instead, which just means \"define one side to be the other side\".</p>",
        "id": 200286493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734933
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">silly</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h is now a proof of m&lt;37!</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200286623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734982
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a></p>",
        "id": 200286647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591734998
    },
    {
        "content": "<p>So practically, you can put rfl in any spot where the corresponding term is an equality or equivalence and it will apply this to everything other term you are creating in the rintro?</p>",
        "id": 200287519,
        "sender_full_name": "Rahul Dalal",
        "timestamp": 1591735393
    },
    {
        "content": "<p>I'm not sure about an equivalence but yes an equality</p>",
        "id": 200287569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735416
    },
    {
        "content": "<p>It will look to see if one side or the other is a bare variable, and if one of them is then it will basically just sub in its value everywhere</p>",
        "id": 200287678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735456
    },
    {
        "content": "<p>What it's actually doing is <code>cases h</code> if <code>h : a = b</code>!</p>",
        "id": 200287730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735487
    },
    {
        "content": "<p>Because <code>=</code> is not a primitive notion in type theory, it's notation for <code>eq</code> which is an inductive type with one constructor, just like <code>silly</code></p>",
        "id": 200287861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735549
    },
    {
        "content": "<p><code>eq a b</code> is an inductive type with one constructor, <code>refl a</code> which is a term of type <code>eq a a</code> (note I just corrected a bad typo here)</p>",
        "id": 200287999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735612
    },
    {
        "content": "<p>If you work out the recursor for that type, it's the principle that if you know P(a) and you know that a=b, you can deduce P(b)</p>",
        "id": 200288089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735664
    },
    {
        "content": "<p>Ie it's the fact that you can substitute in an equality</p>",
        "id": 200288159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735683
    },
    {
        "content": "<p>This is the basic principle behind the rewrite tactic</p>",
        "id": 200288190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591735699
    },
    {
        "content": "<p>ok, thanks again!</p>",
        "id": 200289416,
        "sender_full_name": "Rahul Dalal",
        "timestamp": 1591736286
    }
]