[
    {
        "content": "<p>I use lattices as an example, but I believe that this issue arises with any algebraic structure.  Assume that I have shown that the family of compact open sets of a topological space is a bounded lattice:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">compact_opens</span>\n<span class=\"n\">def</span> <span class=\"n\">compact_open_sets</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">compact</span> <span class=\"n\">U</span>\n<span class=\"n\">def</span> <span class=\"n\">compact_opens</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">@</span><span class=\"n\">compact_open_sets</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">U</span> <span class=\"o\">}</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"o\">(</span><span class=\"n\">compact_opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span> <span class=\"n\">topological_space</span>\n</code></pre></div>\n\n\n<p>I also have a type class that adds new data to topological spaces:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">toporthoframe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">orthoframe</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span>\n</code></pre></div>\n\n\n<p>where <code>orthoframe</code> yet another type class.  Now I consider a subtype of <code>compact_opens</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">compact_open_perp_regular_set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">toporthoframe</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">compact_open_sets</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">compact_opens_perp_regular</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">toporthoframe</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">compact_opens</span> <span class=\"n\">α</span> <span class=\"bp\">//</span>  <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">compact_open_perp_regular_set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I want to define an instance of <code>bounded_lattice</code> for <code>compact_opens_perp_regular</code> that is a subalgebra of <code>compact_opens</code>.</p>\n<p>I am sure that this is a recurrent pattern in algebra.  What is an efficient way of defining such an instance without defining a dozen properties for <code>bounded_lattice</code>?</p>",
        "id": 201069733,
        "sender_full_name": "Kentarô YAMAMOTO",
        "timestamp": 1592339295
    },
    {
        "content": "<p>I would try asking on the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a>  or <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a> streams</p>",
        "id": 201074577,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592341850
    },
    {
        "content": "<p>You can maybe pull lattice structures back; you might want to see if there's something called lattice.comap, that's probably what the construction will be called</p>",
        "id": 201077176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592343309
    }
]