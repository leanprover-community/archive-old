[
    {
        "content": "<p>As we discussed today, one option for the rest of the seminar is to try to complete some larger project together, perhaps with the goal of formalizing some catchy-sounding theorems. This thread is for discussion of project ideas: theorems that we could try to prove, ideas about how to organize it, etc.</p>",
        "id": 204264661,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595023206
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204264691,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595023237
    },
    {
        "content": "<p>contribute to sphere eversion? pick off something from freek's list? from the <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">undergrad_todo list</a>?</p>",
        "id": 204265886,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595024129
    },
    {
        "content": "<p>Try and figure out why algebraic closures still aren't done? Prove that a short exact sequence of complexes induces a long exact sequence of cohomology in an abelian category?</p>",
        "id": 204267294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025307
    },
    {
        "content": "<p>Define fundamental group of a topological space?</p>",
        "id": 204267338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025351
    },
    {
        "content": "<p>Higher homotopy groups even?</p>",
        "id": 204267384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025365
    },
    {
        "content": "<p>Make a basic API for locally ringed spaces?</p>",
        "id": 204267437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025423
    },
    {
        "content": "<p>Define Picard groups?</p>",
        "id": 204267458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025441
    },
    {
        "content": "<p>Ext and Tor?</p>",
        "id": 204267466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595025446
    },
    {
        "content": "<p>Sorry, I got interrupted when writing the original message. I meant to explain a bit more</p>",
        "id": 204274272,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032065
    },
    {
        "content": "<p>Some of the possible topics we discussed were:</p>",
        "id": 204274316,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032084
    },
    {
        "content": "<p>1) Fourier analysis. Goal: prove theorem about rate of decay of fourier series of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> functions</p>",
        "id": 204274338,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032122
    },
    {
        "content": "<p>2) Fundamental Group. Goal: prove Galois connection between subgroups and covering spaces</p>",
        "id": 204274347,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032143
    },
    {
        "content": "<p>3) Fundamental theorem of calculus</p>",
        "id": 204274353,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032155
    },
    {
        "content": "<p>4) Galois Theory. Goal: prove Galois connection</p>",
        "id": 204274365,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032172
    },
    {
        "content": "<p>(4) seemed like the most popular option brought up so far</p>",
        "id": 204274372,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032195
    },
    {
        "content": "<p>but it would obviously involve figuring out how to do algebraic closures</p>",
        "id": 204274420,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032212
    },
    {
        "content": "<p>(or I guess assuming algebraic closures exist as an axiom and working from there)</p>",
        "id": 204274436,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032236
    },
    {
        "content": "<p>However, we haven't made any definite decisions. So this thread is for discussion of what topics sound most interesting, how feasible they are, what would be involved in completing different projects, and how to organize the project</p>",
        "id": 204274496,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032322
    },
    {
        "content": "<p>Thanks for the suggestions <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>! :)</p>",
        "id": 204274548,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032377
    },
    {
        "content": "<p>Since there seems to be the most interest in Galois theory, do either of you know anything about why algebraic closure is not in mathlib? Is it especially hard to do for some reason?</p>",
        "id": 204274581,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032429
    },
    {
        "content": "<p>And do either of you have any advice about how to organize this kind of project?</p>",
        "id": 204274624,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595032449
    },
    {
        "content": "<p>(a) does Galois theory need the existence of algebraic closures? (b) one option would be to have algebraic closures start off as an axiom and get proved as a side project</p>",
        "id": 204276046,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1595034408
    },
    {
        "content": "<p>I think successful past projects have started with a detailed exposition in latex or markdown</p>",
        "id": 204276145,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595034571
    },
    {
        "content": "<p>We have some Galois theory, written by Imperial undergrads, in some ImperialCollegeLpndon repo on GitHub.</p>",
        "id": 204286755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052725
    },
    {
        "content": "<p>The fundamental theorem is still not in Lean</p>",
        "id": 204286762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052744
    },
    {
        "content": "<p>If you do work on Galois theory your aim should not just be to prove FTG but to finish the job and get it into mathlib</p>",
        "id": 204286769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052780
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/P11-Galois-Theory\">https://github.com/ImperialCollegeLondon/P11-Galois-Theory</a></p>",
        "id": 204286833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052853
    },
    {
        "content": "<p>You're more than welcome to use that material or add to it. The job is still far from done</p>",
        "id": 204286840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052891
    },
    {
        "content": "<p>Kenny Lau has had some interesting ideas about how to deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>⊆</mo><mi>L</mi><mo>⊆</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">K\\subseteq L\\subseteq M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span></p>",
        "id": 204286861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052954
    },
    {
        "content": "<p>He was live streaming a proof of the tower law on Discord last week</p>",
        "id": 204286907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595052999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How much work are Imperial undergrads currently doing on this repository? It looks like the last commit was 24 days ago, but you mentioned Kenny Lau live streaming something last week.</p>",
        "id": 204361084,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179122
    },
    {
        "content": "<p>Oh, work comes and goes</p>",
        "id": 204361094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179147
    },
    {
        "content": "<p>Also, if we want to contribute to this project, would it be better for us to push directly to the master branch of the repo, make another branch, or fork the entire repo?</p>",
        "id": 204361097,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> what do you think?</p>",
        "id": 204361101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179173
    },
    {
        "content": "<p>I think it's about time we got some Galois theory in Lean</p>",
        "id": 204361105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179190
    },
    {
        "content": "<p>sure</p>",
        "id": 204361127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595179203
    },
    {
        "content": "<p>and I am spread quite thin at the minute, I'm trying to supervise a bunch of summer projects</p>",
        "id": 204361151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595179207
    },
    {
        "content": "<p>Also, is there any kind of written stuff about the organization of the project, what the different files mean, etc?</p>",
        "id": 204361152,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179212
    },
    {
        "content": "<p>It looks like there's quite a few files with just one or two small theorems in them. Is there some reason for that?</p>",
        "id": 204361163,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179245
    },
    {
        "content": "<p>Do all of the projects (<a href=\"https://github.com/ImperialCollegeLondon/P11-Galois-Theory/projects\">https://github.com/ImperialCollegeLondon/P11-Galois-Theory/projects</a>) represent things that still need to be done?</p>",
        "id": 204361182,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179303
    },
    {
        "content": "<p>yeah mainly</p>",
        "id": 204361185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595179321
    },
    {
        "content": "<p>I assume files like <code>cardinal.lean</code> are intended to be added to the similar-named files in mathlib. Is there any reason not to just turn these into mathlib PRs and remove them from the Galois theory repo?</p>",
        "id": 204361305,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595179482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> In your opinion, what's the best way to understand what's been done so far in the Galois theory project? Like, what are the best files to look at first to get a sense of how it's organized? And what are the next things to do to make progress on the project?</p>",
        "id": 204361968,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595180455
    },
    {
        "content": "<p>what's happening is that I'm slowly making new PR's to mathlib</p>",
        "id": 204386619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595221010
    },
    {
        "content": "<p>for example, <a href=\"https://github.com/leanprover-community/mathlib/pull/3355\">https://github.com/leanprover-community/mathlib/pull/3355</a> has just been merged</p>",
        "id": 204386703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595221184
    },
    {
        "content": "<p>(tower law)</p>",
        "id": 204386704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595221194
    },
    {
        "content": "<p>We've started an overleaf document to write up the definitions and theorems that need to be formalized to get the fundamental theorem of galois theory in lean. For now, ask Thomas Browning to get access to the document</p>",
        "id": 204628026,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595389784
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is it okay if we coordinate with you about this project further in this thread going forward (like, in the next few weeks)?</p>",
        "id": 204628080,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595389839
    },
    {
        "content": "<p>go ahead</p>",
        "id": 204630981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595394698
    },
    {
        "content": "<p>Are we including particular applications of Galois theory to number fields? Does mathlib already have Gauss' Lemma and the Eisenstein criterion? If not I think we should include them too, though not strictly necessary for the Galois correspondence.</p>",
        "id": 204870436,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1595552847
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/eisenstein_criterion.html\">https://leanprover-community.github.io/mathlib_docs/ring_theory/eisenstein_criterion.html</a></p>",
        "id": 204870873,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595553431
    },
    {
        "content": "<p>I found this by putting <code>eisenstein</code> in the search bar here <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 204870890,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595553453
    },
    {
        "content": "<p>Anyone interested-in-Galois-theory want to have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/3568\">#3568</a>? It's always great to have people helping out with the pull-request review process!</p>",
        "id": 205084173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595829762
    },
    {
        "content": "<p>Unfortunately, I'm not super familiar with how these pull requests work. But it will be good to have is_separable in mathlib.</p>",
        "id": 205130396,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1595863040
    },
    {
        "content": "<p>Scott is just suggesting that people look at the code in the link, to see if they have any comments of the form \"why not prove this lemma as well\" or \"this docstring has a typo\" or anything</p>",
        "id": 205131504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595863558
    },
    {
        "content": "<p>Is there anything in mathlib/the imperial repo/our repo showing that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a finite extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>?</p>",
        "id": 205307181,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595983285
    },
    {
        "content": "<p>I'm going to try to prove the case of the primitive element theorem of an extension by adjoining two elements today. In case anyone else is working on it. (If someone is, I'm happy to collaborate). Although maybe it will take me more time to finish it</p>",
        "id": 205307839,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1595984118
    },
    {
        "content": "<p>I think there's a lot about integrality in mathlib</p>",
        "id": 205324466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596006616
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/7cd1e268ef09e4f24c18b63079ee61f917ce7836/src/ring_theory/integral_closure.lean#L133-L134\">https://github.com/leanprover-community/mathlib/blob/7cd1e268ef09e4f24c18b63079ee61f917ce7836/src/ring_theory/integral_closure.lean#L133-L134</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">is_integral_of_mem_of_fg</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 205326076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596008049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205307839\">said</a>:</p>\n<blockquote>\n<p>I'm going to try to prove the case of the primitive element theorem of an extension by adjoining two elements today. In case anyone else is working on it. (If someone is, I'm happy to collaborate). Although maybe it will take me more time to finish it</p>\n</blockquote>\n<p>Lol, this is probably going to take a while actually. But we now have the primitive element theorem for finite fields.</p>",
        "id": 205425389,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596065158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I think we should change the statement of the theorem in <code>root_construction.lean</code> to first define the isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F[x]/f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is the minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>) and then prove the properties of this isomorphism, for instance that it takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>.</p>",
        "id": 205533061,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596143413
    },
    {
        "content": "<p>See the changes that I've made to the file for reference</p>",
        "id": 205533092,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596143438
    },
    {
        "content": "<p>Also, something is messed up with the statement of <code>primitive_element_inf_aux</code> in <code>primitive_element.lean</code>. The statement being proved by induction is not strong enough to carry out the induction. We should be quantifying over the field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> after quantifying over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> instead of before. But when I try to do this I run into the problem that Lean no longer knows how to do the type inferences correctly, which is quite annoying. For more details, see <a href=\"#narrow/stream/113489-new-members/topic/Problems.20with.20induction.20and.20type.20inference\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Problems.20with.20induction.20and.20type.20inference</a> where I try to turn this into a question that doesn't mention galois theory/etc.</p>",
        "id": 205533972,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596143999
    },
    {
        "content": "<p>Also, I'm starting to think that we should combine all of <code>adjoin_set.lean</code>, <code>adjoin_simple.lean</code> and <code>root_construction.lean</code> into a single <code>adjoin.lean</code> file just to keep things simpler.</p>",
        "id": 205535165,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596144726
    },
    {
        "content": "<p>I'd be happy to combine them, although keeping them separate (for now) has two potential advantages: files don't get too long, and merge conflicts are more rare</p>",
        "id": 205539679,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596147828
    },
    {
        "content": "<p>Okay, let's leave them separate for now but consider combining them once they're a bit more complete</p>",
        "id": 205540228,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596148268
    },
    {
        "content": "<p>I've made a change to how the results in adjoin_set and adjoin_simple are stated. The E is now implicit. I think this makes sense since E can always be deduced from what you're adjoining. Now you would write \"adjoin_simple F a\" rather than \"adjoin_simple F E a.\"</p>",
        "id": 205547356,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596155195
    },
    {
        "content": "<p>I've moved stuff to adjoin.lean, so use that rather than adjoin_set.lean or adjoin_simple.lean</p>",
        "id": 205642886,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596230478
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3654\">#3654</a> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 205668596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596264772
    },
    {
        "content": "<p>Does mathlib have a way to restrict group actions to a subgroup? It seems like it should be there, but I cannot find such a construction.</p>",
        "id": 205862136,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596500790
    },
    {
        "content": "<p>Not sure, but you will need to assume that the subgroup is stable under the group action</p>",
        "id": 205862509,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501230
    },
    {
        "content": "<p>What do you mean? I am talking about restricting the acting group, not the set being acted upon</p>",
        "id": 205862671,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596501401
    },
    {
        "content": "<p>oh right, I see what you mean</p>",
        "id": 205862867,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- An action of `α` on `β` and a monoid homomorphism `γ → α` induce an action of `γ` on `β`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">comp_hom</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_hom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">one_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205862956,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501787
    },
    {
        "content": "<p>That might be enough for you, because you can apply it to H-&gt;G</p>",
        "id": 205862961,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596501804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>  How easy is it to transfer facts about adjoining elements to a subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, thought of as an algebra map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, to the subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> given by the image of this algebra map? Basically, how easy is it to fill in the sorries in <code>primitive_element_inf</code>?</p>",
        "id": 205982711,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596595282
    },
    {
        "content": "<p>Not super easy. It might be worth constructing an isomorphism, and proving that those properties are preserved by isomorphism.</p>",
        "id": 205986225,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596599719
    },
    {
        "content": "<p>I'll prove the isomorphism in adjoin.lean, since it might come up later as well</p>",
        "id": 205986311,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596599838
    },
    {
        "content": "<p>By the way, if you have time it might be nice to write comments documenting what the different stuff in <code>adjoin.lean</code> is doing.</p>",
        "id": 205986446,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600019
    },
    {
        "content": "<p>but it's not a big deal</p>",
        "id": 205986452,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600034
    },
    {
        "content": "<p>sure. actually, I just realized that this isomorphim doesn't belong in adjoin.lean at all since it doesn't involve adjoining. Where should it go?</p>",
        "id": 205986457,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600052
    },
    {
        "content": "<p>make a new file for properties of subfields?</p>",
        "id": 205986464,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600070
    },
    {
        "content": "<p>Sure. Or if you want it can go in <code>primitive_element.lean</code> for now. Either way is fine with me</p>",
        "id": 205986477,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600103
    },
    {
        "content": "<p>Also, I added two lemma statements about the degree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span>. Right now they're in <code>primitive_element.lean</code> but if you think we should, they could be moved to <code>adjoin.lean</code></p>",
        "id": 205986542,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600165
    },
    {
        "content": "<p>Also, I'm curious if you have an opinion on how hard they are to prove. One of them says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a finite extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is also a finite extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> and the other says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> is not in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then the degree strictly decreases.</p>",
        "id": 205986567,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600232
    },
    {
        "content": "<p>One annoying part is that here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is again a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>. Though maybe not so bad here, especially for the first of the lemmas</p>",
        "id": 205986612,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600298
    },
    {
        "content": "<p>well, those are true about any subfields, and I don't expect them to be hard to prove (since we have the power law).</p>",
        "id": 205986675,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205986675\">said</a>:</p>\n<blockquote>\n<p>well, those are true about any subfields, and I don't expect them to be hard to prove (since we have the power law).</p>\n</blockquote>\n<p>Yeah, okay I think you're right that it shouldn't make it any more difficult here.</p>",
        "id": 205986744,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600515
    },
    {
        "content": "<p>Actually, maybe I should remove that assumption from the lemma statements</p>",
        "id": 205986757,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600546
    },
    {
        "content": "<p>Just for the first of the two lemmas I mean</p>",
        "id": 205986766,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600578
    },
    {
        "content": "<p>The second doesn't totally make sense without it</p>",
        "id": 205986768,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600586
    },
    {
        "content": "<p>unless you replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo mathvariant=\"normal\">∉</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha \\notin F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo mathvariant=\"normal\">∉</mo></mrow><annotation encoding=\"application/x-tex\">\\alpha \\notin</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span></span></span> <code>set.range (algebra.map F E)</code></p>",
        "id": 205986821,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600639
    },
    {
        "content": "<p>the second can also be rephrased as saying that if F and F' are two subfields, and F is a proper subset of F' then the dimension decreases</p>",
        "id": 205986825,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600648
    },
    {
        "content": "<p>True. Would any of those be useful to have later? Right now those lemmas are only needed to prove the primitive element theorem.</p>",
        "id": 205986849,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596600715
    },
    {
        "content": "<p>maybe, but I would guess not for this project</p>",
        "id": 205986954,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596600851
    },
    {
        "content": "<p>Just to let you know that mathlib has subsemirings (bundled) and subrings (unbundled) but we plan on bundling subrings soon (there's a branch bundled-subrings or bundled_subrings) and then I guess the idea would be to bundle subfields, although some people might say that it's better to have subfields as a predicate on subrings</p>",
        "id": 205995714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596612998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205995714\">said</a>:</p>\n<blockquote>\n<p>Just to let you know that mathlib has subsemirings (bundled) and subrings (unbundled) but we plan on bundling subrings soon (there's a branch bundled-subrings or bundled_subrings) and then I guess the idea would be to bundle subfields, although some people might say that it's better to have subfields as a predicate on subrings</p>\n</blockquote>\n<p>Yeah, we noticed that subgroups were just bundled. I think bundling subfields would be nice, having them as a predicate is also probably fine.</p>",
        "id": 206052429,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596648540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205982711\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span>  How easy is it to transfer facts about adjoining elements to a subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, thought of as an algebra map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, to the subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> given by the image of this algebra map? Basically, how easy is it to fill in the sorries in <code>primitive_element_inf</code>?</p>\n</blockquote>\n<p>One sorry down</p>",
        "id": 206083907,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596665143
    },
    {
        "content": "<p>By the way, if <code>f</code> is a polynomial over <code>F</code> and <code>E</code> is an algebra over <code>F</code>, does mathlib already have a definition of the set of roots of <code>f</code> in <code>E</code>? It's easy to define using <code>polynomial.eval\\2</code> but I'm wondering if it's already done somewhere</p>",
        "id": 206086460,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596667046
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 206087070,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596667532
    },
    {
        "content": "<p>Also, do we have anything saying that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊆</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S \\subseteq T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> then <code>adjoin F S</code> is a subset of <code>adjoin F T</code>?</p>",
        "id": 206088223,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596668408
    },
    {
        "content": "<p>No, but I just added it: adjoin.mono</p>",
        "id": 206088666,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596668770
    },
    {
        "content": "<p>Actually, I realized I might not need it. But it might be good to have anyway</p>",
        "id": 206089096,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596669175
    },
    {
        "content": "<p>Finished the last sorry in \"primitive_element_inf\", and I might try to take care of the sorry in \"primitive_element_inf_aux\"</p>",
        "id": 206099806,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596682006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206099806\">said</a>:</p>\n<blockquote>\n<p>Finished the last sorry in \"primitive_element_inf\", and I might try to take care of the sorry in \"primitive_element_inf_aux\"</p>\n</blockquote>\n<p>You mean the one about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> being a separable extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> (I think that's the only one left in that proof)? If so, I made a statement that would suffice in <code>separable.lean</code></p>",
        "id": 206099890,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596682136
    },
    {
        "content": "<p>proved it</p>",
        "id": 206107843,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596694039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206107843\">said</a>:</p>\n<blockquote>\n<p>proved it</p>\n</blockquote>\n<p>Nice! Soon the only parts of the primitive element theorem that are left will be the hard parts</p>",
        "id": 206166281,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596732352
    },
    {
        "content": "<p>does \"hard parts\" mean \"parts with mathematical content\"?</p>",
        "id": 206176045,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596736968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206176045\">said</a>:</p>\n<blockquote>\n<p>does \"hard parts\" mean \"parts with mathematical content\"?</p>\n</blockquote>\n<p>More or less.</p>",
        "id": 206176136,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596737017
    },
    {
        "content": "<p>Basically the two sorries in <code>primitive_element_two_inf</code> and <code>primitive_element_two_aux</code> in the code <a href=\"https://github.com/pglutz/galois_theory/blob/master/src/primitive_element.lean\">here</a></p>",
        "id": 206176387,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596737122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Should we introduce some notation for <code>adjoin</code> and <code>adjoin_simple</code>? It might be nice to be able to write <code>F[\\a]</code> rather than <code>adjoin_simple F \\a</code></p>",
        "id": 206186880,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596742628
    },
    {
        "content": "<p>That does sound like a good idea, I'm still not totally sure about how to correctly introduce notation but I think that trying to introduce notation that conforms to normal mathematical usage will make everything much easier to understand</p>",
        "id": 206188482,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596743510
    },
    {
        "content": "<p>Okay, I've tried adding notation. You should now be able to write <code>F[\\a]</code> for <code>adjoin_simple F \\a</code> and <code>F[\\a, \\b]</code> for <code>adjoin F {\\a, \\b}</code>. Let me know if the notation ever doesn't work correctly</p>",
        "id": 206197595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596748383
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> can you take a look at the stuff I added to adjoin.lean <a href=\"https://github.com/pglutz/galois_theory/commit/fe67482bcaf328292e7d095738ee62d2545037ef\">here</a> to make sure it's not redundant/there aren't any other problems with it</p>",
        "id": 206197845,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596748518
    },
    {
        "content": "<p>looks good to me</p>",
        "id": 206200613,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596750179
    },
    {
        "content": "<p>I've tried changing stuff to use the new notation. One thing that is slightly annoying is that you often still need to write <code>(F[a])</code> in situations where you'd rather just write <code>F[a]</code> (e.g. when it is an argument to some other theorem). I imagine that this has to do with how strong the binding power is in the declaration of the notation but I don't know how this stuff works or how to change it effectively.</p>",
        "id": 206201371,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596750668
    },
    {
        "content": "<p>Does it sound reasonable to define <code>F[a, b]</code> as <code>F[a][b]</code> rather than as <code>F[{a, b}]</code>? I think that notation would be a lot easier to define</p>",
        "id": 206209102,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596756062
    },
    {
        "content": "<p>oh, it's kind of cool that now VSCode displays the type of things using the notation <code>F[a]</code></p>",
        "id": 206209235,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596756191
    },
    {
        "content": "<p>It looks like it's not that hard to get notation that does the following: <code>F[a, b, c, d]</code> turns into <code>adjoin_simple (adjoin_simple (adjoin_simple (adjoin_simple F a) b) c) d</code> and so on, for any number of arguments. But I can't figure out how to set up notation so that <code>F[a, b, c, d]</code> turns into <code>adjoin F {a, b, c, d}</code></p>",
        "id": 206210857,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596757745
    },
    {
        "content": "<p>Also it might be nice to have notation for <code>adjoin F S</code>. But if I just define <code>F[S]</code> to be <code>adjoin F S</code> and <code>F[a]</code> to be <code>adjoin_simple F a</code> then lean complains to me that it can't figure out which one to use in which situation.</p>",
        "id": 206210936,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596757817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/205668596\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3654\">#3654</a> <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span></p>\n</blockquote>\n<p>merged</p>",
        "id": 206213167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596760046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206210857\">said</a>:</p>\n<blockquote>\n<p>It looks like it's not that hard to get notation that does the following: <code>F[a, b, c, d]</code> turns into <code>adjoin_simple (adjoin_simple (adjoin_simple (adjoin_simple F a) b) c) d</code> and so on, for any number of arguments. But I can't figure out how to set up notation so that <code>F[a, b, c, d]</code> turns into <code>adjoin F {a, b, c, d}</code></p>\n</blockquote>\n<p>You could do something hacky where you manually define notation for each possible number of elements</p>",
        "id": 206214308,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596761457
    },
    {
        "content": "<p>The PRs <a href=\"https://github.com/leanprover-community/mathlib/issues/3720\">#3720</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3717\">#3717</a> which were just made should help make some of our proofs shorter once they are merged. I think we should consider temporarily copying the code from those PRs into our project and removing it once the changes are merged</p>",
        "id": 206279342,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596818083
    },
    {
        "content": "<p>I've added some stuff from those PRs to our code, which we can take out once they are merged.</p>",
        "id": 206281957,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596819467
    },
    {
        "content": "<p>We now have slightly better notation. You should now be able to write just <code>F[a]</code> instead of having to write <code>(F[a])</code> all the time because I have increased the binding power of <code>[</code> in that notation to be <code>std.prec.max_plus</code> (i.e. I've turned the amp to 11)</p>",
        "id": 206326743,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596852940
    },
    {
        "content": "<p>I think I can also probably figure out how to make <code>F[a, b, c]</code> mean <code>adjoin F {a, b, c}</code> but I'm not quite there yet.</p>",
        "id": 206326785,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596852990
    },
    {
        "content": "<p>I think that when proving the PET, we don't need to consider the splitting field of f*g, but just the splitting field of g (since all of the roots of the gcd lie in the splitting field of g).</p>",
        "id": 206336032,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206336032\">said</a>:</p>\n<blockquote>\n<p>I think that when proving the PET, we don't need to consider the splitting field of f*g, but just the splitting field of g (since all of the roots of the gcd lie in the splitting field of g).</p>\n</blockquote>\n<p>Yeah, I think you're right.</p>",
        "id": 206336089,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870652
    },
    {
        "content": "<p>By the way, I thought I was close to proving <code>adjoin_dim_lt</code> but I think I need to understand <code>smul_tower</code> better actually. I can't seem to escape wanting to know that if you change the base field to an isomorphic one then the dimension stays the same.</p>",
        "id": 206336156,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870755
    },
    {
        "content": "<p>The result is reduced to showing that dimension of F[alpha]/F is greater than 1, so why do you need to deal with changing the base field?</p>",
        "id": 206336174,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870822
    },
    {
        "content": "<p>It seems to me like the crux of the matter is dealing with a basis of cardinality 1.</p>",
        "id": 206336247,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870948
    },
    {
        "content": "<p>I want to use <code>findim_lt</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/3720\">#3720</a></p>",
        "id": 206336248,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870959
    },
    {
        "content": "<p>If you use reasoning about the basis directly then it shouldn't be a problem</p>",
        "id": 206336287,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596870978
    },
    {
        "content": "<p>oh I see</p>",
        "id": 206336291,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596870999
    },
    {
        "content": "<p>But I was trying to be clever and use the fact that the dimension of <code>F</code> over itself is 1</p>",
        "id": 206336293,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871002
    },
    {
        "content": "<p>Maybe I should just do it the other way. But I wanted to avoid dealing with <code>fintype</code></p>",
        "id": 206336296,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871024
    },
    {
        "content": "<p>Actually, I think I may have just been misunderstanding <code>submodule</code></p>",
        "id": 206336404,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871299
    },
    {
        "content": "<p>maybe it's not so bad</p>",
        "id": 206336406,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596871304
    },
    {
        "content": "<p>Okay, maybe actually it is lol</p>",
        "id": 206337051,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596872627
    },
    {
        "content": "<p>Instead of copying the code, just make your local mathlib dependency the branch</p>",
        "id": 206353617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596902781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That's good advice for the future. For now, the PR has been merged so I'll just delete the extra stuff.</p>",
        "id": 206357878,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596910171
    },
    {
        "content": "<p><code>adjoin_findim_lt</code> is done</p>",
        "id": 206374973,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596940503
    },
    {
        "content": "<p>It turned out that mathlib had some lemmas for dealing with linearly indepdent singletons and for singletons which span the whole space.</p>",
        "id": 206374978,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596940546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206374973\">said</a>:</p>\n<blockquote>\n<p><code>adjoin_findim_lt</code> is done</p>\n</blockquote>\n<p>I actually meant <code>adjoin_dim_lt</code></p>",
        "id": 206375913,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596942441
    },
    {
        "content": "<p>I'm thinking about changing the definition for the roots in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> of a polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to be <code>roots f E</code> rather than the current <code>roots F E f</code>. Does that seem reasonable?</p>",
        "id": 206376980,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596944750
    },
    {
        "content": "<p>Seems reasonable to me</p>",
        "id": 206378959,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596948684
    },
    {
        "content": "<p>We're at 150 commits btw</p>",
        "id": 206380724,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596952267
    },
    {
        "content": "<p>Okay, I changed the definition of <code>roots</code>. You should now write <code>roots f E</code> for the roots of the polynomial <code>f</code> in the field <code>E</code></p>",
        "id": 206401826,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596990645
    },
    {
        "content": "<p>I was just watching Kenny live stream the definition of algebraic closure on the Discord</p>",
        "id": 206407860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206407860\">said</a>:</p>\n<blockquote>\n<p>I was just watching Kenny live stream the definition of algebraic closure on the Discord</p>\n</blockquote>\n<p>What is the discord?</p>",
        "id": 206407930,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597000365
    },
    {
        "content": "<p>There's a Xena project discord server. Kenny is live streaming Galois theory with some other Imperial undergraduates</p>",
        "id": 206407948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000409
    },
    {
        "content": "<p><a href=\"https://discord.gg/cNGnzX\">https://discord.gg/cNGnzX</a></p>",
        "id": 206407996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597000456
    },
    {
        "content": "<p>I'm not at a computer right now so can't generate an invite</p>",
        "id": 206407998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000457
    },
    {
        "content": "<p>I'm going to turn this invite off in a few days</p>",
        "id": 206408005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000482
    },
    {
        "content": "<p>this invite link expires in 1 day</p>",
        "id": 206408018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597000506
    },
    {
        "content": "<p>just like any other</p>",
        "id": 206408022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597000510
    },
    {
        "content": "<p>Oh ok the link on my Twitter never expired but I just removed it from my bio</p>",
        "id": 206408083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597000596
    },
    {
        "content": "<p>We have finished proving the primitive element theorem!</p>",
        "id": 206440068,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597049681
    },
    {
        "content": "<p><a href=\"https://github.com/pglutz/galois_theory/blob/5b8a97dd884568aa76d0cb40a99df7b8ab92cb29/src/primitive_element.lean#L622\">https://github.com/pglutz/galois_theory/blob/5b8a97dd884568aa76d0cb40a99df7b8ab92cb29/src/primitive_element.lean#L622</a></p>",
        "id": 206440096,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597049722
    },
    {
        "content": "<p>Nice! You should get it into mathlib! This is like saying you proved a theorem on paper but couldn't be bothered to write it up properly. In a year's time you have lost the piece of paper, and your code doesn't compile any more with mathlib master</p>",
        "id": 206455321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063004
    },
    {
        "content": "<p>Mathlib master gets fixed when breaking changes to mathlib are made</p>",
        "id": 206455345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063028
    },
    {
        "content": "<p>And lean 4 mathlib will initially use automation to transfer lean 3 statements over</p>",
        "id": 206455367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063060
    },
    {
        "content": "<p>So your proof is guaranteed to live</p>",
        "id": 206455375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063070
    },
    {
        "content": "<p>I'm sure this was your plan anyway but years of experience of my own mistakes in this matter have made me very vocal in making sure that others don't make the same mistakes as I do</p>",
        "id": 206455465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597063135
    },
    {
        "content": "<p>Do you have any advice about how we should go about getting it into mathlib? We were planning to make a series of smaller PRs</p>",
        "id": 206472098,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597072298
    },
    {
        "content": "<p>Basically, there are some smaller lemmas which might have good homes in mathlib, but apart from that there are two big files (adjoin.lean and primitive_element.lean) which would probably need to stay as their own files. (Just general info for someone answering your question Patrick).</p>",
        "id": 206472263,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597072387
    },
    {
        "content": "<p>The goal with splitting up PRs is to make them easier to review</p>",
        "id": 206479360,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597075811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/206455465\">said</a>:</p>\n<blockquote>\n<p>I'm sure this was your plan anyway but years of experience of my own mistakes in this matter have made me very vocal in making sure that others don't make the same mistakes as I do</p>\n</blockquote>\n<p>As a collaborator on some of Kevin's mistakes, I can only add my voice to his: PR before it's too late or you'll only have regrets and dead code.</p>",
        "id": 206494404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597083711
    },
    {
        "content": "<p>PR's of the form \"here are some random additions to random mathlib files\" are fine, and if they are short then they are often not hard to review. PR's of the form \"here is one big new standalone file\" are probably also preferred to monster PR's which achieve one big goal by making lots of changes to lots of files.</p>",
        "id": 206520365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597098085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> <span class=\"user-mention\" data-user-id=\"304588\">@Rahul Dalal</span> As I mentioned last week, I can't go to our regular meeting tomorrow. We can either reschedule to later in the day or I can skip the meeting.</p>",
        "id": 206540186,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597121721
    },
    {
        "content": "<p>Later works for me (I just have office hours 7pm-8pm)</p>",
        "id": 206540487,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597122199
    },
    {
        "content": "<p>How about 5 pm?</p>",
        "id": 206540852,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597122769
    },
    {
        "content": "<p>I think I might also not be able to make it. I am very behind where I wanted to be on some stuff I really need to finish today. Sorry for the very late notice. I was hoping to be done by now.</p>",
        "id": 206621010,
        "sender_full_name": "Rahul Dalal",
        "timestamp": 1597174637
    },
    {
        "content": "<p>Does the adjoin file have anything in it that explicitly states that F[alpha] is a vector space over F? We have that it is an algebra, but I cannot find a statement that it is a vector space and library_search hasn't given me any way to convert something from an algebra over a field to a vector space</p>",
        "id": 206863380,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597349029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 206865515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597349976
    },
    {
        "content": "<p><code>vector_space</code> is a class</p>",
        "id": 206865550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597349988
    },
    {
        "content": "<p>you don't refer to the instances by name</p>",
        "id": 206865582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597349999
    },
    {
        "content": "<p>Lean just figures them out using typeclass inference</p>",
        "id": 206865633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597350005
    },
    {
        "content": "<p>that's ring_theory.adjoin, but the same holds for the field adjoin. Lean should be able to figure it out automatically.</p>",
        "id": 206868899,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597351485
    },
    {
        "content": "<p>What time were we going to meet today? 4pm?</p>",
        "id": 206968565,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597433579
    },
    {
        "content": "<p>that was your suggestion. I'm not sure we ever decided on a time</p>",
        "id": 206969851,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597433996
    },
    {
        "content": "<p>somewhere between 3-5 is best for me</p>",
        "id": 206969957,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597434012
    },
    {
        "content": "<p>(as the starting time for the meeting)</p>",
        "id": 206970015,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597434025
    },
    {
        "content": "<p>though I'm not sure how much we have to talk about</p>",
        "id": 206970100,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597434043
    },
    {
        "content": "<p>I'm still in the middle of grading my final exam, so maybe it's best to hold off until Tuesday at the usual time?</p>",
        "id": 206986175,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597441895
    },
    {
        "content": "<p>sounds good</p>",
        "id": 206987375,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597442818
    },
    {
        "content": "<p>Lean seems to not recognize <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a>, even though I imported ring_theory.adjoin_root; is there something else I need to import?</p>",
        "id": 207079960,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597598374
    },
    {
        "content": "<p>I think it's just <code>adjoin_root (polynomial)</code></p>",
        "id": 207084480,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597604557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/207079960\">said</a>:</p>\n<blockquote>\n<p>Lean seems to not recognize <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a>, even though I imported ring_theory.adjoin_root; is there something else I need to import?</p>\n</blockquote>\n<p>Explicit error message or it didn't happen.</p>",
        "id": 207085524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597605645
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjoin_root.mk\">docs#adjoin_root.mk</a></p>",
        "id": 207085556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597605715
    },
    {
        "content": "<p>Thomas, I think that just gives the resulting ring; I want to use the quotient homomorphism to the ring</p>",
        "id": 207102682,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597633497
    },
    {
        "content": "<p>The error message is \"invalid 'begin-end' expression, ',' expected\", which makes me think that it just does not recognize <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a> at all</p>",
        "id": 207102694,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597633522
    },
    {
        "content": "<p>post the code that gives the message?</p>",
        "id": 207102969,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597633947
    },
    {
        "content": "<p>''' import subfield_stuff<br>\nimport group_theory.subgroup<br>\nimport field_theory.minimal_polynomial<br>\nimport linear_algebra.dimension<br>\nimport linear_algebra.finite_dimensional<br>\nimport ring_theory.adjoin_root<br>\nimport data.zmod.basic<br>\nimport data.polynomial.basic<br>\nimport adjoin</p>\n<p>variables (F : Type<em>) [field F] {E : Type</em>} [field E] [algebra F E] (S : set E)(α : E) (h : is_integral F α)</p>\n<p>lemma adjunction_degree_finite : finite_dimensional F (adjoin_root (minimal_polynomial h)) :=<br>\nbegin<br>\n    let minimal:=minimal_polynomial h,<br>\n    let degree:=polynomial.nat_degree minimal,<br>\n    let x:polynomial F:= polynomial.X,<br>\n    let S:= {n: ℕ| n&lt;degree},<br>\n    let η := λ n:S, adjoin_root.​mk (x^(n:ℕ)),<br>\n    sorry<br>\nend'''</p>",
        "id": 207104359,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597635915
    },
    {
        "content": "<p>(I intend to just add it to adjoin itself eventually, but that should not affect this particular issue)</p>",
        "id": 207104446,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597636065
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 207108765,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597643152
    },
    {
        "content": "<p>That error means you've made a syntax error, not that lean doesn't recognise some definition or theorem</p>",
        "id": 207115961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597651009
    },
    {
        "content": "<p>But code posted without backticks is hard to read because all the _ and * get initerpreted as syntax highlighting</p>",
        "id": 207116012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597651080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Are you sure that you want to be using <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a> (x^n) here? <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a> (x^n) seems like it would give the ring homomorphism F[x] -&gt; F[x]/(x^n) which I don't think is what you want. Also, one issue might be that lean can't figure out the field/ring that you are working over when you write <code>let η := λ n:S, adjoin_root.​mk (x^(n:ℕ))</code></p>",
        "id": 207167504,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597682898
    },
    {
        "content": "<p>Ah yes, it seems like it works if I specify the polynomial I am taking the quotient of before applying the function to x^n</p>",
        "id": 207213667,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597712029
    },
    {
        "content": "<p>And thanks for the reminders about backticks, I seem to always forget how to use them correctly</p>",
        "id": 207213714,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1597712071
    },
    {
        "content": "<p>Ok, I've removed the subfield assumption from primitive_element_two_inf_key</p>",
        "id": 207358797,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597797022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> What's next in the quest for subfield removal?</p>",
        "id": 207358811,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597797039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/207358811\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> What's next in the quest for subfield removal?</p>\n</blockquote>\n<p>I'll push the stuff from the other branch. Also, I had another idea about this. Maybe instead of (or in addition to) having stuff about the isomorphism between F and its image we could (1) show that <code>ulift F</code> is an isomorphism and (2) show that everything in the statement of the primitive element theorem is invariant under isomorphism</p>",
        "id": 207362111,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597800963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Okay, I've pushed the stuff I did</p>",
        "id": 207362768,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802040
    },
    {
        "content": "<p>I think it still needs some cleaning up though</p>",
        "id": 207362808,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802050
    },
    {
        "content": "<p>and if it's okay with you, I would prefer to make <code>adjoin_simple_is_separable</code> it's own lemma</p>",
        "id": 207362812,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802073
    },
    {
        "content": "<p>maybe in the <code>adjoin.lean</code> file</p>",
        "id": 207362815,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597802083
    },
    {
        "content": "<p>sure, go for it</p>",
        "id": 207363495,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597803068
    },
    {
        "content": "<p>hmmm, I think replacing <code>my_roots</code> with <code>(f.map (algebra_map F E)).roots</code> may actually be a little annoying. But maybe just because I don't really understand how to use <code>finset</code>s.</p>",
        "id": 207367367,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597808543
    },
    {
        "content": "<p>It looks like if <code>s</code> and <code>t</code> are finsets I'm not allowed to do things like <code>s × t → α</code>: Lean complains that it expected <code>s</code> and <code>t</code> to have type <code>Type u</code> but instead they have type <code>finset E</code></p>",
        "id": 207367420,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597808643
    },
    {
        "content": "<p>could you replace <code>my_roots</code> with <code>↑(polynomial.map ϕ f).roots</code> to preserve the type?</p>",
        "id": 207368383,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597810265
    },
    {
        "content": "<p>Lean doesn't seem to understand the type coercion there</p>",
        "id": 207368441,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810350
    },
    {
        "content": "<p>I've asked a question about this on the new members stream though</p>",
        "id": 207368448,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810368
    },
    {
        "content": "<p>so I'll see what they say</p>",
        "id": 207368452,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I have removed all references to <code>my_roots</code> from <code>primitive_element_two_aux</code> (which I've renamed to <code>primitive_element_two_aux'</code> to make the code still compile). If you also change <code>primitive_element_two_inf_key</code> then we can remove <code>my_roots</code> completely.</p>",
        "id": 207375795,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597820232
    },
    {
        "content": "<p>I think I've finished taking out my_roots</p>",
        "id": 207436047,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597857499
    },
    {
        "content": "<p>I propose that we move <code>submodule_restrict_field</code>, <code>adjoin_findim_of_findim</code>, <code>adjoin_findim_of_findim_base</code>, <code>algebra_findim_lt</code>, <code>adjoin_dim_lt</code> and <code>adjoin_inf_of_inf</code> from <code>primitive_element.lean</code> to <code>adjoin.lean</code></p>",
        "id": 207447129,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597863257
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 207449261,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597864262
    },
    {
        "content": "<p>I wonder if we should totally get rid of <code>adjoin_simple</code> and just <code>adjoin.</code> We don't have to write <code>adjoin F {a}</code> everywhere because we can keep the notation <code>F[a]</code>.</p>",
        "id": 207453398,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597866465
    },
    {
        "content": "<p>And we could probably get rid of a bunch of duplicate lemmas</p>",
        "id": 207453415,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597866477
    },
    {
        "content": "<p>It's a little annoying that we have two versions of so many things: one for <code>adjoin</code> and one for <code>adjoin_simple</code></p>",
        "id": 207453480,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597866504
    },
    {
        "content": "<p>although I guess sometimes it's nice to be able to avoid writing <code>{a}</code> when invoking a theorem.</p>",
        "id": 207454393,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597867014
    },
    {
        "content": "<p>I guess that's fair since there is subfield.closure if you want a more general version</p>",
        "id": 207457180,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1597868481
    },
    {
        "content": "<p>One question though, how do you plan on handling adjoining two elements? Just as (F[a])[b] ?</p>",
        "id": 207654831,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598027323
    },
    {
        "content": "<p>You can <code>adjoin {a,b}</code> as well</p>",
        "id": 207655654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598027810
    },
    {
        "content": "<p>And the two are not defeq (-;</p>",
        "id": 207655662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598027817
    },
    {
        "content": "<p>Oh nevermind. I thought that Patrick was advocating keeping just adjoin_simple, rather than keeping just adjoin. I totally understand now.</p>",
        "id": 207657591,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598028927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I'm going to be away camping during the next few days, so I won't be able to attend the Tuesday meeting</p>",
        "id": 207740776,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598127856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Okay, let's just skip Tuesday this week then.</p>",
        "id": 207751087,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598148014
    },
    {
        "content": "<p>Sure. By the way, I've pushed an initial chunk to mathlib at <a href=\"https://github.com/leanprover-community/mathlib/issues/3913\">#3913</a><br>\nDo you have permissions to make changes while I'm gone?</p>",
        "id": 207751279,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598148375
    },
    {
        "content": "<p>everyone who asks for mathlib permissions gets permission to push to every non-master branch of mathlib. pushing to the relevant branch is how you update a PR.</p>",
        "id": 207755271,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1598156058
    },
    {
        "content": "<p>Ah, makes sense. That's good to hear.</p>",
        "id": 207755538,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598156544
    },
    {
        "content": "<p>Ok, I've refactored primitive_element  so that the \"same-universe version\" doesn't require subfield_stuff</p>",
        "id": 208403155,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598655128
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> , it looks like Lint failed again on the new notation</p>",
        "id": 208403243,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598655231
    },
    {
        "content": "<p>Actually, I'm not entirely sure why the linter is given an error. The error message is super weird.</p>",
        "id": 208410022,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598664145
    },
    {
        "content": "<p>Also, there isn't any error when I put #lint at the end of the file in my VScode</p>",
        "id": 208411763,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598666942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Yeah, I don't get the lint error at all.</p>",
        "id": 208411901,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598667184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you have any idea what could cause this? We're getting a linter error in this pull request: <a href=\"https://github.com/leanprover-community/mathlib/issues/3913\">#3913</a></p>",
        "id": 208411907,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598667210
    },
    {
        "content": "<p>It looks like it has something to do with <code>set.insert</code></p>",
        "id": 208412154,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598667607
    },
    {
        "content": "<p>I don't know anything about the linter and I'm on mobile and can't figure out how to see the output. I would just ask the experts</p>",
        "id": 208421302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598684999
    },
    {
        "content": "<p>hah I've now looked at the output. Yeah, you broke the linter :-) You get an achievement! Definitely beyond my pay grade!</p>",
        "id": 208443324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598720148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I made a comment on github saying that I think to address the problems with notation we should pick one of the brackets <a href=\"http://xahlee.info/comp/unicode_matching_brackets.html\">here</a> to use for field extensions. It's not a great solution and I would be happy to hear alternatives. I would like to avoid something bizarre like <code>F[ (a) ]</code> or <code>F-(a)-</code>. I might be willing to accept <code>F(⟨α⟩)</code> though.</p>",
        "id": 208496505,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598809824
    },
    {
        "content": "<p>I kind of miss just being able to type <code>F[a]</code></p>",
        "id": 208496517,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598809865
    },
    {
        "content": "<p>I think your idea makes the most sense. Some sort of curved bracket would be fine?</p>",
        "id": 208497065,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598810729
    },
    {
        "content": "<p>You could find some exotic unicode square bracket if you want to use <code>F[a]</code>. You can't use <code>[</code> and <code>]</code>, they are already over-used by CS aspects of Lean :-(</p>",
        "id": 208497562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598811384
    },
    {
        "content": "<p>Ok, I've pushed some new brackets</p>",
        "id": 208499720,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598814739
    },
    {
        "content": "<p>This might be a bit out there, but you might consider something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">adjoin</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Then you could write <code>F {a}</code> (or <code>F{a}</code>) for <code>adjoin F {a}</code></p>",
        "id": 208500044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598815231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208500044\">said</a>:</p>\n<blockquote>\n<p>This might be a bit out there, but you might consider something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">adjoin</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Then you could write <code>F {a}</code> (or <code>F{a}</code>) for <code>adjoin F {a}</code></p>\n</blockquote>\n<p>I'm a little worried this could create problems down the line if a field and a set occur as arguments to a theorem and Lean tries to interpret them as a field extension.</p>",
        "id": 208501551,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598817474
    },
    {
        "content": "<p>That shouldn't be a problem, but the opposite problem might: if you intended to pass a field extension as an argument, but it'll be interpreted as a field and a set as two separate arguments unless you use parentheses: <code>foo (F{a})</code></p>",
        "id": 208501695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598817634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208497562\">said</a>:</p>\n<blockquote>\n<p>You could find some exotic unicode square bracket if you want to use <code>F[a]</code>. You can't use <code>[</code> and <code>]</code>, they are already over-used by CS aspects of Lean :-(</p>\n</blockquote>\n<p>Surprisingly, <code>F[a]</code> didn't cause any problems (with either compiling mathlib or the linter). It was only discarded because it conflicts with the standard math notation where <code>F(a)</code> should mean adjoining <code>a</code> to <code>F</code> as a field and <code>F[a]</code> should mean adjoining <code>a</code> to <code>F</code> as a ring. The Lean problems actually only came from the notations <code>F(a)</code> and <code>F[(a)]</code></p>",
        "id": 208501759,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598817724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208501695\">said</a>:</p>\n<blockquote>\n<p>That shouldn't be a problem, but the opposite problem might: if you intended to pass a field extension as an argument, but it'll be interpreted as a field and a set as two separate arguments unless you use parentheses: <code>foo (F{a})</code></p>\n</blockquote>\n<p>Yeah, but we set the precedence very high to deal with that, which leads to the other type of problem.</p>",
        "id": 208501772,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598817748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208501772\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208501695\">said</a>:</p>\n<blockquote>\n<p>That shouldn't be a problem, but the opposite problem might: if you intended to pass a field extension as an argument, but it'll be interpreted as a field and a set as two separate arguments unless you use parentheses: <code>foo (F{a})</code></p>\n</blockquote>\n<p>Yeah, but we set the precedence very high to deal with that, which leads to the other type of problem.</p>\n</blockquote>\n<p>With what I was saying, you don't change the precedence of anything, because the notation is simply function application notation.  The instance gives fields an interpretation as a function whose domain is sets of elements to adjoin.</p>",
        "id": 208502055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598818178
    },
    {
        "content": "<p>It's fine to reject the idea -- I just want to make sure you're rejecting what I'm proposing (it's a solution that uses <code>has_coe_to_fun</code> rather than <code>notation</code>)</p>",
        "id": 208502194,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598818328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Yeah, I think I understand your proposal. It may be reasonable, but I personally find it annoying to have to frequently put parentheses around <code>F{a}</code> and the curly brackets are not typically used in normal math for this kind of thing (although there is a certain appeal to  writing the closure of <code>F</code> and <code>S</code> as the concatenation <code>F S</code>).  This seems to me to be a situation where the ideal option is not available and every alternative has some advantages and disadvantages. I personally favor using unicode variants of the round parentheses, but I'm not sure if that is actually the best choice.</p>",
        "id": 208505011,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598822845
    },
    {
        "content": "<p>With my previous reply I meant that with the precedence set low, <code>F[a]</code> has the same issue you described where you often have to write <code>(F[a])</code> but with the precedence set high, Lean may start thinking that other things mean <code>field extension</code> even when they don't.</p>",
        "id": 208505070,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598822941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> There's something going on in the adjoin file that I just noticed. Remember all those ( _ : set E)'s? Those are actually casting from a subalgebra type to a subset type, I think. So some of the lemmas are equalities of subalgebras (like adjoin_singleton), whereas some of the lemmas are equalities of subsets (like adjoin_adjoin_left).</p>",
        "id": 208506971,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598825884
    },
    {
        "content": "<p>Is there anything bad about this?</p>",
        "id": 208506977,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598825908
    },
    {
        "content": "<p>adjoin_adjoin_left is a little weird because it's basically saying that something of type <code>subalgebra (adjoin F E) E</code> equals something of type <code>subalgebra F E</code> (I think), which is why there's this casting to set E</p>",
        "id": 208506988,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598825961
    },
    {
        "content": "<p>I don't immediately see anything bad about it, but I wouldn't necessarily know if there was. If you know that two things are equal as <code>subalgebra</code>s then presumably you also know they are equal as <code>set</code>s. But in cases where two things can't be equal as <code>subalgebra</code>s for type reasons (as in the case of <code>adjoin_adjoin_left</code> (or <code>adjoin_twice</code> as I still think of it)), it doesn't seem unreasonable to me to instead just prove they are equal as <code>sets</code>s. The main downside that I see is that from a UX perspective it's not great to sometimes have to type <code>( : set E)</code>. But maybe there is a better way to do things that I don't know about.</p>",
        "id": 208507677,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598827299
    },
    {
        "content": "<p>I guess ultimately the hope is to replace all of this stuff with the <code>intermediate_field</code> type? So <code>adjoin F S</code> and <code>adjoin (F S) T</code> can be equal as things of type <code>intermediate_field F E</code>. But I'm not sure if I've understood that correctly.</p>",
        "id": 208507735,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598827440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Now that the basic adjoin lemmas are in mathlib, what's the best plan for refactoring the rest of what we have? I was thinking that it might be a good idea to make a new primitive element theorem file, and copy over the proof in terms of the new mathlib field adjoin, and add any lemmas that we don't have yet.</p>",
        "id": 208832456,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599057079
    },
    {
        "content": "<p>Yeah, that sounds okay. We'll probably need to modify some of the remaining theorems in <code>adjoin.lean</code></p>",
        "id": 208852140,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599064503
    },
    {
        "content": "<p>Also, should we prove that <code>F(a)</code> is equal to <code>\\top</code> in the lattice of subalgebras rather than subsets?</p>",
        "id": 208853444,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599065111
    },
    {
        "content": "<p>I've started a new file in the repo for this purpose</p>",
        "id": 208860462,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068319
    },
    {
        "content": "<p>Make sure to upgrade mathlib to use it</p>",
        "id": 208860471,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068329
    },
    {
        "content": "<p>There are still lots of errors also</p>",
        "id": 208860486,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068337
    },
    {
        "content": "<p>and it seems like we may end up having to write <code>(F(a) : set E)</code> in a lot more places, which is annoying</p>",
        "id": 208860527,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599068365
    },
    {
        "content": "<p>oops, turns out I forgot to <code>git add</code> the new file</p>",
        "id": 208871793,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599073335
    },
    {
        "content": "<p>I'll take a stab at some of the errors</p>",
        "id": 208883847,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599078948
    },
    {
        "content": "<p>Oh, I've also been working on this</p>",
        "id": 208885862,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599079866
    },
    {
        "content": "<p>let me push my changes</p>",
        "id": 208885874,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599079872
    },
    {
        "content": "<p>I've taken care of the first error</p>",
        "id": 208885894,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599079888
    },
    {
        "content": "<p>will this conflict with your stuff?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">last_step</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">β</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">γ</span><span class=\"err\">⟯</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">last_step</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 208885986,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599079926
    },
    {
        "content": "<p>no I don't think so</p>",
        "id": 208886073,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599079986
    },
    {
        "content": "<p>I just pushed</p>",
        "id": 208886116,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080015
    },
    {
        "content": "<p>Try pulling and let me know if there are any problems</p>",
        "id": 208886138,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080025
    },
    {
        "content": "<p>One very annoying thing I've discovered:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">β_in_Fαβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"err\">⟯</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">subset_adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">β</span> <span class=\"err\">∅</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span> <span class=\"n\">β</span> <span class=\"err\">∅</span><span class=\"o\">)),</span>\n</code></pre></div>",
        "id": 208886218,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080047
    },
    {
        "content": "<p>The only way I can see to show that <code>b \\in F(a, b)</code> is pretty long</p>",
        "id": 208886271,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080077
    },
    {
        "content": "<p>It would only get worse for <code>c \\in F(a, b, c)</code></p>",
        "id": 208886307,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080091
    },
    {
        "content": "<p>oh dear</p>",
        "id": 208886321,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080098
    },
    {
        "content": "<p>Not sure what to do about it though</p>",
        "id": 208886322,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080098
    },
    {
        "content": "<p>Also, I'm having to write <code>(F(a) : set E)</code> everywhere</p>",
        "id": 208886596,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080212
    },
    {
        "content": "<p>If you are fine with underscores:<br>\n<code>have β_in_Fαβ : β ∈ F⟮α, β⟯ := field.subset_adjoin F _ (set.mem_insert_of_mem α _),</code></p>",
        "id": 208886712,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080268
    },
    {
        "content": "<p>It's definitely a bit better</p>",
        "id": 208887049,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080406
    },
    {
        "content": "<p>The whole thing where <code>F(a, b)</code> doesn't mean <code>adjoin F {a, b}</code> is kind of irritating though</p>",
        "id": 208887093,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080429
    },
    {
        "content": "<p>I really wish we could get notation that did that</p>",
        "id": 208887117,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080447
    },
    {
        "content": "<p>we haven't asked on maths about this yet have we?</p>",
        "id": 208887197,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080487
    },
    {
        "content": "<p>there might be some foldr guru who knows how to do it</p>",
        "id": 208887293,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080523
    },
    {
        "content": "<p>Yeah, that's a good idea</p>",
        "id": 208887348,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080540
    },
    {
        "content": "<p>Do you want to, or should I?</p>",
        "id": 208887853,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599080817
    },
    {
        "content": "<p>I can do it if you want</p>",
        "id": 208887905,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599080855
    },
    {
        "content": "<p>sure</p>",
        "id": 208889108,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081408
    },
    {
        "content": "<p>done. feel free to add anything.</p>",
        "id": 208889332,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599081523
    },
    {
        "content": "<p>Okay, I think after my push just now, all the sorries in <code>new_primitive_element.lean</code> represent theorems that are not yet included in mathlib's <code>field_theory.adjoin</code> (and there are no more errors)</p>",
        "id": 208889378,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081566
    },
    {
        "content": "<p>still, a number of things got uglier :(</p>",
        "id": 208889399,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081575
    },
    {
        "content": "<p>the separable lemma (and maybe others?) doesn't really belong in field_theory.adjoin since it's much more general</p>",
        "id": 208889573,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599081679
    },
    {
        "content": "<p>Yeah, for sure</p>",
        "id": 208889595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081691
    },
    {
        "content": "<p>I just meant that all the sorries represent things not yet in mathlib</p>",
        "id": 208889625,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081709
    },
    {
        "content": "<p>sure</p>",
        "id": 208889685,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599081724
    },
    {
        "content": "<p>because currently <code>new_primitive_element</code> only imports from mathlib</p>",
        "id": 208889703,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081733
    },
    {
        "content": "<p>also, I changed all the statements to be showing that <code>F(a)</code> is equal to <code>top</code> as subalgebras rather than subsets of E</p>",
        "id": 208889750,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081772
    },
    {
        "content": "<p>not sure how you feel about that</p>",
        "id": 208889757,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081778
    },
    {
        "content": "<p>It doesn't seem to make anything harder</p>",
        "id": 208889776,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599081796
    },
    {
        "content": "<p>By the way, it doesn't seem like we use <code>ne_zero_of_ne_zero</code></p>",
        "id": 208890147,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599082042
    },
    {
        "content": "<p>hmm, that might be true</p>",
        "id": 208890788,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599082452
    },
    {
        "content": "<p>It was probably used at some point and then the proof was changed</p>",
        "id": 208890814,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599082467
    },
    {
        "content": "<p>What's the best way to incorporate the new notation? Should we make a branch? If so, is it possible for both of us to contribute to the branch?</p>",
        "id": 208893418,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599083899
    },
    {
        "content": "<p>A branch of mathlib or a branch of the galois theory repo?</p>",
        "id": 208893454,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083926
    },
    {
        "content": "<blockquote>\n<p>If so, is it possible for both of us to contribute to the branch?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 208893475,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083940
    },
    {
        "content": "<p>of mathlib</p>",
        "id": 208893496,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599083954
    },
    {
        "content": "<p>Yeah, that sounds reasonable</p>",
        "id": 208893514,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083969
    },
    {
        "content": "<p>make a branch of mathlib, push it to the mathlib github and I can get it</p>",
        "id": 208893545,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083990
    },
    {
        "content": "<p>but don't make a PR yet</p>",
        "id": 208893558,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083999
    },
    {
        "content": "<p>will do</p>",
        "id": 208893655,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084036
    },
    {
        "content": "<p>does \"don't make a PR yet\" mean: use \"git push\" rather than \"git push origin\"?</p>",
        "id": 208893763,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084100
    },
    {
        "content": "<p>Pushing shouldn't change. Just don't make a pull request on mathlib</p>",
        "id": 208893866,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084135
    },
    {
        "content": "<p>a pull request is a request to merge the branch with the master branch</p>",
        "id": 208893897,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084151
    },
    {
        "content": "<p>the first time you push you should do <code>git push -u origin name_of_branch_goes_here</code> and in subsequent times you should only need to do <code>git push</code></p>",
        "id": 208893966,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084191
    },
    {
        "content": "<p>as usual</p>",
        "id": 208893971,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084195
    },
    {
        "content": "<p>but that doesn't have anything to do with making a PR</p>",
        "id": 208894007,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084211
    },
    {
        "content": "<p>what step of this process (<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>) is the request to merge? Is it the \"Visit mathlib on GitHub to see an invitation to open a PR based on what you just did\" step?</p>",
        "id": 208894019,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208893866\">said</a>:</p>\n<blockquote>\n<p>Pushing shouldn't change. Just don't make a pull request on mathlib</p>\n</blockquote>\n<p>I meant github not mathlib</p>",
        "id": 208894038,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/208894019\">said</a>:</p>\n<blockquote>\n<p>what step of this process (<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>) is the request to merge? Is it the \"Visit mathlib on GitHub to see an invitation to open a PR based on what you just did\" step?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 208894104,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084249
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 208894135,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084270
    },
    {
        "content": "<p>I guess I understand why it's confusing if you're just looking at those instructions</p>",
        "id": 208894193,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084309
    },
    {
        "content": "<p>\"Pull request\" is a term in version control and on github it only happens when you click the button on github that says \"Pull Request\" (or something like that)</p>",
        "id": 208894375,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599084418
    },
    {
        "content": "<p>Ok, I think that there should be a \"primitive_element_theorem\" branch now</p>",
        "id": 208895002,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599084819
    },
    {
        "content": "<p>Yeah, I see it</p>",
        "id": 208896976,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086001
    },
    {
        "content": "<p>Is there any way we could get <code>F(a)(b)</code> to have a coercion to type <code>subalgebra F E</code>?</p>",
        "id": 208898256,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086881
    },
    {
        "content": "<p>I was hoping for the same thing</p>",
        "id": 208899322,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087656
    },
    {
        "content": "<p>basically, you need <code>subalgebra F(a) E</code> to have a coercion to <code>subalgebra F E</code></p>",
        "id": 208899365,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087690
    },
    {
        "content": "<p>that sounds doable, I think</p>",
        "id": 208899375,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087696
    },
    {
        "content": "<p>but it's not already in mathlib?</p>",
        "id": 208899562,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087838
    },
    {
        "content": "<p>oh wait, dumb question probably</p>",
        "id": 208899619,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087858
    },
    {
        "content": "<p>well, if you know <code>E</code> and <code>L</code> are <code>F</code> algebras and <code>K</code> is a subalgebra of <code>E</code> over <code>L</code> then does mathlib already know <code>K</code> is also a subalgebra of <code>E</code> over <code>F</code>?</p>",
        "id": 208899715,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087956
    },
    {
        "content": "<p>(assuming that L is an algebra over F)?</p>",
        "id": 208899843,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088028
    },
    {
        "content": "<p>\"if you know <code>E</code> and <code>L</code> are <code>F</code> algebras\"</p>",
        "id": 208899952,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088101
    },
    {
        "content": "<p>although I guess we need some compatability condition on the algebra maps</p>",
        "id": 208899990,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088137
    },
    {
        "content": "<p>:/</p>",
        "id": 208900008,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088146
    },
    {
        "content": "<p>for now, I think it's fine to make a special instance for adjoin</p>",
        "id": 208900039,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088170
    },
    {
        "content": "<p>sounds good</p>",
        "id": 208900058,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088183
    },
    {
        "content": "<p>I pushed a new commit to the mathlib branch that removes all sorries except for stuff about being separable and <code>inclusion.whatever</code> stuff. Some of the proofs are pretty ugly though and the induction proof of primitive element theorem for infinite fields is unfathomably slow</p>",
        "id": 209028380,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599166536
    },
    {
        "content": "<p>I realized a bunch of hypotheses of <code>primitive_element_two_aux</code> were not actually being used, so I removed them</p>",
        "id": 209038528,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599173535
    },
    {
        "content": "<p>cool</p>",
        "id": 209041552,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599176404
    },
    {
        "content": "<p>however, a lot of this dimension stuff really should be generalized and put in tower.lean, I think</p>",
        "id": 209041571,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599176423
    },
    {
        "content": "<p>In particular: <code>adjoin_findim_of_findim</code> <code>adjoin_findim_of_findim_base</code></p>",
        "id": 209041625,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599176478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/209041625\">said</a>:</p>\n<blockquote>\n<p>In particular: <code>adjoin_findim_of_findim</code> <code>adjoin_findim_of_findim_base</code></p>\n</blockquote>\n<p>Yeah, that's probably true. Do you want to do it or should I?</p>",
        "id": 209042321,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599177181
    },
    {
        "content": "<p>If you could do it, that would be great. I recently added a vector_space.dim version to field.tower, so it shouldn't be too hard to extract the statements about finite_dimensional from that</p>",
        "id": 209042439,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599177314
    },
    {
        "content": "<p>By the way, we seem to need this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">submodule_restrict_field</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">zero_mem&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">add_mem&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem&#39;</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_def</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">is_scalar_tower</span><span class=\"bp\">.</span><span class=\"n\">algebra_map_eq</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">comp_apply</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_def</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">smul_mem&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Saying that a submodule of <code>E</code> as an <code>F(a)</code>-module is also a submodule of <code>E</code> as an <code>F</code>-module. It should also probably be proved in more generality than just adjoin</p>",
        "id": 209042447,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599177322
    },
    {
        "content": "<p>Most of the remaining sorries can be resolved if we just construct a <code>is_scalar_tower F (set.range (algebra_map F E)) E</code> instance, I think</p>",
        "id": 209049900,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599186823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I'm currently not able to compile any lean files in the mathlib branch (the orange bars never go away). Are you experiencing anything similar?</p>",
        "id": 209585999,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599698767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I didn't have that problem but then I pulled your most recent changes and now I do</p>",
        "id": 209589765,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704104
    },
    {
        "content": "<p>Let me try to look into it</p>",
        "id": 209589768,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Try <code>leanproject get-cache</code> from the command line</p>",
        "id": 209589860,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704243
    },
    {
        "content": "<p>For me that seemed to fix the problem</p>",
        "id": 209589869,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704252
    },
    {
        "content": "<p>Not sure why we normally don't have to do that though</p>",
        "id": 209589875,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704261
    },
    {
        "content": "<p>Ohh, it's because you made a change to a pretty basic file.</p>",
        "id": 209589933,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704345
    },
    {
        "content": "<p>So if you don't do <code>get-cache</code> it's trying to recompile everything that depends on that file.</p>",
        "id": 209589939,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704369
    },
    {
        "content": "<p>Normally when we only change <code>primitive_element_theorem.lean</code> it only needs to try to compile that file.</p>",
        "id": 209589970,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704392
    },
    {
        "content": "<p><code>leanproject get-cache</code> updates the oleans files (I think copying from the compiled files from the last successful push to github). And apparently VS Code (or whatever) is smart enough to only recompile files that have changed since the oleans files were last updated</p>",
        "id": 209590036,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704469
    },
    {
        "content": "<p>I think running <code>leanproject hooks</code> will mean that you never have to manually run <code>leanproject get-cache</code> again though</p>",
        "id": 209590051,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704517
    },
    {
        "content": "<p>but I'm not entirely certain about that</p>",
        "id": 209590091,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704525
    },
    {
        "content": "<p>ahhh, that solved it. I was wondering if that was the problem, but I didn't think so because the bottom of my VSCode seemed to indicate that it was only checking the file that I had open.</p>",
        "id": 209590098,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599704564
    },
    {
        "content": "<p>I think to check the file currently open it has to always check all files it depends on for which it doesn't have olean files</p>",
        "id": 209590115,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599704605
    },
    {
        "content": "<p>You can always compile the file on the command line with <code>lean --make path/to/file.lean</code> and see how much other stuff lean wanta to compile before it compiles yours</p>",
        "id": 209598697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599717527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Is there anything left to do before making the PR?</p>",
        "id": 210054904,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600113297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210054904\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> Is there anything left to do before making the PR?</p>\n</blockquote>\n<p>Did you ever figure out what the deal was with the \"dangerous instance\"? And did we ever put the contents of <code>primitive_element.lean</code> in some namespace (probably <code>field</code>)?</p>",
        "id": 210055912,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600113774
    },
    {
        "content": "<p>well, I think this is what's going on with the dangerous instance. If it's trying to figure out that E/K is finite dimensional, then it might try to apply that instance, but it can't deduce what the base-field F is, so it could get confused or even get into an infinite loop. I changed the instance to a lemma and used haveI in the one spot where it was needed. If you still wanted to have an instance, then you could have it for subalgebras (so that the base-field can be deduced).</p>",
        "id": 210057131,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600114458
    },
    {
        "content": "<p>we haven't added a namespace yet</p>",
        "id": 210057166,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600114480
    },
    {
        "content": "<p>(field would be fine, I think)</p>",
        "id": 210057204,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600114501
    },
    {
        "content": "<p>Okay, I guess let's add the namespace and then make the PR.</p>",
        "id": 210057582,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600114710
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4153\">#4153</a></p>",
        "id": 210060752,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116316
    },
    {
        "content": "<p>Unfortunately, there seems to be a conflict already</p>",
        "id": 210061234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600116553
    },
    {
        "content": "<p>is it just that other stuff has been added to tower.lean?</p>",
        "id": 210061453,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116659
    },
    {
        "content": "<p>It was with <code>tower.lean</code> yes, but I didn't check what exactly</p>",
        "id": 210061615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600116732
    },
    {
        "content": "<p>I'm glancing at it now, and it appears that it might just be that the PR somehow didn't include recent additions to tower.lean</p>",
        "id": 210061688,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116766
    },
    {
        "content": "<p>I would hope that this can be resolved by just including both</p>",
        "id": 210061916,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600116860
    },
    {
        "content": "<p>you should merge master into your branch maybe?</p>",
        "id": 210062724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600117257
    },
    {
        "content": "<p>Okay, I just merged master into our branch</p>",
        "id": 210063874,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600117949
    },
    {
        "content": "<p>hopefully everything should work okay now</p>",
        "id": 210063887,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600117961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> It looks like the mathlib build failed because of some problem with <code>separable.lean</code>. I tried looking at it and it seems that there is a <code>rw</code> that no longer applies, perhaps because it follows a <code>dsimp</code> and changing mathlib can change what the goal looks like after <code>dsimp</code> (which I believe is why there is a recommendation against using nonterminal <code>simp</code>s and <code>dsimp</code>s without <code>only</code>). Anyway, I can't quickly figure out how to fix it so can you take a look?</p>",
        "id": 210070416,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600122473
    },
    {
        "content": "<p>Also I think some of the formatting in our PR is not consistent with mathlib guidelines as described <a href=\"https://leanprover-community.github.io/contribute/style.html\">here</a>. I think the conventions are also supposed to include putting subgoals within proofs inside brackets (so each <code>have</code> which is not proved in one line should be followed by <code>{...}</code>) which the proof in <code>separable.lean</code> that broke doesn't seem to follow</p>",
        "id": 210070715,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600122686
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 210071020,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600122954
    },
    {
        "content": "<p>Hopefully the separable.lean proofs are fixed now</p>",
        "id": 210071538,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600123405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> It looks like there's a problem with some of the finset stuff. (Line 86 in primitive_element.lean)</p>",
        "id": 210073066,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600124564
    },
    {
        "content": "<p>Do you mind if I take a pass to mathlibify things a bit more?</p>",
        "id": 210073859,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600125179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210073859\">said</a>:</p>\n<blockquote>\n<p>Do you mind if I take a pass to mathlibify things a bit more?</p>\n</blockquote>\n<p>Go for it. That would be great.</p>",
        "id": 210077003,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600127785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210073066\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> It looks like there's a problem with some of the finset stuff. (Line 86 in primitive_element.lean)</p>\n</blockquote>\n<p>Okay, I fixed it. It turned out that a few days ago, <code>polynomial.roots</code> was changed from a <code>finset</code> to a <code>multiset</code></p>",
        "id": 210078268,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600128967
    },
    {
        "content": "<p>I'm surprised that didn't break more stuff</p>",
        "id": 210078303,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600129011
    },
    {
        "content": "<p>pushed some things <a href=\"https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19\">https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19</a></p>\n<p>Tried to keep lines from being too long, fixed some indentation, removed some (all?) non-terminal simps, removed <code>field.infinite_of_infinite</code> because you only used it once and this seems ok:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">Fα_inf</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infinite</span><span class=\"bp\">.</span><span class=\"n\">of_injective</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>\n\n\n<p>It seems like <code>primitive_element_two_inf_key</code> could stand to be simplified.  Are there any interesting sub-lemmas here?</p>",
        "id": 210082755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600133979
    },
    {
        "content": "<p>Any reason you didn't use <code>open_locale classical</code> in <code>primitive_element.lean</code>? I switch it to that and it seems to work fine.</p>",
        "id": 210082888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600134134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210082755\">said</a>:</p>\n<blockquote>\n<p>pushed some things <a href=\"https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19\">https://github.com/leanprover-community/mathlib/pull/4153/commits/d07896f26bfeeabb6af5a836e46ed5d2c6281a19</a></p>\n<p>Tried to keep lines from being too long, fixed some indentation, removed some (all?) non-terminal simps, removed <code>field.infinite_of_infinite</code> because you only used it once and this seems ok:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">Fα_inf</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infinite</span><span class=\"bp\">.</span><span class=\"n\">of_injective</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>\n\n\n<p>It seems like <code>primitive_element_two_inf_key</code> could stand to be simplified.  Are there any interesting sub-lemmas here?</p>\n</blockquote>\n<p>Thanks Kyle! We've thought about trying to break off some sublemmas from primitive_element_two_inf_key, but I haven't had much success.</p>",
        "id": 210083267,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600134664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210082888\">said</a>:</p>\n<blockquote>\n<p>Any reason you didn't use <code>open_locale classical</code> in <code>primitive_element.lean</code>? I switch it to that and it seems to work fine.</p>\n</blockquote>\n<p>I don't recall, maybe <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> did that? It could have been because it was faster at some point.</p>",
        "id": 210083723,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600135247
    },
    {
        "content": "<p>Just wanting to make sure I didn't break anything by changing it!</p>",
        "id": 210084588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600136400
    },
    {
        "content": "<p>Looks like bundled subfields and <code>intermediate_field</code> are coming soon: <a href=\"https://github.com/leanprover-community/mathlib/issues/4159\">#4159</a></p>",
        "id": 210206885,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600214206
    },
    {
        "content": "<p>Looking forward to it. There was plenty of stuff that would be far less painful with the intermediate_field type.</p>",
        "id": 210209905,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600216591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Is there anything I can do to help address the comments on the PR? I'm not sure what you've already done at this point.</p>",
        "id": 210353533,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600325545
    },
    {
        "content": "<p>I'm taking care of the splitting one now. Then there's just two left: the long lines one (which should be easy to finish off), and the eval one.</p>",
        "id": 210412790,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600359196
    },
    {
        "content": "<p>I'm not so sure that the eval one is a good idea. There are two places where there is an eval involving f, and in one it's a plain eval and in the other it's an eval2.</p>",
        "id": 210413800,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600359671
    },
    {
        "content": "<p>I'll give it a try though and see how it looks</p>",
        "id": 210413838,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600359696
    },
    {
        "content": "<p>There's also a new small merge conflict to sort out</p>",
        "id": 210424716,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600364708
    },
    {
        "content": "<p>Yeah, it's because the bundled subfield got merged. I vote that for now we simply change <code>import field_theory.subfield</code> to <code>import deprecated.subfield</code> and deal with incorporating bundled subfields later (probably after intermediate_field has been merged)</p>",
        "id": 210425072,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600364859
    },
    {
        "content": "<p>That would be fine for now I think</p>",
        "id": 210425244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600364916
    },
    {
        "content": "<p>You could promise the switch in a later PR maybe</p>",
        "id": 210425291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600364936
    },
    {
        "content": "<p>I did one of these refactors and after a while you can just fix file after file because you know what's broken and how to fix it quite generally</p>",
        "id": 210425360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600364972
    },
    {
        "content": "<p>Okay, I've tried to merge with the master branch of mathlib. Fingers crossed that nothing else breaks</p>",
        "id": 210465403,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600386918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> It looks like your fingers weren't crossed enough</p>",
        "id": 210469507,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600391128
    },
    {
        "content": "<p>Lol, I'm doing something else at the moment but I'll take a look to see what I messed up in a bit</p>",
        "id": 210472488,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600394961
    },
    {
        "content": "<p>It looks like you lost some functions from <code>field_theory/subfield</code> because the file moved due to the deprecation.  It was surprisingly hard figuring that out from git...</p>",
        "id": 210475190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600398777
    },
    {
        "content": "<p>Ooops... hopefully you can fix it by importing <code>deprecated.is_subfield</code>.</p>",
        "id": 210475252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398849
    },
    {
        "content": "<p>Yeah, I just realized that too. Specifically <code>is_subfield.pow_mem</code></p>",
        "id": 210475257,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398853
    },
    {
        "content": "<p>(And don't worry about \"deprecated\". They will be \"undeprecated\" in a week or 2.)</p>",
        "id": 210475260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398869
    },
    {
        "content": "<p>Still, you might want to move some things over to bundled <code>subfield</code> if that is a more natural way of stating things.</p>",
        "id": 210475324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398907
    },
    {
        "content": "<p>The problem is that <code>is_subfield.pow_mem</code> is not in <code>deprecated/subfield</code> because we added it in our PR but it wasn't there when Anne moved <code>subfield.lean</code> to <code>deprecated/subfield.lean</code></p>",
        "id": 210475326,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398907
    },
    {
        "content": "<p>Aha</p>",
        "id": 210475339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600398918
    },
    {
        "content": "<p>But it should be easy enough to fix</p>",
        "id": 210475341,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398921
    },
    {
        "content": "<p>The tricky part was when I merged with master VS Code wanted to compile everything and that basically always crashes my computer</p>",
        "id": 210475358,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398951
    },
    {
        "content": "<p>I'm in the middle of fixing it</p>",
        "id": 210475359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600398952
    },
    {
        "content": "<p>so it was easier to just push to origin and wait for it to get compiled there and then run <code>leanproject get-cache</code></p>",
        "id": 210475406,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600398981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210475358\">said</a>:</p>\n<blockquote>\n<p>The tricky part was when I merged with master VS Code wanted to compile everything and that basically always crashes my computer</p>\n</blockquote>\n<p>Yup, when the merge is ugly, I quit VS Code before it goes crazy, and I do the merge in another editor like Vim.</p>",
        "id": 210475415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600399001
    },
    {
        "content": "<p>Fixing the conflict itself was not so bad (though I missed that subtlety about <code>is_subfield.pow_mem</code>) but checking for errors is annoying</p>",
        "id": 210475434,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210475324\">said</a>:</p>\n<blockquote>\n<p>Still, you might want to move some things over to bundled <code>subfield</code> if that is a more natural way of stating things.</p>\n</blockquote>\n<p>Anne claimed that <code>intermediate_field</code> is coming soon so I think we'll wait for that before porting everything</p>",
        "id": 210475448,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399081
    },
    {
        "content": "<p>Doing a merge when files are moved around is also tricky, so I'm not surprised you lost <code>is_subfield.pow_mem</code>!</p>",
        "id": 210475523,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399160
    },
    {
        "content": "<p>Honestly I just forgot that it was in one of the files that got changed</p>",
        "id": 210475595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399231
    },
    {
        "content": "<p>I probably actually should have fixed the merge conflict in an editor besides VS Code. I was probably less careful than I should have been because I didn't want to keep VS Code open too long in case it ate up all my memory</p>",
        "id": 210475657,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399335
    },
    {
        "content": "<p>By the way, thanks for all the help Kyle!</p>",
        "id": 210475698,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600399428
    },
    {
        "content": "<p>Merging is usually better when files stay put because the diff will make sure you see the differences within a file.  I've just found it relies on one's own memory a bit too much in cases like this.</p>",
        "id": 210475741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399453
    },
    {
        "content": "<p>Pushed the change</p>",
        "id": 210475743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399457
    },
    {
        "content": "<p>I think I last touched <code>is_subfield.pow_mem</code> to shorten the line lengths, and yet I forgot it was a thing.  I was going through the last week of mathlib changes seeing when it was removed before I realized...</p>",
        "id": 210475777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600399545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <a href=\"#narrow/stream/113488-general/topic/deprecated.20is_sub*\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/deprecated.20is_sub*</a></p>",
        "id": 210586747,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600473474
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 210587252,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600474018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I shortened the proof of <code>primitive_element</code> a bit. Along the way, I had to add a lemma saying that <code>adjoin F S</code> is equal to <code>set.range (algebra_map (adjoin F S) E)</code> as subsets of <code>E</code>, or in other words, that <code>adjoin F S</code> is equal to <code>(\\bot : subalgebra (adjoin F S) E)</code> as subsets of <code>E</code>, which turned out to be not quite as trivial as I had imagined (perhaps due to my own ignorance)</p>",
        "id": 210592013,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600480832
    },
    {
        "content": "<p>I'm going to take a look at <code>primitive_element_inf</code> next</p>",
        "id": 210592079,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600480941
    },
    {
        "content": "<p>I just pushed some changes. Mainly I shortened the proof of <code>primitive_element_inf</code>. I also added two little lemmas to <code>adjoin.lean</code> saying that if <code>F(x)</code> has dimension 1 over <code>F</code> for every <code>x : E</code> then <code>F = E</code>. I also made the variable <code>F</code> implicit in some of the lemmas in <code>adjoin.lean</code> that deal with dimension.</p>",
        "id": 210600895,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600498102
    },
    {
        "content": "<p><code>primitive_element.lean</code> is now just about 260 lines btw</p>",
        "id": 210601338,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600498982
    },
    {
        "content": "<p>Just pushed a little change adding names for the sections in <code>adjoin.lean</code> and <code>primitive_element.lean</code></p>",
        "id": 210601389,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600499068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Do you think we should change any of the lemmas in <code>primitive_element.lean</code> to <code>private</code>?</p>",
        "id": 210601392,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600499099
    },
    {
        "content": "<p>would it make sense to make anything private if it's a special case of the final theorem?</p>",
        "id": 210625490,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600536210
    },
    {
        "content": "<p>If it really is a special case, then yes.</p>",
        "id": 210625502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600536242
    },
    {
        "content": "<p>But a lot of things that one thinks of as \"auxilliary, implementation detail\" turn out to be useful for others in a follow-up work.</p>",
        "id": 210625555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600536274
    },
    {
        "content": "<p>And then they'll be happy if you didn't make it <code>private</code></p>",
        "id": 210625557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600536285
    },
    {
        "content": "<p>I'm not sure what we gain by making anything private. Why not just put a note in the docstring saying \"don't use this, use this better theorem <code>name_of_tbeorem</code> because...\"?</p>",
        "id": 210629115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600541008
    },
    {
        "content": "<p>Making it private means it won't clutter your autocomplete</p>",
        "id": 210629281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600541172
    },
    {
        "content": "<p>I wonder if most private things would be better as something in a sub-namespace called <code>private</code>.  While it's not the paragon of PL design, that's the Mathematica way at least.  All <code>private</code> does in Lean, if I remember correctly, is mangle names so you can't refer to them outside the namespace.</p>",
        "id": 210629806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600541812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/4180\">#4180</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/4181\">#4181</a>. It seems like <code>intermediate_field</code> is on its way to being merged</p>",
        "id": 210674926,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600621067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I'll take care of the rest of the stuff about findim from the latest round of suggestions, but I might have to do it a little later in the day.</p>",
        "id": 210778065,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600711427
    },
    {
        "content": "<p>I'll try to finish-off the non-findim stuff</p>",
        "id": 210779973,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600712281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I think I've finished refactoring the dimension lemmas. So that should be all the requested changes so far that I know about. I noticed there is also one other \"unresolved\" comment (namely <a href=\"https://github.com/leanprover-community/mathlib/pull/4153#discussion_r492003832\">this one</a>). I think you already took care of it though. Is that correct?</p>",
        "id": 210830177,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600753856
    },
    {
        "content": "<p>I don't think that I've split that one off as a lemma yet.</p>",
        "id": 210832052,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600756322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/210832052\">said</a>:</p>\n<blockquote>\n<p>I don't think that I've split that one off as a lemma yet.</p>\n</blockquote>\n<p>Have you done this yet? If not, I can try taking a stab at it.</p>",
        "id": 210903416,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600795361
    },
    {
        "content": "<p>Not yet. I'll have time this afternoon if you haven't done it by then.</p>",
        "id": 210919747,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600802905
    },
    {
        "content": "<p>Okay, I've done it. But now I also want to make a couple other changes to the separability before pushing.</p>",
        "id": 210935097,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600811029
    },
    {
        "content": "<p>Just realized there's an easier way to prove some of the dimension lemmas I added, except that it doesn't work in full generality because the lemmas proving that dimension of vector spaces is preserved by isomorphism are only for vector spaces in the same universe</p>",
        "id": 210936101,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600811597
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 210937827,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600812630
    },
    {
        "content": "<p>I'm working on refactoring primitive_element_two_inf, so don't worry about those comments for now</p>",
        "id": 211045076,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886413
    },
    {
        "content": "<p>Oh, I recently pushed something removing all the <code>polynomial._</code>'s and I also just finished fixing the style issues (though I haven't pushed yet).</p>",
        "id": 211045980,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600886858
    },
    {
        "content": "<p>should I push the style fixes anyway? They should be easy to merge later if need be</p>",
        "id": 211046016,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600886875
    },
    {
        "content": "<p>I might be doing some major rewriting, so hold off on those</p>",
        "id": 211046118,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886912
    },
    {
        "content": "<p>actually, if you've already done them</p>",
        "id": 211046144,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886921
    },
    {
        "content": "<p>then push them</p>",
        "id": 211046160,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886926
    },
    {
        "content": "<p>and I'll work from there</p>",
        "id": 211046176,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600886941
    },
    {
        "content": "<p>Okay, I just pushed them</p>",
        "id": 211046355,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887015
    },
    {
        "content": "<p>Let me know if you have any problems when you pull the changes</p>",
        "id": 211046378,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887030
    },
    {
        "content": "<p>Is it okay if I continue making some changes that don't affect <code>primitive_element_two_inf</code>?</p>",
        "id": 211046871,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887242
    },
    {
        "content": "<p>Also I can take care of the requested changes to the polynomial lemmas if that's okay with you</p>",
        "id": 211046985,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600887280
    },
    {
        "content": "<p>yeah, that's all fine</p>",
        "id": 211048420,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600887929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I just pushed some changes that address some of the requested changes. I had to make a couple small changes to <code>primitive_element_two_inf</code> but they should be easy to deal with.</p>",
        "id": 211067113,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600898211
    },
    {
        "content": "<p>ok, I've pushed the big refactor.</p>",
        "id": 211072959,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600902397
    },
    {
        "content": "<p>It's been kind of funny to watch the number of lines added move up and down over the course of the PR</p>",
        "id": 211074128,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600903558
    },
    {
        "content": "<p>Hopefully we're close to merging now</p>",
        "id": 211074181,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600903573
    },
    {
        "content": "<p>Btw, the version of the statement of the primitive element theorem that Anne mentioned needing is the same as the thing Jordan is working on right?</p>",
        "id": 211074238,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600903633
    },
    {
        "content": "<p>oh I guess so</p>",
        "id": 211074585,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600903974
    },
    {
        "content": "<p>Why do you need <code>is_subfield.pow_mem</code> in a deprecated file?</p>",
        "id": 211079832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600909336
    },
    {
        "content": "<p>I did a \"remove a deprecated import from a file and then fix the several hundred errors caused by this\" PR once.</p>",
        "id": 211079870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600909397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211079832\">said</a>:</p>\n<blockquote>\n<p>Why do you need <code>is_subfield.pow_mem</code> in a deprecated file?</p>\n</blockquote>\n<p>When I first wrote that lemma the file was not yet deprecated. In fact, it only became deprecated after we first made this PR.</p>",
        "id": 211082873,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600913006
    },
    {
        "content": "<p>And right now I think it doesn't make sense to refactor everything to get rid of <code>is_subfield</code> until <code>intermediate_field</code> gets merged</p>",
        "id": 211082885,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600913040
    },
    {
        "content": "<p>which should happen soon</p>",
        "id": 211082926,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600913055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> did you see Johan's comments on github? What do you think about changing the name of <code>primitive_element</code> to <code>exists_adjoin_simple_eq_top</code>?</p>",
        "id": 211170158,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1600971452
    },
    {
        "content": "<p>I saw it. It is a bit of an abomination, but I would be fine with it.</p>",
        "id": 211170804,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1600971825
    },
    {
        "content": "<p>Primitive element theorem merged! Well done to all who contributed!</p>",
        "id": 211383646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601155989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Should we make a branch for turning adjoin into intermediate field now?</p>",
        "id": 211384012,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601156672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211384012\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> Should we make a branch for turning adjoin into intermediate field now?</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 211384087,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601156880
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/adjoin_intermediate_field\">https://github.com/leanprover-community/mathlib/tree/adjoin_intermediate_field</a></p>",
        "id": 211519436,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601312306
    },
    {
        "content": "<p>at some point we should show <code>bounded_lattice (intermediate_field K L)</code>, which might require establishing a \"galois connection\" (or something like that) between subsets of L containing K and intermediate fields</p>",
        "id": 211526410,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601315654
    },
    {
        "content": "<p>one issue(?) is that doing so would probably require the use of adjoin, so it would need to be done in adjoin.lean rather than intermediate_field.lean</p>",
        "id": 211526997,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601315911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211526997\">said</a>:</p>\n<blockquote>\n<p>one issue(?) is that doing so would probably require the use of adjoin, so it would need to be done in adjoin.lean rather than intermediate_field.lean</p>\n</blockquote>\n<p>That seems fine to me</p>",
        "id": 211527576,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601316162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211526410\">said</a>:</p>\n<blockquote>\n<p>at some point we should show <code>bounded_lattice (intermediate_field K L)</code>, which might require establishing a \"galois connection\" (or something like that) between subsets of L containing K and intermediate fields</p>\n</blockquote>\n<p>By \"galois connection\" here do you just mean that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊂</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S \\subset T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>⊂</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(S) \\subset L(T)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 211527868,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601316331
    },
    {
        "content": "<p>I'm not sure familiar with it, but I'm looking at ring_theory/algebra.lean, line 1100</p>",
        "id": 211528045,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316425
    },
    {
        "content": "<p>where it does stuff with galois connections and galois insertions to quickly get bounded_lattice</p>",
        "id": 211528074,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316448
    },
    {
        "content": "<p>There's a design decision to be made here</p>",
        "id": 211528183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316498
    },
    {
        "content": "<p>And I'm not sure what the right one is</p>",
        "id": 211528201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316511
    },
    {
        "content": "<p>because I'm unaware of the ramifications</p>",
        "id": 211528216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316521
    },
    {
        "content": "<p>Given a random subset of L. you want to generate a subfield of L containing K. There are two quite different ways to do this.</p>",
        "id": 211528262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316549
    },
    {
        "content": "<p>1) Prove that subfields of L containing K have an <code>Inf</code> (arbitrary intersections) and define the subfield corresponding to S to be the inf of the subfields of L containing K which also contain S</p>",
        "id": 211528385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316605
    },
    {
        "content": "<p>2) Define it the inductive way, so it's an inductively defined carrier (i.e. an inductive predicate) with constructors saying \"k in K is in\", \"if a and b are in then their sum is in\" etc</p>",
        "id": 211528518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316674
    },
    {
        "content": "<p>The advantage of (2) is that you get the recursor for free</p>",
        "id": 211528547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316694
    },
    {
        "content": "<p>But I don't know how important the recursor will be</p>",
        "id": 211528567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316707
    },
    {
        "content": "<p>The advantage of (1) is that it's cheap and it works. I've used it to get to very quick Galois insertion proofs when doing subrings etc</p>",
        "id": 211528651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316737
    },
    {
        "content": "<p>Currently we have <code>adjoin F S</code> which uses ring.closure (I'm not sure which of the two approaches ring.closure uses)</p>",
        "id": 211528676,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316752
    },
    {
        "content": "<p>ah, it looks like it uses the 2nd way</p>",
        "id": 211528697,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316766
    },
    {
        "content": "<p>Oh you already have this direction!</p>",
        "id": 211528709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316779
    },
    {
        "content": "<p>yeah</p>",
        "id": 211528729,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316789
    },
    {
        "content": "<p>Are you doing subrings or subfields?</p>",
        "id": 211528736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316792
    },
    {
        "content": "<p>subfields</p>",
        "id": 211528749,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316799
    },
    {
        "content": "<p>And adjoin produces a subfield?</p>",
        "id": 211528764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316808
    },
    {
        "content": "<p>yes, but now an intermediate field</p>",
        "id": 211528773,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316818
    },
    {
        "content": "<p>So this is a different function to the subring adjoin?</p>",
        "id": 211528809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316841
    },
    {
        "content": "<p>yeah, I just said subring closure because I hadn't gone far enough down the rabbit hole</p>",
        "id": 211528890,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316874
    },
    {
        "content": "<p>it's defined in terms of field.closure</p>",
        "id": 211528932,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601316898
    },
    {
        "content": "<p>gotcha</p>",
        "id": 211528947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316905
    },
    {
        "content": "<p>I think following the strategy from <code>ring_theory.algebra</code> and proving that there is a galois connection between <code>field.adjoin</code> and <code>coe</code> seems reasonable</p>",
        "id": 211529912,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601317366
    },
    {
        "content": "<p>Btw, <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, I just sent Anne a message asking if they have already done any work on refactoring <code>field_theory/adjoin</code></p>",
        "id": 211530431,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601317610
    },
    {
        "content": "<p>I also just asked in the <code>is there code for X?</code> stream about whether mathlib already proves anything like what Jordan is working on (the dimension and basis of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span>)</p>",
        "id": 211531109,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601317936
    },
    {
        "content": "<p>Just proved the complete_lattice</p>",
        "id": 211531144,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601317954
    },
    {
        "content": "<p>It wasn't too bad</p>",
        "id": 211531150,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601317957
    },
    {
        "content": "<p>It will probably speed-up/obsolete some other lemmas we have in adjoin.lean</p>",
        "id": 211531199,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601317985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> presumably we should no longer import <code>deprecated/subfield</code> in <code>field_theory/adjoin</code>?</p>",
        "id": 211532090,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318429
    },
    {
        "content": "<p>yeah, we need to get rid of that import</p>",
        "id": 211532124,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601318455
    },
    {
        "content": "<p>the problem is that closure is defined in that file</p>",
        "id": 211532149,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601318468
    },
    {
        "content": "<p>oh, then I guess we need to port closure over to the new <code>subfield</code> file?</p>",
        "id": 211532205,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318501
    },
    {
        "content": "<p>No, wait, the new <code>subfield</code> also has some version of closure</p>",
        "id": 211532322,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318562
    },
    {
        "content": "<p>To me it looks like it should be fine to use the new version of subfield closure</p>",
        "id": 211532573,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318668
    },
    {
        "content": "<p>Since <code>intermediate_field</code> inherits from both <code>subalgebra</code> and <code>subfield</code> and <code>subfield.closure</code> is already a subfield, I feel like it should be very easy to define <code>field.adjoin</code>. Unfortunately I don't really know how currently</p>",
        "id": 211533177,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601318917
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 211533912,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601319223
    },
    {
        "content": "<p>Okay, I think I found the relevant part of \"Theorem Proving in Lean\" (on inheritance)</p>",
        "id": 211534095,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601319283
    },
    {
        "content": "<p>Hmm, actually that section of \"Theorem Proving in Lean\" is really short</p>",
        "id": 211534502,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601319466
    },
    {
        "content": "<p>I've figured out how to rewrite adjoin in terms of the bundled subfield</p>",
        "id": 211534649,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601319530
    },
    {
        "content": "<p>Ok, it's pushed but there are a bunch of errors</p>",
        "id": 211538977,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601321579
    },
    {
        "content": "<p>I fixed a couple errors. I'll take a more serious look this evening</p>",
        "id": 211539912,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322088
    },
    {
        "content": "<p>A couple comments</p>",
        "id": 211539921,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322094
    },
    {
        "content": "<p>a lot of things need to change from <code>field.foo</code> to <code>subfield.foo</code></p>",
        "id": 211539941,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322109
    },
    {
        "content": "<p>some instances are no longer necessary. Like now <code>adjoin F S</code> is automatically a subfield of <code>E</code> and also a field</p>",
        "id": 211540033,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322135
    },
    {
        "content": "<p>also, obviously, lots of hypotheses have to change from <code>is_subfield</code> to something else</p>",
        "id": 211540081,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601322163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Have you seen <code>ring_hom.field_range</code>? Also, Anne said they were working on refactoring <code>field.adjoin</code> to use <code>intermediate_field</code> here: <a href=\"https://github.com/leanprover-community/mathlib/blob/Vierkantor-dedekind-domain/src/field_theory/adjoin.lean\">https://github.com/leanprover-community/mathlib/blob/Vierkantor-dedekind-domain/src/field_theory/adjoin.lean</a></p>",
        "id": 211548001,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601325953
    },
    {
        "content": "<p>I haven't seen ring_hom.field_range, but it looks useful.  I presume that we'll merge our refactoring before \"Vierkantor-dedekind-domain\" gets merged, so I guess we should go ahead but try to make our version compatible with theirs?</p>",
        "id": 211548896,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601326398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211548896\">said</a>:</p>\n<blockquote>\n<p>I haven't seen ring_hom.field_range, but it looks useful.  I presume that we'll merge our refactoring before \"Vierkantor-dedekind-domain\" gets merged, so I guess we should go ahead but try to make our version compatible with theirs?</p>\n</blockquote>\n<p>I think we should do whatever seems best, reusing any stuff they already did that seems helpful.</p>",
        "id": 211549340,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601326619
    },
    {
        "content": "<p>But it looks like we can reuse that stuff to immediately fix a number of proofs that got messed up when we stopped importing <code>deprecated/subfield</code></p>",
        "id": 211549581,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601326755
    },
    {
        "content": "<p>Oh, it also looks like we now have a number of problems introduced by trying to use lemmas about the bottom subalgebra in places where we are now really talking about the bottom intermediate field. Should be easy to fix by proving that those two things are equal though, I think. (Or maybe by proving a bunch of lemmas like <code>eq_bot_iff</code> for intermediate_field)</p>",
        "id": 211550045,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601326973
    },
    {
        "content": "<p>shouldn't we just change all bottom subalgebras to bottom intermediate fields?</p>",
        "id": 211552585,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601328402
    },
    {
        "content": "<p>or are there some lemmas that should be stated in terms of the bottom subalgebra?</p>",
        "id": 211552614,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601328428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211552614\">said</a>:</p>\n<blockquote>\n<p>or are there some lemmas that should be stated in terms of the bottom subalgebra?</p>\n</blockquote>\n<p>No, the lemmas should be stated in terms of the bottom intermediate_field I guess. But the proofs are relying on lemmas about the bottom subalgebra so we need some extra lemmas to connect them</p>",
        "id": 211554879,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601329784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I did a little bit more work on refactoring <code>field.adjoin</code> and <code>primitive_element</code>. Here's a couple of comments:</p>",
        "id": 211671281,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407291
    },
    {
        "content": "<p>1) Something weird is going on in the proof of <code>mem_bot_of_adjoin_simple_sub_bot</code>. I left a comment about it in the file</p>",
        "id": 211671406,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407341
    },
    {
        "content": "<p>2) We're missing a bunch of useful little lemmas like <code>ext_iff</code> and <code>eq_top_iff</code> etc for <code>intermediate_field</code> that we had for <code>subalgebra</code>. I think we should consider proving some of them.</p>",
        "id": 211671515,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407392
    },
    {
        "content": "<p>3) For some reason, previously Lean was able to figure out on its own that if <code>E</code> is finite dimensional over <code>F</code> then so is <code>F(x)</code> but now that <code>F(x)</code> is an <code>intermediate_field</code> it can't. I think this has something to do with the coercion from <code>subalgebra</code> to <code>intermediate_field</code></p>",
        "id": 211671742,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407491
    },
    {
        "content": "<p>4) I started to fix the problems in <code>primitive_element</code>. It doesn't look too bad but the proof of <code>primitive_element_two_inf</code> might require some work</p>",
        "id": 211671787,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I just pushed a change to the old galois theory repo to contribute a little bit to <code>degree_of_simple_extension.lean</code>. I left a long-ish comment in the source code, but let me say a little bit here too:</p>",
        "id": 211672021,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407630
    },
    {
        "content": "<p>1) I think the theorem that the dimension of <code>F[x]/p</code> is equal to the degree of <code>p</code> can be proved for all nonzero <code>p</code> (not just ones which are the minimal polynomial of something) so we should probably do that</p>",
        "id": 211672162,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407696
    },
    {
        "content": "<p>2) I left a comment in the source code about one strategy to do this that doesn't use bases (although it's not really fundamentally any different). Basically, I think it might be best to construct a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mrow><mtext>deg </mtext><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">F^{\\text{deg } p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">deg </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> and then show it's an isomorphism</p>",
        "id": 211672334,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407799
    },
    {
        "content": "<p>3) I tried asking in the <code>Is_there_code_for_X</code> stream about whether stuff like this is already in mathlib and nobody answered <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> . But as Jordan said last week, I don't think it is</p>",
        "id": 211672503,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407857
    },
    {
        "content": "<p>Also, as long as the theorem that the dimension of <code>F[x]/p</code> is equal to the degree of <code>p</code> is really not in mathlib, I think it would make a nice self-contained PR to mathlib</p>",
        "id": 211672748,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601407972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211672334\">said</a>:</p>\n<blockquote>\n<p>2) I left a comment in the source code about one strategy to do this that doesn't use bases (although it's not really fundamentally any different). Basically, I think it might be best to construct a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mrow><mtext>deg </mtext><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">F^{\\text{deg } p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">deg </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> and then show it's an isomorphism</p>\n</blockquote>\n<p>Surely monic polynomials have a division / remainder algorithm? This is what you need I guess.</p>",
        "id": 211673250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601408223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211673250\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211672334\">said</a>:</p>\n<blockquote>\n<p>2) I left a comment in the source code about one strategy to do this that doesn't use bases (although it's not really fundamentally any different). Basically, I think it might be best to construct a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mrow><mtext>deg </mtext><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">F^{\\text{deg } p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">deg </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">F[x]/p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> and then show it's an isomorphism</p>\n</blockquote>\n<p>Surely monic polynomials have a division / remainder algorithm? This is what you need I guess.</p>\n</blockquote>\n<p>Yeah, that should go into the proof that the map is surjective.</p>",
        "id": 211674641,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601408883
    },
    {
        "content": "<p>There's <code>div</code> and <code>mod</code> in <code>data.polynomial.field_division</code></p>",
        "id": 211674825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601408962
    },
    {
        "content": "<p>But first I need to actually learn how quotients work in Lean/mathlib to even know the best way to construct the map</p>",
        "id": 211674880,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601408990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211674825\">said</a>:</p>\n<blockquote>\n<p>There's <code>div</code> and <code>mod</code> in <code>data.polynomial.field_division</code></p>\n</blockquote>\n<p>Yeah, that stuff got used in the proof of the primitive element theorem</p>",
        "id": 211674963,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601409017
    },
    {
        "content": "<p>This is the theory for all polys over fields; what you really want is something for monic polys over any comm ring; the quotient R[x]/(p) is free rank deg(p).</p>",
        "id": 211675265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409175
    },
    {
        "content": "<p>aah there's <code>mod_by_monic</code> in <code>data.polynomial.div</code></p>",
        "id": 211675399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409244
    },
    {
        "content": "<p><code>div_mod_by_monic_unique</code> is injectivity of the map from (deg &lt; deg(p)) and surjectivity comes from <code>mod_by_monic_add_div</code></p>",
        "id": 211675675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409386
    },
    {
        "content": "<p>linearity should be easy and now hopefully the library can take it from there</p>",
        "id": 211675707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601409403
    },
    {
        "content": "<p>one thing that's causing some headaches is that there is a partial order defined in intermediate_field.lean, but there is also a partial order coming from the lattice stuff in adjoin.lean</p>",
        "id": 211690227,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601416768
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211690278,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601416803
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211690421,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601416867
    },
    {
        "content": "<p>the issue is that when I try to apply a result like eq_bot_iff, lean seems to have trouble reconciling the partial order defined in intermediate_field.lean with the partial order from the lattice</p>",
        "id": 211690762,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417043
    },
    {
        "content": "<p>Here's a fun error message</p>",
        "id": 211691031,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417177
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_bot_iff.mpr</span> <span class=\"n\">adjoin_le_bot</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">adjoin_le_bot</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.partial_order</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot.bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.has_bot</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot.to_partial_order</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.bounded_lattice</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_bot.bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot.to_has_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.bounded_lattice</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 211691044,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417184
    },
    {
        "content": "<p>produced by the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">adjoin_le_bot</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq_bot_iff</span> <span class=\"o\">(</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">adjoin_le_bot</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 211691148,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601417264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211690762\">said</a>:</p>\n<blockquote>\n<p>the issue is that when I try to apply a result like eq_bot_iff, lean seems to have trouble reconciling the partial order defined in intermediate_field.lean with the partial order from the lattice</p>\n</blockquote>\n<p>Maybe we need to prove they're equal?</p>",
        "id": 211693063,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601418499
    },
    {
        "content": "<p>The weird thing is that the lattice is defined from the partial order defined in intermediate_field.lean</p>",
        "id": 211695791,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601420563
    },
    {
        "content": "<p>ok, I found the issue. There was another bot instance, another top instance, and another bounded_lattice instance that were conflicting with the main complete_lattice instance.</p>",
        "id": 211700571,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601424308
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211700917,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601424543
    },
    {
        "content": "<p>There shouldn't be any diamonds in mathlib and this sounds like a diamond</p>",
        "id": 211735647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601458570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211735647\">said</a>:</p>\n<blockquote>\n<p>There shouldn't be any diamonds in mathlib and this sounds like a diamond</p>\n</blockquote>\n<p>Which part sounds like a diamond?</p>",
        "id": 211789684,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601484883
    },
    {
        "content": "<p>Also is the ban on diamonds by convention or by law (i.e. part of the rules of Lean)?</p>",
        "id": 211789769,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601484924
    },
    {
        "content": "<p>The only time I've seen it mentioned before was in Thomas Hales' blog post on Lean</p>",
        "id": 211789805,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601484943
    },
    {
        "content": "<p>It's a convention. But without it you land in a swamp that you really don't want to get into</p>",
        "id": 211791041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601485532
    },
    {
        "content": "<p>If you have two non defeq partial orders then that's a great example of a diamond</p>",
        "id": 211800836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601490307
    },
    {
        "content": "<p>If mathlib made both of those partial orders then people will want to know about it</p>",
        "id": 211800860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601490325
    },
    {
        "content": "<p>Oh wait, I think I understand what's happening. Anne pointed us to some work they had already done refactoring <code>adjoin.lean</code> which included proving that <code>field.adjoin</code> gives an adjunction. I included this in our version of <code>field_theory/adjoin</code> but Thomas had also already added a proof that <code>field.adjoin</code> forms a galois connection. Both of those things give instances of <code>bounded_lattice</code> I guess.</p>",
        "id": 211804515,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601492127
    },
    {
        "content": "<p>Not sure what the right solution is though</p>",
        "id": 211804562,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601492157
    },
    {
        "content": "<p>If both <code>bounded_lattice</code> instances are equal, can you delete a less-general one?</p>",
        "id": 211807279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601493502
    },
    {
        "content": "<p>Wait, actually I might be wrong. There seems to be a <code>bounded_lattice</code> instance hanging around in <code>intermediate_field.lean</code> for some reason with no proof (only a sorry). So maybe this was a simple oversight.</p>",
        "id": 211812685,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496217
    },
    {
        "content": "<p>The adjunction is probably fine.</p>",
        "id": 211812714,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> actually the proof of <code>primitive_element_inf_aux</code> turned out to be really easy to fix. I just had to add <code>.to_subalgebra</code> in one place</p>",
        "id": 211812949,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496351
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211813809,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211812685\">said</a>:</p>\n<blockquote>\n<p>Wait, actually I might be wrong. There seems to be a <code>bounded_lattice</code> instance hanging around in <code>intermediate_field.lean</code> for some reason with no proof (only a sorry). So maybe this was a simple oversight.</p>\n</blockquote>\n<p>Oh, it looks like Thomas already took care of this yesterday</p>",
        "id": 211813860,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I think the main thing to do now to get everything to compile is to prove that the bottom and top intermediate_fields are equal to the bottom and top subalgebras</p>",
        "id": 211813977,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496845
    },
    {
        "content": "<p>and then figure out how to get Lean to infer that an intermediate field is finite dimensional if the entire field extension is</p>",
        "id": 211814040,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496885
    },
    {
        "content": "<p>If one of your definitions of &lt;= was \"sorry\" then no wonder Lean was finding it hard to work with :-)</p>",
        "id": 211814054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601496894
    },
    {
        "content": "<p>Yeah, I just didn't even realize that line was there. And it looks like Thomas actually removed it yesterday</p>",
        "id": 211814093,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496921
    },
    {
        "content": "<p>I just hadn't pulled any changes since then</p>",
        "id": 211814116,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601496932
    },
    {
        "content": "<p>yeah, I think that the issue is resolved now</p>",
        "id": 211814675,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601497162
    },
    {
        "content": "<p>and there was a sorried lattice instance (which I might have been responsible for... oops)</p>",
        "id": 211814739,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601497192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/211813977\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> I think the main thing to do now to get everything to compile is to prove that the bottom and top intermediate_fields are equal to the bottom and top subalgebras</p>\n</blockquote>\n<p>I proved a few lemmas along these lines.</p>",
        "id": 211851647,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601507650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I've fixed the remaining issues, so the branch is ready to pull. Is there anything else that you or I should take a look at before making the PR?</p>",
        "id": 212148817,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601692527
    },
    {
        "content": "<p>Here's one thing: If <code>(K : intermediate_field F E)</code> then should we add coersions (or lift?) from <code>intermediate_field F K</code> and <code>intermediate_field K E</code> to <code>intermediate_field F E</code>?</p>",
        "id": 212184480,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601750381
    },
    {
        "content": "<p>Are the corresponding coercions there for eg submonoid?</p>",
        "id": 212188330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601756628
    },
    {
        "content": "<p>Maybe subalgebra is a better question</p>",
        "id": 212188371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601756656
    },
    {
        "content": "<p>I'm not sure whether or not they are there, but I added them for intermediate_field and it seemed to clean up some stuff.</p>",
        "id": 212247043,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601854793
    },
    {
        "content": "<p>In particular, the end of the proof of the primitive element theorem got a little easier (now working directly with intermediate_fields rather than their carriers)</p>",
        "id": 212247096,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601854837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Is there anything else you want done before the PR?</p>",
        "id": 212247243,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601855132
    },
    {
        "content": "<p>I proved the general induction result, although the proof turned out to be longer than I expected.</p>",
        "id": 212269524,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1601885376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Sorry I've been incommunicado the past couple days. I'll take a look at it on Monday and make any changes I think should be made. If for some reason I still haven't responded by the end of the day on Monday, feel free to just go ahead and make the PR</p>",
        "id": 212270798,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601886251
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4468\">#4468</a></p>",
        "id": 212452718,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1602001768
    },
    {
        "content": "<p>Unfortunately there's a merge conflict in algebra.lean</p>",
        "id": 212452747,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1602001785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I just pushed some changes. Defining an explicit inverse seems a little tricky, but we can just do injectivity and surjectivity manually. Surjectivity will require doing stuff with mods.</p>",
        "id": 212884143,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1602284297
    },
    {
        "content": "<p>What was the problem with defining an inverse?</p>",
        "id": 212892958,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1602293282
    },
    {
        "content": "<p>it just seems a little tricky to write down a function that takes a lift and takes it mod p</p>",
        "id": 212895547,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1602298440
    },
    {
        "content": "<p>Is there an easy way to get Lean to see that <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a> is surjective? It's an ideal quotients, and mathlib has that ideal quotients are surjective, but for some reason I can't get Lean to realize that that applies to <a href=\"http://adjoin_root.mk\">adjoin_root.mk</a></p>",
        "id": 213350297,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1602709402
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">surjective</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root.mk</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ideal.quotient.mk_surjective</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213354993,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1602712350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> so you should be able to just use <code>ideal.quotient.mk_surjective</code> as is</p>",
        "id": 213355023,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1602712396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> We are actually very close to the Galois correspondence. I think that the last big ingredient that we need is this:<br>\nIf E/K is finite Galois (i.e., finite, normal, and separable) then [E:K] = |Aut(E/K)|. This should follow from the primitive element theorem + Jordan's isomorphism (both sides are equal to the degree of the minimal polynomial of the primitive element).</p>",
        "id": 214107957,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603310983
    },
    {
        "content": "<p>oh wow, I always prove this in lectures by counting, and then deduce the primitive element theorem from it.</p>",
        "id": 214109153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603311524
    },
    {
        "content": "<p>This would be a very cool milestone</p>",
        "id": 214109228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603311566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214107957\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> We are actually very close to the Galois correspondence. I think that the last big ingredient that we need is this:<br>\nIf E/K is finite Galois (i.e., finite, normal, and separable) then [E:K] = |Aut(E/K)|. This should follow from the primitive element theorem + Jordan's isomorphism (both sides are equal to the degree of the minimal polynomial of the primitive element).</p>\n</blockquote>\n<p>Oh, wow, nice. I just submitted my nsf application, so I should actually have some time to work on this again</p>",
        "id": 214114686,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603314309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I just pushed a change to the galois theory repo which finishes the surjectivity proof and cleans it up a little bit (see <code>module_map_sujective'</code>). It turns out that mathlib does already contain a lemma saying that  if <code>p</code> is nonzero then <code>q % p</code> has lower degree than <code>p</code> (it's called <code>euclidean_domain.mod_lt</code>, as I learned from Heather Macbeth in the <code>Is there code for X</code> stream). Also the lemma only needs the assumption that <code>p</code> is nonzero, not that it is non-constant.</p>",
        "id": 214465873,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603597063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <code>adjoin_root_equiv_adjoin_simple</code> looks kind of scary somehow</p>",
        "id": 214466439,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603598002
    },
    {
        "content": "<p>So many <code>@</code>s</p>",
        "id": 214466443,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603598022
    },
    {
        "content": "<p>I'm going to work on <code>findim_adjoin_integral</code> either tonight or tomorrow morning</p>",
        "id": 214466504,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603598096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214466439\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <code>adjoin_root_equiv_adjoin_simple</code> looks kind of scary somehow</p>\n</blockquote>\n<p>You don't say...<br>\nActually, it's not that bad.<br>\nThose <code>@</code>'s are just because I wasn't able to get Lean to automatically use the assumption <code>h : is_integral F α</code>.<br>\nIf you can figure out how to get Lean to do this automatically, let me know.</p>",
        "id": 214480649,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603619521
    },
    {
        "content": "<p>They're gone: <a href=\"https://github.com/leanprover-community/mathlib/commit/f3bce8782b23c50d553bed41819ac8df1f336a40\">https://github.com/leanprover-community/mathlib/commit/f3bce8782b23c50d553bed41819ac8df1f336a40</a></p>",
        "id": 214490623,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603633987
    },
    {
        "content": "<p>Minor bad news: We can't use lagrange.fun_equiv_degree_lt because it requires the finset to be of elements of the field, so we'll run into trouble if the field is finite.</p>",
        "id": 214500103,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603645573
    },
    {
        "content": "<p>so we need another way of showing that <code>polynomial.degree_lt K n</code> has findim equal to n</p>",
        "id": 214500199,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603645697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214466504\">said</a>:</p>\n<blockquote>\n<p>I'm going to work on <code>findim_adjoin_integral</code> either tonight or tomorrow morning</p>\n</blockquote>\n<p>It's all finished except for the annoying findim of degree_lt.</p>",
        "id": 214502509,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603648269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214500103\">said</a>:</p>\n<blockquote>\n<p>Minor bad news: We can't use lagrange.fun_equiv_degree_lt because it requires the finset to be of elements of the field, so we'll run into trouble if the field is finite.</p>\n</blockquote>\n<p>What's the problem here?</p>",
        "id": 214502829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603648569
    },
    {
        "content": "<p>Well, <code>lagrange.fun_equiv_degree_lt</code> states that for any finset <code>s : finset F</code>, there is an isomorphism <code>degree_lt F s.card ≃ₗ[F] ((↑s : set F) → F)</code></p>",
        "id": 214503064,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603648810
    },
    {
        "content": "<p>this is great, except that if <code>F</code> is finite then we can't necessarily choose an <code>s : finset F</code> of cardinality <code>n</code></p>",
        "id": 214503091,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603648866
    },
    {
        "content": "<p>We're trying to show this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">temp_inst</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">polynomial.degree_lt</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">temp_lem</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional.findim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">polynomial.degree_lt</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 214503541,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603649352
    },
    {
        "content": "<p><code>fun_equiv_degree_lt</code> is somehow not the correct theorem, is it! s could be any finite subset of anything.</p>",
        "id": 214503880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603649751
    },
    {
        "content": "<p>I see -- this is a very explicit map coming from evaluation and using the fact that F is a field.</p>",
        "id": 214503976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603649844
    },
    {
        "content": "<p>Yeah, but you're right that it should be true for any finset s (of any Type)</p>",
        "id": 214504040,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603649910
    },
    {
        "content": "<p><code>degree_lt_eq_span_X_pow</code> is what you want</p>",
        "id": 214504053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603649932
    },
    {
        "content": "<p>in ring_theory.polynomial.basic</p>",
        "id": 214504066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603649948
    },
    {
        "content": "<p>I saw that, but do we know that they are linearly independent?</p>",
        "id": 214504068,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603649951
    },
    {
        "content": "<p>that'll be another lemma</p>",
        "id": 214504090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603649977
    },
    {
        "content": "<p>\"a polynomial is zero iff all its coefficients are zero\"</p>",
        "id": 214504101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603649989
    },
    {
        "content": "<p>but I agree that there's work to do here</p>",
        "id": 214504184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603650051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> You haven't added <code>module_map</code> from the <code>galois_theory</code> repo anywhere right?</p>",
        "id": 214513980,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603661900
    },
    {
        "content": "<p>At least I don't see it in any of the changes you've pushed</p>",
        "id": 214513987,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603661914
    },
    {
        "content": "<p>it should be in adjoin_root.lean</p>",
        "id": 214514959,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603663110
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/galois_definition/src/ring_theory/adjoin_root.lean\">https://github.com/leanprover-community/mathlib/blob/galois_definition/src/ring_theory/adjoin_root.lean</a></p>",
        "id": 214514980,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603663150
    },
    {
        "content": "<p>oh, I see it</p>",
        "id": 214515506,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603663854
    },
    {
        "content": "<p>I've been refactoring that a little bit so I'm going to change it soon</p>",
        "id": 214515512,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603663868
    },
    {
        "content": "<p>cool</p>",
        "id": 214515676,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603664087
    },
    {
        "content": "<p>I've almost proved the two sorries, so don't mess with those just yet</p>",
        "id": 214515688,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603664109
    },
    {
        "content": "<p>actually, let me just push what I have now</p>",
        "id": 214515696,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603664126
    },
    {
        "content": "<p>pushed</p>",
        "id": 214515706,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603664154
    },
    {
        "content": "<p>Okay, now I pushed</p>",
        "id": 214516442,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603665067
    },
    {
        "content": "<p>I'll look at what you did in a sec</p>",
        "id": 214516449,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603665075
    },
    {
        "content": "<p>do you think we should give <code>degree_lt_linear_map</code> a different name?</p>",
        "id": 214516456,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603665099
    },
    {
        "content": "<p>also I think it might make sense to combine the injectivity and surjectivity proofs into one big proof</p>",
        "id": 214516482,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603665124
    },
    {
        "content": "<p>that seems reasonable</p>",
        "id": 214517607,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603666730
    },
    {
        "content": "<p>the linter is not very happy btw</p>",
        "id": 214518193,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667536
    },
    {
        "content": "<p>where should all the temp stuff go?</p>",
        "id": 214518209,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603667573
    },
    {
        "content": "<p>why did you decide to define a new map? Why not just prove that the obvious basis for <code>degree_lt</code> is really a basis since half of it has already been done?</p>",
        "id": 214518217,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667595
    },
    {
        "content": "<p>and it looks like injectivity was the easier part anyway and that corresponds the proving linear independence, which is the part that hasn't been done yet</p>",
        "id": 214518229,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667629
    },
    {
        "content": "<p>well, proving the basis seemed rather hard</p>",
        "id": 214518278,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603667661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214518209\">said</a>:</p>\n<blockquote>\n<p>where should all the temp stuff go?</p>\n</blockquote>\n<p>hmm, not sure. Most stuff about <code>degree_lt</code> seems to be in <code>ring_theory.polynomial.basic</code> so maybe there</p>",
        "id": 214518290,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667696
    },
    {
        "content": "<p>the linter is mostly unhappy that documentation is missing but it also doesn't like <code>f \\ne 0</code> as a hypothesis of an instance</p>",
        "id": 214518316,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667743
    },
    {
        "content": "<p>maybe the <code>finite_dimensional</code> instance should just be a lemma?</p>",
        "id": 214518320,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667760
    },
    {
        "content": "<p>where is the <code>f \\ne 0</code> hypothesis?</p>",
        "id": 214518365,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603667775
    },
    {
        "content": "<p>oh I see</p>",
        "id": 214518374,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603667799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_equiv.finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">degree_lt_linear_equiv</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214518376,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667802
    },
    {
        "content": "<p>yeah, that could be lemma</p>",
        "id": 214518378,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603667805
    },
    {
        "content": "<p>it's actually probably possible to remove the hypothesis too</p>",
        "id": 214518383,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667814
    },
    {
        "content": "<p>it's not true for f=0 is it?</p>",
        "id": 214518395,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603667828
    },
    {
        "content": "<p>I don't know what <code>adjoin_root 0</code> does but it probably is finite dimensional</p>",
        "id": 214518400,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667837
    },
    {
        "content": "<p>Depends on how lean defined things!</p>",
        "id": 214518403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603667840
    },
    {
        "content": "<p>But I bet it just adds 37</p>",
        "id": 214518408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603667846
    },
    {
        "content": "<p>wouldn't it be the quotient by the zero ideal?</p>",
        "id": 214518409,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603667847
    },
    {
        "content": "<p>oh maybe</p>",
        "id": 214518422,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667874
    },
    {
        "content": "<p>you're probably right</p>",
        "id": 214518465,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667887
    },
    {
        "content": "<p>oh well</p>",
        "id": 214518467,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667892
    },
    {
        "content": "<p>I'm on mobile but am now very interested :-)</p>",
        "id": 214518473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603667908
    },
    {
        "content": "<p>If f is reducible what does it add?</p>",
        "id": 214518477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603667920
    },
    {
        "content": "<p>?</p>",
        "id": 214518479,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214518477\">said</a>:</p>\n<blockquote>\n<p>If f is reducible what does it add?</p>\n</blockquote>\n<p>what do you mean by add?</p>",
        "id": 214518488,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603667942
    },
    {
        "content": "<p>I just didn't know the definition. I've looked now and disappointingly it does just quotient out by (f)</p>",
        "id": 214518570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603668037
    },
    {
        "content": "<p>So yes it looks like it's not true when f=0.</p>",
        "id": 214518581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603668063
    },
    {
        "content": "<p>If you're in a relative situation then I envisaged throwing in a random root of the big field into the small field and then you might have got away with it because 37 is a root of the zero polynomial</p>",
        "id": 214518601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603668113
    },
    {
        "content": "<p>yeah, in a sense I think the quotient by (0) is not the same as adjoining a root of 0</p>",
        "id": 214518726,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603668246
    },
    {
        "content": "<p>but it makes sense that it's defined this way</p>",
        "id": 214518733,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603668255
    },
    {
        "content": "<p>hmm, why is it so hard to work with bases in mathlib?</p>",
        "id": 214518836,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603668439
    },
    {
        "content": "<p>It's possible that if you know how to use them then it's fine, but I find them very hard to work with</p>",
        "id": 214518924,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603668578
    },
    {
        "content": "<p>yeah, somehow even defining the basis is getting annoying</p>",
        "id": 214519024,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603668701
    },
    {
        "content": "<p>because to know something is a member of <code>degree_lt K n</code> you need to know its degree is less than <code>n</code>. But if you just want to take the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1, \\ldots, n-1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> under <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>↦</mo><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">i \\mapsto x^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.67052em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> then you need to somehow know in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>↦</mo><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">i \\mapsto x^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.67052em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i &lt; n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></p>",
        "id": 214519110,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603668812
    },
    {
        "content": "<p>actually, it would be nice to have the following lemma (maybe it's already in mathlib?): if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is a subset of a vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> which happens to be linearly independent, contained in a subspace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> and span <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> then it's a basis for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> (after some appropriate coercion)</p>",
        "id": 214519276,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603668994
    },
    {
        "content": "<p>but I can't immediately find anything like that</p>",
        "id": 214519286,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603669012
    },
    {
        "content": "<p>Do you know how to finish off the last sorry?</p>",
        "id": 214519616,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603669504
    },
    {
        "content": "<p>lean knows that functions from a finset are finite_dimensional, so I assume that it also knows what the dimension is</p>",
        "id": 214519629,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603669534
    },
    {
        "content": "<p>yeah, I think it's <code>dim_fun</code></p>",
        "id": 214519957,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603669959
    },
    {
        "content": "<p>I can try finishing it off</p>",
        "id": 214519960,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603669964
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">findim</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional.findim</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">linear_equiv.findim_eq</span> <span class=\"o\">(((</span><span class=\"n\">polynomial.degree_lt_linear_equiv</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">f.nat_degree</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">degree_lt_linear_equiv</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">)),</span> <span class=\"n\">finite_dimensional.findim_fintype_fun_eq_card</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">fintype.card_coe</span><span class=\"o\">,</span> <span class=\"n\">finset.card_range</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 214520132,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603670201
    },
    {
        "content": "<p><code>findim_fintype_fun_eq_card</code> did the trick (thanks for telling me about <code>dim_fun</code>)</p>",
        "id": 214520160,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603670270
    },
    {
        "content": "<p>nice</p>",
        "id": 214520516,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603670761
    },
    {
        "content": "<p>is <code>linear_algebra.lagrange</code> still needed at the top of the file?</p>",
        "id": 214520648,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603670889
    },
    {
        "content": "<p>looks like it's not</p>",
        "id": 214520659,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603670911
    },
    {
        "content": "<p>oh, I guess not</p>",
        "id": 214520669,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603670924
    },
    {
        "content": "<p>should we include a bijection(either just an equiv or something more fancy) between subgroup and intermediate_field ?</p>",
        "id": 214520694,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603670968
    },
    {
        "content": "<p>I just pushed some changes adding documentation to make the linter happy</p>",
        "id": 214521062,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603671470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214520694\">said</a>:</p>\n<blockquote>\n<p>should we include a bijection(either just an equiv or something more fancy) between subgroup and intermediate_field ?</p>\n</blockquote>\n<p>You mean as part of the galois correspondence? Probably</p>",
        "id": 214521103,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603671492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Anything else you want to do before the PR?</p>",
        "id": 214522429,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603673524
    },
    {
        "content": "<p>do we need any namespaces?</p>",
        "id": 214522460,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603673563
    },
    {
        "content": "<p>for <code>field_theory/galois</code>? Probably should put it in some namespace.</p>",
        "id": 214522491,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603673638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214522429\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> Anything else you want to do before the PR?</p>\n</blockquote>\n<p>I think the linter is not happy with <code>galois.lean</code></p>",
        "id": 214522529,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603673651
    },
    {
        "content": "<p>even on the most recent push?</p>",
        "id": 214522543,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603673687
    },
    {
        "content": "<p>Three <code>def</code>s are missing documentation</p>",
        "id": 214522545,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603673692
    },
    {
        "content": "<p>yeah I think so</p>",
        "id": 214522547,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603673695
    },
    {
        "content": "<p>Try writing <code>#lint</code> at the bottom of the file</p>",
        "id": 214522557,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603673710
    },
    {
        "content": "<p>Ah</p>",
        "id": 214522558,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603673710
    },
    {
        "content": "<p>I'll take care of that</p>",
        "id": 214522561,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603673718
    },
    {
        "content": "<p>okay, cool. I also made a couple tiny changes to the documentation</p>",
        "id": 214522642,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603673861
    },
    {
        "content": "<p>so what does this PR add? Everything in <code>galois.lean</code> plus the changes to <code>adjoin_root</code>, <code>ring_theory.polynomial.basic</code> and <code>field_theory.adjoin</code>. Anything else?</p>",
        "id": 214522694,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603673910
    },
    {
        "content": "<p>there are some small changes to other files, but not much else</p>",
        "id": 214522870,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674171
    },
    {
        "content": "<p>I guess one major thing is that field adjoin is isomorphic to adjoin_root</p>",
        "id": 214522877,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674184
    },
    {
        "content": "<p>where was that? In <code>field_theory/adjoin.lean</code>?</p>",
        "id": 214522886,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674209
    },
    {
        "content": "<p>yeah</p>",
        "id": 214522887,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674211
    },
    {
        "content": "<p>are you drafting the PR?</p>",
        "id": 214522890,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674216
    },
    {
        "content": "<p>no</p>",
        "id": 214522893,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674227
    },
    {
        "content": "<p>should I?</p>",
        "id": 214522896,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214522890\">said</a>:</p>\n<blockquote>\n<p>are you drafting the PR?</p>\n</blockquote>\n<p>I was just trying to look over everything to see if there's anything that should obviously be changed before a PR</p>",
        "id": 214522944,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674259
    },
    {
        "content": "<p>should we make some namespaces first?</p>",
        "id": 214522951,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674273
    },
    {
        "content": "<p>yeah</p>",
        "id": 214522955,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--TODO: Maybe upgrade this to some sort of lattice anti-isomorphism?</span>\n</code></pre></div>\n\n<p>Do you want to leave this in?</p>",
        "id": 214522972,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674326
    },
    {
        "content": "<p>might as well, I don't know if mathlib has anti-isomorphisms yet?</p>",
        "id": 214522980,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674348
    },
    {
        "content": "<p>sure</p>",
        "id": 214523049,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674417
    },
    {
        "content": "<p>it does have antitone galois connections I think?</p>",
        "id": 214523057,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674428
    },
    {
        "content": "<p>is <code>galois</code> a reasonable namespace?</p>",
        "id": 214523064,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674439
    },
    {
        "content": "<p>sure</p>",
        "id": 214523074,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674465
    },
    {
        "content": "<p>should <code>is_galois</code> go in the namespace?</p>",
        "id": 214523080,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674479
    },
    {
        "content": "<p>oh, maybe not</p>",
        "id": 214523130,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674530
    },
    {
        "content": "<p>I'm not really sure how that works</p>",
        "id": 214523136,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674536
    },
    {
        "content": "<p>but judging off other files in mathlib, maybe not</p>",
        "id": 214523140,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523057\">said</a>:</p>\n<blockquote>\n<p>it does have antitone galois connections I think?</p>\n</blockquote>\n<p>Actually I'm not sure this is true</p>",
        "id": 214523151,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674571
    },
    {
        "content": "<p>I guess putting it all in a galois namespace is fine</p>",
        "id": 214523204,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603674606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523204\">said</a>:</p>\n<blockquote>\n<p>I guess putting it all in a galois namespace is fine</p>\n</blockquote>\n<p>You mean all of <code>galois.lean</code>? I do think that maybe certain things like classes don't always go into namespaces in mathlib, but I'm not really sure</p>",
        "id": 214523258,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674700
    },
    {
        "content": "<p>should I ask about antitone galois connections in one of the bigger streams on zulip?</p>",
        "id": 214523306,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523258\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523204\">said</a>:</p>\n<blockquote>\n<p>I guess putting it all in a galois namespace is fine</p>\n</blockquote>\n<p>You mean all of <code>galois.lean</code>? I do think that maybe certain things like classes don't always go into namespaces in mathlib, but I'm not really sure</p>\n</blockquote>\n<p>although I'm sure anything like that would also get fixed in the PR review process if there's a problem</p>",
        "id": 214523345,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603674822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523306\">said</a>:</p>\n<blockquote>\n<p>should I ask about antitone galois connections in one of the bigger streams on zulip?</p>\n</blockquote>\n<p>Sure, although isn't an order anti-isomorphism more appropriate, since a galois connection doesn't have to be a bijection?</p>",
        "id": 214524191,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603675979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523345\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523258\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523204\">said</a>:</p>\n<blockquote>\n<p>I guess putting it all in a galois namespace is fine</p>\n</blockquote>\n<p>You mean all of <code>galois.lean</code>? I do think that maybe certain things like classes don't always go into namespaces in mathlib, but I'm not really sure</p>\n</blockquote>\n<p>although I'm sure anything like that would also get fixed in the PR review process if there's a problem</p>\n</blockquote>\n<p>Good point.</p>",
        "id": 214524199,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603675989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214524191\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214523306\">said</a>:</p>\n<blockquote>\n<p>should I ask about antitone galois connections in one of the bigger streams on zulip?</p>\n</blockquote>\n<p>Sure, although isn't an order anti-isomorphism more appropriate, since a galois connection doesn't have to be a bijection?</p>\n</blockquote>\n<p>Yeah, that's true.</p>",
        "id": 214524466,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603676402
    },
    {
        "content": "<p>It just seems funny that the type of <code>galois_connection</code> that's in mathlib actually doesn't apply to the original galois correspondence</p>",
        "id": 214524512,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603676432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Looks like there's still a few missing docstrings: <a href=\"https://github.com/leanprover-community/mathlib/runs/1306429257\">https://github.com/leanprover-community/mathlib/runs/1306429257</a></p>",
        "id": 214525532,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603677833
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4786\">#4786</a></p>",
        "id": 214532576,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603687200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Isn't this backwards:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span> <span class=\"bp\">`</span><span class=\"n\">fixed_field</span> <span class=\"n\">K</span><span class=\"bp\">`</span> <span class=\"n\">where</span> <span class=\"bp\">`</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"bp\">`</span>\n<span class=\"bp\">-</span> <span class=\"bp\">`</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">H</span><span class=\"bp\">`</span> <span class=\"n\">where</span> <span class=\"bp\">`</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">`</span>\n</code></pre></div>\n\n<p>Like it should be <code>fixed_field H</code> and <code>fixing_subgroup K</code>?</p>",
        "id": 214536820,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603692988
    },
    {
        "content": "<p>oops, you're right</p>",
        "id": 214537352,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603693639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Congrats with this milestone!</p>",
        "id": 214542657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603698946
    },
    {
        "content": "<p>I think it would be good to split this into a bunch of smaller PRs</p>",
        "id": 214542685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603698963
    },
    {
        "content": "<p>This doesn't have to be a lot of work. If you want some help on how to do this with a bit of git, please let me know.</p>",
        "id": 214542726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603698981
    },
    {
        "content": "<p>I manually made a few of the splits that you suggested in the github conversation. The commits often spanned several files, and I wasn't able to figure out the fancy git way to split up the PR</p>",
        "id": 214602936,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603731774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 214602971,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603731787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I wouldn't reuse the existing git history. Rather, I would do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git checkout the-big-galois-branch <span class=\"c1\"># sorry, I didn't look up the name that you are using</span>\ngit checkout -b new-branch-name\ngit reset master <span class=\"c1\"># this has the effect that all changes of your project are now no longer commited</span>\ngit status <span class=\"c1\"># this will show you exactly which files have changes</span>\ngit add src/ring_theory/file_1.lean src/algebra/file_2.lean\ngit commit -am <span class=\"s2\">\"feat(*): some prerequisites for Galois\"</span>\ngit push\n</code></pre></div>",
        "id": 214603476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603731993
    },
    {
        "content": "<p>oooh, interesting</p>",
        "id": 214603722,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603732092
    },
    {
        "content": "<p>should I delete the other PR's then?</p>",
        "id": 214603733,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603732101
    },
    {
        "content": "<p>or rather, close them?</p>",
        "id": 214603858,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603732150
    },
    {
        "content": "<p>depends...</p>",
        "id": 214604181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603732294
    },
    {
        "content": "<p>I didn't look at them yet.</p>",
        "id": 214604200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603732302
    },
    {
        "content": "<p>If they are logical units, then I would just use those</p>",
        "id": 214604225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603732315
    },
    {
        "content": "<p>They are <a href=\"https://github.com/leanprover-community/mathlib/issues/4791\">#4791</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/4792\">#4792</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/4793\">#4793</a></p>",
        "id": 214604373,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603732369
    },
    {
        "content": "<p>From a first glance, I think you can leave those open</p>",
        "id": 214604389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603732376
    },
    {
        "content": "<p>And maybe use this approach to create some more PRs</p>",
        "id": 214604429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603732396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/214542657\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> Congrats with this milestone!</p>\n</blockquote>\n<p>Thomas did almost all the work for this one btw.</p>",
        "id": 214612133,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603735749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'm a little confused. The three smaller PR's have now been merged, but the galois_definition PR still seems to include the changes to those three files (in the \"Files changed\" tab on github), even after I ran <code>git merge master</code>.</p>",
        "id": 214992318,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603988898
    },
    {
        "content": "<p>Presumably there's a way to have the galois_definition PR no longer include changes to those three files?</p>",
        "id": 214992546,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603989000
    },
    {
        "content": "<p>Hmm weird. You sure you pushed after the <code>git merge</code>? (<span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>)</p>",
        "id": 215002721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603993346
    },
    {
        "content": "<p>I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">git</span> <span class=\"n\">pull</span> <span class=\"n\">master</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">galois_definition</span>\n<span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">master</span>\n<span class=\"n\">git</span> <span class=\"n\">push</span>\n</code></pre></div>",
        "id": 215002979,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603993463
    },
    {
        "content": "<p>(e.g., <a href=\"https://github.com/leanprover-community/mathlib/pull/4786/commits/29cc4970236ebb6654c95c50e5a6bd5017f33681\">https://github.com/leanprover-community/mathlib/pull/4786/commits/29cc4970236ebb6654c95c50e5a6bd5017f33681</a>)</p>",
        "id": 215003011,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603993484
    },
    {
        "content": "<p>Weird. Maybe someone else can help. I need to do other stuff atm</p>",
        "id": 215003056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603993508
    },
    {
        "content": "<p>I guess <code>git push</code> errored, right?</p>",
        "id": 215003216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603993568
    },
    {
        "content": "<p>It should have been <code>git push -f</code></p>",
        "id": 215003229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603993575
    },
    {
        "content": "<p>no, it didn't error</p>",
        "id": 215003376,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603993644
    },
    {
        "content": "<p>Doesn't the fact that the automatic check detected no merge conflicts with master show that the push was successful?</p>",
        "id": 215003423,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603993669
    },
    {
        "content": "<p>Do you want me to try?</p>",
        "id": 215003446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603993678
    },
    {
        "content": "<p>It would be a bit risky since I have no idea what you're doing</p>",
        "id": 215003574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603993724
    },
    {
        "content": "<p>you can go ahead and try</p>",
        "id": 215003975,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603993878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215003423\">said</a>:</p>\n<blockquote>\n<p>Doesn't the fact that the automatic check detected no merge conflicts with master show that the push was successful?</p>\n</blockquote>\n<p>I guess so, but there should be merge conflicts</p>",
        "id": 215004134,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603993926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215004134\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215003423\">said</a>:</p>\n<blockquote>\n<p>Doesn't the fact that the automatic check detected no merge conflicts with master show that the push was successful?</p>\n</blockquote>\n<p>I guess so, but there should be merge conflicts</p>\n</blockquote>\n<p>What do you mean? What I was trying to say is that the automatic check on all pull requests detected no merge conflicts, which seems to indicate that the latest commit does have all the changes from the other PRs. But I could be wrong.</p>",
        "id": 215004318,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994014
    },
    {
        "content": "<p>This is definitely conflict</p>",
        "id": 215004421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994047
    },
    {
        "content": "<p>I just did:</p>\n<ul>\n<li>git checkout master</li>\n<li>git pull</li>\n<li>git checkout galois-definition</li>\n<li>git rebase master</li>\n</ul>",
        "id": 215004482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994075
    },
    {
        "content": "<p>and I get a conflict in src/field_theory/adjoin.lean</p>",
        "id": 215004526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994093
    },
    {
        "content": "<p>ah, what's the definition between git merge and git rebase?</p>",
        "id": 215004635,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603994141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215004526\">said</a>:</p>\n<blockquote>\n<p>and I get a conflict in src/field_theory/adjoin.lean</p>\n</blockquote>\n<p>That's surprising because the three other PRs don't touch <code>field_theory/adjoin.lean</code></p>",
        "id": 215004760,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994186
    },
    {
        "content": "<p>IIRC there's a stackoverflow question called that with a gazillion votes</p>",
        "id": 215004774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603994194
    },
    {
        "content": "<p>I pushed something</p>",
        "id": 215004903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994260
    },
    {
        "content": "<p>As far as I know, the difference between merge and rebase is how the commit graph looks</p>",
        "id": 215004932,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994274
    },
    {
        "content": "<p>but I'm hardly a git guru</p>",
        "id": 215004985,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994284
    },
    {
        "content": "<p>Does it look better now?</p>",
        "id": 215005028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994303
    },
    {
        "content": "<p>It looks identical to me</p>",
        "id": 215005129,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994363
    },
    {
        "content": "<p>I think this may be just something to do with the way github displays changes made by a pull request. But I'm not sure</p>",
        "id": 215005175,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994386
    },
    {
        "content": "<p>Does it still show stuff as new whereas it's already in mathlib?</p>",
        "id": 215005182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994391
    },
    {
        "content": "<p>yes</p>",
        "id": 215005296,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994425
    },
    {
        "content": "<p>yeah. For a concrete example, mathlib now has equalizer (and also a mem_equalizer lemma)</p>",
        "id": 215005305,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603994435
    },
    {
        "content": "<p>so I wouldn't expect the PR to have any changes to subalgebra.lean</p>",
        "id": 215005324,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603994450
    },
    {
        "content": "<p>but also I detect no changes after what <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> just did</p>",
        "id": 215005384,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994494
    },
    {
        "content": "<p>It's surprisingly hard to find information on what github decides to display in the \"files changed\" tab on pull requests</p>",
        "id": 215005617,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994599
    },
    {
        "content": "<p>git got confused by moving stuff</p>",
        "id": 215005692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994642
    },
    {
        "content": "<p>The PR now duplicates this equalizer stuff</p>",
        "id": 215005737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994652
    },
    {
        "content": "<p>It got one from master and one from the PR</p>",
        "id": 215005752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994662
    },
    {
        "content": "<p>Git didn't see any conflict here: master after stuff at line 289 and galois-definition branch added the same stuff at line 260 and those were treated as two disjoint edits by git</p>",
        "id": 215005886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994731
    },
    {
        "content": "<p>So Patrick, if you still have the old galois-definition branch you should force push</p>",
        "id": 215005921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994753
    },
    {
        "content": "<p>(I mean before Thomas's attempted merge)</p>",
        "id": 215005994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994777
    },
    {
        "content": "<p>A lot more manual work will be needed</p>",
        "id": 215006009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994784
    },
    {
        "content": "<p>okay, let me look into it</p>",
        "id": 215006050,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215005737\">said</a>:</p>\n<blockquote>\n<p>The PR now duplicates this equalizer stuff</p>\n</blockquote>\n<p>okay, this all makes a lot more sense now</p>",
        "id": 215006245,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994915
    },
    {
        "content": "<p>Alternatively someone could fetch the branch as it sits now on GitHub and manually hunt down stuff that you know have been merged</p>",
        "id": 215006255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994922
    },
    {
        "content": "<p>I don't really see how git could have been smarter here, unless it learns about Galois theory.</p>",
        "id": 215006312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603994956
    },
    {
        "content": "<p>Would it have to worked to merge the branches from the other PRs instead of master?</p>",
        "id": 215006375,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603994994
    },
    {
        "content": "<p>it might be easiest to just delete stuff by hand</p>",
        "id": 215006530,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603995048
    },
    {
        "content": "<p>No, git would still have compared the content of the other PRs with the content of galois-definition and see no conflict in this equalizer stuff for instance</p>",
        "id": 215006583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603995077
    },
    {
        "content": "<p>What if the other PRs were from branches that shared a common commit with this branch?</p>",
        "id": 215006803,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603995172
    },
    {
        "content": "<p>Oh, yes that would help</p>",
        "id": 215007109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603995300
    },
    {
        "content": "<p>Although I'm not sure that's the case here.</p>",
        "id": 215007239,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603995363
    },
    {
        "content": "<p>And now those other branches are deleted because the PRs were merged</p>",
        "id": 215007298,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603995376
    },
    {
        "content": "<p>Life is difficult.</p>",
        "id": 215007354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603995404
    },
    {
        "content": "<p>I mean in this case it shouldn't be too difficult to do by hand</p>",
        "id": 215007422,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603995435
    },
    {
        "content": "<p>but if there's a better way it would be nice to figure it out</p>",
        "id": 215007446,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603995451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215007298\">said</a>:</p>\n<blockquote>\n<p>And now those other branches are deleted because the PRs were merged</p>\n</blockquote>\n<p>They still exist on github under <code>refs/pull/1234</code> (where <code>1234</code> is the PR number)</p>",
        "id": 215007598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603995522
    },
    {
        "content": "<p>hmm, but I think they don't share commits in common with the <code>galois_definition</code> branch</p>",
        "id": 215008778,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603996059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, this is only a problem for <a href=\"https://github.com/leanprover-community/mathlib/issues/4791\">#4791</a> right? The stuff in the other two PRs is not duplicated?</p>",
        "id": 215009196,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603996252
    },
    {
        "content": "<p>nope, it's also a problem for finite_dimensional.lean</p>",
        "id": 215010559,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603996975
    },
    {
        "content": "<p>algebra_equiv_equiv_algebra_hom is duplicated</p>",
        "id": 215010571,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603996989
    },
    {
        "content": "<p>okay, but not for <code>degree_lt_iff_coeff_zero</code> right?</p>",
        "id": 215010710,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603997066
    },
    {
        "content": "<p>not sure</p>",
        "id": 215011306,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997351
    },
    {
        "content": "<p>okay, I'll double check</p>",
        "id": 215011507,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603997442
    },
    {
        "content": "<p>that one looks fine</p>",
        "id": 215011836,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997594
    },
    {
        "content": "<p>I just pushed some commits where I removed some redundant stuff</p>",
        "id": 215011872,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997613
    },
    {
        "content": "<p>Oh, I was also about to push a commit doing that. I pushed it anyway because it also fixed a typo I noticed</p>",
        "id": 215012042,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603997691
    },
    {
        "content": "<p>\"removing duplicates created by merge\": Removes duplicate \"i\"</p>",
        "id": 215012091,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997716
    },
    {
        "content": "<p>lol</p>",
        "id": 215012098,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997720
    },
    {
        "content": "<p>I ran <code>git diff</code> on the files <code>algebra/algebra/subalgebra.lean</code>, <code>linear_algebra/finite_dimensional.lean</code> and <code>data/polynomial/degree/basic.lean</code> comparing them between the <code>galois_definition</code> branch and <code>master</code> and there were no differences (besides the fixed typo). So if those were the only files changed in the other commits then I think everything is fine</p>",
        "id": 215012219,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603997773
    },
    {
        "content": "<p>they were</p>",
        "id": 215012267,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997802
    },
    {
        "content": "<p>we might need to change other files that use those three results</p>",
        "id": 215012280,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997815
    },
    {
        "content": "<p>since some namespaces got changed</p>",
        "id": 215012290,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603997820
    },
    {
        "content": "<p>oh good point. But I guess that would have happened regardless</p>",
        "id": 215012353,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603997862
    },
    {
        "content": "<p>I actually had to turn off the automatic checking in VS Code to edit this since it was causing my computer to crash (from trying to compile large parts of mathlib I guess)</p>",
        "id": 215012593,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603997979
    },
    {
        "content": "<p>right now I can't edit anything until I can pull the oleans from github (once the compliation finishes)</p>",
        "id": 215012789,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603998061
    },
    {
        "content": "<p>or rather, I can edit stuff but I can't see whether it worked or not</p>",
        "id": 215012945,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603998126
    },
    {
        "content": "<p>I'm trying to do it right now</p>",
        "id": 215013005,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603998170
    },
    {
        "content": "<p>Okay, I tried pushing a commit that makes those changes. I guess we'll find out if it worked once it finishes compiling</p>",
        "id": 215015129,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1603999100
    },
    {
        "content": "<p>hmm, something else has broken somehow. Lean doesn't know about <code>adjoin_le_algebra_adjoin</code></p>",
        "id": 215017269,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604000199
    },
    {
        "content": "<p>hmm, this worries me a lot</p>",
        "id": 215017875,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604000522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I fixed it.</p>",
        "id": 215018709,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604001000
    },
    {
        "content": "<p>but do you know how it happened?</p>",
        "id": 215018767,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604001013
    },
    {
        "content": "<p>That lemma got renamed to adjoin_eq_algebra_adjoin at some point</p>",
        "id": 215018771,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604001017
    },
    {
        "content": "<p>but wasn't everything compiling recently?</p>",
        "id": 215018796,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604001031
    },
    {
        "content": "<p>was it renamed in the last day?</p>",
        "id": 215018807,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604001039
    },
    {
        "content": "<p>oh huh</p>",
        "id": 215018814,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604001043
    },
    {
        "content": "<p>not sure</p>",
        "id": 215018821,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604001046
    },
    {
        "content": "<p>maybe the rebase did something?</p>",
        "id": 215018831,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604001051
    },
    {
        "content": "<p>Yeah, I'm a little confused what's going on</p>",
        "id": 215018873,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604001070
    },
    {
        "content": "<p>hmm, somehow nothing else seems to have changed</p>",
        "id": 215022074,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604002745
    },
    {
        "content": "<p>as far as I can tell, the <code>adjoin_le_algebra_adjoin</code> thing is the only thing that got messed up</p>",
        "id": 215022107,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604002765
    },
    {
        "content": "<p>but I can't figure out how what Patrick did caused that to mess up but nothing else</p>",
        "id": 215022182,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604002797
    },
    {
        "content": "<p>I assume it's because of the use of force push but I'm still confused</p>",
        "id": 215022389,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604002889
    },
    {
        "content": "<p>Hey, please let me know if you need more (git) help.</p>",
        "id": 215057777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604034999
    },
    {
        "content": "<p>I think we got it all cleaned up, thanks though</p>",
        "id": 215057844,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604035135
    },
    {
        "content": "<p>I left a review on github, copying it here:</p>\n<blockquote>\n<p>Thanks for splitting of those 3 PRs. As you may have noticed, those small PRs get quite a bit of feedback, and they aren't merged immediately. The process is slow. I understand that this might feel frustrating at times. But the end product will have a much higher quality.<br>\nHaving all those small discussions in one big PR would lead to a lot of confusion (or it will just not happen at all, which isn't desirable.)<br>\nIdeally, everything that doesn't belong to the actual galois file (and the 1-line change in overview.yaml) should be done in separate PRs.</p>\n<p>I hope and expect that you will have less git troubles next time.</p>\n</blockquote>",
        "id": 215058959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604036889
    },
    {
        "content": "<p>Concerning git: I guess if you <code>git merge helper-PR</code> into the <code>galois-branch</code> everytime you process feedback on one of the helper PRs, then the confusion might not happen. (You might get merge conflicts, but it will be easy to fix them. But probably you won't even get merge conflicts.)</p>",
        "id": 215058981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604036974
    },
    {
        "content": "<p>How do I handle PRs that depend on each other? For example, the changes to adjoin.lean depend on the changes to adjoin_root.lean which depend on the changes to ring_theory/polynomial/basic.lean</p>",
        "id": 215060000,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604038799
    },
    {
        "content": "<p>The PR that depends on a smaller one can include the changes from the small one.</p>",
        "id": 215060714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604039865
    },
    {
        "content": "<p>I guess if you don't, then CI will throw a bunch of errors.</p>",
        "id": 215060718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604039880
    },
    {
        "content": "<p>I wish github was better at handling this... and only show the diff with the dependent PR. (It can do that, but it has the very bad side-effect of deleting the big PR once the smaller PR is merged. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <span aria-label=\"crying cat\" class=\"emoji emoji-1f63f\" role=\"img\" title=\"crying cat\">:crying_cat:</span> )</p>",
        "id": 215060778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604039944
    },
    {
        "content": "<p>Do you have any plans to follow this up with work on solvable extensions? If you can prove the insolvability of a generic quintic, that would be worth a really nice paper I think. It hasn't been done before in any other library.</p>",
        "id": 215063605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604043734
    },
    {
        "content": "<p>Honestly, I hadn't thought that far ahead. I guess we'll discuss our plans at the meeting tomorrow.</p>",
        "id": 215064226,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604044512
    },
    {
        "content": "<p>Quintic hasn't been done in <em>any</em> theorem prover??</p>",
        "id": 215065647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604045964
    },
    {
        "content": "<p>It's still open on Freek's list</p>",
        "id": 215065875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604046174
    },
    {
        "content": "<p>I had it in my head that it was just silly things like FLT which were still open.</p>",
        "id": 215065915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604046236
    },
    {
        "content": "<p>That's very much an accessible goal for us now</p>",
        "id": 215065940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604046257
    },
    {
        "content": "<p><code>16. Insolvability of General Higher Degree Equations</code></p>",
        "id": 215066034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604046346
    },
    {
        "content": "<p>We're going to go for it!</p>",
        "id": 215152694,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604093266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> The PR's now have<br>\n<code>noncomputable def alg_hom_adjoin_integral_equiv : (F⟮α⟯ →ₐ[F] K) ≃ (↑((minimal_polynomial h).map (algebra_map F K)).roots.to_finset : set K)</code><br>\nI think this is all we need (+ the modified induction lemma)?</p>",
        "id": 215166596,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604105841
    },
    {
        "content": "<p>wow, fast work</p>",
        "id": 215170451,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604112134
    },
    {
        "content": "<p>well, we basically already had that result, except with the K's replaced by F(a).</p>",
        "id": 215171269,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604113912
    },
    {
        "content": "<p>I just merged <code>abel-ruffini</code> with <code>galois_definition</code> to incorporate that change</p>",
        "id": 215172809,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604116876
    },
    {
        "content": "<p>what would be the best way to state that the commutator of normal subgroups is normal?</p>",
        "id": 215173405,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604117953
    },
    {
        "content": "<p>as an instance of normal_subgroup?</p>",
        "id": 215173409,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604117970
    },
    {
        "content": "<p>Yeah, I think so</p>",
        "id": 215173517,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604118171
    },
    {
        "content": "<p>I don't think I have permission to push changes to abel-ruffini</p>",
        "id": 215174154,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604119471
    },
    {
        "content": "<p>also, I'm not sure which file the definition of solvability should go into</p>",
        "id": 215174160,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604119500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Send a message like this one: <a href=\"#narrow/stream/113489-new-members/topic/Access.20to.20Mathlib\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Access.20to.20Mathlib</a></p>",
        "id": 215174477,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604120112
    },
    {
        "content": "<p>I think it's fine to put solvability in abelianization for now (although maybe the file would be better named as commutator.lean)</p>",
        "id": 215174483,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604120154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Should we update <code>abel-ruffini</code> every time <code>galois_definition</code> is changed?</p>",
        "id": 215177262,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604125584
    },
    {
        "content": "<p>doesn't need to be every time, but whenever it's convenient, I think</p>",
        "id": 215177268,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604125618
    },
    {
        "content": "<p>At least whenever a PR is merged (or marked as ready to merge).</p>",
        "id": 215177279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604125681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Do we know that a splitting field of a polynomial is generated (in the sense of <code>adjoin</code>) by the roots of that polynomial? Also, is it worth proving the following induction principle: Suppose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is some property of intermediate fields of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mi>F</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E = F(a_1,\\ldots, a_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and for each intermediate field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K(a_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span></p>",
        "id": 215177874,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604126998
    },
    {
        "content": "<p>(And assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of course)</p>",
        "id": 215177931,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604127109
    },
    {
        "content": "<p>Just noticed this in <code>intermediate_field.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">##</span> <span class=\"n\">TODO</span>\n\n <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">field.adjoin</span><span class=\"bp\">`</span> <span class=\"n\">currently</span> <span class=\"n\">returns</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"n\">subalgebra</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">should</span> <span class=\"n\">become</span> <span class=\"n\">an</span>\n   <span class=\"bp\">`</span><span class=\"n\">intermediate_field</span><span class=\"bp\">`.</span> <span class=\"n\">The</span> <span class=\"n\">lattice</span> <span class=\"kd\">structure</span> <span class=\"n\">on</span> <span class=\"bp\">`</span><span class=\"n\">intermediate_field</span><span class=\"bp\">`</span> <span class=\"n\">will</span>\n   <span class=\"n\">follow</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">adjunction</span> <span class=\"n\">given</span> <span class=\"kd\">by</span> <span class=\"bp\">`</span><span class=\"n\">field.adjoin</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>Presumably it should now be removed</p>",
        "id": 215178025,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604127311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215177874\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> Do we know that a splitting field of a polynomial is generated (in the sense of <code>adjoin</code>) by the roots of that polynomial? Also, is it worth proving the following induction principle: Suppose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is some property of intermediate fields of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mi>F</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E = F(a_1,\\ldots, a_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and for each intermediate field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K(a_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span></p>\n</blockquote>\n<p>It's probably not stated now, but it shouldn't be too hard: You do know that the polynomial splits in F(a1,...,an), so there is a map from the splitting field to F(a1,...,an), where F(a1,...,an) is a subfield of the splitting field. By dimension stuff, this alg_hom must be an alg_equiv (this is <code>alg_hom.bijective</code>).</p>",
        "id": 215202674,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604166292
    },
    {
        "content": "<p>As for the induction, I guess that would be reasonable, although I would probably state it in terms of a set. Either assume that the set is finite or the extension is finite-dimensional. And assume that for each intermediate field K such that P holds of K and each a in S, P holds of K(a). Then P holds of E.</p>",
        "id": 215202780,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604166431
    },
    {
        "content": "<p>is it okay to push things to the branch if they still have sorrys?</p>",
        "id": 215228841,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604209027
    },
    {
        "content": "<p>I stated that the commutator of two normal subgroups is normal in the abelianization file but haven't proved it</p>",
        "id": 215228850,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604209069
    },
    {
        "content": "<p>I could just take it out and push the definition of solvability</p>",
        "id": 215228896,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604209093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215228841\">said</a>:</p>\n<blockquote>\n<p>is it okay to push things to the branch if they still have sorrys?</p>\n</blockquote>\n<p>Sure.</p>",
        "id": 215229883,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604211404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215228896\">said</a>:</p>\n<blockquote>\n<p>I could just take it out and push the definition of solvability</p>\n</blockquote>\n<p>No, definitely leave it in</p>",
        "id": 215229892,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604211446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> sorries are totally fine. Just make sure that it compiles.</p>",
        "id": 215231217,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604214321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Did you push your changes yet?</p>",
        "id": 215368538,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346070
    },
    {
        "content": "<p>By the way, sorries can actually be pretty good to push because it makes it easier for other people to help out. And it's fun to be able to gradually eliminate sorries from things</p>",
        "id": 215368580,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I just pushed some small changes to <code>abel-ruffini</code>. In particular, I included statements of the induction principle I mentioned and of the fact that the splitting field is galois.</p>",
        "id": 215368709,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346166
    },
    {
        "content": "<p>But when I pulled the latest changes to the branch, something broke in the proof of <code>alg_hom_adjoin_integral_equiv</code></p>",
        "id": 215368754,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346198
    },
    {
        "content": "<p>wait, nevermind</p>",
        "id": 215368944,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346287
    },
    {
        "content": "<p>I now ran <code>leanproject get-cache</code> and the problem is gone</p>",
        "id": 215368967,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346303
    },
    {
        "content": "<p>By the way, for our current approach to proving the splitting field is galois, we need to know that being galois is equivalent to the condition that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">|Aut(E/F)| = [E : F]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span>, right? Which we don't currently have?</p>",
        "id": 215369108,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346382
    },
    {
        "content": "<p>Also, it would be nice if we had some way to be able to switch between <code>(\\bot : intermediate_field F E)</code> and <code>F</code> and likewise between <code>(\\top : intermediate_field F E)</code> and <code>E</code>. Do you know of the best way to do that?</p>",
        "id": 215369195,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346439
    },
    {
        "content": "<p>I guess it's necessary to have some statement saying that the field structures on <code>\\top</code> and <code>E</code> are the same and that the <code>F</code>-algebra structures are also the same.</p>",
        "id": 215369298,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604346492
    },
    {
        "content": "<p>Or actually, maybe it would be better to prove that e.g. <code>\\top</code> is equivalent to <code>E</code> as a field and as an <code>F</code>-algebra and then show that being a galois extension is preserved by such equivalences?</p>",
        "id": 215370390,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604347094
    },
    {
        "content": "<p>Also, should we at some point introduce special notation for the degree of a field extension? I know it's just <code>findim</code> but it's funny that when you write <code>findim F E</code> it's in the opposite order of the usual notation <code>[E : F]</code></p>",
        "id": 215371748,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604347839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215369108\">said</a>:</p>\n<blockquote>\n<p>By the way, for our current approach to proving the splitting field is galois, we need to know that being galois is equivalent to the condition that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">|Aut(E/F)| = [E : F]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span>, right? Which we don't currently have?</p>\n</blockquote>\n<p>On the assumption that this hasn't already been done, I started working on a proof. I've now pushed a proof which has a few sorries left (see <code>is_galois_of_card_aut_eq_findim</code>). I realized that with what's already been done, the proof is actually easy in a human sense, but there are still a few annoying parts that I haven't finished.</p>",
        "id": 215375995,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604349842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I can take care of this lemma</p>",
        "id": 215378589,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604351106
    },
    {
        "content": "<p>oh actually, I see what issue you're running into</p>",
        "id": 215378851,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604351268
    },
    {
        "content": "<p>passing from E/bot to E/F</p>",
        "id": 215378967,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604351314
    },
    {
        "content": "<p>Yeah, and likewise from <code>top/F</code> to <code>E/F</code></p>",
        "id": 215379759,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604351701
    },
    {
        "content": "<p>it seems like there really should be some sort of \"isomorphism of field extensions\"</p>",
        "id": 215380294,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604351966
    },
    {
        "content": "<p>E/F isomorphic to E'/F'</p>",
        "id": 215380317,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604351974
    },
    {
        "content": "<p>Yeah, that's probably the right way to do this</p>",
        "id": 215380346,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604351995
    },
    {
        "content": "<p>it might be a ring isomorphism taking F to F'</p>",
        "id": 215380418,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352011
    },
    {
        "content": "<p>and we would need to show that things like separability and normality are preserved by isomorphism</p>",
        "id": 215380434,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352020
    },
    {
        "content": "<p>yeah</p>",
        "id": 215380443,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352025
    },
    {
        "content": "<p>and galois-ness</p>",
        "id": 215380452,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215380418\">said</a>:</p>\n<blockquote>\n<p>it might be a ring isomorphism taking F to F'</p>\n</blockquote>\n<p>It also needs to preserve algebra structure</p>",
        "id": 215380501,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352055
    },
    {
        "content": "<p>maybe it's a pair of ring isomorphisms E -&gt; E' and F -&gt; F'?</p>",
        "id": 215380570,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352092
    },
    {
        "content": "<p>Sounds reasonable</p>",
        "id": 215380669,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352126
    },
    {
        "content": "<p>where would such a thing be defined?</p>",
        "id": 215380703,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352147
    },
    {
        "content": "<p>I don't know</p>",
        "id": 215380714,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352155
    },
    {
        "content": "<p>it would have to be below separable.lean and normal.lean, I think</p>",
        "id": 215380749,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352176
    },
    {
        "content": "<p>what does below mean?</p>",
        "id": 215380781,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352191
    },
    {
        "content": "<p>in the file structure</p>",
        "id": 215380804,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352200
    },
    {
        "content": "<p>yeah but does below mean \"depends on\" or \"is depended on\"?</p>",
        "id": 215380838,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352215
    },
    {
        "content": "<p>depends on</p>",
        "id": 215380847,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352221
    },
    {
        "content": "<p>I think it should be independent of separable and normal</p>",
        "id": 215380878,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352235
    },
    {
        "content": "<p>oops</p>",
        "id": 215380881,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352236
    },
    {
        "content": "<p>and then separable and normal should have lemmas saying they are preserved by isomorphism</p>",
        "id": 215380944,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352251
    },
    {
        "content": "<p>yeah</p>",
        "id": 215380952,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352254
    },
    {
        "content": "<p>that's what I meant</p>",
        "id": 215380960,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352257
    },
    {
        "content": "<p>ohh</p>",
        "id": 215380974,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352262
    },
    {
        "content": "<p>maybe one of us should ask some questions on the outside zulip about this</p>",
        "id": 215381014,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352292
    },
    {
        "content": "<p>yeah, we should</p>",
        "id": 215381021,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352298
    },
    {
        "content": "<p>like where it should go, how best to state it</p>",
        "id": 215381024,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352300
    },
    {
        "content": "<p>I can do that</p>",
        "id": 215381043,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352309
    },
    {
        "content": "<p>sounds good</p>",
        "id": 215381067,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352318
    },
    {
        "content": "<p>btw, <a href=\"#narrow/stream/113488-general/topic/Lean.20Together.202021\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.20Together.202021</a></p>",
        "id": 215381211,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352380
    },
    {
        "content": "<p>also, apparently some stuff about cyclotomic polynomials is about to enter mathlib: <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20polynomials/near/215254310\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Cyclotomic.20polynomials/near/215254310</a></p>",
        "id": 215381370,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604352467
    },
    {
        "content": "<p>It's asked in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a></p>",
        "id": 215382190,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352881
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Isomorphism.20of.20Field.20Extensions\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Isomorphism.20of.20Field.20Extensions</a></p>",
        "id": 215382215,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604352898
    },
    {
        "content": "<p>I just pushed the changes!</p>",
        "id": 215387301,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604355702
    },
    {
        "content": "<p>Is there a simple proof that the commutator of normal subgroups is normal that is easy to formalize? The proof that I'm thinking of -- where the conjugation is distributed through the product -- seems like it would require a lot of messing with fintypes and such</p>",
        "id": 215387442,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604355778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I just pushed some more changes to <code>abel-ruffini</code>. I noticed that some lemmas about the dimension of intermediate fields were stated only in terms of adjoin for no reason (when they hold for all intermediate fields). Since I needed the more general form, I restated them and added a couple more. Also, I think those lemmas should go in <code>intermediate_field.lean</code> rather than <code>adjoin.lean</code></p>",
        "id": 215387481,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604355804
    },
    {
        "content": "<p>well, the generating set is closed under conjugation</p>",
        "id": 215387482,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604355804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215387481\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> I just pushed some more changes to <code>abel-ruffini</code>. I noticed that some lemmas about the dimension of intermediate fields were stated only in terms of adjoin for no reason (when they hold for all intermediate fields). Since I needed the more general form, I restated them and added a couple more. Also, I think those lemmas should go in <code>intermediate_field.lean</code> rather than <code>adjoin.lean</code></p>\n</blockquote>\n<p>Also, feel free to plug any sorries that you want to. But I'll also keep working on them</p>",
        "id": 215387514,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604355825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> so maybe there's a lemma saying that if you take the closure of a set closed under conjugation then the result is normal</p>",
        "id": 215387609,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604355867
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/deprecated/subgroup.html#group.normal_closure.is_normal\">https://leanprover-community.github.io/mathlib_docs/deprecated/subgroup.html#group.normal_closure.is_normal</a>?</p>",
        "id": 215387739,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604355951
    },
    {
        "content": "<p>The problem is that Jordan is take closure, not normal_closure</p>",
        "id": 215387841,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604355988
    },
    {
        "content": "<p>The definition of normal closure in mathlib is group closure of the set of conjugates of a set</p>",
        "id": 215387916,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356027
    },
    {
        "content": "<p>oh, that might make it not too bad</p>",
        "id": 215388051,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604356107
    },
    {
        "content": "<p>yeah, it would require unfolding the definition of <code>normal_closure</code> a bit but that should work I think</p>",
        "id": 215388092,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> so if you can prove that <code>s = conjugates_of_set s</code> then it should follow from <code>normal_closure_normal</code> (this is all in the group_theory/subgroup.lean file)</p>",
        "id": 215388138,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604356181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Do you know if mathlib knows that the top subgroup of a group has the same cardinality as the group?</p>",
        "id": 215388215,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356207
    },
    {
        "content": "<p>If you don't know, I can ask in one of the main streams</p>",
        "id": 215388244,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356230
    },
    {
        "content": "<p>I assume it would be enough to know that there is an isomorphism between <code>(\\top : subgroup G)</code> and <code>G</code></p>",
        "id": 215388329,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356291
    },
    {
        "content": "<p>I'd assume so, because of an isomorphism like that, but I don't know exactly</p>",
        "id": 215388361,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604356312
    },
    {
        "content": "<p>Yeah, the problem is I can't find such an isomorphism in mathlib right now</p>",
        "id": 215388442,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356340
    },
    {
        "content": "<p>ah okay, that does reduce it to something a lot more manageable</p>",
        "id": 215388868,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604356628
    },
    {
        "content": "<p>also, mathlib is telling me that continuous integration failed on Lint style and Build mathlib; what should I do about this?</p>",
        "id": 215388985,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604356700
    },
    {
        "content": "<p>in this case, it's just complaining that you used sorry</p>",
        "id": 215389021,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604356731
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/runs/1344650495\">https://github.com/leanprover-community/mathlib/runs/1344650495</a></p>",
        "id": 215389031,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604356738
    },
    {
        "content": "<p>it's worth checking what went wrong, but if it's just sorries then there's nothing to worry about</p>",
        "id": 215389048,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604356753
    },
    {
        "content": "<p>and the lint is complaining that some lines have more than 100 characters</p>",
        "id": 215389218,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356868
    },
    {
        "content": "<p>to fix that, just insert newlines in reasonable places so that the lines are less than 100 characters</p>",
        "id": 215389244,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356888
    },
    {
        "content": "<p>VSCode should display a helpful vertical line showing where 100 characters is</p>",
        "id": 215389275,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604356909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> sorry if I accidentally derailed the <code>maths</code> thread. Also, I'm not really what sure what the main takeaway is so far</p>",
        "id": 215390713,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604357956
    },
    {
        "content": "<p>no worries, it's an interesting discussion</p>",
        "id": 215390739,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604357975
    },
    {
        "content": "<p>although I don't think that the automation will solve the immediate problem at hand</p>",
        "id": 215390764,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604357994
    },
    {
        "content": "<p>lol, I agree. At least not this year</p>",
        "id": 215390830,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604358010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I just encountered another place where it would be convenient to change the base field: we already know that <code>E</code> is galois over any fixed field of a subgroup of the set of automorphisms of <code>E</code>. But we would like to know that this means if the fixed points of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Aut(E/F)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> are exactly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois</p>",
        "id": 215393210,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604359804
    },
    {
        "content": "<p>To be fair, this is a place where it would be pretty reasonable to just talk about subfields</p>",
        "id": 215393251,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604359835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215387481\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> I just pushed some more changes to <code>abel-ruffini</code>. I noticed that some lemmas about the dimension of intermediate fields were stated only in terms of adjoin for no reason (when they hold for all intermediate fields). Since I needed the more general form, I restated them and added a couple more. Also, I think those lemmas should go in <code>intermediate_field.lean</code> rather than <code>adjoin.lean</code></p>\n</blockquote>\n<p>I realized these lemmas can't go in <code>intermediate_field.lean</code> because they depend on the fact that <code>intermediate_field</code>s form a lattice, which depends on <code>adjoin</code></p>",
        "id": 215398968,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604364351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I pushed a few style changes to <code>abelianization.lean</code>. I didn't add/change any of the content though</p>",
        "id": 215661274,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604538625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are equivalent as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> algebras then one way to conclude <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois if you know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E'/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois is to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>⊂</mo><mi>E</mi><mo>⊂</mo><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">F \\sub E \\sub E'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> forms an <code>is_scalar_tower</code> and then use <code>is_galois_tower_top_of_is_galois</code>. I tried to start implementing this strategy but ran into problems with Lean's type inference engine</p>",
        "id": 215661330,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604538720
    },
    {
        "content": "<p>Note that this strategy wouldn't work for the case where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><msup><mi>F</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E/F'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 215661385,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604538750
    },
    {
        "content": "<p>And that case is still needed to translate between the field <code>mul_action.fixed_points G E</code> and the <code>intermediate_field</code> <code>fixed_field G</code></p>",
        "id": 215661404,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604538793
    },
    {
        "content": "<p>For that translation, I think you need to show that if <code>K : intermediate_field F E</code> then <code>E/K</code> is Galois iff <code>E/K.to_subfield</code> is Galois. Can't you do something similar? Define a scalar tower and use the galois top result?</p>",
        "id": 215663014,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604540636
    },
    {
        "content": "<p>actually, I don't think that's quite enough</p>",
        "id": 215663981,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604541667
    },
    {
        "content": "<p>for <code>is_galois_of_fixed_field_eq_bot</code>, I've reduced it to showing that <code>is_galois (⊥ : intermediate_field F E) E</code> implies <code>is_galois F E</code></p>",
        "id": 215663999,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604541698
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">galois.is_galois_of_fixed_field</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 215664059,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604541732
    },
    {
        "content": "<p>yeah, I had originally imagined having some kind of result about transferring Galois from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><msup><mi>F</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E/F'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and then using that to first transfer from <code>mul_action.fixed_points</code> to <code>fixed_field</code> and then <code>rw</code> that to <code>\\bot</code> and then use the transfer again to get to <code>F</code></p>",
        "id": 215664586,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604542414
    },
    {
        "content": "<p>did you push the changes you made btw?</p>",
        "id": 215664601,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604542426
    },
    {
        "content": "<p>we also need to prove <code>is_galois F (\\bot : intermediate_field F E)</code> btw though I don't imagine it will be hard</p>",
        "id": 215664694,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604542508
    },
    {
        "content": "<p>Also, have you proved anywhere that if <code>E</code> is a splitting field for <code>p</code> over <code>F</code> and <code>s</code> is the set of roots of <code>p</code> in <code>E</code> then <code>adjoin F s</code> is isomorphic to <code>E</code> as an <code>F</code>-algebra? I don't think that's stated anywhere yet but I wanted to make sure</p>",
        "id": 215665527,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604543680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215661330\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are equivalent as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> algebras then one way to conclude <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois if you know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E'/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois is to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>⊂</mo><mi>E</mi><mo>⊂</mo><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">F \\sub E \\sub E'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> forms an <code>is_scalar_tower</code> and then use <code>is_galois_tower_top_of_is_galois</code>. I tried to start implementing this strategy but ran into problems with Lean's type inference engine</p>\n</blockquote>\n<p>Wait, don't you have this the wrong way around? Wouldn't <code>is_galois_tower_top_of_galois</code> only tell you that <code>E'/E</code> is Galois?</p>",
        "id": 215665528,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604543681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215665527\">said</a>:</p>\n<blockquote>\n<p>Also, have you proved anywhere that if <code>E</code> is a splitting field for <code>p</code> over <code>F</code> and <code>s</code> is the set of roots of <code>p</code> in <code>E</code> then <code>adjoin F s</code> is isomorphic to <code>E</code> as an <code>F</code>-algebra? I don't think that's stated anywhere yet but I wanted to make sure</p>\n</blockquote>\n<p>I haven't</p>",
        "id": 215665544,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604543703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215665528\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215661330\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are equivalent as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> algebras then one way to conclude <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois if you know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E'/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois is to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>⊂</mo><mi>E</mi><mo>⊂</mo><msup><mi>E</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">F \\sub E \\sub E'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> forms an <code>is_scalar_tower</code> and then use <code>is_galois_tower_top_of_is_galois</code>. I tried to start implementing this strategy but ran into problems with Lean's type inference engine</p>\n</blockquote>\n<p>Wait, don't you have this the wrong way around? Wouldn't <code>is_galois_tower_top_of_galois</code> only tell you that <code>E'/E</code> is Galois?</p>\n</blockquote>\n<p>ohh, yeah, oops</p>",
        "id": 215665568,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604543747
    },
    {
        "content": "<p>actually, we could use the <code>galois.tower_top</code> thing in one place: if we know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois then we can conclude that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is Galois over <code>(\\bot : intermediate_field F E)</code></p>",
        "id": 215665716,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604543911
    },
    {
        "content": "<p>although I guess I'm not sure if we ever need to do that now that I think about it</p>",
        "id": 215665736,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604543973
    },
    {
        "content": "<p>also, did you ever prove that adjoining a set of algebraic elements is the same as algebra adjoin? I see it for adjoining one element (<code>adjoin_simple_to_subalgebra_of_integral</code>) but not for a set</p>",
        "id": 215667346,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604546089
    },
    {
        "content": "<p>I think we only have it for a single element</p>",
        "id": 215671242,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604552097
    },
    {
        "content": "<p>does mathlib know that G is a normal subgroup  of itself? it seems to know that the trivial subgroup is normal, but when I try to library_search to show that the top subgroup is normal, I get nothing</p>",
        "id": 215811905,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604646548
    },
    {
        "content": "<p>My instinct would be to find the proof that the trivial subgroup is normal in mathlib and then literally look in that file around the area where that result is proved.</p>",
        "id": 215812207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604646894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I think it's missing</p>",
        "id": 215814528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604649313
    },
    {
        "content": "<p>Should be a 3-line PR (-;</p>",
        "id": 215814537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604649320
    },
    {
        "content": "<p>I just pushed the proof of top.normal and the nth_commutator being normal; it's in abelianization now, but we could definitely split it into its own PR</p>",
        "id": 215985184,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604802972
    },
    {
        "content": "<p>also, Patrick, have you pushed the cases reduction for the normal commutator proof yet?</p>",
        "id": 215985189,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1604802994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I've signed up to give a Many Cheerful Facts talk at 12:30. Could we push this week's meeting to 1:30?</p>",
        "id": 216119333,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604943968
    },
    {
        "content": "<p>Do you guys meet in person?</p>",
        "id": 216120340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604944403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> No, on zoom. Actually the majority of us are not even physically in Berkeley right now.</p>",
        "id": 216122445,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604945301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216119333\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> I've signed up to give a Many Cheerful Facts talk at 12:30. Could we push this week's meeting to 1:30?</p>\n</blockquote>\n<p>Fine with me.</p>",
        "id": 216122458,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604945310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/215985189\">said</a>:</p>\n<blockquote>\n<p>also, Patrick, have you pushed the cases reduction for the normal commutator proof yet?</p>\n</blockquote>\n<p>Oh, no, I haven't. I can do it soon.</p>",
        "id": 216122557,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604945380
    },
    {
        "content": "<p>By the way, I'm more likely to see your message if you tag me like <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> (which you can do by typing \"@\" and then my name). But I do check zulip every day or two so I will see eventually no matter what</p>",
        "id": 216122668,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604945429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I've now pushed some changes to <code>abelianization.lean</code>. I also propose we add some basic lemmas about <code>normal_closure</code> to the appropriate file</p>",
        "id": 216141599,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955258
    },
    {
        "content": "<p>E.g. show that <code>normal_closure</code> is idempotent, show that it is always bigger than the subgroup closure, etc</p>",
        "id": 216141657,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955309
    },
    {
        "content": "<p>I can do those myself later today. Or you can do them if you want</p>",
        "id": 216141701,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955332
    },
    {
        "content": "<p>I also think we should prove some theorem of the form \"the general_commutator/commutator is equal to the set of commutators (even without taking the subgroup closure/normal_closure)\"</p>",
        "id": 216141825,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955393
    },
    {
        "content": "<p>just for convenience</p>",
        "id": 216141839,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955404
    },
    {
        "content": "<p>it's not</p>",
        "id": 216141867,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604955425
    },
    {
        "content": "<p>the commutator subgroup can contain non-commutators</p>",
        "id": 216141928,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604955472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216141928\">said</a>:</p>\n<blockquote>\n<p>the commutator subgroup can contain non-commutators</p>\n</blockquote>\n<p>oh, lol, nevermind then.</p>",
        "id": 216142218,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955631
    },
    {
        "content": "<p>well, at least a lemma saying that for commutator we don't need to use <code>normal_closure</code></p>",
        "id": 216142247,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955654
    },
    {
        "content": "<p>which should follow from <code>commutator_eq_general_commutator_top_top</code></p>",
        "id": 216142284,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604955672
    },
    {
        "content": "<p>You could prove that normal closure and forgetful functor form a Galois insertion between normal subgroups and subsets</p>",
        "id": 216142904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604956002
    },
    {
        "content": "<p>Is this not all already there though?</p>",
        "id": 216142917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604956012
    },
    {
        "content": "<p><code>normal_closure</code> is defined in <code>group_theory.subgroup</code> and there's a ton of lemmas about it</p>",
        "id": 216143055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604956091
    },
    {
        "content": "<p>but the Galois insertion fact doesn't seem to be proved</p>",
        "id": 216143135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604956138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216142917\">said</a>:</p>\n<blockquote>\n<p>Is this not all already there though?</p>\n</blockquote>\n<p>I don't see it</p>",
        "id": 216143649,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604956446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216143055\">said</a>:</p>\n<blockquote>\n<p><code>normal_closure</code> is defined in <code>group_theory.subgroup</code> and there's a ton of lemmas about it</p>\n</blockquote>\n<p>I actually don't see very many lemmas about <code>normal_closure</code> though there are a few (and I don't know that there needs to be that many)</p>",
        "id": 216143708,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604956482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216119333\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> I've signed up to give a Many Cheerful Facts talk at 12:30. Could we push this week's meeting to 1:30?</p>\n</blockquote>\n<p>maybe we should even push it a bit later if your talk ends right at 1:30?</p>",
        "id": 216143866,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604956568
    },
    {
        "content": "<p>also what are you going to talk about?</p>",
        "id": 216143890,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604956580
    },
    {
        "content": "<p>just out of curiosity</p>",
        "id": 216143906,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604956591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216143890\">said</a>:</p>\n<blockquote>\n<p>also what are you going to talk about?</p>\n</blockquote>\n<p>Lean!</p>",
        "id": 216144083,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604956686
    },
    {
        "content": "<p>maybe I should go</p>",
        "id": 216144115,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604956719
    },
    {
        "content": "<p>You're certainly welcome, although you probably won't learn anything new</p>",
        "id": 216144332,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604956878
    },
    {
        "content": "<p>are you going to advertise the \"Berkeley Lean seminar\" (maybe a misleading name at this point)?</p>",
        "id": 216144455,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604956950
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/cf7779936419085093ab0ea20f4738dd08030f90\">https://github.com/leanprover/lean4/commit/cf7779936419085093ab0ea20f4738dd08030f90</a> btw</p>",
        "id": 216144562,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604957034
    },
    {
        "content": "<p>unrelated</p>",
        "id": 216144568,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604957039
    },
    {
        "content": "<p>I think I'll mention what we've been doing in Galois theory</p>",
        "id": 216144949,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604957281
    },
    {
        "content": "<p>we could consider offering to help newcomers</p>",
        "id": 216145040,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604957316
    },
    {
        "content": "<p>who are working through tutorials or w/e</p>",
        "id": 216145053,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604957329
    },
    {
        "content": "<p>not that there will necessarily be very many</p>",
        "id": 216145069,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604957337
    },
    {
        "content": "<p>or any</p>",
        "id": 216145077,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604957342
    },
    {
        "content": "<p>You're right, they've proved the basics but they didn't prove it was a Galois insertion</p>",
        "id": 216146251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604957973
    },
    {
        "content": "<p>There is some abstract thing called a closure operator</p>",
        "id": 216146278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604957988
    },
    {
        "content": "<p>Which satisfies some axioms, which are presumably the ones they prove</p>",
        "id": 216146342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604958005
    },
    {
        "content": "<p>wouldn't a closure operator be idempotent?</p>",
        "id": 216146563,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604958134
    },
    {
        "content": "<p>Normal closure of normal closure is normal closure, right?</p>",
        "id": 216149425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604959805
    },
    {
        "content": "<p>yeah, but that's not proved in mathlib I think</p>",
        "id": 216149460,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604959825
    },
    {
        "content": "<p>Oh well clearly whoever did it did a shoddy job :-) I think I've even seen closure operators axiomatised somewhere -- Wikipedia?</p>",
        "id": 216149533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604959893
    },
    {
        "content": "<p>I mean it's also possible that it's already in mathlib and I just can't find it</p>",
        "id": 216155541,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604964014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216149533\">said</a>:</p>\n<blockquote>\n<p>Oh well clearly whoever did it did a shoddy job :-) I think I've even seen closure operators axiomatised somewhere -- Wikipedia?</p>\n</blockquote>\n<p>yeah, there does seem to be an axiomatization on wikipedia. Also apparently if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f, g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> is a Galois connection then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is a closure operator so proving that the normal closure and forgetful functor form a Galois insertion is a stronger result than showing that normal closure is a closure operator</p>",
        "id": 216155722,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604964194
    },
    {
        "content": "<p>on the other hand, you might need to first prove it's a closure operator to prove it's a Galois insertion :-) I think there are tricks for proving things are Galois insertion -- Bhavik knows them.</p>",
        "id": 216156229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604964592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> You can look at field_theory/adjoin.lean for how to quickly prove Galois insertions</p>",
        "id": 216156427,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1604964730
    },
    {
        "content": "<p>my impression is that proving something is a Galois insertion is somehow the \"last word\" in the API for this sort of thing -- if you have that then you have what most people need.</p>",
        "id": 216156466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604964778
    },
    {
        "content": "<p>A partial order (or even a preorder) is a poor person's category: a &lt;= b means there's a map from a to b</p>",
        "id": 216156515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604964819
    },
    {
        "content": "<p>A Galois connection is a pair of adjoint functors between preorders.</p>",
        "id": 216156529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604964835
    },
    {
        "content": "<p>A Galois insertion is a pair of adjoint functors such that one of the two compositions is the identity map.</p>",
        "id": 216156597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604964861
    },
    {
        "content": "<p>This sort of stuff works really well in mathlib, it can be thought of as \"categories where the hom-sets are in Prop rather than Type\"</p>",
        "id": 216156655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604964895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216156229\">said</a>:</p>\n<blockquote>\n<p>on the other hand, you might need to first prove it's a closure operator to prove it's a Galois insertion :-) I think there are tricks for proving things are Galois insertion -- Bhavik knows them.</p>\n</blockquote>\n<p>It doesn't look like it should be too hard in this case. I can do it later this afternoon</p>",
        "id": 216156690,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604964939
    },
    {
        "content": "<p>my memory is that (just like in the adjoint functor setting!) there are a couple of cool constructors for Galois insertions -- you prove a minimal amount of stuff (like closure_mono, closure_subset, closure_closure etc) and then some magic function makes the Galois insertion for you. But I have forgotten the details :-/</p>",
        "id": 216156813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604965044
    },
    {
        "content": "<p>Actually, there seems to be a little problem here. Namely, <code>normal_closure</code> has type <code>set G -&gt; subgroup G</code> not <code>set G -&gt; subgroup.normal G</code>. But actually, the way <code>subgroup.normal</code> is defined right now, it's impossible for <code>normal_closure</code> to have this type; that's because <code>subgroup.normal</code> is a structure with type <code>Prop</code>.</p>",
        "id": 216160574,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604968499
    },
    {
        "content": "<p>I propose we redefine <code>subgroup.normal</code> as follows</p>",
        "id": 216160582,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604968513
    },
    {
        "content": "<p>right now it looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">normal</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conj_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I propose we change this to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">normal_subgroup</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conj_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 216160668,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604968581
    },
    {
        "content": "<p>Actually, very confusingly, it looks like this used to be the definition of <code>normal_subgroup</code> in mathlib in the now deprecated file <code>deprecated.subgroup</code></p>",
        "id": 216160716,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604968649
    },
    {
        "content": "<p>It would be nice to know why it was changed</p>",
        "id": 216160728,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604968663
    },
    {
        "content": "<p>I just pushed some changes that prove the lemmas I mentioned above. I didn't prove the instance of galois insertion for the reasons I mentioned</p>",
        "id": 216163226,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604971012
    },
    {
        "content": "<p>just pushed a commit showing that abelian groups are solvable.</p>",
        "id": 216164452,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604972461
    },
    {
        "content": "<p>just pushed a commit proving <code>is_galois F (\\bot : intermediate_field F E)</code>. Hopefully this wasn't already done somewhere (at least I didn't see it)</p>",
        "id": 216170075,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604979911
    },
    {
        "content": "<p>Yes, I'd recommend you don't bundle normal subgroups. Me and some students built group theory from scratch over the summer (starting with the definition, going up to sylow) and I specifically bundled normal subgroups to see if it made life easier, but the students revolted so we changed it back.</p>",
        "id": 216179674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604994510
    },
    {
        "content": "<p>They said it was really annoying</p>",
        "id": 216179677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604994521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/4830\">#4830</a> is getting merged. That leaves <a href=\"https://github.com/leanprover-community/mathlib/issues/4831\">#4831</a> (should be quick), and then <a href=\"https://github.com/leanprover-community/mathlib/issues/4786\">#4786</a> (which introduces galois.lean). After this, I can start making smaller PRs with some of the new stuff.</p>",
        "id": 216270051,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605040344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I've run into kind of a weird problem which may just be because I'm doing things in a bad way. I would like to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">K/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> are both field extensions and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is an intermediate field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> then there is an equivalence between maps of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> which fix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> and pairs of maps the first of which maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> fixing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> and the second of which maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>-algebra (using the first map to think of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>-algebra). I stated this as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">alg_hom_equiv_sigma_subalgebra</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">alg_hom</span> <span class=\"n\">L</span> <span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.to_algebra</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have almost proved it, but when proving <code>right_inv</code> I tried using <code>ext</code> and ended up needing to prove a goal of the form <code>x == y</code>. When I looked up what this notation meant I found out it is <code>heq</code> and the documentation for <code>heq</code> says</p>\n<blockquote>\n<p>If you have a goal <code>⊢ x == y</code>, your first instinct should be to ask (either yourself, or on zulip) if something has gone wrong already.</p>\n</blockquote>\n<p>which seems concerning.</p>",
        "id": 216380025,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605118559
    },
    {
        "content": "<p>Are the types of x and y different?</p>",
        "id": 216383529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605120390
    },
    {
        "content": "<p>Which one is <code>right_inv</code>? Are you trying to prove that two terms of the sigma type are equal? I can see how one might blunder into a <code>heq</code> there :-/</p>",
        "id": 216383815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605120538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  A B : Type</span>\n<span class=\"cm\">  F : A → Type</span>\n<span class=\"cm\">  x y : Σ (a : A), F a</span>\n<span class=\"cm\">  ⊢ x.fst = y.fst</span>\n<span class=\"cm\">  A B : Type</span>\n<span class=\"cm\">  F : A → Type</span>\n<span class=\"cm\">  x y : Σ (a : A), F a</span>\n<span class=\"cm\">  ⊢ x.snd == y.snd</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216384107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605120683
    },
    {
        "content": "<p>You start with an f and an alg-hom. You make a map E -&gt; K, and then you make a new f. Is this new f equal to the original one by rfl? If not then you want the alg homs to be equal but they are terms of types which are not definitionally equal; this is exactly what heq is for. Chris Hughes told me he wasn't scared of it any more. But I still am.</p>",
        "id": 216384568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605120913
    },
    {
        "content": "<p>This is the kind of question which Mario, Reid and Chris are good at</p>",
        "id": 216384809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605121008
    },
    {
        "content": "<p>There will be ways to avoid the <code>heq</code> which work in your situation, I suspect. The first question is whether the new f and the old f are equal by <code>rfl</code>.</p>",
        "id": 216385056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605121134
    },
    {
        "content": "<p>You can probably find this out by trying to apply <code>heq_of_eq</code> to your <code>heq</code> goal and seeing if the elaborator can sort things out. If this works you're in the clear.</p>",
        "id": 216385281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605121231
    },
    {
        "content": "<p>If it doesn't then you might need to call for help.</p>",
        "id": 216385510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605121334
    },
    {
        "content": "<p>The next possibility is to somehow use the fact that even though x and y are terms of different types, they are both functions from E to K with some properties, so they will be equal if they're the same function. You might need a type theory ninja to reduce it to that though.</p>",
        "id": 216385880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605121546
    },
    {
        "content": "<p>If you apply <code>sigma.eq</code> instead of <code>sigma.ext</code> you'll end up with a goal with <code>eq.rec</code> in and this is different but also bad (for the same sort of reasons)</p>",
        "id": 216386053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605121619
    },
    {
        "content": "<p><code>eq_mpr_heq</code> might be a better approach. <code>eq.rec</code>s are hard to get rid of.</p>",
        "id": 216386362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605121787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216383815\">said</a>:</p>\n<blockquote>\n<p>Which one is <code>right_inv</code>? Are you trying to prove that two terms of the sigma type are equal? I can see how one might blunder into a <code>heq</code> there :-/</p>\n</blockquote>\n<p>Yes, <code>right_inv</code> is the part where I need to show two elements of a sigma type are equal. You can see it <a href=\"https://github.com/leanprover-community/mathlib/blob/43b9427b43d748e773cbca6c707138a020a63116/src/field_theory/adjoin.lean#L501\">here</a></p>",
        "id": 216387115,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605122259
    },
    {
        "content": "<p>They are not equal by <code>rfl</code></p>",
        "id": 216387255,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605122341
    },
    {
        "content": "<p>the issue is that when going from <code>(f, g)</code> to a map <code>E -&gt; K</code> I just used <code>g</code> as the map but going back the other way I restrict the map from <code>E -&gt; K</code> to a map <code>L -&gt; K</code>. This is equal to the original <code>f</code> because of the condition <code>commutes'</code> on <code>g</code> but they are not definitionally equal</p>",
        "id": 216387413,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605122425
    },
    {
        "content": "<p>Also it's definitely possible that there's a better way to go about this</p>",
        "id": 216387741,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605122627
    },
    {
        "content": "<p>Aah yes, so you have convinced me that the proof is not <code>rfl</code>. I wonder if you can minimise. Hang on a sec...</p>",
        "id": 216387921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605122728
    },
    {
        "content": "<p>I think that this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>might be a better question to ask. This is just pure type theory so people like Mario might respond. I think it has the same problems that your example has, and the important thing is that it's much more minimal so a much more attractive question.</p>",
        "id": 216388698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123179
    },
    {
        "content": "<p>The <code>φ s = f ⟨s, h⟩</code> is some random hypothesis when you're in the middle of all this, so it's not <code>rfl</code>, so I think this example exhibits the same problems that you have.</p>",
        "id": 216388779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123220
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">fφ</span><span class=\"o\">,</span> <span class=\"n\">fφ.2.1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- heq</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>One can certainly get further with the proof but I think it's \"the same heq\"</p>",
        "id": 216388924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123278
    },
    {
        "content": "<p>okay, let me look at it a bit and then I'll ask in one of the bigger streams</p>",
        "id": 216389004,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605123328
    },
    {
        "content": "<p>thanks for the help</p>",
        "id": 216389010,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605123334
    },
    {
        "content": "<p>no problem</p>",
        "id": 216389022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123340
    },
    {
        "content": "<p>You're all PhD students/post-docs, right?</p>",
        "id": 216389030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123346
    },
    {
        "content": "<p>I have a lot of time for people like you</p>",
        "id": 216389060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123361
    },
    {
        "content": "<p>there aren't very many of us any more. But we're all PhD students I guess</p>",
        "id": 216389120,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605123378
    },
    {
        "content": "<p>although I hope to be a postdoc soon</p>",
        "id": 216389166,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605123401
    },
    {
        "content": "<p>yeah, you can go and spread the word elsewhere :-)</p>",
        "id": 216389180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123413
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Dealing.20with.20heq.20and.20Sigma.20types\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Dealing.20with.20heq.20and.20Sigma.20types</a></p>",
        "id": 216390753,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605124253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216387413\">said</a>:</p>\n<blockquote>\n<p>the issue is that when going from <code>(f, g)</code> to a map <code>E -&gt; K</code> I just used <code>g</code> as the map but going back the other way I restrict the map from <code>E -&gt; K</code> to a map <code>L -&gt; K</code>. This is equal to the original <code>f</code> because of the condition <code>commutes'</code> on <code>g</code> but they are not definitionally equal</p>\n</blockquote>\n<p>I'm a little confused though, because<br>\n<code>have key : alg_hom_extend_base F (alg_hom_compose F L f g) L x = g x := rfl,</code></p>",
        "id": 216390812,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605124286
    },
    {
        "content": "<p>doesn't that show that they are definitionally equal pointwise?</p>",
        "id": 216390904,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605124326
    },
    {
        "content": "<p>Here's the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sigma.eq</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom_extend_base</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">alg_hom_compose</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">alg_hom.commutes'</span> <span class=\"n\">L</span> <span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.to_algebra</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 216391205,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605124499
    },
    {
        "content": "<p>The problem is perhaps that functional extensionality (pointwise equality implies equality) isn't <code>rfl</code> :-( It might even be basically an axiom of the type theory? The problem with axioms is that they are true by <em>magic</em>.</p>",
        "id": 216391487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605124633
    },
    {
        "content": "<p>and not by <code>rfl</code></p>",
        "id": 216391531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605124660
    },
    {
        "content": "<p>Yeah, the problem is that definitional equality means something much stronger than what we normally think of as \"mathematical objects being equal\"</p>",
        "id": 216391724,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605124760
    },
    {
        "content": "<p>it means they are equal for purely syntactic reasons</p>",
        "id": 216391744,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605124772
    },
    {
        "content": "<p>literally it means that they can be beta reduced to the same term</p>",
        "id": 216391847,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605124807
    },
    {
        "content": "<p>and this is causing problems here because <code>f</code> is being used in the specification of the <em>type</em> of <code>g</code></p>",
        "id": 216391957,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605124868
    },
    {
        "content": "<p>Reid has solved the problem</p>",
        "id": 216392301,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125023
    },
    {
        "content": "<p>I saw, although I'm having trouble coming up with the analog of <code>have : f = λ s, φ s.1, sorry,</code></p>",
        "id": 216392577,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605125146
    },
    {
        "content": "<p>Oh lol, you accused me of making the lambda &lt;a, b&gt; sin :-)</p>",
        "id": 216392651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125171
    },
    {
        "content": "<p>I see that you inserted the sin and then claimed it was due to me :-)</p>",
        "id": 216392673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125187
    },
    {
        "content": "<p>NB i don't care :-)</p>",
        "id": 216392688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125195
    },
    {
        "content": "<p>In your case, you want to prove that the algebra maps are the same before you do the <code>subst</code></p>",
        "id": 216392832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125264
    },
    {
        "content": "<p>I didn't realize it was a sin when I inserted it</p>",
        "id": 216392834,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125265
    },
    {
        "content": "<p>It's fine in proofs in term mode, but if you look at what it does when defining data you get some weird <code>_x.fun_match</code> stuff which just causes noise</p>",
        "id": 216392933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125302
    },
    {
        "content": "<p>yeah, that makes sense</p>",
        "id": 216393181,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125437
    },
    {
        "content": "<p>OK so in summary, you don't apply ext, you create a proof that the two alg homs are equal first, and then <code>subst</code> magic might help.</p>",
        "id": 216393444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125585
    },
    {
        "content": "<p>yeah, the <code>subst</code> thing seems really helpful here</p>",
        "id": 216393484,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216392577\">said</a>:</p>\n<blockquote>\n<p>I saw, although I'm having trouble coming up with the analog of <code>have : f = λ s, φ s.1, sorry,</code></p>\n</blockquote>\n<p>hmm, I'm also running into problems. I assumed I should use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">alg_hom_restrict</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">alg_hom_compose</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>But when I try to use <code>subst</code> with that, Lean complains about it</p>",
        "id": 216394634,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605126324
    },
    {
        "content": "<p>context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">subst</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">hypothesis</span> <span class=\"bp\">'</span><span class=\"n\">this'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">L</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"bp\">↥</span><span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">alg_hom_restrict</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">alg_hom_compose</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">⟨</span><span class=\"n\">alg_hom_restrict</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">alg_hom_compose</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">alg_hom_extend_base</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">alg_hom_compose</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 216394662,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605126344
    },
    {
        "content": "<p>I guess maybe the problem is that you want to subsitute a term for <code>f</code> that contains <code>f</code>?</p>",
        "id": 216394793,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605126411
    },
    {
        "content": "<p>which would lead to an infinite loop of substitutions</p>",
        "id": 216394810,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605126423
    },
    {
        "content": "<p>no, actually that doesn't seem to be the issue</p>",
        "id": 216395859,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127024
    },
    {
        "content": "<p>This also doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 216395883,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127046
    },
    {
        "content": "<p>I get the same error where Lean says that the thing I want to substitute is not of the form <code>x = t</code></p>",
        "id": 216395966,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216394634\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216392577\">said</a>:</p>\n<blockquote>\n<p>I saw, although I'm having trouble coming up with the analog of <code>have : f = λ s, φ s.1, sorry,</code></p>\n</blockquote>\n<p>hmm, I'm also running into problems. I assumed I should use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">alg_hom_restrict</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">alg_hom_compose</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>But when I try to use <code>subst</code> with that, Lean complains about it</p>\n</blockquote>\n<p>I tried that exact same thing</p>",
        "id": 216396204,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605127236
    },
    {
        "content": "<p>yeah, but I think that's probably the wrong thing to do because it would replace <code>f</code> with a term that includes <code>f</code></p>",
        "id": 216396701,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127507
    },
    {
        "content": "<p>we really want to actually replace <code>f</code> with a term that doesn't involve <code>f</code></p>",
        "id": 216396723,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127522
    },
    {
        "content": "<p>which is why I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>(I had renamed f to phi for clarity)</p>",
        "id": 216396772,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127551
    },
    {
        "content": "<p>but that also didn't work</p>",
        "id": 216396781,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127556
    },
    {
        "content": "<p>but somehow this <em>does</em> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo_map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo_map</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo_map</span> <span class=\"n\">S</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f.to_fun</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g.to_fun</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span><span class=\"o\">},</span> <span class=\"o\">⟨</span><span class=\"n\">g.to_fun</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">p.2.1</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span><span class=\"o\">},</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 216396885,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605127592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216396781\">said</a>:</p>\n<blockquote>\n<p>but that also didn't work</p>\n</blockquote>\n<p>although maybe it's somehow because of the sorries in the definition of the term?</p>",
        "id": 216397598,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605128002
    },
    {
        "content": "<p>No, I guess not.</p>",
        "id": 216397652,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605128032
    },
    {
        "content": "<p>Oh, I think I sort of see why it's happening</p>",
        "id": 216401879,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130612
    },
    {
        "content": "<p>the problem <strong>is</strong> that I'm trying to substitute <code>\\phi</code> for a term that depends on <code>\\phi</code></p>",
        "id": 216401927,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130651
    },
    {
        "content": "<p>but in the second example this dependence is hidden in a sneaky way</p>",
        "id": 216401948,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130663
    },
    {
        "content": "<p>the <em>type</em> of <code>psi</code> depends on <code>phi</code></p>",
        "id": 216402022,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130685
    },
    {
        "content": "<p>and I'm trying to substitute a term that uses <code>psi</code></p>",
        "id": 216402037,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130698
    },
    {
        "content": "<p>for instance, this does work (although the sorries are obviously not provable):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 216402104,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130765
    },
    {
        "content": "<p>Can you just rewrite instead?</p>",
        "id": 216402261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605130877
    },
    {
        "content": "<p>instead of <code>subst</code>?</p>",
        "id": 216402282,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130898
    },
    {
        "content": "<p>Yeah, subst is just rewrite</p>",
        "id": 216402442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605130984
    },
    {
        "content": "<p>Lean tells me \"motive is not type correct\"</p>",
        "id": 216402455,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605130996
    },
    {
        "content": "<p>But rewrite wouldn't mind changing x to f(x)</p>",
        "id": 216402461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131002
    },
    {
        "content": "<p>Try <code>simp only this</code></p>",
        "id": 216402474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131015
    },
    {
        "content": "<p>Lean tells me \"invalid simplification lemma\"</p>",
        "id": 216402539,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131061
    },
    {
        "content": "<p>assuming by <code>h</code> you meant <code>this</code></p>",
        "id": 216402550,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131070
    },
    {
        "content": "<p>Right</p>",
        "id": 216402555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131074
    },
    {
        "content": "<p>So was my example bad? It didn't capture this repetition of f?</p>",
        "id": 216402603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131133
    },
    {
        "content": "<p>it didn't capture that the type of <code>g</code> depends on <code>f</code> I think</p>",
        "id": 216402623,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131161
    },
    {
        "content": "<p>in your example you can separate out the function</p>",
        "id": 216402666,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131171
    },
    {
        "content": "<p>and forget about the condition on <code>g</code> which is the only thing that depends on <code>f</code></p>",
        "id": 216402677,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131186
    },
    {
        "content": "<p>maybe that's possible here too</p>",
        "id": 216402689,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131200
    },
    {
        "content": "<p>let me try</p>",
        "id": 216402692,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131205
    },
    {
        "content": "<p>Failing that you can always go back to the same thread with a better example</p>",
        "id": 216402710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131224
    },
    {
        "content": "<p>It's just that saying \"I have a problem on this branch of mathlib\" is much less likely to get a response</p>",
        "id": 216402741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131247
    },
    {
        "content": "<p>yeah, I think I might be able to come up with a better example</p>",
        "id": 216402837,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131305
    },
    {
        "content": "<p>like <code>foo_map</code> above but a little more complex</p>",
        "id": 216402852,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216402666\">said</a>:</p>\n<blockquote>\n<p>in your example you can separate out the function</p>\n</blockquote>\n<p>I guess the point is that this example also fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">fφ</span><span class=\"o\">,</span> <span class=\"n\">fφ.2.1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">φ.1</span> <span class=\"n\">s.1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>for the same reason: <code>\\phi</code> seems to depend on <code>f</code>. But changing <code>rintros &lt;f, \\phi&gt;</code> to <code>rintros &lt;f, \\phi, h&gt;</code> makes that problem go away</p>",
        "id": 216403308,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131654
    },
    {
        "content": "<p>we need something similar here: a way to get the raw function <code>E -&gt; K</code> from <code>psi</code> I think</p>",
        "id": 216403345,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131692
    },
    {
        "content": "<p>but for some reason Lean complains at me if I try to do <code>psi.to_fun</code></p>",
        "id": 216403368,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131705
    },
    {
        "content": "<p>because it can't remember that <code>K</code> is an <code>L</code> algebra??</p>",
        "id": 216403395,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131719
    },
    {
        "content": "<p>even when I use <code>haveI</code> to give it that instance</p>",
        "id": 216403410,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131730
    },
    {
        "content": "<p>okay, I think I've almost figured it out</p>",
        "id": 216403644,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131867
    },
    {
        "content": "<p>I just need to get Lean to let me write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">psi.to_fun</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 216403722,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131898
    },
    {
        "content": "<p>which it won't let me do because it's very confused about <code>K</code> being an <code>L</code>-algebra??</p>",
        "id": 216403751,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131916
    },
    {
        "content": "<p>okay, I did it</p>",
        "id": 216403861,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605131999
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 216403932,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605132014
    },
    {
        "content": "<p>didn't realize I could use <code>rintros</code> that way</p>",
        "id": 216403957,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605132028
    },
    {
        "content": "<p>the <code>haveI</code> is unnecessary btw</p>",
        "id": 216403997,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605132063
    },
    {
        "content": "<p>although the sorries look a bit annoying</p>",
        "id": 216404062,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605132114
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216404203,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605132198
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216404212,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605132209
    },
    {
        "content": "<p>one left:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">right_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ψ</span> <span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h4</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 216404463,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605132422
    },
    {
        "content": "<p>the <code>commutes'</code> sorry is giving me trouble. I can prove it, but then <code>subst</code> breaks again!</p>",
        "id": 216405056,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605132836
    },
    {
        "content": "<p>wait what?</p>",
        "id": 216405236,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605132962
    },
    {
        "content": "<p>replacing sorry with a proof breaks that subst?</p>",
        "id": 216405276,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605132969
    },
    {
        "content": "<p>what's your proof?</p>",
        "id": 216405285,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605132975
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">f.commutes'</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">x</span><span class=\"o\">),}</span>\n</code></pre></div>",
        "id": 216405323,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133006
    },
    {
        "content": "<p>actually the first <code>simp</code> is unnecessary</p>",
        "id": 216405367,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133036
    },
    {
        "content": "<p>wait, I think I can fix it</p>",
        "id": 216405392,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133057
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x.val</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 216405635,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133209
    },
    {
        "content": "<p>woah</p>",
        "id": 216405656,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605133235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">},</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 216405735,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133294
    },
    {
        "content": "<p>golfed a little</p>",
        "id": 216405751,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133308
    },
    {
        "content": "<p>so is the moral just: intro as much stuff as you can, and hopefully things will get de-tangled?</p>",
        "id": 216405904,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605133394
    },
    {
        "content": "<p>I guess so</p>",
        "id": 216405926,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133417
    },
    {
        "content": "<p>at the level of raw functions the situation is basically the same as Kevin's example</p>",
        "id": 216405951,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133438
    },
    {
        "content": "<p>pushed</p>",
        "id": 216406188,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605133598
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/85fdd5f6a3b2cbff07e40a3f76b6d6408a07d39f\">https://github.com/leanprover-community/mathlib/commit/85fdd5f6a3b2cbff07e40a3f76b6d6408a07d39f</a> <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 216417997,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605144852
    },
    {
        "content": "<p>there was another one too! <a href=\"https://github.com/leanprover-community/mathlib/commit/0c4f7deb1e2573484e3069e342f35eaabdef59cc\">https://github.com/leanprover-community/mathlib/commit/0c4f7deb1e2573484e3069e342f35eaabdef59cc</a></p>",
        "id": 216419012,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605145890
    },
    {
        "content": "<p>Couldn't figure out how to golf <code>alg_hom_compose</code> though</p>",
        "id": 216419082,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605145958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/4982\">#4982</a></p>",
        "id": 216419357,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605146273
    },
    {
        "content": "<p>we should've been faster I guess</p>",
        "id": 216420160,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605147124
    },
    {
        "content": "<p>well, plenty of other PRs for us to do anyway</p>",
        "id": 216420179,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605147133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216419082\">said</a>:</p>\n<blockquote>\n<p>Couldn't figure out how to golf <code>alg_hom_compose</code> though</p>\n</blockquote>\n<p>I think you can almost did what you do for the others but Lean still gets hung up on figuring out how to find an instance of <code>algebra L K</code>. Not sure what to do about that in general</p>",
        "id": 216420360,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605147409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/39b4e9c474490a4cf78bb023d44ff0ced3e07310/src/subgroup/basic.lean#L28\">https://github.com/ImperialCollegeLondon/group-theory-game/blob/39b4e9c474490a4cf78bb023d44ff0ced3e07310/src/subgroup/basic.lean#L28</a></p>",
        "id": 216444538,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605172955
    },
    {
        "content": "<p>bundled normal subgroups in an Imperial repo</p>",
        "id": 216444553,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605172970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> We don't currently have that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[E : F]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span> is finite then every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> right?</p>",
        "id": 216547911,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605225964
    },
    {
        "content": "<p>also it would be nice to eventually have that if <code>finite_dimensional F E</code> then <code>fintype (E \\to\\_a[F] K)</code> no matter what <code>K</code> is</p>",
        "id": 216548044,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605226077
    },
    {
        "content": "<p>that might take more work though I guess</p>",
        "id": 216548095,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605226089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216547911\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> We don't currently have that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[E : F]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span> is finite then every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> right?</p>\n</blockquote>\n<p>This is mostly <code>is_integral_of_noetherian</code>, no?</p>",
        "id": 216548292,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605226253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216547911\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> We don't currently have that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[E : F]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span> is finite then every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> right?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> This might follow from results in the algebraic.lean file (namely: finite_dimensional implies algebraic, algebraic implies integral)</p>",
        "id": 216548763,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605226643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216548292\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216547911\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> We don't currently have that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[E : F]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span> is finite then every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> right?</p>\n</blockquote>\n<p>This is mostly <code>is_integral_of_noetherian</code>, no?</p>\n</blockquote>\n<p>You're right. I just didn't know that theorem was in mathlib</p>",
        "id": 216548952,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605226786
    },
    {
        "content": "<p>wait, what's the difference between <code>is_algebraic</code> and <code>is_integral</code>? Just that <code>is_integral</code> does not require the algebra to be commutative and does require the polynomial to be monic?</p>",
        "id": 216549351,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605227092
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> is there an easy proof that quotients/subgroups of solvable groups are solvable using the commutator definition of solvable?</p>",
        "id": 216549631,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605227359
    },
    {
        "content": "<p>subgroup yes: by induction H^(n) &lt;= G^(n)</p>",
        "id": 216549752,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605227452
    },
    {
        "content": "<p>it appears that one (minor) problem in proving that is that Lean doesn't know that a subgroup of a subgroup is a subgroup</p>",
        "id": 216550065,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605227654
    },
    {
        "content": "<p>at least it can't infer it automatically</p>",
        "id": 216550073,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605227668
    },
    {
        "content": "<p>sounds like you need a lift from <code>subgroup (H : subgroup G) -&gt; subgroup G</code></p>",
        "id": 216551247,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605228465
    },
    {
        "content": "<p>I agree. Though right now I'm going the lazy way and working at the level of sets instead</p>",
        "id": 216552737,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605229623
    },
    {
        "content": "<p>a little annoying though</p>",
        "id": 216552744,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605229633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I've started converting things to lift and should be able to finish subgroup of solvable group is solvable soon. But I have to go do something else first</p>",
        "id": 216558630,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605233658
    },
    {
        "content": "<p>okay, it's finished</p>",
        "id": 216568636,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605244614
    },
    {
        "content": "<p>though probably not very clean</p>",
        "id": 216568640,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605244627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/216549752\">said</a>:</p>\n<blockquote>\n<p>subgroup yes: by induction H^(n) &lt;= G^(n)</p>\n</blockquote>\n<p>now that I actually think of it, quotient is also easy. You just need that if there is a surjection from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">G_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">G_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> then there is a surjection from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>G</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>G</mi><mn>1</mn></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[G_1, G_1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>G</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>G</mi><mn>2</mn></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[G_2, G_2]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 216571438,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605248130
    },
    {
        "content": "<p>does anyone know why simp will not prove for me that bottom is less than or equal to top in a group</p>",
        "id": 217217672,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1605747556
    },
    {
        "content": "<p>it seems like there are lemmas for bottom being a least element and top being a maximal element, both tagged with simp</p>",
        "id": 217217697,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1605747587
    },
    {
        "content": "<p>it should just be a special case of \"bot_le\" or \"le_top\"</p>",
        "id": 217218726,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605748416
    },
    {
        "content": "<p>simp works for me: <code>example : (⊥ : subgroup G) ≤ (⊤ : subgroup G) := by simp</code></p>",
        "id": 217218818,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1605748486
    },
    {
        "content": "<p>okay, so my computer is just being weird</p>",
        "id": 217226394,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1605757021
    },
    {
        "content": "<p>that's what I thought</p>",
        "id": 217226397,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1605757026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> what happens when you try to use <code>simp</code>?</p>",
        "id": 217226498,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605757152
    },
    {
        "content": "<p>it just says that the tactic failed to simplify</p>",
        "id": 217233417,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1605766804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/217217697\">said</a>:</p>\n<blockquote>\n<p>it seems like there are lemmas for bottom being a least element and top being a maximal element, both tagged with simp</p>\n</blockquote>\n<p>What happens when you feed <code>simp</code> those lemmas directly?</p>",
        "id": 217234198,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605767810
    },
    {
        "content": "<p><code>simp</code>s job is usually to prove equalities or iffs, I'm always slightly confused about how much further beyond this its remit extends</p>",
        "id": 217234963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605768948
    },
    {
        "content": "<p>I guess the weird part is that <code>simp</code> is doing something different for Jordan than for Thomas and me</p>",
        "id": 217235302,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605769299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> what is the exact context in which you are trying to use <code>simp</code>? If it's in the middle of a longer lemma then the actual context may be different from the example that Thomas wrote</p>",
        "id": 217235419,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605769392
    },
    {
        "content": "<p>One of you isn't up to date. There was a lemma added about top and bot in group theory just a few days ago</p>",
        "id": 217238446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605772902
    },
    {
        "content": "<p>Surely <code>bot_le</code> and <code>le_top</code> have been in mathlib since forever though? Since they're just theorems about lattices or something</p>",
        "id": 217239086,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605773413
    },
    {
        "content": "<p>and git blame shows that the <code>complete_lattice</code> instance for <code>subgroup G</code> was last touched 6 months ago</p>",
        "id": 217239137,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605773493
    },
    {
        "content": "<p>I just remember that something changed with subgroups and bot and top very recently. It is one possibility for the explanation of the difference in behaviour.</p>",
        "id": 217239942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605774202
    },
    {
        "content": "<p>There was some missing lemma which was accidentally dropped when subgroups were bundled.</p>",
        "id": 217240032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605774282
    },
    {
        "content": "<p>I think it was the lemma that top (or bot) is normal</p>",
        "id": 217240206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605774447
    },
    {
        "content": "<p>Aah, so this sounds like it is unlikely to have made a difference</p>",
        "id": 217240567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605774736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I've proved the theorem, modulo the induction lemma</p>",
        "id": 217568346,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606076911
    },
    {
        "content": "<p>Nice! Tomorrow I'll think about proving the induction principle</p>",
        "id": 217594763,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606115545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I actually just did it. There's a finset lemma at the top of adjoin.lean that is in <a href=\"https://github.com/leanprover-community/mathlib/issues/5087\">#5087</a></p>",
        "id": 217597282,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606118356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I'm having some trouble with the galois_theory PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/4786#discussion_r529024783\">https://github.com/leanprover-community/mathlib/pull/4786#discussion_r529024783</a></p>\n<p>Do you think you could take a look at some point?</p>",
        "id": 217688959,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606169147
    },
    {
        "content": "<p>yeah</p>",
        "id": 217689878,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606169616
    },
    {
        "content": "<p><code>convert key</code> works for me</p>",
        "id": 217689900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606169633
    },
    {
        "content": "<p>oh no I spoke too soon.</p>",
        "id": 217690174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606169767
    },
    {
        "content": "<p>yeah it says <code>goals accomplished</code> but then also says either deterministic timeout or excessive memory consumption</p>",
        "id": 217690233,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606169814
    },
    {
        "content": "<p>it's done both to me now</p>",
        "id": 217690245,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606169821
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/5b58a38848e3e264f883aa2d7e6f712d\">key</a></p>",
        "id": 217690692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170043
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/581494327bb58f5d84bc17882304460a\">goal</a></p>",
        "id": 217690774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170092
    },
    {
        "content": "<p>oh crap they are identical!</p>",
        "id": 217690963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170183
    },
    {
        "content": "<p>well the problem seems to be entirely on the <code>fintype.card (↥F⟮α⟯ ≃ₐ[F] ↥F⟮α⟯)</code> side</p>",
        "id": 217691013,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170213
    },
    {
        "content": "<p>if I rearrange the order of <code>rw</code>s that's the part that never works</p>",
        "id": 217691040,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170230
    },
    {
        "content": "<p>actually I'm not so sure</p>",
        "id": 217691324,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170370
    },
    {
        "content": "<p>so in fact the problem is somewhere else.</p>",
        "id": 217691349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170392
    },
    {
        "content": "<p>also why is it so slow?</p>",
        "id": 217691363,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170415
    },
    {
        "content": "<p>because of the real problem</p>",
        "id": 217691387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170425
    },
    {
        "content": "<p>If you end with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>then you get an error on the <code>sorry</code> saying \"no goals to be solved\", so the <code>exact</code> is working fine.</p>",
        "id": 217691449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170462
    },
    {
        "content": "<p>the <code>goals accomplished</code> coexisting with <code>deterministic timeout</code> is pretty crazy</p>",
        "id": 217691513,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170484
    },
    {
        "content": "<p>The problem is when Lean's kernel then tries to verify the proof which all the tactics have put together</p>",
        "id": 217691524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170489
    },
    {
        "content": "<p>It's not the <code>exact key</code> timing out, it's something else.</p>",
        "id": 217691624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170550
    },
    {
        "content": "<p>so there's some extra goal hanging around which the infoview isn't showing you?</p>",
        "id": 217691647,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170569
    },
    {
        "content": "<p>because maybe Lean thinks it can be solved by the type inference engine or something?</p>",
        "id": 217691677,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170590
    },
    {
        "content": "<p>but which actually can't</p>",
        "id": 217691683,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170596
    },
    {
        "content": "<p>This is all at the edge of my understanding, but what I think is happening is that there's a buggy tactic somewhere.</p>",
        "id": 217691745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170613
    },
    {
        "content": "<p>like a tactic that thinks it solved some goal but actually didn't?</p>",
        "id": 217691780,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170631
    },
    {
        "content": "<p>Tactics are unverified code. They just throw together something which they claim is a proof, and then the kernel actually checks to see that it is a proof. I believe that the problem is that the kernel is having trouble checking that the proof constructed by the tactics is actually a proof, perhaps because it is not.</p>",
        "id": 217691821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170664
    },
    {
        "content": "<p>I think the problem is in one of the subproofs</p>",
        "id": 217691877,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170701
    },
    {
        "content": "<p>specifically the <code>replace h_splits</code> proof</p>",
        "id": 217691966,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170730
    },
    {
        "content": "<p>when I replace that with sorry everything works fine</p>",
        "id": 217691977,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170743
    },
    {
        "content": "<p>Oh good catch!</p>",
        "id": 217691990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170751
    },
    {
        "content": "<p>something to do with <code>ext1</code> I think</p>",
        "id": 217692034,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170785
    },
    {
        "content": "<p>Putting <code>sorry</code> after <code>ext1</code> and it still compiles.</p>",
        "id": 217692183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170851
    },
    {
        "content": "<p>I think the problem is the <code>exact (iso.symm.commutes x).symm</code> line.</p>",
        "id": 217692250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170896
    },
    {
        "content": "<p>how can <code>exact</code> cause a problem?</p>",
        "id": 217692280,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170910
    },
    {
        "content": "<p>If you change it to <code>convert</code> then you get the timeout again.</p>",
        "id": 217692293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606170916
    },
    {
        "content": "<p>also when I replace <code>ext1</code> with <code>ext</code> something funny happens</p>",
        "id": 217692310,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170927
    },
    {
        "content": "<p>I think Lean might be trying to prove that <code>E = F(a)</code></p>",
        "id": 217692353,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606170958
    },
    {
        "content": "<p><code>⊢ ⇑(iso.symm) (⇑(algebra_map F E) x) = ⇑(iso.symm.to_alg_hom.to_ring_hom.comp (algebra_map F E)) x</code></p>",
        "id": 217692732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171187
    },
    {
        "content": "<p>Lean is managing to prove this with <code>refl</code> and then the kernel seems to reject the proof.</p>",
        "id": 217692749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171201
    },
    {
        "content": "<p>Yeah I tried <code>rw</code>ing <code>(iso.symm.commutes x).symm</code> and got that goal</p>",
        "id": 217692888,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171267
    },
    {
        "content": "<p>which then <code>simp</code> <code>hint</code> and <code>tidy</code> couldn't figure out</p>",
        "id": 217692905,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171280
    },
    {
        "content": "<p>and <code>refl</code> works but causes the previous problems. So does <code>exact rfl</code></p>",
        "id": 217693028,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171334
    },
    {
        "content": "<p><code>unfold_coes</code> seems to hang Lean</p>",
        "id": 217693056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171358
    },
    {
        "content": "<p>Maybe <code>convert</code> is being too clever.</p>",
        "id": 217693154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171437
    },
    {
        "content": "<p><code>congr</code>and <code>refl</code> and <code>exact rfl</code> all cause the same problem</p>",
        "id": 217693203,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171454
    },
    {
        "content": "<p>oh I misunderstood what you said</p>",
        "id": 217693219,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171468
    },
    {
        "content": "<p>I've never seen <code>unfold_coes</code> hang Lean before.</p>",
        "id": 217693265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171509
    },
    {
        "content": "<p>This goal has somehow been corrupted. Perhaps by the <code>convert</code>.</p>",
        "id": 217693290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171527
    },
    {
        "content": "<p>Tactics can do that. They can literally make goals which don't make any sense.</p>",
        "id": 217693312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171540
    },
    {
        "content": "<p>yeah I think you're right that the convert is probably to blame</p>",
        "id": 217693384,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171569
    },
    {
        "content": "<p>So maybe it is the <code>ext</code> after all.</p>",
        "id": 217693385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171569
    },
    {
        "content": "<p>lol</p>",
        "id": 217693396,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171576
    },
    {
        "content": "<p>I don't know which</p>",
        "id": 217693402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171585
    },
    {
        "content": "<p>did you say you fiddled with the <code>ext</code>?</p>",
        "id": 217693416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171593
    },
    {
        "content": "<p><code>algebra_map F ↥F⟮α⟯ = iso.symm.to_alg_hom.to_ring_hom.comp (algebra_map F E)</code></p>",
        "id": 217693502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171670
    },
    {
        "content": "<p>What does that mean mathematically?</p>",
        "id": 217693509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171678
    },
    {
        "content": "<p>some evidence: this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 217693621,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171738
    },
    {
        "content": "<p>I see. <code>iso</code> is some isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">F(\\alpha)\\to E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span></p>",
        "id": 217693645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171753
    },
    {
        "content": "<p>yes, established earlier in the proof</p>",
        "id": 217693668,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171767
    },
    {
        "content": "<p>so the goal seems to make sense mathematically, and <code>ext</code> certainly seems like the next step.</p>",
        "id": 217693767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171816
    },
    {
        "content": "<p>this proof fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 217693774,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171822
    },
    {
        "content": "<p>even though it works after the convert for the same goal in the original proof</p>",
        "id": 217693795,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171843
    },
    {
        "content": "<p>so I think <code>convert</code> is probably the culprit</p>",
        "id": 217693799,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171854
    },
    {
        "content": "<p><code>show_term {ext1}</code> says it's applying <code>ring_hom.ext</code></p>",
        "id": 217693856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171917
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"n\">apply</span> <span class=\"n\">ring_hom.ext</span><span class=\"o\">,</span>\n     <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n     <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works after the <code>convert</code>, so that's a way of unfolding the coes</p>",
        "id": 217693914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171944
    },
    {
        "content": "<p>actually, I was too hasty but I'm not sure it mattered. This proof hangs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">iso.symm.commutes</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 217693943,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606171968
    },
    {
        "content": "<p>but now <code>rw (iso.symm.commutes x).symm,</code> is failing for me.</p>",
        "id": 217693974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606171992
    },
    {
        "content": "<p>hmm it works for me but then causes the same problems as before</p>",
        "id": 217693992,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172009
    },
    {
        "content": "<p>so now I think you're right and <code>ext</code> really is the problem</p>",
        "id": 217694002,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172022
    },
    {
        "content": "<p>lol</p>",
        "id": 217694105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172090
    },
    {
        "content": "<p>I was about to say \"I think you're right, the problem must be with the <code>convert</code></p>",
        "id": 217694116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172104
    },
    {
        "content": "<p>but there's no more <code>convert</code> anywhere</p>",
        "id": 217694150,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172125
    },
    {
        "content": "<p>this proof works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- sorry,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">intermediate_field.top_equiv</span>\n    <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">h.separable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.normal</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_equiv.findim_eq</span> <span class=\"n\">iso.to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 217694261,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172180
    },
    {
        "content": "<p>this proof has all the same problems as the original</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- sorry,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">intermediate_field.top_equiv</span>\n    <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">h.separable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.normal</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">iso.symm.commutes</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_equiv.findim_eq</span> <span class=\"n\">iso.to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 217694331,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172233
    },
    {
        "content": "<p>It's just <code>apply ring_hom.ext</code>.</p>",
        "id": 217694574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172412
    },
    {
        "content": "<p>yeah but there's literally no more <code>convert</code>s in the proof</p>",
        "id": 217694726,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172523
    },
    {
        "content": "<p>annoyingly, <code>extract_goal</code> doesn't give you a failing example.</p>",
        "id": 217694788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172554
    },
    {
        "content": "<p>well this also fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ring_hom.ext</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">iso.symm.commutes</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 217694837,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172589
    },
    {
        "content": "<p>maybe it's the <code>refl</code> that's the problem??</p>",
        "id": 217695071,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172668
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span>\n            <span class=\"o\">(</span><span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span>\n    <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ring_hom.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">iso.symm.commutes</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works fine</p>",
        "id": 217695254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172759
    },
    {
        "content": "<p>I used <code>extract_goal</code> to get exactly what we thought the problem was.</p>",
        "id": 217695301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172785
    },
    {
        "content": "<p>this is bizarre</p>",
        "id": 217695316,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172794
    },
    {
        "content": "<p>If we could minimise we could ask a much better question.</p>",
        "id": 217695335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172802
    },
    {
        "content": "<p>yeah</p>",
        "id": 217695353,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172813
    },
    {
        "content": "<p>I just ran into a weird thing where <code>dsimp</code> does something and <code>squeeze_dsimp</code> suggests <code>dsimp only</code> but <code>dsimp only</code> fails</p>",
        "id": 217695429,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172876
    },
    {
        "content": "<p>This works, with the <code>sorry</code> in the other place. Maybe you already said that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_aut_eq_findim_of_is_galois</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">h.separable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.normal</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n       <span class=\"n\">apply</span> <span class=\"n\">ring_hom.ext</span><span class=\"o\">,</span>\n       <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n       <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">iso.symm.commutes</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_equiv.findim_eq</span> <span class=\"n\">iso.to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217695515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172926
    },
    {
        "content": "<p>ohh I didn't try that</p>",
        "id": 217695551,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172953
    },
    {
        "content": "<p>I think this is just an indication that we're looking in the wrong place.</p>",
        "id": 217695557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606172958
    },
    {
        "content": "<p>I tried putting sorry in both</p>",
        "id": 217695558,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172959
    },
    {
        "content": "<p>yeah I agree</p>",
        "id": 217695565,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172965
    },
    {
        "content": "<p>so a sorry anywhere in the proof makes it work??</p>",
        "id": 217695575,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606172974
    },
    {
        "content": "<p>no</p>",
        "id": 217695825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173116
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">):</span>\n  <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_aut_eq_findim_of_is_galois</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">iso</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- have iso : F⟮α⟯ ≃ₐ[F] E,</span>\n  <span class=\"c1\">-- {</span>\n  <span class=\"c1\">--   -- sorry,</span>\n  <span class=\"c1\">--   rw hα,</span>\n  <span class=\"c1\">--   exact intermediate_field.top_equiv</span>\n  <span class=\"c1\">--   },</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">h.separable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.normal</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ring_hom.ext</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">iso.symm.commutes</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_equiv.findim_eq</span> <span class=\"n\">iso.to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- sorry,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217695860,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173123
    },
    {
        "content": "<p>so I think <code>iso</code> is somehow causing problems</p>",
        "id": 217695943,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173148
    },
    {
        "content": "<p>I conjecture that replacing <code>iso</code> with a term mode proof will fix the problems</p>",
        "id": 217695999,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173200
    },
    {
        "content": "<p>it fails again when I fill in <code>foo</code> with a tactic mode proof</p>",
        "id": 217696023,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173223
    },
    {
        "content": "<p>Your <code>lemma</code> should be a <code>def</code></p>",
        "id": 217696330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173410
    },
    {
        "content": "<p><code> let iso : F⟮α⟯ ≃ₐ[F] E,</code></p>",
        "id": 217696411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173475
    },
    {
        "content": "<p>ohh</p>",
        "id": 217696466,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173491
    },
    {
        "content": "<p>unfortunately this doesn't fix it :-(</p>",
        "id": 217696468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173494
    },
    {
        "content": "<p>You shouldn't be proving this in tactic mode</p>",
        "id": 217696537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173555
    },
    {
        "content": "<p>yeah, see my conjecture</p>",
        "id": 217696557,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173570
    },
    {
        "content": "<p>This is the problem</p>",
        "id": 217696562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173574
    },
    {
        "content": "<p>I mean, this is _a_ problem</p>",
        "id": 217696571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173586
    },
    {
        "content": "<p>Just saw this thread. Is the consensus that tactic-mode iso is likely the only culprit?</p>",
        "id": 217696681,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606173654
    },
    {
        "content": "<p>The proof of <code>iso</code> should be to beef up <code>h\\alpha</code> to an isomorphism and then to apply transitivity of isomorphisms.</p>",
        "id": 217696712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173680
    },
    {
        "content": "<p>Lean is getting stuck on the <code>eq.rec</code> which the <code>rw</code> is inserting.</p>",
        "id": 217696825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173735
    },
    {
        "content": "<p>If you change the <code>have</code> to a <code>let</code> (which it should have been) then the problems show up earlier with stuff taking a long time.</p>",
        "id": 217696860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173774
    },
    {
        "content": "<p>how can I say very concisely in Lean that if <code>A = B</code> then <code>A \\equiv B</code>?</p>",
        "id": 217696902,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173819
    },
    {
        "content": "<p>I can't find any lemma to that effect in mathlib</p>",
        "id": 217696929,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/217696681\">said</a>:</p>\n<blockquote>\n<p>Just saw this thread. Is the consensus that tactic-mode iso is likely the only culprit?</p>\n</blockquote>\n<p>I'm not confident but I think that's the strongest contender right now</p>",
        "id": 217696990,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173857
    },
    {
        "content": "<p>That's a definition, not a lemma.</p>",
        "id": 217697004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173864
    },
    {
        "content": "<p>well I can't find that definition either</p>",
        "id": 217697026,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606173889
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Linear equivalence between two equal submodules. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">equiv.set.of_eq</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217697082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173950
    },
    {
        "content": "<p>Not the one you want, but it looks like we're looking for <code>of_eq</code></p>",
        "id": 217697143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606173978
    },
    {
        "content": "<p>If the algebra version is not in mathlib, we can just add it, right?</p>",
        "id": 217697167,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606174000
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">algebra.of_eq</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">y.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>That's a start</p>",
        "id": 217697451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606174226
    },
    {
        "content": "<p>There's no <code>alg_equiv.comp</code>?</p>",
        "id": 217697687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606174441
    },
    {
        "content": "<p>oh it's <code>trans</code></p>",
        "id": 217697774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606174502
    },
    {
        "content": "<p>yeah but I'm having a hard time using it</p>",
        "id": 217697812,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606174527
    },
    {
        "content": "<p>the types of things don't quite match up</p>",
        "id": 217697822,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606174535
    },
    {
        "content": "<p>How do I turn an <code>intermediate_field</code> into a <code>subalgebra</code>?</p>",
        "id": 217698064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606174726
    },
    {
        "content": "<p><code>h\\alpha</code> is an equality of <code>intermediate_field</code>s</p>",
        "id": 217698083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606174744
    },
    {
        "content": "<p><code>.to_subalgebra</code></p>",
        "id": 217698123,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606174791
    },
    {
        "content": "<p>Here's a cool error (note I do _not_ have <code>pp.all</code> on):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">(</span><span class=\"n\">algebra.of_eq</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">hα'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">intermediate_field.top_equiv</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">intermediate_field.top_equiv</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">alg_equiv</span> <span class=\"n\">F</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.has_coe_to_sort</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.complete_lattice</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))))</span>\n    <span class=\"n\">E</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.has_coe_to_sort</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.complete_lattice</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.has_coe_to_sort</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.complete_lattice</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.has_coe_to_sort</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.complete_lattice</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.complete_lattice</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">intermediate_field.complete_lattice</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n    <span class=\"n\">_inst_3</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">alg_equiv</span> <span class=\"n\">F</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort_trans</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">F</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.has_coe_to_sort</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">F</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base_aux</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span> <span class=\"n\">E</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_semimodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                   <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra.coe_to_submodule</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                <span class=\"n\">_inst_3</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                   <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                      <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.subalgebra.complete_lattice</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                      <span class=\"n\">_inst_3</span><span class=\"o\">))))))</span>\n    <span class=\"n\">E</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra.semiring</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n       <span class=\"n\">_inst_3</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_top.top</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top.to_has_top</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">F</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">E</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n                <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice.to_order_top</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 217698404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606174986
    },
    {
        "content": "<p>lol</p>",
        "id": 217698430,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175017
    },
    {
        "content": "<p>So perhaps we're getting closer to the heart of the problem</p>",
        "id": 217698434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175021
    },
    {
        "content": "<p>Unfortunately I need to sleep. I think the challenge is to prove <code>iso : F⟮α⟯ ≃ₐ[F] E</code> using transitivity of isomorphisms, but it seems to me that there is some sort of subtle problem, perhaps coming from structure maps not being defeq.</p>",
        "id": 217698598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175144
    },
    {
        "content": "<p>okay, good night</p>",
        "id": 217698712,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175203
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">):</span>\n  <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">alg_equiv.trans</span> <span class=\"n\">_</span> <span class=\"n\">intermediate_field.top_equiv</span><span class=\"o\">,</span>\n    <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but <code>library_search</code> suggest <code>exact bar _</code> and when I try that it fails</p>",
        "id": 217698735,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175229
    },
    {
        "content": "<p>Try <code>convert bar _</code></p>",
        "id": 217698751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175250
    },
    {
        "content": "<p>although again you shouldn't be using <code>convert</code> in a definition.</p>",
        "id": 217698771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175275
    },
    {
        "content": "<p>also this gives me a very weird error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 217698822,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175301
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">bar</span> <span class=\"n\">hα</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hα</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>",
        "id": 217698837,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175315
    },
    {
        "content": "<p>And you shouldn't be sorrying the definition of <code>bar</code>. Sorrying definitions can lead to trouble.</p>",
        "id": 217698841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175319
    },
    {
        "content": "<p>I'm just trying to figure out what's going on</p>",
        "id": 217698856,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175332
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">algebra.of_eq</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">y.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This is better because I only sorry the proofs.</p>",
        "id": 217698858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175337
    },
    {
        "content": "<p>But I do introduce an <code>eq.subst</code> in the definition, which is already a bit hairy.</p>",
        "id": 217698897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175380
    },
    {
        "content": "<p><code>have := bar h\\a</code> is problematic because again you're using <code>have</code> for a definition, but also Lean can't be expected to figure out A from <code>h</code>, that's what the error means.</p>",
        "id": 217698993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175448
    },
    {
        "content": "<p>Just because B is an A-algebra doesn't mean that B can't be a W-algebra for some random other W, so the unifier can't solve the problem.</p>",
        "id": 217699024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175484
    },
    {
        "content": "<p>oh I see</p>",
        "id": 217699051,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175516
    },
    {
        "content": "<p>I cannot see how to avoid <code>eq.subst</code> or <code>eq.rec</code> here.</p>",
        "id": 217699208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175643
    },
    {
        "content": "<p>Why not just ask how to construct <code>F⟮α⟯ ≃ₐ[F] E</code> from <code>F⟮α⟯ = ⊤</code>? That sounds like a reasonable question.</p>",
        "id": 217699262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175678
    },
    {
        "content": "<p>Or you could just change the <code>have</code> to a <code>let</code> in the PR (note that the PR still contains the error in the definition of <code>iso</code>) and then ask people to have a look at that, but they're more likely to try the simpler question.</p>",
        "id": 217699322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175741
    },
    {
        "content": "<p>Note finally that <em>exactly</em> the same thing happened to Johan, Patrick and I when we were finishing the perfectoid project. We had a file which we thought was the end of it all, but couldn't tie everything together. Mario sorted out our problems in about 15 minutes flat.</p>",
        "id": 217699401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175795
    },
    {
        "content": "<p>By then we'd figured out the knack of asking the right questions of course. We weren't expecting Mario to know what a perfectoid space was :-)</p>",
        "id": 217699441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175830
    },
    {
        "content": "<p>Yeah I think I can figure out how to ask a reasonable version of this question</p>",
        "id": 217699459,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175855
    },
    {
        "content": "<p>We had exactly the same sort of problem, a proof which should have been refl but was instead a big time-out.</p>",
        "id": 217699471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175864
    },
    {
        "content": "<p>Sorry I couldn't solve it. I'm still learning when it comes to technical issues like this.</p>",
        "id": 217699487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606175879
    },
    {
        "content": "<p>lol no problem. I think we understand much better now what's going on</p>",
        "id": 217699549,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606175906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_aut_eq_findim_of_is_galois</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hα'</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯.</span><span class=\"n\">to_subalgebra</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- { rw hα,</span>\n  <span class=\"c1\">--   exact intermediate_field.top_equiv },</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">h.separable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.normal</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_equiv.findim_eq</span> <span class=\"n\">iso.to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217699798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176099
    },
    {
        "content": "<p>this compiles and the only sorrys are props.</p>",
        "id": 217699805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176118
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_aut_eq_findim_of_is_galois</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hα'</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯.</span><span class=\"n\">to_subalgebra</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">h.separable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.normal</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_equiv.findim_eq</span> <span class=\"n\">iso.to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217699948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176216
    },
    {
        "content": "<p>oh nice</p>",
        "id": 217700071,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606176280
    },
    {
        "content": "<p>I bet if you fill in those sorries it will compile.</p>",
        "id": 217700142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176338
    },
    {
        "content": "<p>I think the heart of the matter was always the bad definition of <code>iso</code>. Initially the problem was that it was defined using <code>have</code> so Lean didn't even have access to the maps. That was why we were getting timeout behaviour -- Lean was looking for stuff that wasn't there. When we changed it to <code>let</code> it could see the maps but they were some diabolical things, so the proof started timing out and Lean was now in some sense behaving \"normally\" (no weird errors, just timeouts because Lean could not reduce the maps to check they were equal). Here the key difference is that I am writing down the maps explicitly, so they're really easy to work with.</p>",
        "id": 217700304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176470
    },
    {
        "content": "<p>The proof takes a while to compile. Here's how to work on it: add <code>sorry end #exit</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_aut_eq_findim_of_is_galois</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">intermediate_field.mem_top</span> <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span> <span class=\"kd\">end</span> <span class=\"k\">#exit</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 217700453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176602
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_aut_eq_findim_of_is_galois</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_galois</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">field.exists_primitive_element</span> <span class=\"n\">h.1</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">intermediate_field.mem_top</span> <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.is_integral</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sep</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">h.separable</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.normal</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_splits</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">polynomial.splits_comp_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">iso.symm.to_alg_hom.to_ring_hom</span> <span class=\"n\">h_splits</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">linear_equiv.findim_eq</span> <span class=\"n\">iso.to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">card_eq_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">iso.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span> <span class=\"n\">iso</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_eq_card</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_field.adjoin_simple.card_aut_eq_findim</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">H</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_splits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Compiles!</p>",
        "id": 217700682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176746
    },
    {
        "content": "<p>:D</p>",
        "id": 217700693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176761
    },
    {
        "content": "<p>It's amazing how stopping for 5 minutes and doing something else can inspire you.</p>",
        "id": 217700704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176779
    },
    {
        "content": "<p>Actually this was something I learnt in Berkeley. I would often be working late at night in the department on something, and then get hungry, so I'd have to stop working and wander up to Euclid or Telegraph to get something to eat.</p>",
        "id": 217700795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176859
    },
    {
        "content": "<p>yeah I also just arrived at that proof</p>",
        "id": 217700816,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606176884
    },
    {
        "content": "<p>the <code>intermediate_field.mem_top</code> was a little tricky</p>",
        "id": 217700828,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606176898
    },
    {
        "content": "<p>And it was amazing how many times during that walk I thought \"hey why don't I try something completely different\" or \"hey, actually, it's completely obvious that what I've been trying to do for the last 4 hours can never work\"</p>",
        "id": 217700832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176901
    },
    {
        "content": "<p>unfortunately I can no longer go to Euclid for dinner :'(</p>",
        "id": 217700851,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606176918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/217700816\">said</a>:</p>\n<blockquote>\n<p>yeah I also just arrived at that proof</p>\n</blockquote>\n<p>Yeah the entire process was collaborative.</p>",
        "id": 217700855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176925
    },
    {
        "content": "<p>or Evans</p>",
        "id": 217700857,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606176926
    },
    {
        "content": "<p>That's the really great thing about Zulip. When I was in Berkeley we had sci.math.research which moved at a far slower pace. This really makes a difference.</p>",
        "id": 217700890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606176960
    },
    {
        "content": "<p>I can't figure out why <code>trivial</code> didn't do the <code>intermediate_field.mem_top</code> thing. I also got stuck there.</p>",
        "id": 217700964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177007
    },
    {
        "content": "<p>I've heard so many stories of the days of usenet</p>",
        "id": 217700971,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177013
    },
    {
        "content": "<p>but I was born at the end of the eternal september</p>",
        "id": 217700982,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177027
    },
    {
        "content": "<p>s.m.r was moderated so it was impossible to have a conversation which went at any speed beyond about 2 exchanges per day.</p>",
        "id": 217700997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177043
    },
    {
        "content": "<p>But you have to put this into context -- my supervisor couldn't even have that.</p>",
        "id": 217701010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177065
    },
    {
        "content": "<p>s.m.r. gave you access to experts. It was a game-changer.</p>",
        "id": 217701015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177076
    },
    {
        "content": "<p>Before email you asked your advisor and if they couldn't help you were _stuck_.</p>",
        "id": 217701069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177101
    },
    {
        "content": "<p>whereas I could email the author of the paper to ask them about the proof of lemma 13.7 and if I was lucky they'd respond.</p>",
        "id": 217701087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177125
    },
    {
        "content": "<p>(and if you made it clear you'd thought hard and weren't asking a stupid question, they often would respond, unless they were too old to use email)</p>",
        "id": 217701122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177162
    },
    {
        "content": "<p>Then mathoverflow came, and now we have things like this.</p>",
        "id": 217701136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177183
    },
    {
        "content": "<p>In my academic lifetime I've seen several revolutions. And you kids just think it's all normal :-)</p>",
        "id": 217701193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177204
    },
    {
        "content": "<p>I am really surprised my partner has not come and grabbed me by the ear and told me it's time for bed.</p>",
        "id": 217701214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177240
    },
    {
        "content": "<p>She's engrossed in something else in the next room :-)</p>",
        "id": 217701224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177254
    },
    {
        "content": "<p>Anyway, what's going on with <code>intermediate_field.mem_top</code>? How can that not be defeq to <code>x \\in univ</code>, and that's defeq to <code>true</code>, so <code>trivial</code> usually solves these things.</p>",
        "id": 217701263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177307
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_top</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subfield.subset_closure</span> <span class=\"bp\">$</span> <span class=\"n\">or.inr</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>o_O</p>",
        "id": 217701323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177336
    },
    {
        "content": "<p>I think <code>top : intermediate_field F E</code> must be defined as the closure of univ!</p>",
        "id": 217701355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177383
    },
    {
        "content": "<p>yeah I guess so</p>",
        "id": 217701364,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177392
    },
    {
        "content": "<p>I think the problem might be that the lattice structure comes from a galois insertion between <code>adjoin</code> and the forgetful functor</p>",
        "id": 217701408,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177428
    },
    {
        "content": "<p>but I don't really know what I'm talking about</p>",
        "id": 217701423,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177437
    },
    {
        "content": "<p>so <code>\\top</code> in intermediate fields is really something like F adjoin (<code>\\top</code> in sets)</p>",
        "id": 217701523,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177508
    },
    {
        "content": "<p>and adjoin is defined using subfield.subset_closure</p>",
        "id": 217701549,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177540
    },
    {
        "content": "<p>I think this is Thomas' doing. He's proved the existence of a Galois insertion between coe and adjoin, and then used that to inherit the structure of a complete lattice on the intermediate fields coming from the complete lattice structure on the subsets. Presumably as part of that, top is defined to be something like \"adjoin everything\" rather than \"everything\". The CS people might be a bit upset about that, but I think this is OK; the way to prove that you're in top is <code>mem_top</code>, not some clever proof like <code>trivial</code> which I was trying. We shouldn't be relying on definitional equality.</p>",
        "id": 217701637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177603
    },
    {
        "content": "<p>wait, isn't that basically what I just said?</p>",
        "id": 217701657,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177631
    },
    {
        "content": "<p>Yes, but I hadn't read what you were typing, I was too busy typing it myself :D</p>",
        "id": 217701673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177655
    },
    {
        "content": "<p>lol, happens to me sometimes too</p>",
        "id": 217701686,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606177667
    },
    {
        "content": "<p>I am terrible at names, and it's very rude to get someone's name wrong, so I scrolled up all the messages we just sent just to confirm that Thomas' name was Thomas. I didn't see your messages at all but I could still see the text box I was typing in.</p>",
        "id": 217701766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606177745
    },
    {
        "content": "<p>Yes, it's my fault. I redefined top to come from the Galois insertion, so that it would work nicely with the ordering.</p>",
        "id": 217702722,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606178722
    },
    {
        "content": "<p>There was a preliminary version of top in the intermediate_field.lean file, but I deleted it because it conflicted with the Galois insertion top</p>",
        "id": 217702741,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606178748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/217702722\">said</a>:</p>\n<blockquote>\n<p>Yes, it's my fault. I redefined top to come from the Galois insertion, so that it would work nicely with the ordering.</p>\n</blockquote>\n<p>I think it's fine</p>",
        "id": 217702950,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606178932
    },
    {
        "content": "<p>I also think it's fine. The correct way to do stuff is via the API. I was being cocky thinking <code>trivial</code> would do it. There are various tricks you can do with sets because sets are just logic in disguise but the moment you move away from them, even to finsets, you shouldn't expect the same tricks to work (and they often don't)</p>",
        "id": 217703901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606179867
    },
    {
        "content": "<p>Congratulations!!! You did it!</p>",
        "id": 218065503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606464826
    },
    {
        "content": "<p>I hope the reviewing process wasn't too much of a pain.</p>",
        "id": 218065514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606464836
    },
    {
        "content": "<p>But you can be proud of the end result!</p>",
        "id": 218065562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606464850
    },
    {
        "content": "<p>It's great to have this PRed. Thanks so much to you and <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  for the help!</p>",
        "id": 218065588,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606464898
    },
    {
        "content": "<p>Yes this is a great step forward</p>",
        "id": 218065609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606464916
    },
    {
        "content": "<p>Are you going to talk about this at LT2021?</p>",
        "id": 218065617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606464923
    },
    {
        "content": "<p>It's been something I've been wanting to see in mathlib for years</p>",
        "id": 218065625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606464936
    },
    {
        "content": "<p>Not least because I was teaching it when I got into lean :-)</p>",
        "id": 218065636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606464955
    },
    {
        "content": "<blockquote>\n<p>It's been something I've been wanting to see in mathlib for years</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> As in, since you first touched lean (-;</p>",
        "id": 218065680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606464973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/218065617\">said</a>:</p>\n<blockquote>\n<p>Are you going to talk about this at LT2021?</p>\n</blockquote>\n<p>It's on our radar, and we'll discuss it at the next meeting.</p>",
        "id": 218065703,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606465000
    },
    {
        "content": "<p>My understanding of the vision of the organisers is that this stuff would be perfect for a LT2021 talk. They're not looking for big one hour talks on huge developments, they're looking for an overview of what's happening in the Lean ecosystem right now by the people who are making it happen, and even work in progress talks are fine. I think they're hoping to see 20 minute talks on cool new developments.</p>",
        "id": 218068702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606467519
    },
    {
        "content": "<p>When I try to state the lemma about the nth commutator of H being the same of the nth commutator of H as a subgroup of G, Lean keeps telling me there is a type error</p>",
        "id": 218190687,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606614618
    },
    {
        "content": "<p>I tried to state the result as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lift_nth_commutator_eq_nth_commutator_lift</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">](</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nth_commutator</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"o\">:</span><span class=\"n\">subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">=</span> <span class=\"n\">general_nth_commutator</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 218190700,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606614658
    },
    {
        "content": "<p>but VS Code keeps saying \"unexpected argument at application<br>\n  general_nth_commutator G<br>\ngiven argument<br>\n  G<br>\nexpected argument<br>\n  ↥H\"<br>\nand<br>\n\"type mismatch at application<br>\n  general_nth_commutator G H<br>\nterm<br>\n  H<br>\nhas type<br>\n  subgroup G<br>\nbut is expected to have type<br>\n  subgroup ↥H\"</p>",
        "id": 218190758,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606614730
    },
    {
        "content": "<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">general_nth_commutator</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 218190769,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606614789
    },
    {
        "content": "<p>so I'm not quite sure what the issue is <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span>  <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span></p>",
        "id": 218190779,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606614824
    },
    {
        "content": "<p>Shouldn't it be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lift_nth_commutator_eq_nth_commutator_lift</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">nth_commutator</span> <span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">=</span> <span class=\"n\">general_nth_commutator</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 218191093,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606615349
    },
    {
        "content": "<p>Like why are you using the <code>top</code> subgroup of <code>H</code> rather than just <code>H</code> itself (considered as a group)</p>",
        "id": 218191101,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606615379
    },
    {
        "content": "<p>also btw <code>G</code> and <code>H</code> are probably already declared in the file and you don't need to declare them again</p>",
        "id": 218191126,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606615410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/218191101\">said</a>:</p>\n<blockquote>\n<p>Like why are you using the <code>top</code> subgroup of <code>H</code> rather than just <code>H</code> itself (considered as a group)</p>\n</blockquote>\n<p>So the problem is that <code>nth_commutator (\\top : subgroup H) n</code> gives you a subgroup of <code>(\\top : subgroup H)</code> and then <code>lift</code> lifts it to a subgroup of <code>H</code></p>",
        "id": 218191178,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606615487
    },
    {
        "content": "<p>but then Lean expects the other side to be a subgroup of <code>H</code> as well, which it's not</p>",
        "id": 218191184,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606615504
    },
    {
        "content": "<p>instead you should just use <code>nth_commutator H n</code> which will give you a subgroup of <code>H</code> which <code>lift</code> will then lift to a subgroup of <code>G</code></p>",
        "id": 218191196,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606615533
    },
    {
        "content": "<p>also why does the name have two lifts in it when there is only one lift in the statement? Maybe it should be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nth_commutator_lift_eq_general_nth_commutator</span>\n</code></pre></div>",
        "id": 218191547,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606616173
    },
    {
        "content": "<p>Yeah, I declared them explicitly just in case that had something to do with the error, but it doesn't make a difference</p>",
        "id": 218228439,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606680964
    },
    {
        "content": "<p>but yes, the restatement fixes the problem; I don't know why I forgot how the arguments to nth_commutator work</p>",
        "id": 218228470,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606681013
    },
    {
        "content": "<p>at any rate, could someone remind me of the file where the lift is defined? the proof of this lemma is complete except for showing that the lift of the top subgroup of H is H, and I presume the result stating this is proven in that file</p>",
        "id": 218228531,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1606681121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306638\">Jordan Brown</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/218228531\">said</a>:</p>\n<blockquote>\n<p>at any rate, could someone remind me of the file where the lift is defined? the proof of this lemma is complete except for showing that the lift of the top subgroup of H is H, and I presume the result stating this is proven in that file</p>\n</blockquote>\n<p>It's <a href=\"https://github.com/leanprover-community/mathlib/blob/deb4606fc27ca6f720c5d94a126205f27d27042b/src/group_theory/subgroup.lean#L755\">here</a>. I didn't prove that <code>(\\top : subgroup H).lift = H</code> but it shouldn't be too hard to do using <code>mem_top</code>.</p>",
        "id": 218228925,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606681738
    },
    {
        "content": "<p>It also might be helpful to prove that if <code>(K : subgroup H)</code> then <code>K.lift \\leq H</code></p>",
        "id": 218228940,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606681760
    },
    {
        "content": "<p>which I didn't do either</p>",
        "id": 218228946,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606681765
    },
    {
        "content": "<p>the proofs should be somewhat similar to <code>mem_lift</code> or <code>eq_bot_iff_lift_eq_bot</code></p>",
        "id": 218228998,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606681813
    },
    {
        "content": "<p>You won't find this lift stuff in the mathlib documentation btw because it's not in mathlib; it's just something I defined</p>",
        "id": 218229010,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1606681855
    },
    {
        "content": "<p>Hey, are you guys going to (a) write up your proof of the Galois correspondence for the special issue of Exp Math and (b) offer to talk at LT2021?</p>",
        "id": 218232893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606687216
    },
    {
        "content": "<p>(b) Yes, we're planning on it. (a) We haven't discussed it. I would be open to doing it, but we'd really need to get a move on.</p>",
        "id": 218233098,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1606687555
    },
    {
        "content": "<p>I am fully intending on writing up the formalisation of schemes and I haven't started yet either</p>",
        "id": 218236430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606693127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> Does mathlib know about the compositum of two <code>intermediate_field</code>s?</p>",
        "id": 218918586,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607144370
    },
    {
        "content": "<p>I think probably not</p>",
        "id": 218918587,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607144376
    },
    {
        "content": "<p>I think it must, because of the lattice stuff proved in adjoin.lean</p>",
        "id": 218919554,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607145891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/218919554\">said</a>:</p>\n<blockquote>\n<p>I think it must, because of the lattice stuff proved in adjoin.lean</p>\n</blockquote>\n<p>ohh, you must be right</p>",
        "id": 218919615,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607146002
    },
    {
        "content": "<p>so the compositum of <code>L</code> and <code>K</code> is probably <code>adjoin F (K \\cup L)</code>?</p>",
        "id": 218919628,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607146034
    },
    {
        "content": "<p>if you unroll the definitions?</p>",
        "id": 218919631,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607146042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> <a href=\"https://github.com/leanprover-community/mathlib/commit/b26d7940d757038d9e61db257f017e0a952a8bcb\">https://github.com/leanprover-community/mathlib/commit/b26d7940d757038d9e61db257f017e0a952a8bcb</a></p>",
        "id": 218919691,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607146139
    },
    {
        "content": "<p>I guess so, but it's also probably got specific notation (join or meet?)</p>",
        "id": 218919847,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607146402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/218919847\">said</a>:</p>\n<blockquote>\n<p>I guess so, but it's also probably got specific notation (join or meet?)</p>\n</blockquote>\n<p>Yeah I agree. I just think it's a little funny</p>",
        "id": 218920009,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607146706
    },
    {
        "content": "<p>I thought the lattice notation was funny for ideals! But then I got used to it. Now I'm of the opinion it should be used everywhere, eg for subsets of a set :-)</p>",
        "id": 218928741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607163275
    },
    {
        "content": "<p>The fact that adjoin S \\lub adjoin T = adjoin (S union T) might not be true by definition, it depends on how it was all set up, but it shouldn't be hard to prove, it will be a few lines of lemmas about Galois insertions</p>",
        "id": 218928807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607163391
    },
    {
        "content": "<p>I thought it might be a good idea to write down somewhere what still needs to be done to prove the abel-ruffini theorem. Maybe the list of steps is basically obvious or maybe I'm leaving out something or there's a better way to do parts of it. But here goes. In all the steps below, I will assume that <code>E</code> is a field extension of a field <code>F</code> and primarily talk about <code>intermediate_field</code>s of <code>E/F</code>.</p>\n<ol>\n<li>If <code>L</code> and <code>K</code> are <code>intermediate_field F E</code>s which are galois over <code>F</code> then the compositum <code>sup K L</code> is also galois over <code>F</code> and the galois group embeds into the product of the galois groups of <code>K/F</code> and <code>L/F</code></li>\n<li>If <code>F \\le L \\le K</code> is a tower of <code>intermediate_field F E</code>s where <code>L</code> is galois over <code>F</code> and <code>K</code> is galois over <code>L</code> then <code>K</code> is galois over <code>F</code> and the galois groups form a short exact sequence with the galois group of <code>K</code> over <code>F</code> in the middle</li>\n<li>If <code>L</code> is an <code>intermediate_field F E</code> and <code>K</code> is obtained from <code>L</code> by adding all <code>n</code>th roots of unity (assuming <code>X^n - 1</code> splits in <code>E</code> and that <code>E</code> is of characteristic <code>0</code> or something) then <code>K</code> is galois over <code>L</code> and the galois group is abelian<ol>\n<li>I think we may have to do a little work to be able to talk about <code>K</code> as a field extension over <code>L</code>. I don't think we currently have an <code>algebra L</code> instance for <code>K</code> but I could be wrong</li>\n<li>Also I'm not sure the best way we have currently to say <code>K</code> is obtained from <code>L</code> by adjoining all <code>n</code>th roots of unity. We could use <code>sup</code> of <code>L</code> and the <code>F</code> adjoin the roots of unity, but I'm not sure if that's the best approach.</li>\n<li>I don't know the right way in mathlib to say that a group is abelian. I know about <code>comm_group</code> but what if I just have a group and I want a <code>Prop</code> saying it's abelian?</li>\n</ol>\n</li>\n<li>If <code>L</code> is an <code>intermediate_field F E</code> which contains all <code>n</code>th roots of unity and <code>K</code> is obtained from <code>L</code> by adjoining all roots of <code>X^n - a</code> (where <code>a</code> is in <code>L</code>) then <code>K</code> is galois over <code>L</code> and the galois group is abelian (with the same assumptions as in the previous step)</li>\n<li>If <code>F \\le L \\le K</code> are all galois over <code>F</code> then the galois group of <code>K</code> over <code>F</code> contains the galois group of <code>L</code> over <code>F</code> as a subgroup</li>\n<li>The product of solvable groups is solvable, if a group embeds into a solvable group it's solvable and that the middle term in a short exact sequence is solvable if the other two are (some of these things follow easily from other stuff we have done or from each other). The statement that abelian groups are solvable may have to be modified.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is not solvable</li>\n<li>Define the inductive type <code>solvable_by_radicals a</code> for <code>a</code> in <code>E</code>. A term <code>t</code>of this type is a recipe for constructing <code>a</code> using arithmetic and radicals and elements of <code>F</code></li>\n<li>For a term <code>t</code> of <code>solvable_by_radicals a</code> define a corresponding <code>intermediate_field F E</code>. I will refer to it as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> below. It can be defined inductively. If <code>t</code> comes from addition it is the compositum and so on (for radical steps, first adjoin appropriate roots of unity then appropriate radicals)</li>\n<li>Show by induction that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> is galois over <code>F</code>, has solvable galois group and contains <code>a</code></li>\n<li>There is an irreducible polynomial (over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> maybe) whose galois group is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> be a root of this polynomial in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>. Suppose <code>solvable_by_radicals a</code> is <code>nonempty</code>. Let <code>t</code> be a term. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> contains <code>a</code> and is galois over <code>F</code> hence contains the splitting field of the minimal polynomial of <code>a</code>. The galois group of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> is solvable and contains the galois group of the polynomial as a subgroup hence that group (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>) is also solvable.</li>\n<li>Contradiction.</li>\n</ol>",
        "id": 218977219,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607245393
    },
    {
        "content": "<p>All the parts look doable at this point, though steps <code>7</code> and <code>11</code> look annoying</p>",
        "id": 218977302,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607245543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I think you can turn this into a github issue/project. That will be a lot easier to find back again than this post in a mile-long thread.</p>",
        "id": 218977359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607245635
    },
    {
        "content": "<p>Pro tip: If you format the points using <code>- [ ]</code> then github automatically turns them into checkboxes</p>",
        "id": 218977368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607245670
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5258\">https://github.com/leanprover-community/mathlib/issues/5258</a></p>",
        "id": 218978404,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607247504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I replied to your comment on github but I don't know if it's easier to discuss it here or there. I hadn't thought about whether each step was true somehow but you're right that <code>2</code> is not true. But it seems like a problem for our approach. We would like to show by induction on the term <code>t</code> of <code>solvable_by_radicals a</code> that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> is galois over <code>F</code>. But is that even true? I actually no longer think so. But maybe it's not necessary?</p>",
        "id": 218999407,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607281512
    },
    {
        "content": "<p>But I think we do want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> to be galois so that if it contains one root of the minimal polynomial of <code>a</code> then it contains all of them.</p>",
        "id": 218999518,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607281678
    },
    {
        "content": "<p>I guess maybe we should modify the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> to make sure it is Galois?</p>",
        "id": 219000127,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607282507
    },
    {
        "content": "<p>we never defined Galois closure right?</p>",
        "id": 219000267,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607282710
    },
    {
        "content": "<p>We could prove inductively on t that F^t is Galois over F</p>",
        "id": 219000901,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283104
    },
    {
        "content": "<p>In the induction step, you know that the field is the splitting field of some polynomial p(x), and then the new field is the splitting field of p(x)*(x^n-a)</p>",
        "id": 219000996,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219000996\">said</a>:</p>\n<blockquote>\n<p>In the induction step, the polynomial that you're a splitting field of gets multiplied by (x^n-a)</p>\n</blockquote>\n<p><del>This is a different definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> right?</del> <strong>Edit:</strong> no, actually see the next comment</p>",
        "id": 219001243,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219000996\">said</a>:</p>\n<blockquote>\n<p>In the induction step, you know that the field is the splitting field of some polynomial p(x), and then the new field is the splitting field of p(x)*(x^n-a)</p>\n</blockquote>\n<p>wait, actually what does this mean? Because <code>a</code> might not be in <code>F</code></p>",
        "id": 219001443,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283275
    },
    {
        "content": "<p>that's the whole problem right?</p>",
        "id": 219001461,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283281
    },
    {
        "content": "<p>ah, good point</p>",
        "id": 219001491,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283292
    },
    {
        "content": "<p>let me look up the proof in D&amp;F</p>",
        "id": 219001533,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219001533\">said</a>:</p>\n<blockquote>\n<p>let me look up the proof in D&amp;F</p>\n</blockquote>\n<p>it shows the galois closure of a sequence of radical extensions is also a sequence of radical extensions</p>",
        "id": 219001617,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283335
    },
    {
        "content": "<p>yeah, looks like it</p>",
        "id": 219001874,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283414
    },
    {
        "content": "<p>we might be able to avoid Galois closure though</p>",
        "id": 219001896,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283421
    },
    {
        "content": "<p>rather than just adjoining the nth roots of a, can you just also adjoin the nth roots of any conjugate of a?</p>",
        "id": 219001979,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219001461\">said</a>:</p>\n<blockquote>\n<p>that's the whole problem right?</p>\n</blockquote>\n<p>Actually an example I found on math SE is helpful: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{2})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is galois over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mrow><mn>1</mn><mo>+</mo><msqrt><mn>2</mn></msqrt></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{1 + \\sqrt{2}})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3222200000000002em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0722200000000002em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span></span></span><span style=\"top:-3.03222em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg height=\"1.28em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1296\" width=\"400em\"><path d=\"M263,681c0.7,0,18,39.7,52,119 c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120 c340,-704.7,510.7,-1060.3,512,-1067 l0 -0 c4.7,-7.3,11,-11,19,-11 H40000v40H1012.3 s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232 c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1 s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26 c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z M1001 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16777999999999993em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is galois over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{2})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> but not over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>. And it is exactly the field that would be constructed as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 219002091,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219001979\">said</a>:</p>\n<blockquote>\n<p>rather than just adjoining the nth roots of a, can you just also adjoin the nth roots of any conjugate of a?</p>\n</blockquote>\n<p>yeah I think that's what you have to do probably</p>",
        "id": 219002144,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283532
    },
    {
        "content": "<p>but this avoids talking about Galois closure, just look at the orbit of a under the Galois group that we already have</p>",
        "id": 219002208,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219002208\">said</a>:</p>\n<blockquote>\n<p>but this avoids talking about Galois closure, just look at the orbit of a under the Galois group that we already have</p>\n</blockquote>\n<p>you mean the galois group of <code>E</code> over <code>F</code> right?</p>",
        "id": 219002530,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283686
    },
    {
        "content": "<p>ah, yes</p>",
        "id": 219002890,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283808
    },
    {
        "content": "<p>I guess we would have to use an ambient Galois extension</p>",
        "id": 219002913,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219001979\">said</a>:</p>\n<blockquote>\n<p>rather than just adjoining the nth roots of a, can you just also adjoin the nth roots of any conjugate of a?</p>\n</blockquote>\n<p>it's more annoying to show that this is a solvable extension though I guess? Though we can say it's the compositum of a bunch of radical extensions so maybe it's not too bad. Do we know that if <code>F \\le L \\le E</code> and <code>L</code> is galois over <code>F</code> then <code>L</code> is closed under conjugates by the galois group of <code>E</code> over <code>F</code>?</p>",
        "id": 219002925,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283837
    },
    {
        "content": "<p>we don't, but it might follow from the (L/F Galois iff subgroup is normal)</p>",
        "id": 219003009,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283884
    },
    {
        "content": "<p>which we'll prove at some point</p>",
        "id": 219003017,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607283892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219002913\">said</a>:</p>\n<blockquote>\n<p>I guess we would have to use an ambient Galois extension</p>\n</blockquote>\n<p>or algebraically closed field</p>",
        "id": 219003084,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607283923
    },
    {
        "content": "<p>but don't we need the extension E/F to be finite in order to use our Galois theory?</p>",
        "id": 219003426,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284037
    },
    {
        "content": "<p>hmm, well maybe not?</p>",
        "id": 219003616,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284092
    },
    {
        "content": "<p>it would be nice to be able to eventually state things for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span></p>",
        "id": 219003700,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284118
    },
    {
        "content": "<p>also, I'm wondering whether it might be easier to mostly work on the subgroup side</p>",
        "id": 219003755,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284138
    },
    {
        "content": "<p>because then compositum is just intersection</p>",
        "id": 219003783,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284148
    },
    {
        "content": "<p>but I guess I would need to write down the steps more carefully to know which theorems we need to use and to see whether they are ones that have only been proved with the finite dimensional assumption</p>",
        "id": 219003825,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284162
    },
    {
        "content": "<p>this business about \"adjoining all of the Galois conjugates\" is just taking the intersections of the conjugates of a subgroup</p>",
        "id": 219003886,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219003755\">said</a>:</p>\n<blockquote>\n<p>also, I'm wondering whether it might be easier to mostly work on the subgroup side</p>\n</blockquote>\n<p>not 100% sure what you mean. What is the difference from the sequence of steps I wrote down?</p>",
        "id": 219003922,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284195
    },
    {
        "content": "<p>Like we still need to know that we are getting a galois extension</p>",
        "id": 219004095,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284242
    },
    {
        "content": "<p>Actually, I think working with fields is fine</p>",
        "id": 219004814,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284480
    },
    {
        "content": "<p>Can we work inside of the splitting field of p(x)*(x^(big)-1) ?</p>",
        "id": 219004996,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284543
    },
    {
        "content": "<p>Then we can use the Galois correspondence.</p>",
        "id": 219005093,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284567
    },
    {
        "content": "<p>Actually, would it make sense to show that Gal(splitting(p(x) * (x^(big) - 1) / Q) is solvable?</p>",
        "id": 219005485,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219004996\">said</a>:</p>\n<blockquote>\n<p>Can we work inside of the splitting field of p(x)*(x^(big)-1) ?</p>\n</blockquote>\n<p>yeah I guess so? I mean it depends on what you want to prove. It's arguably not obvious that every solution by radicals would live inside that field</p>",
        "id": 219005486,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284703
    },
    {
        "content": "<p>I also just think it would be nice to be able to say stuff about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}/\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span></p>",
        "id": 219005620,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284762
    },
    {
        "content": "<p>That's true</p>",
        "id": 219005812,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284816
    },
    {
        "content": "<p>but I think we should try to carefully write down what we need to prove and see how much of it depends on the finite dimensional assumption</p>",
        "id": 219005979,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284869
    },
    {
        "content": "<p>If we ever need a finite Galois closure, we could use PET + splitting field of that polynomial</p>",
        "id": 219006059,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607284897
    },
    {
        "content": "<p>because a lot of times we are just dealing with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mi>t</mi></msup><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F^t/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043556em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> which <em>is</em> finite dimensional. There's only a few places we need to talk about the ambient field</p>",
        "id": 219006094,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607284909
    },
    {
        "content": "<p>Here's something that we could prove: If F &lt; E &lt; K are finite extensions such that E/F and K/E are both Galois and solvable, then there is a solvable Galois extension M/F containing E/F</p>",
        "id": 219006745,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607285104
    },
    {
        "content": "<p>is that true?</p>",
        "id": 219006750,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607285106
    },
    {
        "content": "<p>wait, do you mean containing <code>K/F</code>?</p>",
        "id": 219007929,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607285497
    },
    {
        "content": "<p>if so, I think it's true because you can take the galois closure of <code>K</code> and view it as a compositum of a bunch of copies of the chain <code>F &lt; E &lt; K</code>each of which is solvable. But I'm not 100% sure</p>",
        "id": 219008141,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607285559
    },
    {
        "content": "<p>Yes, I meant K/F</p>",
        "id": 219008567,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607285701
    },
    {
        "content": "<p>To take a compositum, do we need to be working inside an ambient field?</p>",
        "id": 219009671,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607286067
    },
    {
        "content": "<p>I would assume so</p>",
        "id": 219009702,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607286078
    },
    {
        "content": "<p>When I lectured this I defined algebraic closures early on and would always work in the alg closure of the base field</p>",
        "id": 219012177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607286874
    },
    {
        "content": "<p>It just made things much easier</p>",
        "id": 219012204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607286883
    },
    {
        "content": "<p>I'm not sure if it makes formalisation easier though</p>",
        "id": 219012250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607286897
    },
    {
        "content": "<p>The other approach is to define normal closure of a finite extension</p>",
        "id": 219012341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607286930
    },
    {
        "content": "<p>I defined it as \"take generators of the extension and then look at the splitting field of the product of the min polys\"</p>",
        "id": 219012514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607286977
    },
    {
        "content": "<p>Has this sort of stuff been done in any other prover? Is this one of the \"never done before in any prover\" Freek 100 questions?</p>",
        "id": 219012615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287015
    },
    {
        "content": "<p>If it's not been done in any other prover one will have to think about the best way to do it. I've lectured this stuff and I totally agree it's annoying. One year I just adjoined a ton of roots of unity to the base to deal with issues</p>",
        "id": 219012849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287088
    },
    {
        "content": "<p>There's a notion of \"solvable\" for a finite separable extension, which is \"Galois closure is solvable\"</p>",
        "id": 219012970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219012615\">said</a>:</p>\n<blockquote>\n<p>Has this sort of stuff been done in any other prover? Is this one of the \"never done before in any prover\" Freek 100 questions?</p>\n</blockquote>\n<p>yes</p>",
        "id": 219013544,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607287319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219009671\">said</a>:</p>\n<blockquote>\n<p>To take a compositum, do we need to be working inside an ambient field?</p>\n</blockquote>\n<p>yes but I was assuming we are</p>",
        "id": 219013735,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607287372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219012970\">said</a>:</p>\n<blockquote>\n<p>There's a notion of \"solvable\" for a finite separable extension, which is \"Galois closure is solvable\"</p>\n</blockquote>\n<p>That could be a useful concept for us</p>",
        "id": 219014135,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607287499
    },
    {
        "content": "<p>Working in a big ambient extension, especially one that contains all the n'th roots of unity for all n showing up in the argument, might be a really cool idea</p>",
        "id": 219014181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287514
    },
    {
        "content": "<p>I should say that I made up the notion of solvable in that generality but IIRC I checked it had good properties eg composite of solvable is solvable</p>",
        "id": 219014403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287582
    },
    {
        "content": "<p>Adjoining n'th root is solvable</p>",
        "id": 219014480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287611
    },
    {
        "content": "<p>It's not true that solvable implies \"can be obtained by iterating adjoining n'th roots\"  but it is true that solvable implies is a subfield of a finite extension obtained by adjoining n'th roots several times</p>",
        "id": 219014938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287755
    },
    {
        "content": "<p>All this is from memory from when I was teaching this stuff a few years ago so might be wrong. But I was really annoyed when I discovered that this stuff seemed much less clean than I had expected</p>",
        "id": 219015117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287806
    },
    {
        "content": "<p>The key theorem is that if L/K is cyclic degree n and if K contains all the n'th roots of unity then L is obtained from K by throwing in an n'th root. This is proved in birch's article in Cassels-Froehlich</p>",
        "id": 219015423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287910
    },
    {
        "content": "<p>I don't know if you need to go that far though. The proof isn't hard</p>",
        "id": 219015505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607287924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219014181\">said</a>:</p>\n<blockquote>\n<p>Working in a big ambient extension, especially one that contains all the n'th roots of unity for all n showing up in the argument, might be a really cool idea</p>\n</blockquote>\n<p>I think the roots of unity are actually not going to be a big issue. It's more showing that things are galois</p>",
        "id": 219018334,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607288817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219014403\">said</a>:</p>\n<blockquote>\n<p>I should say that I made up the notion of solvable in that generality but IIRC I checked it had good properties eg composite of solvable is solvable</p>\n</blockquote>\n<p>that's probably the fact that would be useful</p>",
        "id": 219018443,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607288865
    },
    {
        "content": "<p>If A in B in C in D and D/A is solvable then C/B is solvable. IIRC I sort of made the proofs up myself, perhaps because I was in a place with no internet when I realised that what I thought was going to be an easy two lectures to prepare was in fact going to be trickier than i thought!</p>",
        "id": 219026506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607292934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Would it be possible to move the meeting today to 2pm? The RTG seminar seminar today is by my algebra TA from 4 years ago, and I am interested in going.</p>",
        "id": 219125016,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607368626
    },
    {
        "content": "<p>sure</p>",
        "id": 219130432,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607371176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> just an fyi, I'm speaking at JMM on January 7th, which might conflict with Lean Together 2021</p>",
        "id": 219177228,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607411267
    },
    {
        "content": "<p>thanks for the heads up</p>",
        "id": 219179261,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607413781
    },
    {
        "content": "<p>Okay, I have a new idea for the abel-ruffini strategy</p>",
        "id": 219273437,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607467291
    },
    {
        "content": "<ol>\n<li>Define <code>solvable_by_radicals a</code> as before</li>\n<li>Show by induction that if <code>solvable_by_radicals a</code> is inhabited then <code>a</code> is algebraic over <code>F</code></li>\n<li>Show by induction that if <code>solvable_by_radicals a</code> is inhabited then the splitting field of the minimal polynomial of <code>a</code> is a solvable extension of <code>F</code><ol>\n<li>There are two parts to doing this. First, for cases like <code>a = b + c</code>, show that the splitting field for <code>a</code> embeds into the compositum of the splitting fields for <code>b</code> and <code>c</code> and then this implies that the galois group for <code>a</code> embeds into the product of the galois groups for <code>b</code> and <code>c</code></li>\n<li>Second, for the case where <code>a^n = b</code>, note that if <code>p</code> is the minimal polynomial for <code>b</code> then the minimal polynomial for <code>a</code> divides <code>p(X^n)</code>. So the splitting field for <code>a</code> embeds into the field that you get from first adjoining nth roots of unity and then adjoining roots of <code>p(X^n)</code>. So it's enough to show that the galois group of <code>p(X^n)</code> over a field that contains the nth roots of unity embeds into the product of the galois group of <code>p</code> and the galois group of <code>X^n - c</code> where <code>c</code> is any arbitrary root of <code>p</code> (and show that we get the same group no matter which <code>c</code> is used)</li>\n<li>It sounds easier to do all of this by working with <code>intermediate_field</code>s of some big ambient field (maybe algebraically closed) but I'm not sure</li>\n</ol>\n</li>\n<li>Now we are done as soon as we construct an element of the big field whose minimal polynomial has non-solvable galois group</li>\n</ol>",
        "id": 219274146,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607467778
    },
    {
        "content": "<p>I don't know how well this will work, but I think it might be reasonable. Hopefully it doesn't contain any false statements. Basically I'm trying to get around having to work with the galois closure by just using the splitting field of <code>p(X^n)</code></p>",
        "id": 219274253,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607467852
    },
    {
        "content": "<p>Ooh, I really like this approach of using the splitting field of the minimal polynomial of the solvable_by_radicals element</p>",
        "id": 219275684,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607468816
    },
    {
        "content": "<p>yeah, the hairy part will basically all be in part 2.2 I think</p>",
        "id": 219275806,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607468897
    },
    {
        "content": "<p>Actually 2.2 may be a little more annoying than I made it sound. The problem is that adjoining roots of unity may mean that <code>p</code> is no longer irreducible</p>",
        "id": 219277484,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607469424
    },
    {
        "content": "<p>so it's not true that the galois group of <code>X^n - c</code> will always be the same for all roots <code>c</code> of <code>p</code></p>",
        "id": 219277514,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607469457
    },
    {
        "content": "<p>I think this strategy can still work but I'm not sure the exact statement we want to prove about <code>p(X^n)</code></p>",
        "id": 219277578,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607469483
    },
    {
        "content": "<p>I mean the good news I guess is that either <code>c</code> already has an nth root, in which case <code>X^n - c</code> just splits or it doesn't, in which case the galois group of <code>X^n - c</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/n\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span></p>",
        "id": 219277680,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607469566
    },
    {
        "content": "<p>so I guess we can maybe show that the galois group embeds into the galois group of <code>p</code> over <code>F</code> times <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/n\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span></p>",
        "id": 219277845,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607469663
    },
    {
        "content": "<p>also it's nice that first adjoining roots of unity, then roots of <code>p(X^n)</code> is a splitting field for <code>(X^n - 1)p(X^n)</code> so it's automatically galois over <code>F</code></p>",
        "id": 219277949,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607469724
    },
    {
        "content": "<p>wait, now I'm starting to doubt some of the stuff I'm saying</p>",
        "id": 219278476,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470089
    },
    {
        "content": "<p>I think the galois group of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(X^n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> may be a little complicated to describe</p>",
        "id": 219278763,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470307
    },
    {
        "content": "<p>well, it should still be true that p(X^n) has solvable Galois group, right?</p>",
        "id": 219279128,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607470534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219279128\">said</a>:</p>\n<blockquote>\n<p>well, it should still be true that p(X^n) has solvable Galois group, right?</p>\n</blockquote>\n<p>yes, but I'm trying to figure out the easiest way to prove that</p>",
        "id": 219279153,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470554
    },
    {
        "content": "<p>but I have a new idea</p>",
        "id": 219279159,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470557
    },
    {
        "content": "<p>wait, no I don't</p>",
        "id": 219279216,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470585
    },
    {
        "content": "<p>I'm having trouble finding anything describing the galois group of a composition of polynomials</p>",
        "id": 219279298,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470657
    },
    {
        "content": "<p>but it's maybe a wreath product</p>",
        "id": 219279359,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470685
    },
    {
        "content": "<p>well, maybe we can express this using short exact sequences instead</p>",
        "id": 219279390,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470719
    },
    {
        "content": "<p>You need to show that Gal(split(p(X^n))/split(p(X))) is solvable</p>",
        "id": 219279448,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607470768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219279448\">said</a>:</p>\n<blockquote>\n<p>You need to show that Gal(split(p(X^n))/split(p(X))) is solvable</p>\n</blockquote>\n<p>yeah, that's true</p>",
        "id": 219279485,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470797
    },
    {
        "content": "<p>which should somehow follow from adding roots of unity and then adding roots one at a time</p>",
        "id": 219279548,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470820
    },
    {
        "content": "<p>I guess</p>",
        "id": 219279549,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470823
    },
    {
        "content": "<p>maybe just an ugly induction</p>",
        "id": 219279552,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607470830
    },
    {
        "content": "<p>Okay, I think I now understand better what's going on. The key is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><msub><mi>K</mi><mn>0</mn></msub><mo>≤</mo><msub><mi>K</mi><mn>1</mn></msub><mo>…</mo><mo>≤</mo><msub><mi>K</mi><mi>n</mi></msub><mo>=</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">F = K_0 \\le K_1 \\ldots \\le K_n = E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a sequence of field extensions such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is Galois over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> and each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_{i + 1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> is Galois over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with solvable Galois group then the Galois group of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is solvable. The tricky thing is that you prove this by <em>backwards</em> induction on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>. I.e. prove by induction on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> that the Galois group of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mrow><mi>n</mi><mo>−</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_{n - j}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> is solvable (using the fact about short exact sequences of solvable groups). In our case, we can first show that the splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(X^n)(X^n - 1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is contained in the field you get by starting with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, going to the splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, adjoining roots of unity and then adjoining roots of equations of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">X^n - b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>. Each of these extensions is Galois over the previous one with solvable Galois group so the whole thing is solvable. The intermediate fields are not Galois over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">F,</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span></span></span></span> but that doesn't matter.</p>",
        "id": 219294488,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607484964
    },
    {
        "content": "<p>If you define this generalised solvable to mean \"Galois closure is solvable\" then this follows from transitivity of generalised solvable</p>",
        "id": 219312815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607505889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219312815\">said</a>:</p>\n<blockquote>\n<p>If you define this generalised solvable to mean \"Galois closure is solvable\" then this follows from transitivity of generalised solvable</p>\n</blockquote>\n<p>But how do you prove transitivity of \"Galois closure is solvable\"? Wouldn't it be similar to what I said above?</p>",
        "id": 219397847,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607548001
    },
    {
        "content": "<p>Btw I realized that since we have the primitive element theorem it's actually pretty easy to define the galois closure of a separable extension. You can just define it as the splitting field of the minimal polynomial of the primitive element</p>",
        "id": 219398128,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607548145
    },
    {
        "content": "<p>How about L/K is presolvable if there exists E/L Galois over K with solvable Galois group?</p>",
        "id": 219400889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607549375
    },
    {
        "content": "<p>I guess I sort of do like the approach of defining \"solvable\" for a separable extension to mean either \"galois closure is solvable\" or the definition you just suggested. The only problem is that proving transitivity looks kind of messy (even messier than the way that it's used directly in the proof). To make things easy, suppose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>≤</mo><mi>L</mi><mo>≤</mo><mi>K</mi><mo>≤</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">F \\le L \\le K \\le E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is algebraically closed or something and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">L/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi mathvariant=\"normal\">/</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">K/L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">L</span></span></span></span> are both Galois. How easy is it to show that there is a galois extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> that contains <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> and which is solvable?</p>",
        "id": 219409288,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607553267
    },
    {
        "content": "<p>as easy as the maths proof</p>",
        "id": 219409368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607553326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/219409368\">said</a>:</p>\n<blockquote>\n<p>as easy as the maths proof</p>\n</blockquote>\n<p>which proof?</p>",
        "id": 219409491,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607553374
    },
    {
        "content": "<p>as in, it will be equally as easy or as hard as the maths proof, if there is one.</p>",
        "id": 219409543,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607553405
    },
    {
        "content": "<p>or, phrased in another way: do you have the maths proof?</p>",
        "id": 219409574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607553423
    },
    {
        "content": "<p>No, but Kevin seemed convinced it's true. I started thinking about it and I don't see a really simple proof, which is why I asked</p>",
        "id": 219409646,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607553471
    },
    {
        "content": "<p>the proof of abel-ruffini that I outlined above proves basically a special case of this where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi mathvariant=\"normal\">/</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">K/L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">L</span></span></span></span> has a special form (adjoining a root of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">X^n - a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>)</p>",
        "id": 219409737,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1607553515
    },
    {
        "content": "<p>The maths proof is that if E'/F is the Galois closure of K/F then E'/L is solvable because it's a composite of all the K'/L as K' runs over the conjugates of K, and each of those are solvable because they're isomorphic to K/L, so the Galois group of E'/F is an extension of solvable groups so solvable</p>",
        "id": 219412499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607554942
    },
    {
        "content": "<p>the group-theoretic version of the argument is: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> is a big ambient group, and if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is a normal subgroup with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mi mathvariant=\"normal\">/</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma/A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Γ</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">A</span></span></span></span> solvable and if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a normal subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A/B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> solvable, then conjugating by all the elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> gives you a bunch of  subgroups <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>B</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><mi>g</mi><mi>B</mi><msup><mi>g</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">B'=gBg^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><msup><mi>B</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A/B'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> solvable (because isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A/B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>), so if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is the intersection of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>B</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">B'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A/C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is solvable and hence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mi mathvariant=\"normal\">/</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma/C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Γ</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is solvable.</p>",
        "id": 219412889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607555187
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5342\">#5342</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/5343\">#5343</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/5344\">#5344</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/5345\">#5345</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/5346\">#5346</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/5347\">#5347</a> and then we'll have separable splitting field implies galois</p>",
        "id": 219743081,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1607832855
    },
    {
        "content": "<p>Here's a new attempt at a roadmap to the Abel-Ruffini theorem. Let me know if anything is false or if there are any other problems with it. I've also updated the list <a href=\"https://github.com/leanprover-community/mathlib/issues/5258\">on github</a> so that it matches this.</p>\n<h1>Facts about fields</h1>\n<ul>\n<li>If <code>L &lt; K</code> are <code>intermediate_field</code>s of <code>E/F</code> then <code>K</code> is an <code>L</code> algebra</li>\n<li>If <code>K_1 &lt; K_2 &lt; K_3</code> are <code>intermediate_field</code>s of <code>E/F</code> then they form an <code>is_scalar_tower</code></li>\n<li>If <code>L &lt; K</code> are <code>intermediate_field</code>s of <code>E/F</code> which are both galois over <code>F</code> then the galois group of <code>L/F</code> embeds into the galois group of <code>K/F</code> (or maybe just assume <code>F, L, K</code> form an <code>is_scalar_tower</code>?)</li>\n<li>If <code>L</code> and <code>K</code> are <code>intermediate_field</code>s which are both galois over <code>F</code> then the compositum (<code>sup K L</code>) is also galois over <code>F</code> and the galois group embeds into the product of the galois groups of <code>K/F</code> and <code>L/F</code>.</li>\n<li>If <code>a = b + c</code> and everything algebraic over <code>F</code> then the splitting field of the minimal polynomial of <code>a</code> is contained in the compositum of the splitting fields of the minimal polynomials of <code>b</code> and <code>c</code>.</li>\n<li>If <code>F, L, E</code> form an <code>is_scalar_tower</code> (nothing here is an <code>intermediate_field</code>) and <code>L/F</code>, <code>E/L</code> and <code>E/F</code> are all galois then their galois groups form a short exact sequence</li>\n<li>There is an irreducible polynomial <code>p</code> such that the splitting field of <code>p</code> has galois group isomorphic to <code>S_5</code> (for whatever version of <code>S_5</code> is proved not solvable below)</li>\n<li>If <code>p</code> is an irreducible polynomial then the minimal polynomial of any root of <code>p</code> is <code>p</code> itself</li>\n</ul>\n<h1>Facts about groups</h1>\n<ul>\n<li>Product of solvable groups is solvable</li>\n<li>If a group embeds into a solvable group it is solvable</li>\n<li>Abelian groups are solvable</li>\n<li><code>S_5</code> is not solvable (really, just prove the group of permutations on <em>some</em> 5 element type is not solvable)</li>\n</ul>\n<h1>Facts about solvability of galois groups</h1>\n<ul>\n<li>If <code>F, L, E</code> form an <code>is_scalar_tower</code> (nothing here is an <code>intermediate_field</code>) such that <code>L/F</code> and <code>E/L</code> are both galois and solvable and <code>E/F</code> is galois then <code>E/F</code> is solvable.</li>\n<li>If <code>L</code> contains the nth roots of unity and <code>K/L</code> is obtained by adjoining an nth root of something in <code>L</code> then <code>K/L</code> is galois with solvable galois group</li>\n</ul>\n<h1>Abel-Ruffini theorem</h1>\n<ul>\n<li>Define <code>solvable_by_radicals a</code> for <code>a</code> in <code>E</code>. This is just a prop-valued inductive type, as described in <a href=\"#narrow/stream/116395-maths/topic/Inductive.20type.20of.20elements.20defined.20by.20radicals\">this thread</a>.</li>\n<li>Show by induction that if <code>solvable_by_radicals a</code> then <code>a</code> is algebraic (or <code>is_integral</code>) over <code>F</code><ul>\n<li>Base case and cases +, *, - have already been done</li>\n<li>Case ^-1 should be easy</li>\n<li>Case ^(1/n) should be easy (p(X^n))</li>\n</ul>\n</li>\n<li>Show by induction that if <code>solvable_by_radicals a</code> then the splitting field of the minimal polynomial of <code>a</code> over <code>F</code> is solvable<ul>\n<li>Base case is easy</li>\n<li>Case ^-1 should be easy</li>\n<li>Cases +, *, - correspond to compositum.</li>\n<li>Case <code>a^n = b</code> can be done as follows: form a sequence of <code>intermediate_fields</code>, <code>F = K_0 &lt; K_1 &lt; K_2 &lt; ... &lt; K_m</code> where <code>K_1</code> is the splitting field of <code>p</code> (min. poly. of <code>b</code>), <code>K_2</code> is obtained by adjoining the nth roots of unity and each extension after is obtained by adjoining nth root of a root of <code>p</code>. Next, show that <code>K_m</code> is equal to the splitting field of <code>p(X^n)(X^n - 1)</code>, hence galois. Finally, show by backwards induction on <code>i</code> that <code>K_m</code> is solvable over <code>K_i</code>. Finally, observe that the min. poly. of <code>a</code> divides <code>p(X^n)(X^n - 1)</code>, hence its splitting field is contained in <code>K_m</code>, hence its galois group embeds into <code>K_m</code>'s and hence is solvable</li>\n</ul>\n</li>\n<li>Let <code>p</code> be the polynomial whose galois group is <code>S_5</code>. If <code>solvable_by_radicals a</code> holds for any root of <code>p</code> then the splitting field of the minimal polynomial of that root is solvable. But the minimal polynomial of such a root must be <code>p</code> itself so <code>S_5</code> is solvable. Contradiction.</li>\n</ul>",
        "id": 220191184,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608163465
    },
    {
        "content": "<p>By the way, I suggest that when we complete parts of this list, we check off the appropriate box on the github issue and edit the comment (on github) to link to the place where that theorem is proved. If that seems too annoying, that's fine too</p>",
        "id": 220196784,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608168126
    },
    {
        "content": "<p>A couple of things on the list have already been done I think</p>",
        "id": 220196795,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608168137
    },
    {
        "content": "<p>though for some of them, we may need a slightly different version</p>",
        "id": 220196807,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608168149
    },
    {
        "content": "<p>Also, maybe obvious, but the different items on the list are definitely not all of equal difficulty</p>",
        "id": 220196882,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608168226
    },
    {
        "content": "<p>Third field bullet point-- if K/L/F all Galois then Gal(L/F) doesn't embed into Gal(K/F), there's a surjection the other way around</p>",
        "id": 220213134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608189363
    },
    {
        "content": "<p>Facts about solvability of Galois groups -- adding an n'th root when base field has all n'th roots of one gives you an abelian Galois group, and abelian Galois groups are solvable (seems worth mentioning)</p>",
        "id": 220213397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608189642
    },
    {
        "content": "<p>Although it's not helpful, K_m is actually the splitting field of p(X^n) because this contains all the n'th roots of any root of p and hence all the n'th roots of unity</p>",
        "id": 220213881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608190261
    },
    {
        "content": "<p>The one part which isn't clear to me is how this backwards induction works in the last but one bullet point</p>",
        "id": 220213899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608190307
    },
    {
        "content": "<p>There's this one technical issue of how to deal with nth roots when the base field doesn't contain nth roots of unity. These K_i in your proof don't all play a symmetric role. Isn't it true that if a : E and SBR a F then SBR a K for K any extension of F. Furthermore if spl(a/K) is solvable over K and K/F is solvable then spl(a/F) is solvable over F because of the short exact sequence property. This reduces the question of nth roots to the case where the nth roots of 1 are in the base field and then you're reduced to the question of showing that if an extension is a subextension of a composite of abelian extensions then it's Galois which is easy. I think I'm still doing the backwards induction which you envisage but because the definition of the K_i isn't homogeneous (K1, K2 and the higher Ki are all defined in different ways) I'm just trying to split off the arguments so that they all occur in different proofs rather than in one nightmare proof</p>",
        "id": 220214872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608191440
    },
    {
        "content": "<p>It seems that the heart of \"solvable_by_radicals a F -&gt; spl(a/F) / F solvable\" is \"spl (a^n/F) /F solvable -&gt; (spl a/F) / F solvable\" and perhaps it would be good to break this down into pieces more in the plan. Rather than doing splitting fields of elements one can work with splitting fields of polynomials, which reduces it to \"(spl p(X)/F)/F solvable -&gt; (spl (p(X^n))/F)/F solvable\". I guess if p in F[X] and K/F is solvable then spl(p/F)/F is solvable iff spl(p/K)/K is solvable. That looks like a useful lemma which should be split off. This reduces to the case where F contains all n'th roots of 1 and then you can reduce to spl(p(X^n)/F)/spl(p(X)/F) solvable under the assumption that F contains all n'th roots of 1, which follows because over spl(p(X),F) you can factor p(X^n) as (X^n-alpha)(X^n-beta)... . Then you prove that spl(p/F) solvable and spl(q/F) solvable implies spl(pq/F) solvable and then prove the analogous statement for a product of finitely many polys by induction (there finally is the induction you want to do, but in a much simpler setting) and now I think you're home.</p>",
        "id": 220232150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608204783
    },
    {
        "content": "<p>Aah -- perhaps you don't even need to reduce to the case where F contains the n'th roots of 1, because you can prove spl(X^n-alpha)/F is solvable for alpha in F whether or not F contains the n'th roots of unity; the splitting field is an extension of F(mu_n) by one n'th root of alpha so it has a two step filtration by abelian groups.</p>",
        "id": 220232310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608204912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/220213134\">said</a>:</p>\n<blockquote>\n<p>Third field bullet point-- if K/L/F all Galois then Gal(L/F) doesn't embed into Gal(K/F), there's a surjection the other way around</p>\n</blockquote>\n<p>oops, good point. I've edited the issue on github to reflect this.</p>",
        "id": 220270736,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608224551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/220213397\">said</a>:</p>\n<blockquote>\n<p>Facts about solvability of Galois groups -- adding an n'th root when base field has all n'th roots of one gives you an abelian Galois group, and abelian Galois groups are solvable (seems worth mentioning)</p>\n</blockquote>\n<p>I've added an extra bullet point about showing the galois group embeds into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/n\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>. There was already an entry about showing abelian groups are solvable (which I already proved but in the \"wrong way\"---I showed that a <code>comm_group</code> is solvable but not that a group which <code>commutes</code> is solvable)</p>",
        "id": 220271072,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608224705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/220213881\">said</a>:</p>\n<blockquote>\n<p>Although it's not helpful, K_m is actually the splitting field of p(X^n) because this contains all the n'th roots of any root of p and hence all the n'th roots of unity</p>\n</blockquote>\n<p>That's true, but I'm not sure it's worth proving it</p>",
        "id": 220271370,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608224845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/220213899\">said</a>:</p>\n<blockquote>\n<p>The one part which isn't clear to me is how this backwards induction works in the last but one bullet point</p>\n</blockquote>\n<p>It just uses the first bullet point under \"Facts about solvability of galois groups\"</p>",
        "id": 220271519,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608224917
    },
    {
        "content": "<p>We're talking about this, right?</p>\n<blockquote>\n<p>form a sequence of intermediate_fields, F = K_0 &lt; K_1 &lt; K_2 &lt; ... &lt; K_m where K_1 is the splitting field of p (min. poly. of b), K_2 is obtained by adjoining the nth roots of unity and each extension after is obtained by adjoining nth root of a root of p. Next, show that K_m is equal to the splitting field of p(X^n)(X^n - 1), hence galois. Finally, show by backwards induction on i that K_m is solvable over K_i. </p>\n</blockquote>\n<p>This is the part which I think is hard. In particular I think your \"backwards induction\" is very optimistic. You take the roots of p, you make them into a list, you then make these K_i for i&gt;=3, you then have to prove K_m is solvable over K_i for all i. If you think about it you'll actually need to prove K_j is Galois and solvable over K_i for all i as well. There are cases i=0, i=1, i=2 and i&gt;=3 giving you six sub-theorems to prove here, all in one proof, which you can't factor out because the definition of the K_i occurs after the theorem statement, in the proof. Things will get really slow, because when proofs start hitting 100 lines it starts becoming intolerable to write them. This argument needs to be taken apart. I have suggested a way of breaking this up into far smaller pieces above. Let me know if you don't understand it or want me to go through it again. I think this backwards induction is not going to fly as it stands and needs to become five smaller theorems.</p>",
        "id": 220273960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608225896
    },
    {
        "content": "<p>I think there may have been some kind of misunderstanding. I didn't mean to suggest that there shouldn't be separate lemmas used in doing that step or that it should be one huge monolithic proof. And I haven't had much time to think about this since I saw your comments so I am not sure if your suggested route is the best option or not.</p>",
        "id": 220283837,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608230287
    },
    {
        "content": "<p>also I don't think you need to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> is galois and solvable over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>. Just that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_{i + 1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> is galois and solvable over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. And that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is galois over each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which comes from <code>galois_tower_top</code> or something like that.</p>",
        "id": 220283961,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608230355
    },
    {
        "content": "<p>but yes, I agree that lemmas are needed.</p>",
        "id": 220283977,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608230364
    },
    {
        "content": "<p>I just wasn't sure which ones are needed yet.</p>",
        "id": 220283990,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608230373
    },
    {
        "content": "<p>I was going to read through your other comments and respond to them later but I just responded to the ones that I could respond to quickly</p>",
        "id": 220284097,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1608230405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> FWI, we won't be meeting tomorrow</p>",
        "id": 220900533,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608862063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Have you been following this thread: <a href=\"#narrow/stream/144837-PR-reviews/topic/.235672.20breaks.20timeout/\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.235672.20breaks.20timeout/</a></p>",
        "id": 223266600,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611079377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/223266600\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> Have you been following this thread: <a href=\"#narrow/stream/144837-PR-reviews/topic/.235672.20breaks.20timeout/\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.235672.20breaks.20timeout/</a></p>\n</blockquote>\n<p>No, I hadn't seen that</p>",
        "id": 223267794,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611079862
    },
    {
        "content": "<p>I guess I never really fully understood the significance of <code>subsingleton</code> in the first place</p>",
        "id": 223267886,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611079907
    },
    {
        "content": "<p>and I don't know why this PR would break things</p>",
        "id": 223267904,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611079919
    },
    {
        "content": "<p>It seems like simp is not handling subsingleton instances correctly</p>",
        "id": 223268008,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611079957
    },
    {
        "content": "<p>yeah, but I don't know why that would be</p>",
        "id": 223268032,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611079969
    },
    {
        "content": "<p>I guess it's also weird because originally this lemma did not mention <code>subsingleton</code> and I never really saw why it was important to change it</p>",
        "id": 223268086,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080004
    },
    {
        "content": "<p>Was this lemma for talking about the trivial group?</p>",
        "id": 223268163,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611080042
    },
    {
        "content": "<p>like I guess the inference engine can sometimes automatically supply <code>subsingleton</code> instances but not <code>top = bot</code> instances, but I feel like most times you'd want to apply this sort of lemma that probably doesn't matter too much</p>",
        "id": 223268205,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/223268163\">said</a>:</p>\n<blockquote>\n<p>Was this lemma for talking about the trivial group?</p>\n</blockquote>\n<p>it said that if top = bot in an algebra then the top subgroup of the group of algebra automorphisms equals the bottom subgroup</p>",
        "id": 223268265,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080080
    },
    {
        "content": "<p>I'm still not sure what the best way to talk about the trivial group is</p>",
        "id": 223268305,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611080092
    },
    {
        "content": "<p>if an algebra is trivial then its automorphism group is trivial</p>",
        "id": 223268307,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080092
    },
    {
        "content": "<p>bot = top doesn't seem like the best way</p>",
        "id": 223268345,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611080111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/223268305\">said</a>:</p>\n<blockquote>\n<p>I'm still not sure what the best way to talk about the trivial group is</p>\n</blockquote>\n<p>I guess subsingleton is a reasonable way, but it just doesn't seem that important to me</p>",
        "id": 223268364,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/223268345\">said</a>:</p>\n<blockquote>\n<p>bot = top doesn't seem like the best way</p>\n</blockquote>\n<p>fair enough</p>",
        "id": 223268386,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080130
    },
    {
        "content": "<p>Is the notion of an algebra being trivial discussed in mathlib?</p>",
        "id": 223268539,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611080187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/223268539\">said</a>:</p>\n<blockquote>\n<p>Is the notion of an algebra being trivial discussed in mathlib?</p>\n</blockquote>\n<p>there are some lemmas that I added a while ago in one of the primitive element theorem PRs about algebras with dimension 1</p>",
        "id": 223268630,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080236
    },
    {
        "content": "<p>which is one way of saying an algebra is trivial</p>",
        "id": 223268644,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080245
    },
    {
        "content": "<p>I'm just now finishing reading the thread you linked though. The effect of <code>subsingleton</code> instances on <code>simp</code>s behavior seems crazy to me</p>",
        "id": 223268779,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1611080296
    },
    {
        "content": "<p>On the plus side, mathlib might get a major performance increased when this is fixed</p>",
        "id": 223268835,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611080326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Surjectivity is coming: <a href=\"https://github.com/leanprover-community/mathlib/issues/5960\">#5960</a></p>",
        "id": 224534543,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611954864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I've merged the surjectivity stuff into the abel-ruffini branch, and cleaned up the compositum proof a bit</p>",
        "id": 224554777,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611966879
    },
    {
        "content": "<p>There might be a potential flaw with our discussion on Monday. We drew an arrow from <code>(minpoly F α).splitting_field</code> to <code>minpoly ((minpoly F (α ^ n)).splitting_field) α</code>. I'm a little worried that such a map might not exist. For instance, what if<code>α</code> is the 4th root of 2, and n = 2?</p>\n<p>It seems to me that there is a fundamental obstacle: A tower of normal extensions is not necessarily normal, so we will need to take a normal closure at some point. In particular, we need to know that a finite compositum of solvable extensions is solvable (or something along these lines).</p>\n<p>I think that we should bite the bullet and prove the following theorem: If <code>E/K/F</code> is an tower of fields with <code>E/K</code> and <code>K/F</code> both normal and solvable then there exists an extension <code>L/E</code> such that <code>L/F</code> is normal and solvable.</p>\n<p>This might not be true as stated, maybe you need to assume that some or all of the tower is finite-dimensional.</p>\n<p>I'm not sure what the best way to prove this is. Here's an ugly way, assuming that everything is finite-dimensional. We know that finite-dimensional normal extensions are splitting fields. So E is the splitting field of a polynomial over K. Applying the various F-automorphisms of K give finitely many polynomials over K. Multiply them together and let L be the splitting field of this product over E. There are things left to do:<br>\n-&gt; The product is F-invariant so L is secretly a splitting field over F (and thus normal).<br>\n-&gt; To show that L/F is solvable, it is enough to show that L/K is solvable. This should be a reasonable induction, since we already know that if p and q have solvable Galois group then so does p*q.</p>",
        "id": 224961644,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612315016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span></p>",
        "id": 224961667,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612315033
    },
    {
        "content": "<p>You may be right. Let me spend a bit more time thinking about it in the morning.</p>",
        "id": 224985477,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612340402
    },
    {
        "content": "<p>Sorry, I meant to write a reply to this earlier. Here's one way we could try to get around all this stuff.<br>\nFirst, letting <code>p</code> denote the minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, we have a tower <code>F &lt; split(p(X)) &lt; split(p(X)*(X^n - 1)) &lt; split(p(X)*(X^n - 1)*p(X^n))</code>. It should also be easy to show that the minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(X^n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> so we get that <code>split(min(a))</code> embeds into the last field in the tower. Also each field is normal over the previous one. We also know that the third field is solvable over the second one by the compositum proof. So it comes down to showing that <code>split(p(X)*(X^n - 1)*p(X^n))</code> is solvable over <code>split(p(X)*(X^n - 1))</code>. I think for that we basically need to show that it's generated as a field extension by nth roots of the roots of <code>p</code> and then we can separately prove that if we have the nth roots of unity then any field extension generated by nth roots of things in the base field is solvable.</p>",
        "id": 225260703,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612499778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span></p>",
        "id": 225260710,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612499789
    },
    {
        "content": "<p>I like this, it sidesteps a lot of the issues that I was worried about</p>",
        "id": 225261266,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612500542
    },
    {
        "content": "<p>in particular, it's nice that everything is a splitting field over F</p>",
        "id": 225261281,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612500588
    },
    {
        "content": "<p>I kind of feel like we even discussed this approach at some point</p>",
        "id": 225261285,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612500599
    },
    {
        "content": "<p>but I either lost the paper where I wrote it down or I didn't write it down</p>",
        "id": 225261330,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612500612
    },
    {
        "content": "<p>for some reason I was worried about showing that the minimal polynomial of a divides p(X^n), but now that I think about it, it doesn't seem bad at all</p>",
        "id": 225261333,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612500622
    },
    {
        "content": "<p>that seems like one of the less bad parts to me</p>",
        "id": 225261338,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612500641
    },
    {
        "content": "<p>because you can evaluate things in E</p>",
        "id": 225261347,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612500652
    },
    {
        "content": "<p>So here's a (partial?) list of things to do</p>\n<ol>\n<li>Show that <code>split(X^n - 1)</code> is solvable</li>\n<li>Show that <code>min(a)</code> divides <code>min(a^n) comp (X^n)</code></li>\n<li>Show that <code>split(p(X)*(X^n - 1)*p(X^n))</code> is generated over <code>split(p(X)*(X^n - 1))</code> by the nth roots of the roots of <code>p(X)</code>. One way to do this would be to note that it's generated by the roots of <code>p(X)</code>, <code>X^n - 1</code> and <code>p(X^n)</code> and the first two sets are already in the field <code>split(p(X)*(X^n - 1))</code> and the latter roots are all nth roots of roots of <code>p(X)</code></li>\n<li>Show that if a field is normal and generated by nth roots of things in the base field then its automorphism group is solvable</li>\n</ol>",
        "id": 225261513,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612500914
    },
    {
        "content": "<p>Actually, here's a better way of stating (3)</p>",
        "id": 225261523,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612500948
    },
    {
        "content": "<p>Show that if we have a field extension <code>F/E</code> and <code>E</code> is generated over <code>F</code> by the roots of <code>p(X^n)</code> and <code>p</code> and <code>X^n - 1</code> both split in <code>F</code> then <code>E</code> is generated by nth roots of things in <code>F</code></p>",
        "id": 225261595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501018
    },
    {
        "content": "<p>Of course we still also need to show that if <code>E/K/F</code> is a normal tower and <code>E/K</code> and <code>K/F</code> are both solvable then so is <code>E/F</code></p>",
        "id": 225261715,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501193
    },
    {
        "content": "<p>That last one shouldn't be bad at all</p>",
        "id": 225261763,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612501209
    },
    {
        "content": "<p>yeah</p>",
        "id": 225261769,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501214
    },
    {
        "content": "<p>(4) looks a bit tricky</p>",
        "id": 225261775,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501222
    },
    {
        "content": "<p>By the way, are we treating is_solvable as an instance or a ordinary hypothesis?</p>",
        "id": 225261784,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612501235
    },
    {
        "content": "<p>it's a type class</p>",
        "id": 225261800,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501252
    },
    {
        "content": "<p>so it should be an instance by default but sometimes it can't be I guess</p>",
        "id": 225261812,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225261775\">said</a>:</p>\n<blockquote>\n<p>(4) looks a bit tricky</p>\n</blockquote>\n<p>I somehow thought we had discussed a way to prove this using <code>induction_on_finset</code> but now I don't see how</p>",
        "id": 225261827,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501304
    },
    {
        "content": "<p>so should solvable_prod be an instance?</p>",
        "id": 225261829,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612501305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225261829\">said</a>:</p>\n<blockquote>\n<p>so should solvable_prod be an instance?</p>\n</blockquote>\n<p>yeah, is it not?</p>",
        "id": 225261835,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501315
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">solvable_prod</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_solvable</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">is_solvable</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_solvable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 225261877,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612501327
    },
    {
        "content": "<p><code>is_solvable</code> was only changed to a type class when it got merged into mathlib so I probably forgot to change some things over</p>",
        "id": 225261887,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501351
    },
    {
        "content": "<p>but yeah it should be I think</p>",
        "id": 225261899,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225261827\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225261775\">said</a>:</p>\n<blockquote>\n<p>(4) looks a bit tricky</p>\n</blockquote>\n<p>I somehow thought we had discussed a way to prove this using <code>induction_on_finset</code> but now I don't see how</p>\n</blockquote>\n<p>Okay, I see a funny way to do this but I'm not sure it's a great idea. You could do a proof by contradiction and show by induction on the set of generators of the field extension that <code>E/F(a1,...,ak)</code> is not solvable but that would show <code>E/top</code> is not solvable which is absurd</p>",
        "id": 225262307,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612501895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225261715\">said</a>:</p>\n<blockquote>\n<p>Of course we still also need to show that if <code>E/K/F</code> is a normal tower and <code>E/K</code> and <code>K/F</code> are both solvable then so is <code>E/F</code></p>\n</blockquote>\n<p>Done (in normal.lean)</p>",
        "id": 225267298,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612508739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Does this look true to you?<br>\n<code>example : p.splits (algebra_map F (p.comp q).splitting_field) :=</code></p>",
        "id": 225622634,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612825434
    },
    {
        "content": "<p>(the idea is that applying q to the roots of <code>p.comp q</code> gives you roots of <code>p</code>)</p>",
        "id": 225622741,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612825476
    },
    {
        "content": "<p>If it is true, it would be a nice lemma for polynomial_galois_group.lean, and it would construct the inclusion from the splitting field of p(x) to the splitting field of p(x^n)</p>",
        "id": 225622831,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612825531
    },
    {
        "content": "<p>I'm pretty sure that's true. I think it's easy to see if you work in the algebraic closure (not necessarily the easiest Lean proof though of course). Then if <code>a</code> is a root of <code>p</code>, let <code>b</code> be a root of <code>q - a</code> and then <code>q(b)</code> gives you <code>a</code> so <code>a</code> is in the splitting field of <code>p.comp q</code></p>",
        "id": 225631866,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612832134
    },
    {
        "content": "<p>but we don't actually need to construct a map from <code>p.splitting_field</code> to <code>(p.comp (X^n)).splitting_field</code></p>",
        "id": 225631934,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612832169
    },
    {
        "content": "<p>because we can just use <code>p(X)*(X^n - 1)*p(X^n)</code>'s splitting field, i.e. show that it is solvable and that <code>p.splitting_field</code> embeds into it</p>",
        "id": 225632011,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612832217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225631866\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure that's true. I think it's easy to see if you work in the algebraic closure (not necessarily the easiest Lean proof though of course). Then if <code>a</code> is a root of <code>p</code>, let <code>b</code> be a root of <code>q - a</code> and then <code>q(b)</code> gives you <code>a</code> so <code>a</code> is in the splitting field of <code>p.comp q</code></p>\n</blockquote>\n<p>wait this didn't make sense</p>",
        "id": 225632047,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612832243
    },
    {
        "content": "<p>oh, wait, no it does</p>",
        "id": 225632089,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612832276
    },
    {
        "content": "<p>because <code>b</code> is a root of <code>p.comp q</code></p>",
        "id": 225632134,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612832284
    },
    {
        "content": "<p>I guess it isn't necessary, although it feels a bit weird to take the splitting field of that product when some of the terms already split</p>",
        "id": 225632425,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612832513
    },
    {
        "content": "<p>I guess it is a nice thing to prove. But the proof I gave might be a bit annoying in Lean</p>",
        "id": 225637669,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612836873
    },
    {
        "content": "<p>although maybe actually not so bad</p>",
        "id": 225637686,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612836887
    },
    {
        "content": "<p>If q is constant this isn't true. You need some statement saying that every root of p shows up as a value of q</p>",
        "id": 225652592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612855085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225652592\">said</a>:</p>\n<blockquote>\n<p>If q is constant this isn't true. You need some statement saying that every root of p shows up as a value of q</p>\n</blockquote>\n<p>Yeah, the proof I gave above doesn't work if <code>q</code> is constant because <code>q - a</code> is constant and has no roots. But the proof I gave above works whenever <code>q</code> is not constant (and does implicitly show that every root of <code>p</code> shows up as a value of <code>q</code> in the algebraic closure)</p>",
        "id": 225730984,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1612893738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I proved it:<br>\n<code>example (hq : q.nat_degree ≠ 0) : p.splits (algebra_map F (p.comp q).splitting_field) :=</code></p>",
        "id": 225780654,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612918313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> I've made the reduction to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">gal_X_pow_sub_C_is_solvable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_solvable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gal</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>modulo a few sorries (transfering solvability along isomorphic F-algebras, solvability is preserved by multiset-product, constant polynomials are solvable)</p>",
        "id": 225803108,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612943491
    },
    {
        "content": "<p>now the real fun begins!</p>",
        "id": 225803337,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612943686
    },
    {
        "content": "<p>You can embed the Galois group into a semidirect product of abelian groups</p>",
        "id": 225806669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612946213
    },
    {
        "content": "<p>So you can write down a map to an abelian group with abelian kernel</p>",
        "id": 225806702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612946237
    },
    {
        "content": "<p>Hoorah!<br>\n\"The new definitions found immediate use: soon after we contributed our definition of<br>\nintermediate_field to mathlib, the Berkeley Galois theory group used it in a formalization<br>\nof the primitive element theorem. Soon after the primitive element theorem was merged<br>\ninto mathlib, we used it in our development of the trace form. This anecdote illustrates the<br>\ndecentralized development style of mathlib, with different groups and people building on each<br>\nother’s results in a collaborative process.\"<br>\n(<a href=\"https://arxiv.org/pdf/2102.02600.pdf\">https://arxiv.org/pdf/2102.02600.pdf</a>)</p>",
        "id": 225876552,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1612978454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Project.20ideas/near/225876552\">said</a>:</p>\n<blockquote>\n<p>Hoorah!<br>\n\"The new definitions found immediate use: soon after we contributed our definition of<br>\nintermediate_field to mathlib, the Berkeley Galois theory group used it in a formalization<br>\nof the primitive element theorem. Soon after the primitive element theorem was merged<br>\ninto mathlib, we used it in our development of the trace form. This anecdote illustrates the<br>\ndecentralized development style of mathlib, with different groups and people building on each<br>\nother’s results in a collaborative process.\"<br>\n(<a href=\"https://arxiv.org/pdf/2102.02600.pdf\">https://arxiv.org/pdf/2102.02600.pdf</a>)</p>\n</blockquote>\n<p>wow, this is really great</p>",
        "id": 226181083,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1613156521
    },
    {
        "content": "<p>Also check out the mention you get on p14. It's about time you guys wrote a paper, by the way. Or maybe you want to do insolvability of the quintic first.</p>",
        "id": 226189102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613160375
    },
    {
        "content": "<p>They wrote a paper for Exp.Math. right?</p>",
        "id": 226189955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613160783
    },
    {
        "content": "<p>Oh maybe!</p>",
        "id": 226190152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613160864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I think I can't make it to the meeting tomorrow (just for this week). Sorry for the short notice.</p>",
        "id": 226342921,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1613361197
    },
    {
        "content": "<p>No worries. Thanks for letting me know.</p>",
        "id": 226343076,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613361439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Do you want to meet this week, or skip until next week?</p>",
        "id": 226343077,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613361452
    },
    {
        "content": "<p>I think skipping until next week is fine -- I don't have anything I think we desperately need to talk about</p>",
        "id": 226362632,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1613382386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Here's a progress update on the theoretical side of abel-ruffini (SBR implies solvable).<br>\nI've moved stuff to the <a href=\"https://github.com/leanprover-community/mathlib/compare/abel_ruffini\"><code>abel_ruffini</code> branch</a> (as opposed to the <code>abel-ruffini</code> branch), to see where things are at.<br>\nHere are the remaining sorries (of various levels of difficulty):</p>\n<ul>\n<li>If <code>K ≃ₐ[F] L</code> then <code>is_solvable (K ≃ₐ[F] K)</code> implies <code>is_solvable (L ≃ₐ[F] L)</code> (the main thing is just writing down the isomorphism between the two groups).</li>\n<li>Applying a field automorphism to a root of unity results in raising that root of unity to some power.</li>\n<li><code>X ^ n</code> splits in any field.</li>\n<li>Prove <code>solvable_of_ker_le_range</code>. I think that this is fully proved in the <code>abel-ruffini</code> branch, but things are rather messy, and we will need to clean things up before PRing.</li>\n</ul>\n<p>At some point, could you work on cleaning up the solvable stuff in the main <code>abel-ruffini</code> branch?</p>",
        "id": 229592713,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1615343754
    },
    {
        "content": "<p>Did you guys look at the Coq work? Do they set things up substantially differently?</p>",
        "id": 229607937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615356198
    },
    {
        "content": "<p>I think so. We're taking a bit of a wacky approach with the whole inductive solvable-by-radicals stuff, but it seems to be working quite smoothly.</p>",
        "id": 229608572,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1615356772
    },
    {
        "content": "<p>All the sorries are gone! (for SBR implies solvable)</p>",
        "id": 229748419,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1615411877
    },
    {
        "content": "<p>I hacked together a proof of the short exact sequence lemma, but it would still be good to clean up the remaining stuff in solvable.lean</p>",
        "id": 229748495,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1615411917
    }
]