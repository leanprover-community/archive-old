[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I just pushed a commit to the <code>abel_ruffini</code> branch that rearranges some stuff in <code>abelianization.lean</code>. In particular, I created sections for <code>general_nth_commutator</code> and <code>commutator_map</code>, made the group <code>G</code> an implicit rather than explicit argument of <code>general_nth_commutator</code> and changed some stuff to align with mathlib style. I also renamed <code>general_nth_commutator_subgroup</code> to <code>general_nth_commutator_zero</code> for consistency.</p>",
        "id": 221422787,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609629492
    },
    {
        "content": "<p>Also, I thought it might be a good idea to start using separate topics for stuff because the <code>Project Ideas</code> thread is getting hard too long to easily find stuff from the past</p>",
        "id": 221422804,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609629537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> I tried refactoring your lemma <code>quotient_something</code> a bit and came up with this: <a href=\"https://github.com/leanprover-community/mathlib/blob/f9eb3be0b8feba369b0991856952ce67eb0fb4ea/src/group_theory/abelianization.lean#L412\">https://github.com/leanprover-community/mathlib/blob/f9eb3be0b8feba369b0991856952ce67eb0fb4ea/src/group_theory/abelianization.lean#L412</a></p>",
        "id": 221441183,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609663111
    },
    {
        "content": "<p>really, I split it into three lemmas: <code>le_ker</code>, <code>nth_commutator_le_ker</code> and <code>nth_commutator_le_of_solvable_quotient</code>, which are all near the line I linked to above</p>",
        "id": 221441196,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609663163
    },
    {
        "content": "<p>and now I've also added a refactored version of <code>short_exact_sequence_solvable</code> here: <a href=\"https://github.com/leanprover-community/mathlib/blob/ce6eb692e5dad1c0f02b939442c4b2af2185b49a/src/group_theory/abelianization.lean#L420\">https://github.com/leanprover-community/mathlib/blob/ce6eb692e5dad1c0f02b939442c4b2af2185b49a/src/group_theory/abelianization.lean#L420</a></p>",
        "id": 221443221,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609667208
    },
    {
        "content": "<p>It turns out that the fact that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi>G</mi><mo>→</mo><msup><mi>G</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">G' \\to G \\to G''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> forms a short exact sequence with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">G'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">G''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> solvable then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is solvable does not depend on the first morphism being injective or on the second morphism being surjective, which I discovered when I refactored your proof</p>",
        "id": 221443271,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609667294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Some of the stuff about solvable groups has now been merged into mathlib and some changes have occurred. For example, <code>nth_commutator</code> is now called <code>derived_series</code> and <code>is_solvable</code> is a class (though that shouldn't make a big difference). Also I moved everything from <code>abelianization.lean</code> to <code>solvable.lean</code>.</p>",
        "id": 221929399,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610017921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> What happened in <a href=\"https://github.com/leanprover-community/mathlib/commit/0e0175a842a1050d3f87d5519da05b7a0144518e#diff-8eeb228aa981ffa11f7e501d0d8b0d9c0a604a1e4263cd4a21772a0829949558\">this commit</a> to the abel-ruffini branch? It seems to have deleted a lot of stuff from <code>group_theory/solvable.lean</code></p>",
        "id": 222010485,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610058273
    },
    {
        "content": "<p>uh oh, I might have mucked up a merge</p>",
        "id": 222011162,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610058678
    },
    {
        "content": "<p>no problem</p>",
        "id": 222011170,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610058684
    },
    {
        "content": "<p>I just wasn't sure if I was confused about something</p>",
        "id": 222011185,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610058695
    },
    {
        "content": "<p>shall I add it back or will you?</p>",
        "id": 222011261,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610058725
    },
    {
        "content": "<p>looks like a few other files didn't quite get merged correctly</p>",
        "id": 222011456,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610058849
    },
    {
        "content": "<p>there seem to be some stray &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD, &gt;&gt;&gt;&gt;&gt;&gt;&gt; master</p>",
        "id": 222011480,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610058877
    },
    {
        "content": "<p>I'm adding it back now</p>",
        "id": 222011726,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059000
    },
    {
        "content": "<p>Actually, what was the context of that commit?</p>",
        "id": 222011789,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059043
    },
    {
        "content": "<p>you were trying to merge recent changes to mathlib right?</p>",
        "id": 222011810,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059059
    },
    {
        "content": "<p>IIRC, the abel ruffini branch had several hundred \"files changed\" (rather than 10 or so), so I tried to do a \"git merge master\" to fix it.</p>",
        "id": 222011921,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Solvable.20groups/near/222011921\">said</a>:</p>\n<blockquote>\n<p>IIRC, the abel ruffini branch had several hundred \"files changed\" (rather than 10 or so), so I tried to do a \"git merge master\" to fix it.</p>\n</blockquote>\n<p>How did that happen?</p>",
        "id": 222011952,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059139
    },
    {
        "content": "<p>The several hundred \"files changed\"?</p>",
        "id": 222011979,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059160
    },
    {
        "content": "<p>yeah</p>",
        "id": 222012003,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059174
    },
    {
        "content": "<p>not sure</p>",
        "id": 222012020,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059187
    },
    {
        "content": "<p>this page does look weird though: <a href=\"https://github.com/leanprover-community/mathlib/compare/abel-ruffini\">https://github.com/leanprover-community/mathlib/compare/abel-ruffini</a></p>",
        "id": 222012034,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059198
    },
    {
        "content": "<p>if you scroll to the bottom</p>",
        "id": 222012059,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059202
    },
    {
        "content": "<p>there's a ton of commits that aren't part of a usual merge</p>",
        "id": 222012099,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059215
    },
    {
        "content": "<p>hmm, how about this: I can go back to <a href=\"https://github.com/leanprover-community/mathlib/commit/f79b79c89b0c698e4269ac8fdbc3adeb2492a333\">this commit</a> and then merge with mathlib master again</p>",
        "id": 222012119,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059230
    },
    {
        "content": "<p>assuming you didn't do any work in between that commit and now</p>",
        "id": 222012143,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059244
    },
    {
        "content": "<p>I might have made a few changes since then though</p>",
        "id": 222012145,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059244
    },
    {
        "content": "<p>oh, hmm</p>",
        "id": 222012154,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059252
    },
    {
        "content": "<p>which commit?</p>",
        "id": 222012163,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059256
    },
    {
        "content": "<p>well, the merge I think</p>",
        "id": 222012177,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059265
    },
    {
        "content": "<p>which files did you edit?</p>",
        "id": 222012191,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059277
    },
    {
        "content": "<p>probably just files related to my PR</p>",
        "id": 222012201,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059288
    },
    {
        "content": "<p>actually, not sure if I changed anything</p>",
        "id": 222012226,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059306
    },
    {
        "content": "<p>none of my open VSCode tabs have anything</p>",
        "id": 222012286,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059323
    },
    {
        "content": "<p>and I don't remember specifically making any changes</p>",
        "id": 222012304,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Solvable.20groups/near/222012201\">said</a>:</p>\n<blockquote>\n<p>probably just files related to my PR</p>\n</blockquote>\n<p>do you just mean you were merging changes to mathlib from your PR?</p>",
        "id": 222012315,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059338
    },
    {
        "content": "<p>oh, that might be right</p>",
        "id": 222012331,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059347
    },
    {
        "content": "<p>but that's not important</p>",
        "id": 222012347,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059361
    },
    {
        "content": "<p>I think it's fine to revert back to that old commit</p>",
        "id": 222012358,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610059369
    },
    {
        "content": "<p>okay, let me try it</p>",
        "id": 222012367,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059376
    },
    {
        "content": "<p>sorry, this is sort of my fault. I did a rebase instead of a merge recently and it made things more confusing on the next merge</p>",
        "id": 222013273,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610059913
    },
    {
        "content": "<p>ah ok, no worries</p>",
        "id": 222014040,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610060388
    },
    {
        "content": "<p>are things fixed?</p>",
        "id": 222014056,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610060396
    },
    {
        "content": "<p>I'm not quite done yet but I think it should be fine. But my computer crashed because I also had zoom open</p>",
        "id": 222014180,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610060446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Solvable.20groups/near/222013273\">said</a>:</p>\n<blockquote>\n<p>sorry, this is sort of my fault. I did a rebase instead of a merge recently and it made things more confusing on the next merge</p>\n</blockquote>\n<p>although this wasn't why merging <code>solvable.lean</code> was messy. For some reason git just had trouble figuring out how to merge that file</p>",
        "id": 222015151,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610061038
    },
    {
        "content": "<p>Okay, everything should be okay now. And even if you did add some stuff during the merge you did it should still be there I think</p>",
        "id": 222017450,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610062735
    },
    {
        "content": "<p>I think the <code>solvable.lean</code> merge was just pretty confusing</p>",
        "id": 222017474,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610062761
    },
    {
        "content": "<p>Is there a particular reason why the version of solvable currently in mathlib leaves out the general_nth_commutator things? I got the solvable_groups branch to compile correctly, but I needed to put in the general_nth_commutator results since they are used in the proof of the generalization of the short exact sequence implying solvability</p>",
        "id": 222380104,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1610413260
    },
    {
        "content": "<p>I could just rewrite the proofs so they don't use the general_nth_commutator results but rather include the proofs directly if we don't want to keep the general_nth_commutator</p>",
        "id": 222380215,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1610413336
    },
    {
        "content": "<p>also, if we do keep it, should I rename it to something like general_derived_series? <span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span>  <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span></p>",
        "id": 222380241,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1610413372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span>  It's not in mathlib because I didn't PR it to mathlib so far but there's no deeper reason. I'm not sure whether <code>general_nth_commutator</code> should be included or not. It's the kind of design decision that PR reviewers can probably comment on. In some recent changes I pushed to the abel-ruffini branch, I added one proof that doesn't use <code>general_nth_commutator</code> (see the lemma <code>short_exact_sequence_solvable_new</code> in <code>solvable.lean</code>). I think if you do include <code>general_nth_commutator</code> in your PR you should probably change the name. <code>general_derived_series</code> sounds reasonable I guess.</p>",
        "id": 222393352,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610429476
    },
    {
        "content": "<p>I haven't been following your work here closely, but I seem to recall that you (almost?) have a proof that S5 isn't solvable somewhere. Could you point me to it?</p>",
        "id": 232194615,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1616967031
    },
    {
        "content": "<p>I've been working on some adjacent topics (<a href=\"https://github.com/leanprover-community/mathlib/issues/6913\">#6913</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/6926\">#6926</a>) that may be helpful, but I don't want to duplicate too much work.</p>",
        "id": 232194670,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1616967107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Insolvability of S_5 is basically done, but isn't in mathlib yet (<span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span>  is working on it). However, our proof of insolvability of S_5 is very hacky (I've included the core of the proof at the end of this message, in case you want a flavor of what it's like). In particular, we haven't done anything with alternating groups or simple groups, so you don't need to worry about duplicating our work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">weekday</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">weekday</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g1</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:=</span> <span class=\"n\">monday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:=</span> <span class=\"n\">tuesday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:=</span> <span class=\"n\">thursday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:=</span> <span class=\"n\">friday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:=</span> <span class=\"n\">wednesday</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:=</span> <span class=\"n\">monday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:=</span> <span class=\"n\">tuesday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:=</span> <span class=\"n\">friday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:=</span> <span class=\"n\">wednesday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:=</span> <span class=\"n\">thursday</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g3</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:=</span> <span class=\"n\">thursday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:=</span> <span class=\"n\">friday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:=</span> <span class=\"n\">wednesday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:=</span> <span class=\"n\">monday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:=</span> <span class=\"n\">tuesday</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g4</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:=</span> <span class=\"n\">wednesday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:=</span> <span class=\"n\">tuesday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:=</span> <span class=\"n\">friday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:=</span> <span class=\"n\">thursday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:=</span> <span class=\"n\">monday</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g5</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:=</span> <span class=\"n\">friday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:=</span> <span class=\"n\">tuesday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:=</span> <span class=\"n\">monday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:=</span> <span class=\"n\">thursday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:=</span> <span class=\"n\">wednesday</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ1</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">≃</span> <span class=\"n\">weekday</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g2</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ2</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">≃</span> <span class=\"n\">weekday</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g3</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g3</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ3</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">≃</span> <span class=\"n\">weekday</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g4</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g5</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">alternating_stability</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ1</span> <span class=\"bp\">∈</span> <span class=\"n\">derived_series</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_top</span> <span class=\"n\">σ1</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">σ1</span> <span class=\"bp\">=</span> <span class=\"n\">σ3</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">σ2</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span> <span class=\"bp\">*</span> <span class=\"n\">σ2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ2</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span> <span class=\"bp\">*</span> <span class=\"n\">σ2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">σ1</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">σ3</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">derived_series_normal</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conj_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">general_commutator_containment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"o\">((</span><span class=\"n\">derived_series_normal</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conj_mem</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_solvable_of_mem_derived_series</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">derived_series</span> <span class=\"n\">G</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_solvable</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">is_solvable_def</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">not_exists_of_forall_not</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">mt</span> <span class=\"n\">subgroup.ext'_iff.mp</span>\n  <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">set.ext_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">not_forall_of_exists_not</span>\n    <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">iff.symm</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">subgroup.mem_bot.mp</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">n</span><span class=\"o\">)⟩))))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">weekday_perm_unsolvable</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_solvable</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"n\">not_solvable_of_mem_derived_series</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">equiv.ext_iff.mp</span>\n  <span class=\"o\">(</span><span class=\"n\">not_forall_of_exists_not</span> <span class=\"o\">⟨</span><span class=\"n\">wednesday</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">⟩))</span> <span class=\"n\">alternating_stability</span>\n</code></pre></div>",
        "id": 232195580,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616968032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Let me know if you're moving in the direction of finding generating sets for A_n and S_n (e.g., that A_n is generated by 3-cycles, which can be used to prove simplicity). I've been working on generating sets for S_n (<a href=\"https://github.com/leanprover-community/mathlib/compare/perm_generation\">https://github.com/leanprover-community/mathlib/compare/perm_generation</a>), so we should coordinate if you're moving in that direction.</p>",
        "id": 232195815,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616968262
    },
    {
        "content": "<p>I only started working on this kind of group theory a few days ago, but I was considering working in that direction, to show that <code>A_n</code> is simple.</p>",
        "id": 232196513,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1616969030
    },
    {
        "content": "<p>Great. My guess is that you might not be able to directly use the results I've got in <a href=\"https://github.com/leanprover-community/mathlib/compare/perm_generation\">https://github.com/leanprover-community/mathlib/compare/perm_generation</a>, since those are for generating S_n, but some of your stuff might naturally fit in that file.</p>",
        "id": 232196609,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616969127
    },
    {
        "content": "<p>This code makes it clear that \"there is more than one S_5\", but I suspect that the \"canonical\" S_5 will be <code>perm (fin 5)</code>? This is just like universal properties isn't it -- should one prove theorems about \"the canonical S_5\" or about all S_5's? Is S_5 defined up to isomorphism or up to unique isomorphism? etc.</p>",
        "id": 232197482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616970135
    },
    {
        "content": "<p>Our plan is to generalize to <code>5 ≤ cardinal.mk X</code></p>",
        "id": 232197693,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616970404
    },
    {
        "content": "<p>(using the existing result, plus an injective homomorphism <code>perm weekday -&gt; perm X</code>)</p>",
        "id": 232201045,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616974242
    },
    {
        "content": "<p>I've poked at this a bit, it seems as if most of the work (in the approach that occurs to me) is just the casework to show that the product of two swaps is generated by 3-cycles, and to show that <code>f.card.support = 3</code> implies <code>is_cycle</code></p>",
        "id": 232201773,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1616975066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Solvable.20groups/near/232196609\">said</a>:</p>\n<blockquote>\n<p>Great. My guess is that you might not be able to directly use the results I've got in <a href=\"https://github.com/leanprover-community/mathlib/compare/perm_generation\">https://github.com/leanprover-community/mathlib/compare/perm_generation</a>, since those are for generating S_n, but some of your stuff might naturally fit in that file.</p>\n</blockquote>\n<p>I'm sorry, it looks like I missed some critical parts of this branch, and ended up duplicating some of it in <a href=\"https://github.com/leanprover-community/mathlib/issues/6951\">#6951</a>.</p>",
        "id": 232510490,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1617144986
    },
    {
        "content": "<p>I think the best move is to make <a href=\"https://github.com/leanprover-community/mathlib/issues/6951\">#6951</a> depend on both <a href=\"https://github.com/leanprover-community/mathlib/issues/6968\">#6968</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/6969\">#6969</a>, and I can change my notation as we go.</p>",
        "id": 232510677,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1617145113
    },
    {
        "content": "<p>Actually, I've just added the duplicate stuff in the past day or two, so it's probably me who is duplicating you</p>",
        "id": 232510909,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1617145245
    },
    {
        "content": "<p>The stuff that you've done in your PR looks better than mine, actually</p>",
        "id": 232511270,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1617145432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> How does this sound: I'll close my PRs, and maybe make a few suggestions to yours?</p>",
        "id": 232511499,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1617145563
    },
    {
        "content": "<p>That's ok with me, I'll just leave everything be.</p>",
        "id": 232518486,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1617150585
    },
    {
        "content": "<p>You can push changes to those PRs if you'd like.</p>",
        "id": 232518568,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1617150633
    },
    {
        "content": "<p>I see that you've also added some stuff about cycle types since we last talked, so I will not work on that without starting a Zulip discussion. I'd like to show that equal cycle types implies conjugacy, but the ordinary simple proof seems hard to formalize...</p>",
        "id": 232518612,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1617150687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/7453\">#7453</a></p>",
        "id": 237243688,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1620082693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> If you want to take a stab at some of the remaining sorries at <a href=\"https://github.com/leanprover-community/mathlib/compare/polySn\">https://github.com/leanprover-community/mathlib/compare/polySn</a>, you can do <code>leanproject get mathlib:polySn</code> to get a copy of the branch.</p>",
        "id": 237269091,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1620104710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306638\">@Jordan Brown</span> Johan found a much better way to work with explicit permutations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equiv.perm.fin_5_not_solvable</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_solvable</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">x_ne_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_forall_of_exists_not</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">equiv.ext_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_solvable_of_mem_derived_series</span> <span class=\"n\">x_ne_one</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_top</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">derived_series_normal</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conj_mem</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">general_commutator_containment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"o\">((</span><span class=\"n\">derived_series_normal</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conj_mem</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv.perm.not_solvable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">is_solvable</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">introI</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">↪</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">cardinal.lift_mk_le</span><span class=\"o\">,</span> <span class=\"n\">cardinal.mk_fin</span><span class=\"o\">,</span> <span class=\"n\">cardinal.lift_nat_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.cast_bit1</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">cardinal.lift_id</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">equiv.perm.fin_5_not_solvable</span> <span class=\"o\">(</span><span class=\"n\">solvable_of_solvable_injective</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv.perm.via_embedding_hom_injective</span> <span class=\"o\">(</span><span class=\"n\">nonempty.some</span> <span class=\"n\">key</span><span class=\"o\">))),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237744364,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1620342605
    },
    {
        "content": "<p>With <code>form_perm</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">])</span>\n<span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 237751814,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620348351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> That looks really great!</p>",
        "id": 237772516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620367083
    },
    {
        "content": "<p>Thanks. I'm hoping to make cyclic permutation notation a la matrix notation</p>",
        "id": 237772563,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620367120
    },
    {
        "content": "<p>With something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">cl</span><span class=\"bp\">`</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"bp\">\\</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_perm</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 237772690,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620367239
    },
    {
        "content": "<p>So one can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cl</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and have that automatically be the permutation corresponding to <code>(1 3 5)</code>, with Lean knowing that it is exactly equal to <code>cl [3, 5, 1]</code></p>",
        "id": 237772740,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620367293
    },
    {
        "content": "<p>Additionally, some of the work I've been trying to do with changing <code>cycle_factors</code> to a finset should lead us to be able to make <code>#eval (p : perm (fin n))</code> be able to have a way to display it -- since it is fintype, we can factor it out into its cycles, then each cyclic permutation can be associated precisely with a single <code>cycle</code>, and since <code>fin n</code> has an order, we can choose what to display for that cycle</p>",
        "id": 237773279,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620367764
    }
]