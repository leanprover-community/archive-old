[
    {
        "content": "<p>Do we know that an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-algebra homomorphism on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> is determined by its action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>? For example do we have a lemma saying that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is a field extension with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">⊤</mi></mrow><annotation encoding=\"application/x-tex\">F(S) = \\top</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">⊤</span></span></span></span>  and if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>-algebra automorphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is the identity if and only if it's the identity on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>? For some reason I feel like we should have something like this but I don't see it</p>",
        "id": 222394826,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610431370
    },
    {
        "content": "<p>I've needed this too. I don't think that we have it.</p>",
        "id": 222395225,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610431926
    },
    {
        "content": "<p>A while ago I defined an equalizer subalgebra which allows you to do this for subalgebras</p>",
        "id": 222395231,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610431941
    },
    {
        "content": "<p>Could we define an equalizer intermediate field?</p>",
        "id": 222395238,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610431976
    },
    {
        "content": "<p>I guess, if E/F is a field extension and if you have two F-algebra homomorphisms E-&gt;A, then the equalizer is an intermediate field?</p>",
        "id": 222395315,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610432046
    },
    {
        "content": "<p>yeah, I guess that's true</p>",
        "id": 222395370,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610432143
    },
    {
        "content": "<p>actually I think I might really want it for subalgebras not intermediate fields. Since I guess most of the stuff in <code>splitting_field.lean</code> is about algebra adjoin not intermediate field adjoin</p>",
        "id": 222395426,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610432193
    },
    {
        "content": "<p>is there a lemma saying exactly what I said above for subalgebras? (I realize it's pretty easy to prove using the equalizer but if it's already there I don't want to redo it)</p>",
        "id": 222395444,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610432228
    },
    {
        "content": "<p>I would guess that it's not stated explicitly for subalgebra adjoin</p>",
        "id": 222395514,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610432340
    },
    {
        "content": "<p>It would be a good lemma</p>",
        "id": 222395517,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610432347
    },
    {
        "content": "<p>It doesn't seem like it's in ring_theory/adjoin, which would be the natural place</p>",
        "id": 222395583,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610432433
    },
    {
        "content": "<p>Actually, do you know why the <code>gc</code> and <code>gi</code> instances on <code>algebra.adjoin</code> are protected?</p>",
        "id": 222395595,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610432481
    },
    {
        "content": "<p>no, although there is api at the top of ring_theory/adjoin</p>",
        "id": 222395682,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610432592
    },
    {
        "content": "<p><code>adjoin_le_iff</code>, for example</p>",
        "id": 222395687,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610432607
    },
    {
        "content": "<p>actually, here's a possibly stupid question: does mathlib know that two algebra isomorphisms are equal if and only if they are equal as algebra homomorphisms?</p>",
        "id": 222396784,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610433922
    },
    {
        "content": "<p>not sure. it's a one-liner using the ext-lemmas though</p>",
        "id": 222396990,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610434184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Random.20intermediate_field.2Eadjoin.20question/near/222396990\">said</a>:</p>\n<blockquote>\n<p>not sure. it's a one-liner using the ext-lemmas though</p>\n</blockquote>\n<p>hmm, for me it's a very slow one-liner using simp and a faster two-linear using <code>simp only</code> with a bunch of little lemmas thrown in</p>",
        "id": 222397131,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610434351
    },
    {
        "content": "<p>maybe \"very\" is an exaggeration</p>",
        "id": 222397226,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1610434521
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">f.to_alg_hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.to_alg_hom</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.ext_iff.mp</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 222397285,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610434593
    }
]