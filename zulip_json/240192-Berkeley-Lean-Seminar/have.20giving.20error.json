[
    {
        "content": "<p>the expression</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>gives no errors but the expression</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>gives an error at the third multiplication symbol. Why is this and how can it be avoided?</p>",
        "id": 198821239,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590526948
    },
    {
        "content": "<p>actually, even looking at the state after your first have, it's not what I expected</p>",
        "id": 198821757,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527219
    },
    {
        "content": "<p>Shouldn't it be <code>:=</code> rather than <code>:</code> ?</p>",
        "id": 198821809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1590527257
    },
    {
        "content": "<p>the <code>:</code> is saying the type of <code>h</code></p>",
        "id": 198821919,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527308
    },
    {
        "content": "<p>for instance <code>have h : (\\forall a : \\N), (\\forall b : \\N), a*b = a*b \\to a*b = a*b</code> works and gives what you would expect</p>",
        "id": 198821993,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527364
    },
    {
        "content": "<p>I thought that it would function like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>(which functions as expected)</p>",
        "id": 198821999,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590527368
    },
    {
        "content": "<p>I thought that it would function like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>(which functions as expected)</p>",
        "id": 198822025,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590527389
    },
    {
        "content": "<p>might be worth asking in the new members stream</p>",
        "id": 198822071,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527403
    },
    {
        "content": "<p><code>have h : a = b,</code> also works as expected. As does <code>have h : a = b \\and a = b,</code></p>",
        "id": 198822230,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527505
    },
    {
        "content": "<p>btw, I think they typically like you to give a mwe (minimum working example) in the other streams</p>",
        "id": 198822357,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527551
    },
    {
        "content": "<p>to report back what was said in the new members stream, apparently there's an insane bug where when you use the letter <code>a</code> as a variable in a have statement, Lean implicitly adds a universal quantifier (basically)</p>",
        "id": 198823206,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590528043
    },
    {
        "content": "<p>The last time this bug was discussed, fixing it involved the impossible act of editing core Lean. Now there's a fork and this bug is fixable.</p>",
        "id": 198877775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590578342
    }
]