[
    {
        "content": "<p>we're having big issues with the issues in <a href=\"https://tqft.net/mathlib/number_theory/cyclotomic/basic\">file#number_theory/cyclotomic/basic</a>: </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>/- The `fails_quickly` linter reports: -/\n/- TYPE CLASS SEARCHES TIMED OUT.\nThe following instances are part of a loop, or an excessively long search.\nIt is common that the loop occurs in a different class than the one flagged below,\nbut usually an instance that is part of the loop is also flagged.\nTo debug:\n(1) run `scripts/mk_all.sh` and create a file with `import all` and\n`set_option trace.class_instances true`\n(2) Recreate the state shown in the error message. You can do this easily by copying the type of\nthe instance (the output of `#check @my_instance`), turning this into an example and removing the\nlast argument in square brackets. Prove the example using `by apply_instance`.\nFor example, if `additive.topological_add_group` raises an error, run\n</code></pre></div>\n<p>example {G : Type*} [topological_space G] [group G] : topological_add_group (additive G) :=<br>\nby apply_instance</p>\n<div class=\"codehilite\"><pre><span></span><code>(3) What error do you get?\n(3a) If the error is &quot;tactic.mk_instance failed to generate instance&quot;,\nthere might be nothing wrong. But it might take unreasonably long for the type-class inference to\nfail. Check the trace to see if type-class inference takes any unnecessary long unexpected turns.\nIf not, feel free to increase the value in the definition of the linter `fails_quickly`.\n(3b) If the error is &quot;maximum class-instance resolution depth has been reached&quot; there is almost\ncertainly a loop in the type-class inference. Find which instance causes the type-class inference to\ngo astray, and fix that instance. -/\n#check @is_cyclotomic_extension.number_field /- maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\nState:\nS : set ℕ+,\nK : Type w,\nL : Type z,\n_inst_4 : field K,\n_inst_5 : field L,\n_inst_6 : algebra K L,\nh : number_field K,\n_inst_7 : fintype ↥S\n⊢ number_field L -/\n#check @cyclotomic_field.char_zero /- maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\nState:\nn : ℕ+,\nK : Type w,\n_inst_4 : field K\n⊢ char_zero (cyclotomic_field n K) -/\n#check @cyclotomic_field.is_cyclotomic_extension /- maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\nState:\nn : ℕ+,\nK : Type w,\n_inst_4 : field K\n⊢ is_cyclotomic_extension {n} K (cyclotomic_field n K) -/\n#check @is_alg_closed_of_char_zero.is_cyclotomic_extension /- maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\nState:\nK : Type w,\n_inst_4 : field K,\n_inst_7 : is_alg_closed K,\nS : set ℕ+\n⊢ is_cyclotomic_extension S K K -/\n\n/- The `dangerous_instance` linter reports: -/\n/- DANGEROUS INSTANCES FOUND.\nThese instances are recursive, and create a new type-class problem which will have metavariables.\nPossible solution: remove the instance attribute or make it a local instance instead.\n\nCurrently this linter does not check whether the metavariables only occur in arguments marked with `out_param`, in which case this linter gives a false positive. -/\n#check @is_cyclotomic_extension.number_field /- The following arguments become metavariables. argument 1: (S : set ℕ+), argument 2: (K : Type w) -/\n#check @is_cyclotomic_extension.finite_dimensional /- The following arguments become metavariables. argument 1: (S : set ℕ+) -/\n#check @is_cyclotomic_extension.is_galois /- The following arguments become metavariables. argument 1: (n : ℕ+) -/\n\n/- The `instance_priority` linter reports: -/\n/- DANGEROUS INSTANCE PRIORITIES.\nThe following instances always apply, and therefore should have a priority &lt; 1000.\nIf you don&#39;t know what priority to choose, use priority 100.\nSee note [lower instance priority] for instructions to change the priority. -/\n#check @is_cyclotomic_extension.number_field /- set priority below 1000 -/\n#check @is_cyclotomic_extension.finite_dimensional /- set priority below 1000 -/\n#check @is_cyclotomic_extension.is_galois /- set priority below 1000 -/\n</code></pre></div>\n</div></div>\n<p>I have tried to patch this by setting all of these mentioned things to priority  100, but it doesn't even seem to be enough to define the class group (in the branch <code>failing_instances</code>, see <a href=\"https://github.com/leanprover-community/flt-regular/blob/failing_instances/src/number_theory/regular_primes.lean\">regular_primes.lean</a></p>",
        "id": 289619013,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657817932
    },
    {
        "content": "<p>the lint output is run at the bottom of the file; the reason we didn't see this before is because this only happens when the localised instances are opened, which is not done for mathlib's standard <code>lint_all</code> step.</p>",
        "id": 289619064,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657817966
    },
    {
        "content": "<p>I don't really understand these issues, but I'm also having trouble with our <code>cycl_rat.lean</code> file. If I open it it starts to use up all of my RAM</p>",
        "id": 289619766,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657818254
    },
    {
        "content": "<p>I don't know if its at all related</p>",
        "id": 289619798,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657818273
    },
    {
        "content": "<p>did you build the project before opening that file? i think it's farily deep in the imports</p>",
        "id": 289620290,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657818482
    },
    {
        "content": "<p>I thought I did. Let me try again.</p>",
        "id": 289620410,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657818535
    },
    {
        "content": "<p>So yeah even building before doesn't help. Its weird because the orange bars disappear but the RAM usage just keeps going up and up</p>",
        "id": 289620808,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657818704
    },
    {
        "content": "<p>yikes, I can't repro that but can't be good either:/</p>",
        "id": 289620907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657818738
    },
    {
        "content": "<p>Oh ok fixed. I dunno what it was, but I hadn't noticed my local version was behind, so after pulling and building its now working fine</p>",
        "id": 289621660,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657819082
    },
    {
        "content": "<p>So do we have a problem or not?</p>",
        "id": 289623089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657819781
    },
    {
        "content": "<p>I think my problem was unrelated to what Eric was talking about. But I don't understand his problem</p>",
        "id": 289623201,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657819815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> where did you get the error? CI seems happy</p>",
        "id": 289623384,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657819883
    },
    {
        "content": "<p>just stick <code>#lint</code> at the end of the file</p>",
        "id": 289623571,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657819975
    },
    {
        "content": "<p>CI won't mind because these are all localised instances, and these locales don't get opened to lint</p>",
        "id": 289623600,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657819988
    },
    {
        "content": "<p>With the current <code>master</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Checking 50 declarations (plus 32 automatically generated ones) in the current file with 26 linters -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `fintype_finite` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> USES OF `fintype` SHOULD BE REPLACED WITH `casesI nonempty_fintype _` IN THE PROOF. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">is_cyclotomic_extension.finite</span> <span class=\"c\">/-</span><span class=\"cm\"> The following `fintype` hypotheses should be replaced with</span>\n<span class=\"cm\">                      `casesI nonempty_fintype _` in the proof. argument 8: [h₁ : fintype ↥S] -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">is_cyclotomic_extension.number_field</span> <span class=\"c\">/-</span><span class=\"cm\"> The following `fintype` hypotheses should be replaced with</span>\n<span class=\"cm\">                      `casesI nonempty_fintype _` in the proof. argument 8: [_inst_7 : fintype ↥S] -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">is_cyclotomic_extension.integral</span> <span class=\"c\">/-</span><span class=\"cm\"> The following `fintype` hypotheses should be replaced with</span>\n<span class=\"cm\">                      `casesI nonempty_fintype _` in the proof. argument 9: [_inst_9 : fintype ↥S] -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">is_cyclotomic_extension.finite_dimensional</span> <span class=\"c\">/-</span><span class=\"cm\"> The following `fintype` hypotheses should be replaced with</span>\n<span class=\"cm\">                      `casesI nonempty_fintype _` in the proof. argument 5: [_inst_7 : fintype ↥S] -/</span>\n</code></pre></div>",
        "id": 289624135,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657820244
    },
    {
        "content": "<p>try maybe putting <code>open_locale cyclotomic</code> before it?</p>",
        "id": 289624244,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657820294
    },
    {
        "content": "<p>Let me try (BTW I wasn't aware of this fintype linter, does someone want to open a PR fixing the errors?)</p>",
        "id": 289624389,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657820371
    },
    {
        "content": "<p>(yes it's new, I'm not sure exactly how to change it, but we can definitely try to fix it)</p>",
        "id": 289624498,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657820405
    },
    {
        "content": "<p>OK, I get your error</p>",
        "id": 289624539,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657820428
    },
    {
        "content": "<p>I don't have time now to investigate this, I can do it tomorrow, but maybe there is just some loop I don't see</p>",
        "id": 289624875,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657820610
    },
    {
        "content": "<p>I see where some of them loop from, but I don't get some of the other loops</p>",
        "id": 289624907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657820628
    },
    {
        "content": "<p>What is the loop you found?</p>",
        "id": 289726127,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657891571
    },
    {
        "content": "<p>Ah I see, there is at least one related to <code>number_field</code> and <code>char_zero</code>.</p>",
        "id": 289731968,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657894197
    }
]