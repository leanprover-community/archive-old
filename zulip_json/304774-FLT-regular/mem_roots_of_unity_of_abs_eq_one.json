[
    {
        "content": "<p>I have started to work on adding <code>mem_roots_of_unity_of_abs_eq_one</code> to mathlib. Since the whole thing is quite big and involves different parts, I think it might be easier to split into several PR. Here are some ideas on how I could that. Please let me know what you think about this proposal. </p>\n<ul>\n<li>\n<p>General results about embeddings of number field (definitions, proof there are as many as the degree of the field, lift to an extension, etc) are quite basic results in algebraic number theory, so I think they belong to <code>src/number_theory/number_field.lean</code>. In the same way, I think that the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[X]/(f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span>, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f(X) \\in \\mathbb{Q}[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> irreducible, is a number field also belongs to <code>src/number_theory/number_field.lean</code>. This should be an easy PR. </p>\n</li>\n<li>\n<p>There are results about polynomials by <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  culminating with the expression of the coefficients of a polynomial in terms of its roots. These are quite technical and quite long. Looking at similar results, they probably belong to <code>field_theory.splitting_field</code> where weak versions of this result can be find, such as: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.prod_roots_eq_coeff_zero_of_monic_of_split\">docs#polynomial.prod_roots_eq_coeff_zero_of_monic_of_split</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.sum_roots_eq_next_coeff_of_monic_of_split\">docs#polynomial.sum_roots_eq_next_coeff_of_monic_of_split</a>. This should be a separate PR and I might need Alex help for this one (Alex notes that one could probably shorten the proof by using the results in <code>ring_theory.polynomial.vieta</code> so I'll have to figure that out). </p>\n</li>\n<li>\n<p>There are two <code>simp</code> lemmas that should probably be added in another PR to the right place (I'll have to think where that is exactly) if people thinks they are useful. </p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring_hom.apply_eq_zero_iff_of_injective</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f.map_zero</span><span class=\"o\">],</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f.map_zero</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_eq_zero_of_injective</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">polynomial.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">coeff_map</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.apply_eq_zero_iff_of_injective</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">coeff_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<ul>\n<li>Once everything else is in place, I'll do a last PR to add the two mains results: <code>mem_roots_of_unity_of_abs_eq_one</code> and <code>absolute_value_one</code> to <code>cyclotomic.lean</code> </li>\n</ul>\n<p>PS. <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, just by curiosity,  I see that you use <code>section forward</code> and <code>section backward</code> in the files. Does that mean anything special?</p>",
        "id": 285678161,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1654869077
    },
    {
        "content": "<p>Splitting a PR is generally a good idea. You can also create dependent PRs to show where are you going, but this is not necessary.  Also, don't be afraid of creating new files if you don't find one with all the required imports.</p>\n<p>Concerning <code>flt-regular</code>, if can you please move the material you have PRed to the folder <code>ready_for_mathlib</code>, adding a comment with the PR number? I will try to keep <a href=\"https://github.com/leanprover-community/flt-regular/wiki\">https://github.com/leanprover-community/flt-regular/wiki</a> updated.</p>",
        "id": 285678720,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654869337
    },
    {
        "content": "<p>I think that some of the results I proved are basically unintentional duplicates of those in <code>ring_theory.polynomial.vieta</code>, I'm not sure if mine were better in any way (e.g. less strict assumptions), but it might be the case that some of the long technical proofs can be deleted</p>",
        "id": 285686073,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654872516
    },
    {
        "content": "<p>I don't recall forwards/backwards being anything special, maybe just the directions of an iff statement?</p>",
        "id": 285686145,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654872547
    },
    {
        "content": "<p>Hmm I'm not sure if those simp lemmas will fire as simp lemmas very often, as they have side conditions that seem like simp won't prove that often, they certainly seem useful to have though, so I'm not sure if they are worth adding. It may be more harm than good in this case</p>",
        "id": 285686501,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654872684
    },
    {
        "content": "<p>Great that you are PRing this material!</p>",
        "id": 285686550,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654872704
    },
    {
        "content": "<p>Ok. Thanks for the advice. I'll start working on the PRs now.</p>",
        "id": 285698308,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1654877543
    },
    {
        "content": "<p>The following auxiliary result from Alex is very useful at a couple of places for the proofs I am trying to PR but is not directly related to the content of the PR: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_roots_map_of_injective</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots</span> <span class=\"bp\">↔</span> <span class=\"n\">p.eval₂</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>What is the best strategy in this case:</p>\n<ul>\n<li>Add it to mathlib (say in <code>data.polynomial.ring_division</code> in the same or another PR)</li>\n<li>Incorporate its proof where needed and just delete it</li>\n</ul>\n<p>From my personal point of view, I find it a quite useful result and think it could be a nice addition to mathlib.</p>",
        "id": 286037460,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1655195214
    },
    {
        "content": "<p>Surely add it to mathlib!! When in doubts it's almost always better to add a new result rather then repeating its proof over and over (I really think that if you use the same result twice it deserves to be singled out).</p>\n<p>Small PR are welcome, but you can also include it in a bigger one, since it is just a couple of lines, this is up to you.</p>",
        "id": 286037908,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655195410
    },
    {
        "content": "<p>Ok. Thanks. I'll do that</p>",
        "id": 286041222,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1655197210
    },
    {
        "content": "<p>Sorry,  I have not contributed much  to the project lately since I was working quite hard on this PR (and I am still far from being done). I have <a href=\"https://github.com/leanprover-community/mathlib/pull/15008\">#15008</a> which seems to be stuck (since it competes with <a href=\"https://github.com/leanprover-community/mathlib/pull/14908\">#14908</a> and nobody seems to want to take a decision about which one to use) and also now <a href=\"https://github.com/leanprover-community/mathlib/pull/15275\">#15275</a> which proves a more general version of a result needed for this PR: if the roots of a polynomial are bounded, then the coefficients are bounded too. This PR depends on <a href=\"https://github.com/leanprover-community/mathlib/pull/14908\">#14908</a> or <a href=\"https://github.com/leanprover-community/mathlib/pull/15008\">#15008</a>. I'll work on the main PR now.</p>",
        "id": 289342924,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1657640236
    },
    {
        "content": "<p>I think this week everybody is busy with lftcm so all PRs have to wait a little more than usual...</p>",
        "id": 289345142,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657641072
    },
    {
        "content": "<p>Lfctm?</p>",
        "id": 289353667,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657644607
    },
    {
        "content": "<p><a href=\"https://icerm.brown.edu/topical_workshops/tw-22-lean/#schedule-2022-07-11\">https://icerm.brown.edu/topical_workshops/tw-22-lean/#schedule-2022-07-11</a></p>",
        "id": 289353717,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657644637
    },
    {
        "content": "<p>Oh, that's cool!</p>",
        "id": 289355374,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657645415
    },
    {
        "content": "<p>I've updated the graph, turning <code>sum_pow_unit</code> (that it should be <code>is_primitive_root.sum_pow_unit</code>, <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> can you confirm?) and <code>unit_lemma</code> (thank's <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> !) green. There is <code>flt_fact_3</code> that seems easy to do, and maybe also <code>flt_fact_4</code> (should we find better names?).</p>",
        "id": 289431990,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657703330
    },
    {
        "content": "<p>We are <em>really close</em> to case I</p>",
        "id": 289432013,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657703350
    },
    {
        "content": "<p>Ah yes that looks good!</p>",
        "id": 289432164,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657703445
    },
    {
        "content": "<p>Actually I'm going to change 3.8 to <code>zeta_pow_sub_eq_unit_zeta_sub_one</code> since this is actually what we will use.</p>",
        "id": 289432238,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657703511
    },
    {
        "content": "<p>But yes we should be really close to case I now.</p>",
        "id": 289432589,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657703717
    },
    {
        "content": "<p>I think we already have <code>flt_fact_3</code> as <code>exists_int_sub_pow_prime_dvd</code>, and I _think_ I made that sorry free</p>",
        "id": 289433987,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657704464
    },
    {
        "content": "<p>I'm also not sure I fully get flt_fact_4</p>",
        "id": 289434240,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657704591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/mem_roots_of_unity_of_abs_eq_one/near/289434240\">said</a>:</p>\n<blockquote>\n<p>I'm also not sure I fully get flt_fact_4</p>\n</blockquote>\n<p>Maybe thats because I messed up the statement :P It should say what the a_i's are</p>",
        "id": 289434402,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657704662
    },
    {
        "content": "<p>let me fix that</p>",
        "id": 289434430,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657704680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/mem_roots_of_unity_of_abs_eq_one/near/289433987\">said</a>:</p>\n<blockquote>\n<p>I think we already have <code>flt_fact_3</code> as <code>exists_int_sub_pow_prime_dvd</code>, and I _think_ I made that sorry free</p>\n</blockquote>\n<p>This looks pretty sorry free to me.</p>",
        "id": 289434654,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657704825
    },
    {
        "content": "<p>Yes, it is it, and it is sorry free (confirmed by <code>#print axioms lemma exists_int_sub_pow_prime</code>). I am including it.</p>",
        "id": 289434838,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657704961
    },
    {
        "content": "<p>Mathlib already has flt for n=4, doesn't it?</p>",
        "id": 289435488,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657705327
    },
    {
        "content": "<p>Yes</p>",
        "id": 289435534,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657705355
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_fermat_4\">docs#not_fermat_4</a></p>",
        "id": 289435570,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657705372
    },
    {
        "content": "<p>Ah, I see. <code>flt_fact_4</code> is not FLT for n=4 <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 289435623,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657705403
    },
    {
        "content": "<p>We should find better names...</p>",
        "id": 289435662,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657705428
    },
    {
        "content": "<p>Is the <code>n=3</code> case in there? I thought I remember seeing this done, but I can't remember if it was in mathlib</p>",
        "id": 289435663,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657705428
    },
    {
        "content": "<p>It is not in mathlib</p>",
        "id": 289435673,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657705437
    },
    {
        "content": "<p><a href=\"https://github.com/Ruben-VandeVelde/flt\">https://github.com/Ruben-VandeVelde/flt</a></p>",
        "id": 289435772,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657705480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> can we include your code in the <code>flt-regular</code> project? I think we need to tread the case <code>n=3</code> separately (in exchange we will maintain it updated wrt to mathlib).</p>",
        "id": 289435930,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657705562
    },
    {
        "content": "<p>What definition of regular do you end up with for case 1?</p>",
        "id": 289436548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657706012
    },
    {
        "content": "<p>The class number version</p>",
        "id": 289436623,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657706049
    },
    {
        "content": "<p>Can you prove that 3 is regular?</p>",
        "id": 289436648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657706083
    },
    {
        "content": "<p>I don't even think we can prove 2 is regular</p>",
        "id": 289436677,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657706111
    },
    {
        "content": "<p>That sounded easier than 3.</p>",
        "id": 289436796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657706186
    },
    {
        "content": "<p>I think we can do 2 right? We must know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> is a PID?</p>",
        "id": 289437182,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657706498
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cRBdUWxWZDtko7025AFTmOxE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cRBdUWxWZDtko7025AFTmOxE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cRBdUWxWZDtko7025AFTmOxE/image.png\"></a></div>",
        "id": 289437275,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657706539
    },
    {
        "content": "<p>For <code>3</code> we will need stuff about quadratic fields, but it shouldn't be too hard too prove that it is a PID</p>",
        "id": 289437832,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657706888
    },
    {
        "content": "<p>the quadratic fields are long overdue in mathlib...</p>",
        "id": 289438079,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657707059
    },
    {
        "content": "<p>Me <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"390622\">@Nirvana Coppola</span>  <span class=\"user-mention\" data-user-id=\"133635\">@Sander Dahmen</span> are working on computing small class numbers (and a definition of quadratic fields) it's still in the works but somewhat mature at this point. So hopefully coming within the next couple of months anyways</p>",
        "id": 289438934,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1657707651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/mem_roots_of_unity_of_abs_eq_one/near/289435930\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> can we include your code in the <code>flt-regular</code> project? I think we need to tread the case <code>n=3</code> separately (in exchange we will maintain it updated wrt to mathlib).</p>\n</blockquote>\n<p>Yes, of course. I'd been hoping to find time to push it into mathlib, but that hasn't happened yet.</p>",
        "id": 289439814,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657708385
    },
    {
        "content": "<p>ok, turns out two is doable, although somehow we still have int algebra diamonds there... regardless, the example is there</p>",
        "id": 289440458,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657708912
    },
    {
        "content": "<p>There's also a lot of definitions that don't push forward or at least get preserved under equivalences that should - is_dedekind_domain is one</p>",
        "id": 289441313,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657709591
    },
    {
        "content": "<p>Someone here at ICERM is working on quadratic fields! I don't know if they're on the Zulip, I'll tell them about this thread. It might be a nice goal!</p>",
        "id": 289448848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657714267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/.60.E2.84.A4.5B.E2.88.9A-2.5D.60.20is.20a.20euclidean.20domain/near/274613936\">said</a>:</p>\n<blockquote>\n<p>I had a student prove Z[omega] is a Euclidean domain and another student prove Z[sqrt(3)] is a Euclidean domain :-)</p>\n</blockquote>\n<p>Any updates?</p>",
        "id": 289534504,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657755327
    },
    {
        "content": "<p>The PR containing the main result is finally ready: <a href=\"https://github.com/leanprover-community/mathlib/pull/15143\">#15143</a>. I also PRed the opposite statement, that is root of unity are of norm 1:  <a href=\"https://github.com/leanprover-community/mathlib/pull/16426\">#16426</a>. </p>\n<p>I put the results in the <code>number_field.lean</code> file but I am wondering if it would be a good idea to make a <code>number_field</code> directory, move the first definitions and results to <code>basic.lean</code>, all the results about embeddings in their own file (I want to work on complex embeddings in the near future) and maybe even put the new result <code>mem_roots_of_unity_of_norm_eq_one</code> in a <code>units.lean</code> file since it is an important step in the proof of Dirichlet unit's theorem. There might be also results about number field, eg. finitude of class groups, that could be moved to this new directory.</p>",
        "id": 298395570,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1662993855
    },
    {
        "content": "<p>I totally agree that <code>number_field</code> should be a directory sooner or later. But this is for another PR</p>",
        "id": 298396179,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662994083
    },
    {
        "content": "<p>Thanks Xavier! I think it's so cool that this stuff is getting done :-)</p>",
        "id": 298486479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663020390
    },
    {
        "content": "<p>I am having difficulty merging the project with the version of <code>mem_roots_of_unity_of_abs_eq_one</code> (now called  <code>number_field.embeddings.pow_eq_one_of_norm_eq_one</code>) that is in <code>mathlib</code>. To reproduce the problem, merge with the latest version of <code>mathlib</code> and replace line 424 of <code>number_theory/cyclotomic/Unit_lemmas.lean</code> by </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">number_field.embeddings.pow_eq_one_of_norm_eq_one</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">unit_gal_conj</span> <span class=\"n\">K</span> <span class=\"n\">p</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>The error is <code>maximum class-instance resolution depth has been reached</code>. Looking at the log with the option <code>trace.class_instances true</code>, I see a lot of output involving <code>ℝ</code> with messages like: <code>@normed_algebra ℝ ℝ real.normed_field</code>.</p>",
        "id": 301846315,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664643958
    },
    {
        "content": "<p>I am afraid, I don't know how to solve this kind of error...</p>",
        "id": 301846430,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664644024
    },
    {
        "content": "<p>can you push the code that causes the issue to a branch?</p>",
        "id": 301847243,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664644475
    },
    {
        "content": "<p>I pushed to the branch <code>origin/pow_eq_one_of_norm_eq_one</code> (if I got my <code>git</code> commands right).</p>",
        "id": 301847585,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664644703
    },
    {
        "content": "<p>I am done for today, but I can have a look at tomorrow. Feel free to remove everything it is in mathlib, we will fix the problems.</p>",
        "id": 301854023,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664649100
    },
    {
        "content": "<p>oh, there seems to be some diamond issue again :(</p>",
        "id": 301919034,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664707937
    },
    {
        "content": "<p>but it's to do with <code>complex</code> not with any of our stuff..</p>",
        "id": 301919190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664708025
    },
    {
        "content": "<p>oh, no, I'm wrong, something weirder is going on...</p>",
        "id": 301919541,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664708235
    },
    {
        "content": "<p>for now you can put <code>  haveI : normed_algebra ℚ ℂ := normed_algebra_rat,</code> before your <code>have := @...</code> line and this will fxi it</p>",
        "id": 301919867,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664708392
    },
    {
        "content": "<p>I am not sure why the typeclass system is getting lost trying to find this lemma, though</p>",
        "id": 301919924,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664708406
    },
    {
        "content": "<p>oh, <code>open_locale cyclotomic</code> is at the top of the page, and doesn't seem to be needed</p>",
        "id": 301920244,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664708572
    },
    {
        "content": "<p>this is super cursed right now, if you remove it it should work fine</p>",
        "id": 301920286,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664708587
    },
    {
        "content": "<p>the file seems to compile without it</p>",
        "id": 301920306,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664708594
    },
    {
        "content": "<p>Thanks to Eric, I was able to fix the problem and push the new version.</p>",
        "id": 301932622,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664715708
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 301933500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664716273
    }
]