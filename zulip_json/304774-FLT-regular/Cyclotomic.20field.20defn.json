[
    {
        "content": "<p>I noticed this project so far is working with <code>adjoin_root cyclotomic</code>. I wonder if instead, <code>X^n-1.splitting_field</code>is a better option. I think the second option is better suited to Galois theory (as then the <code>.gal</code>has good defeq) and also easier to generalise to other fields. (it works for all fields with n ≠ 0, whilst I think this one may not)</p>",
        "id": 258990096,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635181774
    },
    {
        "content": "<p>I'm not sure how much Galois theory this project would strictly need. That said, maybe for more general things it would be good to have something that plays well with Galois theory.</p>",
        "id": 258990483,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635181932
    },
    {
        "content": "<p>Yeah, the gal stuff I didn't mean for the project specifically, but just for general usage</p>",
        "id": 258990622,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635181998
    },
    {
        "content": "<p>I hit some issues I didn't understand with the splitting field definition (see <a href=\"#narrow/stream/113488-general/topic/synthesized.20type.20class.20instance.20is.20not.20definitionally.20equal/near/258373075\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/synthesized.20type.20class.20instance.20is.20not.20definitionally.20equal/near/258373075</a>)</p>",
        "id": 258991495,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635182386
    },
    {
        "content": "<p>That said we should definitely provide an instance of <code>is_splitting_field</code> for our field, would that be sufficient for the gal defeq or no?</p>",
        "id": 258991633,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635182433
    },
    {
        "content": "<p>.gal is defined as _.splitting_field alg_equiv[polynomial's base ring] _.splitting_field so no; we wouldn't have that the automorphisms are the same, although maybe a nice stopgap is to just provide the alg_equiv between the two and work with that</p>",
        "id": 258993105,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635183078
    },
    {
        "content": "<p>For non Q rings its also nontrivial to show that the cyclotomic splf is the same as the X^n-1 splf; so that's another thing to consider (I spent a while on this)</p>",
        "id": 258993244,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635183141
    },
    {
        "content": "<p>When proving abel-ruffini, I think we did things in terms of <code>X ^ n - 1</code>, and it seemed to work fine. I would suggest making a definition <code>cyclotomic_field n = (X ^ n - 1).splitting_field</code>.</p>",
        "id": 258993312,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635183187
    },
    {
        "content": "<p>With regards to Galois theory, <code>polynomial.gal</code> is not what you should be using. We did most Galois theory in terms of arbitrary normal separable field extensions (see <code>galois.lean</code>).</p>",
        "id": 258993843,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635183427
    },
    {
        "content": "<p>In particular, a result like \"the Galois group of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_n)/\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi><msup><mo stretchy=\"false\">)</mo><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{Z}/n\\mathbb{Z})^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span>\" should be phrased in terms of <code>E ≃ₐ[F] E</code>, rather than <code>(X ^ n - 1).gal</code>.</p>",
        "id": 258994609,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635183740
    },
    {
        "content": "<p>What is the point of <code>polynomial.gal</code> then?</p>",
        "id": 258994671,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635183772
    },
    {
        "content": "<p>Mostly, it's for when you're just interested in Galois groups of polynomials, rather than Galois groups of field extensions more generally. We used it for proving abel-ruffini.</p>",
        "id": 258994947,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635183926
    },
    {
        "content": "<p>Well, if we are not able to prove <code>is_splitting_field</code> then it means something is missing the cyclotomic polynomial API, or somewhere else. And the whole API for splitting fields should use <code>is_splitting_field</code>.</p>",
        "id": 258995838,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635184350
    },
    {
        "content": "<p>I am almost tempted to have <code>is_cyclotomic_field</code></p>",
        "id": 258996125,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635184475
    },
    {
        "content": "<p>That would just be <code>is_splitting_field (X ^ n - 1)</code> right? I think that should suffice (at least for now).</p>",
        "id": 258996322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635184569
    },
    {
        "content": "<p>Yes, sure</p>",
        "id": 258996982,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635184862
    },
    {
        "content": "<p>Let me try</p>",
        "id": 258996996,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635184868
    },
    {
        "content": "<p>OK, <code>is_cyclotomic_field</code> seems to work. But now we have the problem for <code>cyclotomic_ring</code>...</p>",
        "id": 259001768,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635187042
    },
    {
        "content": "<p>the definition of <code>zeta'</code> in <code>cyclotomic_units</code>  seems to  now be broken.</p>",
        "id": 259002290,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635187270
    },
    {
        "content": "<p>Do we already have some sort of <code>is_ring_of_integers</code>?</p>",
        "id": 259002791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635187489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> I forgot the status...</p>",
        "id": 259002826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635187506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259002290\">said</a>:</p>\n<blockquote>\n<p>the definition of <code>zeta'</code> in <code>cyclotomic_units</code>  seems to  now be broken.</p>\n</blockquote>\n<p>I am fixing it</p>",
        "id": 259003154,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635187639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259002791\">said</a>:</p>\n<blockquote>\n<p>Do we already have some sort of <code>is_ring_of_integers</code>?</p>\n</blockquote>\n<p>I guess something like <code>[is_fraction_ring S L] [is_dedekind_domain S]</code> takes that role?</p>",
        "id": 259004227,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635188155
    },
    {
        "content": "<p>Could we just use <code>ring_of_integers</code>, and prove that <code>ring_of_integers</code> equals <code>algebra.adjoin</code>?</p>",
        "id": 259004537,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635188302
    },
    {
        "content": "<p>Well, the point is that if we use <code>is_cyclotomic_fields</code> (that is nothing else than <code>is_splitting_field</code>) we probably want a characteristic predicate also for the ring of integers.</p>",
        "id": 259005150,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635188583
    },
    {
        "content": "<p>It seems to me we have to decide how to write things before going on writing lemmas. If we change the basic definition then refactoring everything is going to be rather painful.</p>\n<p>Let's start with the cyclotomic field. The most \"clean\" way I see is to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_field</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">is_splitting_field</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>for <code>(K : Type*) [field K] [char_zero K]</code>. Of course we can have the explicit model</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cyclotomic_field</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 259005911,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635188970
    },
    {
        "content": "<p>Then everything is stated using <code>(K : Type*) [field K] [char_zero K] [is_cyclotomic_field p K]</code>, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zeta'</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">exists_root_of_splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_splitting_field.splits</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">degree_cyclotomic_pos</span> <span class=\"n\">p</span> <span class=\"n\">ℚ</span> <span class=\"n\">hn.out</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 259006038,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635189020
    },
    {
        "content": "<p>The point of taking this approach is that the definition of <code>cyclotomic_field</code> doesn't matter, it is the fact that it has the <code>is_cyclotomic_field</code> instance that makes everything working.</p>",
        "id": 259006114,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635189066
    },
    {
        "content": "<p>Yeah as long as we stick to a reasonable API it doesn't make too much difference which definition we end up using i hope</p>",
        "id": 259007455,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635189742
    },
    {
        "content": "<p>And I think it's hard to make decisions about what actual definitions to use without trying them and seeing what goes right and wrong</p>",
        "id": 259007581,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635189804
    },
    {
        "content": "<p>Ah, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral_closure\">docs#is_integral_closure</a>!</p>",
        "id": 259007831,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635189912
    },
    {
        "content": "<p>So I suggest we try to use characteristic predicates everywhere. If at some point it becomes to complicated we can always start using the explicit models, but going the other way is going to be painful</p>",
        "id": 259007984,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635189971
    },
    {
        "content": "<p>I know this isn't the focus of this project, but I really don't want to have multiple defns all over the place, so:<br>\n<a href=\"https://kconrad.math.uconn.edu/blurbs/galoistheory/cyclotomic.pdf\">https://kconrad.math.uconn.edu/blurbs/galoistheory/cyclotomic.pdf</a> suggests that cyclotomic fields works over char p in some cases. I think if we're defining this this way, it may be easier to say that is_cyclotomic_field n means that the nth roots of unity are full, which gives us zeta automatically (<a href=\"https://github.com/leanprover-community/mathlib/issues/9778\">#9778</a> or <a href=\"https://github.com/leanprover-community/mathlib/issues/9779\">#9779</a>, can't remember).</p>",
        "id": 259010368,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635191259
    },
    {
        "content": "<p>The current way, the definition does not work for char p cyclotomic extensions</p>",
        "id": 259010406,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635191279
    },
    {
        "content": "<p>Oh, I just realised what the second condition actually meant in is_splitting_field (which is totally sensible of course).</p>",
        "id": 259011668,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635191845
    },
    {
        "content": "<p>Still, the current defn of the predicate isn't good either</p>",
        "id": 259011724,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635191862
    },
    {
        "content": "<p>I don't understand which definition you propose.  You say \"is_cyclotomic_field n means that the nth roots of unity are full\", but this is satisfied by, for example, the complex numbers. We need in a way or in another specify that it is the splitting field, and not bigger.</p>",
        "id": 259015670,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635193526
    },
    {
        "content": "<p>And this seems annoying to treat uniformly in char 0 and char p</p>",
        "id": 259015775,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635193565
    },
    {
        "content": "<p>Generally a field extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">∣</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L|K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is called \"cyclotomic\" if it is \"generated\" by roots of unity.</p>",
        "id": 259015781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635193568
    },
    {
        "content": "<p>Yeah, sure, but we want something like <em>the</em> n-th cyclotomic field...</p>",
        "id": 259015857,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635193624
    },
    {
        "content": "<p>What's the problem with char p?</p>",
        "id": 259015903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635193652
    },
    {
        "content": "<p>The p-cyclotomic extension of a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> itself.</p>",
        "id": 259015944,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635193673
    },
    {
        "content": "<p>I mean, if I want to use <code>is_splitting_field</code></p>",
        "id": 259016015,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635193692
    },
    {
        "content": "<p>I need a base field</p>",
        "id": 259016021,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635193697
    },
    {
        "content": "<p>What about <code>is_cyclotomic_extension F K n</code>?</p>",
        "id": 259016148,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635193767
    },
    {
        "content": "<p>Defined using <code>is_splitting_field</code>?</p>",
        "id": 259016275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635193812
    },
    {
        "content": "<p>meaning?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">is_splitting_field</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 259016284,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635193814
    },
    {
        "content": "<p>We will probably need some <code>abbreviation</code> to avoid writing <code>Q</code> everywhere, but why not</p>",
        "id": 259016348,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635193849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259016284\">said</a>:</p>\n<blockquote>\n<p>meaning?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">is_splitting_field</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You can even just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span>  <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 259016475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635193911
    },
    {
        "content": "<p>I am done for today, but the basic definitions (for fields) are in <code>src/number_theory/cyclotomic/field/basic.lean</code>. If someone wants to generalize these to <code>is_cyclotomic_extension F n</code> please go ahead. Just be sure to provide the relevant instances, even only in char 0 (<code>sorry</code> as proof is perfectly fine of course).</p>",
        "id": 259018057,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635194690
    },
    {
        "content": "<p><code>src/number_theory/cyclotomic/ring/</code> is for the ring of integers, it contains the statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_adjoin</span> <span class=\"o\">:</span> <span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n  <span class=\"n\">algebra.adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">adjoin_root.root</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>that should be generalized to any <code>R [is_cyclotomic_ring R K]</code>.</p>",
        "id": 259018270,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635194778
    },
    {
        "content": "<p>Could I have permission to push? (username tb65536)</p>",
        "id": 259019951,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635195633
    },
    {
        "content": "<p>I'd also like it (although I won't for a bit) [user: ericrbg]</p>",
        "id": 259028066,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635200383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, I've sent an invitation with write access.</p>",
        "id": 259028862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635200732
    },
    {
        "content": "<p>Just thinking out loud about defining cyclotomic extensions which will include the infinite case as well. Here's one proposal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">truncation_set</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">pnat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">truncation_set.has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">pnat</span> <span class=\"n\">truncation_set</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S.S</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">truncation_set</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"c1\">-- or some other equivalent condition</span>\n</code></pre></div>\n<p>Note that truncation sets also show up in the theory of big Witt vectors, so it wouldn't hurt to have that definition anyway :)</p>",
        "id": 259031890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635202838
    },
    {
        "content": "<p>If you're dealing with cyclotomic extensions, it seems like you should be looking at subsets of the integers closed under multiplication and taking divisors? (i.e., pick an <code>enat</code>for each prime).</p>",
        "id": 259033163,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635203725
    },
    {
        "content": "<p>Why closed under multiplication?</p>",
        "id": 259033774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635204261
    },
    {
        "content": "<p>With the truncation set approach, I can consider the set {1,5} to consider  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><mn>5</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K(\\mu_5)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, I can consider all powers of 5 to consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><msup><mn>5</mn><mi mathvariant=\"normal\">∞</mi></msup></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K(\\mu_{5^\\infty})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935428571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, etc</p>",
        "id": 259033900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635204377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I don't think making is_cyclotomic_field an abbreviation is looking like a good idea, it causes a typeclass loop according to #lint.</p>",
        "id": 259034082,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635204584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259033774\">said</a>:</p>\n<blockquote>\n<p>Why closed under multiplication?</p>\n</blockquote>\n<p>Sorry, I meant closed under lcm.</p>",
        "id": 259035012,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635205508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259034082\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> I don't think making is_cyclotomic_field an abbreviation is looking like a good idea, it causes a typeclass loop according to #lint.</p>\n</blockquote>\n<p>Ah, thanks for pointing this out. I'll push a fix (unless someone gets to it before me)</p>",
        "id": 259035057,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635205555
    },
    {
        "content": "<p>Sure, adding a condition saying closed under lcm should be fine. I think if you take the lcm closure T of a truncation set S, then the projection W_T to W_S on big Witt vectors is an isomorphism.</p>",
        "id": 259041730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635212130
    },
    {
        "content": "<p>I feel like this is some sort of \"completion\" of the divisibility poset (you can \"go off to infinity\" at any subset of primes). Is there a way to generalize this precisely?</p>",
        "id": 259052095,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635224114
    },
    {
        "content": "<p>I like Adam's idea. Indeed infinite cyclotomic extensions are more common than char p cyclotomic extensions (at least in what I do). The definition makes sense even for an arbitrary <code>S : set pnat</code>, right? We can have something like <code>is_truncation_set</code>, to use this assumption.</p>",
        "id": 259067870,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635238113
    },
    {
        "content": "<p>In this way the definition is really super general, and we can always add other conditions later on.</p>",
        "id": 259067902,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635238144
    },
    {
        "content": "<p>I agree infinite cyclotomic extensions would be great.</p>",
        "id": 259068528,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635238590
    },
    {
        "content": "<p>And it seems to me <code>S : set nat</code> is fine... if <code>S = {0}</code> we get <code>L = K</code></p>",
        "id": 259068997,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635238864
    },
    {
        "content": "<p>This is of course mathematically irrelevant, but usually working with <code>nat</code> is easier than working with <code>pnat</code>.</p>",
        "id": 259069034,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635238891
    },
    {
        "content": "<p>It seems the most general definition is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ex_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">polynomial.cyclotomic</span> <span class=\"n\">a</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It makes sense in any characteristic and it allows base ring (instead of a base field) and infinite extensions. Maybe it's more elegant to use <code>root_of_unity</code> in the second condition, but this is only a personal taste.</p>",
        "id": 259087039,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635250627
    },
    {
        "content": "<p>I don't see any real problem with <code>nat</code> instead of <code>pnat</code> (and  I prefer working with <code>nat</code>, the API is better). Does someone see a reason to prefer <code>pnat</code>?</p>",
        "id": 259088853,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635251664
    },
    {
        "content": "<p>The definition you wrote won't work with Nat if S contains 0</p>",
        "id": 259090030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635252291
    },
    {
        "content": "<p>The second condition would reduce to saying that L is generated by L</p>",
        "id": 259090089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635252332
    },
    {
        "content": "<p>Hmm, that's a good point (-;</p>",
        "id": 259090207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635252390
    },
    {
        "content": "<p>And the first condition would reduce to saying that Phi_0 which is the constant 1 has a root, which cannot hold in a nontrivial ring</p>",
        "id": 259090253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635252413
    },
    {
        "content": "<p>Ah ops, I checked the first one with <code>X^n -1</code></p>",
        "id": 259090340,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635252458
    },
    {
        "content": "<p>Well, maybe it is still OK, there no <code>S</code>-extensions if <code>S</code> contains <code>0</code>, do we care?</p>",
        "id": 259090465,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635252514
    },
    {
        "content": "<p>I would prefer pnat tbh. Yes the API is less developed, but in my mind pnat is fundamentally multiplicative whereas Nat is additive. The cyclotomic theory is essentially multiplicative in nature, so it makes sense to me to use pnat</p>",
        "id": 259090502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635252531
    },
    {
        "content": "<p>OK, let's try <code>pnat</code>.</p>",
        "id": 259090578,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635252562
    },
    {
        "content": "<p>With Nat and 0 in S, the trivial algebra would be cyclotomic <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 259090904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635252715
    },
    {
        "content": "<p>Don't tell our colleagues  that we really spend time thinking about the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>-th cyclotomic extension of the trivial ring.</p>",
        "id": 259091082,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635252805
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.cyclotomic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ex_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">polynomial.cyclotomic</span> <span class=\"n\">a</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">set.Union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">primitive_roots</span> <span class=\"n\">i</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If there is anyone among you that believes this definition should not take place, speak now or forever hold your peace.</p>",
        "id": 259094889,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635254566
    },
    {
        "content": "<p>I'm happy with that.</p>",
        "id": 259095149,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635254681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I think you can use nicer notation for that union, hopefully.</p>",
        "id": 259095698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635254904
    },
    {
        "content": "<p>Doesn't something like <code>⋃ i ∈ S, primitive_roots i L</code> work?</p>",
        "id": 259095743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635254922
    },
    {
        "content": "<p>Anyway, probably one of the first things after this definition will be some lemmas that give equivalent statements (e.g. using <code>roots_of_unity</code> instead of <code>primitive_roots</code>). All those versions will probably be useful in the end.</p>",
        "id": 259095978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255025
    },
    {
        "content": "<p>What's the benefit of using primitive roots as opposed to all nth roots of unity?</p>",
        "id": 259096029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635255051
    },
    {
        "content": "<p>I feel like checking for all roots would be easier, so it might make sense to have that as the constructor</p>",
        "id": 259096100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635255088
    },
    {
        "content": "<p><code>⋃ i ∈ S, (primitive_roots ↑i L) : set L</code> this works. I used primitive roots because <code>roots_of_unity</code> is a subgroup of units of <code>L</code>, so there are even more coercions</p>",
        "id": 259096648,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635255310
    },
    {
        "content": "<p>but it's doable of course. I think that it's better to use one of them rather than saying manually \"roots of X^n-1\"</p>",
        "id": 259096696,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635255337
    },
    {
        "content": "<p>Maybe the constructor should just use <code>{b : L | ∃ i ∈ S, ... }</code>.</p>",
        "id": 259096706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255343
    },
    {
        "content": "<p>And then a lemma can say: ooh, in fact you can use a primitive root of unity</p>",
        "id": 259096795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255369
    },
    {
        "content": "<p>Exactly the opposite of what I was thinking, but I trust you guys more than myself  <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 259096873,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635255406
    },
    {
        "content": "<p>So this one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.cyclotomic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ex_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">polynomial.cyclotomic</span> <span class=\"n\">a</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 259097093,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635255498
    },
    {
        "content": "<p>That looks good to me!</p>",
        "id": 259097140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635255520
    },
    {
        "content": "<p>I guess this would imply L is commutative. Do we want to infer a comm_ring instance from this or just assume commutativity from the start?</p>",
        "id": 259097335,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635255593
    },
    {
        "content": "<p>Should it be phrased as <code>⊤ ≤ _</code>? Because that's easier to verify?</p>",
        "id": 259097338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255595
    },
    {
        "content": "<p>Or even just: <code>∀ x : L, x ∈ algebra.adjoin ...</code></p>",
        "id": 259097406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255613
    },
    {
        "content": "<p>Then proofs don't need to start with <code>rw eq_top_iff</code></p>",
        "id": 259097457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259097335\">said</a>:</p>\n<blockquote>\n<p>I guess this would imply L is commutative. Do we want to infer a comm_ring instance from this or just assume commutativity from the start?</p>\n</blockquote>\n<p>Good question. We cannot add <code>... : comm_ring R := sorry</code>, right? Because a priori there could be a diamond for the two <code>ring</code> structures... and I don't want to prove it now if it is more than 5 minutes.</p>",
        "id": 259098460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635256078
    },
    {
        "content": "<p>I wouldn't worry about this for now.</p>",
        "id": 259098877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635256254
    },
    {
        "content": "<p>Just assume commutativity.</p>",
        "id": 259098886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635256259
    },
    {
        "content": "<p>I agree we should just assume commutativity! But I also don't think proving it as an instance would cause a diamond since the ring structure would come from the given ring structure of L.</p>",
        "id": 259099231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635256414
    },
    {
        "content": "<p>It might be a diamond, but the two ring instances would be defeq</p>",
        "id": 259099264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635256434
    },
    {
        "content": "<p>Sure, but if our proof is <code>sorry</code> then Lean cannot know the two structure are <code>defeq</code>. But let's just assume commutativity.</p>",
        "id": 259099988,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635256777
    },
    {
        "content": "<p>Oh, I see. but if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">is_cyclotomic_extension</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_comm'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>then it should be okay, right?</p>",
        "id": 259100246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635256864
    },
    {
        "content": "<p>Anyway, all rings are commutative so why do we even care ;)</p>",
        "id": 259100433,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635256932
    },
    {
        "content": "<p>I've never used abbreviation, is this what we want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">is_cyclotomic_extension_rat</span> <span class=\"o\">:=</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"n\">S</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span>\n<span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 259100883,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635257119
    },
    {
        "content": "<p><code>_rat</code> is longer than <code> ℚ </code>. So I think I wouldn't bother.</p>",
        "id": 259103453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635258114
    },
    {
        "content": "<p>good point</p>",
        "id": 259104689,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635258549
    },
    {
        "content": "<p>Here's a worry: If we use an infinite <code>S</code> (e.g., all positive integers), then will <code>algebra.adjoin</code> give us the whole cyclotomic field, or only a subalgebra?</p>",
        "id": 259107685,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635259668
    },
    {
        "content": "<p>We get the extension generated by all roots of unity.</p>",
        "id": 259107932,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635259784
    },
    {
        "content": "<p>Is it obvious that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><msub><mi>ζ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>ζ</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">]</mo><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>ζ</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[\\zeta_1,\\zeta_2,\\ldots]=\\mathbb{Q}(\\zeta_1,\\zeta_2,\\ldots)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">)</span></span></span></span> (algebra adjoin vs field adjoin)?</p>",
        "id": 259107950,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635259791
    },
    {
        "content": "<p>Yes, any element is in a finitely generated subalgebra, so you don't have to worry about infinitely many generators.</p>",
        "id": 259108117,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635259847
    },
    {
        "content": "<p>So we now have a very general definition <code>is_cyclotomic_extension</code>. I don't see how to write down an explicit model in the same degree of generality. For example we can take the splitting field of the cyclotomic polynomials, but this works only over fields and for <code>S</code> a singleton.</p>",
        "id": 259110142,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635260581
    },
    {
        "content": "<p>But that doesn't matter right?</p>",
        "id": 259110273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635260636
    },
    {
        "content": "<p>You just setup the API as general as possible. And at the end of your project you specialize to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ℚ(ζ_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord amsrm\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 259110385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635260665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259110142\">said</a>:</p>\n<blockquote>\n<p>So we now have a very general definition <code>is_cyclotomic_extension</code>. I don't see how to write down an explicit model in the same degree of generality. For example we can take the splitting field of the cyclotomic polynomials, but this works only over fields and for <code>S</code> a singleton.</p>\n</blockquote>\n<p>You could work in an algebraic closure and take a sup of subalgebras or intermediate fields.</p>",
        "id": 259110466,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635260695
    },
    {
        "content": "<p>Mmh.. yes, it should be enoug. Once we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> we can say that <code>algebra.adjoin ℤ ζ</code> is a cyclotomic extension</p>",
        "id": 259110878,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635260858
    },
    {
        "content": "<p>Where <code>ζ</code> is inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 259110925,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635260880
    },
    {
        "content": "<p>If we really want to be fancy, we could build the infinite cyclotomic extension and take fixed fields by closed subgroups of the Galois group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mover accent=\"true\"><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"true\">^</mo></mover><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\widehat{\\mathbb{Z}}^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.92889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbb\">Z</span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.68889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span>. This would also give us the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> from Iwasawa theory.</p>",
        "id": 259111334,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635261015
    },
    {
        "content": "<p>(although Lean doesn't know this version of the Galois correspondence yet)</p>",
        "id": 259111375,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635261038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259111334\">said</a>:</p>\n<blockquote>\n<p>If we really want to be fancy, we could build the infinite cyclotomic extension and take fixed fields by closed subgroups of the Galois group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mover accent=\"true\"><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"true\">^</mo></mover><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\widehat{\\mathbb{Z}}^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.92889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbb\">Z</span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.68889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span>. This would also give us the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> from Iwasawa theory.</p>\n</blockquote>\n<p>This is where one would have to worry about characteristic...</p>",
        "id": 259111512,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635261095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Right, so you will need an instance for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ℚ(ζ_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord amsrm\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. But that should suffice. (Ok, and maybe for the integral version.)</p>",
        "id": 259111588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635261122
    },
    {
        "content": "<p>Could you do both simultaneously with <code>adjoin_root</code>?</p>",
        "id": 259111695,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635261163
    },
    {
        "content": "<p>One question is this: Given a positive integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, should we prove a cyclotomic instance for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S = \\{n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span> or for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> the divisors of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>?</p>",
        "id": 259111722,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635261175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259111722\">said</a>:</p>\n<blockquote>\n<p>One question is this: Given a positive integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, should we prove a cyclotomic instance for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S = \\{n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span> or for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> the divisors of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>?</p>\n</blockquote>\n<p>If we view S as saying \"what roots of unity you want to adjoin\", then I think {n} is more natural and less cumbersome?</p>",
        "id": 259111866,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635261238
    },
    {
        "content": "<p>My question is exactly what is (in Lean) the integral version. Over a field we can use <code>splitting_field</code> and we are good. The problem with <code>adjoin_root</code> is that it add the root even if it is already there.</p>",
        "id": 259111924,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635261248
    },
    {
        "content": "<p>Would taking an arbitrary irreducible factor of the cyclotomic polynomial work?</p>",
        "id": 259112028,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635261297
    },
    {
        "content": "<p>It is by def the quotient of the polynomial ring by the polynomial. So if we don't have irreducibility this is very badly behaved</p>",
        "id": 259112050,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635261304
    },
    {
        "content": "<p>No, we want all the roots</p>",
        "id": 259112118,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635261333
    },
    {
        "content": "<p>Could you define some weird induction thing that takes a polynomial, pulls off an irreducible factor and applies <code>adjoin_root</code>, and repeats?</p>",
        "id": 259112280,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635261392
    },
    {
        "content": "<p>This might even generalize the splitting field construction</p>",
        "id": 259112322,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635261411
    },
    {
        "content": "<p>For the integral version, can't you use integral closure, or <code>algebra.adjoin</code>?</p>",
        "id": 259112692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635261572
    },
    {
        "content": "<p>Well, you are proposing to generalize <code>splitting_field</code> to rings. This is surely possible in some sense, but I am afraid it's going to be a lot of work.</p>\n<p>Maybe the best thing is, for domains, to just consider <code>algebra.adjoin R T</code>, where <code>T</code> is the set of roots of unity in the field of fraction</p>",
        "id": 259112701,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635261574
    },
    {
        "content": "<p>Yes exactly, having the field we can work there</p>",
        "id": 259112815,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635261607
    },
    {
        "content": "<p>people are against using <code>integral_closure</code> since in general the thing is not integrally closed (it is for <code>Z</code>).</p>",
        "id": 259112891,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635261642
    },
    {
        "content": "<p>I think I wrote down the relevant definitions. They are in <code>number_theory/cyclotomic/basic</code>. I am going to stop for today, but the idea is to get rid of <code>number_theory/cyclotomic/field/basic</code> and <code>number_theory/cyclotomic/ring/basic</code>, so if someone wants to modify the other files please go ahead. It should be easy.</p>",
        "id": 259120401,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635264580
    },
    {
        "content": "<p>In <code>number_theory/cyclotomic/basic</code> there <em>a lot</em> of <code>sorry</code>, most of them are instances.</p>",
        "id": 259120490,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635264605
    },
    {
        "content": "<p>I think that using <code>abbreviation</code>/<code>notation</code> or whatever instead of <code>def</code> some of them will become automatic, but in any case the majority should be easy.</p>",
        "id": 259120624,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635264656
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 259121138,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635264886
    },
    {
        "content": "<p>So I was just trying to get the <code>class_group</code> stuff working with the new cyclotomic definition, but it gives me an error I'd not seen before <code>maximum class-instance resolution depth has been reached </code>. What does this mean?</p>",
        "id": 259207341,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635323659
    },
    {
        "content": "<p>It means there is a cycle of instances</p>",
        "id": 259208025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635324062
    },
    {
        "content": "<p>Where is it?</p>",
        "id": 259208049,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635324071
    },
    {
        "content": "<p>aha, I tried the <code>set_option trace.class_instances true</code> but I cant really interpret the output to see the problem. (Sorry I'm still quite new at this!)</p>",
        "id": 259208159,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635324129
    },
    {
        "content": "<p>I pushed the changes if you want to see the error for yourself</p>",
        "id": 259208250,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635324183
    },
    {
        "content": "<p>I've never understood the output if <code>set_option trace.class_instances true</code>: the problem is surely written, but it is too long to read.</p>",
        "id": 259208310,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635324217
    },
    {
        "content": "<p>I suggest we try to have <code>master</code> compiling without errors all the time. But we can of course use other branches to play with errors</p>",
        "id": 259208524,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635324324
    },
    {
        "content": "<p>But no problem for your commit :)</p>",
        "id": 259208544,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635324337
    },
    {
        "content": "<p>Ah sure that's probably a good idea! :)</p>",
        "id": 259208637,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635324378
    },
    {
        "content": "<p>Looking at the output it seems something happen here <code>[class_instances] cached instance for field ℚ\nrat.field</code></p>",
        "id": 259208855,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635324513
    },
    {
        "content": "<p>I've probably missed something about the new <code>open</code> command, but I don't understand how Lean find <code>cyclotomic_ring</code> that is now called something like <code>new_cyclotomic_field.cyclotomic_ring</code></p>",
        "id": 259209301,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635324795
    },
    {
        "content": "<p>Oh I added the <code>open new_cyclotomic_field</code> I thought it would just mean I dont have to type <code>new_cyclotomic_field.cyclotomic_ring</code> everytime.</p>",
        "id": 259209716,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635325075
    },
    {
        "content": "<p>There is no <code>open</code> <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/number_theory/cyclotomic/class_group.lean\">here</a> or am I blind?</p>",
        "id": 259209874,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635325162
    },
    {
        "content": "<p>But let me check the real error</p>",
        "id": 259209899,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635325179
    },
    {
        "content": "<p>Oh wait, maybe I pushed the wrong thing.</p>",
        "id": 259209936,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635325197
    },
    {
        "content": "<p>Yes I forgot to hit save before pushing, sorry!</p>",
        "id": 259210165,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635325291
    },
    {
        "content": "<p>I get an <code>invalid namespace name 'new_cyclotomic_field'</code> error.</p>",
        "id": 259210407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635325425
    },
    {
        "content": "<p>Yeah, did you delete that namespace?</p>",
        "id": 259210497,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635325460
    },
    {
        "content": "<p>I didn't touch the namespace, there is something I don't understand. Let me see what really does the new <code>open</code>.</p>",
        "id": 259210609,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635325525
    },
    {
        "content": "<p>No I can see in your commit that you removed the that namespace from <code>cyclotomic/basic</code></p>",
        "id": 259210737,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635325592
    },
    {
        "content": "<p>But either way, thats not the problem. the class instance thing is still there.</p>",
        "id": 259210811,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635325640
    },
    {
        "content": "<p>Ah ops, I messed up. Let's fix this, since there are two <code>cyclotomic_ring</code> and I want to be sure Lean is working with the good one.</p>",
        "id": 259210912,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635325692
    },
    {
        "content": "<p>So,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">class_group.fintype_of_cyclotomic_ring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">class_group.fintype_of_admissible_of_finite</span>\n    <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>complains with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This usually means there is a diamond somewhere.</p>",
        "id": 259211643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635326151
    },
    {
        "content": "<p>Can you check that all the instances I wrote in <code>number_theory/cyclotomic/basic</code> are good? For example that I didn't write <code>algebra field ring</code> instead of <code>algebra ring field</code>. I am checking them too, but two pairs of eyes are better.</p>",
        "id": 259212525,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635326786
    },
    {
        "content": "<p>Mmh,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">cyclotomic_ring_int_is_integral_closure</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integral_closure</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">class_group.fintype_of_cyclotomic_ring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">euclidean_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">class_group.fintype_of_admissible_of_finite</span>\n    <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">is_domain</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">is_fraction_ring</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_domain</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>I don't understand.</p>",
        "id": 259213971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635327695
    },
    {
        "content": "<p>Lean wants</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">algebra.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_inst_6</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">K</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">algebra.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">K</span>\n</code></pre></div>",
        "id": 259214206,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635327851
    },
    {
        "content": "<p>I have to stop for a couple of hours, but something is confusing me. It seems there a diamond here, but it's strange nobody found it before.</p>",
        "id": 259214431,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635328049
    },
    {
        "content": "<p>Oh, OK, I see</p>",
        "id": 259214542,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635328111
    },
    {
        "content": "<p><code>euclidean_domain</code> does not need <code>ring</code></p>",
        "id": 259214552,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635328120
    },
    {
        "content": "<p>Bu the other problem is still there</p>",
        "id": 259214613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635328181
    },
    {
        "content": "<p>There is the algebra Q diamond and the rat field diamond, both of which will likely continue to cause us issues</p>",
        "id": 259214619,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635328184
    },
    {
        "content": "<p>Sorry I was away talking to a student.<br>\n<span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259212525\">said</a>:</p>\n<blockquote>\n<p>Can you check that all the instances I wrote in <code>number_theory/cyclotomic/basic</code> are good? For example that I didn't write <code>algebra field ring</code> instead of <code>algebra ring field</code>. I am checking them too, but two pairs of eyes are better.</p>\n</blockquote>\n<p>Sorry I was afk talking to a student. I'll have a look now.</p>",
        "id": 259218865,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635330705
    },
    {
        "content": "<p>I have a noob question. What is a diamond? Is it when something can inherit the same properties from two different sources?</p>",
        "id": 259219040,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635330806
    },
    {
        "content": "<p>Right -- it's when you suddenly find that you have two instances of e.g. <code>[algebra ℤ R]</code> which are perhaps propositionally equal but not <em>definitionally</em> equal, because Lean mananged to find two ring homomorphisms from the integers to R in its type class system.</p>",
        "id": 259219227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635330923
    },
    {
        "content": "<p>This is an issue because type class inference relies on definitional equality to work, basically, so diamonds can cause obscure/hard-to-diagnose errors.</p>",
        "id": 259219296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635330961
    },
    {
        "content": "<p>The famous example, the one which really made me understand diamonds, is that metric spaces and topological spaces are classes in Lean, and there's an instance which takes a metric space to a topological space, and an instance which takes two metric spaces and returns a metric space structure on the product, with the L^2 norm say (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><msqrt><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>2</mn></msub><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">d((x_1,y_1),(x_2,y_2)):=\\sqrt{(d(x_1,y_1)^2+d(x_2,y_2)^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">((</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-0.30499999999999994em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.935em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.8950000000000005em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30499999999999994em;\"><span></span></span></span></span></span></span></span></span>) and there's an instance which takes two topological spaces and returns a topological space structure on the product.</p>",
        "id": 259219483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331066
    },
    {
        "content": "<p>This gives a diamond! Because if you start with two metric spaces, then the product topology coming from the topologies has a basis which are \"rectangles\" (i.e. of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>×</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">U\\times V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>) whereas the topology coming from the metric has a basis which are \"discs\" (i.e. distance from a fixed point is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">&lt;r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>).</p>",
        "id": 259219636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331148
    },
    {
        "content": "<p>It's a theorem that these two topologies are the same, but the proof is certainly not <code>rfl</code>!</p>",
        "id": 259219664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331167
    },
    {
        "content": "<p>Aha that makes perfect sense, thank you!</p>",
        "id": 259219776,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635331219
    },
    {
        "content": "<p>Even if you make the metric on the product equal to the sup norm you still don't get <code>rfl</code> for your proof that the two topologies coincide, because one is \"basis generated by products of all open sets\" and the other is \"basis generated by products of all open balls\"</p>",
        "id": 259219803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331238
    },
    {
        "content": "<p>The astonishing fix for this diamond, I think due to Johannes Hoelzl, is to make the topology part of the definition of a metric space!</p>",
        "id": 259219845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331273
    },
    {
        "content": "<p>So a metric space in Lean is [what you think a metric space is] + [a topology] + [a proof that the topology is equal to the one induced by the metric]</p>",
        "id": 259219878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331302
    },
    {
        "content": "<p>and then in the instance which defines a metric on the product of two metric spaces, you define the topology to be the product topology, and then you insert the proof that the metric product induces the product topology in the definition of the instance. This trivially fixes the diamond.</p>",
        "id": 259220063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331410
    },
    {
        "content": "<p>If you've ever looked at the definition of a group in mathlib recently, you'll see that it contains a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><mi>G</mi><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}\\times G\\to G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77222em;vertical-align:-0.08333em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> and a proof that this map sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n,g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>g</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">g^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, and this random extra field is there for the same sort of reason.</p>",
        "id": 259220171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331462
    },
    {
        "content": "<p>Ok great, I'll add diamonds to my list of things to worry about :)</p>",
        "id": 259220559,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635331708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259219040\">said</a>:</p>\n<blockquote>\n<p>I have a noob question. What is a diamond? Is it when something can inherit the same properties from two different sources?</p>\n</blockquote>\n<p>Since yesterday we have a new way to answer this question! Meet our glossary <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <br>\n<a href=\"https://leanprover-community.github.io/glossary.html#diamond\">https://leanprover-community.github.io/glossary.html#diamond</a></p>",
        "id": 259220946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635331955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259220946\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259219040\">said</a>:</p>\n<blockquote>\n<p>I have a noob question. What is a diamond? Is it when something can inherit the same properties from two different sources?</p>\n</blockquote>\n<p>Since yesterday we have a new way to answer this question! Meet our glossary <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <br>\n<a href=\"https://leanprover-community.github.io/glossary.html#diamond\">https://leanprover-community.github.io/glossary.html#diamond</a></p>\n</blockquote>\n<p>Oh this is great! thank you</p>",
        "id": 259221187,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635332154
    },
    {
        "content": "<p>Credits to Julian Berman for writing it!</p>",
        "id": 259221313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635332228
    },
    {
        "content": "<p>I think that a mathematician would understand my explanation better than Julian's, because they would know a lot more about topological spaces than about terms and types. I should PR an extension of the explanation with the example maybe (when I'm out of teaching hell next week)</p>",
        "id": 259222531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635333003
    },
    {
        "content": "<p>Yeah, maybe the extended explanation can be written up somewhere (a gist?) and then we link to that?</p>",
        "id": 259222644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333081
    },
    {
        "content": "<p>I guess the glossary should try to be concise, and link to other places for details.</p>",
        "id": 259222678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333106
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 259222855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635333218
    },
    {
        "content": "<p>In fact, the \"See Also\" part already links to the forgetful inheritance discussion from the mathlib paper.</p>",
        "id": 259223027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333316
    },
    {
        "content": "<p>Which contains your metric space example.</p>",
        "id": 259223041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635333325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> I am back at the computer. The diamond I was talking was completely my fault, I had <code>[ring A] [euclidean_domain A]</code>, so there were two structures of ring on <code>A</code>, and that confused Lean. Now I have <code>euclidean_domain A</code> but I still get the <code>maximum class-instance resolution</code>. Let's see what's wrong</p>",
        "id": 259224205,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635333954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259222531\">said</a>:</p>\n<blockquote>\n<p>I think that a mathematician would understand my explanation better than Julian's, because they would know a lot more about topological spaces than about terms and types. I should PR an extension of the explanation with the example maybe (when I'm out of teaching hell next week)</p>\n</blockquote>\n<p>I agree with this. I understand the topology example much more than the typeclass description.</p>",
        "id": 259225446,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635334641
    },
    {
        "content": "<p>I'm not sure if this helps, but we get the same error if we try and do <code>instance : number_field ℚ := infer_instance</code></p>",
        "id": 259232201,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635338601
    },
    {
        "content": "<p>It seems <code>cyclotomic.basic.number_field</code> is what causes it to break</p>",
        "id": 259232564,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635338781
    },
    {
        "content": "<p>Yes, there is something strange. But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.class_number.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.class_number.admissible_abs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_fraction_ring</span>\n  <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span>\n  <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sepKL</span> <span class=\"o\">:</span> <span class=\"n\">is_separable</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">iicSRL</span> <span class=\"o\">:</span> <span class=\"n\">is_integral_closure</span>\n    <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"n\">ℤ</span>\n    <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">class_group.fintype_of_admissible_of_finite</span> <span class=\"n\">ℤ</span>\n    <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span>\n    <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">absolute_value.abs_is_admissible</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 259233925,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635339461
    },
    {
        "content": "<p>I've unfolded the def by hand.</p>",
        "id": 259233952,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635339474
    },
    {
        "content": "<p>Ah, in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [comm_ring]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cyclotomic_ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>K</code> should be <code>cyclotomic_field {n} K</code>!</p>",
        "id": 259234104,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635339559
    },
    {
        "content": "<p>I am pushing this, that in any case fix a mistake</p>",
        "id": 259234127,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635339572
    },
    {
        "content": "<p>So,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.cyclotomic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.class_number.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.class_number.admissible_abs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_fraction_ring</span>\n  <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span>\n  <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">iicSRL</span> <span class=\"o\">:</span> <span class=\"n\">is_integral_closure</span>\n    <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"n\">ℤ</span>\n    <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">class_group.fintype_of_admissible_of_finite</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span>\n    <span class=\"n\">absolute_value.abs_is_admissible</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works perfectly. But if I add <code>import number_theory.cyclotomic.basic</code> I get the error. So now it's just a matter of bisecting the file to see what causes the problem.</p>",
        "id": 259235368,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635340139
    },
    {
        "content": "<p>I found the culprit! It's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">number_field</span> <span class=\"o\">[</span><span class=\"n\">is_cyclotomic_extension</span> <span class=\"n\">S</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">number_field</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And once you know it, the reason is clear: if <code>K</code> is a number field then <code>L</code> is, but I think we know that subfields of number fields are number fields, so Lean goes back to <code>K</code> and then again to <code>L</code> and so on.</p>",
        "id": 259237002,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635340848
    },
    {
        "content": "<p>Aha this is what it seemed like when I did this <code>instance : number_field ℚ := infer_instance</code> experiment. But I don't know how to fix it.</p>",
        "id": 259238818,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635341625
    },
    {
        "content": "<p>It has to be a lemma, not an instance.</p>",
        "id": 259238967,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635341676
    },
    {
        "content": "<p>But we have another problem, and this time it really seems a diamond.</p>",
        "id": 259239018,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635341698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259238967\">said</a>:</p>\n<blockquote>\n<p>It has to be a lemma, not an instance.</p>\n</blockquote>\n<p>Ahh ok.</p>",
        "id": 259239065,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635341712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259239018\">said</a>:</p>\n<blockquote>\n<p>But we have another problem, and this time it really seems a diamond.</p>\n</blockquote>\n<p>Oh no</p>",
        "id": 259239081,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635341719
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">class_group.fintype_of_cyclotomic_ring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">class_group.fintype_of_admissible_of_finite</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And if you try to put <code>h</code> insted of the isolated underscore, there is a giant <code>type mismatch at application</code> error.</p>",
        "id": 259239405,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635341828
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259239474,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635341854
    },
    {
        "content": "<p>I wanted to see the two types, that's why I used <code>have</code>.</p>",
        "id": 259239617,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635341898
    },
    {
        "content": "<p>So <code>h</code> has type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.add_group</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_one_class.to_mul_zero_class</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℚ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℚ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">module.to_mul_action_with_zero</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_module</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.algebra</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))))</span>\n</code></pre></div>",
        "id": 259239803,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635341978
    },
    {
        "content": "<p>And the type Lean wants is so long I cannot post here <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 259239971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635342041
    },
    {
        "content": "<p>But it must come from the def of <code>cyclotomic_field n ℚ</code>, so it's fixable I hope.</p>",
        "id": 259240338,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635342179
    },
    {
        "content": "<p>I've managed to reduce the size of the error, now the two types are almost readable. It's the error in <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/number_theory/cyclotomic/class_group.lean\">this</a> file.</p>",
        "id": 259247428,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635344926
    },
    {
        "content": "<p><code>@add_comm_group.int_is_scalar_tower ℚ (cyclotomic_field n ℚ) _ _ _</code> has type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"n\">ℚ</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">)))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_one_class.to_mul_zero_class</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℚ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">)))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">module.to_mul_action_with_zero</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_module</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span> <span class=\"n\">rat.comm_semiring</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.algebra</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))))</span>\n</code></pre></div>",
        "id": 259247507,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635344964
    },
    {
        "content": "<p>The actual type is still too big to fit in Zulip...</p>",
        "id": 259247712,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635345022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259222531\">said</a>:</p>\n<blockquote>\n<p>I think that a mathematician would understand my explanation better than Julian's, because they would know a lot more about topological spaces than about terms and types. I should PR an extension of the explanation with the example maybe (when I'm out of teaching hell next week)</p>\n</blockquote>\n<p>Isn't this explanation what's in <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#forgetful%20inheritance\">https://leanprover-community.github.io/mathlib_docs/notes.html#forgetful%20inheritance</a> ?</p>",
        "id": 259249480,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1635345640
    },
    {
        "content": "<p>yeah I didn't click through :-)</p>",
        "id": 259257430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635348496
    },
    {
        "content": "<p>The diamond error is that Lean is failing to solve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"bp\">=</span> <span class=\"n\">sub_neg_monoid.has_scalar_int</span>\n</code></pre></div>",
        "id": 259257938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635348694
    },
    {
        "content": "<p>Ah, thank's!! How did you find it?</p>",
        "id": 259258723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635349009
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">class_group.fintype_of_cyclotomic_ring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">class_group.fintype_of_admissible_of_finite</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.int_is_scalar_tower</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259258897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349074
    },
    {
        "content": "<p>I'm still thinking about it</p>",
        "id": 259258956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349086
    },
    {
        "content": "<p>I am quite confused because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works</p>",
        "id": 259259036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349122
    },
    {
        "content": "<p>Ah, in any case super nice trick using <code>convert</code> to reduce the size of the output.</p>",
        "id": 259259125,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635349178
    },
    {
        "content": "<p>We've definitely still not got to the bottom of this</p>",
        "id": 259259397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349285
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">class_group.fintype_of_cyclotomic_ring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">class_group.fintype_of_admissible_of_finite</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.int_is_scalar_tower</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">})</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>That tactic actually compiles without errors, leaving two goals.</p>",
        "id": 259259567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349359
    },
    {
        "content": "<p>The two goals are OK</p>",
        "id": 259259637,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635349396
    },
    {
        "content": "<p>One is <code>absolute value ℤ ℤ</code> -- so Lean is not inferring it</p>",
        "id": 259259646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349400
    },
    {
        "content": "<p>But the goal before the <code>sorry</code> is not being closed with <code>refl</code></p>",
        "id": 259259679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349414
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.class_number.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.class_number.admissible_abs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">finiteness</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">new_cyclotomic_field</span>\n\n<span class=\"c1\">--set_option pp.all true</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">smul_with_zero.to_has_scalar</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">class_group.fintype_of_cyclotomic_ring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">class_group.fintype_of_admissible_of_finite</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.int_is_scalar_tower</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">})</span>\n  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">absolute_value.abs_is_admissible</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finiteness</span>\n</code></pre></div>",
        "id": 259259965,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635349534
    },
    {
        "content": "<p>oh nice! Indeed I'd just discovered that the instance of <code>smul_with_zero.to_has_scalar</code> in the term was not the one that type class inference was discovering.</p>",
        "id": 259260109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349589
    },
    {
        "content": "<p>But the <code>sorry</code> is still there, I have to think about it.</p>",
        "id": 259260349,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635349699
    },
    {
        "content": "<p>Uuughh, this all looks really ugly. I'm cheering you on from the side. The joys of spelunking through the depths of mathlibs algebra hierarchy.</p>",
        "id": 259260394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635349725
    },
    {
        "content": "<p>My understanding so far is that Riccardo has managed to get type class inference to create a term of type <code>has_scalar ℤ (cyclotomic_field n ℚ)</code> which is not defeq to <code>(smul_with_zero.to_has_scalar : has_scalar ℤ (cyclotomic_field n ℚ))</code></p>",
        "id": 259260528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635349799
    },
    {
        "content": "<p>I agree that it's probably my fault, but I thought that all <code>Z</code>-action were defeq, we did a huge refactor to have this, didn't we?</p>",
        "id": 259260855,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635349931
    },
    {
        "content": "<p>The definition of <code>cyclotomic_field n K</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [field, algebra K]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cyclotomic_field</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span>\n</code></pre></div>",
        "id": 259261025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635350009
    },
    {
        "content": "<p>heh :-) certainly not all int actions are defeq, but somehow the idea is supposed to be that we only ever let Lean see the defeq ones :-)</p>",
        "id": 259261148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635350045
    },
    {
        "content": "<p>That <code>smul_wth_zero</code> must be coming from an \"ugly\" place, I guess.</p>",
        "id": 259261190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635350064
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">ℤ</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_one_class.to_mul_zero_class</span> <span class=\"n\">ℤ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"n\">ℤ</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℤ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℤ</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.euclidean_domain</span><span class=\"o\">)))))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℤ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℤ</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.euclidean_domain</span><span class=\"o\">))))</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))))))</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">module.to_mul_action_with_zero</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">ℤ</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.euclidean_domain</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)))))))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_module</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.euclidean_domain</span><span class=\"o\">))</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">new_cyclotomic_field.cyclotomic_field_algebra</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_ring.to_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.ordered_ring</span><span class=\"o\">))</span>\n                  <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">))))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.field</span><span class=\"o\">))))))</span>\n</code></pre></div>\n<p>Very good</p>",
        "id": 259261644,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635350266
    },
    {
        "content": "<p>The bad instance is coming from <code>algebra.to_has_scalar</code></p>",
        "id": 259264556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351397
    },
    {
        "content": "<p>Yes, I just arrived to the conclusion that the problem is the <code>Z</code>-algebra structure on the cyclotomic field.</p>",
        "id": 259265296,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635351722
    },
    {
        "content": "<p>Let me check where it comes from.</p>",
        "id": 259265361,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635351733
    },
    {
        "content": "<p>Does it come from <code>cyclotomic_field_algebra</code>?</p>",
        "id": 259265476,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635351787
    },
    {
        "content": "<p>Yes, the bad instance has <code>new_cyclotomic_field.cyclotomic_field_algebra n ℤ ℚ</code> in it</p>",
        "id": 259265720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351874
    },
    {
        "content": "<p>It's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">cyclotomic_field_algebra</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span>\n</code></pre></div>",
        "id": 259265827,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635351923
    },
    {
        "content": "<p>Maybe for it doesn't like that its a composition when defined for <code>Z</code>?</p>",
        "id": 259266103,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635352023
    },
    {
        "content": "<p>Can it be universe related:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">new_cyclotomic_field.cyclotomic_field_algebra</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is not happy with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">new_cyclotomic_field.cyclotomic_field_algebra</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"bp\">=</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 259267154,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635352440
    },
    {
        "content": "<p>that's some type error, you have (term) = (type of the term)</p>",
        "id": 259267322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352501
    },
    {
        "content": "<p>But this works :-/</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">new_cyclotomic_field.cyclotomic_field_algebra</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 259267513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352569
    },
    {
        "content": "<p>oh but that's just because type class inference finds precisely this term</p>",
        "id": 259267673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352631
    },
    {
        "content": "<p>so here's the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this is `new_cyclotomic_field.cyclotomic_field_algebra n ℤ ℚ`</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"c1\">-- remove the instance</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">new_cyclotomic_field.cyclotomic_field_algebra</span>\n<span class=\"c1\">-- still works, now `algebra_int`</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"c1\">-- but they're not defeq</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 259267900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352714
    },
    {
        "content": "<p>The new instance <code>new_cyclotomic_field.cyclotomic_field_algebra</code> is giving a non-defeq <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-algebra structure</p>",
        "id": 259268018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352763
    },
    {
        "content": "<p>Yeah it must be because its defined as a composition</p>",
        "id": 259268066,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635352781
    },
    {
        "content": "<p>Oh gosh, thank you</p>",
        "id": 259268072,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635352785
    },
    {
        "content": "<p>or not, I dont know</p>",
        "id": 259268154,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635352807
    },
    {
        "content": "<p>In any case this is a problem that we have to solve</p>",
        "id": 259268315,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635352877
    },
    {
        "content": "<p>Let me see if I have enough time</p>",
        "id": 259268338,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635352887
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Is this expected to fail? (i.e. do I need more imports?) I thought it would be worth looking at how analogues of <code>cyclotomic_field_algebra</code> are defined in mathlib.</p>",
        "id": 259268966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635353145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, that's supposed to fail. You need to use scalar towers.</p>",
        "id": 259269349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353278
    },
    {
        "content": "<p>Lean cannot guess which <code>K</code> it should be looking for.</p>",
        "id": 259269425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353291
    },
    {
        "content": "<p>I thought that was the whole point of scalar towers?</p>",
        "id": 259269434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635353296
    },
    {
        "content": "<p>So the issue is that if A is the integers and if <code>algebra A K</code> is the instance discovered by type class inference (<code>algebra_int</code>) then we want<code>algebra A L</code> to end up also being defeq to this instance.</p>",
        "id": 259269534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635353336
    },
    {
        "content": "<p>Right now this fails (of course):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>because the RHS has got some random <code>_inst_3</code> in it. So </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">cyclotomic_field_algebra</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span>\n</code></pre></div>\n<p>will always cause trouble if <code>A = ℤ</code></p>",
        "id": 259270143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635353568
    },
    {
        "content": "<p>I'm actually surprised that we haven't hit this issue earlier...</p>",
        "id": 259270148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353570
    },
    {
        "content": "<p>There are tons of <code>instance : algebra A blabla</code> in mathlib. But <code>blabla</code> will always already have an <code>algebra ℤ blabla</code> instance coming from <code>algebra_int</code>.</p>",
        "id": 259270240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353614
    },
    {
        "content": "<p>maybe <code>algebra_int</code> shouldn't be an instance?</p>",
        "id": 259270280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635353627
    },
    {
        "content": "<p><code>algebra_int</code> has priority 99, perhaps this helps (by which I mean perhaps this is why we didn't run into it before)</p>",
        "id": 259270293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635353631
    },
    {
        "content": "<p>Yeah, maybe. Having <code>algebra_int</code> not be an instance is quite disappointing though.</p>",
        "id": 259270467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353690
    },
    {
        "content": "<p>The alternative is to have all <code>algebra A B</code> instances extend <code>is_scalar_tower \\Z A B</code> or something like that?</p>",
        "id": 259270546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635353725
    },
    {
        "content": "<p>That feels very much like how we have solved previous problems of this nature</p>",
        "id": 259270730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635353805
    },
    {
        "content": "<p>Does that even help? You would get an <code>is_scalar_tower ℤ ℤ B</code>, which shows that the two scalar actions are propeq. But they still wouldn't be defeq.</p>",
        "id": 259270734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353807
    },
    {
        "content": "<p>sigh</p>",
        "id": 259270786,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635353829
    },
    {
        "content": "<p>I have to stop, but I agree with Johan that it is strange we never encountered  this before.</p>",
        "id": 259272270,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635354367
    },
    {
        "content": "<p>Maybe this is why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">subsemiring.lean</span>\n<span class=\"mi\">842</span><span class=\"bp\">-</span><span class=\"sd\">/-- The action by a subsemiring is the action by the underlying semiring. -/</span>\n<span class=\"mi\">843</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R'</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"mi\">844</span><span class=\"o\">:{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">),</span> <span class=\"bp\">..</span> <span class=\"n\">module.comp_hom</span> <span class=\"n\">_</span> <span class=\"n\">S.subtype</span> <span class=\"o\">}</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">module</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">107</span><span class=\"bp\">-</span><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">module.comp_hom</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"mi\">108</span><span class=\"bp\">-</span>  <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"mi\">109</span><span class=\"o\">:{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar.comp.smul</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">group_action</span><span class=\"bp\">/</span><span class=\"n\">defs.lean</span>\n<span class=\"mi\">169</span><span class=\"bp\">-</span>  <span class=\"n\">an</span> <span class=\"n\">additive</span> <span class=\"n\">action</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">N</span><span class=\"bp\">`</span> <span class=\"n\">on</span> <span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"bp\">`</span> <span class=\"s2\">\"-/]</span>\n<span class=\"s2\">170-def comp (g : N → M) : has_scalar N α :=</span>\n<span class=\"s2\">171:{ smul := has_scalar.comp.smul g }</span>\n<span class=\"s2\">--</span>\n<span class=\"s2\">309-@[reducible, to_additive] def comp_hom [monoid N] (g : N →* M) :</span>\n<span class=\"s2\">310-  mul_action N α :=</span>\n<span class=\"s2\">311:{ smul := has_scalar.comp.smul g,</span>\n<span class=\"s2\">--</span>\n<span class=\"s2\">396-@[reducible] def distrib_mul_action.comp_hom [monoid N] (f : N →* M) :</span>\n<span class=\"s2\">397-  distrib_mul_action N A :=</span>\n<span class=\"s2\">398:{ smul := has_scalar.comp.smul f,</span>\n<span class=\"s2\">--</span>\n<span class=\"s2\">476-@[reducible] def mul_distrib_mul_action.comp_hom [monoid N] (f : N →* M) :</span>\n<span class=\"s2\">477-  mul_distrib_mul_action N A :=</span>\n<span class=\"s2\">478:{ smul := has_scalar.comp.smul f,</span>\n</code></pre></div>",
        "id": 259272661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354554
    },
    {
        "content": "<p>All these examples use <code>.comp</code> for the definition of <code>smul</code>. But they are all defs.</p>",
        "id": 259272734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354582
    },
    {
        "content": "<p>i.e. none of them are instances</p>",
        "id": 259272860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635354624
    },
    {
        "content": "<p>There is also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">288</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">lift2_alg</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"mi\">289</span><span class=\"bp\">-</span><span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n<span class=\"mi\">290</span><span class=\"bp\">-</span>  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">,</span>\n<span class=\"mi\">291</span><span class=\"bp\">-</span>  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"o\">,</span>\n<span class=\"mi\">292</span><span class=\"bp\">-</span>  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n<span class=\"mi\">293</span><span class=\"bp\">-</span>  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n<span class=\"mi\">294</span><span class=\"o\">:</span>  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>So maybe we can construct a problem there when <code>K = ℚ</code>.</p>",
        "id": 259272867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354629
    },
    {
        "content": "<p><code>rat.algebra_rat</code> is indeed an instance (every char 0 division ring is a Q-algebra)</p>",
        "id": 259272965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635354690
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">cyclotomic_field_algebra</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span>\n</code></pre></div>\n<p>is evil. Right? What are the assumption on <code>A</code> and <code>K</code> here?</p>",
        "id": 259273770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354993
    },
    {
        "content": "<p>I should clone the repo.</p>",
        "id": 259273785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354998
    },
    {
        "content": "<p>We have <code>[is_domain A] [algebra A K] [is_fraction_ring A K]</code></p>",
        "id": 259273894,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635355045
    },
    {
        "content": "<p>K is the fraction field</p>",
        "id": 259273946,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635355059
    },
    {
        "content": "<p>Aha. Then I guess we should just make this a def. And provide the relevant is_scalar_tower instances for it (after making it an instance locally).</p>",
        "id": 259276395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356066
    },
    {
        "content": "<p>Do you think you will need this as an instance a lot?</p>",
        "id": 259276433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356084
    },
    {
        "content": "<p>We are going to work with Z, so a def is perfectly fine</p>",
        "id": 259276514,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635356123
    },
    {
        "content": "<p>Certainly, when you specialize to <code>ℤ</code> and <code>ℚ</code>, you can give the \"correct\" instance, which doesn't cause a diamond.</p>",
        "id": 259276515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356123
    },
    {
        "content": "<p>The definition is <em>much</em> more general than what we need</p>",
        "id": 259276640,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635356163
    },
    {
        "content": "<p>Right, that's what I suspected.</p>",
        "id": 259276818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356252
    },
    {
        "content": "<p>Skimming this thread, I'd claim any algebra instance created with <code>(x.comp y).to_algebra</code> will turn out to be evil</p>",
        "id": 259307459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635369302
    },
    {
        "content": "<p>However mathematicians want to say \"B is an A-algebra and C is a B-algebra so C is obviously an A-algebra\"</p>",
        "id": 259307638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635369384
    },
    {
        "content": "<p>because if everything is a commutative ring then \"B is an A-algebra\" is just code for <code>f : A -&gt;+* B</code></p>",
        "id": 259307778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635369420
    },
    {
        "content": "<p>There is no problem in changing the definition, but I don't see how to get rid of the diamond</p>",
        "id": 259311336,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635371179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Cyclotomic.20field.20defn/near/259307638\">said</a>:</p>\n<blockquote>\n<p>However mathematicians want to say \"B is an A-algebra and C is a B-algebra so C is obviously an A-algebra\"</p>\n</blockquote>\n<p>That's incompatible with the design currently used by mathlib, which is to say \"B is an A-algebra, C is a B-algebra, C is an A-algebra <em>in the obvious way</em>\", where the last part is <code>is_scalar_tower A B C</code>.</p>",
        "id": 259313177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635372270
    },
    {
        "content": "<p>I'll try a PR to <code>intermediate_field.lift2_alg</code> to fix the smul-diamond.</p>",
        "id": 259313474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635372455
    },
    {
        "content": "<p>But using <code>is_scalar_tower</code> isn't going to fix the diamond, right?</p>",
        "id": 259313626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635372544
    },
    {
        "content": "<p>It fixes one of the two diamonds</p>",
        "id": 259314979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635373312
    },
    {
        "content": "<p>(the one in <code>smul</code> but not the one in <code>algebra_map</code>)</p>",
        "id": 259315062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635373339
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/leanprover-community/mathlib/issues/10012\">#10012</a>. It's great when the fix is to <del>delete code!</del> replace actual proofs with \"we already proved this\"</p>",
        "id": 259317502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635374796
    },
    {
        "content": "<p>At a glance I think this fixes the problem at the top of the thread, since it was a diamond in <code>has_scalar</code> not <code>algebra_map</code></p>",
        "id": 259322364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635378502
    },
    {
        "content": "<p>So, I made <code>cyclotomic_field_algebra</code> a lemma instead of an instance. We can just put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">new_cyclotomic_field.cyclotomic_field_algebra</span>\n</code></pre></div>\n<p>if we need it.</p>",
        "id": 259353213,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635408472
    },
    {
        "content": "<p>Now this is one is solved, the same thing happens with the other <code>is_scalar_tower</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/class_group.fintype_of_admissible_of_finite\">docs#class_group.fintype_of_admissible_of_finite</a>, but it is surely the same diamond.</p>",
        "id": 259353326,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635408527
    },
    {
        "content": "<p><code>number_theory/cyclotomic/class_group</code> finally compiles without errors <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 259355203,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635409599
    },
    {
        "content": "<p>Thanks to everybody!</p>",
        "id": 259355207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635409606
    },
    {
        "content": "<p>I will try this afternoon to make <code>number_theory/cyclotomic/cyclotomic_units</code> using the new definition.</p>",
        "id": 259358026,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635411183
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/issues/10019\">#10019</a> might solve some more algebra issues, but I might need to change <code>splitting_field</code> too</p>",
        "id": 259372145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635419417
    },
    {
        "content": "<p>Thanks! In any case we can work without the algebra instance (over Z), and have it later.</p>",
        "id": 259374124,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635420707
    },
    {
        "content": "<p>I don't think we need cyclotomic fields over anything than Q for this project.</p>",
        "id": 259374183,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635420726
    },
    {
        "content": "<p>Looking more closely at <code>new_cyclotomic_field.cyclotomic_field_algebra</code>, the diamond is caused by the nasty recursion stuff going on to define the field instance</p>",
        "id": 259378006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635422965
    },
    {
        "content": "<p>The <code>field.zsmul</code> that appears in that recursion is not defeq to the <code>algebra.smul</code> that appears in the algebra recursion</p>",
        "id": 259378167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635423031
    },
    {
        "content": "<p>Here's an example of how recursors can create diamonds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g0</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rec1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f0</span><span class=\"o\">,</span> <span class=\"n\">g0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">rec1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">gs</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">rec1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rec2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">f0</span> <span class=\"n\">fs</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">g0</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- not definitionally equal</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rec1</span> <span class=\"n\">f0</span> <span class=\"n\">fs</span> <span class=\"n\">g0</span> <span class=\"n\">gs</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">rec2</span> <span class=\"n\">f0</span> <span class=\"n\">fs</span> <span class=\"n\">g0</span> <span class=\"n\">gs</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- but equal nonetheless</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rec1_eq_rec2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rec1</span> <span class=\"n\">f0</span> <span class=\"n\">fs</span> <span class=\"n\">g0</span> <span class=\"n\">gs</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">rec2</span> <span class=\"n\">f0</span> <span class=\"n\">fs</span> <span class=\"n\">g0</span> <span class=\"n\">gs</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">rec1_eq_rec2</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">rec1</span><span class=\"o\">,</span> <span class=\"n\">rec2</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259380158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635424086
    },
    {
        "content": "<p>Sorry, I've been afk all day today (and will be on most Thursdays), but I'll try and catch-up on all this today/tomorrow :)</p>",
        "id": 259434306,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635446805
    },
    {
        "content": "<p>The replacement for lift_alg2 is merged, did it make any difference?</p>",
        "id": 259436641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635447736
    },
    {
        "content": "<p>it's working now! edit: no its not. I hadn't read all the messages :(</p>",
        "id": 259442948,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635450776
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 259443010,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635450800
    },
    {
        "content": "<p>You should make the two def an instance to check if it's really working. I can do this tomorrow</p>",
        "id": 259443808,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635451178
    },
    {
        "content": "<p>Oh no you're right. I made them instances and its complaining about  <code>is_scalar_tower ℤ ℚ (cyclotomic_field n ℚ)</code></p>",
        "id": 259444397,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635451421
    },
    {
        "content": "<p>i just pushed some old work that I did on cyclotomic things, maybe it can give some inspiration for figuring out the general proofs for <code>is_cyclotomic_extension {n} A B</code></p>",
        "id": 260889849,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636509136
    },
    {
        "content": "<p>I was looking and thinking, and I think the best way to go about getting any primitive root (at which point the API is good enough for us to do pretty much whatever) is through finding that the cardinality of the roots of unity set is <code>n</code>. I think my specialized argument works, mostly, apart from it requires that <code>X^n-1</code> splits, whilst we \"only\" have that there is a root of <code>cyclotomic n F</code>.</p>\n<p>We definitely need to assume that our cyclotomic extension is normal, because otherwise we get to the weird Frobenius-y counterexamples, which leads to my final question: do we have a maths-proof that if <code>cyclotomic n F</code> splits, then so does <code>X ^ n - 1</code>? It seems perfectly reasonable to me, but every proof that I'd think of assumes we have a prim-root of unity.</p>",
        "id": 261048400,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636575357
    },
    {
        "content": "<p>In <code>ready_for_mathlib/cyclotomic</code> there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_root_cyclotomic_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">μ</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">is_root</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It shouldn't be difficult.</p>",
        "id": 261050421,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636576251
    },
    {
        "content": "<p>char_zero simplifies it (it's wrong for some charp; φ₄ ∈ F₂[x], for example) but I don't think it's as trivial as it seems mathematically</p>",
        "id": 261052498,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636577306
    },
    {
        "content": "<p>Ahahah, yes, that is obviously false, one needs to assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> in the base ring.</p>",
        "id": 261053228,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636577670
    },
    {
        "content": "<p>A simple proof is: let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> be a root, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a^n = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ψ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\psi_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>) so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-th root of unity.  If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>m</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a^m=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m &lt; n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, then we obtain a repeated root of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, that is impossible.</p>",
        "id": 261053558,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636577839
    },
    {
        "content": "<p>I used a similar strategy to prove the irreducibility, so all of these is doable without too much effort even in Lean.</p>",
        "id": 261053691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636577899
    },
    {
        "content": "<p>To obtain the repeated root we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo>=</mo><msub><mi mathvariant=\"normal\">Ψ</mi><mi>n</mi></msub><msub><mo>∏</mo><mrow><mi>i</mi><mi mathvariant=\"normal\">∣</mi><mi>n</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow></msub><msub><mi mathvariant=\"normal\">Ψ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X^n-1 = \\Psi_n \\prod_{i | n, i &lt; n}\\Psi_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.22471em;vertical-align:-0.47471em;\"></span><span class=\"mord\"><span class=\"mord\">Ψ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22528999999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.47471em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">Ψ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X^m-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> appears in the second product.</p>",
        "id": 261054276,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636578143
    },
    {
        "content": "<p>Even better: we prove first of all that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-th root of unity iff it is the root of some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Ψ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Psi_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Ψ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi mathvariant=\"normal\">∣</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i|n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">n</span></span></span></span> (this is trivial since we have the product formula). Then it's clear that we obtain a double root.</p>",
        "id": 261054526,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636578253
    },
    {
        "content": "<p>Ooh, I was looking at the product formula for cyclotomic', which requires a primitive root to be there. Woop! That's good news :)  ill try work on this soon</p>",
        "id": 261054833,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636578410
    },
    {
        "content": "<p>(also <a href=\"https://github.com/leanprover-community/mathlib/issues/9779\">#9779</a> ever relevant...)</p>",
        "id": 261054856,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636578421
    },
    {
        "content": "<p><code>cyclotomic'</code> is just implementation, it should never be used unless something is missing in the API for cyclotomic. But then one should add it :)</p>",
        "id": 261055019,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636578507
    },
    {
        "content": "<p>Ah yes, if we now squarefreeness over any ring even better! For fields it's already there</p>",
        "id": 261055210,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636578605
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.separable.squarefree\">docs#polynomial.separable.squarefree</a> is over a field, so one has to generalize this too</p>",
        "id": 261055306,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636578664
    },
    {
        "content": "<p>I will not have time tomorrow, but I can write all the details on Friday.</p>",
        "id": 261055765,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636578911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Did you make any progress on the roots of cyclotomic polynomials?</p>",
        "id": 261227993,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636708700
    },
    {
        "content": "<p>I see you did :)</p>",
        "id": 261228100,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636708774
    },
    {
        "content": "<p>It's now done!! :) Proof could use with a bit of neatening up but I will do that when I'm not on a potato laptop ;b</p>",
        "id": 261238999,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636715934
    },
    {
        "content": "<p>Very nice! The only place you uses a field rather than a domain is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.separable.squarefree\">docs#polynomial.separable.squarefree</a> right?</p>",
        "id": 261239572,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636716349
    },
    {
        "content": "<p>Yes! And that's actually just too strong of a requirement, too:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.separable</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiplicity_le_one_of_separable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hsep</span> <span class=\"o\">:</span> <span class=\"n\">separable</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span> <span class=\"n\">q</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_unit_of_self_mul_dvd_separable</span> <span class=\"n\">hsep</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">multiplicity.pow_dvd_of_le_multiplicity</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_bit0</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">enat.add_one_le_of_lt</span> <span class=\"n\">hq</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">separable.squarefree</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hsep</span> <span class=\"o\">:</span> <span class=\"n\">separable</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">squarefree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">multiplicity.squarefree_iff_multiplicity_le_one</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hunit</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"n\">hunit</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">multiplicity_le_one_of_separable</span> <span class=\"n\">hunit</span> <span class=\"n\">hsep</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 261240829,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636717188
    },
    {
        "content": "<p>oh, maybe it's a bit more dependent on it thinking about it, but I think it just takes replacing <code>↑n ≠ 0</code> to <code>is_unit n</code>, possibly</p>",
        "id": 261240956,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636717253
    },
    {
        "content": "<p>We don't want <code>is_unit n</code> (this is false in the ring of integers), <code>↑n ≠ 0</code> is perfect I think.</p>",
        "id": 261241209,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636717456
    },
    {
        "content": "<p>The main application for us will be the ring of integers in some cyclotomic field</p>",
        "id": 261241226,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636717478
    },
    {
        "content": "<p>Feel free to add your generalization of <code>separable.squarefree</code> to the project!</p>",
        "id": 261241650,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636717812
    },
    {
        "content": "<p>the state of the art so far is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.separable_X_pow_sub_C_unit\">docs#polynomial.separable_X_pow_sub_C_unit</a>, I've not given much thought to the separability/squarefreeness of X^n-1 in general rings; that's the main issue</p>",
        "id": 261241703,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636717861
    },
    {
        "content": "<p>it's just the same as the usual code with the typeclasses updated ^^ I will refactor mathlib soon instead</p>",
        "id": 261241721,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636717877
    },
    {
        "content": "<p>Ah, in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.separable_X_pow_sub_C_unit\">docs#polynomial.separable_X_pow_sub_C_unit</a> there is <code>hn : is_unit ↑n</code>...</p>",
        "id": 261242147,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636718192
    },
    {
        "content": "<p>So we really need fields</p>",
        "id": 261242204,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636718270
    },
    {
        "content": "<p>We can probably \"cheat\" using the field of fraction: a root of the cyclotomic polynomial over a domain is a primitive root when considered in in the field of fraction, so it is a primitive root even in the domain.</p>",
        "id": 261242305,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636718358
    },
    {
        "content": "<p>oh... so it turns out we reinvented the wheel! (EDIT:) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.order_of_root_cyclotomic_eq\">docs#polynomial.order_of_root_cyclotomic_eq</a>. The proof looks pretty identical to my proof, too</p>",
        "id": 261423949,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636905166
    },
    {
        "content": "<p>(yes, it's currently only for zmod, but I assume that's just what was needed)</p>",
        "id": 261423963,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636905192
    },
    {
        "content": "<p>Oh, and I even wrote that proof!</p>",
        "id": 261433208,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636916744
    },
    {
        "content": "<p>I'm having a jaunt at all this right now, and I'm just considering how to structure the <code>basic.lean</code>. I think for <code>splitting_field_cyclotomic</code> and most things after it it'll be nice to have the defn of <code>zeta'</code>, which is currently in <code>cyclotomic_units</code> (we now get that it's a primitive root for \"free\"). however, this proof is limited (currently) to fields; is the correct approach to use the localization trick to generalize this result to <code>comm_ring</code>s, and then use that there? or just sorry that proof for now, copy everything in, and try work on everything else? it does move it a lot earlier in the import hierarchy</p>",
        "id": 261447197,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636936662
    },
    {
        "content": "<p>I think it's false for a general ring, but we want it for a domain. The proof using the field of fraction should be easy, right?</p>",
        "id": 261473212,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636967649
    },
    {
        "content": "<p>But I agree that <code>zeta'</code> should be available as soon as possible</p>",
        "id": 261474674,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636968616
    },
    {
        "content": "<p>OK, my today has been taken up with the separable generalization, which is now finished: <a href=\"https://github.com/leanprover-community/mathlib/issues/10337\">#10337</a>. will be back to flt in a bit :)</p>",
        "id": 261543093,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637002843
    },
    {
        "content": "<p>I think the definition of <code>is_cyclotomic_extension</code> will not change anymore (at least not in the near future), so it's probably a good idea to finish the basic API and open a PR. I will start working on the sorry in <code>number_theory/cyclotomic/basic</code>, but if you think you have basic results/definition somewhere else (like for example the definition of <code>zeta'</code>) don't hesitate to move them to <code>basic</code>.</p>",
        "id": 261793607,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637160378
    },
    {
        "content": "<p>Awesome. I'm super busy this week, but I should have lots more time for this next week, so I can help with these sorrys (if any remain!)</p>",
        "id": 261857712,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637186897
    },
    {
        "content": "<p>i've finally had some time to look at some things, but I think this is the sort of thing where I'd want people's inputs. Firstly, I think <code>n : R ≠ 0</code> will be pretty important for the basic cyclotomic theory, so I propose carrying around in a <code>fact</code>. Everyone accept this as ok?</p>",
        "id": 262012597,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637282003
    },
    {
        "content": "<p>Secondly, there's a TC timeout in <code>cyclotomic_units:182</code> - do we worry about it now? Or until we unsorry instances? I don't know how to debug such things</p>",
        "id": 262012671,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637282046
    },
    {
        "content": "<p>Using <code>:= by convert ...</code> instead of <code>:= ...</code> seems to fix the timeout for me. I didn't investigate why.</p>",
        "id": 262038717,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637310183
    },
    {
        "content": "<p>What do you think of the <code>fact</code> idea?</p>",
        "id": 262046227,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637315509
    },
    {
        "content": "<p>My student Ashvni has been working with p-adic stuff and told me yesterday that <code>fact p.prime</code> drove her nuts :-) In the definition of the p-adic numbers the decision was made to make p the parameter rather than hp : prime p, so what we write in lean corresponds to what we write in papers, but it also makes things quite inconvenient in practice apparently. On the other hand we used facts quite a bit in the perfectoid project. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> did facts drive you nuts? Don't forget the alternative, which is just to carry hn : n ≠ 0 around by hand</p>",
        "id": 262046995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637315994
    },
    {
        "content": "<p>We didn't use <code>fact</code> in the perfectoid project. Do you mean LTE?</p>",
        "id": 262047490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637316246
    },
    {
        "content": "<p>I found the <code>fact</code>s quite convenient. Certainly <code>fact p.prime</code> has been quite pleasant to use for me.</p>",
        "id": 262047520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637316275
    },
    {
        "content": "<p>What exactly are the problems that Ashvni is hitting?</p>",
        "id": 262047587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637316313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  I don't have any strong opinion about your <code>fact</code> idea, but it is surely true that <code>n : R ≠ 0</code> is needed in a lot of places. In my opinion we should try to keep things as modular as possible, so we should have a subfolder of the (nonexistent) <code>number_theory/cyclotomic</code> folder called <code>separable</code> (or whatever) where we put all the results that need <code>n : R ≠ 0</code>.  We should try to see if having the assumption as <code>fact</code> really reduces what we have to write.</p>",
        "id": 262050199,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637318105
    },
    {
        "content": "<p>Here is one reason why <code>fact</code> is sometimes a powerful tool: before we used <code>fact</code> we had two separate types <code>zmod</code> and <code>zmodp</code>. The latter was only defined for primes, and it carried a field instance. But with <code>fact</code> we could unify these, and now <code>zmod n</code> has a ring instance, but in the presence of <code>fact p.prime</code> then <code>zmod p</code> will also have a field instance.</p>",
        "id": 262050432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637318273
    },
    {
        "content": "<p>Yes, this is a very important feature of fact, I think the annoyance comes when you have to things that are based on fact and things that just use a regular hypothesis. You have to start writing <code>out</code> everywhere, not so bad, but also take care that tactics can see the fact. For instance library_searhc</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span> <span class=\"c1\">--works</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262064644,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637327831
    },
    {
        "content": "<p>I'm not sure if the intended use of <code>fact</code> is to make the hypotheses regular parameters and do <code>haveI : fact p.prime := hp</code> when you know you are going to need it, or to make the hypotheses facts and use <code>have hp : p.prime := fact.out</code> when you want the actual thing</p>",
        "id": 262064928,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637327989
    },
    {
        "content": "<p>My rule of thumb is: if you would start the LaTeX version of the file with \"For the rest of this paper, we fix a prime number <code>p</code>\", then you use <code>fact</code>. But if you are working with various prime numbers, or various types of prime numbers, then regular parameters is probably better.</p>",
        "id": 262065699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637328375
    },
    {
        "content": "<p>Yeah for the library as it is right now you really do need both, so you have to convert between the two at some point</p>",
        "id": 262065774,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637328428
    },
    {
        "content": "<p>Note that you can also assume <code>[hp : fact p.prime]</code>. Then <code>hp.1</code> is a term of type <code>p.prime</code>. Which works quite smoothly, I think.</p>",
        "id": 262065913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637328513
    },
    {
        "content": "<p>But in my example you still have to either know the lemma library searched for, or ahead of time add the line <code>have := hp.1</code> to your context for every fact</p>",
        "id": 262065998,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637328566
    },
    {
        "content": "<p>Or fix <code>library_search</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 262066039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637328590
    },
    {
        "content": "<p>You have to make a lot of other tactics  fact aware too though!</p>",
        "id": 262066421,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637328774
    },
    {
        "content": "<p>Like assumption for instance</p>",
        "id": 262066432,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637328783
    },
    {
        "content": "<p>Ooh, sure, if you want interop with all tactics.</p>",
        "id": 262066756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637328970
    },
    {
        "content": "<p>I was thinking of the discussion that extracts proof fields out of structures, before running a tactic such as <code>library_search</code>.</p>",
        "id": 262066821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637329016
    },
    {
        "content": "<p>Well I would just love all the benefits of fact without having to modify my proofs and habits, at least thats what gets to me about it</p>",
        "id": 262066833,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637329022
    },
    {
        "content": "<p>Yeah it would be nice to have a \"unfact\" tactic, but its still unfortunate to run it at all</p>",
        "id": 262066868,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637329046
    },
    {
        "content": "<p>I will not have time to work on this during the weekend, but if someone wants to contribute I am stuck at (this is in <code>number_theory/cyclotomic/basic</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">union_left</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"n\">T</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_cyclotomic_extension</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">subset_adjoin</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aeval_def</span><span class=\"o\">,</span> <span class=\"n\">eval₂_eq_eval_map</span><span class=\"o\">,</span> <span class=\"n\">map_cyclotomic</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">is_root.def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">eq_cyclotomic_iff</span> <span class=\"n\">n.pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">rfl</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">root_mul_right_of_is_root</span> <span class=\"n\">_</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subalgebra.coe_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">aeval_subalgebra_coe</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I didn't tried hard, but working with subtypes is annoying! One this is done (or maybe a better reformulation?) the ending the proof of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finite</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>should be easy.</p>",
        "id": 262172924,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637399446
    },
    {
        "content": "<p>this is such a pesky goal...</p>",
        "id": 262196148,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637431221
    },
    {
        "content": "<p>I agree... But I don't see a better formulation of the result, that is meaningful</p>",
        "id": 262199953,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637436065
    },
    {
        "content": "<p>You should be able to say \"cases b with b hb\" to destruct the subtype</p>",
        "id": 262210954,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637451208
    },
    {
        "content": "<p>I have to sleep now, but that seems to help, thank you!</p>",
        "id": 262213981,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637456135
    },
    {
        "content": "<p>Is someone working on the last sorrys in <code>number_theory/cyclotomic/basic</code>? If not I will try to work on them tomorrow.<br>\nOnce these sorrys are done I think we can PR the definition.</p>",
        "id": 263309380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638373324
    },
    {
        "content": "<p>So I had said I was going to help with these, but I've had less time than I thought, so haven't been able to look at this :(</p>",
        "id": 263309554,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1638373407
    },
    {
        "content": "<p>Sorry!</p>",
        "id": 263309580,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1638373416
    },
    {
        "content": "<p>No problem!</p>",
        "id": 263310067,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638373592
    },
    {
        "content": "<p>Yes, I was going to work on them,but I got distracted by the cyclotomic positive proof and degree applications... Hopefully I'll give them a look tonight!</p>",
        "id": 263310484,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638373780
    },
    {
        "content": "<p>I've proved four sorrys. Now all the basic facts about <code>is_cyclotomic_extension</code> are sorry free. Any ideas on something basic missing? Otherwise would just go for a PR and see what people think about this.</p>",
        "id": 263458253,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638460551
    },
    {
        "content": "<p>Go for it :)  I guess we'll find out later on what other things we need (if any).</p>",
        "id": 263488318,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1638473098
    },
    {
        "content": "<p>I just uploaded a proof that <code>cyclotomic_field n K</code> is a cyclotomic extension (which is pretty much previous work refactored a bit). this approach currently doesn't scale to <code>cyclotomic_ring</code>, and I don't see an obvious workaround; I'm not too versed in <code>no_smul_divisors</code> and such like, but what we need is that the <code>algebra_map K (cyclotomic_ring n K)</code> is injective (which morally it is as it's morally the inclusion map), but I don't see an obvious way to prove that from what we have about algebras and such, e.g. by sidetracking through the fraction ring. If I don't come up with a better solution by tomorrow, I'm just going to sprinkle some <code>char_zero</code> and work on actual FLT instead of side-tracking myself about char-p cyclotomic extensions of domains...</p>",
        "id": 264248750,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639016566
    },
    {
        "content": "<p>Great work! I am still quite busy this week, but I will try to have a look. I am not completely sure we will need that <code>cyclotomic_ring</code> is a cyclotomic extension, maybe knowing that its field of fraction is <code>cyclotomic_field</code> will be enough.</p>",
        "id": 264276689,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639042989
    },
    {
        "content": "<p>I've just bumped again, if anyone has time please check I've not moved things wrongly.</p>",
        "id": 264651723,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639354305
    },
    {
        "content": "<p>I also tried to bump today, and made basically the same changes as you so mostly LGTM.<br>\nHowever one difference is I came to the conclusion that we should just assume</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>as IMO it is way too unwieldy to keep this fact about nested coes floating around, what do you think? For this project I don't think we will need this theory for positive characteristic (though it might be handy), but if we do need it I think we should worry about the extension to that case then rather than having this extra TC now.</p>",
        "id": 264652271,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639355116
    },
    {
        "content": "<p>I think the instance is still true if the characteristic divides n right? its just the proof is very annoying</p>",
        "id": 264652280,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639355144
    },
    {
        "content": "<p>I don't know the proof if the fact isn't true; it's definitely a completely different route to get there, though (I thought I found some counterexamples in Sage a couple days ago, but it was just a off-by-one error instead of anything real). But yea, I definitely think we should have that instance and forget about non-char zero. I added a <code>fact</code> that implies it, but maybe it's better to make my current instance a <code>def</code> and make a <code>char_zero</code> instance for now</p>",
        "id": 264652723,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639355835
    },
    {
        "content": "<p>Which result are you talking about?</p>",
        "id": 264672675,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639382092
    },
    {
        "content": "<p>In any case I am pretty sure that for this project <code>char_zero</code> is enough.</p>",
        "id": 264672687,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639382112
    },
    {
        "content": "<p>Whether <code>cyclotomic_field</code> is actually a cyclotomic extension in the case where <code>is_root_cyclotomic_iff</code> doesn't apply</p>",
        "id": 264685083,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639390413
    },
    {
        "content": "<p>I think this is true because if <code>F</code> is a field of characteristic <code>p</code> and <code>n = m * p ^ s</code>, with <code>p</code> that does not divide <code>m</code>, then <code>cyclotomic n F = (cyclotomic m F) ^(p^s - p^(s-1))</code>, but we don't have this result yet</p>",
        "id": 264691004,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639393676
    },
    {
        "content": "<p>Sorry for my long absence, I was super busy lately. I am preparing a PR with a definition of cyclotomic field, so this will be fixed once and for all.</p>",
        "id": 265174341,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639669389
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10849\">#10849</a></p>",
        "id": 265205460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639682350
    },
    {
        "content": "<p>sorry for always posting here when I make minimal progress; we're close to finishing off the proof of <code>cyclotomic_ring</code> being a cyclotomic extension; I'm once again stuck on proving things are non-zero... if people want to take a look, that's there, else  hopefully I'll wake up with inspiration into how to turn <code>algebra_map K (cyclotomic_ring n K)</code> being injective into <code>subalgebra.inclusion \\bot (cyclotomic_ring n K)</code> being injective (which is already in the library). Considering I always seem to work on the boring stuff lately, is there any other part of the proof people would like me to help out with instead? I'm happy to help anywhere^^</p>",
        "id": 265649954,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640065737
    },
    {
        "content": "<p>Having a look now</p>",
        "id": 265660238,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640076225
    },
    {
        "content": "<p>This is indeed quite annoying, but I will do it.</p>",
        "id": 265666772,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640080611
    },
    {
        "content": "<p>If you are looking for something slightly more interesting, there is <code>zeta'.embeddings_equiv_primitive_roots</code> in <code>src/number_theory/cyclotomic/cyclotomic_units.lean</code>.</p>",
        "id": 265666943,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640080698
    },
    {
        "content": "<p>This is false in general, but true over <code>ℚ</code>, that is enough for us</p>",
        "id": 265666964,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640080716
    },
    {
        "content": "<p>It probable makes sense to think a little bit to a more general version</p>",
        "id": 265666978,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640080732
    },
    {
        "content": "<p>Injectivity of <code>algebra_map A (cyclotomic_ring n A K)</code> is done.</p>",
        "id": 265681489,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640091130
    },
    {
        "content": "<p>Now the only <code>sorry</code> left in <code>src/ready_for_mathlib/cyclotomic/basic.lean</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am not sure we need this now, so I made it a lemma, just to bu sure it's not used automatically somewhere</p>",
        "id": 265685407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640093878
    },
    {
        "content": "<p>Ops, we already use it... so let me prove the instance</p>",
        "id": 265685719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640094041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  I see we are working on the same proof... no problem of course.<br>\nHave you any idea for <code>surj</code>?</p>",
        "id": 265696455,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640100042
    },
    {
        "content": "<p>It seems the only nontrivial statement for <code>is_fraction_ring</code>...</p>",
        "id": 265696521,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640100062
    },
    {
        "content": "<p>Ops, you finished <code>eq_iff_exists</code>, and your proof is better than mine :)</p>",
        "id": 265696689,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640100116
    },
    {
        "content": "<p>I'm currently thinking of getting the power basis for <code>cyclotomic_field</code>; hopefully that then just lets us use the existing fraction_ring instance to do everything else</p>",
        "id": 265697187,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640100291
    },
    {
        "content": "<p>I think it's in <code>ring_theory.adjoin.basis</code> or something</p>",
        "id": 265697206,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640100303
    },
    {
        "content": "<p>Using that <code>cyclotomic_field n K</code> is <code>adjoin K ...</code> I think we can do it with <code>algebra.adjoin_induction</code> without too much trouble</p>",
        "id": 265698564,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640100993
    },
    {
        "content": "<p>Currently we know this if <code>(((n : ℕ) : A) ≠ 0</code>, but sooner or later we will remove this</p>",
        "id": 265698613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640101020
    },
    {
        "content": "<p>The proof of the cyclotomic power thing doesn't seem too bad, just mildly irritating, too. I think Alex's homogenization+factorization stuff will come in handy there</p>",
        "id": 265699614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640101524
    },
    {
        "content": "<p>What's the cyclotomic power thing?</p>",
        "id": 265699773,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640101595
    },
    {
        "content": "<p>ɸ_{np^k}(x) = ɸₙ(x^p^k)/ɸₙ(x^p^(k-1)) modulo off by one errors</p>",
        "id": 265700354,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640101894
    },
    {
        "content": "<p>Nonsense</p>",
        "id": 265700375,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640101909
    },
    {
        "content": "<p>My math proof consists of going to <code>C</code>, where everything splits, and comparing the roots (with multiplicity)</p>",
        "id": 265700719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640102045
    },
    {
        "content": "<p>That does seem annoying, well I hope it helps but it still seems tricky yes</p>",
        "id": 265701023,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640102189
    },
    {
        "content": "<p>In any case we don't need it</p>",
        "id": 265701683,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640102470
    },
    {
        "content": "<p>I thought it was helpful to get rid of some of the char_zero assumptions (or <code>p \\ne 0 </code> in <code>K</code>)?</p>",
        "id": 265701924,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640102586
    },
    {
        "content": "<p>I don't see where we need it, but of course it would be nice to do everything in full generality.</p>\n<p>Having this assumption seems to me a good compromise since I will be very easy to remove it when someone will prove the full result</p>",
        "id": 265702703,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640102937
    },
    {
        "content": "<p><code>src/ready_for_mathlib/cyclotomic/basic.lean</code> is finally <code>sorry</code> free.</p>",
        "id": 265713577,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640108403
    },
    {
        "content": "<p>The proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is not that nice, but at least it works</p>",
        "id": 265713816,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640108533
    },
    {
        "content": "<p>I've PRed more basic properties of cyclotomic extensions in <a href=\"https://github.com/leanprover-community/mathlib/pull/11264\">#11264</a>.</p>",
        "id": 266957001,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641400342
    },
    {
        "content": "<p>by the way, the <code>algebra_rat</code> diamond came up again when doing the galois proof. was fairly easy to get round when I realised it happened. I'm now going to re-fix <code>ne_zero</code> and then get some sleep</p>",
        "id": 270133411,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643676994
    }
]