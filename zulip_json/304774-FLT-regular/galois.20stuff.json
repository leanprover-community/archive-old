[
    {
        "content": "<p>over the last two days i've proved that the galois group of a cyclotomic extension is <code>≤ (ℤ/nℤ)ˣ</code>. Hopefully soon, I'm going to finish the proof for ℚ being a bijection too -- I'm following <a href=\"https://kconrad.math.uconn.edu/blurbs/galoistheory/cyclotomic.pdf\">this</a> proof, and realised I don't know how conjugate elements work in Mathlib</p>",
        "id": 269958263,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643577675
    },
    {
        "content": "<p>what is the \"correct\" Lean way to get that if we have <code>n-1</code> conjugates then the galois group is full? (and therefore the embedding I have is actually a bijection)</p>",
        "id": 269958333,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643577755
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/polynomial_galois_group.html#polynomial.gal.card_of_separable\">https://leanprover-community.github.io/mathlib_docs/field_theory/polynomial_galois_group.html#polynomial.gal.card_of_separable</a> is probably useful.</p>",
        "id": 269959009,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643578480
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/YP5ZTJp5D83A_s-DMX6RgH0k/image.png\">image.png</a> the computation of the galois group of ℚ[ζₙ[ is done! it's on the <code>ne_zero</code> branch, though, as the main branch is currently waiting for some PRs to make it usable again.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YP5ZTJp5D83A_s-DMX6RgH0k/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YP5ZTJp5D83A_s-DMX6RgH0k/image.png\"></a></div>",
        "id": 270312331,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643761279
    },
    {
        "content": "<p>there's also weaker results showing that for general cyclotomic extensions, it's injective, so it basically covers things in some decent generality</p>",
        "id": 270312440,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643761335
    },
    {
        "content": "<p>This is great! Is this the mathlib way of stating the result? I was looking for something like <code>galois_group</code>, but I don't see it.</p>",
        "id": 270356804,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643794725
    },
    {
        "content": "<p>Galois groups are just <code>L \\equiv+*[K] L</code> it seems to me</p>",
        "id": 270361016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643796875
    },
    {
        "content": "<p>yeah, there's also <code>polynomial.gal</code> but that's for polynomials. I just pushed those results, too, because they're pretty much  defeq and follow from our <code>is_splitting_field</code> instances.</p>",
        "id": 270362051,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643797405
    },
    {
        "content": "<p>Instead of working over <code>Q</code>, can you generalize to any field <code>K</code> such that <code>cyclotomic n K</code> is irreducible? I guess the proof is the same.</p>",
        "id": 270366279,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643799664
    },
    {
        "content": "<p>(this can really happen for finite fields, so it is worth to have it)</p>",
        "id": 270366358,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643799713
    },
    {
        "content": "<p>done! also stops me from dealing with the diamond ^^</p>",
        "id": 270418642,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643821120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> What was the solution for the <code>Q</code>-alg diamond? I always forget how to get rid of it...</p>",
        "id": 271160868,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644340897
    },
    {
        "content": "<p>I think last time one of the solutions was to generalize away from Q <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span><br>\nMaybe <code>local attribute [-instance] algebra_rat</code> is ok?</p>",
        "id": 271161239,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644341036
    },
    {
        "content": "<p>This was my first try, not enough</p>",
        "id": 271161386,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644341084
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n       <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)</span>\n    <span class=\"n\">int.comm_ring</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring.comm_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n       <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring.algebra_base</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n       <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n       <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)</span>\n    <span class=\"n\">int.comm_ring</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring.comm_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n       <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n          <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n             <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring.comm_ring</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">int.comm_ring</span> <span class=\"n\">rat.field</span> <span class=\"n\">_</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring</span> <span class=\"n\">ℚ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">rat.normed_field</span><span class=\"o\">))))</span>\n             <span class=\"n\">rat.is_fraction_ring</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 271161425,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644341099
    },
    {
        "content": "<p><code>local attribute [-instance] algebra_int</code> too?</p>",
        "id": 271161610,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644341162
    },
    {
        "content": "<p>Convert + there's a lemma for Q algebra being a subsingleton that nerds to become an instance locally</p>",
        "id": 271161626,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644341164
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">convert</span> <span class=\"n\">cyclotomic_ring.is_cyclotomic_extension</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subsingleton.elim</span> <span class=\"o\">(</span><span class=\"n\">algebra_int</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>works, thanks!</p>",
        "id": 271162170,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644341384
    },
    {
        "content": "<p>BTW it's very nice that working with general ring such that the cyclotomic polynomial is irreducible makes all these problem disappear.</p>\n<p>At the end we will need to specialize to <code>Z</code>, but at least we can postpone this problem as much as possible.</p>",
        "id": 271162743,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644341592
    }
]