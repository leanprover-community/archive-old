[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  noted that Lean didn't include the assumptions <code>[fintype S] [is_cyclotomic_extension S K L]</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so we were working with the assumption that any fields extension is finite <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> <br>\nThis was an instance so it was really dangerous, but now everything seems OK. By the way, the linter says it is a dangerous instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `dangerous_instance` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> DANGEROUS INSTANCES FOUND.</span>\n<span class=\"cm\">These instances are recursive, and create a new type-class problem which will have metavariables.</span>\n<span class=\"cm\">Possible solution: remove the instance attribute or make it a local instance instead.</span>\n\n<span class=\"cm\">Currently this linter does not check whether the metavariables only occur in arguments marked with `out_param`, in which case this linter gives a false positive. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">is_cyclotomic_extension.finite_dimensional</span> <span class=\"c\">/-</span><span class=\"cm\"> The following arguments become metavariables. argument 1: (S : set ℕ+) -/</span>\n</code></pre></div>\n<p>I am not sure I understand what this means, so I made it a lemma instead. Note that this means you may sometimes need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">is_cyclotomic_extension.finite_dimensional</span>\n</code></pre></div>\n<p>(this will give also separability).</p>",
        "id": 261779960,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637153797
    },
    {
        "content": "<p>It means that in general Lean can not guess what <code>S</code> should be, to apply this instance, so it can go crazy.</p>",
        "id": 261781428,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1637154614
    },
    {
        "content": "<p>Would it make sense for <code>is_cyclotomic_extension S K L</code> to have <code>S</code> as an <code>out_param</code> (or even a field of <code>is_cyclotomic</code>)? That is, given <code>K</code> and <code>L</code>, is there a canonical choice of <code>S</code>?</p>",
        "id": 261783598,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637155827
    },
    {
        "content": "<p>Probably not, since <code>L</code> might have more roots than assumed by your lemma.</p>",
        "id": 261783826,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637155949
    },
    {
        "content": "<p>I don't think so: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>6</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_6)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is both a third and a sixth cyclotomic extension</p>",
        "id": 261783829,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637155951
    },
    {
        "content": "<p>Right, so you probably don't want to write <code>[is_cyclotomic_extension K L] (h : n ∈ is_cyclotomic_extension.root_degrees)</code> instead of <code>[is_cyclotomic_extension {n} K L]</code>.</p>",
        "id": 261784119,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637156128
    },
    {
        "content": "<p>Where <code>root_degrees</code> is the set of all <code>n</code> such that <code>X^n - 1</code> has a root in <code>L</code></p>",
        "id": 261784155,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637156152
    },
    {
        "content": "<p>No, it'd be even more complicated since <code>is_cyclotomic_extension {n} K L</code> also asserts that <code>L = K(ζₙ)</code>.</p>",
        "id": 261784725,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637156425
    },
    {
        "content": "<p>Yes, <code>is_cyclotomic_extension S K L</code> means that <code>L</code> is the <code>K</code>-extension given by all the <code>n</code>-roots of unity, for all <code>n</code> in <code>S</code>. But given <code>L</code> there is no way to recover <code>S</code> (that is not unique).</p>",
        "id": 261785040,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637156580
    },
    {
        "content": "<p>Hmm, if are there no cases in practice where <code>S</code> has to be infinite then we could make <code>[finite_dimensional K L]</code> a parameter to <code>is_cyclotomic_extension</code>. But there probably are :P</p>",
        "id": 261785240,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637156677
    },
    {
        "content": "<p>So you'd get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 261785296,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637156711
    },
    {
        "content": "<p>In this project there is no need for infinite <code>S</code>, (even singletons are enough) but if we want the most general definition (to be used someday in mathlib) then infinite <code>S</code> will be useful, for example the maximal abelian extension of <code>Q</code> will be cyclotomic, and that's nice.</p>",
        "id": 261785592,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637156877
    },
    {
        "content": "<p>Especially <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>  will be not so happy if a cyclotomic extension has to be finite</p>",
        "id": 261785790,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637156962
    },
    {
        "content": "<p>Ok, I've run out of tricks to avoid making <code>is_cyclotomic_extension.finite_dimensional</code> a lemma and <code>haveI</code>'ing it back into the assumptions when needed.</p>",
        "id": 261785827,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637156998
    },
    {
        "content": "<p>Indeed, I won't be  happy, especially if this will land in <code>mathlib</code>: the cyclotomic extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><msup><mi>p</mi><mi mathvariant=\"normal\">∞</mi></msup></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_{p^\\infty})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> would not be a cyclotomic one...</p>",
        "id": 261786004,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637157082
    },
    {
        "content": "<p>We could just name it finite cyclotomic instead then? I'm guessing there will be lots of things which are only true for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf Q(\\zeta _n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbf\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>'s and not for the infinite extension, so we will need a distinction at some point?</p>",
        "id": 261787874,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637157922
    },
    {
        "content": "<p>So we would add a typeclass of the form <code>[finite_cyclotomic_extension (s : finset ℕ) K L]</code> to abbreviate <code>[cyclotomic_extension (s : set ℕ) K L] (h : s.is_finite)</code>?</p>",
        "id": 261788411,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637158178
    },
    {
        "content": "<p>We can have a class <code>is_cyclotomic_extension_finite</code> or something similar: it is just <code>is_cyclotomic_extension</code> plus <code>finite_dimensional</code></p>",
        "id": 261788538,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637158220
    },
    {
        "content": "<p>The issue is that <code>is_cyclotomic_extension_finite</code> would need <code>finite_dimensional</code> as a parameter anyway, so it wouldn't help abbreviate much.</p>",
        "id": 261788707,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637158305
    },
    {
        "content": "<p>(Unless of course we add a feature to Lean that expands <code>[[is_cyclotomic_extension_finite s K L]]</code> to something like <code>[field K] [field L] [algebra K L] [finite_dimensional K L] [fintype s] [is_cyclotomic_extension s K L]</code>.)</p>",
        "id": 261788992,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637158417
    }
]