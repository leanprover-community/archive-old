[
    {
        "content": "<p>Can you announce here when you bump mathlib? i.e. when you do <code>leanproject up</code>. It's better to say it because if I do <code>git pull</code> and I don't realize mathlib has changed I get the orange bar if I don't fetch the oleans.</p>",
        "id": 259355566,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635409813
    },
    {
        "content": "<p>Sorry for any confusion, I also added the auto-bumper script, so seeing as the code now compiles it will bump itself every day without anybody manually intervening. You should always be able to see from the git pull output (if you are on command line) that the toml file was changed</p>",
        "id": 259356557,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635410354
    },
    {
        "content": "<p>Ah, I see! But what happens if the code doesn't compile with the new mathlib?</p>",
        "id": 259356722,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635410440
    },
    {
        "content": "<p>In LTE we see this all the time, it happens that making the bump is quite a lot of work.</p>",
        "id": 259356764,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635410469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Then the bot opens an issue, and waits until you do a manual bump.</p>",
        "id": 259358587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635411520
    },
    {
        "content": "<p>Wow, very nice!!</p>",
        "id": 259358604,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635411534
    },
    {
        "content": "<p>After that it will pick up auto-bumping daily, until the bump breaks again.</p>",
        "id": 259358612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635411538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Do you also know how to set up CI?</p>",
        "id": 259360135,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635412313
    },
    {
        "content": "<p>I'll have a go at it today <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span>!</p>",
        "id": 259360225,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635412363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bump/near/259355566\">said</a>:</p>\n<blockquote>\n<p>Can you announce here when you bump mathlib? i.e. when you do <code>leanproject up</code>. It's better to say it because if I do <code>git pull</code> and I don't realize mathlib has changed I get the orange bar if I don't fetch the oleans.</p>\n</blockquote>\n<p>Sounds like it's time for you to learn about <code>leanproject pull</code>.</p>",
        "id": 259374066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635420660
    },
    {
        "content": "<p>Ok we now have CI (thanks to @bentoner, who did this for lean-liquid this wasn't too hard), olean caches can't be dowloaded yet, probably that needs some permissions setting up on the azure side, but seeing as we are still in the beginning of the project hopefully this isnt an issue for anyone already!</p>",
        "id": 259390400,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635428870
    },
    {
        "content": "<p>Thank you!! I agree we don't need olean caches for the moment.</p>",
        "id": 259390889,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635429076
    },
    {
        "content": "<p>I take it mathlib bump is just the same as doing <code>leanproject up</code>. In which case, I just did one and <code>class_group.fintype_of_cyclotomic_ring</code> is working now :)</p>",
        "id": 259443199,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635450873
    },
    {
        "content": "<p>It was working even before, I disabled the instance this morning. See my message in the topic general notation</p>",
        "id": 259444132,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635451295
    },
    {
        "content": "<p>Yeah sorry I didn't read it carefully enough!</p>",
        "id": 259444641,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635451539
    },
    {
        "content": "<p>I've a follow-up planned to try to fix it</p>",
        "id": 259458308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635458673
    },
    {
        "content": "<p>The github mark is finally green! Let's try to keep it like that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259510672,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635506558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bump/near/259458308\">said</a>:</p>\n<blockquote>\n<p>I've a follow-up planned to try to fix it</p>\n</blockquote>\n<p>I tried to fix it in <a href=\"https://github.com/leanprover-community/mathlib/issues/10220\">#10220</a>; but I think this diamond might be impossible to solve with the current definition of <code>splitting_field</code></p>",
        "id": 260661331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636380736
    },
    {
        "content": "<p>Don't worry! At the moment everything works for us :)</p>",
        "id": 260662317,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636381174
    },
    {
        "content": "<p>I worry only because it seems like a diamond that's impossible to solve, and we haven't seen those before</p>",
        "id": 260666290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636382983
    },
    {
        "content": "<p>Well, maybe this is just an indication that the definition of <code>splitting_field</code> is not the good one. What is the problem? (If it's not too complicated to explain.)</p>",
        "id": 260669049,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636384004
    },
    {
        "content": "<p>he put a good note on it in that commit, I am surprised this hasn't been run into before though :/</p>",
        "id": 260672124,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636385312
    },
    {
        "content": "<p>(an \"unsolvable\" diamond, that is, not this specific one)</p>",
        "id": 260672184,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636385338
    },
    {
        "content": "<p>After some (in-person!) discussion with Eric W yesterday he told me that the diamond could be solved if we refactor <code>splitting_field</code> just to be \"field spanned by roots of f in some algebraic closure of base field\", and we have algebraic closures now IIRC</p>",
        "id": 261005291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636557893
    },
    {
        "content": "<p>I think it would be fairer to say that I said that would work when you suggested it; I'd not even heard of algebraic closures until you brought it up!</p>",
        "id": 261037994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636570812
    },
    {
        "content": "<p>Does that mean the definition will depend on the choice of an algebraic closure?</p>",
        "id": 261047919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636575153
    },
    {
        "content": "<p>Also, did you check that the construction of algebraic closures doesn't use splitting fields under the hood? I wouldn't be surprised if it does.</p>",
        "id": 261047960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636575177
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_closure\">docs#algebraic_closure</a> for reference</p>",
        "id": 261049120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636575652
    },
    {
        "content": "<p>Actually I'm pretty sure that won't work as the algebra structure is built with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_algebra\">docs#ring_hom.to_algebra</a> so has the bad default nsmul fields</p>",
        "id": 261049858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636575977
    },
    {
        "content": "<p>And it looks suspiciously recursive, which is likely to run into the same problems as <code>splitting_field</code></p>",
        "id": 261049945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636576026
    },
    {
        "content": "<p>Algebraic closures are highly non-canonical. So I would be somewhat surprised if they solve defeq issues.</p>",
        "id": 261050204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636576164
    },
    {
        "content": "<p>Splitting fields are also noncanonical</p>",
        "id": 261115190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636626149
    },
    {
        "content": "<p>The construction of alg closure I know doesn't use splitting fields; conversely I've defined splitting fields via alg closure in a course before so I'm pretty sure it can be made to work</p>",
        "id": 261115300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636626228
    },
    {
        "content": "<p>I just bumped — <del>please all note the absolutely atrocious proof of <code>gcd_mul_fun</code>; does anyone see a better way to do this?</del> I'm going to go take a walk...</p>",
        "id": 261371523,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636825208
    },
    {
        "content": "<p>is it just me, or does it sometimes feel like every time the bumper bot upgrades, it doesn't work and you have to manually bump again?</p>",
        "id": 261414255,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636891925
    },
    {
        "content": "<p>What doesn't work specifically?</p>",
        "id": 261414336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636892065
    },
    {
        "content": "<p>I get a weird git sha not found error sometimes, but never bothered tracking it down</p>",
        "id": 261414341,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636892081
    },
    {
        "content": "<p>exactly that</p>",
        "id": 261414416,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636892214
    },
    {
        "content": "<p>Like if you do git pull and then <code>leanproject get-mathlib-cache</code>?</p>",
        "id": 261414499,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636892373
    },
    {
        "content": "<p>Or do you use <code>leanproject pull</code></p>",
        "id": 261414504,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636892390
    },
    {
        "content": "<p>i've never tried <code>leanproject pull</code> if i'm honest</p>",
        "id": 261414737,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636892752
    },
    {
        "content": "<p>Same, its fairly new, I also am not in the habit of using it and see the same issue as you, so I was wondering if the fix is just for us to try and be in the habit of using that. Perhaps the issue is that the <code>get-mathlib-cache</code> command doesn't do a <code>git fetch</code> for the <code>_target/deps/mathlib/</code> directory and thats why we get  a confusing message that git cant find the sha?</p>",
        "id": 261416128,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636894825
    },
    {
        "content": "<p>that would make a lot of sense! I'll try it next time</p>",
        "id": 261416275,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636895084
    },
    {
        "content": "<p>Is the issue the same as my Nov 6 message to <a class=\"stream\" data-stream-id=\"267928\" href=\"/#narrow/stream/267928-condensed-mathematics\">#condensed mathematics</a> saying that I didn't know the workflow for bumps on that project? Sorry can't link, on mobile</p>",
        "id": 261418317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636898329
    },
    {
        "content": "<p>I think so, yes (it was the same error message, anyways)</p>",
        "id": 261419464,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636899486
    },
    {
        "content": "<p>I think this might have been fixed by Patrick in an unreleased version</p>",
        "id": 261421127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636900994
    },
    {
        "content": "<p>I just hit this again, and can confirm that installing the master version of mathlib-tools fixes it.<br>\n<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> if you have time to release the new version I'm sure it will help some people out <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 262182584,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637413187
    },
    {
        "content": "<p>Hi everybody, this week I have a collaborator visiting me and I will be less active than usual, but I am confident you will continue your great work <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 262994302,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638184290
    },
    {
        "content": "<p>Today's bump has been a little more annoying than usual</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git diff c087cd0 --stat\n leanpkg.toml                                              <span class=\"p\">|</span>  <span class=\"m\">4</span> ++--\n src/number_theory/cyclotomic/absolute_value.lean          <span class=\"p\">|</span> <span class=\"m\">13</span> +++++++------\n src/number_theory/cyclotomic/cyclotomic_units.lean        <span class=\"p\">|</span>  <span class=\"m\">2</span> +-\n src/number_theory/cyclotomic/number_field_embeddings.lean <span class=\"p\">|</span>  <span class=\"m\">1</span> +\n src/ready_for_mathlib/cycl_poly.lean                      <span class=\"p\">|</span> <span class=\"m\">76</span> ----------------------------------------------------------------------------\n src/ready_for_mathlib/discriminant.lean                   <span class=\"p\">|</span> <span class=\"m\">17</span> +----------------\n src/ready_for_mathlib/ne_zero.lean                        <span class=\"p\">|</span>  <span class=\"m\">4</span> ----\n <span class=\"m\">7</span> files changed, <span class=\"m\">12</span> insertions<span class=\"o\">(</span>+<span class=\"o\">)</span>, <span class=\"m\">105</span> deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div>\n<p>but it is now done.</p>",
        "id": 267706174,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641983363
    },
    {
        "content": "<p>Good diff! You got rid of about 90 lines!</p>",
        "id": 267707416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641984246
    },
    {
        "content": "<p>Does anyone know what happened to <code>covariant_class ℝ≥0 ℝ≥0 has_mul.mul has_le.le</code>? After the last bump Lean is not finding it anymore...</p>",
        "id": 267990567,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642153041
    },
    {
        "content": "<p>I am fixing it, but I don't understand what happened, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_one_of_pow_eq_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_pow</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pow_eq_one_iff</span> <span class=\"n\">hn.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h_pow</span>\n</code></pre></div>\n<p>fails, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_one_of_pow_eq_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_pow</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pow_eq_one_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nnreal.covariant_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hn.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h_pow</span>\n</code></pre></div>\n<p>works</p>",
        "id": 267990767,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642153169
    },
    {
        "content": "<p>yes, I was confused by this too... <a href=\"/user_uploads/3121/hzl154bqQis5n5HwQQpSui1p/image.png\">image.png</a>  these are the commits in between the last two bumps, but I don't see how that changed anything</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hzl154bqQis5n5HwQQpSui1p/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hzl154bqQis5n5HwQQpSui1p/image.png\"></a></div>",
        "id": 267992526,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642154194
    },
    {
        "content": "<p>data/nnreal/basic was touched twice in both of these commits, but both of these were Yael changing very small things that aren't related to <code>covariant_mul</code>.</p>",
        "id": 267992690,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642154298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  I am randomly pinging you even if you look innocent</p>",
        "id": 267992817,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642154385
    },
    {
        "content": "<p>I think I indeed am</p>",
        "id": 267992912,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642154412
    },
    {
        "content": "<p>Same problem while bumping LTE. No idea what the problem is.</p>",
        "id": 268026886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642173495
    },
    {
        "content": "<p>The instance <code>nnreal.covariant_mul</code> is there in <code>nnreal.lean</code>.</p>",
        "id": 268026996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642173546
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_non_assoc_ring\">docs#non_unital_non_assoc_ring</a> to blame?</p>",
        "id": 268065770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642191052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Can you PR the results <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/ready_for_mathlib/cyclotomic.lean\">here</a>? Thanks!</p>",
        "id": 268119112,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642243388
    },
    {
        "content": "<p>yes, sorry, been slow on PRing!</p>",
        "id": 268125387,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642252681
    },
    {
        "content": "<p>I've just bumped, I think something about <code>mod_cast</code> has changed so things aren't working so well (cf <a href=\"#narrow/stream/113488-general/topic/norm_cast.20changes.3F\">here</a>).</p>",
        "id": 280373564,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651076355
    },
    {
        "content": "<p>I wonder if the correct way to do these sorts of things are to have stronger versions of coe, which would be like <code>fun_like</code></p>",
        "id": 280373614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651076380
    },
    {
        "content": "<p>Ouf this is annoying</p>",
        "id": 280375612,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651077231
    },
    {
        "content": "<p>Thanks for the bump</p>",
        "id": 280376162,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651077472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bump/near/280373614\">said</a>:</p>\n<blockquote>\n<p>I wonder if the correct way to do these sorts of things are to have stronger versions of coe, which would be like <code>fun_like</code></p>\n</blockquote>\n<p>This is something I have been interested in for a bit, never had the chance to work on it yet. At least, I think we should split up the <code>algebra</code> class into a \"scalar multiplication\" part and a \"canonical ring hom\" part. And we could express the \"canonical ring hom\" part by subclassing <code>has_coe</code>(<code>_t</code>).</p>",
        "id": 280469590,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651139882
    },
    {
        "content": "<p>Would such a change be compatible with / make it easier to redefine <code>algebra</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mul_assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul_comm'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(which has the advantage that we can use <code>algebra</code> to talk about non-unital and/or non-assoc algebras if we want)</p>",
        "id": 280470388,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651140326
    },
    {
        "content": "<p>Indeed, your redefinition would exactly be the first part that we split <code>algebra</code> into.</p>",
        "id": 280475073,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651143333
    },
    {
        "content": "<p>What's the advantage of that definition vs using the existing typeclasses described in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a>?</p>",
        "id": 280685081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651264599
    },
    {
        "content": "<p>Because here's one downside: using the separate typeclasses let's you relax <code>R</code> to a monoid (eg the units of your algebra)</p>",
        "id": 280685139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651264640
    },
    {
        "content": "<p>I do agree though that there's a place for a separate \"canonical ring hom\" class, which would cover <code>matrix.scalar</code> and <code>polynomial.C</code> in places where the ground ring isn't commutative</p>",
        "id": 280685319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651264712
    },
    {
        "content": "<p>I made <a href=\"#narrow/stream/113488-general/topic/.22has.20canonical.20morphism.22.20class\">a new discussion thread</a> about \"has canonical hom\" in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a></p>",
        "id": 280858224,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651488656
    }
]