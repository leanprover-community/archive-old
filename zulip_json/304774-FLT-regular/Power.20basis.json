[
    {
        "content": "<p>I've added <code>src/ready_for_mathlib/discriminant/power_basis.lean</code> that contains some statements about <code>power_basis</code> that we need. I will not have time to work on it today, but if someone wants to play with it I don't have any objections.</p>\n<p>It has the minimal assumptions to write the statements, but in such generality it is probably false, feel free to add any reasonable assumption you want (the main example is <code>A = ℤ</code>, <code>R = ℚ</code> and <code>S = cyclotomic_field p ℚ</code>).</p>",
        "id": 271686101,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644668088
    },
    {
        "content": "<p>After some days working on the LTE I am back to this. Does anyone see a quick way of constructing the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_mem_adjon</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">power_basis</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">B.gen</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">power_basis</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 272972128,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645633427
    },
    {
        "content": "<p>I assume you want <code>of_mem_adjoin.gen = x</code>?</p>",
        "id": 272972298,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645633496
    },
    {
        "content": "<p>Ahah, yes, of course :D</p>",
        "id": 272972634,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645633655
    },
    {
        "content": "<p>Otherwise I would just get away with returning <code>B</code> :)</p>",
        "id": 272972775,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645633707
    },
    {
        "content": "<p>Ok, I'll try and see if I can prove it</p>",
        "id": 272974738,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645634510
    },
    {
        "content": "<p>Isn't this basically the lemma we discussed earlier Anne? Except with the assumption slightly different</p>",
        "id": 272974830,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645634539
    },
    {
        "content": "<p>I thought we could get around it here riccardo, using the power basis for primitive roots - what do you need it for?</p>",
        "id": 272974876,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645634562
    },
    {
        "content": "<p>I was hoping to eventually prove it in the annihilating polynomial version (someone is just PRing that into mathlib right now)</p>",
        "id": 272974963,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645634601
    },
    {
        "content": "<p>I need the power basis given by <code>ζ - 1</code>...</p>",
        "id": 272975494,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645634836
    },
    {
        "content": "<p>It's nothing especially difficult, my question is only if this is more or less already done somewhere</p>",
        "id": 272975562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645634863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.algebraic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.power_basis</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">power_basis</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">power_basis</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjoin_gen_eq_top</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">power_basis</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">B.gen</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">to_submodule_eq_top</span><span class=\"o\">,</span> <span class=\"n\">_root_.eq_top_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">B.basis.span_eq</span><span class=\"o\">,</span> <span class=\"n\">submodule.span_le</span><span class=\"o\">],</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">B.basis_eq_pow</span> <span class=\"n\">i</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subalgebra.pow_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subset_adjoin</span> <span class=\"o\">(</span><span class=\"n\">set.mem_singleton</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjoin_eq_top_of_gen_mem</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">power_basis</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">B.gen</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">_root_.eq_top_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">adjoin_gen_eq_top</span> <span class=\"n\">B</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">adjoin_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The power basis given by `x` if `B.gen ∈ adjoin K {x}`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">of_mem_adjon</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">B.gen</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">power_basis</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">B.finite_dimensional</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">adjoin.power_basis</span> <span class=\"bp\">$</span>\n  <span class=\"n\">algebra.is_integral_of_finite</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">subalgebra.equiv_of_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span>\n  <span class=\"n\">adjoin_eq_top_of_gen_mem</span> <span class=\"n\">B</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">top_equiv</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_mem_adjon_gen</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">B.gen</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">B.of_mem_adjon</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gen</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">power_basis</span>\n</code></pre></div>",
        "id": 272977465,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645635618
    },
    {
        "content": "<p>That was exactly my plan too, got distracted by planning dinner :)</p>",
        "id": 272977895,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645635741
    },
    {
        "content": "<p>I find slightly annoying that I had to use both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.equiv_of_eq\">docs#subalgebra.equiv_of_eq</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.top_equiv\">docs#algebra.top_equiv</a>, but I guess this is life.</p>",
        "id": 272979108,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645636241
    }
]