[
    {
        "content": "<p>Today I worked on the theorem of Kronecker that an algebraic integer with all conjugates having absolute value one is a root of unity (3.3 in the blueprint, or lemma 1.6 in Washington's book). The file is  <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/number_theory/cyclotomic/absolute_value.lean\">https://github.com/leanprover-community/flt-regular/blob/master/src/number_theory/cyclotomic/absolute_value.lean</a> . It needs a lot of cleanup and most of the lemmas moving to mathlib (or at least to <code>to_mathlib</code>) but it is almost proved.<br>\nThere is one remaining issue that I haven't worked out the best way around yet (the two sorries in that file), we need to factor the minpoly of our integral element <code>t</code> in <code>K</code> into the product of <code>x - phi t</code> over embeddings <code>phi</code> of the field K into C, this works on the nose if <code>t</code> generates <code>K</code>, but if it lies in a smaller subfield there will be multiple embeddings for each root of the minpoly in <code>C</code>. One approach is to teach lean that <code>ℚ⟮x⟯</code> viewed as a type rather than an intermediate field is a number field which seems good, and then apply some of the lemmas to that field rather than <code>K</code> when trying to prove the result for <code>K</code>. The other would be to accept that the product of the embeddings will be a power of the minimal polynomial and factor that into the argument.<br>\nI think its most natural to try and remove the ambient number field where possible, as hopefully that will make the lemma more applicable, but maybe we should wait and see how <a href=\"https://leanprover-community.github.io/flt-regular/sect0003.html#lemma:_unit_lemma\">https://leanprover-community.github.io/flt-regular/sect0003.html#lemma:_unit_lemma</a> looks first.</p>",
        "id": 259820871,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635733170
    },
    {
        "content": "<p>Oh wow this looks really good! We might have enough there to prove the primitive element theorem as well (which I couldn't find in mathlib).</p>",
        "id": 259840439,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635757608
    },
    {
        "content": "<p>I'm happy to help clean this up, but you guys are much faster than I am, so I don't want to disturb the files you are working on. I was planning on stating some more of the <code>FLT_facts</code> results today. But if you aren't working on these files later, I can try and extract all of the embedding stuff into a separate file and see about this <code>unit_lemma</code>.</p>",
        "id": 259840678,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635757796
    },
    {
        "content": "<p>Feel free to disturb it! I think I stared at lean a little bit too much yesterday so I don't think I'll be doing any today <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 259841037,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635758100
    },
    {
        "content": "<p>That's great Alex!</p>",
        "id": 259842938,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635759370
    },
    {
        "content": "<p>It's probably a good idea to ask in the math stream.</p>",
        "id": 259843348,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635759721
    },
    {
        "content": "<p>The primitive element theorem is in <code>field_theory.primitive_element</code></p>",
        "id": 259854018,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635767129
    },
    {
        "content": "<p>oh what? I thought I'd searched for it and nothing came up. I must've made a typo.</p>",
        "id": 259854105,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635767178
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/field.exists_primitive_element\">docs#field.exists_primitive_element</a></p>",
        "id": 259854272,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635767350
    },
    {
        "content": "<p>The formulation in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/field.power_basis_of_finite_of_separable\">docs#field.power_basis_of_finite_of_separable</a> is probably better for working with the trace</p>",
        "id": 259854302,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635767401
    },
    {
        "content": "<p>Yeah I found it now. I don't know what happened the first time I searched for it :P</p>",
        "id": 259854346,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635767404
    },
    {
        "content": "<p>Concerning Alex's original question, for the minimal polynomial, I think the best approach is to fix a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_basis\">docs#power_basis</a> of the larger field, rather than an element. In this way everything should work smoothly, and a lot of mathlib's results are stated using powerbasis.</p>",
        "id": 259934635,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635809141
    }
]