[
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib/pull/11695\">#11695</a> with the definition of <code>zeta</code>. I've added <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  and <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> as authors of the file, so you may want to have a look at it.</p>",
        "id": 269567207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643287876
    },
    {
        "content": "<p>let me see if I can toy with <code>ne_zero</code> so we can stop writing this <code>((n:nat):B)</code> stuff and we can just write <code>(n:B)</code></p>",
        "id": 269568218,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643288474
    },
    {
        "content": "<p>If <code>K</code> is a <code>cyclotomic_field p ‚Ñö</code>  and <code>R</code> is <code>ùìû (cyclotomic_field p ‚Ñö)</code>. Is there a way to link <code>zeta p ‚Ñ§ R</code> and <code>zeta ‚Ñö K</code>?  I wanted to say that when I coerce the first into K it becomes the second, but since they are defined by <code>some</code> then I guess this isn't true. How do we deal with cases when we need to use both? Or do we just try and avoid these cases?</p>",
        "id": 271179263,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1644348788
    },
    {
        "content": "<p>aaah this is not fun, you raise a good point</p>",
        "id": 271181264,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644349799
    },
    {
        "content": "<p>I think this really hammers home what Riccardo was saying about proving things about primitive roots as much as possible</p>",
        "id": 271181369,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644349834
    },
    {
        "content": "<p>and only specialize to Œ∂ when needed</p>",
        "id": 271181469,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644349900
    },
    {
        "content": "<p>Yeah, the reason I'm running into this is that I want to use the Galois action on zeta and  some of the results we have are  currently stated for <code>zeta ‚Ñö K</code>. So I guess we could either define the induced Galois action on the units or sort out some coes into fields.</p>",
        "id": 271181848,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1644350064
    },
    {
        "content": "<p>Yes, we need to prove stuff for any primitive root. In practice we already have <code>is_zeta</code> aka <code>is_primitive_root</code>. We should use it as much as possible</p>",
        "id": 271183377,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644350732
    },
    {
        "content": "<p>BTW, there's already <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.gal.gal_action_hom\">docs#polynomial.gal.gal_action_hom</a>,so that may be useful  as a bssus for the mkre general gal stuff <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span></p>",
        "id": 271186788,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644352372
    },
    {
        "content": "<p>Kenny Lau in his perfectoid talk last Thurs reminded me of the idea that instead of taking a ring of integers one can instead have an is_ring_of_integers predicate on rings equipped with a map to the field</p>",
        "id": 271238109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644390163
    },
    {
        "content": "<p>I'm quite sure it's good to have such a predicate</p>",
        "id": 271238248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644390334
    },
    {
        "content": "<p>After all, <code>‚Ñ§</code> is not <code>ring_of_integers ‚Ñö</code>, and we want that example to work smoothly.</p>",
        "id": 271238314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644390387
    },
    {
        "content": "<p>And then you can ask for a zeta-compatible one maybe? What is this zeta? A classical.some?</p>",
        "id": 271238331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644390422
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral_closure\">docs#is_integral_closure</a></p>",
        "id": 271242638,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644394339
    },
    {
        "content": "<p>And I am already using it</p>",
        "id": 271242646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644394347
    },
    {
        "content": "<p>I've done the required mathlib-side PR as <a href=\"https://github.com/leanprover-community/mathlib/pull/11941\">#11941</a>!</p>",
        "id": 271339720,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644437147
    }
]