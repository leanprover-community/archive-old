[
    {
        "content": "<p>We should be ready to think about a strategy to attack case I.<br>\nLooking at the blueprint, the first sorried result is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">flt_fact_2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ph</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flt_ideals</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">flt_ideals</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is anyone working/interested in working on this?</p>",
        "id": 297542114,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662538720
    },
    {
        "content": "<p>(note that I am renaming it to <code>flt_ideals_coprime</code>.)</p>",
        "id": 297544611,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662539821
    },
    {
        "content": "<p>I think the definition of <code>flt_ideals</code> was not yet too sure. I'm not sure how much time I'll have in the near future, but I'm trying to get the splitting field diamond merged in the background</p>",
        "id": 297598494,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662559500
    },
    {
        "content": "<p>This is already very nice! Can you link the PRs here?</p>",
        "id": 297599147,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662559711
    },
    {
        "content": "<p>I'm happy to have a go at this, maybe on the weekend, I've written some similarish proofs recently so hopefully it'll be ok (famous last words)</p>",
        "id": 297599896,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662559977
    },
    {
        "content": "<p>The current one holding stuff up is Anne's <a href=\"https://github.com/leanprover-community/mathlib/pull/16123\">#16123</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/16132\">#16132</a> also by Anne continues this theme <del>but I'm not super sure whether it;'s necessary for the proof</del> and is necessary for the fix.  When these are merged, I'll be able to PR the diamond fix properly</p>",
        "id": 297600348,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662560150
    },
    {
        "content": "<p>The definition of <code>flt_ideals</code> looks reasonable to me. Maybe there is no need to use <code>zeta_runity</code>, and <code>zeta</code> is enough.</p>",
        "id": 297602283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662560840
    },
    {
        "content": "<p>We can generalize it to the ring of integers of any cyclotomic extension of <code>ℚ</code>, but I don't thinks it is necessary.</p>",
        "id": 297602365,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662560869
    },
    {
        "content": "<p>Also, we are missing the statement of Lemma 4.4 (that is called <code>exists_int_sum_eq_zero</code> in the tex file, I suggest to keep the same name in Lean) and Lemma 4.5 (called <code>may_assume_coprime</code>). Then all the statements leading to case I will be formalized.</p>",
        "id": 297995900,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662736507
    },
    {
        "content": "<p>I will do this next week if nobody does it during the weekend.</p>",
        "id": 297995961,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662736526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> Am I right in saying that in lemma 4.3 of the blueprint we need to assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_i = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>? Otherwise I don't understand the proof...</p>",
        "id": 301179223,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664353145
    },
    {
        "content": "<p>I am actually even more confused: you write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>ζ</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>ζ</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\alpha = a_0 + a_1 \\zeta + \\cdots + a_{p-1}\\zeta^{p-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1002em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>,  but we can always suppose that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_{p-1} = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, since the other already form  a basis. Let me think a little bit.</p>",
        "id": 301180377,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664353622
    },
    {
        "content": "<p>Oh, you mean that you take <em>any</em> way of writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> in that way, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>'s are not coordinates.</p>",
        "id": 301180633,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664353721
    },
    {
        "content": "<p>So I need to change the Lean statement.</p>",
        "id": 301180763,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664353774
    },
    {
        "content": "<p>In any case the assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_i = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> seems necessary (and Washington has it).</p>",
        "id": 301181344,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664354021
    },
    {
        "content": "<p>The proof is now formalized.</p>",
        "id": 301630791,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664539967
    },
    {
        "content": "<p>Oh amazing!</p>",
        "id": 301631250,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664540142
    },
    {
        "content": "<p>Interestingly enough, I had to modify the proof written in the blueprint. The sentence \"any subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>ζ</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msup><mi>ζ</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1,\\zeta, \\ldots, \\zeta^{p-1}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> elements is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-basis of the ring of integers\" is the typical thing that it is a nightmare to formalize.</p>",
        "id": 301631456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664540206
    },
    {
        "content": "<p>Yeah, I'm sorry, maybe I sloppy there</p>",
        "id": 301631840,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664540324
    },
    {
        "content": "<p>It's mathematically OK (Washington does the same), it's just that \"basis\" is a strange concept. Anyway, do you confirm we can assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_i=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>?</p>",
        "id": 301632804,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664540598
    },
    {
        "content": "<p>Also, <code>p &gt; 3</code> is not needed.</p>",
        "id": 301634093,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664540971
    },
    {
        "content": "<p>Yes I think thats fine. Also it should say \"any subset of p-2 elements\" in the blueprint, thats a typo</p>",
        "id": 301635090,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664541154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/301634093\">said</a>:</p>\n<blockquote>\n<p>Also, <code>p &gt; 3</code> is not needed.</p>\n</blockquote>\n<p>oh yes nice, I think I just added it since we had it for the final goal</p>",
        "id": 301635235,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664541197
    },
    {
        "content": "<p>My next step is to (state and) prove Lemma 4.4 and Lemma 4.5. I think it is better to wait before proving Lemma 4.1, since the statement may need to be modified, and so it's probably a good idea to use it to prove Case I.</p>",
        "id": 301636330,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664541509
    },
    {
        "content": "<p>That sounds good. I have time for this next week so I can try and help do one of these lemmas. I might also try and think about a strategy for case 2</p>",
        "id": 301642439,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664543267
    },
    {
        "content": "<p>In lemma 4.4 <code>x</code> and <code>y</code> are real, right?</p>",
        "id": 301643186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664543479
    },
    {
        "content": "<p>Well, maybe even integers</p>",
        "id": 301643201,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664543484
    },
    {
        "content": "<p>But in any case fixed under complex conjugation</p>",
        "id": 301643240,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664543494
    },
    {
        "content": "<p>Yes they are integers.</p>",
        "id": 301643432,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664543549
    },
    {
        "content": "<p>Good, the proof seems quite Leanable</p>",
        "id": 301643767,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664543673
    },
    {
        "content": "<p>FYI the proof is from page 6 of Washington</p>",
        "id": 301644045,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664543759
    },
    {
        "content": "<p>May I suppose <code>i</code> is a natural number or do you think we need it to be an integer?</p>",
        "id": 301646369,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664544370
    },
    {
        "content": "<p>Mmm, I need anyway to consider integer powers, so it doesn't matter</p>",
        "id": 301647002,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664544555
    },
    {
        "content": "<p>The statement of Lemma 4.4 looks quite ugly. Suggestions to improve it are welcome</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_int_sum_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">hζ.is_unit</span> <span class=\"n\">p.pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">α</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">hζ.is_unit</span> <span class=\"n\">p.pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n    <span class=\"o\">((</span><span class=\"n\">hζ.is_unit</span> <span class=\"n\">p.pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span>\n    <span class=\"o\">((</span><span class=\"n\">hζ.is_unit</span> <span class=\"n\">p.pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 301650624,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664545616
    },
    {
        "content": "<p>Ah, we have <code>is_primitive_root.unit'</code>, nice</p>",
        "id": 301652046,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664546008
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_int_sum_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">hζ.unit'</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">α</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">hζ.unit'</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">hζ.unit'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span>\n    <span class=\"o\">(</span><span class=\"n\">hζ.unit'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I don't understand why I have to write <code>hζ.unit' ^ i : (𝓞 K)ˣ</code>, but if I don't do it Lean uses the coercion to <code>𝓞 K</code> before taking the power, and so it complains.</p>",
        "id": 301652881,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664546205
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 301692118,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664556875
    },
    {
        "content": "<p>This is now proved. The proof is a little messy because of the coercions <code>(𝓞 K)ˣ → 𝓞 K → K</code>, but that's life. It is also rather annoying since we don't have an updated version of mathlib. <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> do you think it will be possible to update mathlib soon?</p>",
        "id": 301807901,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664624615
    },
    {
        "content": "<p>I mean I don't think we actually use the diamond fix</p>",
        "id": 301808622,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664624918
    },
    {
        "content": "<p>we can bump mathlib soon</p>",
        "id": 301808629,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664624924
    },
    {
        "content": "<p>hopefully the splitting_field diamodn stuff will come to main soon</p>",
        "id": 301808649,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664624936
    },
    {
        "content": "<p>So do you think we can just do the bump now?</p>",
        "id": 301810988,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664626022
    },
    {
        "content": "<p>yeah, if something breaks that isn't obviously fixable give me a ping and i'll try fix it asap, but i'm super busy this week</p>",
        "id": 301813131,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664627043
    },
    {
        "content": "<p>OK, I am doing it</p>",
        "id": 301813211,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664627084
    },
    {
        "content": "<p>It's done.</p>",
        "id": 301819971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664630294
    },
    {
        "content": "<p>I am modifying the file <code>flt_regular</code> to use <code>a b c : ℤ</code>. It think it is much better, and probably even needed in cerain proofs.</p>",
        "id": 302057301,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664801680
    },
    {
        "content": "<p>I've a proof of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">caseI_slightly_easier</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hpri</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">is_regular_number</span> <span class=\"n\">p</span> <span class=\"n\">hpri.pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp5</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprod</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgcd</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">id</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hpri</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">is_regular_number</span> <span class=\"n\">p</span> <span class=\"n\">hpri.pos</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprod</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">may_assume</span> <span class=\"o\">:</span> <span class=\"n\">caseI_slightly_easier</span> <span class=\"bp\">→</span> <span class=\"n\">caseI</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 302164980,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664838894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> can you please check this is the statement of Lemma 4.5 in the blueprint?</p>",
        "id": 302165058,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664838936
    },
    {
        "content": "<p>(there are various \"we may assume\"  that are not very precise)</p>",
        "id": 302165108,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664838962
    },
    {
        "content": "<p>If this is correct, we are ready to prove caseI. I mean, to attack the last proof. (There is still a prerequisite to prove, the the ideals are coprime, but I prefer to wait to see if the statement is correct).</p>",
        "id": 302165998,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664839486
    },
    {
        "content": "<p>I have to sleep now, but tomorrow I will clean some stuff, making more clear what we have to do.</p>",
        "id": 302166044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664839519
    },
    {
        "content": "<p>Yep that looks good. I assume <code> (hgcd : is_unit (({a, b, c} : finset ℤ).gcd id))</code> says that they are pairwise coprime? i.e. doing <code>gcd</code> on a <code>finset</code> just does the pairwise gcds?</p>",
        "id": 302213994,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664872384
    },
    {
        "content": "<p>I guess technically lemma 4.5 doesnt need the regularity assumption, but if we want to use it for <code>may_assume</code> then we probably want it there (?)</p>",
        "id": 302214270,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664872491
    },
    {
        "content": "<p><code>(({a, b, c} : finset ℤ).gcd id))</code> is the gcd of <code>a</code>, <code>b</code> and <code>c</code>. I don't think we have <code>is_coprime</code> for <code>finset</code>. The API for <code>finset.gcd</code> is rather small, I think we will have to add stuff, but the definition should be the correct one.</p>",
        "id": 302214852,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664872731
    },
    {
        "content": "<p>Ah ok I see. That's fine then.</p>",
        "id": 302215791,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664873116
    },
    {
        "content": "<p>It's surprisingly painful to work with the <code>gcd</code> of a finset. I think because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.gcd_eq_gcd_image\">docs#finset.gcd_eq_gcd_image</a> works for <code>ℕ</code> but not for <code>ℤ</code> (and to be honest I don't even understand if it is true or not).</p>",
        "id": 302216607,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664873457
    },
    {
        "content": "<p>The general rule is that if it is true for the nullary and binary cases, it's true for the finitary case. Nullary case here is easy, so is it true for binary?</p>",
        "id": 302216967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664873608
    },
    {
        "content": "<p>Since there is <code>is_idempotent α gcd_monoid.gcd</code> (that is surely false in <code>ℤ</code>) I guess it's not. It's likely that my mental model for <code>finset.fold</code> is not good.</p>",
        "id": 302217797,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664873951
    },
    {
        "content": "<p>Yes I don't really understand what <code>finset.fold gcd_monoid.gcd 0 f s</code> does in <code>finset.gcd</code>.</p>",
        "id": 302218305,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664874148
    },
    {
        "content": "<p>It does <code>gcd 0 (gcd (f a) (gcd (f b) ...)</code> for <code>a, b, ...</code>  an arbitrary enumeration of <code>s</code>.</p>",
        "id": 302218542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664874243
    },
    {
        "content": "<p>Aha I see, thanks!</p>",
        "id": 302219026,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664874429
    },
    {
        "content": "<p>OK, this is <code>s.gcd f</code>. And what is <code>(finset.image f s).gcd id</code>?</p>",
        "id": 302219934,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664874812
    },
    {
        "content": "<p>I can be confused, but they look the same to me.</p>",
        "id": 302219963,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664874823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302165998\">said</a>:</p>\n<blockquote>\n<p>If this is correct, we are ready to prove caseI. I mean, to attack the last proof. (There is still a prerequisite to prove, the the ideals are coprime, but I prefer to wait to see if the statement is correct).</p>\n</blockquote>\n<p>I want to play around with <code>flt_ideals_coprime</code> to see if I can understand how the ideal API works. I'll also check the statement</p>",
        "id": 302220144,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664874869
    },
    {
        "content": "<p>Oh that's quite different. It's <code>gcd 0 (gcd a (gcd b ...)</code> for <code>a, b, ...</code> an arbitrary enumeration of <code>s.image f</code>. So in particular duplicates are lost.</p>",
        "id": 302220229,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664874897
    },
    {
        "content": "<p>Hence the idempotency condition. If <code>gcd a a = a</code>, then you can erase any duplicates and both things are the same.</p>",
        "id": 302220504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664874989
    },
    {
        "content": "<p>Ah, it's because duplicate are lost!</p>",
        "id": 302220543,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875006
    },
    {
        "content": "<p>But I think that it's still true for <code>ℤ</code>, because everything gets normalized to positive stuff</p>",
        "id": 302220820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875110
    },
    {
        "content": "<p>Still, I am wondering if this is true, since it <em>is</em> true that <code>gcd(0, gcd(a, a)) = gcd(0,a).</code></p>",
        "id": 302220836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875118
    },
    {
        "content": "<p><code>gcd(0, gcd(a, a)) = gcd(0, a)</code> you mean</p>",
        "id": 302220891,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875145
    },
    {
        "content": "<p>I don't have a good intuition for what <code>normalize</code> does, but yes it's something that sounds reasonable to expect.</p>",
        "id": 302220991,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875189
    },
    {
        "content": "<p>It's the absolute value</p>",
        "id": 302221120,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875231
    },
    {
        "content": "<p>In general monoids as well??</p>",
        "id": 302221156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875246
    },
    {
        "content": "<p>I mean, in <code>ℤ</code>.</p>",
        "id": 302221160,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875247
    },
    {
        "content": "<p>Ah right</p>",
        "id": 302221182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875254
    },
    {
        "content": "<p>You can definitely prove that <code>s.gcd f</code> and <code>(finset.image f s).gcd id</code> are associated. And then depending on the conditions properties of <code>normalize</code> you can turn that into an actual equality.</p>",
        "id": 302221240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875285
    },
    {
        "content": "<p>Surely if <code>a</code> and <code>b</code> are associated then <code>normalize a = normalize b</code>?</p>",
        "id": 302221277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875306
    },
    {
        "content": "<p>In general is nonsense, it is just a convenient thing when we have a way to normalize. In practice it is the absolute value on <code>ℤ</code>, the identity on <code>ℕ</code> and divide by leading coefficient on <code>K[X]</code>.</p>",
        "id": 302221348,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302221277\">said</a>:</p>\n<blockquote>\n<p>Surely if <code>a</code> and <code>b</code> are associated then <code>normalize a = normalize b</code>?</p>\n</blockquote>\n<p>No, it's the opposite. <code>a</code> and <code>normalize a</code> are associated. It picks a representative in any equivalence class for \"being associated\".</p>",
        "id": 302221485,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875390
    },
    {
        "content": "<p>Both statements can be true, right?</p>",
        "id": 302221533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875411
    },
    {
        "content": "<p>I'm saying that you should always pick the same representative out of an equivalence class.</p>",
        "id": 302221648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875445
    },
    {
        "content": "<p>\"If two equivalence classes are the same then their representative is the same\"</p>",
        "id": 302221708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875472
    },
    {
        "content": "<p>Oh sure, what I said is nonsense.</p>",
        "id": 302221740,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875483
    },
    {
        "content": "<p>They're associated iff have the same normalization, sorry.</p>",
        "id": 302221836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875514
    },
    {
        "content": "<p>If <code>associated a b → normalize a = normalize b</code> is not currently true in the generality of <code>normalized_monoid</code>, I would seriously consider adding it as an axiom. Otherwise you can't really say <code>normalize</code> picks representatives.</p>",
        "id": 302221855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875525
    },
    {
        "content": "<p>To be honest I have no idea what the class formally is. In my mind there are just three examples, and I know what <code>normalize</code> does in this cases.</p>",
        "id": 302221986,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875576
    },
    {
        "content": "<p>And in all three cases <code>associated a b → normalize a = normalize b</code> is true, right?</p>",
        "id": 302222070,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875619
    },
    {
        "content": "<p>Yes yes</p>",
        "id": 302222130,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875637
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/associated_normalize\">docs#associated_normalize</a></p>",
        "id": 302222193,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875666
    },
    {
        "content": "<p>So by transitivity what you say is true</p>",
        "id": 302222297,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875695
    },
    {
        "content": "<p>Ahah! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normalize_eq_normalize_iff\">docs#normalize_eq_normalize_iff</a></p>",
        "id": 302222345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875718
    },
    {
        "content": "<p>Not sure why this doesn't use <code>associated</code>, but we have it.</p>",
        "id": 302222367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302222193\">said</a>:</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/associated_normalize\">docs#associated_normalize</a></p>\n</blockquote>\n<p>I don't see how that's relevant. We know that <code>associated x y → associated (normalize x) (normalize y)</code> but they could still be different.</p>",
        "id": 302222528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664875794
    },
    {
        "content": "<p>Is this always the same as associated? Even in some cray non cancellative non commutative monoid?</p>",
        "id": 302222596,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875806
    },
    {
        "content": "<p>Ahahahahah, that's again because for me it's obvious that if the normalizations are associated then the normalizations must be equal</p>",
        "id": 302222787,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875892
    },
    {
        "content": "<p>But this is just in my head</p>",
        "id": 302222802,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875900
    },
    {
        "content": "<p>It's a proof by terminology.</p>",
        "id": 302222827,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664875917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302222596\">said</a>:</p>\n<blockquote>\n<p>Is this always the same as associated? Even in some cray non cancellative non commutative monoid?</p>\n</blockquote>\n<p>This statement does not seem to exist but it's true by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/associated.dvd_iff_dvd_left\">docs#associated.dvd_iff_dvd_left</a></p>",
        "id": 302223065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664876021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302222827\">said</a>:</p>\n<blockquote>\n<p>It's a proof by terminology.</p>\n</blockquote>\n<p>It reminds me I forgot to PR the proof that Xavier asked for yesterday. It was also a proof by terminology, he wanted to know that a complete topological field is completable.</p>",
        "id": 302223777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664876332
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">completable_top_field_of_complete</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_division_ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">completable_top_field</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">terminology</span>\n</code></pre></div>",
        "id": 302223894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664876391
    },
    {
        "content": "<p>I will PR the generalisation you want, Riccardo.</p>",
        "id": 302224676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664876757
    },
    {
        "content": "<p>Which one?</p>",
        "id": 302225094,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664876890
    },
    {
        "content": "<p>Of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.gcd_eq_gcd_image\">docs#finset.gcd_eq_gcd_image</a></p>",
        "id": 302225716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664877151
    },
    {
        "content": "<p>Thanks! If you want you can also add the result <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/ready_for_mathlib/gcd.lean\">here</a>, whose proof can (I think) be golfed with the generalization.</p>",
        "id": 302225843,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664877218
    },
    {
        "content": "<p>Oh I don't think I have access to flt-regular yet.</p>",
        "id": 302226007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664877275
    },
    {
        "content": "<p>I am not sure if we can generalize the statement, since we want a <code>division_thing</code> to be able to write <code>/</code>, but also a <code>normalized_gcd_thing</code>, and we don't have a good typeclass for that. Again there are  essentially three examples, and the result for <code>ℕ</code> is there.</p>",
        "id": 302226119,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664877321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302226007\">said</a>:</p>\n<blockquote>\n<p>Oh I don't think I have access to flt-regular yet.</p>\n</blockquote>\n<p>I am giving you access, but you should at least be able to read the file.</p>",
        "id": 302226180,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664877349
    },
    {
        "content": "<p>Maybe it's time to have a proper typeclass for that, yeah.</p>",
        "id": 302226185,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664877354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, <a href=\"https://github.com/leanprover-community/mathlib/pull/16795\">#16795</a></p>",
        "id": 302230606,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664879266
    },
    {
        "content": "<p>And the lemmas I didn't even end up using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">cancel_comm_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normalization_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">normalize_eq_normalize_iff'</span> <span class=\"o\">:</span> <span class=\"n\">normalize</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">normalize</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">associated</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">normalize_eq_normalize_iff.trans</span> <span class=\"n\">dvd_dvd_iff_associated</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">normalize_eq_normalize_iff'</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"n\">associated.normalize_eq</span>\n</code></pre></div>",
        "id": 302230774,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664879310
    },
    {
        "content": "<p>I've moved some stuff and updated the dependency graph. The main statement of caseI is <code>caseI_easier</code> in <code>caseI.statement</code>. All the prerequisites are formalized (at least the statements, there is only one missing proof, that the ideals are coprime), so we can start working on the last step.</p>",
        "id": 302280524,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664895788
    },
    {
        "content": "<p>Great! I've been thinking about the coprime ideal proof. I wondered if one could cheat at prove that the ideals are coprime directly, i.e by finding some <code>a,b</code> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><msup><mi>ζ</mi><mi>i</mi></msup><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>b</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><msup><mi>ζ</mi><mi>j</mi></msup><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a(x+\\zeta^iy) +b (x+\\zeta^j y)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> but I dont know how hard that is (at least I couldnt find anyone doing it this way). We might just have to do the proof with ideal division/containment</p>",
        "id": 302288310,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664897605
    },
    {
        "content": "<p>There is now an isolated lemma in the graph (with a weird name). Can you have a look?</p>",
        "id": 302289368,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664897879
    },
    {
        "content": "<p>oh yes sorry thats mine. I'm not finished with it yet, one sec</p>",
        "id": 302289596,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664897936
    },
    {
        "content": "<p>Do you see any problem with the proof in the blueprint (for the coprimality)? We have that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>ζ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1-\\zeta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mclose\">)</span></span></span></span> is prime.</p>",
        "id": 302290499,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664898191
    },
    {
        "content": "<p>Oh no it should be fine. I just wondered if I could quickly see a \"one line proof\"</p>",
        "id": 302290753,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664898256
    },
    {
        "content": "<p>We'd actually need span of a singleton as a ring hom for that first, which I think is nice to have regardless</p>",
        "id": 302291722,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664898551
    },
    {
        "content": "<p>Sorry, I'm not sure what you mean by \"span of a singleton as a ring hom \"</p>",
        "id": 302292105,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664898655
    },
    {
        "content": "<p>The set of ideals is a semiring :D</p>",
        "id": 302292271,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664898701
    },
    {
        "content": "<p>oh ha I see :)</p>",
        "id": 302292400,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664898728
    },
    {
        "content": "<p>Do we really miss something or it is just a matter of writing the bundled hom?</p>",
        "id": 302292742,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664898818
    },
    {
        "content": "<p>Sorry, so you mean we'd need this for what I suggested? I was writing an equality of elements, not ideals (although that wasn't clear :P). Maybe I'm just confused</p>",
        "id": 302293587,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664899052
    },
    {
        "content": "<p>The equality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>z</mi><mi>p</mi></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>ζ</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>⋯</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><msup><mi>ζ</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z^p = (x+y)(x+\\zeta y)\\cdots(x+\\zeta^{p-1}y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> is somewhere, right? I think <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> worked on this.</p>",
        "id": 302296960,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664899996
    },
    {
        "content": "<p>yes its <code>pow_add_pow_eq_prod_add_zeta_runity_mul </code></p>",
        "id": 302297203,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664900058
    },
    {
        "content": "<p>OK, we <em>really</em> need <code>span</code> as a bundled hom.</p>",
        "id": 302297484,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664900154
    },
    {
        "content": "<p>Otherwise we will end up rewriting a lot of stupid proofs.</p>",
        "id": 302297559,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664900169
    },
    {
        "content": "<p>But we already have it! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span.ring_hom\">docs#submodule.span.ring_hom</a></p>",
        "id": 302298397,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664900440
    },
    {
        "content": "<p>Hmm, more or less</p>",
        "id": 302298452,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664900461
    },
    {
        "content": "<p>span of a singleton isn't a ring hom, span(a+b) isn't span(a)+span(b)=span(a,b)</p>",
        "id": 302299857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664900872
    },
    {
        "content": "<p>Ah yes, as bundled <code>mul_hom</code> then.</p>",
        "id": 302300418,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664901043
    },
    {
        "content": "<p>It is even a <code>monoid_hom</code>.</p>",
        "id": 302301093,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1664901254
    },
    {
        "content": "<p>oh, I wanted to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_coprime.map\">docs#is_coprime.map</a> but that doesn't seem to apply</p>",
        "id": 302310450,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664904252
    },
    {
        "content": "<p>I guess we need that specific result then for <code>span</code></p>",
        "id": 302310475,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664904260
    },
    {
        "content": "<p>I am going to work on the proof of caseI. Let's see how many things we are missing :D</p>",
        "id": 302418623,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664961980
    },
    {
        "content": "<p>First problem: the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">flt_ideals</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">RR</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ideal.span</span> <span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">zeta_runity</span> <span class=\"n\">p</span> <span class=\"n\">ℤ</span> <span class=\"n\">RR</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">RR</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">RR</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>uses <code>zeta</code>. This is bad for two reasons:</p>\n<ul>\n<li>first of all we should <em>always</em> use a generic primitive root of unity,  we've already noticed this several times.</li>\n<li>this is true (and important) even if we replace <code>zeta</code> by any <code>p</code>-th root of unity, right? I mean, even for <code>1</code>.</li>\n</ul>",
        "id": 302442781,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664971861
    },
    {
        "content": "<p>Hmm, it's not stated as I though, let me find a reasonable statement.</p>",
        "id": 302443017,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664971948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> I am going to modify the statement of <code>flt_ideals_coprime</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">R</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">𝓞</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">p</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flt_ideals</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hη</span> <span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ideal.span</span> <span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">flt_ideals_coprime</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ph</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">η₁</span> <span class=\"n\">η₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hη₁</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hη₂</span> <span class=\"o\">:</span> <span class=\"n\">η₂</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdiff</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">≠</span> <span class=\"n\">η₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>since this is what we get in working on caseI. Let me know if you see any problem with it.</p>",
        "id": 302445156,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664972707
    },
    {
        "content": "<p>I think to prove that lemma we probably need something like x,y not divisible by p or something, but I'll figure that out as I work out the proof. But that statement should be fine</p>",
        "id": 302448412,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664973856
    },
    {
        "content": "<p>In practice <code>x</code> and <code>y</code> will be <code>a</code> and <code>b</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">caseI_easier</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpri</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">is_regular_number</span> <span class=\"n\">p</span> <span class=\"n\">hpri.pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp5</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprod</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgcd</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">id</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So feel free to add any assumption already present in this lemma.</p>",
        "id": 302448756,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664973968
    },
    {
        "content": "<p>Yeah exactly, one of those assumptions is needed for the proof (at least for the proof we have in the blueprint)</p>",
        "id": 302448850,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664974012
    },
    {
        "content": "<p>I think it's a good idea to state them exactly as in <code>caseI_easier</code> if possible (for example we have several way of saying <code>¬a ≡ b [ZMOD p]</code>).</p>",
        "id": 302448929,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664974046
    },
    {
        "content": "<p>Wait, do you really need <code>is_coprime x y</code>?</p>",
        "id": 302451148,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664974868
    },
    {
        "content": "<p>Or <code>¬ p ∣ x * y</code> is enough?</p>",
        "id": 302451250,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664974906
    },
    {
        "content": "<p>Ah, it's needed, but it's easy to prove.</p>",
        "id": 302451568,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664975013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302451148\">said</a>:</p>\n<blockquote>\n<p>Wait, do you really need <code>is_coprime x y</code>?</p>\n</blockquote>\n<p>No I think you really do need this and that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>∤</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">p \\nmid x + y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9925em;vertical-align:-0.2514em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel amsrm\">∤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> (at least thats what Washington uses)</p>",
        "id": 302453197,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664975475
    },
    {
        "content": "<p>Now I am confused. I am talking about the proof that the ideals are coprime. Can you try to write down a Lean statement?</p>",
        "id": 302457961,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664977088
    },
    {
        "content": "<p>In the statement in the blueprint there is no <code>z</code>, but <code>z</code> is in the proof, so we also need <code>x ^ p + y ^ p = z ^ p</code>?</p>",
        "id": 302458089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664977132
    },
    {
        "content": "<p>So in the proof you end up showing that if they werent coprime, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≡</mo><mn>0</mn><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">x + y \\equiv 0 \\mod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6582em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, which then implies that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≡</mo><msup><mi>x</mi><mi>p</mi></msup><mo>+</mo><msup><mi>y</mi><mi>p</mi></msup><mo>≡</mo><msup><mi>z</mi><mi>p</mi></msup><mo>≡</mo><mn>0</mn><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\equiv x^p + y^p  \\equiv z^p \\equiv 0 \\mod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6582em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and then you get your contradiction as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>∤</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">p \\nmid z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9925em;vertical-align:-0.2514em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel amsrm\">∤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> (under the assumptions of <code>caseI</code>). So to prove the coprime lemma we just need to add the assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">x + y \\ne 0 \\mod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span></p>",
        "id": 302459035,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664977433
    },
    {
        "content": "<p>Checking the proof what we need seems to be that <code>{x,y,z}</code> are coprime, <code>x^p + y^p = z^p</code> and <code>¬ p ∣ x*y*z</code>, which in turn implies that <code>is_coprime x y</code> and <code>¬ x + y  ≡ 0 [ZMOD p]</code></p>",
        "id": 302459049,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664977437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/302458089\">said</a>:</p>\n<blockquote>\n<p>In the statement in the blueprint there is no <code>z</code>, but <code>z</code> is in the proof, so we also need <code>x ^ p + y ^ p = z ^ p</code>?</p>\n</blockquote>\n<p>yes sorry, the proof in the blueprint is under the assumption that we are in <code>caseI</code></p>",
        "id": 302459391,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664977532
    },
    {
        "content": "<p>I am sorry but we really need a Lean statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">flt_ideals_coprime</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p5</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">η₁</span> <span class=\"n\">η₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hη₁</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hη₂</span> <span class=\"o\">:</span> <span class=\"n\">η₂</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdiff</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">≠</span> <span class=\"n\">η₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is OK?</p>",
        "id": 302460135,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664977776
    },
    {
        "content": "<p>its my fault for being sloppy, when making the blueprint I cut up the proof into these lemmas and didn't pay enough attention to the exact assumptions for each lemma, as in my head we were always in <code>caseI</code>.</p>",
        "id": 302460172,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664977789
    },
    {
        "content": "<p>we have caseI with the assumption that <code>x</code> and <code>y</code> are coprime.</p>",
        "id": 302460192,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664977795
    },
    {
        "content": "<p>Don't worry, this is way we are writing things in Lean!</p>",
        "id": 302460293,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664977815
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">flt_ideals_coprime2</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ph</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">η₁</span> <span class=\"n\">η₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hη₁</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hη₂</span> <span class=\"o\">:</span> <span class=\"n\">η₂</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdiff</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">≠</span> <span class=\"n\">η₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>  <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 302460347,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664977832
    },
    {
        "content": "<p>this is enough and all the assumptions follow from the ones in <code>caseI</code></p>",
        "id": 302460512,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664977881
    },
    {
        "content": "<p><code>hp2</code> can be removed, right? I know we have all of them, but I am trying to state a reasonable result.</p>",
        "id": 302460778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664977956
    },
    {
        "content": "<p>hmm no, I think that if we don't want to mention <code>z</code> in the coprime  lemma then we need <code>hp2</code>. Or are you saying this follows from the other hypothesis in the lemma?</p>",
        "id": 302461239,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664978083
    },
    {
        "content": "<p>Sorry, I misread.</p>",
        "id": 302461778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664978241
    },
    {
        "content": "<p>Let's keep this one.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">flt_ideals_coprime</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p5</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">η₁</span> <span class=\"n\">η₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hη₁</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hη₂</span> <span class=\"o\">:</span> <span class=\"n\">η₂</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdiff</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">≠</span> <span class=\"n\">η₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 302462078,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664978328
    },
    {
        "content": "<p>Sure, that also works :)</p>",
        "id": 302462147,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664978348
    },
    {
        "content": "<p>It's easy enough to apply, and proving <code> ¬ x + y  ≡ 0 [ZMOD p]</code> should be trivial.</p>",
        "id": 302462161,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664978352
    },
    {
        "content": "<p>wait..the one you sent doesnt have that?</p>",
        "id": 302462288,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664978388
    },
    {
        "content": "<p>oh sorry, I see what you mean</p>",
        "id": 302462397,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664978408
    },
    {
        "content": "<p>yes thats easy enough</p>",
        "id": 302462424,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664978417
    },
    {
        "content": "<p>where is the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">1- \\zeta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span> is prime?</p>",
        "id": 302470357,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664980458
    },
    {
        "content": "<p>on nvm found it its in <code>zeta_sub_one_prime</code> :p</p>",
        "id": 302470565,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664980512
    },
    {
        "content": "<p>The current statement is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">flt_ideals_coprime</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p5</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">η₁</span> <span class=\"n\">η₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hη₁</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hη₂</span> <span class=\"o\">:</span> <span class=\"n\">η₂</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdiff</span> <span class=\"o\">:</span> <span class=\"n\">η₁</span> <span class=\"bp\">≠</span> <span class=\"n\">η₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flt_ideals</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hη₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><code>¬ x + y  ≡ 0 [ZMOD p]</code> follows because if <code>p</code> divides <code>x+y</code> then it divides <code>z</code> and so the product, and there is <code>caseI</code>.</p>",
        "id": 302471382,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664980730
    },
    {
        "content": "<p>we will need a mini-lemma for this, but it should be trivial</p>",
        "id": 302471471,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664980753
    },
    {
        "content": "<p>I'm currently working on the proof of this. But I'm pretty slow, so someone might beat me to it.</p>",
        "id": 302471693,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664980809
    },
    {
        "content": "<p>I've added a (very slow, I will try to improve it) proof of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exist_ideal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h5p</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgcd</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">id</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>is <code>caseI.statement</code>. This is the only place (I think) where we need <code>flt_ideals_coprime</code>. If you modify the statement make sure this one still compiles.</p>",
        "id": 302473262,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664981260
    },
    {
        "content": "<p>sure thing!</p>",
        "id": 302473550,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664981338
    },
    {
        "content": "<p>Don't hesitate to create a lot of small sorried lemma and to push them. This will surely speed up the job</p>",
        "id": 302485451,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664984326
    },
    {
        "content": "<p>yeah well I've added lots of sorries to a proof of the version I was working on and which gives the version we want (up to a trivial sorry I've not yet filled in). I wont be able to look at this until friday, but I think it should be doable without too much pain.</p>",
        "id": 302514697,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1664993082
    },
    {
        "content": "<p>Nice !</p>",
        "id": 302519893,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664994822
    },
    {
        "content": "<p>It's reasonable to finish this proof in October I think</p>",
        "id": 302519992,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664994846
    },
    {
        "content": "<p><code>git blame</code> says that <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  is to blame for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_principal_ideal_ring</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 302621846,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665051767
    },
    {
        "content": "<p>wait, there is even a proof!</p>",
        "id": 302621914,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665051809
    },
    {
        "content": "<p>Let me remove it, hopefully it wasn't used.</p>",
        "id": 302622329,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665051982
    },
    {
        "content": "<p>OK, maybe it was true with some assumption on <code>L</code> (currently <code>L</code> is any number field...) and then this assumption was removed, so in practice now we have a false instance around</p>",
        "id": 302622330,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665051982
    },
    {
        "content": "<p>That is for L an 2nd cyclotomic extension :)</p>",
        "id": 302622399,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665052018
    },
    {
        "content": "<p>(aka Q)</p>",
        "id": 302622420,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665052025
    },
    {
        "content": "<p>But <code>[is_cyclotomic_extension {2} K L]</code> wasn't included, since there is no <code>K</code> in the statement... so this instance really simplified the proof that the relevant ideal is principal.</p>",
        "id": 302622911,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665052224
    },
    {
        "content": "<p>Oops...</p>",
        "id": 302623192,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665052332
    },
    {
        "content": "<p>We now have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_principal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">is_regular_number</span> <span class=\"n\">p</span> <span class=\"n\">hpri.pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp5</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hprod</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgcd</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">id</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hζ</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">ζ</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>that depends on only one sorry (I hope), that the ideals are coprime. This is a very good news, since this is the crucial step where we use regularity of <code>p</code>. The rest should be quite elementary, even if the sentence \"checking each case leads to a contradiction\" may be annoying.</p>",
        "id": 302671419,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665068070
    },
    {
        "content": "<p>Awesome! I'll try to do some more on the coprime ideal lemma tomorrow</p>",
        "id": 302718944,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665082177
    },
    {
        "content": "<p>Do we have something like this somewhere? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zeta_sub_one_dvb_p</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ph</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hη</span> <span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots_finset</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hne1</span> <span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Here <code>R = 𝓞 (cyclotomic_field p ℚ)</code>.</p>",
        "id": 303251625,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665405225
    },
    {
        "content": "<p>It should be easy. We know the norm of <code>1 - ζ</code>, and we know that the norm is the product of conjugates</p>",
        "id": 303261704,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409065
    },
    {
        "content": "<p>But I have the impression of having already proved it</p>",
        "id": 303261741,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409081
    },
    {
        "content": "<p>I think it's proved for the case of primitive roots, but the proof should be easy to generalise</p>",
        "id": 303261853,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665409122
    },
    {
        "content": "<p>Hmm yeah I was looking at that. The problem is that its stated for fields not the rings of integers. I was worried it would be annoying to go from field elements to ring elements</p>",
        "id": 303261895,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665409141
    },
    {
        "content": "<p>Evaluate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>p</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X^p - 1)/(X - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>?</p>",
        "id": 303261940,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1665409158
    },
    {
        "content": "<p>you have to use <code>norm'</code></p>",
        "id": 303261961,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Case.20I/near/303261961\">said</a>:</p>\n<blockquote>\n<p>you have to use <code>norm'</code></p>\n</blockquote>\n<p>Oh I hadn't seen <code>norm'</code> let me have a look</p>",
        "id": 303262076,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665409206
    },
    {
        "content": "<p>It the norm defined on the ring of integers, taking values in <code>ℤ</code></p>",
        "id": 303262247,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dvd_norm</span> <span class=\"o\">[</span><span class=\"n\">is_galois</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">algebra_map</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm'</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is what you want</p>",
        "id": 303262335,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409323
    },
    {
        "content": "<p>yep thats what I want.</p>",
        "id": 303262506,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665409394
    },
    {
        "content": "<p>With <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.sub_one_norm_prime_ne_two\">docs#is_primitive_root.sub_one_norm_prime_ne_two</a></p>",
        "id": 303262591,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409432
    },
    {
        "content": "<p>I mean, it's already there</p>",
        "id": 303262662,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409446
    },
    {
        "content": "<p>what <code>dvd_norm</code> is already there?</p>",
        "id": 303262760,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665409485
    },
    {
        "content": "<p>yes</p>",
        "id": 303262768,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409489
    },
    {
        "content": "<p>in <code>src/norm/norm_of_units.lean</code></p>",
        "id": 303262875,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409502
    },
    {
        "content": "<p>oh great, thanks!</p>",
        "id": 303263035,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665409549
    },
    {
        "content": "<p>It was part of the proof that <code>1 -ζ</code> is prime avoiding defining the norm of an ideal</p>",
        "id": 303263230,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665409615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> your <code>prim_coe </code> can be proved as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prim_coe</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hζ</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_primitive_root</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">p</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span>  <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe_submonoid_class_iff.mpr</span> <span class=\"n\">hζ</span>\n</code></pre></div>\n<p>I've pushed this proof (and removed a linter error). I think we can just replace it by its proof, but that's up to you.</p>",
        "id": 303320414,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665432946
    },
    {
        "content": "<p>(BTW I really like lemmas stated using the new classes for morphisms!)</p>",
        "id": 303320500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665432977
    },
    {
        "content": "<p>Oh great, I knew that had to be somewhere! I just put it there cuz I thought I'd maybe need it again, but the proof is so short I don't think I'll need to have it separate</p>",
        "id": 303320629,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665433076
    },
    {
        "content": "<p>I'm not sure I know what these new classes for morphisms are?</p>",
        "id": 303320751,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1665433133
    },
    {
        "content": "<p>See section 6.3 in <a href=\"https://arxiv.org/pdf/2202.01629.pdf\">https://arxiv.org/pdf/2202.01629.pdf</a></p>",
        "id": 303323570,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665434686
    },
    {
        "content": "<p>The three edge cases are done (I mean I proved they're impossibile). The main case will be slightly more difficult, but I don't expect any bad surprise.</p>",
        "id": 303677492,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665592726
    }
]