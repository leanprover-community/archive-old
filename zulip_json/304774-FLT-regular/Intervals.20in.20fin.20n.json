[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Can you please have a look at the first four lemmas <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/ready_for_mathlib/fin.lean\">here</a>? I am going to PR them, so it makes sense to add all the possible variations, and I don't want to waste time if they are not done correctly. What we really want is <code>filter_lt_card</code> and <code>filter_gt_card</code>. Thanks!</p>",
        "id": 265726899,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640116010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> has marked this topic as resolved.</p>",
        "id": 265726956,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640116055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> has marked this topic as unresolved.</p>",
        "id": 265726961,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640116058
    },
    {
        "content": "<p><code>filter_lt_card</code> and <code>filter_gt_card</code> are basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_Iio\">docs#finset.card_Iio</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_Ioi\">docs#finset.card_Ioi</a>.</p>",
        "id": 265726995,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640116081
    },
    {
        "content": "<p>The first two are worth having, but for <code>fintype α</code>, <code>locally_finite_order α</code>.</p>",
        "id": 265727233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640116225
    },
    {
        "content": "<p>They should go in <code>data.finset.locally_finite</code>. I can PR them if you prefer.</p>",
        "id": 265727295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640116273
    },
    {
        "content": "<p>The reason why I use <code>finset.filter</code> is that I need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_vandermonde\">docs#matrix.det_vandermonde</a>, that is stated that way. Maybe it's better to modify it to use the interval notation?</p>",
        "id": 265727500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640116407
    },
    {
        "content": "<p>Oh yes, definitely!</p>",
        "id": 265727525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640116425
    },
    {
        "content": "<p>Feel free to PR the modification if you want <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265727716,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640116554
    },
    {
        "content": "<p>Oh sure! That will put me one PR further down my <a href=\"https://leanprover-community.github.io/mathlib_stats.html#Authors\">#RoadToBhavik</a> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 265727903,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640116650
    },
    {
        "content": "<p>Lol</p>",
        "id": 265727980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640116684
    },
    {
        "content": "<p>This is going to break <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.discr_power_basis_eq_prod\">docs#algebra.discr_power_basis_eq_prod</a>, but it should be enough to modify the statement accordingly</p>",
        "id": 265728023,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640116726
    },
    {
        "content": "<p>Mmh, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_vandermonde\">docs#matrix.det_vandermonde</a> works also for <code>n = 0</code>, and in that case we can't use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.Ioi\">docs#finset.Ioi</a> since <code>fin 0</code> has no top element. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> do you see a workaround? Otherwise let's keep <code>finset.filter</code>.</p>",
        "id": 266168236,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640607308
    },
    {
        "content": "<p>Hmm... unfortunately we don't have a typeclass saying \"<code>order_bot</code> or empty\". So I guess not.</p>",
        "id": 266168338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640607407
    },
    {
        "content": "<p>No problem, I will add <code>Ioi_eq_filter</code> and friends.</p>",
        "id": 266168461,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640607594
    },
    {
        "content": "<p>They should go the other way, as <code>Ixx</code> is preferred to <code>filter</code>.</p>",
        "id": 266169375,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640608613
    },
    {
        "content": "<p>@Yael, why is <code>finset.Ioi</code> defined via <code>finset.Ioc</code> and not <code>finset.filter (&gt; a) univ</code>? That way you get the equiv to <code>Ioc</code> in <code>order_top</code> and it works elsewhere still.</p>",
        "id": 266169890,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640609230
    },
    {
        "content": "<p>That's because they work over infinite types as well.</p>",
        "id": 266171599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640610713
    },
    {
        "content": "<p>Your proposal doesn't work for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span></p>",
        "id": 266171653,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640610739
    },
    {
        "content": "<p>Perhaps <code>Ioi</code> could take a typeclass argument <code>locally_finite_order (with_top  α)</code> and be defined as <code>Ioo x \\top</code> (but then pushed back down to <code> α</code>)? And then there would be instances of <code>[fintype α] : locally_finite_order (with_top  α)</code> (coming from all finite order things being locally_finite) and <code>[locally_finite_order  α] [order_top  α] : locally_finite_order  (with_top α)</code> ?</p>",
        "id": 266176120,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640614966
    },
    {
        "content": "<p>Oh, that's actually pretty smart. However, you need more careful than that because we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.locally_finite_order\">docs#with_top.locally_finite_order</a></p>",
        "id": 266176337,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615177
    },
    {
        "content": "<p>Sorry, I mean that if we have <code>[fintype α] [locally_finite_order α] [order_top α]</code> then we get conflicting instances on <code>with_top α</code>. A safer bet would be <code>[is_empty α] : locally_finite_order (with_top α)</code> even though that sounds a bit stupid at first glance.</p>",
        "id": 266176506,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615331
    },
    {
        "content": "<p>This is because <code>[is_empty α] [order_top α]</code> will never be fulfilled.</p>",
        "id": 266176602,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615436
    },
    {
        "content": "<p>But there are still other finite orders without tops that one might want to consider <code>Ioi</code> of though right?</p>",
        "id": 266176622,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640615457
    },
    {
        "content": "<p>Yes, but those should assume <code>locally_finite_order</code>.</p>",
        "id": 266176643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615475
    },
    {
        "content": "<p>It's data</p>",
        "id": 266176647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615479
    },
    {
        "content": "<p>Of course, we could decide that we don't care about defeqness on fintypes and just go with <code>[fintype α] : locally_finite_order α</code>.</p>",
        "id": 266176747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615544
    },
    {
        "content": "<p>I think the instances I'm talking about are the same as yours though?</p>",
        "id": 266176881,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640615693
    },
    {
        "content": "<p>The second one, yes. The first one, no.</p>",
        "id": 266176986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640615776
    }
]