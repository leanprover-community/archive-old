[
    {
        "content": "<p>So I moved some of the embedding stuff that was in the <code>cyclotomic/absolute_value.lean</code> file into its own file. I also had a stab at defining real and complex embeddings, its probably not very good, but we can state the unit lemma now.</p>",
        "id": 259895755,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635788603
    },
    {
        "content": "<p>I started trying to prove the unit lemma based on this.<br>\nSome design questions I am having trouble with:</p>\n<ul>\n<li>When defining a Galois automorphism of a number field is it best to define it as an aut of the field and have a good api for restricting to the ring of integers or unit group, or should we define galois automorphisms on the ring of integers and extend somehow, these should be equivalent, there are lemmas showing that alg homs preserve integrality like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral_alg_hom\">docs#is_integral_alg_hom</a> so maybe thats enough.</li>\n<li>I'm having trouble with the 3 nested structures that are important here, the field itself, its ring of integers and the unit group (and also the roots of unity inside that even). With all these we have multiple coercions which then don't interact well with the algebraic structure always (e.g. if we pass from the unit group to the field then we can commute the inverse and the coercion, but as soon as we insert the ring of integers in between we lose the ability to talk about inverses in that ring so we lose the ability to commute coes and inverses.</li>\n<li>More simp lemmas are needed / we should think about which way we want simplifications to go to make the proofs nicer.</li>\n</ul>",
        "id": 259936726,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635810354
    },
    {
        "content": "<p>You could show in general that when you have an extension L/K, then K-algebra automorphisms of L restrict to various substructures (e.g., the integral closure in L of a subring of K).</p>",
        "id": 259939840,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635812844
    },
    {
        "content": "<p>Concerning •₁, maybe it's worth it to state lemmas for \"compatible pairs of automorphisms\" and then show that both the \"restrict from field pair\" and the \"extend from ROI pair\" are \"compatible\". That would give the most flexible API, I think.</p>",
        "id": 259957525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635834500
    },
    {
        "content": "<p>Perhaps with a suitable predicate and dot-notation, it wouldn't even be very verbose to work with.</p>",
        "id": 259957544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635834535
    },
    {
        "content": "<p>But one might need 4 choose 2 definitions?</p>",
        "id": 259958461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635835676
    },
    {
        "content": "<p>I guess the alternative is that you pick one defn, develop the API in terms of that defn, and after 2500 lines of code you discover that the maths forces some of the other definitions on you as well. And then you get ugly proofs because the API doesn't apply smoothly.</p>",
        "id": 259961606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635838768
    },
    {
        "content": "<p>So I don't really have any intuition as to what will lead to a better API, so I'll leave that to the experts. But related to the unit lemma. I realise now that maybe we don't need to have <code>element_is_real</code> in the statement and that its probably enough to use  that its an element fixed by <code>gal_conj p</code>. I'll have a closer look at the proof to make sure this is the case. But it might make the proof a tad nicer (but probably doesn't help with the main issue of Galois acting on all of these structures).</p>",
        "id": 259977335,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635849374
    },
    {
        "content": "<p>Regarding the problem in general, we ran into this when doing stuff from Atiyah-MacDonald. An issue one will have is that if you try to use bundled subobjects then you run into the problem that the unit group is both a subgroup of the integer ring and the number field. In comm alg in the example I'm thinking of we just made everything into a type (ie in this case the unit group is a group not a subgroup) and we used <code>is_scalar_tower</code> to keep track of the (analogue of the) compatibilities units -&gt; integer ring -&gt; number field</p>",
        "id": 259996592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635860682
    },
    {
        "content": "<p>(we had A subring B subring C but I'm extrapolating what worked for us)</p>",
        "id": 259996713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635860740
    },
    {
        "content": "<p>Note that if you use the <code>is_scalar_tower</code> approach then the emphasis moves from the maps R -&gt; K, U -&gt; K etc to the actions of R on K, U on K etc, and you recover the maps by acting on 1: all the four objects in question (roots of unity, units, integers, field) have got a 1.</p>",
        "id": 259997608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635861138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Embeddings/near/259936726\">said</a>:</p>\n<blockquote>\n<p>I started trying to prove the unit lemma based on this.<br>\nSome design questions I am having trouble with:</p>\n<ul>\n<li>When defining a Galois automorphism of a number field is it best to define it as an aut of the field and have a good api for restricting to the ring of integers or unit group, or should we define galois automorphisms on the ring of integers and extend somehow, these should be equivalent, there are lemmas showing that alg homs preserve integrality like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral_alg_hom\">docs#is_integral_alg_hom</a> so maybe thats enough.</li>\n<li>I'm having trouble with the 3 nested structures that are important here, the field itself, its ring of integers and the unit group (and also the roots of unity inside that even). With all these we have multiple coercions which then don't interact well with the algebraic structure always (e.g. if we pass from the unit group to the field then we can commute the inverse and the coercion, but as soon as we insert the ring of integers in between we lose the ability to talk about inverses in that ring so we lose the ability to commute coes and inverses.</li>\n<li>More simp lemmas are needed / we should think about which way we want simplifications to go to make the proofs nicer.</li>\n</ul>\n</blockquote>\n<p>I'm having trouble working on the <code>number_theory/cyclotomic/rat.lean</code> file. It seems to be using up all of my ram (and the same is happening on gitpod). I tried doing <code>leanproject build</code> (after doing <code>get-mathlib-cache</code>) or <code>lean -- make my_file</code> and also tried splitting some of the content into another file but its still not working. Any ideas on how to fix this?</p>",
        "id": 260008225,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635865562
    },
    {
        "content": "<p>I am not sure, but you can try to bisect the file to see where the the problem is</p>",
        "id": 260009561,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635866058
    },
    {
        "content": "<p>Hmm well its seems to magically be working now, so let me see if the problem comes back.</p>",
        "id": 260011684,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635866881
    },
    {
        "content": "<p>Splitting definitely seems helpful anyways, I started PRing a few basic lemmas from absolute value to mathlib so we can separate out the parts of these files that may need changing more easily</p>",
        "id": 260014181,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635867823
    },
    {
        "content": "<p>I think some of the stuff in rat was giving me issues too</p>",
        "id": 260014287,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635867855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> I was looking at <code>equiv_alg</code> in <code>number_theory/cyclotomic/number_field_embeddings</code> (git blame says you wrote it). I think you can golf it, and probably save some time, using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.to_rat_alg_hom\">docs#ring_hom.to_rat_alg_hom</a> and the results there.</p>",
        "id": 260110275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635933314
    },
    {
        "content": "<p>Oh no I didn't write it, I just moved it there from Alex's stuff</p>",
        "id": 260110425,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635933383
    },
    {
        "content": "<p>Sorry I split things up, trying to keep it organised, but in the process may have made the PR attributions a pain!</p>",
        "id": 260110524,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635933443
    },
    {
        "content": "<p>That said, I'm happy to try and golf it :) But I won't able to do much today or tomorrow on this :(</p>",
        "id": 260110574,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635933480
    },
    {
        "content": "<p>Splitting files it's always a good thing :)</p>",
        "id": 260110681,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635933539
    },
    {
        "content": "<p>And it's impossible to keep track of who exactly did what, so I don't care</p>",
        "id": 260110718,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635933566
    },
    {
        "content": "<p>Those lemmas /defs look helpful yeah, I used library search to end up with the only nontrivial parts of that proof. Certainly that equiv is a good candidate for mathlib inclusion when suitably golfed and generalized</p>",
        "id": 260111289,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635933847
    },
    {
        "content": "<p>It does raise the question of whether we should use ring homs at all for embeddings or only algebra homs</p>",
        "id": 260111339,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635933876
    },
    {
        "content": "<p>Algebra homs seems to be the better way to go to me for the project to link up better with the Galois theory and maybe be more general?</p>",
        "id": 260111517,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635933966
    },
    {
        "content": "<p>For the general results I think we need <code>alg_hom</code>. A lot of them should generalize without effort to any fields tower <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">E/L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> algebraically closed.</p>",
        "id": 260111565,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635933991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Embeddings/near/260014287\">said</a>:</p>\n<blockquote>\n<p>I think some of the stuff in rat was giving me issues too</p>\n</blockquote>\n<p>So I split the unit lemma into a new file and it seems to not use up all of my ram now. I'm just playing around with this to see if some quick coe lemmas can at least prove more of it (before trying to do Kevin's suggestion of using <code>scalar_towers</code> which sounds a bit scary to me at the moment)</p>",
        "id": 260389110,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1636108742
    }
]