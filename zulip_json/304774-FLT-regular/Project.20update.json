[
    {
        "content": "<p>Just a quick update: everything that was in <code>cyclotomic.basic</code> is now in mathlib. I will start PRing the definition and basic properties of <code>zeta</code> this week: this will allow to having the computation of the discriminant in mathlib.</p>\n<p>Concerning the general advancement, I've almost finished proving the Eiseistein criterion for the ring of integers, lemma 2.13 of the blueprint. With this result the computation of the ring of integers is morally done, even we will need some glue to convince Lean. After that we will probable need to think a little bit about the general strategy, but this will already be a nice milestone.</p>",
        "id": 269121600,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643037991
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integral_closure</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_ring</span> <span class=\"n\">p</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">p</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is proved (of course this holds also for <code>p=2</code>, but that should be easy). By definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cyclotomic_ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>So this gives the usual description of the ring of integers of a cyclotomic field.</p>",
        "id": 273354776,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645899268
    },
    {
        "content": "<p>We will probably need some reformulation, maybe using <code>is_cyclotomic_extension</code>, but mathematically it is done.</p>",
        "id": 273354857,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645899398
    },
    {
        "content": "<p>Speaking as someone who once had to plough through several research papers which started with the words \"let p be an odd prime\" because I had to make all the arguments work for p=2, I'm interested in knowing why the proof you formalised didn't work for p=2.</p>",
        "id": 273355689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645900433
    },
    {
        "content": "<p>Nothing special: the proof is the usual argument via the discriminant: an element <code>x</code> in the ring of integer lies in <code>ℤ[ζ - 1]</code> after multiplication by the discriminant, that is some power of <code>p</code> is <code>p ≠ 2</code>. But the minimal polynomial of <code>ζ - 1</code> is Eiseinstein at <code>p</code>, so this implies that <code>x</code> is in <code>ℤ [ζ - 1]</code>.  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_cyclotomic_extension.discr_odd_prime\">docs#is_cyclotomic_extension.discr_odd_prime</a> is not true for <code>p=2</code>.</p>",
        "id": 273355988,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645900814
    },
    {
        "content": "<p>Of course for <code>p=2</code> there is nothing to prove :D</p>",
        "id": 273356016,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645900913
    },
    {
        "content": "<p>I think that everything boils down to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.norm_eq_one\">docs#is_primitive_root.norm_eq_one</a> not holding if <code>n=2</code></p>",
        "id": 273356243,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645901214
    },
    {
        "content": "<p>One thing I really like about Lean is that we tend to keep track of these things. \"Let p be an odd prime\" is such an evil way to start a paper, because 95% of the proofs work fine when p=2 and it's only a few of them which break, however if the paper in question is Ribet's paper which proves level-lowering for odd primes and you need it for p=2 to prove some old conjecture of Artin then it's really painful to find out what you need to do because you need to check all the references of the paper for p&gt;2 hypotheses as well. With formalisation all these problems are answered instantly because you just remove the hypotheses and immediately see what breaks.</p>",
        "id": 273361668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645907859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Project.20update/near/273356243\">said</a>:</p>\n<blockquote>\n<p>I think that everything boils down to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.norm_eq_one\">docs#is_primitive_root.norm_eq_one</a> not holding if <code>n=2</code></p>\n</blockquote>\n<p>That theorem should say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N(\\zeta_p)=(-1)^{p-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> then ;-)</p>",
        "id": 273361735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645907927
    },
    {
        "content": "<p>I don't have a lot of time to work on flt because of teaching, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">discr_odd_prime_pow</span> <span class=\"o\">[</span><span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hζ</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">hirr</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hirr₁</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">discr</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">hζ.power_basis</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">basis</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is now proved. This is the last discriminant computation I want to do for this project (the general case is really harder). In next days I hope I will have the time to put everything together and PR this and the description of the ring of integers.</p>",
        "id": 276934555,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648503381
    },
    {
        "content": "<p>Nice! That will be a good milestone!</p>",
        "id": 276958597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648530261
    }
]