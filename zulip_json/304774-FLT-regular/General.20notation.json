[
    {
        "content": "<p>Everything should compile now, using the new general definition <code>is_cyclotomic_extension</code>. Here is a quick summary of the notations, I think it's a good idea to try to be consistent through the whole project. </p>\n<ul>\n<li>If you want to say that a given extension is cyclotomic, use</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ex_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">a</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>It means that <code>B</code> is a <code>S</code>-th cyclotomic extension of <code>A</code>. We will surely need a good API for this.</p>\n<ul>\n<li>If you want to consider \"the\" <code>n</code>-th cyclotomic extension of a <em>field</em>, use</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cyclotomic_field</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span>\n</code></pre></div>\n<p>It is a field and has <code>is_cyclotomic_extension {n} K (cyclotomic_extension n K)</code>.</p>\n<ul>\n<li>If you want to consider \"the\" <code>n</code>-th cyclotomic extension of a domain, things a little trickier. You should use</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cyclotomic_ring</span>  <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>So you have this <code>K</code> lying around, that mathematically is irrelevant. Note that <code>cyclotomic_field n K</code>  and<code>cyclotomic_ring n A K</code> do <em>not</em> have an <code>A</code>-algebra instance (maybe they soon will, but there are diamonds to be solved). If you need them, just use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">cyclotomic_field.algebra_base</span> <span class=\"c1\">--algebra A (cyclotomic_field n K)</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">cyclotomic_ring.algebra_base</span> <span class=\"c1\">-- algebra A (cyclotomic_ring n A K)</span>\n</code></pre></div>\n<ul>\n<li>We should try to work with <code>is_cyclotomic_extension</code> as much as possible, avoiding the explicit constructions.</li>\n<li>In practice <code>A = ℤ</code> and <code>K =  ℚ</code> is enough for us, but very often the proof is the same, I suggest we try to be as general as possible if it's easy.</li>\n<li>If <code>A = ℤ</code>, then the instances <code>algebra ℤ (cyclotomic_field n ℚ)</code> and <code>algebra ℤ (cyclotomic_ring n ℤ ℚ)</code> exist by the general machinery, so in this case you should <em>not</em> use <code>local attribute [instance]</code> (doing so will trigger some diamond-related problems).</li>\n</ul>",
        "id": 259394756,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635430638
    },
    {
        "content": "<ul>\n<li>Results about a general cyclotomic extension are in the <code>is_cyclotomic_extension</code> namespace (even if they are only for fields or whatever).</li>\n<li>Results about the explicit construction are in the <code>cyclotomic_field</code> or <code>cyclotomic_ring</code> namespace.</li>\n</ul>",
        "id": 259395449,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635430870
    },
    {
        "content": "<p>Thanks for sorting all this out Riccardo, at <a href=\"https://github.com/leanprover-community/flt-regular/runs/4035774913?check_suite_focus=true\">https://github.com/leanprover-community/flt-regular/runs/4035774913?check_suite_focus=true</a> there are some linter errors still, most are harmless and will be sorted out in time, but I'm curious whether</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- number_theory/cyclotomic/basic.lean</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">cyclotomic_field.algebra_base</span> <span class=\"c\">/-</span><span class=\"cm\"> is a lemma/theorem, should be a def -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">cyclotomic_ring.algebra_base</span> <span class=\"c\">/-</span><span class=\"cm\"> is a lemma/theorem, should be a def -/</span>\n</code></pre></div>\n<p>is intended or not at this point?</p>",
        "id": 259396048,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635431078
    },
    {
        "content": "<p>Making your data-carrying instances lemmas is certainly one way to guarantee diamonds!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails!</span>\n</code></pre></div>",
        "id": 259396360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635431174
    },
    {
        "content": "<p>They are now <code>def</code>.</p>",
        "id": 259396398,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635431195
    }
]