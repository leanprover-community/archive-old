[
    {
        "content": "<p>I'm about to introduce my class to groups, rings, and fields. Mathlib's implementations have a lot of noise, for forgetful inheritance reasons. I don't want to introduce my students to this notion yet. So we'll start by defining <code>group</code> on our own, but very quickly I want all the group theorems in mathlib, so we'll have to switch.</p>\n<p>How have others dealt with this dissonance? I'll tell them \"there are a lot of fields you see when you <code>#print group</code> that you can really just ignore.\" But it's really ugly, and I don't think there's a clean way to see only the <em>necessary</em> fields of a structure, is there?</p>",
        "id": 259273729,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635354981
    },
    {
        "content": "<p>In particular, using the hole command to generate a skeleton structure shows you all the junk.</p>",
        "id": 259273848,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635355029
    },
    {
        "content": "<p>If you start with an empty structure <code>{ }</code> the error messages \"field ... was not provided\" only cover the necessary stuff, which is good. But this isn't a great way to display it and it's annoying to have to go through them one by one.</p>",
        "id": 259274093,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635355098
    },
    {
        "content": "<p>I absolutely agree with you. I've only dealt with groups in one-off lectures, not in classes, and since the <code>nsmul</code> stuff appeared I've been rolling my own. You even see this problem with <code>preorder</code>, where using the hole command generates <code>lt</code> even though it's <code>:=...</code> and <code>lt_iff_le_not_le</code> even though it's <code>... . order_laws_tac</code>. I would just switch, under the pretence that \"we spent an hour proving theorems about groups but clearly we don't want to go through all x thousand lines of code in mathlib about group theory, oh by the way, here's a custom constructor I just made which enables us to make mathlib groups using exactly the same axioms as we used to make those hand-rolled groups last time\"</p>",
        "id": 259276701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356193
    },
    {
        "content": "<p>Can meta programming detect which fields have default args?</p>",
        "id": 259276723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356201
    },
    {
        "content": "<p>you want to detect default args and args which are filled in with default tactics</p>",
        "id": 259276757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356221
    },
    {
        "content": "<p>\"don't look at the definition of a group, it's not what you think it is\" is no different to \"don't look at the definition of a compact space, it's not something about open covers having finite subcovers despite the fact that this is the definition in every math textbook ever\"</p>",
        "id": 259276958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356297
    },
    {
        "content": "<p>fair enough</p>",
        "id": 259277305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635356459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  When teaching your class last Spring (the <code>formalising_mathematics</code> repo), did this problem occur often? I am asking because I will need to teach a course next year and wanted to draw inspiration from yours.</p>",
        "id": 259277403,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635356504
    },
    {
        "content": "<p>My course was 8 independent short stories. So in the group theory short story I rolled my own groups and subgroups, and then we put them away and never used them again; later on when we needed groups I used mathlib's groups.</p>",
        "id": 259277675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635356637
    },
    {
        "content": "<p>Ah OK, I see. And did you do a \"pilot Episode  0\" telling students the basics or was Episode 1 the true beginning, with them already in front of some Lean Code?</p>",
        "id": 259277844,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635356705
    },
    {
        "content": "<p>I demanded that everyone install Lean/VS Code etc beforehand, and then I just put episode 1 in front of them, and it was way way way too much material to cover in 2 hours. My current attempt on how to start a Lean course for mathematicians is <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/README.md\">here</a></p>",
        "id": 259278916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635357109
    },
    {
        "content": "<p>I will be getting 1st years to beta test it next week</p>",
        "id": 259278948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635357121
    },
    {
        "content": "<p>I'm ready to handwave it away for now, but some of my students will do math-y final projects and I don't want them to use a handrolled group for that. I trust them to figure it out more or less after I explain the handwaving. But this is a big-ish UI hiccup.</p>",
        "id": 259279045,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635357149
    },
    {
        "content": "<p>Metaprogramming can detect default tactics but not default args, afaik</p>",
        "id": 259279072,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635357162
    },
    {
        "content": "<p>Thanks! I have also seen you will be teaching in Term 2 to more advanced students. I guess I will try to steal a lot of ideas, is it allowed <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span> ?</p>",
        "id": 259279147,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635357191
    },
    {
        "content": "<p>We should definitely update that hole command to omit as many provided fields as we can detect.</p>",
        "id": 259279234,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635357225
    },
    {
        "content": "<p>@Rob: I've got used to it now. You roll your own natural numbers / groups / whatever, you maybe give them silly names like <code>xena.group</code> or <code>my_group</code>, you play around with them, and then you say \"but of course we need 1000 lemmas so we're going to have to use mathlib's official ones now\"</p>",
        "id": 259279400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635357279
    },
    {
        "content": "<p>@Filippo I'm going to start preparing teaching materials for final year UGs in November and it will all be publically available.</p>",
        "id": 259279492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635357316
    },
    {
        "content": "<p>Great! I will then ask for the link. I think that finding a balance in what you're currently discussing with Rob will be a hard point for a novice teacher.</p>",
        "id": 259279663,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635357381
    },
    {
        "content": "<p>@Rob the mantra I always push is \"don't unfold -- use the API\", but your audience will be different to mine; probably a bit less scared about computers but also I suspect far happier to take on board the idea that there can be more than one implementation of a structure and that it's not for them to worry about how the devs actually did it as long as they can use it.</p>",
        "id": 259279785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635357433
    },
    {
        "content": "<p>Ah, one more question: from your experience, would you recommend having the students be in front of their PC trying to code 100% of the time, or would it be better to have some balance between me showing/coding/teaching \"classically\" and them trying/coding/getting frustrated?</p>",
        "id": 259280057,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635357540
    },
    {
        "content": "<p>Getting frustrated is the only way to learn (in my opinion)</p>",
        "id": 259284026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635358980
    },
    {
        "content": "<p>I basically agree, but wouldn't you think that a bit of balance might help? I am happy I haven't been confronted to prismatic cohomology before simplicial one... But sure, you're right: a good deal of frustration helps.</p>",
        "id": 259284309,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635359074
    },
    {
        "content": "<p>The issue with groups is not just about the weird fields like <code>gpow_...</code>, but also because the first definition students see for groups is \"A set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> with a binary operation such that blah blah blah\". I introduced lean to a few of my group theory students this term, and the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(-)^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> is defined as part of the data of a group was also confusing for them.</p>",
        "id": 259284494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635359156
    },
    {
        "content": "<p>I see; do you have a public repo with your material?</p>",
        "id": 259284624,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635359197
    },
    {
        "content": "<p>there is no repo. I am not actually teaching any lean, this was just some optional components that some students found interesting.</p>",
        "id": 259284779,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635359252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/teaching.20algebraic.20structures/near/259279234\">said</a>:</p>\n<blockquote>\n<p>We should definitely update that hole command to omit as many provided fields as we can detect.</p>\n</blockquote>\n<p>Is this really a good idea? I would prefer to delete the fields myself if I want the default.</p>",
        "id": 259285437,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635359494
    },
    {
        "content": "<p>Is there a way to indicate that a certain field is optional?</p>",
        "id": 259285484,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635359518
    }
]