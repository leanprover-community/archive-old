[
    {
        "content": "<p>After watching the presentation <a href=\"https://youtu.be/5HDlgsjO8-w\">https://youtu.be/5HDlgsjO8-w</a> given by <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>,  I realized that I could use linter to give feedback for the students' code. I am currently using Lean in a discrete mathematics course hosted in GitHub, using the GitHub classroom to create assignments.  <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/lint/basic.html#linter\">https://leanprover-community.github.io/mathlib_docs/tactic/lint/basic.html#linter</a>. Does anyone have experience with that? Some directions or examples that can give me some ideas on how to use it?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"5HDlgsjO8-w\" href=\"https://youtu.be/5HDlgsjO8-w\"><img src=\"https://i.ytimg.com/vi/5HDlgsjO8-w/default.jpg\"></a></div>",
        "id": 209236546,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599417778
    },
    {
        "content": "<p>That's an interesting idea, I hadn't thought of using the linter like this!</p>",
        "id": 209237414,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599419296
    },
    {
        "content": "<p>A linter is very simple under the hood. It's basically just a function <code>declaration -&gt; tactic string</code>.</p>",
        "id": 209237447,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599419381
    },
    {
        "content": "<p>So if you know enough metaprogramming to implement what you want to test for, hooking it into <code>#lint</code> is trivial.</p>",
        "id": 209237499,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599419418
    },
    {
        "content": "<p>But I think deciding what to test for his the hard part. It will depend a lot on what you're teaching your students to do.</p>",
        "id": 209237515,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599419448
    },
    {
        "content": "<p>Note that the linter framework doesn't look at source code, it works at the declaration level. So it won't help with formatting, syntax errors, things like that.</p>",
        "id": 209237585,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599419544
    },
    {
        "content": "<p>One cool teaching application could be to hook it up to <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> 's new counterexample generation. Students could state lemmas they're trying to prove but not finish all of them. They run <code>#lint</code> at the bottom and it could report if it detects that any of the lemmas are unprovable.</p>",
        "id": 209237614,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599419635
    },
    {
        "content": "<p>Our paper on the linter is <a href=\"https://arxiv.org/abs/2004.03673\">here</a> and if you have ideas of what you'd like to test for I'm happy to give suggestions. There are some <a href=\"https://github.com/leanprover-community/mathlib/blob/de03e19/src/tactic/lint/misc.lean\">simple linters</a> that you could use as examples if you want to implement your own.</p>",
        "id": 209237741,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599419795
    },
    {
        "content": "<p>Alexandre, do you ask students to define stuff and state lemmas? That sounds very ambitious, unless the core topic of the course is interactive theorem proving.</p>",
        "id": 209237833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599419936
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, well, that a good question. Discrete mathematics is a broad topic and we can focus on many different areas, right? I choose to follow the <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> as much as I can. That means I use \"logic and proof\" from chapters 1-18. For the last part, I need to add something about graphs. For the natural numbers, I am planning to present them the natural numbers game from <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and play together during some lectures.</p>\n<p>For the graph part, it is not clear yet if I can use Lean, I am still thinking about it, maybe I will present some code in Haskell. Last time I have some lectures about the PHP principle and combinatorics, but I was asked to present an introduction to graph theory this semester. For the first part on logics, besides the exercises from \"logic and proof\", I present students with some puzzles to be formalized and proved and also with a list of many LP and FOL tautologies to be proved. So they don't have to state very complex lemmas by themselves, but they learn to formalize basic stuff. They learn to make ND by hand first and to translate it to Lean. What happens that is many times their code is quite messy and I try to give as much feedback as I can to teach them that clean and simple presentation is an important part of the game.</p>",
        "id": 209239841,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599423234
    },
    {
        "content": "<p>The linter framework won't inspect proofs for you.</p>",
        "id": 209239916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599423330
    },
    {
        "content": "<p>You wrote you want to follow Kevin and Mohammad's natural number game, but this is the extreme case of not allowing to write any statement.</p>",
        "id": 209239967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599423389
    },
    {
        "content": "<p>I don't know whether <em>Logic and proofs</em> include exercises when you need to state or define something.</p>",
        "id": 209239972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599423416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209239916\">said</a>:</p>\n<blockquote>\n<p>The linter framework won't inspect proofs for you.</p>\n</blockquote>\n<p>Hmm? It can certainly inspect proof terms, and if they're written in the structured L&amp;P style, it could be able to detect some worthwhile stylistic things.</p>",
        "id": 209239981,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599423438
    },
    {
        "content": "<p>But again I don't claim you shouldn't do it, only that it's very ambitious.</p>",
        "id": 209239989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599423463
    },
    {
        "content": "<p>For example, I think you can write a linter that checks if a proof contains a <code>have</code> statement that isn't used.</p>",
        "id": 209239996,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599423474
    },
    {
        "content": "<p>Oh, proof terms... I always forget about those.</p>",
        "id": 209239997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599423474
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, where can I read more about the counterexample generation from <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ? Thank you for the links, I will try to learn more about it. that may be a stupid question but, once you have the lint tactics implemented, how do you use them to check the mathlib pull requests?</p>",
        "id": 209240037,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599423490
    },
    {
        "content": "<p>What they can't check are proof <em>scripts</em>, the input syntax. Even a tactic proof creates a proof term and depending on what you're looking for, you can certainly extract useful info from them.</p>",
        "id": 209240064,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599423575
    },
    {
        "content": "<p>Yes, of course checking for unused arguments is the canonical example.</p>",
        "id": 209240108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599423611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209239972\">said</a>:</p>\n<blockquote>\n<p>I don't know whether <em>Logic and proofs</em> include exercises when you need to state or define something.</p>\n</blockquote>\n<p>Yes, sometimes I add bits of extra stuffs not in logic and proof. I do show them <code>def</code> and some type theory. Actually, I am learning that hidden type thoery makes things more difficult. The Hitchhiker’s Guide sequence for presenting Lean and logics in Lean now makes a little bit more sense to me.</p>",
        "id": 209240112,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599423623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209239967\">said</a>:</p>\n<blockquote>\n<p>You wrote you want to follow Kevin and Mohammad's natural number game, but this is the extreme case of not allowing to write any statement.</p>\n</blockquote>\n<p>The ideais is that once they know how to make term mode proofs, why not also introduce tactic mode and more <code>applied logic</code> to do mathematics.</p>",
        "id": 209240127,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599423683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209239996\">said</a>:</p>\n<blockquote>\n<p>For example, I think you can write a linter that checks if a proof contains a <code>have</code> statement that isn't used.</p>\n</blockquote>\n<p>That kind of check would be nice. I don't know why, but they loved <code>have</code>. They overuse it (for my personal perspective)</p>",
        "id": 209240188,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599423775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121542\">Alexandre Rademaker</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209240037\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span>, where can I read more about the counterexample generation from <span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> ?</p>\n</blockquote>\n<p>Simon is in the process of adding it now, there are some open PRs. The basics are there in the <a href=\"https://leanprover-community.github.io/mathlib_docs/testing/slim_check/gen.html\">testing</a> directory and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/slim_check.html\">tactic/slim_check</a>. Maybe best to call <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> directly for details though. In particular I don't think it's set up for pure prop logic yet, although I don't see why it couldn't be. It's very much actively in development.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">slim_check</span> <span class=\"kn\">end</span> <span class=\"c1\">-- no testable issue</span>\n</code></pre></div>",
        "id": 209240201,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599423812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> It's still very new so there's still a lot I need to write. Fortunately, I'm not the first to implement such a tool and anything you learn about Haskell's QuickCheck will be informative about <code>slim_check</code> (the Lean port). And you can always ask if there's more to know.</p>\n<p>I'm hoping the header comment in <code>tactic/slim_check.lean</code> will get you started</p>",
        "id": 209240203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599423818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209240108\">said</a>:</p>\n<blockquote>\n<p>Yes, of course checking for unused arguments is the canonical example.</p>\n</blockquote>\n<p>Yes, in my last list of exercises, many students forgot extra hypothesis in lemmas, possible driven by the copy and past discipline...</p>",
        "id": 209240254,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599423882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> the issue you're showing is that we can't print <code>prop</code>. That should change soon through a bit of hackering that I'm doing right now. In the mean time, you can go with <code>bool</code></p>",
        "id": 209240264,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599423904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121542\">Alexandre Rademaker</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209240037\">said</a>:</p>\n<blockquote>\n<p>that may be a stupid question but, once you have the lint tactics implemented, how do you use them to check the mathlib pull requests?</p>\n</blockquote>\n<p>Not a stupid question, it's kind of complicated actually! The short story is, we build a file that imports all of mathlib (scripts/mk_all.sh) and run <code>#lint_mathlib</code>. Complications come because there are still lots of whitelisted exceptions from before the linters existed. We have a file of allowed exceptions that we add the <code>@[nolint]</code> attribute to before running the tests.</p>",
        "id": 209240322,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599423982
    },
    {
        "content": "<p>It's mostly done <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/lint_mathlib.lean\">here</a></p>",
        "id": 209240354,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599424046
    },
    {
        "content": "<p>Oh.. thank you. So in the end is the processing of this file that checks the mathlib library. Wow! I still have too much to understand...</p>",
        "id": 209240502,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599424288
    },
    {
        "content": "<p>Yep. But again, this file is a complicated way to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint_mathlib</span>\n</code></pre></div>\n\n\n<p>because it has to import and update the whitelist of old declarations.</p>",
        "id": 209240568,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599424384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> , thank you for the pointers. I will take a look. Presenting logics from a proof theoretical perspective always make students question how to know if a formula is NOT provable. For answering that, I have to anticipate the LP and FOL semantics, present tools for truth table constructions, talk about ATPs, undecidability of FOL, etc. Having some way to present in Lean counterexamples would be definitely a useful tool.</p>",
        "id": 209240759,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599424719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> when you print a prop will it just display as <code>true</code> or <code>false</code>?</p>",
        "id": 209243467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599429633
    },
    {
        "content": "<p>Yes, that's the plan</p>",
        "id": 209243555,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599429830
    },
    {
        "content": "<p>Proof of concept, here's an \"unused haves\" linter. <code>have</code> is represented as a macro and there's no API for dealing with macros, so this took some reverse engineering and is probably overfit to the two examples I started with. But, it catches those and doesn't flag any other errors in mathlib up to that point, so...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fun_problem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpnp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpnp</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">have</span> <span class=\"n\">unnecessary</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpnp</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">has_zero_var</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"n\">ff</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e&#39;</span> <span class=\"n\">d</span> <span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"bp\">||</span> <span class=\"k\">match</span> <span class=\"n\">e&#39;</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_unused_have_macro</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">a_1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">body</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">body</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">var_name</span> <span class=\"n\">type</span> <span class=\"n\">assignment</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">body</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">md</span> <span class=\"o\">[</span><span class=\"n\">lam</span> <span class=\"n\">ppnm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">bd</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n       <span class=\"o\">(</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">bd</span><span class=\"bp\">.</span><span class=\"n\">has_zero_var</span> <span class=\"k\">then</span> <span class=\"o\">[]</span> <span class=\"k\">else</span> <span class=\"o\">[</span><span class=\"n\">ppnm</span><span class=\"o\">])</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span>\n        <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">bd</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">md</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">ls</span> <span class=\"err\">←</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">find_unused_have_macro</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">join</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unused_of_decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">defn</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">bd</span> <span class=\"n\">a_4</span> <span class=\"n\">a_5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">bd</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">bd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">find_unused_have_macro</span> <span class=\"n\">bd</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">linter</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">unused_haves</span> <span class=\"o\">:</span> <span class=\"n\">linter</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">ns</span> <span class=\"err\">←</span> <span class=\"n\">unused_of_decl</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span><span class=\"o\">))),</span>\n  <span class=\"n\">no_errors_found</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;all good&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">errors_found</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;DECLS HAVE UNNEEDED HAVES&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">is_fast</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">auto_decls</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">only</span> <span class=\"n\">unused_haves</span>\n</code></pre></div>",
        "id": 209243601,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599429891
    },
    {
        "content": "<p>I'm tempted to run this on the assignments from my course this spring, but it might make me sad</p>",
        "id": 209243664,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599429994
    },
    {
        "content": "<p>(It doesn't catch tactic mode <code>have</code>s.)</p>",
        "id": 209243716,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599430087
    }
]