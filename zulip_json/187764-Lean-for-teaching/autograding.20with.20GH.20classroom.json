[
    {
        "content": "<p>I put together a basic auto-grading setup for Lean homework assignments using GitHub classroom at <a href=\"https://github.com/c0ppelius/lean-autograding\">https://github.com/c0ppelius/lean-autograding</a></p>",
        "id": 269609376,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643305360
    },
    {
        "content": "<p>The actual testing can certainly be improved. The main value of the repo is to show how to integrate calls to Lean into the GH classroom setup.</p>",
        "id": 269609919,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643305565
    },
    {
        "content": "<p>Darn, I hacked together something literally last night :)</p>",
        "id": 269612983,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643306620
    },
    {
        "content": "<p>Anyway, thank you for this (I am sure) far more professional setup!</p>",
        "id": 269613123,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643306657
    },
    {
        "content": "<p>Great minds :)</p>",
        "id": 269613126,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643306657
    },
    {
        "content": "<p>Did you use GitHub Actions?</p>",
        "id": 269613300,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643306712
    },
    {
        "content": "<p>Mine is for Gradescope, although it's probably not so different.</p>",
        "id": 269613378,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643306743
    },
    {
        "content": "<p>That seems like it might have better LMS support</p>",
        "id": 269613515,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643306787
    },
    {
        "content": "<p>It also has the advantage of not using <code>git</code></p>",
        "id": 269613681,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643306852
    },
    {
        "content": "<p>We'll see how my students find it, but the interface seems pretty easy, they just upload a single Lean file with a specified name.</p>",
        "id": 269614437,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643307165
    },
    {
        "content": "<p>And I see we came up with the same mechanism for scoring:  first fail globally if the file contains errors or warnings, then apply a series of tests to verify whether each exercise has the type it's supposed to.</p>",
        "id": 269614769,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643307308
    },
    {
        "content": "<p>Ideally one would parse the document and test whether there is a proof of the correct type somewhere in there. If you wanted to give more open ended assignments.</p>",
        "id": 269615556,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643307670
    },
    {
        "content": "<p>Things like <code>axiom</code>'s and <code>constant</code>'s could be filtered depending on if they came from source file, eg you have to prove <code>X</code> but can assume and use <code>Y,Z</code> and not worry about their proofs</p>",
        "id": 269615842,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643307784
    },
    {
        "content": "<p>Did you include hints or anything in your message to students?</p>",
        "id": 269615912,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643307816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>  I didn't include any check to filter out axioms.  My class is small enough that I plan to glance over everyone's code anyway, so I would catch that sort of thing visually.  It would be very nice to have this check, though (you do this?).</p>\n<p>And I also don't include any hints, except that in the \"fails globally\" case here:<br>\n<span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/autograding.20with.20GH.20classroom/near/269614769\">said</a>:</p>\n<blockquote>\n<p>And I see we came up with the same mechanism for scoring:  first fail globally if the file contains errors or warnings, then apply a series of tests to verify whether each exercise has the type it's supposed to.</p>\n</blockquote>\n<p>it posts a message saying that it has failed globally due to an error/warning in the file, so that a student with a submission containing 4 correct problems doesn't get confused about why her score is 0.</p>",
        "id": 269637712,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643317486
    },
    {
        "content": "<p>However, the proof is in the pudding!  I am curious to see how it works when tried on actual students :)</p>",
        "id": 269637796,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643317521
    },
    {
        "content": "<p>If the proof is in the pudding, where is all that pudding in mathlib?? <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 269682113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643340779
    },
    {
        "content": "<p>Continuing with this thread, I have some meta code that checks for a term of a given type anywhere in <code>assignment.lean</code> which removes the requirement that students name their solutions strictly.</p>",
        "id": 271045354,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644269818
    },
    {
        "content": "<p>I still really wish I could pull the axioms without passing through <code>stdout</code>.</p>",
        "id": 271045405,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644269847
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">assignment</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">in_import</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">env.decl_olean</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">env.contains</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">quot</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">quot.mk</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">quot.lift</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">quot.ind</span><span class=\"o\">])</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">exact_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                  <span class=\"n\">exact</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact_list</span> <span class=\"n\">Hs</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">check_solutions</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">env.fold</span> <span class=\"o\">[]</span> <span class=\"n\">list.cons</span><span class=\"o\">,</span>\n   <span class=\"n\">cwd</span> <span class=\"bp\">←</span> <span class=\"n\">unsafe_run_io</span> <span class=\"n\">io.env.get_cwd</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">decls.map</span> <span class=\"n\">declaration.to_name</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">assignment_names</span> <span class=\"o\">:=</span> <span class=\"n\">names.filter</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">in_import</span> <span class=\"n\">env</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">cwd</span> <span class=\"bp\">++</span> <span class=\"s2\">\"/src/assignment.lean\"</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"n\">x.is_internal</span><span class=\"o\">),</span>\n   <span class=\"n\">exact_list</span> <span class=\"n\">assignment_names</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">check</span> <span class=\"o\">:</span> <span class=\"n\">T</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">check_solutions</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271045520,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644269893
    },
    {
        "content": "<p>Update: <code>lean X.lean</code> dumps everything to <code>stdout</code>. <code>stderr</code> is empty. So the GH autograding action only cares about the exit code of the process.</p>",
        "id": 271197443,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644357630
    },
    {
        "content": "<p>Great stuff! I've been away from Zulip for a few months and it's amazing to see what's happening. I'm actually planning to use Git Hub Classrooms with Lean for the new academic year.</p>",
        "id": 294855995,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1661258146
    },
    {
        "content": "<p>I recently used github classrooms for a non-Lean course;  one tip I'd give would be to put a very minimal action in the student repo that references the real action, so that you can fix bugs in it without having to tell students how to update their git repository to get the new grader. That looks something like:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">jobs</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">build</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\"># this name must be exactly this for the points to be reported to github classroom</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Autograding</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">runs-on</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">ubuntu-latest</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nt\">steps</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">uses</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">actions/checkout@v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Run grading</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nt\">uses</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">my-classrooms/my_class_action@2022</span><span class=\"w\">  </span><span class=\"c1\"># version by cohort so as not to break submissions next year</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>my_class_action</code> is a github \"composite action\"</p>",
        "id": 295005981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661331982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233737\">Gihan Marasingha</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/autograding.20with.20GH.20classroom/near/294855995\">said</a>:</p>\n<blockquote>\n<p>Great stuff! I've been away from Zulip for a few months and it's amazing to see what's happening. I'm actually planning to use Git Hub Classrooms with Lean for the new academic year.</p>\n</blockquote>\n<p>Thanks. I am not sure if this is in a completely working state currently. I am trying out Lean 4 for my class so will have to rewrite it that in a week or so.</p>",
        "id": 295070435,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661355058
    },
    {
        "content": "<p>This semester is my first honest rodeo with GH classrooms so I am noticing some sharp edges. For example, it appears that instructors cannot set student groups for assignments. In fact, an instructor cannot create the (empty) named groups themselves. All group creation and membership is on the student end. There is a time-intensive <a href=\"https://education.github.community/t/using-existing-teams-in-group-assignments/6999/12\">workaround</a> to create the empty groups but it still relies on students correctly joining their assigned group. You cannot fix a mistake without dumping the whole assignment and starting over.</p>",
        "id": 295071371,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661355354
    },
    {
        "content": "<p>Perhaps people here are better versed, but is this really the state of things for student group creation/curation?</p>",
        "id": 295071518,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661355403
    },
    {
        "content": "<p>I'm trying to use Lean 3 with gradescope, but I'm confused about how to deal with <code>sorry</code>.  It seems that definitions using <code>sorry</code> produce only a warning, not an error, and in particular don't set a positive exit-code, so I'm not sure how to test for them programmatically.  Is there a flag I can give to Lean to tell it to treat <code>sorry</code> as an error?</p>",
        "id": 295969093,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661796883
    },
    {
        "content": "<p>I tried to figure out from the posted GH code how you're dealing with this, but I couldn't even figure out how lean is getting called or its return values parsed.</p>",
        "id": 295969226,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661796929
    },
    {
        "content": "<p>Would anyone who's used gradescope be willing to share their autograder setup?</p>",
        "id": 295969322,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661796957
    },
    {
        "content": "<p>I think you can use trust level 0 <code>-t0</code> flag to lean to get this behaviour, not sure what other effects this will have though</p>",
        "id": 295971006,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661797508
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> long time no see. <a href=\"https://github.com/mattrobball/lean-autograding/blob/c004f4539968eaa5b3a42624308df9e9c9eeeca8/.test/test.lean#L16\">Here</a> is the relevant function. The <a href=\"https://github.com/mattrobball/lean-autograding/blob/c004f4539968eaa5b3a42624308df9e9c9eeeca8/.github/classroom/autograding.json\">classroom json file</a>  just calls <code>lean .test/test.lean</code> and expects nothing in response in stdout.</p>",
        "id": 295971118,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661797559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Thanks, that seems to work!  It wasn't at all clear to me from the <code>lean --help</code> output that \"do not trust any macro\" included \"do not allow <code>sorry</code>\", but maybe <code>sorry</code> is a macro or something?</p>",
        "id": 295971586,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661797702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Thanks.  You appear to be doing some fancy coding in Lean that I don't understand.  What does your script do if the student hasn't solved that exercise?</p>",
        "id": 295972137,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661797858
    },
    {
        "content": "<p>Yes this is not obvious from the help menu, but we've had this discussion on here somewhere before I think, and also wondered a lot about how to really check that people used no extra axioms for codeforces-like online challenges (its a long story and very hard to do right it turns out)</p>",
        "id": 295972230,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661797884
    },
    {
        "content": "<p>(Again from memory but) I tested this and it should fail because it yields either an error because there is no statement with the appropriate name or the proof is not complete and it is <code>sorry</code>'d by default</p>",
        "id": 295972482,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661797957
    },
    {
        "content": "<p>At the end of the rabbit hole was \"you need to inspect the oleans\"</p>",
        "id": 295972583,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661797990
    },
    {
        "content": "<p>Anything beyond that can be gamed but if you just want something plausible, this was enough for me. (Currently I have go test file in the main directory for my cryto class to give you an idea of my level of concern ...)</p>",
        "id": 295972989,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661798133
    },
    {
        "content": "<p>Ok, thanks!  I think I'm just going to test each exercise with a separate testing file run under <code>-t0</code>, so that I can test the exit codes rather than have to parse the textual output.</p>",
        "id": 295973211,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661798218
    },
    {
        "content": "<p>Mine was mainly an exercise for myself in meta-programming :)</p>",
        "id": 295973274,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661798242
    },
    {
        "content": "<p>At least, until someone writes a gradescope-utils package in Lean that will automatically produce JSON... (-:O</p>",
        "id": 295973286,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661798246
    },
    {
        "content": "<p>I am going to take another run in Lean 4 later this week and will report back. (Though not in gradescope)</p>",
        "id": 295973440,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661798298
    },
    {
        "content": "<p>I now remember the concern that led me here: I didn’t want students to declare and use convenient axioms.</p>",
        "id": 295976895,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661799491
    },
    {
        "content": "<p>I tried that, but it seemed that student-declared axioms are caught by the computability checker: anything depending on an axiom has to be flagged noncomputable, and my test definitions are not so flagged, hence raise an error.  But I don't know much about how Lean works; is there an easy way that students could defeat that?</p>",
        "id": 295989335,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661803581
    },
    {
        "content": "<p>Label them <code>noncomputable</code>?</p>",
        "id": 295993480,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661803977
    },
    {
        "content": "<p>But an error will still be raised if <em>my</em> functions in the testing file aren't labeled <code>noncomputable</code>, and the students can't change those.</p>",
        "id": 295998965,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661806368
    },
    {
        "content": "<p><a href=\"https://github.com/DonaldKellett/CW-Lean3-Examples\">This</a> is good enough for Codewars so is probably good enough for coursework.</p>",
        "id": 296000258,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661806974
    },
    {
        "content": "<p>If you are going to look at the submissions yourself, then the cost to benefit ratio tips over after just a simple sorry check.</p>",
        "id": 296000807,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661807207
    },
    {
        "content": "<p><code>noncomputable</code> is not a good defense against axiom use, because you are allowed to use axioms that prove propositions in computable functions. So a student could just have <code>axiom my_sorry : false</code> and they could even use it in a function implementation without it getting marked <code>noncomputable</code>.</p>",
        "id": 296018169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661817801
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">my_sorry</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_computable_def</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">my_sorry.elim</span>\n</code></pre></div>",
        "id": 296018866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661818342
    },
    {
        "content": "<p>May be a silly question, but what if a student uses <code>sorryAx</code> manually instead of using the <code>sorry</code> macro?</p>",
        "id": 296078650,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1661857651
    },
    {
        "content": "<p>Codewars and <code>test.lean</code>both implement the two step check:</p>\n<ul>\n<li>have Lean check the proof</li>\n<li>inspect the axioms to make sure nothing out of bounds is used</li>\n</ul>\n<p>Codewars parses the stdout/stderr using some JavaScript. The test file in the repo does axiom inspection in Lean itself.</p>",
        "id": 296081829,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661859074
    },
    {
        "content": "<p>General consensus from before was that this could be defeated but then a student probably would have learned enough in the process.</p>",
        "id": 296082589,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661859430
    },
    {
        "content": "<p>Both <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> have experience with gradescope in particular. They might know more about talking to it</p>",
        "id": 296084455,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661860234
    },
    {
        "content": "<p>All this becomes a real issue only if someone smart figures out a way to cheat and then tell everybody about it.</p>",
        "id": 296084774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661860383
    },
    {
        "content": "<p>We did make this stream public <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 296085322,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661860602
    },
    {
        "content": "<p>But I would think CS students are fairly familiar with looking for the test file, seeing the test cases, and then fitting a function to those.</p>",
        "id": 296086096,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661860890
    },
    {
        "content": "<p>If you are looking at the submission, then this fails quickly though.</p>",
        "id": 296086362,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661860983
    },
    {
        "content": "<p>So you're saying there's no way to extract the information from lean about what axioms are used other than something like <code>#print axioms</code> and then parsing its textual output?</p>",
        "id": 296381545,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661962118
    },
    {
        "content": "<p>You can do it with lean meta-programming, e.g. as seen in <a href=\"https://github.com/leanprover-community/mathlib/issues/10954\">https://github.com/leanprover-community/mathlib/issues/10954</a></p>",
        "id": 296382280,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661962342
    },
    {
        "content": "<p><del><code>test.lean</code> is a specific lean 3 internal implementation of the meta-programming approach</del> Hmm I thought I did a meta-programming one but it appears it took the easy way out :)</p>",
        "id": 296404056,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661964013
    },
    {
        "content": "<p>Ah right <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> gave that implementation (also seen here <a href=\"#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224372208\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224372208</a>) and I put adding it to the repository on my to-do list (and never took it off)</p>",
        "id": 296406055,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661964644
    },
    {
        "content": "<p>Also interacting with GitHub Classroom (and Gradescope too?) occurs via stdout/stderr anyway: give some json specifying which command to run and what to compare the output to.</p>",
        "id": 296409045,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661965534
    },
    {
        "content": "<p>Gradescope just runs a script that you specify, and expects the results to be placed in a specified JSON file.  It doesn't do any output comparison, it expects a particular JSON format that specifies the score.</p>",
        "id": 296409749,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661965753
    },
    {
        "content": "<p>Oh, it appears they have libraries in common languages to help with the file creation. Right? Or is it just Python?</p>",
        "id": 296410764,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661966060
    },
    {
        "content": "<p>Hmm, even the Java one dumps to stdout and saves the result in a json file.</p>",
        "id": 296411409,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661966248
    },
    {
        "content": "<p>Yes, they have libraries that integrate with testing frameworks in Python and maybe a few other languages, but the end result is always a json file of the same format.</p>",
        "id": 296415885,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1661967592
    },
    {
        "content": "<p>After actually trying this, I realized that my original question about <code>sorry</code> wasn't even what I really wanted anyway.  Using <code>-t0</code> answers that question, but raises an error if <em>any</em> function in the file uses <code>sorry</code>, when actually I would like them to be able to leave the <code>sorry</code> there for some questions and still have the others graded.  So I guess I need to use <code>print axioms</code> even to detect <code>sorry</code>.</p>",
        "id": 297868911,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1662673007
    },
    {
        "content": "<p>I'm using a Windows machine at the moment and <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>'s <code>test.lean</code> file contains the string<code>/src/assignment.lean</code>, which Windows doesn't like!</p>\n<p>Is there a way for Lean to use slashes appropriate to the OS or do something else to get the correct path?</p>",
        "id": 300668622,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1664123209
    },
    {
        "content": "<p>Does switching to <code>\\src\\assignment.lean</code> fix the issue?</p>",
        "id": 300847050,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1664208079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/autograding.20with.20GH.20classroom/near/300847050\">said</a>:</p>\n<blockquote>\n<p>Does switching to <code>\\src\\assignment.lean</code> fix the issue?</p>\n</blockquote>\n<p>Yes it does. I was wondering if there was an OS-agnostic solution. It's not a big issue if there isn't one!</p>",
        "id": 300860152,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1664211647
    },
    {
        "content": "<p>You should be able to match off the head of the result of <code>io.get_cwd</code> to handle different cases. Whether there is a builtin function for constructing a system path from a list, I am not sure.</p>",
        "id": 300870393,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1664215056
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> , did you end up re-writing your autograder for Lean 4? Do you still plan to? <a href=\"https://github.com/mattrobball/lean-autograding\">https://github.com/mattrobball/lean-autograding</a></p>",
        "id": 302140291,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1664827921
    },
    {
        "content": "<p>I have something that I am currently using but the functionality is far from what I would like given the capabilities of Lean 4. The main limitation is time. </p>\n<p>You can see it at work <a href=\"https://github.com/UofSC-Fall-2022-Math-300-H01/homework5\">here</a>.</p>",
        "id": 302143795,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1664829211
    },
    {
        "content": "<p><a href=\"https://twitter.com/derKha/status/1578493681304494080?s=20&amp;t=xJ4T-mPBhLLOFn4RwICxAQ\">https://twitter.com/derKha/status/1578493681304494080?s=20&amp;t=xJ4T-mPBhLLOFn4RwICxAQ</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/derKha/status/1578493681304494080?s=20&amp;t=xJ4T-mPBhLLOFn4RwICxAQ\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/73b1cc6b0e68078201ad1856c80ab187a3c03baa/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313239313333333833303131333230363237332f4f7778726633696c5f6e6f726d616c2e6a7067\"></a><p>a) cool, Lean made it to homework questions on SO\nb) \"discrete math\" seems a bit... broad\nc) why does the title read like a LLM prompt <a href=\"https://t.co/SiqRs36Hxy\">https://twitter.com/derKha/status/1578493681304494080/photo/1</a></p><span>- Sebastian Ullrich (@derKha)</span><div class=\"twitter-image\"><a href=\"https://t.co/SiqRs36Hxy\"><img src=\"https://uploads.zulipusercontent.net/bb537d2675b1d812323f2e7baa1e8e1ea9941fe6/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f466566764d746b57514151525166352e706e673a6c61726765\"></a></div></div></div>",
        "id": 302940771,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665180090
    },
    {
        "content": "<p>Just pointing this out because the questions seem very similar to <a href=\"https://github.com/UofSC-Fall-2022-Math-300-H01/homework5/blob/main/Hw5.lean\">https://github.com/UofSC-Fall-2022-Math-300-H01/homework5/blob/main/Hw5.lean</a></p>",
        "id": 302940849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665180124
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/116290-rss/topic/Newest.20questions.20tagged.20lean.20-.20Stack.20Overflow/near/302931112\">https://leanprover.zulipchat.com/#narrow/stream/116290-rss/topic/Newest.20questions.20tagged.20lean.20-.20Stack.20Overflow/near/302931112</a> where I took it from :)</p>",
        "id": 302980786,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665217161
    },
    {
        "content": "<p>We talked about this in class today. Sinners-in the-hands-of-an-angry-god-style. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 303300988,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1665423262
    },
    {
        "content": "<p><del>But seriously, the most upsetting issue was the person on twitter that claimed this was from a freshmen CS course on discrete math. Really reminds me not to believe anything I read on the internet.</del></p>\n<p>I should have looked more closely. These were familiar not because they were all in the assignment but because they came from <a href=\"https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#exercises\">Chapter 4 exercises in Logic and Proof!</a></p>",
        "id": 303301265,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1665423401
    }
]