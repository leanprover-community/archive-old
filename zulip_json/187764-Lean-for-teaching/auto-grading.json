[
    {
        "content": "<p>I was scheduled to teach an undergraduate class based on the Hitchhiker's guide for the spring semester. Unfortunately, 8:30 am is attractive time slot for students. Who knew. It's been pushed back to fall '22. </p>\n<p>One of things I wanted to do was set up GitHub actions for auto-grading of Lean assignments. Something reusable would be nice. It looks straightforward to write some simple checks on the file. </p>\n<ol>\n<li>Do people have any existing setups? </li>\n<li>Is there any value in hardcore locking things down?</li>\n</ol>",
        "id": 263603014,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638548701
    },
    {
        "content": "<p>I would love to have this, too.</p>",
        "id": 263604136,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638549183
    },
    {
        "content": "<p>What I have done before is have students email me links to their code in the web editor (like <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=--------------------------------------------%0D%0A--Andrew%20Souther%2C%20HW2%20Extra%20Credit%20Problem--%0D%0A--------------------------------------------%0D%0A%0D%0Aimport%20data.real.basic%0D%0A%0D%0Alocal%20notation%20%60%7C%60x%60%7C%60%20%3A%3D%20abs%20x%0D%0A%0D%0A%2F-%20Definition%20of%20the%20limit%20of%20a%20sequence%20-%2F%0D%0Adef%20converges_to%20%28x%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28X%20%3A%20%E2%84%9D%29%20%3A%20Prop%20%3A%3D%0D%0A%E2%88%80%20%CE%B5%20%3E%200%2C%20%E2%88%83%20%28M%20%3A%20%E2%84%95%29%2C%20%E2%88%80%20%28n%20%E2%89%A5%20M%29%2C%20%7Cx%20n%20-%20X%7C%20%3C%20%CE%B5%0D%0A%0D%0A%2F-%20If%20the%20sequence%20%60x%60%20converges%20to%20%60X%60%2C%20then%20for%20any%20constant%20%60C%60%2C%20the%20sequence%20%60C%20*%20x%60%0D%0Aconverges%20to%20%60C%20*%20X%60.%20-%2F%0D%0Aexample%20%28x%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28X%20C%20%3A%20%E2%84%9D%29%20%28hf%20%3A%20converges_to%20x%20X%29%20%3A%0D%0A%20%20converges_to%20%28%CE%BB%20n%2C%20C%20*%20x%20n%29%20%28C%20*%20X%29%20%3A%3D%0D%0Abegin%0D%0A%20%20intros%20%CE%B5%20h%CE%B5%2C%0D%0A%20%20--%20We%20consider%20two%20cases%20depending%20on%20whether%20or%20not%20the%20constant%20%60C%60%20is%20zero.%0D%0A%20%20by_cases%20hC%20%3A%20C%20%3D%200%2C%0D%0A%20%20--If%20C%3D%200%2C%20we%20use%20the%20fact%20that%20C*x%20%3D%200%20for%20all%20n.%20Any%20M%20will%20do%20in%20this%20case.%0D%0A%20%20%7Bhave%20h_zero%3A%20%E2%88%80%20n%2C%20%28%CE%BB%20n%2C%20C%20*%20x%20n%29n%20%3D%200%2C%0D%0A%20%20%7Bintro%20n%2C%0D%0A%20%20rw%20hC%2C%0D%0A%20%20exact%20zero_mul%20%28x%20n%29%7D%2C%0D%0A%20%20have%20hC_zero%20%3A%20C%20*%20X%20%3D%200%20%3A%3D%20mul_eq_zero_of_left%20hC%20X%2C%0D%0A%20%20use%200%2C%0D%0A%20%20intros%20n%20hn%2C%0D%0A%20%20rw%20%5BhC_zero%2C%20h_zero%5D%2C%0D%0A%20%20norm_num%2C%0D%0A%20%20linarith%7D%2C%0D%0A%20%20--If%20C%20%E2%89%A0%200%2C%20we%20pick%20an%20M%20to%20ensure%20that%20%7Cx%20-%20X%7C%20%3C%20%28%CE%B5%20%2F%20%7CC%7C%29%0D%0A%20%20%7B%20--%20If%20%60C%20%E2%89%A0%200%60%2C%20then%20%60%7CC%7C%20%3E%200%60.%0D%0A%20%20%20%20have%20hC'%20%3A%20%7CC%7C%20%3E%200%20%3A%3D%20abs_pos_iff.mpr%20hC%2C%0D%0A%20%20%20%20have%20h_lambda%20%3A%20%E2%88%80%20n%2C%20%28%CE%BB%20%28n%20%3A%20%E2%84%95%29%2C%20C%20*%20x%20n%29%20n%20%3D%20C%20*%20%28x%20n%29%20%3A%3D%20congr_fun%20rfl%2C%0D%0A%20%20%20%20cases%20hf%20%28%CE%B5%2F%7CC%7C%29%20%28div_pos%20h%CE%B5%20hC'%29%20with%20M%20hM%2C%0D%0A%20%20%20%20use%20M%2C%0D%0A%20%20%20%20intros%20n%20hn%2C%0D%0A%20%20%20%20have%20h_dist%3A%20%20%28C%20*%20x%20n%20-%20C%20*%20X%29%20%3D%20%20%28C%20*%20%28x%20n%20-%20X%29%29%20%3A%3D%20by%20ring%2C%0D%0A%20%20%20%20rw%20%5Bh_lambda%2C%20h_dist%2C%20abs_mul%20C%20%28x%20n%20-%20X%29%5D%2C%0D%0A%20%20%20%20have%20%3A%20%7Cx%20n%20-%20X%7C%20%3C%20%CE%B5%20%2F%20%7CC%7C%20%E2%86%92%20%7CC%7C%20*%20%7Cx%20n%20-%20X%7C%20%3C%20%CE%B5%20%3A%3D%20%28lt_div_iff'%20hC'%29.mp%2C%0D%0A%20%20%20%20apply%20this%2C%0D%0A%20%20%20%20apply%20hM%2C%0D%0A%20%20%20%20exact%20hn%7D%0D%0Aend%0D%0A%0D%0A%0D%0A-------------%0D%0A--Lagniappe--%0D%0A-------------%0D%0A%0D%0A--Problem%204%20has%20such%20a%20similar%20structure%2C%20I%20thought%20it%20would%20be%20reasonable%20too.%0D%0A%0D%0Aexample%20%28x%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28X%20l%20%3A%20%E2%84%9D%29%20%28hf%20%3A%20converges_to%20x%20l%29%20%28h_g%20%3A%20l%20%3E%20X%29%3A%0D%0A%20%20%E2%88%83%20%28M%20%3A%20%E2%84%95%29%2C%20%E2%88%80%28n%20%3A%20%E2%84%95%29%2C%20n%20%E2%89%A5%20M%20%E2%86%92%20x%20n%20%3E%20X%20%3A%3D%0D%0Abegin%0D%0A%20%20have%20h%E2%82%81%20%3A%20l%20-%20X%20%3E%200%20%3A%3D%20%20sub_pos.mpr%20h_g%2C%0D%0A%20%20cases%20hf%20%28l%20-%20X%29%20h%E2%82%81%20with%20M%20hM%2C%0D%0A%20%20use%20M%2C%0D%0A%20%20intros%20n%20h%E2%82%82%2C%0D%0A%20%20by_cases%20h%E2%82%83%20%3A%20x%20n%20-%20l%20%3E%200%2C%0D%0A%20%20%7Bcalc%20x%20n%20%3E%20l%20%3A%20sub_pos.mp%20h%E2%82%83%0D%0A%20%20%20%20%20%20...%20%20%20%3E%20X%20%3A%20h_g%7D%2C%0D%0A%20%20%7Bhave%20h%E2%82%84%3A%20l%20-%20x%20n%20%3E%3D%200%20%3A%3D%20by%20linarith%2C%0D%0A%20%20have%20h%E2%82%85%20%3A%20l%20-%20x%20n%20%3C%20l%20-%20X%2C%0D%0A%20%20%7Bcalc%20l%20-%20x%20n%20%3D%20%7Cl%20-%20x%20n%7C%20%3A%20%28abs_of_nonneg%20h%E2%82%84%29.symm%0D%0A%20%20%20%20%20%20%20%20%20%20%20...%20%3D%20%7Cx%20n%20-%20l%7C%20%3A%20abs_sub%20l%20%28x%20n%29%0D%0A%20%20%20%20%20%20%20%20%20%20%20...%20%3C%20l%20-%20X%20%20%20%20%20%3A%20hM%20n%20h%E2%82%82%7D%2C%0D%0A%20%20linarith%7D%2C%0D%0Aend\">this</a>, cc <span class=\"user-mention\" data-user-id=\"366882\">@Andrew  Souther</span> ), so that I just click on the link and can confirm it works.</p>",
        "id": 263604428,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638549306
    },
    {
        "content": "<p>For my previous Lean course, I used copy-pasta from MS Teams. This semester I got familiar with <a href=\"http://classroom.github.com\">GitHub Classroom</a>. I only use it to auto-generate pdfs from the tex source in my grad course the moment.</p>",
        "id": 263604671,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638549449
    },
    {
        "content": "<p>I've been thinking of using Gradescope for this (I really like their features for handwritten assignments), but it's for-pay.<br>\n<a href=\"https://help.gradescope.com/article/h7ztxl9164-instructor-assignment-types#programming_assignments\">https://help.gradescope.com/article/h7ztxl9164-instructor-assignment-types#programming_assignments</a></p>",
        "id": 263604883,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638549559
    },
    {
        "content": "<p>It looks functionally equivalent to GH Classroom's offering. <a href=\"https://docs.github.com/en/education/manage-coursework-with-github-classroom/teach-with-github-classroom/use-autograding\">Docs</a></p>",
        "id": 263605020,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638549622
    },
    {
        "content": "<p>Which is really just some shortcuts for GH actions</p>",
        "id": 263605427,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638549861
    },
    {
        "content": "<p>I'm worried about expecting my math majors to understand git, remote authentication, etc ... do you know what the user experience is like?  (Can they just point-and-click upload a file?)</p>",
        "id": 263605473,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638549889
    },
    {
        "content": "<p>I took the position that knowing git is a job skill even for math PhDs and then forced them to use it. GH has made it pretty painless especially if they use the GUIs for MacOS/Win.</p>",
        "id": 263605662,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638549974
    },
    {
        "content": "<p>I also had a homework 0 which was git/GH training. <a href=\"https://github.com/UofSC-Fall-2021-Math-738-001\">Here</a> is the organization page for the class.</p>",
        "id": 263605757,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638550026
    },
    {
        "content": "<p>The main features I most enjoy about GH Classroom are</p>\n<ol>\n<li>the actions integration</li>\n<li>autocreation of PRs for each submitted assignment. It is so much easier to comment directly on a line of a file. </li>\n</ol>\n<p>But overall it is pretty bare bones.</p>",
        "id": 263606002,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638550126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> mentioned he had some existing tools.</p>",
        "id": 263606374,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638550265
    },
    {
        "content": "<p>Brown has a Gradescope subscription, so this semester I used that. My TAs tried to set up a simple autograder, but it was clunky, and they hadn't learned to metaprogram so it would have fallen on me to do it proplerly. I decided to save myself the effort and wait until next time I teach the class, when my TAs will know some metaprogramming and can do something more robust.</p>",
        "id": 263610391,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638552081
    },
    {
        "content": "<p>The problem is that (depending on how you structure the assignments) a check for \"does this file compile\" is both too strict and too weak. You may want to allow students to sorry certain lemmas, or if every problem is in the same file, you'd need extra code to distinguish in which problem the comilation error happens.</p>",
        "id": 263610619,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638552189
    },
    {
        "content": "<p>Conversely, you'd want to check that nobody defines an unsound axiom and uses that as a <code>sorry</code> that doesn't raise any warnings.</p>",
        "id": 263610763,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638552247
    },
    {
        "content": "<p>Really you want a metaprogram grading script that checks for a declaration with a certain name and type, and computes which axioms it uses. But even this isn't enough, if you have problems that ask students to state a theorem on their own -- there's probably a range of acceptable answers.</p>",
        "id": 263610910,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638552319
    },
    {
        "content": "<p>I have some scripts for a course based on Logic and Proofs. Here the assignment structure was much simpler: there were two Lean assignments, each with 20 .lean files, each containing one <code>sorry</code>ed theorem. So the autograder would import all 20 files, then run a metaprogram to check for sorry-free proofs with the right type.</p>",
        "id": 263611298,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638552489
    },
    {
        "content": "<p>Of course students still found ways to break that, out of ~150 submissions I'd have 15 that removed namespaces, or proved auxiliary lemmas with the same name in multiple files outside of the problem namespace, or whatever.</p>",
        "id": 263611495,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638552586
    },
    {
        "content": "<p>And this wasn't set up on GitHub or Gradescope. We used CoCalc so I'd just download a folder with all the submissions and the script would output a spreadsheet I could upload to Canvas.</p>",
        "id": 263611667,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638552642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263611495\">said</a>:</p>\n<blockquote>\n<p>Of course students still found ways to break that, out of ~150 submissions I'd have 15 that removed namespaces, or proved auxiliary lemmas with the same name in multiple files outside of the problem namespace, or whatever.</p>\n</blockquote>\n<p>Presumably, students would self-remedy if given immediate feedback on the assignment?</p>",
        "id": 263612514,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638553065
    },
    {
        "content": "<p>For sure. This wasn't doable with the CoCalc setup, I didn't know how to distribute an autograder without exposing the solutions. Certainly possible on Gradescope, and I assume on GitHub.</p>",
        "id": 263613074,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638553289
    },
    {
        "content": "<p>Er, actually, I guess the autograder for the L&amp;P course didn't need to know the solutions. I take it back</p>",
        "id": 263613180,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638553342
    },
    {
        "content": "<p>It should be possible to write an autograder for Fermat's Last Theorem without knowing the solution <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 263613817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638553635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263611298\">said</a>:</p>\n<blockquote>\n<p>I have some scripts for a course based on Logic and Proofs. Here the assignment structure was much simpler: there were two Lean assignments, each with 20 .lean files, each containing one <code>sorry</code>ed theorem. So the autograder would import all 20 files, then run a metaprogram to check for sorry-free proofs with the right type.</p>\n</blockquote>\n<p>Other than perhaps checking for some dubious <code>axiom</code>s and some more descriptive feedback, I didn't imagine more than this. </p>\n<p>I have no idea how to handle assignments where students roll their own statements.</p>",
        "id": 263613828,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638553643
    },
    {
        "content": "<p>Another answer to what computers can do for mathematicians: save them from reading non-sense proofs. If a student can both go to a blackboard and explain a statement and prove it in lean, I have decent confidence they can write a solid natural language proof.</p>",
        "id": 263614168,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638553798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263614168\">said</a>:</p>\n<blockquote>\n<p>Another answer to what computers can do for mathematicians: save them from reading non-sense proofs. If a student can both go to a blackboard and explain a statement and prove it in lean, I have decent confidence they can write a solid natural language proof.</p>\n</blockquote>\n<p>That is <em>extremely</em> optimistic in my experience. That's why I developed my controlled natural language tactics, in order to help students transfer their Lean proofs to paper.</p>",
        "id": 263621013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638556924
    },
    {
        "content": "<p>But they could stand at a board and explain things well?</p>",
        "id": 263621280,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638557073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263621013\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263614168\">said</a>:</p>\n<blockquote>\n<p>Another answer to what computers can do for mathematicians: save them from reading non-sense proofs. If a student can both go to a blackboard and explain a statement and prove it in lean, I have decent confidence they can write a solid natural language proof.</p>\n</blockquote>\n<p>That is <em>extremely</em> optimistic in my experience. That's why I developed my controlled natural language tactics, in order to help students transfer their Lean proofs to paper.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Are these controlled NL tactics a part of mathlib? I would love to have these for teaching students as well.</p>",
        "id": 263634993,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1638563941
    },
    {
        "content": "<p>They are not part of mathlib atm</p>",
        "id": 263635212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638564069
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-bavard\">https://github.com/PatrickMassot/lean-bavard</a></p>",
        "id": 263635237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638564091
    },
    {
        "content": "<p>I don't think they're even in English yet</p>",
        "id": 263635894,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638564427
    },
    {
        "content": "<p>But a repo with these tactics would be a great addition to <a href=\"https://leanprover-community.github.io/lean_projects.html\">https://leanprover-community.github.io/lean_projects.html</a></p>",
        "id": 263635909,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638564440
    },
    {
        "content": "<p>And a course repo could use that project as a dependency as well as mathlib</p>",
        "id": 263635944,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638564458
    },
    {
        "content": "<p>Thanks a lot! Oh wow, these are a lot of tactics!!</p>\n<p>I'll try and translate these to English over the winter break.</p>",
        "id": 263636186,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1638564582
    },
    {
        "content": "<p>Is there any way to use these in the lean web editor or something web-based that does not require a lean installation?</p>",
        "id": 263636276,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1638564620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263635894\">said</a>:</p>\n<blockquote>\n<p>I don't think they're even in English yet</p>\n</blockquote>\n<p>There is a partial English translation. I don't know if it is on github. But there is a talk on Youtube by Patrick from a month ago, where he does an english demo</p>",
        "id": 263636365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638564686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263636276\">said</a>:</p>\n<blockquote>\n<p>Is there any way to use these in the lean web editor or something web-based that does not require a lean installation?</p>\n</blockquote>\n<p>I guess you'd probably have to set up your own web editor and change the configuration slightly -- maybe <a href=\"https://github.com/leanprover-community/lean-web-editor/blob/master/combined_lib/leanpkg.toml\">here</a>? <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> would know better</p>",
        "id": 263637086,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638564867
    },
    {
        "content": "<p>Yeah, that's right. The <a href=\"https://github.com/leanprover-community/lean-web-editor/blob/master/README.md\">leanprover-community/lean-web-editor repo README</a> hopefully has enough information to get you started, otherwise feel free to ping me here.</p>",
        "id": 263654575,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1638566461
    },
    {
        "content": "<p>Great! I'll start hacking and see how it goes...</p>",
        "id": 263662635,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1638570962
    },
    {
        "content": "<p>I know I need to find time to work on this. But time is extremely scarce. I need to clean up things to make them easier to translate. And there are additional challenges with English because Lean already uses some English words that can't be reused.</p>",
        "id": 263706757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638623988
    },
    {
        "content": "<p>One issue with the English clash is that mathematicians seem to use \"apply\" to mean so many different things. I think it's a really hard tactic to teach! Not because what it does is difficult, but because even if you know what it does, it is still a word which pops into your head every time you want to apply a theorem (which might be an iff statement) or apply a theorem to a hypothesis, or basically use any technique at all on any part of the local context by applying the technique.</p>",
        "id": 263710144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638627099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/auto-grading/near/263710144\">said</a>:</p>\n<blockquote>\n<p>you want to apply a theorem (which might be an iff statement) or apply a theorem to a hypothesis, or basically use any technique at all on any part of the local context by applying the technique.</p>\n</blockquote>\n<p>I feel like it may be possible to generalize <code>apply</code> to these cases as well. For example, one could add an <code>apply f at h</code> to  apply functions to local hypotheses. Also, an <code>iff</code> statement could potentially have a <code>coe_fun</code> instance that coerces it to <code>mp</code> for <code>apply</code>.</p>",
        "id": 263714133,
        "sender_full_name": "Mac",
        "timestamp": 1638631834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I've seen examples where new users wanted to <code>apply</code> and <code>iff</code> where they meant <code>rw</code>. I completely understand why they might want to use <code>apply</code> there, because that's the word you would use informally. I think that \"rewrite\" is almost never used in informal maths.</p>",
        "id": 263714662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638632451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> fair enough. In that case there is an unfortunate clash between functional terminology and proof terminology that does not have an easy answer. If one was writing more natural tactics it may be a good idea to rename <code>apply</code> to <code>fapply</code>, <code>apply_fun</code>, or <code>apply function</code> and use plain <code>apply</code> for <code>rewrite</code>/<code>rw</code> (or potentially <code>simp</code>).</p>",
        "id": 263714821,
        "sender_full_name": "Mac",
        "timestamp": 1638632680
    },
    {
        "content": "<p>I agree with these points. I myself find it hard to use <code>apply</code> and I only ever use it retrospectively to compactify. Perhaps <code>suffices</code> is a replacement? <code>rw</code> and <code>ext</code> are words that don't translate easily into math. And I don't quite get the differences between<code>let</code> <code>set</code> and <code>have</code> lol. </p>\n<p>I still think it would be worthwhile to try and get NL tactics, even if they end up being clumsy and inefficient.</p>",
        "id": 263736038,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1638658019
    },
    {
        "content": "<p>I'll try to translate at least a few of Patrick's tactics. I really want to see some basic proof in Lean being more or less indistinguishable from a math proof on paper.</p>",
        "id": 263736190,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1638658212
    },
    {
        "content": "<p>For teaching purposes, my experience is that the vagueness of the \"apply\" word is indeed extremely problematic (we have the same issue in French). And I also agree that <code>rw</code> doesn't translate well on paper. I'm not happy with my NL version of <code>rw</code> which doesn't sound natural (because nothing would).</p>",
        "id": 263736903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638659169
    },
    {
        "content": "<p>About <code>let</code> and <code>have</code>, I sometimes wish Lean would distinguish between those. It's a trap that almost all beginners fall into. But for teaching purposes I'm very happy that Lean distinguishes them. I don't want my students to mix defining data and asserting a statement.</p>",
        "id": 263736947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638659280
    }
]