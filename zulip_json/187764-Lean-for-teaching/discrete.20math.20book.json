[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124175\">@Kevin Sullivan</span> , I am reading <a href=\"https://kevinsullivan.github.io/cs-dm-dev/index.html\" title=\"https://kevinsullivan.github.io/cs-dm-dev/index.html\">https://kevinsullivan.github.io/cs-dm-dev/index.html</a>, a very nice introduction to Lean and proofs. It is definitely an interesting alternative to the Avigad book that I used in my last DM course. One thing that called my attention is that you haven't gone deep (in chapter 2) to the difference between <code>#eval</code> and <code>#reduce</code>. One particular puzzle to me is way </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>does not. In contrast, the evaluation or reduction of an identifier bound to a lambda term always works.</p>",
        "id": 196072546,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1588457807
    }
]