[
    {
        "content": "<p>The two formulations are equivalent, but the <code>def</code> has an additional definitional equality (not a thing in FOL), and it also doesn't require any risky <code>axiom</code>s</p>",
        "id": 210458318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600381004
    },
    {
        "content": "<p>But the latter can be manipulated on proofs. We could eventually have more axioms (or variables)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">brother</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↔</span>\n <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>and try to proof things like <code>∀ n m, ¬ (father n m ∧ brother n m)</code> , right? Using <code>def</code> we lose this clear logic-based approach, am I right?</p>",
        "id": 210459512,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1600381930
    },
    {
        "content": "<p>You can prove the axiom using reflexivity</p>",
        "id": 210461038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600383056
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">father</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>   <span class=\"c1\">-- `father x y`</span>\n<span class=\"kn\">constant</span> <span class=\"n\">mother</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>   <span class=\"c1\">-- `mother x y`</span>\n\n<span class=\"n\">def</span> <span class=\"n\">brother</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">b1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">brother</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">father</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">mother</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 210461080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600383100
    },
    {
        "content": "<p>you could either prove <code>b1</code> like that first and then use it in the proof, or elide <code>b1</code> entirely and just unfold as necessary</p>",
        "id": 210461175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600383170
    }
]