[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">xnat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">xnat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">le</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">some_easy_thing</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;-- THIS</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  2 goals</span>\n<span class=\"cm\">case xnat.le.refl</span>\n<span class=\"cm\">a : xnat,</span>\n<span class=\"cm\">h : a ≤ a</span>\n<span class=\"cm\">⊢ false</span>\n\n<span class=\"cm\">case xnat.le.succ</span>\n<span class=\"cm\">a c : xnat,</span>\n<span class=\"cm\">hc : le a c, &lt;-- AND THIS</span>\n<span class=\"cm\">h : a ≤ succ c</span>\n<span class=\"cm\">⊢ false</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>That <code>cases h with _ _ c hc</code> line is problematic for beginners in two ways; firstly, the <code>_ _</code> nonsense (which I actually don't really understand myself, I just got it right through experiment) and secondly the fact that the result is <code>hc : le a c</code> instead of <code>hc : a ≤ c</code>. I tried <code>rcases</code> but the <code>le</code> leakage still occurred.</p>\n<p>As part of my plan of doing anything other than going to my office today, I'm thinking about teaching materials. I am pretty sure this issue has come up before and perhaps there are clever solutions using clever things, but I am hoping for a solution which is intuitive for beginners. If that solution is \"don't use inductive props\" then so be it, but I really like the idea of an inductive prop for <code>le</code>, just as some sort of introduction for mathematicians to the power of inductive types -- they're \"not just for nat\".</p>",
        "id": 166076766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558351581
    },
    {
        "content": "<p>PS <a href=\"/user_uploads/3121/FIt3QAQzs8ebROYvWYN44Y9i/rcases.png\" target=\"_blank\" title=\"rcases.png\">rcases.png</a> <br>\nwhat needs to be done to make that terrifying-for-beginners thing not happen any more?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FIt3QAQzs8ebROYvWYN44Y9i/rcases.png\" target=\"_blank\" title=\"rcases.png\"><img src=\"/user_uploads/3121/FIt3QAQzs8ebROYvWYN44Y9i/rcases.png\"></a></div>",
        "id": 166076884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558351697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> really late, but one thing is to replace <code>instance : has_le xnat := ⟨le⟩</code> with <code>infix ` ≤ ` := le</code>. Not the best though</p>",
        "id": 166418065,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558665410
    },
    {
        "content": "<p>make that <code>local infix</code> or else disambiguation will give you a bad day</p>",
        "id": 166418219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558665627
    },
    {
        "content": "<p>That stinks. Why is the leakage happening? I'm realising the importance of syntactic equality now, because I'm trying to get <code>simp</code> to perform.</p>",
        "id": 166425695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558677826
    },
    {
        "content": "<p>Because that's how <code>le</code> is defined</p>",
        "id": 166425827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678014
    },
    {
        "content": "<p><code>le</code> is defined using <code>le</code></p>",
        "id": 166425836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678024
    },
    {
        "content": "<p>not <code>&lt;=</code></p>",
        "id": 166425840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678027
    },
    {
        "content": "<p>When you use <code>cases</code>, you are basically applying the function <code>xnat.le.cases_on</code>, which doesn't mention <code>&lt;=</code></p>",
        "id": 166425846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678071
    },
    {
        "content": "<p>Am I stick in some catch 22 here?</p>",
        "id": 166425896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558678097
    },
    {
        "content": "<p>it requires <code>le x y</code> as input and you give it <code>x &lt;= y</code>, so lean unfolds it; in the hypotheses which become subgoals there are more references to <code>le</code> and lean doesn't \"refold\" them because that's not a thing</p>",
        "id": 166425906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678132
    },
    {
        "content": "<p>This is why equation lemmas exist</p>",
        "id": 166425907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678140
    },
    {
        "content": "<p>otherwise whenever you unfold <code>a + succ b</code> you would get <code>succ (&lt;unreadable mess&gt; a b)</code></p>",
        "id": 166425921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678174
    },
    {
        "content": "<p>But there is no equation lemma for cases_on</p>",
        "id": 166425985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678218
    },
    {
        "content": "<p>you have to define the function yourself, and use it</p>",
        "id": 166425992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678230
    },
    {
        "content": "<p>I see. Then we lose the ability to apply the <code>cases</code> and <code>rcases</code> tactics though</p>",
        "id": 166426017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558678298
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">cases_on&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">},</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">some_easy_thing</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">cases_on&#39;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- etc</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I don't think this is better than the alternative</p>",
        "id": 166426107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678436
    },
    {
        "content": "<p>I don't know if you've ever tried induction on <code>a &lt;= b</code> where <code>a b : nat</code> but it's not pretty</p>",
        "id": 166426177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558678522
    },
    {
        "content": "<p>I developed enough of the theory to show that nat was a totally ordered semiring</p>",
        "id": 166426264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558678644
    },
    {
        "content": "<p>I was trying to figure out the best way to teach this stuff</p>",
        "id": 166426269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558678670
    },
    {
        "content": "<p>I don't think it's a leap to say that since you just defined a thing called <code>le</code>, lean says <code>le</code></p>",
        "id": 166426996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558679579
    },
    {
        "content": "<p>One option is to delay the introduction of the notation until after the proofs, so that there is no reason to expect the notation in the first place</p>",
        "id": 166427015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558679606
    },
    {
        "content": "<p>Mathematicians want the notation ASAP.</p>",
        "id": 166434583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558688320
    },
    {
        "content": "<p>sure, but I would argue that the notation <code>&lt;=</code> isn't really appropriate until after you know it actually is an order</p>",
        "id": 166436081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558689730
    },
    {
        "content": "<p>I mean, there's no reason why we couldn't have an attribute which explains how to pretty-print a function... (except for the fact that that would need to be in lean itself)</p>",
        "id": 166436752,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558690464
    },
    {
        "content": "<p>how would that be different from notation?</p>",
        "id": 166438347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558692047
    },
    {
        "content": "<p>Well <code>le</code> would render like Kevin wants in this case</p>",
        "id": 166438381,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558692083
    },
    {
        "content": "<p>Oh, you can set a notation as pp only I think</p>",
        "id": 166438489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558692196
    },
    {
        "content": "<p>I mean this is bringing us back to the (local) infix solution</p>",
        "id": 166438500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558692214
    },
    {
        "content": "<p>Oh ok cool</p>",
        "id": 166438575,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558692264
    },
    {
        "content": "<p>The reason I thought I wanted the notation solution was that (1) I wanted stuff to look like the way mathematicians would expect and (2) I was worried that dealing with le explicitly will mess up simp lemmas. I am still a bit muddled about how this is all supposed to work. I've just been learning about simp (by reading stuff like <code>complex.lean</code> and seeing how to prove the complexes form a ring by applying <code>simp; ring</code> (which looks to me like a non-terminal <code>simp</code> in mathlib...) a lot. I now realise the importance of choosing the \"canonical form\" of something and then sticking to it, and I felt that this <code>cases</code> argument was leaking out some non-canonical form.</p>",
        "id": 166452623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558704851
    },
    {
        "content": "<p>The yuck <code>rcases</code> business is gone now <a href=\"https://github.com/leanprover-community/mathlib/issues/1091\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1091\">#1091</a></p>",
        "id": 166719979,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559052189
    }
]