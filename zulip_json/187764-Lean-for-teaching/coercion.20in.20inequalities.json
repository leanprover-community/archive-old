[
    {
        "content": "<p>hi i'm trying to prove <a href=\"https://en.wikipedia.org/wiki/Bernoulli%27s_inequality\">Bernoulli's inequality</a> in lean.</p>\n<p>this is what I got so far, getting into trouble handling the nat-&gt;real coercion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">-- allow proofs by contradiction</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">noncomputable theory</span> <span class=\"c1\">-- don't fuss about the reals being noncomputable</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">infi1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_ineq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- what now</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">infi1</span>\n</code></pre></div>\n<p>by the end of the proof, h3 looks alot like the goal, just need to prove h4. I failed to find the right coercion dance to solve h4, would appreciate some help :^)</p>",
        "id": 315107761,
        "sender_full_name": "Guy",
        "timestamp": 1670693209
    },
    {
        "content": "<p>Does <code>norm_cast</code> help?</p>",
        "id": 315107936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670693284
    },
    {
        "content": "<p>Maybe <code>exact_mod_cast h3</code>?</p>",
        "id": 315107956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670693297
    },
    {
        "content": "<p>Also, you should change your assumption <code>[h : x ≥ -1]</code> to <code>(h : x ≥ -1)</code> since you can't use typeclass inference there.</p>",
        "id": 315108041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670693346
    },
    {
        "content": "<p>thanks for the ( ) tip. norm_cast doesn't do apparent help unfortunately. the main issue (i think?) is the split from <code>↑(d + 1)</code> to <code>↑d + 1</code></p>",
        "id": 315108660,
        "sender_full_name": "Guy",
        "timestamp": 1670693656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514808\">@Guy</span> your message would get a lot more eyes on it if you posted it in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> rather than in the teaching stream. You can probably move the message, or maybe you have to ask a moderator to do so.</p>",
        "id": 315108786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670693728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  thanks for the tip, may I just repost?</p>",
        "id": 315108940,
        "sender_full_name": "Guy",
        "timestamp": 1670693804
    },
    {
        "content": "<p>Yeah that would work.</p>",
        "id": 315109130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670693903
    }
]