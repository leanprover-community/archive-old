[
    {
        "content": "<p>Apologies if this is a newbie question, but I am a Lean newbie.</p>\n<p>I've written an online textbook, Programming Language Foundation in Agda (<a href=\"http://plfa.inf.ed.ac.uk\">plfa.inf.ed.ac.uk</a>), and am considering adapting it to Lean. In the textbook, each chapter is a separate markdown file containing literate Agda. The beginning of the chapter needs to import relevant bits of the standard library, but then everything subsequent in the chapter can make use of any definitions, lemmas, and so on from earlier in the chapter. Let's call this \"literate\" style. (It descends from Donald Knuth's Literate Programming, via the literate style for Haskell introduced by Richard Bird.)</p>\n<p>In contrast, in Theorem Proving in Lean (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a>), each code snippet is independent. Every example needs to import anything relevant from mathlib or from earlier in the chapter. There is support for hiding lines that import from mathlib or copy earlier developments in order to make the text more readable. Let's call this \"snippet\" style.</p>\n<p>My question is, do there exist tools for Lean that support the \"literate\" style as opposed to the \"snippet\" style? I couldn't find any with an hour or so of search. Thank you for your help!</p>",
        "id": 287503162,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1656263236
    },
    {
        "content": "<p>This is not available in Lean 3 right now but in Lean 4 we have LeanInk (<a href=\"https://github.com/leanprover/LeanInk/\">https://github.com/leanprover/LeanInk/</a>) which is a lean frontend to the well known coq alectryon (<a href=\"https://github.com/cpitclaudel/alectryon\">https://github.com/cpitclaudel/alectryon</a>) and is as of this week integrate into the lean 4 docuemtnation tool doc-gen4 (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Defs.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Defs.html</a>, you can click on the <code>ink</code> button in any <code>Mathlib</code> submodule to see the doc-gen rendered version of the LeanInk output). This isn't nearly as advanced as the alectryon renderer right now but I do plan to push it to the point where we can basically write our books/tutorials whatever with it in this interactive style you are searching for, though this will definitely take some time.</p>",
        "id": 287503666,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656263769
    },
    {
        "content": "<p>This should be compatible with Lean 3:<br>\n<a href=\"https://github.com/arthurpaulino/lean2md\">https://github.com/arthurpaulino/lean2md</a><br>\nEdit: nvm, you need to go the other way around (md to lean, not lean to md)</p>",
        "id": 287503805,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656263997
    },
    {
        "content": "<p>The setup in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a> is closer to what you want. See <a href=\"https://github.com/avigad/mathematics_in_lean_source\">https://github.com/avigad/mathematics_in_lean_source</a>. The actual source is a bunch of Lean files containing restructured text markup, for instance <a href=\"https://github.com/avigad/mathematics_in_lean_source/blob/master/lean_source/07_Topology/source_01_Filters.lean\">https://github.com/avigad/mathematics_in_lean_source/blob/master/lean_source/07_Topology/source_01_Filters.lean</a>. The point of using a Lean file is that you can get feedback from Lean while writing. It could be adapted easily to use md instead of rst (Jeremy was used to restructured text instead of markdown).</p>",
        "id": 287512511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656275442
    },
    {
        "content": "<p>However this is still a hack. We are refraining to seriously work on such tools until we really switch to Lean 4.</p>",
        "id": 287512531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1656275494
    },
    {
        "content": "<blockquote>\n<p>Jeremy was used to restructured text instead of markdown</p>\n</blockquote>\n<p>I am actually o.k. with both. Restructured text has some advantages over markdown, like better mechanisms for including links, references, figures, and math formulas. (Google will provide various comparisons.)</p>\n<p>The Python scripts used to generated the files for MIL are pretty rudimentary. I wrote them in a rush, so there is definitely room for improvement. But they work really well, and it is extremely helpful to write the text and the Lean in the same file. For years I would write the text in one file and the Lean examples in another and then cut and paste. This is much better. It also made it easier to generate files containing solutions to the exercises -- i.e. you write the exercise and the solutions in the same Lean file, and some simple markup indicates which is which.</p>\n<p>We have also talked about connecting this with Alectryon / Lean Ink so that readers can step through proofs by hovering over the text in the browser.</p>",
        "id": 287723721,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1656426488
    },
    {
        "content": "<p>Another advantage of restructured text is that it has extensibility built in in a standardized way (custom <code>:role:</code>s and <code>.. admonition::</code>s). As far as I can tell, the main downside is that in practice it's more of a standard implementation than a specification, which means we have to have python in the system somewhere and can't really put the whole thing in lean itself.</p>",
        "id": 287729318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656428855
    },
    {
        "content": "<p>After my exams in july i was planning on porting the CMark renderer we use for markdown in doc-gen right now to pure Lean so we can also reuse it nicely in the LeanInk rendering. Is there a clear preference here? I'll be happy to implement either of them but not both at the same time, at least not while the rest isn't fleshed out.</p>",
        "id": 287732013,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656429920
    },
    {
        "content": "<p>CMark is what doc-gen4 uses? doc-gen3 uses mistletoe, but I was planning to port it to markdown-it once an upstream math-formatting patch is merged</p>",
        "id": 287744462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656434952
    },
    {
        "content": "<p>(I think markdown-it is what vscode uses internally)</p>",
        "id": 287744516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656434978
    },
    {
        "content": "<p>Yeah we use cmark to avoid any other language dependencies, CMark is a C lib and since you already necessarily have a c compiler when you compile Lean 4 that's just natural, the move away from mistletoe was intentional.</p>",
        "id": 287744633,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656435039
    },
    {
        "content": "<p>CMark doesn't support math, right? (edit: <a href=\"https://github.com/commonmark/cmark/issues/439\">https://github.com/commonmark/cmark/issues/439</a>)</p>",
        "id": 287744730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656435106
    },
    {
        "content": "<p>Not to my knowledge no, but that (among getting rid of the dpendency on pure C as well :D) is one of the reasons I want to look into writing a renderer in pure Lean 4. So naturally the question comes up whether it should be a markdown or RST one. But given that we probably want to render math it looks like RST is going to win huh?</p>",
        "id": 287745093,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656435299
    },
    {
        "content": "<p>In principle you could probably compile markdown-it (javascript) to a C interface via Emscripten, then call that from Lean?</p>",
        "id": 287745316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656435412
    },
    {
        "content": "<p>I guess that might be possible yeah, though I dont really see the advantage over CMark at that point?</p>",
        "id": 287745589,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656435526
    },
    {
        "content": "<p>The fact that you get math support (via an extension), without having to write everything from scratch</p>",
        "id": 287745711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656435577
    },
    {
        "content": "<p>Getting back to Phillips original question, yes it is possible now that we have LeanInk and alectryon and mdbook working together :-) I believe the following example is following the <code>Literate Style</code> of writing a book.  This <a href=\"https://github.com/leanprover/lean4-samples/tree/main/NaturalNumbers\">Natural Numbers Tutorial</a> (derived from the famous Natural Number Game) is written in Lean then uses LeanInk to create markdown then it uses <code>mdbook</code> to generate nice HTML with a TOC on the left, the TOC comes from SUMMARY.md.  The result looks like this <a href=\"https://lovettsoftware.com/NaturalNumbers/\">https://lovettsoftware.com/NaturalNumbers/</a>.  Each code block in each .lean file can build on previous code blocks and each file can also import previous sections to build on those and so on.  Notice the mdbook is enabling mathjax so you can even do inline latex formulas if you want like you see in <a href=\"https://lovettsoftware.com/NaturalNumbers/FunctionWorld/Level5.lean.html\">Function World Level5</a> with the expressions <code>\\\\(10^{10^{10}}\\\\)</code> which is rendered like this:<br>\n<a href=\"/user_uploads/3121/7-PMCuzbkFYOMhBpaAF6ZQpJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7-PMCuzbkFYOMhBpaAF6ZQpJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7-PMCuzbkFYOMhBpaAF6ZQpJ/image.png\"></a></div>",
        "id": 304092139,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665771785
    },
    {
        "content": "<p>Really nice!<br>\nI noticed the github links in the top right go to the wrong url though: <a href=\"https://github.com/leanprover/lean4-samples/NaturalNumbers\">https://github.com/leanprover/lean4-samples/NaturalNumbers</a> rather than <a href=\"https://github.com/leanprover/lean4-samples/tree/main/NaturalNumbers\">https://github.com/leanprover/lean4-samples/tree/main/NaturalNumbers</a></p>",
        "id": 304094924,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665772842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> Nice work!  For my own applications (typical example: <a href=\"https://hrmacbeth.github.io/computations_in_lean/03_Nonsingularity_of_Curves.html\">html</a> and the code it's built on <a href=\"https://github.com/hrmacbeth/computations_in_lean/blob/main/src/03_Nonsingularity_of_Curves/01_powers_case_splits.lean\">1</a> <a href=\"https://github.com/hrmacbeth/computations_in_lean/blob/main/src/03_Nonsingularity_of_Curves/02_projective_curves.lean\">2</a>) I would like to show only snippets of the full source code, with other parts hidden.  For example, no need to show the reader this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2022 Heather Macbeth. All rights reserved.</span>\n<span class=\"cm\">Authors: Heather Macbeth</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.pderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.polyrith</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! This file contains a lot of computationally-intensive evaluation of polynomials and their</span>\n<span class=\"cm\">derivatives. We speed it up slightly by specifiying in advance the path the simplifier should take.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">mk_simp_attribute</span> <span class=\"n\">poly_simps</span> <span class=\"s2\">\"simp-lemmas for polynomials\"</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">poly_simps</span><span class=\"o\">]</span> <span class=\"n\">mv_polynomial.eval_X</span> <span class=\"n\">mv_polynomial.eval_C</span>\n  <span class=\"n\">map_add</span> <span class=\"n\">map_sub</span> <span class=\"n\">map_mul</span> <span class=\"n\">map_neg</span> <span class=\"n\">map_bit0</span> <span class=\"n\">map_bit1</span> <span class=\"n\">map_one</span> <span class=\"n\">map_pow</span> <span class=\"n\">map_zero</span>\n  <span class=\"n\">matrix.cons_val_zero</span> <span class=\"n\">matrix.cons_val_one</span> <span class=\"n\">matrix.head_cons</span>\n  <span class=\"n\">matrix.cons_vec_bit0_eq_alt0</span> <span class=\"n\">matrix.cons_vec_bit1_eq_alt1</span>\n  <span class=\"n\">matrix.cons_vec_alt0</span> <span class=\"n\">matrix.cons_vec_alt1</span>\n  <span class=\"n\">matrix.cons_append</span> <span class=\"n\">matrix.empty_append</span>\n  <span class=\"n\">derivation.leibniz</span> <span class=\"n\">derivation.leibniz_pow</span> <span class=\"n\">pderiv_C</span> <span class=\"n\">pderiv_X_of_ne</span> <span class=\"n\">pderiv_X_self</span> <span class=\"n\">pi.single_eq_of_ne</span>\n  <span class=\"n\">algebra.id.smul_eq_mul</span> <span class=\"n\">nsmul_eq_mul</span>\n  <span class=\"n\">nat.cast_bit1</span> <span class=\"n\">nat.cast_bit0</span> <span class=\"n\">nat.cast_one</span>\n  <span class=\"c1\">-- `ring`/`linear_combination` would take care of the next ones, but we add them to aid human</span>\n  <span class=\"c1\">-- inspection</span>\n  <span class=\"n\">mul_zero</span> <span class=\"n\">zero_mul</span> <span class=\"n\">mul_one</span> <span class=\"n\">one_mul</span> <span class=\"n\">add_zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">pow_one</span> <span class=\"n\">mul_neg</span> <span class=\"n\">neg_zero</span>\n</code></pre></div>",
        "id": 304096645,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665773534
    },
    {
        "content": "<p>Is this possible?</p>",
        "id": 304096666,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665773541
    }
]