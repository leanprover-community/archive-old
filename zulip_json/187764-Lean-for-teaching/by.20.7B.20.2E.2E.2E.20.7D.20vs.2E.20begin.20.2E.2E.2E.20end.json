[
    {
        "content": "<p>I'm using Lean to teach interactive theorem proving. Lean is a vehicle, not an end, so I'm working had to keep the fragment minimal.</p>\n<p>We cover <code>by ...</code>, <code>begin ... end</code>, and <code>{ ... }</code> (for multiple subgoals). I'm thinking we could kill <code>begin ... end</code> by using <code>by { ... }</code> instead. Would there be any practical disadvantages to that, beyond the fact that this might be a bit unidiomatic Lean? I can't see any difference in VS Code, but maybe I'm missing something?</p>",
        "id": 201417900,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1592587011
    },
    {
        "content": "<p>Under the hood there is an extra unnecessary call to <code>solve1</code>, but other than that I can't think of any way to distinguish the two</p>",
        "id": 201421425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592588995
    },
    {
        "content": "<p>and it's less characters so <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 201421486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592589011
    },
    {
        "content": "<p>When I give talks, the audience usually knows latex already, so sometimes I tell them that they need to translate as follows</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">blabla</span> <span class=\"o\">:=</span>\n\n<span class=\"c1\">-- \\begin{lemma} \\label{foobar}</span>\n<span class=\"c1\">-- Let $X$ be a ...</span>\n<span class=\"c1\">-- Then blabla</span>\n\n<span class=\"k\">begin</span>\n  <span class=\"n\">tac1</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- \\begin{proof}</span>\n<span class=\"c1\">-- blabla</span>\n<span class=\"c1\">-- \\end{proof}</span>\n</code></pre></div>\n\n\n<p>I think the <code>begin ... end</code> is actually somewhat comforting for people with a LaTeX background. But of course this is a vague feeling on my side, and a very minor issue anyways.</p>",
        "id": 201463255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592630911
    },
    {
        "content": "<p>Yeah I'd rather go the other way personally and kill <code>{...}</code> in favour of <code>begin ... end</code> but I guess it depends on the audience!</p>",
        "id": 201463371,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592631163
    },
    {
        "content": "<p>Well I need to teach <code>{ ... }</code> anyway for focusing on one of multiple subgoals, so there would be a slight economy in killing <code>begin ... end</code> as opposed to avoiding <code>by { ... }</code> (which has been my policy so far).</p>",
        "id": 201468029,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1592641063
    },
    {
        "content": "<p>You can use <code>begin end</code> in place of <code>{ }</code> for focusing on subgoals btw</p>",
        "id": 201468135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592641273
    },
    {
        "content": "<p>Obviously we need to start writing proofs like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span> <span class=\"kn\">end</span>\n  <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n              <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n              <span class=\"n\">refl</span> <span class=\"kn\">end</span> <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201468192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592641429
    },
    {
        "content": "<p>Trust me, you don't need <code>{ }</code> to solve a subgoal :-) In NNG I just tell them \"tactics work on the top goal\" :-) . In experiments with mathematicians, I found that even getting them to remember to put commas at the end of tactics was an achievement. Every time sometime failed at this I'd add another \"don't forget the comma\" comment in NNG and we ended up with me saying it about ten times. Perhaps your users are more sophisticated though :-)</p>",
        "id": 201468442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592641940
    },
    {
        "content": "<p>The style Mario suggested is also suggested in TPIL and when I mentioned it here before, the community's reaction was rather disdainful</p>",
        "id": 201468458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592641999
    },
    {
        "content": "<p>I have a lot of disdain for indentation styles where the indent depends on the length of words</p>",
        "id": 201468507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592642078
    },
    {
        "content": "<p>even</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"n\">tac1</span><span class=\"o\">,</span>\n   <span class=\"n\">tac2</span>\n</code></pre></div>\n\n\n<p>drives me nuts because it screws up all the tab stops</p>",
        "id": 201468535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592642148
    },
    {
        "content": "<p>We use structured induction a lot and <code>case</code> works well in tandem with <code>{ ... }</code>. Computer scientists have no problems with braces I think.</p>",
        "id": 201469184,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1592643388
    },
    {
        "content": "<p>As for the \"community's reaction\", well, I'm not trying to teach idiomatic Lean anyway. I'm sure the community's reaction would be negative if I told them I don't teach <code>rfl</code>, I use <code>fix</code> as an alias for <code>assume</code> (for data), etc. But they're not my audience. If <code>by { ... }</code> works as well as <code>begin ... end</code>, I think I'll embrace it.</p>",
        "id": 201469233,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1592643491
    },
    {
        "content": "<p>An alternative fix for Mario's objection is to only use 5 letter tactics</p>",
        "id": 201469706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592644463
    }
]