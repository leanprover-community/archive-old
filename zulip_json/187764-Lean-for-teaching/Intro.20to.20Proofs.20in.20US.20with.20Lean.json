[
    {
        "content": "<p>Last fall, I decided to incorporate Lean into our existing Introduction to Mathematical Reasoning course here at UofSC. The goal of the course was definitely not Lean for Lean's sake. Rather, I wanted to see if Lean could be useful for students whose ultimate outcome is to compose convincing written or oral natural language proofs of basic mathematical statements. In my experience, teaching students to write good proofs requires many detailed feedback cycles per assignment. Better than me, Lean provides immediate feedback as to problems. My main concern was whether including the additional language of Lean would constitute too much inertia for students to realize any pedagogical of Lean. </p>\n<p>The majority of students were first-year in our honors program. So the student background was essentially good US high school education which includes seeing calculus/taking calculus concurrently. In particular, students were not expected to have any experience with mathematics at the UG level nor any programming experience. It turned out the majority of students were CS majors that were also thinking about incorporating math into their degree in some way (dual major, minor, or just mathed-up). </p>\n<p>For a textbook, I initially leaned on <a href=\"http://avigad.github.io/logic_and_proof/\">Logic and Proof</a> to structure the flow of material.  By midway through, I had incorporated <a href=\"https://infinitedescent.xyz/\">Infinite Descent</a> and authored a good portion of the Lean components of the assignment. We covered logic, sets, functions, and then delved into basics of group theory by focusing on four main classes, cyclic, symmetric, dihedral, and free groups. </p>\n<p>The first 2.5 months of the course were structured closer to traditional lecture. I tried to break up me just talking to students with some small group work periodically. After this, we had covered logic, sets, functions, and relations. During this time, students worked on homework in rotating groups. The assignments were about 2/3-3/4 written problems and 1/4-1/3 lean problems. Tactic-based proofs were essentially buried for the majority of course. Forcing students to confront a term-based assume, have, show proof in Lean forced them to rectify their thoughts. As an added benefit, it made identifying whether a problem with a written proof came from poor communication or poor understanding easier. If a student could compose a proof that compiled but I didn't understand their written work, then I knew where to focus the attention. </p>\n<p>Each week for the final 4 weeks, I handed out worksheets on the 4 classes of groups above. Students were required to fill in the proofs and present some of their proofs. There was no Lean here. The structure was strongly influenced by <a href=\"https://math.jhu.edu/~eriehl/301/\">this course at JHU</a>. </p>\n<p>Finally, in place of a final exam, there was final project chosen from a selection. By far, the most popular option was beating the NNG. I take this as the strongest indication of students' appreciation for Lean overall.</p>\n<p>Anecdotal conversations lead me to believe that the individual appreciation was highly variable. Some students loved it and thought it was the best part of the course. Others viewed it as a distraction to the core material though I think they understand why I believed it brought value. I don't think anyone actively detested it partly because you could still earn a good grade without much proficiency in Lean. </p>\n<p>I think, overall, it went gang-busters. Ultimately, I'd like to build these into undergraduate major and graduate qualifying courses.</p>",
        "id": 229909845,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1615490597
    },
    {
        "content": "<p>Many thanks for your report. Are any of your teaching resources eg Lean files available online?</p>",
        "id": 229985071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615532036
    },
    {
        "content": "<p>Unfortunately, right now, everything is embedded in Microsoft Teams and often in strange ways to ease workflow. For example, all my lean files have .txt extensions because the file viewer in Teams balked at rendering .lean files in the pop-up window. To get a sense of what a homework assignment looked like, here is the lean component on the week we did relations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">irreflexive</span>  <span class=\"c1\">-- definition of irreflexive</span>\n<span class=\"k\">#print</span> <span class=\"n\">transitive</span> <span class=\"c1\">-- definition of transitive</span>\n<span class=\"k\">#print</span> <span class=\"n\">anti_symmetric</span> <span class=\"c1\">-- definition of anti-symmetric</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">irreflR</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c1\">-- a proof that R is irreflexive</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">transR</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c1\">-- a proof that R is transitive</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Question 1: Prove that an irreflexive and transitive relation is anti-symmetric -/</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">anti_symmetric</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Question 2 -/</span>\n<span class=\"kn\">section</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">equivR</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">equivalence</span> <span class=\"c1\">-- take a look at the definition of equivalence in Lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">reflexive</span>\n<span class=\"k\">#print</span> <span class=\"n\">symmetric</span>\n<span class=\"k\">#print</span> <span class=\"n\">transitive</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Rop</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"c1\">-- the \"opposite\" relation to R</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">Rop</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Question 3 -/</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv_class</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variable</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">equiv_class</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"c1\">-- see what Lean thinks this is</span>\n<span class=\"k\">#check</span> <span class=\"n\">ext_iff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equivR</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv_class</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">equiv_class</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230028008,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1615555730
    },
    {
        "content": "<p>Additionally, I discovered that having to translate a statement often required some understanding of the statement. For example, if all our calculus homework were turned in Lean, then the instances of search-copy-paste solutions to assignments would approach 0. Currently, we are at nice spot in the development of Lean where it is documented sufficiently so students (and instructors) shouldn't struggle with the basics of the language but, at the same time, you can't toss your question into a google search and pull up a solution.</p>",
        "id": 230028610,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1615555996
    },
    {
        "content": "<p>That being said, I definitely benefited from <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> sharing his course materials from CMU. So I would be happy to share what I have via email. People should not hesitate to reach out.</p>",
        "id": 230028807,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1615556084
    },
    {
        "content": "<p>For me, the main lesson (I think) was the stark difference between the fears I felt when I began contemplating adding in an ITP to such a course and the actual outcomes.</p>",
        "id": 230029124,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1615556209
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> , I'm teaching a \"foundations of math\" course next Jan. I'd love to see your course materials. I'll DM you my email address. </p>\n<p>Did you have to explain type theory in your course? Also, could you do anything more than Logic in Lean? One big worry I have with using Lean is that it'll turn the foundations of  math course into an intro to logic course.</p>",
        "id": 292192728,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1659724867
    },
    {
        "content": "<p>No type theory, alas. I supplemented with <a href=\"https://infinitedescent.xyz\">Infinite descent</a> but I may reverse the roles this cycle.</p>",
        "id": 292199302,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659728283
    },
    {
        "content": "<p>One thing I took from Logic and Proof that I found very valuable was the different means of presenting the \"same\" core ideas at least in the logic component. </p>\n<ul>\n<li>Natural language proofs</li>\n<li>Natural deduction</li>\n<li>Lean </li>\n</ul>\n<p>I think this diversity of incarnation helped reach the broadest swath of students.</p>",
        "id": 292199501,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659728418
    },
    {
        "content": "<p>I didn't ever feel like it was a logic takeover.</p>",
        "id": 292199520,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659728435
    },
    {
        "content": "<p>While natural deduction may be the obvious thing to cut from the three, it is also the thing which has been <a href=\"https://cseweb.ucsd.edu/~lerner/proof-game/\">gamified</a></p>",
        "id": 292200701,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659729242
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span>  are you still planning on teaching a Foundations of Math course this Spring using Lean? Are you based at Northwestern?</p>",
        "id": 309060774,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1668108058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504487\">Sarah Smith</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Intro.20to.20Proofs.20in.20US.20with.20Lean/near/309060774\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span>  are you still planning on teaching a Foundations of Math course this Spring using Lean? Are you based at Northwestern?</p>\n</blockquote>\n<p>I'm teaching an intro to proofs class at Northwestern but it won't be based on Lean. At best I'll have an optional Lean project at the end. I don't think type theory is essential for doing math :P</p>",
        "id": 309066145,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1668109739
    }
]