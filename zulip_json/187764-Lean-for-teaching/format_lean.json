[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/format_lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean\">format_lean</a> I added the possibility to use tikzcd diagrams, and also include theorems without a Lean counterpart. This is used in <a href=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/cours5.html\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/cours5.html\">https://www.math.u-psud.fr/~pmassot/enseignement/math114/cours5.html</a> There is a diagram at the very bottom of the page for instance. Note that this page also feature a proof of existence of <code>quotient.lift</code> by hand for discussion purpose (this is actually the only Lean proof of that page).</p>",
        "id": 163509006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555450260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> I had no time to look at your interactive version yet, because I have too much teaching, administration, referee reports, perfectoid spaces etc. But you can PR it in order to avoid drifting too far away from my version.</p>",
        "id": 163509112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555450342
    },
    {
        "content": "<p>Hello! I would love to try <a href=\"https://github.com/leanprover-community/format_lean\">format_lean</a>, but I did not get it to cooperate with my Lean. I think I installed as in the instructions, but when running, it is not clear to me what I should set as the parameter <code>--lib-path</code>. If I set it to the directory of my mathlib source by</p>\n<div class=\"codehilite\" data-code-language=\"code\"><pre><span></span><code>format_lean --inpath test_001.lean --outdir build --lib-path ~/Lean/msc1541_2021/src\n</code></pre></div>\n<p>then I get </p>\n<div class=\"codehilite\" data-code-language=\"code\"><pre><span></span><code>error: couldn't find value of ELAN_HOME\n</code></pre></div>\n<p>plus some errors about <code>BrokenPipeError: [Errno 32] Broken pipe</code> (presumably consequences of the original elan problem).</p>\n<p>Could <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> or someone else with computer skills and/or experience with <code>format_lean</code> help me with how to configure this? Thanks in advance!</p>",
        "id": 264426310,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639131326
    },
    {
        "content": "<p>To clarify, I believe I have elan somewhere. If I run <code>elan show</code>, it reports </p>\n<div class=\"codehilite\" data-code-language=\"code\"><pre><span></span><code>installed toolchains\n--------------------\n\nstable (default)\nleanprover-community-lean-3.20.0\nleanprover-community-lean-3.23.0\nleanprover-community-lean-3.24.0\nleanprover-community-lean-3.26.0\nleanprover-community-lean-3.28.0\nleanprover-community-lean-3.30.0\nleanprover-community-lean-3.31.0\nleanprover-community-lean-3.32.1\nleanprover-community-lean-3.33.0\nleanprover-community-lean-3.34.0\nleanprover-community-lean-3.35.0\nleanprover-community-lean-3.35.1\n\nactive toolchain\n----------------\n\nleanprover-community-lean-3.35.1 (overridden by '/u/01/kytolak1/unix/Lean/msc1541_2021/leanpkg.toml')\nLean (version 3.35.1, commit 4887d8a30621, Release)\n</code></pre></div>",
        "id": 264426362,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639131363
    },
    {
        "content": "<p>And still for the teaching context (or <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>): I would like to use Lean in my upcoming 2nd year metric spaces course to help students understand proofs better. Mainly I would like to concretely convey the idea that each step of a proof changes what is considered established and/or what still remains to be proven. For this I think it would be great to be able to \"explore\" proofs with Lean tactic state shown after each step. I believe this is exactly what Patrick's <code>format_lean</code> would achieve (if I got it to work).</p>\n<p>(Of course I dream of using Lean for teaching proofs in more ways than just that. Such hopes were in fact how I got into formalization in the first place. But I have noted warnings about difficulties of doing so from Kevin and Patrick and others, so in the next course I am teaching I would only try \"exploration\" and possibly a few optional exercises.)</p>",
        "id": 264426423,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639131389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I had played with <code>format_lean</code> briefly a while ago and thought I had it working, but I have since encountered a problem. Whenever I try to add a comment line in a tactic proof I get an error without a build. Moreover, even without comments, the proofs don't display any lines between \"Proof\" and \"QED\". I'm running Arch (hence Python 3.12), so I tried setting up the virtual environment with Python 3.7.2 but still had the same symptoms.</p>",
        "id": 267752315,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642006407
    },
    {
        "content": "<p>I would need to see a minimal project with this issue</p>",
        "id": 267752492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642006466
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- MWE</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℕ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.zero</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Lemma</span>\n<span class=\"cm\">This works, but of course it's a term mode proof, so there is no tactic state.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_zero_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">nat.zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definition</span>\n<span class=\"cm\">Addition of natural numbers, defined recursively, this also works</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Lemma</span>\n<span class=\"cm\">A lemma which is true by definition, in tactic mode (no lines or tactic state displayed).</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- comment breaks compilation</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 267752561,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642006500
    },
    {
        "content": "<p>sorry, I can probably make it smaller, let me try and check</p>",
        "id": 267752653,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642006539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Lemma</span>\n<span class=\"cm\">this should not break</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- comment breaks compilation, removing it allows compilation to succeed.</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267752983,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642006680
    },
    {
        "content": "<p>This is the output to <code>stderr</code> inside the python venv with version 3.7.2</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ format_lean --inpath mwe.lean --outdir build2\nTraceback <span class=\"o\">(</span>most recent call last<span class=\"o\">)</span>:\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/bin/format_lean\"</span>, line <span class=\"m\">77</span>, <span class=\"k\">in</span> &lt;module&gt;\n    Fire<span class=\"o\">(</span>render_lean_file<span class=\"o\">)</span>\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/lib/python3.7/site-packages/fire/core.py\"</span>, line <span class=\"m\">141</span>, <span class=\"k\">in</span> Fire\n    <span class=\"nv\">component_trace</span> <span class=\"o\">=</span> _Fire<span class=\"o\">(</span>component, args, parsed_flag_args, context, name<span class=\"o\">)</span>\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/lib/python3.7/site-packages/fire/core.py\"</span>, line <span class=\"m\">471</span>, <span class=\"k\">in</span> _Fire\n    <span class=\"nv\">target</span><span class=\"o\">=</span>component.__name__<span class=\"o\">)</span>\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/lib/python3.7/site-packages/fire/core.py\"</span>, line <span class=\"m\">681</span>, <span class=\"k\">in</span> _CallAndUpdateTrace\n    <span class=\"nv\">component</span> <span class=\"o\">=</span> fn<span class=\"o\">(</span>*varargs, **kwargs<span class=\"o\">)</span>\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/bin/format_lean\"</span>, line <span class=\"m\">68</span>, <span class=\"k\">in</span> render_lean_file\n    lecture_reader.read_file<span class=\"o\">(</span>inpath<span class=\"o\">)</span>\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/lib/python3.7/site-packages/format_lean/line_reader.py\"</span>, line <span class=\"m\">49</span>, <span class=\"k\">in</span> read_file\n    self.normal_line_handler<span class=\"o\">(</span>self, line<span class=\"o\">)</span>\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/lib/python3.7/site-packages/format_lean/objects.py\"</span>, line <span class=\"m\">377</span>, <span class=\"k\">in</span> normal_line\n    file_reader.cur_line_nb, <span class=\"m\">1</span><span class=\"o\">)</span>\n  File <span class=\"s2\">\"/home/jireh/.virtualenvs/format_lean/lib/python3.7/site-packages/format_lean/server.py\"</span>, line <span class=\"m\">34</span>, <span class=\"k\">in</span> info\n    raise LeanError<span class=\"o\">(</span>ret<span class=\"o\">)</span>\nformat_lean.server.LeanError: <span class=\"o\">{</span><span class=\"s1\">'msgs'</span>: <span class=\"o\">[{</span><span class=\"s1\">'caption'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'file_name'</span>: <span class=\"s1\">'/home/jireh/.elan/toolchains/leanprover-community-lean-3.16.5/lib/lean/library/init/data/option/basic.lean'</span>, <span class=\"s1\">'pos_col'</span>: <span class=\"m\">41</span>, <span class=\"s1\">'pos_line'</span>: <span class=\"m\">30</span>, <span class=\"s1\">'severity'</span>: <span class=\"s1\">'error'</span>, <span class=\"s1\">'text'</span>: <span class=\"s1\">'type expected at\\n  o.is_some\\nterm has type\\n  bool'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'caption'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'file_name'</span>: <span class=\"s1\">'/home/jireh/.elan/toolchains/leanprover-community-lean-3.16.5/lib/lean/library/init/data/option/basic.lean'</span>, <span class=\"s1\">'pos_col'</span>: <span class=\"m\">41</span>, <span class=\"s1\">'pos_line'</span>: <span class=\"m\">30</span>, <span class=\"s1\">'severity'</span>: <span class=\"s1\">'error'</span>, <span class=\"s1\">'text'</span>: <span class=\"s1\">'type expected at\\n  o.is_some\\nterm has type\\n  bool'</span><span class=\"o\">}]</span>, <span class=\"s1\">'response'</span>: <span class=\"s1\">'all_messages'</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267753274,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642006791
    },
    {
        "content": "<p>ooh, sorry, I think I may have figured out the problem. I had switched to an old version of Lean (3.16.5) trying to solve this problem outside my venv (I think Python 3.12 may be incompatible with <code>format_lean</code>, but I'm not sure). After switching back to 3.35.1 it seems to work. Sorry for the inconvenience.</p>",
        "id": 267753761,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642006957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Just to follow up: I figured out all my problems. I had a <code>sorry</code> in my original file and I didn't realize <code>format_lean</code> would balk at that (it's fine, I just didn't know). In my troubleshooting I (stupidly) didn't try to create an MWE first, and then I went down a rabbit hole, changed my Lean version, and then I had <em>two</em> problems  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>. But it's all fixed now, and there are no issues with the current version of Python (3.10.1, I misspoke above), except for a deprecation warning about <code>distutils</code> slated for removal in Python 3.12.</p>",
        "id": 267760848,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642009881
    },
    {
        "content": "<p>Feel free to open a PR about this sorry issue if you want it and have time.</p>",
        "id": 267761079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642009971
    },
    {
        "content": "<p>I can't   spend any time to add features to this tool. I have too much to do and this tool will be completely obsolete with Lean4</p>",
        "id": 267761288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642010055
    },
    {
        "content": "<p>No I completely understand, it's not important to me. Thanks though.</p>",
        "id": 267761584,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1642010181
    }
]