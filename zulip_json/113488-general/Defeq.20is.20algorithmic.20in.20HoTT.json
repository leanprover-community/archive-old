[
    {
        "content": "<p>I'm currently browsing through the HoTT book and I notice in section 1.1 it claims that definitional equality is algorithmically decidable (in the para which defines definitional equality). My understanding is that Lean's definitional equality is not decidable. I realise I don't know the proof of this (so maybe I'm wrong), but what stops the proof from working in HoTT? Or have I misunderstood something?</p>",
        "id": 243031779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623942316
    },
    {
        "content": "<p>Lean's definitional equality is decidable if you decline to use a couple of its features (although I'm not actually sure if we proved this anywhere). These features that cause the undecidability do not exists in HoTT. <br>\nThe example that causes undecidability of Lean's definitional equality that comes from Mario's master thesis involves inductive propositions, and relies on the fact that propositions are definitionally proof irrelevant (these do not exist in book-HoTT).</p>",
        "id": 243033268,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623942819
    },
    {
        "content": "<p>There's also this recent paper by Abel and Coquand, where they give an example for a (Lean) term where reduction does not terminate: <a href=\"https://arxiv.org/abs/1911.08174\">https://arxiv.org/abs/1911.08174</a> (does not require inductive types afaict, except for maybe equality)</p>",
        "id": 243035978,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623943768
    },
    {
        "content": "<p>While searching for the Abel-Coquand paper, I also stumbled upon a new draft by Coquand:<br>\nReduction Free Normalization for a proof-irrelevant type of propositions<br>\n<a href=\"https://arxiv.org/abs/2103.04287\">https://arxiv.org/abs/2103.04287</a><br>\nWhere he claims that defeq is decidable (for some system resembling Lean).  I didn't read through it yet, so I don't know why it doesn't conflict with the other result.</p>",
        "id": 243036598,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623943987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Defeq.20is.20algorithmic.20in.20HoTT/near/243035978\">said</a>:</p>\n<blockquote>\n<p>There's also this recent paper by Abel and Coquand, where they give an example for a (Lean) term where reduction does not terminate: <a href=\"https://arxiv.org/abs/1911.08174\">https://arxiv.org/abs/1911.08174</a> (does not require inductive types afaict, except for maybe equality)</p>\n</blockquote>\n<p>For anyone that wants to experience the deterministic timeout themselves, here's the first example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">False</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span>\n<span class=\"kd\">def</span> <span class=\"n\">True</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">True</span> <span class=\"n\">z</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ω</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">True</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">δ</span>\n<span class=\"kd\">lemma</span> <span class=\"bp\">Ω</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"bp\">Ω</span>\n</code></pre></div>\n<p>and the second:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">True</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">z</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">iff.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)))</span> <span class=\"n\">δ</span>\n<span class=\"kd\">lemma</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">δ</span> <span class=\"n\">ω</span>\n\n<span class=\"k\">#reduce</span> <span class=\"bp\">Ω</span>\n</code></pre></div>",
        "id": 243115821,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623991223
    },
    {
        "content": "<p>See also the original discussion about this paper: <a href=\"#narrow/stream/113488-general/topic/Normalization.20fails.20in.20lean/near/181055359\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Normalization.20fails.20in.20lean/near/181055359</a></p>",
        "id": 243115941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623991373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Defeq.20is.20algorithmic.20in.20HoTT/near/243036598\">said</a>:</p>\n<blockquote>\n<p>Where he claims that defeq is decidable (for some system resembling Lean).  I didn't read through it yet, so I don't know why it doesn't conflict with the other result.</p>\n</blockquote>\n<p>There's no conflict, because the negative result concerns a reduction relation, while the positive result is a reduction free normalization algorithm (as it says in the title).</p>",
        "id": 243200978,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1624045362
    },
    {
        "content": "<p>From a brief skim the positive result also doesn't seem to consider propositional equality, which was central to the negative result. Is it straightforward to see that the counterexample given there doesn't transfer to the reduction-free setting?</p>",
        "id": 246969694,
        "sender_full_name": "Josh Chen",
        "timestamp": 1627042592
    }
]