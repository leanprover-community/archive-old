[
    {
        "content": "<p>(Warning: I don't know how lean being multithreaded works.)</p>\n<p>I've been thinking about how you can store data in an identifier tagged with an attribute. Since a tactic being executed in (for example) the course of a proof can modify this data and change its behaviour based on it, are tactics using this data thread-safe? If for example a piece of attribute data keeps track of a list of things, which might be added to using another attribute or something like that, is it possible that the list contents are read simultaneously, each have a different element appended to them, and then two threads race to write their contents back to the same field with one ultimately winning?</p>\n<p>I just can't see how it could possibly be thread-safe. If this is the case, isn't it dangerous (except in trivial situations) for anything to set the data associated to a  attribute?</p>",
        "id": 147281757,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541660420
    },
    {
        "content": "<p>It's a functional data structure, so there isn't any possibility for races</p>",
        "id": 147282069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541660988
    },
    {
        "content": "<p>The data associated to an attribute is a pure function of the set of names that have the attribute in the environment</p>",
        "id": 147282132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541661044
    },
    {
        "content": "<p>or maybe more usefully, it is a function of the <code>environment</code> object, which is itself a functional data structure</p>",
        "id": 147282194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541661181
    },
    {
        "content": "<p>Each definition adds to the <code>environment</code> object in a way similar to <code>list.cons</code>. The old environment is still available. In particular, AFAIK the only multithreading lean does (in a single file) is in proof checking, and proofs (<code>theorem</code> elaboration) are not allowed to modify the environment (any changes they make are inlined or rolled back when the proof is complete). <code>def</code>s are allowed to modify the environment, but they run sequentially in the file processing.</p>",
        "id": 147282289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541661356
    },
    {
        "content": "<p>I'm still a bit confused about this<br>\nWhat happens if two tactics running in proofs of separate <code>theorem</code>s set conflicting <code>options</code>, for example?</p>",
        "id": 148372817,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543244885
    },
    {
        "content": "<p>Oh sorry, you explained---the changes are forgotten</p>",
        "id": 148372975,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543245015
    }
]