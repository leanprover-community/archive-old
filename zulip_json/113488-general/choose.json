[
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib/blob/c9cfafc922927c4fc157a4acc2e8df984d3e74bd/src/tactic/interactive.lean#L479\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/c9cfafc922927c4fc157a4acc2e8df984d3e74bd/src/tactic/interactive.lean#L479\">choose tactic</a> has the annoying habit of generating terms featuring <code>∃ h : P</code> where <code>P</code> is a Prop. In my lectures I use a variant which blindly applies <code>simp only [exists_prop] at *</code>, because I don't know how to do that only to hypotheses that are created by <code>choose</code>. Does anyone know how to do that? Would a PR changing this behavior be welcome?</p>",
        "id": 165462174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557662873
    },
    {
        "content": "<p>I'd be happy to see a PR changing this in <code>choose</code>, but I'm not sure I've ever looked at that tactic, and don't know how to do it off the top of my head.</p>",
        "id": 165468208,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557673387
    },
    {
        "content": "<p>My problem with <code>choose</code> is the parsing magic. One of the arguments of <code>choose</code> is <code>(names : parse ident*)</code> (where <code>*</code> is the usual notation for <code>many</code>). Sometimes Lean magically converts <code>names</code> to type <code>list (option name)</code> but sometimes not</p>",
        "id": 165477163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557688385
    },
    {
        "content": "<p>Is there any way to force this?</p>",
        "id": 165477169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557688396
    },
    {
        "content": "<p>Oh, I was stupid</p>",
        "id": 165477597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557689150
    },
    {
        "content": "<p>It's <code>optional</code> that corresponds to <code>option</code> of course. <code>many ident</code> is secretely <code>list name</code> not <code>list (option name)</code></p>",
        "id": 165477650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557689201
    },
    {
        "content": "<p>So I get as a new interactive choose:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">choose&#39;</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;using&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"k\">match</span> <span class=\"n\">tgt</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">this</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"n\">e</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">tgt</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">::</span> <span class=\"n\">names</span><span class=\"o\">),</span>\n    <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">simp</span> <span class=\"n\">none</span> <span class=\"n\">tt</span> <span class=\"o\">[</span><span class=\"n\">simp_arg_type</span><span class=\"bp\">.</span><span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">exists_prop</span><span class=\"o\">)]</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"err\">$</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">names</span><span class=\"o\">),</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">tgt</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I even manage to use <code>(ns $ some &lt;$&gt; names)</code>. I hope Simon will be proud</p>",
        "id": 165477984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557689752
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/1014/files\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1014/files\">https://github.com/leanprover-community/mathlib/pull/1014/files</a></p>",
        "id": 165479208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557691705
    },
    {
        "content": "<p>One thing I've been thinking is that maybe <code>choose</code> could become a classical <code>rcases</code>.</p>",
        "id": 165498524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557723844
    },
    {
        "content": "<p>I also like that <code>choose</code> flips the syntax compared to <code>rcases</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">choose</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span><span class=\"n\">the</span><span class=\"o\">,</span> <span class=\"n\">names</span><span class=\"o\">,</span> <span class=\"n\">you</span><span class=\"o\">,</span> <span class=\"n\">want</span><span class=\"err\">\\</span><span class=\"bp\">&gt;</span> <span class=\"kn\">using</span> <span class=\"n\">hyp</span>\n<span class=\"c1\">-- vs</span>\n<span class=\"n\">rcases</span> <span class=\"n\">hyp</span> <span class=\"k\">with</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span><span class=\"n\">the</span><span class=\"o\">,</span> <span class=\"n\">names</span><span class=\"o\">,</span> <span class=\"n\">you</span><span class=\"o\">,</span> <span class=\"n\">want</span><span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n</pre></div>",
        "id": 165498553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557723921
    }
]