[
    {
        "content": "<p>I want to find the minimum of a <code>list (fin m)</code>, but not using the standard definition of <code>le</code> on <code>fin</code>, but using a different total order (the lex of a function <code>fin m -&gt; rat</code> and <code>fin m -&gt; fin (m + n)</code>). Would it be better for <code>minimum</code> to take arbitrary relations?</p>",
        "id": 174123083,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566807328
    },
    {
        "content": "<p>that doesn't really sound like a minimum anymore. Maybe some kind of <code>foldl</code> will suffice?</p>",
        "id": 174123493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566807804
    },
    {
        "content": "<p>The proofs that that suffices are not entirely trivial. <code>data.list.min_max</code> is quite a long file.</p>",
        "id": 174123657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566807981
    },
    {
        "content": "<p>Do you really mean an arbitrary relation, or an arbitrary total order (not coming from an instance)?</p>",
        "id": 174131976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1566817555
    },
    {
        "content": "<p>arbitrary total order.</p>",
        "id": 174132787,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566818472
    },
    {
        "content": "<p>Haskell has <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:minimumBy\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:minimumBy\">minimumBy</a> as well as <a href=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:minimum\" target=\"_blank\" title=\"https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html#v:minimum\">minimum</a>, which seems like a sensible arrangement to me</p>",
        "id": 174138221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1566824011
    },
    {
        "content": "<p>Maybe <code>foldMap</code> would be a better direction. It maps every objects to an element of a monoid. You can then pick whichever monoid works best.</p>",
        "id": 174142266,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566827076
    },
    {
        "content": "<p>But minimum has associated theorems (it's an element of the original list, and <code>leq</code> all the other elements) which don't have analogues for a general monoidal operation</p>",
        "id": 174143523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1566827914
    },
    {
        "content": "<p>How about we consider a special kind of monoids? A semilattice with a total order? Then we have <code>x * y = x \\/ x * y = y</code> from which we can prove that the result is an element of the list.</p>",
        "id": 174144041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566828223
    },
    {
        "content": "<p>What if you register another order with a higher priority? Wouldn't <code>minimum</code> talk about this order? Or use the @ version of <code>min</code> everywhere?</p>",
        "id": 174145117,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1566828869
    },
    {
        "content": "<p>That's what I did, but it's ugly.</p>",
        "id": 174147948,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566830890
    },
    {
        "content": "<p>Or define a type synonym, with the instance you want to use available for that. This seems like the “mathlib canonical” way to do it, once we’ve committed to using typeclasses everywhere.</p>",
        "id": 174186680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566865062
    }
]