[
    {
        "content": "<p>Is there a way to automatically generate the instances <code>has_string</code> or <code>has_repr</code> for inductive and structure types (assuming the types they use for the arguments also have <code>has_string</code> and <code>has_repr</code>)?  I know Rust for example has an autogenerated <code>debug</code> type class thing that lets you make a representation for standard classes (forgetting the proper Rust terminology).  Does Lean have something similar?</p>",
        "id": 199326180,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590968609
    },
    {
        "content": "<p>Rust: <a href=\"https://doc.rust-lang.org/std/fmt/trait.Debug.html\">https://doc.rust-lang.org/std/fmt/trait.Debug.html</a><br>\nPython: Can do it with the<code>@dataclass(repr=True)</code> decorator: <a href=\"https://docs.python.org/3/library/dataclasses.html\">https://docs.python.org/3/library/dataclasses.html</a><br>\nLean: ???</p>",
        "id": 199326353,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590968877
    },
    {
        "content": "<p>Haskell can do this by <code>deriving Show</code>, maybe we could adapt the method that uses</p>",
        "id": 199326408,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590968968
    },
    {
        "content": "<p>Lean has derive handlers, but I don't know how to find one for:<br>\n<code>@[derive [has_repr]]</code></p>",
        "id": 199326477,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590969068
    },
    {
        "content": "<p>I realize I don't even know where <code>@[derive [monad]]</code> comes from.  I tried searching in both <code>lean</code> and <code>mathlib</code> and I came up short.  Is there a list of all the current derive handlers (and how to import them)?</p>",
        "id": 199327188,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590970419
    },
    {
        "content": "<p>I'm not really sure how they work, but it looks like \"derive handlers\" are set up in <a href=\"https://github.com/leanprover-community/lean/blob/ad780aa74474edb344f3a5605db1ed73310ad7a9/library/init/meta/derive.lean\">core</a>. Searching for the <code>derive_handler</code> attribute might help.</p>\n<p>It would be good to add some docs on this.</p>",
        "id": 199327429,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590970827
    },
    {
        "content": "<p>I don't think there is any structural way to derive <code>monad</code>--I think we have a default handler that just copies the instance from the right-hand-side of the definition</p>",
        "id": 199327456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590970881
    },
    {
        "content": "<p>Ok, so one doesn't need a derive handler if the right-hand-side already has the desired instance? That explains <code>monad</code>.  I think we have very few right now.  Maybe one day I'll get around to writing one for <code>has_repr</code>.  (I might cheat first and make one in python that just spits out the instance code I want.)</p>",
        "id": 199327898,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590971802
    },
    {
        "content": "<p>No, you do need a derive handler, but there is a blanket derive handler for proof by unfolding</p>",
        "id": 199329732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590975222
    },
    {
        "content": "<p>Examples of \"real\" derive handlers include <code>inhabited</code>, <code>decidable_eq</code> and <code>has_reflect</code></p>",
        "id": 199329780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590975266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Are to saying there is a way to get has_repr (or similar functionality) without a derive handler?  If so, how?</p>",
        "id": 199331749,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590978746
    },
    {
        "content": "<p>I'm saying you have to write your own derive handler, which is just a tactic that does this construction</p>",
        "id": 199331755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590978781
    },
    {
        "content": "<p>you can register your own derive handlers</p>",
        "id": 199331767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590978810
    },
    {
        "content": "<p>Sorry, I read the “No, you do” as “No you do not”.  :facepalm:</p>",
        "id": 199331774,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590978838
    }
]