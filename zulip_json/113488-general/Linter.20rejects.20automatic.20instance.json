[
    {
        "content": "<p>In the following file, the unused arguments linter complains about <code>#print f.decidable_eq /- argument 2: [a : decidable_eq J] -/ </code> having an unused argument - is it possible to change how the derive works to avoid this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mytype</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">J</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span> <span class=\"n\">J</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">none</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</pre></div>",
        "id": 194504706,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587160244
    },
    {
        "content": "<p>Cf my PR <a href=\"https://github.com/leanprover-community/mathlib/pull/2461\" title=\"https://github.com/leanprover-community/mathlib/pull/2461\">https://github.com/leanprover-community/mathlib/pull/2461</a></p>",
        "id": 194739845,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587420640
    },
    {
        "content": "<p>hmm I think this might be a known issue</p>",
        "id": 194740179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587420888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, could you create an issue for this? We should track it.</p>",
        "id": 194746268,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587426033
    },
    {
        "content": "<p>Looking at <a href=\"https://github.com/leanprover-community/mathlib/issues/1077\" title=\"https://github.com/leanprover-community/mathlib/issues/1077\">https://github.com/leanprover-community/mathlib/issues/1077</a>, it seems to be a lean issue rather than a mathlib issue...</p>",
        "id": 194746306,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587426111
    },
    {
        "content": "<p>Is there a related open issue on the community Lean repository?</p>",
        "id": 194748063,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587427750
    },
    {
        "content": "<p>Doesn't seem like it</p>",
        "id": 194748173,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587427834
    },
    {
        "content": "<p>Sorry, when I said known issue I literally just meant \"I think someone mentioned it on the chat once\". I forgot that an issue was a real thing</p>",
        "id": 194772101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456851
    },
    {
        "content": "<p>This is unrelated to <a href=\"https://github.com/leanprover-community/mathlib/issues/1077\" title=\"https://github.com/leanprover-community/mathlib/issues/1077\">#1077</a>. For now you can do <code>attribute [nolint unused_arguments] f.decidable_eq</code>. This is probably fixable, probably not trivial. The <code>decidable_eq</code> derive handler is in core so it's an issue there.</p>",
        "id": 194772422,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587457120
    }
]