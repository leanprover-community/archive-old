[
    {
        "content": "<p>Is it possible to forward declare a meta function? I have two recursive functions that call each another. I can probably merge them into one function, but conceptually it makes sense to keep them separate. I.e. I want to write code that looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> forward declaration -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">constant</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Actual definition of those functions -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>  <span class=\"bp\">...'</span><span class=\"n\">implementation</span> <span class=\"n\">calling</span> <span class=\"bp\">`</span><span class=\"n\">bar</span><span class=\"bp\">`...</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">...'</span><span class=\"n\">implementation</span> <span class=\"n\">calling</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I'm used to doing this in <code>C++</code> maybe it is an incorrect way of doing things in Lean.</p>",
        "id": 216860480,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1605527093
    },
    {
        "content": "<p>I think this should work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span>\n\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 216860796,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1605527313
    },
    {
        "content": "<p>Thanks! I will try it out.</p>",
        "id": 216860825,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1605527343
    },
    {
        "content": "<p>See also the discussion at <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/mutual.20recursion/near/213710772\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/mutual.20recursion/near/213710772</a> if the <code>mutual def</code> approach seems too unwieldy</p>",
        "id": 216872759,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605534721
    }
]