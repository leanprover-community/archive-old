[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">xfin</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xfin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xfin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">xfin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">vec</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">vec</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">vec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vec</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mth</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vec</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">xfin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Slightly trickier than I expected, but I got there in the end. Returns the m'th element of the vector.</p>",
        "id": 169209680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713223
    },
    {
        "content": "<p>Unit tests:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">mth</span> <span class=\"bp\">ℕ</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"mi\">0</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- 4</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">mth</span> <span class=\"bp\">ℕ</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"mi\">0</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"c1\">-- 6</span>\n</pre></div>",
        "id": 169210115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713671
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mth</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">vec</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">xfin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mth</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">i</span>\n</pre></div>",
        "id": 169211599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561715220
    },
    {
        "content": "<p>Damn you Carneiro, I needed four lines :-)</p>",
        "id": 169215117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561719654
    },
    {
        "content": "<p>Oh wait -- your answer is better than mine: I needed to use <code>._</code> (I think). Unfortunately my answer is at home right now.</p>",
        "id": 169215135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561719685
    },
    {
        "content": "<p>I'm surprised while writing this you didn't cause lean to segfault. I faced the same problem a few days ago. <br>\n<a href=\"https://github.com/leanprover-community/lean/issues/52\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/52\">https://github.com/leanprover-community/lean/issues/52</a></p>",
        "id": 169215454,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1561720123
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mth</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vec</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">xfin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">._</span> <span class=\"n\">a</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">._</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">._</span> <span class=\"n\">a</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">._</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mth</span> <span class=\"n\">d</span> <span class=\"n\">w</span> <span class=\"n\">e&#39;</span>\n</pre></div>\n\n\n<p>was my answer.</p>",
        "id": 169313042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561844145
    },
    {
        "content": "<p>I think you can omit the second line</p>",
        "id": 169331271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561884016
    },
    {
        "content": "<p>Right -- the equation compiler is smart enough to do the cases, it seems.</p>",
        "id": 169349172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561918613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mth</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vec</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">xfin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xfin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mth</span> <span class=\"bp\">_</span> <span class=\"n\">w</span> <span class=\"n\">e&#39;</span>\n</pre></div>\n\n\n<p>I think that's the sup of what you can omit</p>",
        "id": 169349236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561918748
    },
    {
        "content": "<p>The <code>._</code> inaccessible patterns seem to be optional now, ever since leo made some change to the way the equation compiler handles these things</p>",
        "id": 169349291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561918849
    },
    {
        "content": "<p>which is useful since it's hard to know how to use them properly</p>",
        "id": 169349303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561918871
    }
]