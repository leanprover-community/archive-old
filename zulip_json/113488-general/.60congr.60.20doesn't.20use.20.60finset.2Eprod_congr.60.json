[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ping here</p>",
        "id": 201100468,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592368039
    },
    {
        "content": "<p>wait, what's wrong with the second one? That looks exactly like I would expect</p>",
        "id": 201100740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592368409
    },
    {
        "content": "<p>don't you want <code>f</code> to be different on each side?</p>",
        "id": 201100747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592368425
    },
    {
        "content": "<p>My fault. Indeed with <code>f</code> and <code>g</code> it generates a goal <code>(λ (x : α), f x) = λ (x : α), g x</code>.</p>",
        "id": 201100979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592368822
    },
    {
        "content": "<p>So for some reason it doesn't use <code>prod_congr</code>.</p>",
        "id": 201100985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592368848
    },
    {
        "content": "<p>How can I debug this?</p>",
        "id": 201101007,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592368906
    },
    {
        "content": "<p>well this is why, although it doesn't answer your question:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">s₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">s₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_specialized_congr_lemma</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"k\">proof</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">admit</span>\n<span class=\"c1\">-- λ [_inst_1 : comm_monoid β] (s s_1 : finset α) (e_2 : s = s_1) (f f_1 : α → β) (e_3 : f = f_1),</span>\n<span class=\"c1\">-- congr (congr_arg finset.prod e_2) e_3</span>\n</code></pre></div>",
        "id": 201101119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592369076
    },
    {
        "content": "<p>to go further requires diving into C++</p>",
        "id": 201101128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592369100
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201101204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592369209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 201101661,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592369876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> How can we debug this?</p>",
        "id": 201150945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592405043
    },
    {
        "content": "<p>I don't understand what there's to debug here.  This is the intended behavior.  <code>mk*congr_lemma</code> doesn't use the <code>congr</code> attribute.</p>",
        "id": 201151044,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592405086
    },
    {
        "content": "<p>If you want a better convert/congr/etc., you'll need to implement this.</p>",
        "id": 201151081,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592405107
    },
    {
        "content": "<p>What tactic(s) use <code>@[congr]</code>?</p>",
        "id": 201151353,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592405205
    },
    {
        "content": "<p>AFAIK only <code>simp</code>.</p>",
        "id": 201151515,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592405267
    },
    {
        "content": "<p>Where does it query <code>@[congr]</code>?</p>",
        "id": 201151616,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592405292
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/4782e3d3a0626f9d61c53d2df603f07cd904344b/src/library/tactic/simplify.cpp#L218-L239\">https://github.com/leanprover-community/lean/blob/4782e3d3a0626f9d61c53d2df603f07cd904344b/src/library/tactic/simplify.cpp#L218-L239</a></p>",
        "id": 201151942,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592405435
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 201152559,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592405673
    }
]