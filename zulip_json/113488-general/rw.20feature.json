[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"n\">H&#39;</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H&#39;</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is this a bug, or is it not a good idea to let rewrites affect hypotheses which are used to construct the term being rewritten? (or both?)</p>",
        "id": 132628472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535018068
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- I would expect H to become b = b...</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 132628548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535018186
    },
    {
        "content": "<p>[PS this is not frivolous -- I just attempted to do a rewrite on a term which I had used to explicitly fill in something which type class inference couldn't infer, and it silently failed]</p>",
        "id": 132628571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535018253
    },
    {
        "content": "<p>I think <code>rw</code> does not rewrite the assumptions themselves because if you have:</p>\n<div class=\"codehilite\"><pre><span></span>h0 : a = b,\nh1 : a = c\n...\n</pre></div>\n\n\n<p><code>rw h0 at *</code> would transform <code>h0</code> into <code>b = b</code> and then <code>rw</code> would not be able to rewrite <code>h1</code>.</p>",
        "id": 132639780,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535033481
    },
    {
        "content": "<p>I suspect the developers consciously decided to not let <code>rw</code> rewrite assumptions using themselves as a rule. If the assumptions eventually get reshuffled, the design of <code>rw</code> makes the re-execution of the same proof less surprising. Does <code>simp</code> or <code>dsimp</code> help in your situation?</p>",
        "id": 132639895,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535033625
    },
    {
        "content": "<p>I did exactly what I suggested in my original post -- I just introduced a new hypothesis which was by definition the old one :-)</p>",
        "id": 132639964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535033698
    },
    {
        "content": "<p>Ah ok, I thought it might fit in a more complex situation. So it would rank as \"annoying\", I assume</p>",
        "id": 132640206,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535034000
    },
    {
        "content": "<p>Yeah, I'm helping undergraduates to write code and today has been quite an annoying day for some reason, I've had to introduce several workarounds for things.</p>",
        "id": 132640291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535034088
    },
    {
        "content": "<p>I think that happens a lot in any programming language: with time, you start instinctively avoiding the pain points and then the newcomers run right into them</p>",
        "id": 132640475,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535034249
    }
]