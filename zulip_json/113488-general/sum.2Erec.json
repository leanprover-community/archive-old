[
    {
        "content": "<p>I'm having a surprisingly hard time working with <code>sum.rec</code>. Specifically, I'm having trouble convincing Lean to give me an ordinary, non-dependent function as the result. I pasted a transcript here: <a href=\"https://gist.github.com/rwbarton/b6cbf07bd07afd89f8c2b4feef8cec5f\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/b6cbf07bd07afd89f8c2b4feef8cec5f\">https://gist.github.com/rwbarton/b6cbf07bd07afd89f8c2b4feef8cec5f</a></p>",
        "id": 125949453,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525189976
    },
    {
        "content": "<p>the type of the second term depends on the type of the first term though</p>",
        "id": 125949466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525189994
    },
    {
        "content": "<p>sorry, I thought you were talking about sigma. ignore what I said.</p>",
        "id": 125949476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525190022
    },
    {
        "content": "<p>I'm especially confused that <code>surjective ((λ a, sum.rec f g a) : α ⊕ β → γ)</code> produces an error that seems to be complaining that the argument needs to be a non-dependent function, though I can kind of imagine how this might not be considered a bug</p>",
        "id": 125949537,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525190077
    },
    {
        "content": "<p>It'd be really convenient for me if there was also a non-dependent eliminator <code>sum.rec' : (α → γ) → (β → γ) → α ⊕ β → γ</code></p>",
        "id": 125949607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525190166
    },
    {
        "content": "<p>I noticed someone else came across the same issue, too:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous_sum_rec</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">γ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125949617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525190205
    },
    {
        "content": "<p>That whole result type should really just be <code>continuous (sum.rec' f g)</code>.</p>",
        "id": 125949693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525190322
    },
    {
        "content": "<p>I assume the same issue arises for any other type with multiple constructors, too</p>",
        "id": 125949778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525190414
    },
    {
        "content": "<p>I think the problem is that <code>sum.rec</code> uses the eliminator strategy, meaning it relies heavily on the expected type to determine the motive, but <code>surjective</code> does not give a sufficiently specific expected type <code>?M1 -&gt; ?M2</code>. You can fix the issue by annotating the metavariables of <code>surjective</code>:</p>\n<div class=\"codehilite\"><pre><span></span>@surjective (α ⊕ β) γ (λ a, sum.rec f g a)\n</pre></div>",
        "id": 125954356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525196715
    },
    {
        "content": "<p>The eliminator strategy makes <code>T.rec</code> more or less unusable when unapplied; apparently superfluous eta expansions here are important to trigger the right strategy</p>",
        "id": 125954449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525196839
    },
    {
        "content": "<p>Could this also be fixed by writing a second recursor?</p>",
        "id": 125955363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198100
    },
    {
        "content": "<p>i.e. is this a problem that the interface could solve?</p>",
        "id": 125955364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198100
    },
    {
        "content": "<p>yes</p>",
        "id": 125955375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525198115
    },
    {
        "content": "<p>yes, but that would require changing lean (which generates all the <code>inductive</code> theorems)</p>",
        "id": 125955398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525198160
    },
    {
        "content": "<p>I think I'm instead reading \"yes but you would need to PR core\"</p>",
        "id": 125955402,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525198177
    },
    {
        "content": "<p>yes, that's what I mean</p>",
        "id": 125955456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525198209
    },
    {
        "content": "<p>So you can't just write a new recursor, with a different name, which runs on top of unmodded Lean 3.4.1?</p>",
        "id": 125955531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198361
    },
    {
        "content": "<p>You can, but you would have to do so for every inductive type</p>",
        "id": 125955538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525198389
    },
    {
        "content": "<p>but you could solve his one specific problem with <code>sum.rec</code>.</p>",
        "id": 125955548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198423
    },
    {
        "content": "<p>I have to ask these stupid questions because I have no understanding of the status of these elab commands</p>",
        "id": 125955590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198445
    },
    {
        "content": "<p>all I know is that if you don't like one, you can sometimes add an <code>@</code> and get another one</p>",
        "id": 125955595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198457
    },
    {
        "content": "<p>Sure, <code>or.elim</code> already exists and <code>sum.elim</code> could be similar</p>",
        "id": 125955604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525198483
    },
    {
        "content": "<p><code>example (a b c : Prop) : @or.elim a b c = @or.rec_on a b c := rfl</code></p>",
        "id": 125955859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198867
    },
    {
        "content": "<p>so the only way these function differ is by magic</p>",
        "id": 125955868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198878
    },
    {
        "content": "<p>as far as I am concerned</p>",
        "id": 125955871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198882
    },
    {
        "content": "<p>Aah do they have different tags?</p>",
        "id": 125955929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198932
    },
    {
        "content": "<p>Not only are they the same theorem</p>",
        "id": 125955943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198978
    },
    {
        "content": "<p>they are the same proof</p>",
        "id": 125955947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525198982
    },
    {
        "content": "<p>but one is tagged <code>[reducible]</code>and is protected</p>",
        "id": 125955959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525199003
    },
    {
        "content": "<p><code>[reducible]</code> is all about how eagerly the elaborator unfolds the definition, or something...</p>",
        "id": 125956008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525199049
    },
    {
        "content": "<p><code>protected</code> I have no idea. Something about avoiding overloading?</p>",
        "id": 125956015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525199072
    },
    {
        "content": "<p><code>protected</code> means if you wrote <code>open or</code> (which you probably wouldn't), then you still wouldn't get the name <code>rec_on</code> as a synonym for <code>or.rec_on</code></p>",
        "id": 125956098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525199168
    },
    {
        "content": "<p>one is a def and one is a theorem. Does this make any difference?</p>",
        "id": 125956298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525199509
    },
    {
        "content": "<p><code>unknown identifier 'rec_on'</code></p>",
        "id": 125956533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525199763
    },
    {
        "content": "<p>so nobody is allowed to have <code>rec_on</code>?</p>",
        "id": 125956543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525199777
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal_notation</span>\n<span class=\"kn\">open</span> <span class=\"n\">nonote</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">rec_on</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">rec_on :</span>\n<span class=\"cm\">  Π (o : nonote),</span>\n<span class=\"cm\">    ?M_1 0 →</span>\n<span class=\"cm\">    (Π (e : nonote) (n : ℕ+) (a : nonote) (h : below a e), ?M_1 e → ?M_1 a → ?M_1 (oadd e n a h)) → ?M_1 o</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125956918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525200332
    },
    {
        "content": "<p>Do I win five pounds?</p>",
        "id": 125956920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525200338
    },
    {
        "content": "<p>then that means that <code>nonote.rec_on</code> was not declared as protected</p>",
        "id": 125957006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525200462
    },
    {
        "content": "<p>What is the complete list of unprotected <code>rec_on</code>s? And are these bugs?</p>",
        "id": 125957707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525201456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- This is a recursor-like theorem for `nonote` suggesting an</span>\n<span class=\"cm\">  inductive definition, which can&#39;t actually be defined this</span>\n<span class=\"cm\">  way due to conflicting dependencies. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">rec_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">nonote</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">nonote</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">oadd</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">o</span> <span class=\"k\">with</span> <span class=\"n\">o</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">o</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">IHe</span> <span class=\"n\">IHa</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H0</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span> <span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">⟩</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">snd&#39;</span> <span class=\"o\">(</span><span class=\"n\">IHe</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IHa</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(set_theory.ordinal_notation, line 857)</p>",
        "id": 125960643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205681
    },
    {
        "content": "<p>it isn't automatically generated</p>",
        "id": 125960644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205686
    },
    {
        "content": "<p>but indeed, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should have made it protected</p>",
        "id": 125960649,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525205700
    }
]