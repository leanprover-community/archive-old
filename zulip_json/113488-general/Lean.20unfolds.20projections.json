[
    {
        "content": "<p>In the following example in <code>inv_mem'</code> Lean unfolds many projections making <code>simp</code> unusable. Doesn't happen with <code>old_structure_cmd</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">submonoid</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subgroup</span> <span class=\"kn\">extends</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mem&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">trace_state</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">trace_state</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">trace_state</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>",
        "id": 193691110,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586660256
    },
    {
        "content": "<p>I've just had a similar issue, and seen similar mysteries earlier. Could you try <code>refine_struct</code> and see what the goals look like there?</p>",
        "id": 193694605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586667596
    },
    {
        "content": "<p>Better luck with <code>refine_struct</code></p>",
        "id": 193695450,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586669090
    },
    {
        "content": "<p>But I don't want to define all instances using <code>refine_struct</code>!</p>",
        "id": 193699576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586677220
    },
    {
        "content": "<p>Who should know how does it work? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 193699586,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586677257
    },
    {
        "content": "<p>Are there any universe metavariables?</p>",
        "id": 193699593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677307
    },
    {
        "content": "<p>No, see MWE above.</p>",
        "id": 193699632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586677335
    },
    {
        "content": "<p>It has something to do with the new <code>structure</code> cmd.</p>",
        "id": 193699647,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586677398
    },
    {
        "content": "<p>This also happens sometimes when you haven't finished the proof for the first part of the structure</p>",
        "id": 193699652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677440
    },
    {
        "content": "<p>Let me try.</p>",
        "id": 193699690,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586677459
    },
    {
        "content": "<p>If you replace the proofs of <code>one_mem'</code> and <code>mul_mem'</code> with <code>sorry</code> then <code>inv_mem'</code> does not unfold to <code>set.mem</code></p>",
        "id": 193699693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677472
    },
    {
        "content": "<p>Here it does:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">mem_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">one_mem&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_bInter_iff</span><span class=\"o\">],</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">trace_state</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 193699902,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586677851
    },
    {
        "content": "<p>With <code>sorry</code> for <code>one_mem'</code> and <code>mul_mem'</code> it says</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"bp\">→</span>\n    <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n</pre></div>",
        "id": 193699975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586677955
    },
    {
        "content": "<p>right</p>",
        "id": 193700045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678072
    },
    {
        "content": "<p>that's good, yes?</p>",
        "id": 193700047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678077
    },
    {
        "content": "<p>Understand that when you define a composite structure all in one go, the complete first half of the structure appears in the type of the second half</p>",
        "id": 193700069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678150
    },
    {
        "content": "<p>But with actual proofs (see above) it's still</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193700071,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586678152
    },
    {
        "content": "<p>I think that Lean tries to get rid of <code>{ carrier := ..., .. }.carrier</code> and unfolds all projections instead.</p>",
        "id": 193700121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586678197
    },
    {
        "content": "<p>I think the problem in your example is that the two <code>by</code> are making lean delay elaboration of the first half of the structure when it needs the type of the second half</p>",
        "id": 193700126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678205
    },
    {
        "content": "<p>If you used term mode for the proof of <code>mul_mem'</code>, you should see the version that doesn't unfold <code>\\in</code></p>",
        "id": 193700147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678260
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">mem_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">one_mem&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_bInter_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 193700411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678543
    },
    {
        "content": "<p>What's the difference?</p>",
        "id": 193700422,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586678571
    },
    {
        "content": "<p>That's a workaround rather than a solution, isn't it?</p>",
        "id": 193700423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586678575
    },
    {
        "content": "<p>Introduction of <code>x .. hy</code> before tactic mode?</p>",
        "id": 193700438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586678615
    },
    {
        "content": "<p>yes</p>",
        "id": 193700444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678639
    },
    {
        "content": "<p>Yes, this is all a workaround for a bug in lean</p>",
        "id": 193700484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678643
    },
    {
        "content": "<p>Would another workaround be to roll your own constructor?</p>",
        "id": 193700488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586678674
    },
    {
        "content": "<p>If you defined the structure in two stages it should also work</p>",
        "id": 193700492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678701
    },
    {
        "content": "<p>But maybe Yury doesn't want to define all instances using the custom constructor either.</p>",
        "id": 193700503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586678714
    },
    {
        "content": "<p>that is, define the <code>submonoid</code>, then use that definition to define the <code>subgroup</code></p>",
        "id": 193700515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678723
    },
    {
        "content": "<p>there is usually also a good mathematical reason to not skip steps when defining these structures</p>",
        "id": 193700563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678799
    },
    {
        "content": "<p>for example, in this case presumably <code>submonoid</code> should also <code>has_Inf</code></p>",
        "id": 193700566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678821
    },
    {
        "content": "<p>and you could refer to that construction here</p>",
        "id": 193700573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586678833
    },
    {
        "content": "<p>In this case I'd loose <code>defeq</code>.</p>",
        "id": 193700698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586679049
    },
    {
        "content": "<p>Because of the way <code>\\bigcap</code> works</p>",
        "id": 193700702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586679063
    },
    {
        "content": "<p>No</p>",
        "id": 193700704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679063
    },
    {
        "content": "<p>It is the same function you are already defining</p>",
        "id": 193700708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679100
    },
    {
        "content": "<p>I can say <code>to_submonoid = ⨅ s ∈ S, s.to_submonoid</code> but this will not be <code>defeq</code> to my definition.</p>",
        "id": 193700751,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586679143
    },
    {
        "content": "<p>Because on the way to <code>carrier</code> we'll have the \"set.range\" four times instead of twice.</p>",
        "id": 193700757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586679181
    },
    {
        "content": "<p>As far as I understand, that's why <code>filter</code>s have to use <code>lattice.copy</code></p>",
        "id": 193700776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586679236
    },
    {
        "content": "<p>You can at least do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Inf_submonoid</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"err\">⋂</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">mem_bInter</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">one_mem&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_bInter_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul_mem&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_submonoid</span> <span class=\"o\">:=</span> <span class=\"n\">Inf_submonoid</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 193700827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679317
    },
    {
        "content": "<p>Did anyone ever get to the bottom of this?</p>",
        "id": 194681767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587392706
    },
    {
        "content": "<p>The same bug seems to be biting me again.</p>",
        "id": 194681793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587392712
    },
    {
        "content": "<p>Is there an open issue for the bug in the Lean repository?</p>",
        "id": 194689812,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587395917
    },
    {
        "content": "<p>I've just opened <a href=\"https://github.com/leanprover-community/lean/issues/197\" title=\"https://github.com/leanprover-community/lean/issues/197\">https://github.com/leanprover-community/lean/issues/197</a>.</p>",
        "id": 194749035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428591
    },
    {
        "content": "<p>I'll try to add more examples as I come across them.</p>",
        "id": 194749044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428600
    },
    {
        "content": "<p>We probably could minimise that example quite a bit further still.</p>",
        "id": 194749058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428613
    }
]