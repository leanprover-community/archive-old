[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> in <a href=\"https://github.com/leanprover-community/mathlib/pull/9058\">#9058</a> you generalized the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex\">docs#convex</a> to sets in modules over ordered semi-rings. But your definition doesn't seem to ensure that a barycentric combination of elements of a convex set belong to this convex set. Indeed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex.sum_mem\">docs#convex.sum_mem</a> assumes scalars form a linearly ordered field (and the obvious proof on paper certainly also requires inverting stuff). Are you sure this is the definition you wanted? If we switch to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex.sum_mem\">docs#convex.sum_mem</a> as the definition (and a lemma saying that over a field it sufficices to check the weak condition), would we loose any convex set you care about?</p>",
        "id": 316960515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671545816
    },
    {
        "content": "<p>Yes, you're catching this definition mid-(a long) refactor. My idea was to define convex spaces with a primitive operation <code>convex_combination</code>, which would generalise both semimodules and affine spaces.</p>",
        "id": 316962847,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671546447
    },
    {
        "content": "<p>The older thread is <a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/253162509\">here</a></p>",
        "id": 316968036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671547861
    },
    {
        "content": "<p>I see. It would have been nice to finish this because the current definition is probably not usable at all beyond the field case.</p>",
        "id": 316971754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671548829
    },
    {
        "content": "<p>I'll try to work around that, but this is digging an even deeper rabbit hole than what I hoped two hours ago <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 316972318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671548999
    },
    {
        "content": "<p>What are your needs? My original goal was to generalise to scalar semifields, which involved generalising to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_semiring\">docs#ordered_semiring</a> because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_semifield\">docs#linear_ordered_semifield</a> wasn't yet a thing.</p>",
        "id": 316976676,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671550210
    },
    {
        "content": "<p>Now that it is, I wonder whether we even want the non-semifield case.</p>",
        "id": 316976777,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671550236
    },
    {
        "content": "<p>For the record, I just want to add that I may do another convexity refactor at some point if I figure out ways to nicely unify the usual convexity with convexity over non-archimedean fields. But it is not relevant for the current conversation</p>",
        "id": 316977746,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671550504
    },
    {
        "content": "<p>In my use case the ring of scalars is the ring of germs of smooth functions at a point in a manifold.</p>",
        "id": 316978284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671550650
    },
    {
        "content": "<p>This is subring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.germ\">docs#filter.germ</a></p>",
        "id": 316978756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671550783
    },
    {
        "content": "<p>The ordered ring instance is missing because people who wrote that file were too focused on ultraproducts so we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.germ.linear_ordered_comm_ring\">docs#filter.germ.linear_ordered_comm_ring</a>  but not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">filter.germ.ordered_comm_ring</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ordered_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">germ</span> <span class=\"n\">l</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">‚ü©</span> <span class=\"n\">hab</span> <span class=\"o\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eventually.mono</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">hx</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span>  <span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">‚ü©</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eventually.mono</span> <span class=\"o\">(</span><span class=\"n\">ha.and</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg</span> <span class=\"n\">hx.1</span> <span class=\"n\">hx.2</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">filter.germ.partial_order</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">germ</span> <span class=\"n\">l</span> <span class=\"n\">R</span><span class=\"o\">))}</span>\n</code></pre></div>",
        "id": 316979133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671550879
    },
    {
        "content": "<p>I have some fun exercise for people with the right kind of masochistic bias:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">really_convex_hull</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span>  <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">w</span> <span class=\"bp\">‚àß</span> <span class=\"n\">support</span> <span class=\"n\">w</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">s</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àß</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_mem_really_convex_hull</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">really_convex_hull</span> <span class=\"bp\">ùïú</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 317000807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671557398
    },
    {
        "content": "<p>The proof on paper is: \"What do you mean by proof? Is there anything to prove?\", which usually means quite a lot of Lean code.</p>",
        "id": 317001193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671557493
    },
    {
        "content": "<p>Are you proposing that <code>really_convex_hull</code> replace <code>convex_hull</code>?</p>",
        "id": 317007275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671559325
    },
    {
        "content": "<p>Because if we're going to use up the community pool of masochistic bias, it would be great to have the affine generalization at the same time, assuming they're not incompatible</p>",
        "id": 317007571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671559427
    },
    {
        "content": "<p>Yes, I propose some version of <code>really_convex_hull</code> should replace <code>convex_hull</code> (and the analogue change for the definition of <code>convex</code>). This wouldn't be enough to get the affine case as far as I can see, but that would make the current version of <code>convex</code> and <code>convex_hull</code> usable beyond the field case.</p>",
        "id": 317007713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671559468
    },
    {
        "content": "<p>And I think that proving some form of this lemma will be needed to connect any super abstract version of convexity with something usable in the ordered_ring case.</p>",
        "id": 317007803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671559503
    },
    {
        "content": "<p>I think my point is that if we did the affine case we'd probably have to throw away that definition and pick a different one (maybe in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.weighted_vsub\">docs#finset.weighted_vsub</a>); so it might be worth solving both problems at once rather than repeating the work</p>",
        "id": 317008090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671559582
    },
    {
        "content": "<p>What you are describing sounds nice but it is very unlikely to happen in the coming year while I need this lemma now.</p>",
        "id": 317008237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671559637
    },
    {
        "content": "<p>Mathlib3 now or mathlib4 now?</p>",
        "id": 317008311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671559667
    },
    {
        "content": "<p>This is in mathlib3.</p>",
        "id": 317008453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671559703
    },
    {
        "content": "<p>Actually I'm trying to refactor something from the sphere eversion project.</p>",
        "id": 317008488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671559716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I assume that I can change <code>[has_smul ùïú E]</code> to <code>[module ùïú E]</code>? Otherwise I can't prove anything about the sum of <code>w x ‚Ä¢ x</code>.</p>",
        "id": 317024833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671564843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/convexity/near/316978284\">said</a>:</p>\n<blockquote>\n<p>In my use case the ring of scalars is the ring of germs of smooth functions at a point in a manifold.</p>\n</blockquote>\n<p>Amazing! I kind of gave up the refactor halfway through because of the lack of need for the extra generality. But if you need it, I'm getting straight back in.</p>",
        "id": 317024872,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671564845
    },
    {
        "content": "<p>Disclaimer: I'm painting my house for the next two weeks so my Lean time won't be much.</p>",
        "id": 317025208,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671564909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>: does your use-case need semirings, or would rings be fine?</p>",
        "id": 317025427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671564987
    },
    {
        "content": "<p>(I ask because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_torsor\">docs#add_torsor</a> is currently only defined for <code>add_comm_group</code>, and given the choice I'd rather we prioritize a) your use case b) affine spaces c) semirings instead of a) your use case b) semirings c) affine spaces)</p>",
        "id": 317025732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671565097
    },
    {
        "content": "<p>If it's only the germs of smooth functions that Patrick mentioned above, then I'm pretty sure rings is good enough.</p>",
        "id": 317025743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671565102
    },
    {
        "content": "<p>yeah, Patrick is doing mathematics, so semirings are unlikely to be involved :-) (yes yes I know the naturals are a semiring, but he's a topologist)</p>",
        "id": 317025881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671565153
    },
    {
        "content": "<p>I've reduced it to a lemma which I don't know a good name for, modulo changing <code>has_smul</code> to <code>module</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"c1\">-- changed from original question</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">really_convex_hull</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span>  <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">w</span> <span class=\"bp\">‚àß</span> <span class=\"n\">support</span> <span class=\"n\">w</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">s</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àß</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- https://xkcd.com/927/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finsum.exists_ne_zero_of_sum_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsum_mem_finset_eq_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finset.exists_ne_zero_of_sum_ne_zero</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àë·∂†</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"bp\">‚àë</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_mem_really_convex_hull</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">really_convex_hull</span> <span class=\"bp\">ùïú</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àë·∂†</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t.filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">pi.le_def</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finsum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÄ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_of_mem_filter</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_support</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">finsum.exists_ne_zero_of_sum_ne_zero</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mem_filter</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hz</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">h‚ÇÅ</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">finsum_mem_finset_eq_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">z</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finsum_mem_finset_eq_sum</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">foo</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mem_filter</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hy.2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 317025961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671565178
    },
    {
        "content": "<p>You want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_zero_iff\">docs#finset.sum_eq_zero_iff</a></p>",
        "id": 317026745,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671565404
    },
    {
        "content": "<p>Not for this lemma, right? Oh -- are you responding to Eric?</p>",
        "id": 317026828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671565439
    },
    {
        "content": "<p>or rather the <code>of_nonneg</code> version (and you're missing the non-negativity assumption in your lemma)</p>",
        "id": 317026914,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671565457
    },
    {
        "content": "<p>No no, I'm responding to you. The more API way to state your lemma is <code>sum ... = 0 iff forall ...</code></p>",
        "id": 317027127,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671565521
    },
    {
        "content": "<p>Are you talking about <code>finsum.exists_ne_zero_of_sum_ne_zero</code>? This needs no non-negativity assumptions.</p>",
        "id": 317027348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671565580
    },
    {
        "content": "<p>It's not an iff.</p>",
        "id": 317027391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671565598
    },
    {
        "content": "<p>Ah sorry my phone wouldn't display the unicode. Then you want the contrapositive of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_zero\">docs#finset.sum_eq_zero</a></p>",
        "id": 317027593,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671565671
    },
    {
        "content": "<p>Oh lol I know exactly that situation, my phone does that too :-/</p>",
        "id": 317027697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671565698
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"c1\">-- note to Patrick: I needed this at some point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">really_convex_hull</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span>  <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">w</span> <span class=\"bp\">‚àß</span> <span class=\"n\">support</span> <span class=\"n\">w</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">s</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àß</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- https://xkcd.com/927/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finsum.exists_ne_zero_of_sum_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àë·∂†</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsum_mem_finset_eq_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finset.exists_ne_zero_of_sum_ne_zero</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àë·∂†</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"bp\">‚àë</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsum_eq_finset_sum_of_support_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">_</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">s.image</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset.sum_image'</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_support</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">finset.exists_ne_zero_of_sum_ne_zero</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">‚ä¢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_mem_really_convex_hull</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">really_convex_hull</span> <span class=\"bp\">ùïú</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àë·∂†</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t.filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">pi.le_def</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finsum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÄ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_of_mem_filter</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_support</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">finsum.exists_ne_zero_of_sum_ne_zero</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mem_filter</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hz</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">h‚ÇÅ</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">finsum_mem_finset_eq_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">z</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finsum_mem_finset_eq_sum</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">foo</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mem_filter</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hy.2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  (note the <code>module</code> change -- is it OK?)</p>",
        "id": 317029032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671566176
    },
    {
        "content": "<p>Awesome, thank you very much Kevin!</p>",
        "id": 317035192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671568547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/convexity/near/317025427\">said</a>:</p>\n<blockquote>\n<p>does your use-case need semirings, or would rings be fine?</p>\n</blockquote>\n<p>Rings would be fine.</p>",
        "id": 317035302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671568576
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 317058249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671578409
    },
    {
        "content": "<p>I think we concluded in one of the past discussions that to cover both the semiring/semifield case (more precisely, the case where the module is only an <code>add_comm_monoid</code> not an <code>add_comm_group</code>) and the <code>add_torsor</code> case, while avoiding diamonds, we'd need both the class for abstract affine combination spaces and the class that inherits from both that and <code>add_torsor</code> for a module and asserts that the two affine combination operations are equal. And then ensure that the instances are set up so that modules get the affine combination operation expressed to be defeq to the version expressed as a linear combination in the obvious way (and only propositionally equal, not defeq, to the version derived from the <code>add_torsor</code> instance for the module over itself).</p>",
        "id": 317066726,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1671583625
    },
    {
        "content": "<p>How did we conclude that? Thinking about it yesterday I reached the conclusion that it was enough for <code>affine_space</code> to extend <code>convex_space</code> (and make defaults for the <code>convex_space</code> fields).</p>",
        "id": 317097488,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671607855
    },
    {
        "content": "<p>I was also wondering: Do we want to base convexity on a type of convex combinations? By that I mean a type of finitely supported nonnegative functions whose sum is 1. This is basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/std_simplex\">docs#std_simplex</a>.</p>",
        "id": 317121141,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671617099
    },
    {
        "content": "<p>The advantage is that operations on<br>\nthis type encode operations on any space without needing us to supply repetitive nonnegativity and sum = 1 obligations.</p>",
        "id": 317121746,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671617276
    },
    {
        "content": "<p>Oh my, is there some initial object hiding in there?</p>",
        "id": 317121835,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671617292
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Convexity.20refactor/near/253773652\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Convexity.20refactor/near/253773652</a></p>",
        "id": 317122920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671617660
    },
    {
        "content": "<p>Yeah I'm not believing Yury's argument anymore. If the <code>affine_space</code> instance contains the <code>convex_space</code> one, everything is still defeq.</p>",
        "id": 317123324,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671617797
    },
    {
        "content": "<p>The defeq we lose is between the new primitive <code>convex_combination</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_space.weighted_vsub\">docs#affine_space.weighted_vsub</a>. This in my opinion is better than losing the defeq with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a>. But really I think both are breakable without too much trouble.</p>",
        "id": 317123639,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671617902
    },
    {
        "content": "<p>Affine spaces do not need the ring to be ordered and so should not extend anything involving an order on the ring. They can extend a class that has all affine combinations (with sum of weights 1), but not a class that depends on the ring being ordered. (The first step in any case for setting up abstract affine combination spaces is probably to remove the <code>affine_space</code> notation for <code>add_torsor</code>; the vast bulk of the existing affine space API involves vectors and subtraction and genuinely depends on having a torsor rather than just affine combinations.)</p>",
        "id": 317156082,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1671628765
    },
    {
        "content": "<p>Right, I missed this. And I totally agree that <code>affine_space</code> will mean something different after the refactor and that the rename is basically the first thing we need to do.</p>",
        "id": 317192157,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1671638445
    }
]