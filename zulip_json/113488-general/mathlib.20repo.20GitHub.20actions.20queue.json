[
    {
        "content": "<p>With our recent growth <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> we're starting to run into <a href=\"https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration#usage-limits\">limits on the number of concurrent GitHub actions workflows</a>. In light of this, I've started canceling workflows on \"outdated\" commits in some branches. Note that even after these cancellations we still have <a href=\"https://github.com/leanprover-community/mathlib/actions?query=is%3Aqueued\">a bunch of queued workflows</a>. </p>\n<p>I don't know that we need to do too much right now to address this, but maybe something to keep in mind.</p>",
        "id": 233516109,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617811204
    },
    {
        "content": "<p>Is there any way to tell GHA that we don't want them to run just yet (per PR)? For example, on my WIP PR there's absolutely zero need a workflow right now, but it'd still be taking up a slot.</p>",
        "id": 233516938,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617811482
    },
    {
        "content": "<p>Maybe there's a way to set it up so the CI runs on the latest commit only when the <code>awaiting-review</code> tag is added?</p>",
        "id": 233517599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617811749
    },
    {
        "content": "<p>It might be possible to adjust the scripts somehow, but it might be easiest now just to manually cancel redundant or unnecessary workflows (only if you want, this is totally optional!). If you click on the yellow circle next to a commit and then on \"Details\" next to any of the items that start with \"continuous integration / ...\", you will get to a page that will let you cancel the main (longest-running) workflow for that commit.</p>",
        "id": 233519756,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617812546
    },
    {
        "content": "<p>I've canceled a few jobs again on outdated commits just now, from the branches <code>mul_vec_smul_assoc</code> and <code>structure_sheaf_basic_opens_iso</code>. </p>\n<p><strong>edit</strong> and <code>fin_succ_succ_above_succ</code></p>",
        "id": 235521141,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619015885
    },
    {
        "content": "<p>Hmm, this is somewhat concerning: <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/770883207\">this bors batch</a> just timed out and failed, not (just) because the CI time was too long, but I think also because some of its jobs were queued for a while before they started. The total time allowed is 6 hours and currently CI runs for around 4.5, so if the queue is stuck for a while this becomes more of a possibility.</p>\n<p>I don't know of a way to tell GitHub actions to run certain jobs with a higher priority.</p>",
        "id": 235573071,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619035606
    },
    {
        "content": "<p>I guess that technically we could make a <code>staging1</code> and <code>staging2</code>. Where the regular build gets a PR batch from <code>staging1</code> into <code>staging2</code> and then passing <code>leanchecker</code> you move from <code>staging2</code> to <code>master</code>.</p>",
        "id": 235574082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619036015
    },
    {
        "content": "<p>Can you elaborate? I'm not sure I understand the idea.</p>",
        "id": 235574344,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619036152
    },
    {
        "content": "<p>Ugh, the current <code>staging</code> job has been queued for half an hour, so it might also end up timing out as well.</p>",
        "id": 235575888,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619036899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I was thinking, if we type <code>bors merge</code>, then <code>bors</code> puts the PR  on a queue that will end up being merged into a staging branch (maybe <code>premaster</code>?). For this, it only needs to run half of CI.<br>\nAnd then regularly, we run <code>leanchecker</code> on <code>premaster</code>, and merge it into <code>master</code>.</p>",
        "id": 235577420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619037651
    },
    {
        "content": "<p>That would split CI into two pieces.</p>",
        "id": 235577431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619037661
    },
    {
        "content": "<p>We would still check that <code>master</code> passes <code>leanchecker</code>. But maybe <code>leanchecker</code> doesn't need to be run on every PR and/or bors staging queue</p>",
        "id": 235577483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619037699
    },
    {
        "content": "<p>Hmm, I think this could help a bit, but I'm not sure how we would manage <code>premaster</code> vs <code>master</code>. Also, I think running <code>leanchecker</code> on all PRs is something that has been valuable for us. I haven't been following all the details, but haven't there been some <code>leanchecker</code> failures recently that were caught in PRs?</p>",
        "id": 235579159,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619038488
    },
    {
        "content": "<p><code>leanchecker</code> is extremely slow since the nsmul and gsmul refactoring, for no good reason we can see, so disabling it until we understand what is going on might be reasonable.</p>",
        "id": 235582418,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619039421
    },
    {
        "content": "<p>Would it help if we decided that everyone should have his branches on his own mathlib fork (with CI active on the fork)? This would only work out if oleans could also be uploaded for the forks, but it would split the workload a lot (and it could even scale if there are more contributors). CI on mathlib would then be only for bors PRs to master.</p>",
        "id": 235582984,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619039579
    },
    {
        "content": "<p>Does bors rebuild the same commit after a timeout, or split the batch?</p>",
        "id": 235583689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619039740
    },
    {
        "content": "<p>Because if the former, our olean cache should at least save us from a second timeout</p>",
        "id": 235583804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619039765
    },
    {
        "content": "<p>It split the batch.</p>",
        "id": 235583876,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619039797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235582418\">said</a>:</p>\n<blockquote>\n<p><code>leanchecker</code> is extremely slow since the nsmul and gsmul refactoring, for no good reason we can see, so disabling it until we understand what is going on might be reasonable.</p>\n</blockquote>\n<p>This comment is somewhat worrying to me. If leanchecker doesn't like the refactor, then maybe the refactor was a bad idea and/or forgot to mark something with the right reducibility setting and so on. I would rather back out the refactor than stop checking proofs with an external verifier</p>",
        "id": 235622990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619070314
    },
    {
        "content": "<p>Also concerning: <a href=\"https://github.com/leanprover-community/mathlib/runs/2405804842?check_suite_focus=true\">the \"Build mathlib\" job in the current staging batch</a> took almost 4h17m (the previous longest build I saw was around 3h47m). Since it takes around an hour to run tests + lint, we don't have much more time available before we hit bors's 6 hour limit.</p>",
        "id": 235624381,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619071484
    },
    {
        "content": "<p>Will the -T50000 challenge help here?</p>",
        "id": 235624598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619071645
    },
    {
        "content": "<p>or is the time budget going elsewhere</p>",
        "id": 235624611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619071660
    },
    {
        "content": "<p>I'm not sure. Maybe looking at what pops up in the <a class=\"stream\" data-stream-id=\"113538\" href=\"/#narrow/stream/113538-CI\">#CI</a> thread will help.</p>",
        "id": 235624631,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619071688
    },
    {
        "content": "<p>I'm staring at a stupid int module diamond in the liquid project and I know full well that the gsmul refactor was the right thing to do</p>",
        "id": 235625149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619072120
    },
    {
        "content": "<p>All I did was took the dual of a finite free Z-module.</p>",
        "id": 235625176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619072152
    },
    {
        "content": "<p>I'm looking again at the nsmul PR and I don't see anything that has specifically been indicated as taking a while. Part of the issue with diagnosing this is that the information we have is incredibly unfocused: we know that overall mathlib build time is rising but not which part of mathlib is contributing to the rise</p>",
        "id": 235625635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619072503
    },
    {
        "content": "<p>Obviously if you ask me leanchecker taking an hour is a ridiculous figure indicating that something has gone horribly wrong, it's doing the analogue of what metamath does in seconds</p>",
        "id": 235625749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619072594
    },
    {
        "content": "<p>anything more than 10 minutes seems crazy</p>",
        "id": 235625762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619072611
    },
    {
        "content": "<p>Does it help if we generate logs of what exactly <code>leanchecker</code> is spending it's time on? (Gabriel showed us how to do that.)<br>\nI can generate such logs for several commits (say 10, or so) from the last month.</p>",
        "id": 235626367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619073103
    },
    {
        "content": "<p>Can this problem be solved by throwing money at it, by the way? (ie at GitHub or whoever is doing the thing that takes 4.5 hours)</p>",
        "id": 235628374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619074713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>, do you still have your(?) visualisations of the time cost of various parts of mathlib?</p>",
        "id": 235629639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619075084
    },
    {
        "content": "<p>This already takes longer than I expected</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">time</span> lean --recursive --export<span class=\"o\">=</span>mathlib.txt src/\n\nreal    3m40.672s\nuser    3m32.014s\nsys     0m7.948s\n</code></pre></div>",
        "id": 235630089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619075247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235629639\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span>, do you still have your(?) visualisations of the time cost of various parts of mathlib?</p>\n</blockquote>\n<p>I have <a href=\"https://observablehq.com/d/9fa916656de340a8\">this notebook</a> which gets its data from <a href=\"https://tqft.net/lean/mathlib/?C=M;O=D\">https://tqft.net/lean/mathlib/?C=M;O=D</a> (some of the logs there are broken, it seems).</p>",
        "id": 235631646,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619076118
    },
    {
        "content": "<p>Ah, I see, once I stopped my build robot we lost that.</p>",
        "id": 235631783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619076187
    },
    {
        "content": "<p>I could probably adapt it to parse the HTML from the #CI build bot, but it might be easier just to have that bot spit out a JSON file with the timings.</p>",
        "id": 235631843,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619076224
    },
    {
        "content": "<p>I'm now running <code>leanchecker +leanprover-community/lean:3.29.0 -v mathlib.txt 2&gt;&amp;1 | ts -i -m %.s</code> on latest master.</p>",
        "id": 235633699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619077286
    },
    {
        "content": "<p>Is <code>leanchecker</code> something that can be easily parallelized?</p>",
        "id": 235634596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619077814
    },
    {
        "content": "<p>It can be, but we shouldn't assume external typecheckers are threaded</p>",
        "id": 235636727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619078881
    },
    {
        "content": "<p>Sure, we shouldn't. But it still helps if in the current situation we can divide the time by 16 or 32 just by parallelizing.</p>",
        "id": 235637504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619079347
    },
    {
        "content": "<p>leanchecker timings for the commits just before <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a> and just after could be enough to see where the increase is located.</p>",
        "id": 235637525,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619079355
    },
    {
        "content": "<p>And it seems to me that in principal this is something that can be parallelized in extrema</p>",
        "id": 235637601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619079377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235637525\">said</a>:</p>\n<blockquote>\n<p>leanchecker timings for the commits just before <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a> and just after could be enough to see where the increase is located.</p>\n</blockquote>\n<p>I'll do those next.</p>",
        "id": 235637609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619079383
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 235637631,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619079397
    },
    {
        "content": "<p>It's still running the one on current master.</p>",
        "id": 235637639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619079401
    },
    {
        "content": "<p>But I guess I'll just make 2 more copies of mathlib. Since it's using only a single thread anyway <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235637672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619079425
    },
    {
        "content": "<p><del>Running 3 processes of <code>leanchecker</code> next to each other just ate up 32GB of memory</del> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 235644894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619083272
    },
    {
        "content": "<p>Is that to be expected? Or does this hint at a memory leak?</p>",
        "id": 235644915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619083286
    },
    {
        "content": "<p>Sorry, I take that back. It was 3 copies of single-threaded <code>lean --recursive --export=mathlib.txt src/</code></p>",
        "id": 235646256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619083899
    },
    {
        "content": "<p>Still, I'm surprised that would take up so much RAM</p>",
        "id": 235646297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619083913
    },
    {
        "content": "<p>How many lines of output does <code>leanchecker</code> have, roughly?</p>",
        "id": 235650583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619085929
    },
    {
        "content": "<p>I'm creating roughly 30.000 lines of output in roughly 6 minutes, at the moment.</p>",
        "id": 235650723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619085993
    },
    {
        "content": "<p>Line 26000 stands out:</p>\n<blockquote>\n<p>6.202454    26000 nat.inv_pos_of_nat</p>\n</blockquote>",
        "id": 235650761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619086018
    },
    {
        "content": "<p>(My terminal is printing every 1000th line, and everything is being written to a file.)</p>",
        "id": 235650811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619086044
    },
    {
        "content": "<p>But apparently <code>nat.inv_pos_of_nat</code> is taking 6.2 leanchecker seconds.</p>",
        "id": 235650844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619086069
    },
    {
        "content": "<p>The typical line is</p>\n<blockquote>\n<p>0.000029    27000 quotient_group.quotient.div_inv_monoid._proof_3</p>\n</blockquote>",
        "id": 235650944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619086098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235631843\">said</a>:</p>\n<blockquote>\n<p>I could probably adapt it to parse the HTML from the #CI build bot, but it might be easier just to have that bot spit out a JSON file with the timings.</p>\n</blockquote>\n<p>What do you need? Exporting file-level timings should be no problem since I have them in the database anyway.</p>",
        "id": 235653558,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1619087545
    },
    {
        "content": "<p>File-level timings for each commit in JSON format would be easiest for me to work with. <a href=\"https://tqft.net/lean/mathlib/6f7c53944fc28ee54bddd4f5049a0ae269b4c23e.json\">Here's an example</a> of what Scott was generating before (the 3 numbers are real, user and sys times from <a href=\"#narrow/stream/113538-CI/topic/build.20time.20bot/near/199713332\">this script</a>).</p>",
        "id": 235654632,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619088131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235650844\">said</a>:</p>\n<blockquote>\n<p>But apparently <code>nat.inv_pos_of_nat</code> is taking 6.2 leanchecker seconds.</p>\n</blockquote>\n<p>You are really talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.inv_pos_of_nat\">docs#nat.inv_pos_of_nat</a>? That takes 22.1ms to elaborate on my computer? Looks crazy!</p>",
        "id": 235655044,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619088373
    },
    {
        "content": "<p>No I can see why</p>",
        "id": 235655065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619088387
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_pos_of_nat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"n\">inv_pos.2</span> <span class=\"bp\">$</span> <span class=\"n\">add_pos_of_nonneg_of_pos</span> <span class=\"n\">n.cast_nonneg</span> <span class=\"n\">zero_lt_one</span>\n</code></pre></div>\n<p>The issue is in <code>n.cast_nonneg</code>, which proves </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nat.cast_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>when the current context is about a <code>linear_ordered_field</code>. This involves proving that the two <code>nat.cast</code> expressions are the same, which requires unfolding <code>nat.cast</code> until it uses projections, as well as unfolding all of the typeclass constructors in this stack:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.cast_coe.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_one_class.to_mul_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_ring.to_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_ring.to_ordered_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_linear_ordered_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>That is, the kernel is going to have to look at <code>linear_ordered_comm_ring.mk</code> with its 40 fields, and <code>linear_ordered_ring.mk</code> with its 39 fields and so on</p>",
        "id": 235655467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619088621
    },
    {
        "content": "<p>So you're saying it's bad because of old style structures?</p>",
        "id": 235655542,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619088672
    },
    {
        "content": "<p>leo was always making a big deal about \"packing and unpacking\" and I think this is it</p>",
        "id": 235655562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619088692
    },
    {
        "content": "<p>I wonder if we shouldn't make our algebraic spine flatter. I mean, have:</p>\n<ul>\n<li><code>monoid</code> extending <code>has_mul</code> and <code>has_one</code></li>\n<li><code>add_monoid</code> extending <code>has_add</code> and <code>has_zero</code></li>\n<li><code>semiring</code> extending <code>monoid</code> and <code>add_monoid</code></li>\n<li><code>ring</code> extending <code>semiring</code></li>\n<li><code>field</code> extending <code>ring</code><br>\nand all the other ones built on these ones. The fact that a semiring is a monoid with zero would be registered with an instance, not direct inheritance. In this way, when you need to access the basic fields the path is much shorter than what we have currently. (And also, no need for old style structures since there are no common fields in the spine I described).</li>\n</ul>",
        "id": 235656326,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619089182
    },
    {
        "content": "<p>Well part of the issue is that typeclass inference is finding these inconveniently long paths, even when short paths exist</p>",
        "id": 235656479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619089247
    },
    {
        "content": "<p>(with <code>group</code> extending <code>monoid</code> and <code>add_group</code> extending <code>add_monoid</code>, and instances from <code>ring</code> to <code>add_group</code>)</p>",
        "id": 235656485,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619089252
    },
    {
        "content": "<p>old structures are optimized by having lots of \"shortcut\" instances, but shortcut instances don't work with lean 3 typeclass inference</p>",
        "id": 235656524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619089279
    },
    {
        "content": "<p>(I expect this wouldn't help too much for the reasons Mario describes, but if we do it, we would also need to insert <code>add_sub_monoid</code> and <code>div_inv_monoid</code> at the appropriate places.)</p>",
        "id": 235656635,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619089342
    },
    {
        "content": "<p>If typeclass inference was able to perform path contraction on the paths it finds that would help a lot</p>",
        "id": 235656642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619089347
    },
    {
        "content": "<p>for example, we have a way to register \"whenever you find a path <code>A.to_B (B.to_C x)</code> use <code>A.to_C x</code> instead\"</p>",
        "id": 235656775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619089418
    },
    {
        "content": "<p>even if <code>A.to_C</code> is not part of normal typeclass inference</p>",
        "id": 235656839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619089449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235650583\">said</a>:</p>\n<blockquote>\n<p>How many lines of output does <code>leanchecker</code> have, roughly?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wc -l mathlib_f2984d51615166e96632e8efdfe7875575ad76ec.time\n<span class=\"m\">142221</span> mathlib_f2984d51615166e96632e8efdfe7875575ad76ec.time\n</code></pre></div>",
        "id": 235657318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619089739
    },
    {
        "content": "<p><a href=\"https://gist.github.com/jcommelin/d1f5e95708ce61abb827216fb6463afc\">https://gist.github.com/jcommelin/d1f5e95708ce61abb827216fb6463afc</a> &lt;- todays mathlib master</p>",
        "id": 235657344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619089756
    },
    {
        "content": "<p>Another reason why this particular example is bad is that <code>nat.cast</code> is not a projection, and so it is triggering a different heuristic. Normally when you have something like <code>A.proj (B.to_A (D.to_B x)) = A.proj (C.to_A (D.to_C x))</code> it will do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">B.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">B.proj</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">D.proj</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">D.proj</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">C.proj</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">D.proj</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">D.proj</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However, when it is a defined function instead of a projection, it does this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A.f</span> <span class=\"o\">(</span><span class=\"n\">B.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.f</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">B.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">A.mk</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj1</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj2</span> <span class=\"bp\">...</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.mk</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj1</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj2</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and those proofs can get huge</p>",
        "id": 235657354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619089768
    },
    {
        "content": "<p>I'm now starting the run on the <code>pre_7084</code> commit.</p>",
        "id": 235657494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619089858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235656326\">said</a>:</p>\n<blockquote>\n<p>The fact that a semiring is a monoid with zero would be registered with an instance, not direct inheritance.</p>\n</blockquote>\n<p>Is there any difference? For <code>old_structure_cmd</code>, isn't <code>extend</code> just a shorthand for \"write this instance for me\"?</p>",
        "id": 235657547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619089903
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cat mathlib_f2984d51615166e96632e8efdfe7875575ad76ec.time <span class=\"p\">|</span> grep <span class=\"s2\">\"^[^0]\"</span> <span class=\"p\">|</span> wc -l\n<span class=\"m\">851</span>\n</code></pre></div>\n<p>There's 851 declarations that take more than 1s on my machine (today's master).</p>",
        "id": 235658645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619090499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235656635\">said</a>:</p>\n<blockquote>\n<p>(I expect this wouldn't help too much for the reasons Mario describes, but if we do it, we would also need to insert <code>add_sub_monoid</code> and <code>div_inv_monoid</code> at the appropriate places.)</p>\n</blockquote>\n<p>My point is exactly to <em>not</em> insert these at the appropriate places. Then, when Lean has to check that two fields of <code>semiring</code>s are the same (in the bad situation that it doesn't use good heuristics and really wants to unfold everything), then the shortest the path the better.</p>\n<p>Of course, one would have instances from <code>semiring</code> to <code>div_inv_monoid</code>, to be able to use theorems on <code>div_inv_monoid</code>s when one has a ring, but it wouldn't be baked into the definition of semirings, to have shorter paths.</p>",
        "id": 235659563,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619090982
    },
    {
        "content": "<p>Isn't \"path shortness\" determined by instance priority / ordering?</p>",
        "id": 235659692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619091040
    },
    {
        "content": "<p>I don't think it distinguishes between \"<code>extends</code> vs <code>instance</code>\"</p>",
        "id": 235659719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619091053
    },
    {
        "content": "<p>Other than the fact that the <code>extends</code> instances come first</p>",
        "id": 235659732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619091061
    },
    {
        "content": "<p>(which I think means they actually have _lower_ priority in the case of a tie?)</p>",
        "id": 235659775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619091087
    },
    {
        "content": "<p>I think we might find a way out of this by setting priorities very carefully</p>",
        "id": 235659912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619091160
    },
    {
        "content": "<p>for example, the more levels of the hierarchy are jumped, the higher the priority</p>",
        "id": 235659957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619091186
    },
    {
        "content": "<p>We still have the problem of shortcut instances though if we throw in all the composites. It is clear to me that having all pairwise composites is unambiguously the right solution to how to express the terms here so that they are both visually smaller and also less work for lean, but typeclass inference is really stupid about exploring exponentially many paths in the presence of a transitively closed graph of coercions</p>",
        "id": 235660279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619091344
    },
    {
        "content": "<p>(We can also be smarter about it and get away with n log n composites and still gain most of the benefits, for example with a simple spine like sebastien <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235656326\">suggested</a>. But total number of definitions in the environment has never been something we have attempted to optimize for, and I don't think there have been performance issues as a result, so I don't see any reason not to just compute the whole graph.)</p>",
        "id": 235660505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619091473
    },
    {
        "content": "<p>I made <code>R</code> compute some stats for the run on today's master:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.</span>\n<span class=\"go\">  0.00001   0.00002   0.00002   0.02096   0.00002 122.06022</span>\n</code></pre></div>",
        "id": 235661247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619091841
    },
    {
        "content": "<p>sd: 0.510882</p>",
        "id": 235661353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619091882
    },
    {
        "content": "<p>Another piece of information that should be relatively easy to harvest is the number of proof steps in the theorem, i.e. lines in the export format. By dividing time by lines we can get a better sense for those theorems that have heavy refls in them</p>",
        "id": 235661614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619092003
    },
    {
        "content": "<p>What are the keys on the data you have Johan? Are they by theorem name?</p>",
        "id": 235661757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619092066
    },
    {
        "content": "<p>Can you tell us more about the Max? 2 minutes to check one declaration?</p>",
        "id": 235662565,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619092475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'm working on it. It's the first time I'm using <code>R</code> in 10 years...</p>",
        "id": 235662627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619092509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235657344\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/jcommelin/d1f5e95708ce61abb827216fb6463afc\">https://gist.github.com/jcommelin/d1f5e95708ce61abb827216fb6463afc</a> &lt;- todays mathlib master</p>\n</blockquote>\n<p>Here is the data</p>",
        "id": 235662674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619092532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 235662700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619092544
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">122</span><span class=\"bp\">.</span><span class=\"mi\">060217</span>    <span class=\"mi\">76322</span> <span class=\"n\">finset.sdiff_eq_self_iff_disjoint</span>\n</code></pre></div>",
        "id": 235662871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619092631
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sdiff_eq_self_iff_disjoint</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sdiff_eq_self</span><span class=\"o\">,</span> <span class=\"n\">subset_empty</span><span class=\"o\">,</span> <span class=\"n\">disjoint_iff_inter_eq_empty</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>not what I would have expected</p>",
        "id": 235663022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619092694
    },
    {
        "content": "<p>Great, we have a system which takes two minutes to verify something which doesn't need a proof :-)</p>",
        "id": 235663666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619092951
    },
    {
        "content": "<p>Are we sure the data isn't skewed somehow? This one looks pretty suspicious</p>",
        "id": 235663802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093016
    },
    {
        "content": "<p>like maybe it is attributing work done on the previous theorem, or the thread got paged out at the wrong moment</p>",
        "id": 235663913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093061
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">76309</span> <span class=\"n\">uniform_continuous₂.uniform_continuous</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000017</span>    <span class=\"mi\">76310</span> <span class=\"n\">Hausdorffification.of</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76311</span> <span class=\"n\">finset.subset.antisymm_iff</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000016</span>    <span class=\"mi\">76312</span> <span class=\"n\">finset.inter_subset_inter</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76313</span> <span class=\"n\">finset.sdiff_inter_self</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76314</span> <span class=\"n\">finset.superset.trans</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000016</span>    <span class=\"mi\">76315</span> <span class=\"n\">sdiff_inf_self_left</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000015</span>    <span class=\"mi\">76316</span> <span class=\"n\">finset.sdiff_inter_self_left</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">76317</span> <span class=\"n\">superset.equations._eqn_1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76318</span> <span class=\"n\">sdiff_le_sdiff</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000015</span>    <span class=\"mi\">76319</span> <span class=\"n\">finset.sdiff_subset_sdiff</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000019</span>    <span class=\"mi\">76320</span> <span class=\"n\">finset.sdiff_empty</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76321</span> <span class=\"n\">finset.sdiff_eq_self</span>\n<span class=\"mi\">122</span><span class=\"bp\">.</span><span class=\"mi\">060217</span>    <span class=\"mi\">76322</span> <span class=\"n\">finset.sdiff_eq_self_iff_disjoint</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000099</span>    <span class=\"mi\">76323</span> <span class=\"n\">compact_space_Icc.equations._eqn_1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000021</span>    <span class=\"mi\">76324</span> <span class=\"n\">equiv.prod_congr_left._proof_1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76325</span> <span class=\"n\">equiv.prod_congr_left._proof_2</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000015</span>    <span class=\"mi\">76326</span> <span class=\"n\">equiv.prod_congr_left</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000015</span>    <span class=\"mi\">76327</span> <span class=\"n\">fintype.exists_univ_list</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000020</span>    <span class=\"mi\">76328</span> <span class=\"n\">equiv.perm.prod_extend_right._proof_1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76329</span> <span class=\"n\">equiv.perm.prod_extend_right._proof_2</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">76330</span> <span class=\"n\">equiv.perm.prod_extend_right</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000016</span>    <span class=\"mi\">76331</span> <span class=\"n\">equiv.perm.prod_extend_right_apply_ne</span>\n</code></pre></div>\n<p>I can see that it's not working on just one area, it has <code>finset.basic</code> and <code>equiv.basic</code> in there mixed with <code>compact_space_Icc</code> from <code>topology.algebra.ordered</code></p>",
        "id": 235664264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093207
    },
    {
        "content": "<p>So maybe it is actually multithreaded and the 122 seconds were spent on <code>compact_space_Icc</code> or something else</p>",
        "id": 235664349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093247
    },
    {
        "content": "<p>Or the GC hit</p>",
        "id": 235664490,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619093294
    },
    {
        "content": "<p>This is C++, is there a GC?</p>",
        "id": 235664517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093308
    },
    {
        "content": "<p>I think exprs are reference counted in lean</p>",
        "id": 235664573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093329
    },
    {
        "content": "<p>It really doesn't look to be multithreaded. But there could be other things happening.</p>",
        "id": 235664596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619093339
    },
    {
        "content": "<p>If it's not multithreaded then why the weird order? Is the export file like that?</p>",
        "id": 235664659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093367
    },
    {
        "content": "<p>Ooh, yes, it might be the export file. But I find that file unreadable.</p>",
        "id": 235664715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619093391
    },
    {
        "content": "<p>sigh. proof export isn't supposed to be this inscrutable</p>",
        "id": 235664859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093451
    },
    {
        "content": "<p>Here is a gist with 50 lines of context around <code>sdiff_eq_self_iff_disjoint</code>:<br>\n<a href=\"https://gist.github.com/5e86ede6ccf08595ef70978385678f00\">https://gist.github.com/5e86ede6ccf08595ef70978385678f00</a></p>",
        "id": 235664933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619093496
    },
    {
        "content": "<p>The bunch of decls that took more than 10s on my machine:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">21235</span>   <span class=\"m\">34</span>.55023                                       bounded_continuous_function.mk_of_compact\n<span class=\"m\">32831</span>   <span class=\"m\">19</span>.57642                                                     AddCommGroup.large_category\n<span class=\"m\">45873</span>   <span class=\"m\">58</span>.12832                                                     X_in_terms_of_W._main._pack\n<span class=\"m\">46114</span>   <span class=\"m\">12</span>.56731     category_theory.monoidal.Mon_functor_category_equivalence.functor._proof_41\n<span class=\"m\">47135</span>   <span class=\"m\">21</span>.54670                                     euclidean_domain.gcd._main.equations._eqn_1\n<span class=\"m\">47328</span>   <span class=\"m\">14</span>.08090                                                      iterated_deriv_within_univ\n<span class=\"m\">47517</span>   <span class=\"m\">13</span>.20958                                                  continuous_linear_map.coe_fst<span class=\"err\">'</span>\n<span class=\"m\">48630</span>   <span class=\"m\">11</span>.19849                                                             nat.primes.coe_pnat\n<span class=\"m\">49481</span>   <span class=\"m\">21</span>.34276                                                          mvpfunctor.inhabited_M\n<span class=\"m\">49883</span>   <span class=\"m\">10</span>.11784                                                      cfilter.to_filter._proof_3\n<span class=\"m\">50917</span>   <span class=\"m\">10</span>.36216                                     mul_action.injective_of_quotient_stabilizer\n<span class=\"m\">51014</span>   <span class=\"m\">15</span>.61487                                   intermediate_field.findim_fixed_field_eq_card\n<span class=\"m\">55342</span>   <span class=\"m\">19</span>.34196                                                     path.trans.equations._eqn_1\n<span class=\"m\">56753</span>   <span class=\"m\">17</span>.47420                                                      AddCommMon.add_comm_monoid\n<span class=\"m\">56968</span>   <span class=\"m\">12</span>.00058                         category_theory.triangulated.triangle_rotation_unit_iso\n<span class=\"m\">60132</span>   <span class=\"m\">22</span>.02939     AddCommGroup.category_theory.forget₂.category_theory.creates_limit._proof_2\n<span class=\"m\">64847</span>   <span class=\"m\">29</span>.19659                                  <span class=\"k\">function</span>.injective.ordered_comm_ring._proof_24\n<span class=\"m\">67914</span>   <span class=\"m\">14</span>.51483                        category_theory.with_terminal.is_iso_of_from_star._aux_2\n<span class=\"m\">72856</span>   <span class=\"m\">21</span>.21235                                                                     rat.abs_def\n<span class=\"m\">76322</span>  <span class=\"m\">122</span>.06022                                               finset.sdiff_eq_self_iff_disjoint\n<span class=\"m\">99483</span>   <span class=\"m\">16</span>.29542                      category_theory.monad.forget_creates_colimits.new_cocone_ι\n<span class=\"m\">105394</span>  <span class=\"m\">14</span>.19519                                         order_dual.semilattice_inf_bot._proof_3\n<span class=\"m\">106988</span>  <span class=\"m\">36</span>.30792 Module.category_theory.monoidal_category.tensor_unit.comm_ring.equations._eqn_1\n<span class=\"m\">108881</span>  <span class=\"m\">11</span>.93040                         category_theory.limits.prod.diag_map_fst_snd_comp_assoc\n<span class=\"m\">111950</span>  <span class=\"m\">11</span>.38775   category_theory.limits.has_binary_biproduct.has_colimit_pair.equations._eqn_1\n<span class=\"m\">114456</span>  <span class=\"m\">55</span>.18284                                            pos_num.ldiff._main.equations._eqn_3\n<span class=\"m\">121654</span>  <span class=\"m\">10</span>.49787                               with_zero.canonically_ordered_add_monoid._proof_9\n<span class=\"m\">142182</span>  <span class=\"m\">16</span>.71473            category_theory.functor.left_adjoint_of_equivalence.equations._eqn_1\n</code></pre></div>",
        "id": 235665474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619093743
    },
    {
        "content": "<p>I think the file really is that disorganized</p>",
        "id": 235665557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093770
    },
    {
        "content": "<p>The <code>122s</code> is probably a hiccup. Although the server load is currently negligible. But maybe 37 people decide to look up my personal homepage at that exact time...</p>",
        "id": 235665707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619093840
    },
    {
        "content": "<p>I see two <code>#DEF</code>s in the file around your snippet, one to <code>&lt;something&gt;.of</code> and one to <code>something.antisymm_iff</code>. If I had to guess based on the other file I would say <code>Hausdorffification.of</code> and <code>finset.subset.antisymm_iff</code></p>",
        "id": 235665847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093895
    },
    {
        "content": "<p>The data from just before <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a>: <a href=\"https://gist.github.com/8a34e58f355df8c79349630e4f4dbe8b\">https://gist.github.com/8a34e58f355df8c79349630e4f4dbe8b</a></p>",
        "id": 235665870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619093914
    },
    {
        "content": "<p>which means that two completely unrelated files are just mashed together here, meaning that the single threaded leanchecker is jumping around like a multithreaded checker would</p>",
        "id": 235665924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619093942
    },
    {
        "content": "<p>Aha:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">19933</span>   <span class=\"m\">33</span>.04352   bounded_continuous_function.metric_space._proof_4\n<span class=\"m\">44039</span>   <span class=\"m\">57</span>.23696 measure_theory.simple_func.semilattice_inf._proof_5\n<span class=\"m\">65492</span>   <span class=\"m\">13</span>.15512                              nat.of_digits_one_cons\n<span class=\"m\">73812</span>  <span class=\"m\">121</span>.33800                    equiv.perm.sign_prod_congr_right\n<span class=\"m\">103809</span>  <span class=\"m\">14</span>.16039                            int.lor.equations._eqn_4\n<span class=\"m\">111199</span>  <span class=\"m\">53</span>.86009                              is_local_extr_on.inter\n<span class=\"m\">138539</span>  <span class=\"m\">15</span>.00112          times_cont_diff_within_at.equations._eqn_1\n</code></pre></div>",
        "id": 235666139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094031
    },
    {
        "content": "<p>That looks suspicious. Again a <code>&gt;120s</code> but totally different decl.</p>",
        "id": 235666166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094047
    },
    {
        "content": "<p>So I guess we need to run the export single-threadedly?</p>",
        "id": 235666189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094062
    },
    {
        "content": "<p>However, it also means that the critical heavy refl proof step could be associated to any proof currently in progress, not necessarily the next <code>#DEF</code></p>",
        "id": 235666234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619094071
    },
    {
        "content": "<p>That would be one way to fix it</p>",
        "id": 235666273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619094082
    },
    {
        "content": "<p>Should I try: <code>lean -j1 --recursive --export=mathlib.txt src/</code>?</p>",
        "id": 235666385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094121
    },
    {
        "content": "<p>Ideally there would be a way to construct this file in a multithreaded way without having five files getting mashed up. But all the IDs are sequential?</p>",
        "id": 235666613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619094209
    },
    {
        "content": "<p>It starts like this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">1</span> <span class=\"c1\">#NS 0 u</span>\n<span class=\"m\">2</span> <span class=\"c1\">#NS 0 eq</span>\n<span class=\"m\">3</span> <span class=\"c1\">#NS 0 α</span>\n<span class=\"m\">1</span> <span class=\"c1\">#UP 1</span>\n<span class=\"m\">0</span> <span class=\"c1\">#ES 1</span>\n<span class=\"m\">4</span> <span class=\"c1\">#NS 0 a</span>\n<span class=\"m\">1</span> <span class=\"c1\">#EV 0</span>\n<span class=\"m\">5</span> <span class=\"c1\">#NS 0 ᾰ</span>\n<span class=\"m\">2</span> <span class=\"c1\">#EV 1</span>\n<span class=\"m\">3</span> <span class=\"c1\">#ES 0</span>\n<span class=\"m\">4</span> <span class=\"c1\">#EP #BD 5 2 3</span>\n<span class=\"m\">5</span> <span class=\"c1\">#EP #BD 4 1 4</span>\n<span class=\"m\">6</span> <span class=\"c1\">#EP #BI 3 0 5</span>\n<span class=\"m\">6</span> <span class=\"c1\">#NS 2 refl</span>\n<span class=\"m\">7</span> <span class=\"c1\">#EC 2 1</span>\n<span class=\"m\">8</span> <span class=\"c1\">#EA 7 2</span>\n<span class=\"m\">9</span> <span class=\"c1\">#EA 8 1</span>\n<span class=\"m\">10</span> <span class=\"c1\">#EA 9 1</span>\n<span class=\"m\">11</span> <span class=\"c1\">#EP #BD 4 1 10</span>\n<span class=\"m\">12</span> <span class=\"c1\">#EP #BI 3 0 11</span>\n<span class=\"c1\">#IND 2 2 6 1 6 12 1</span>\n<span class=\"c1\">#QUOT</span>\n<span class=\"m\">7</span> <span class=\"c1\">#NS 0 comm_group_with_zero</span>\n<span class=\"m\">8</span> <span class=\"c1\">#NS 7 coe_norm_unit</span>\n<span class=\"m\">9</span> <span class=\"c1\">#NS 0 decidable_eq</span>\n<span class=\"m\">10</span> <span class=\"c1\">#NS 0 decidable_rel</span>\n<span class=\"m\">11</span> <span class=\"c1\">#NS 0 not</span>\n<span class=\"m\">12</span> <span class=\"c1\">#NS 0 false</span>\n<span class=\"c1\">#IND 0 12 3 0</span>\n<span class=\"m\">13</span> <span class=\"c1\">#EP #BD 4 3 3</span>\n<span class=\"m\">14</span> <span class=\"c1\">#EC 12</span>\n<span class=\"m\">15</span> <span class=\"c1\">#EP #BD 5 1 14</span>\n<span class=\"m\">16</span> <span class=\"c1\">#EL #BD 4 3 15</span>\n<span class=\"c1\">#DEF 11 13 16</span>\n<span class=\"m\">13</span> <span class=\"c1\">#NS 0 decidable</span>\n<span class=\"m\">14</span> <span class=\"c1\">#NS 0 p</span>\n<span class=\"m\">2</span> <span class=\"c1\">#US 0</span>\n<span class=\"m\">17</span> <span class=\"c1\">#ES 2</span>\n<span class=\"m\">18</span> <span class=\"c1\">#EP #BD 14 3 17</span>\n<span class=\"m\">15</span> <span class=\"c1\">#NS 13 is_false</span>\n</code></pre></div>",
        "id": 235666813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094291
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 235666848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619094306
    },
    {
        "content": "<p>If you say so</p>",
        "id": 235666871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094314
    },
    {
        "content": "<p>it's building <code>eq</code></p>",
        "id": 235666911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619094321
    },
    {
        "content": "<p>this is init.core</p>",
        "id": 235667002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619094345
    },
    {
        "content": "<p>I'm now running it with <code>-j1</code>. Let's see if the result will differ significantly.</p>",
        "id": 235667090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094366
    },
    {
        "content": "<p>we probably won't see any multithreading effects this early in the file</p>",
        "id": 235667166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619094395
    },
    {
        "content": "<p>Snap... why am I seeing two processes with <code>-j1</code> in <code>top</code>??</p>",
        "id": 235667617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094558
    },
    {
        "content": "<p>One must be a child of the other. They are using exactly the same amount of CPU and RAM. I don't understand linux</p>",
        "id": 235667753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094610
    },
    {
        "content": "<p>Use <code>htop</code> :) (and then <code>F5 (Tree)</code>)</p>",
        "id": 235668165,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619094745
    },
    {
        "content": "<p>Then it puts 45 processes with 0.0% CPU at the top of hte list...</p>",
        "id": 235668214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094783
    },
    {
        "content": "<p>Aha, I found it, and indeed one is a child of the other.</p>",
        "id": 235668362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619094844
    },
    {
        "content": "<p>Wooah check out htop! It's like top but upgraded to the 1990s!</p>",
        "id": 235669032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619095130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235657354\">said</a>:</p>\n<blockquote>\n<p>Another reason why this particular example is bad is that <code>nat.cast</code> is not a projection, and so it is triggering a different heuristic. Normally when you have something like <code>A.proj (B.to_A (D.to_B x)) = A.proj (C.to_A (D.to_C x))</code> it will do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">B.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">B.proj</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">D.proj</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.proj</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">D.proj</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">C.proj</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">D.proj</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">D.proj</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However, when it is a defined function instead of a projection, it does this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A.f</span> <span class=\"o\">(</span><span class=\"n\">B.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.f</span> <span class=\"o\">(</span><span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">B.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">C.to_A</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">A.mk</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj1</span> <span class=\"o\">(</span><span class=\"n\">D.to_B</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj2</span> <span class=\"bp\">...</span> <span class=\"bp\">=?=</span> <span class=\"n\">A.mk</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj1</span> <span class=\"o\">(</span><span class=\"n\">D.to_C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">proj2</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and those proofs can get huge</p>\n</blockquote>\n<p>Still, how come main Lean has no problem checking this in milliseconds, while it takes seconds to leanchecker? Are they using different heuristics to check rfl?</p>",
        "id": 235669821,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619095512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235657547\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235656326\">said</a>:</p>\n<blockquote>\n<p>The fact that a semiring is a monoid with zero would be registered with an instance, not direct inheritance.</p>\n</blockquote>\n<p>Is there any difference? For <code>old_structure_cmd</code>, isn't <code>extend</code> just a shorthand for \"write this instance for me\"?</p>\n</blockquote>\n<p>I don't really understand the inner workings. But what I can say for sure is that, when optimizing for the nsmul and gsmul refactors, I have seen a bunch of proofs where the <code>1</code> in a comm_ring was written as composing all the direct inheritance path through ring, semiring, monoid_with_zero, monoid, has_one. I guess just removing <code>monoid_with_zero</code> from this path would give some gain. I'll try to do some experiments in this direction.</p>",
        "id": 235670371,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619095753
    },
    {
        "content": "<blockquote>\n<p>Still, how come main Lean has no problem checking this in milliseconds, while it takes seconds to leanchecker? Are they using different heuristics to check rfl?</p>\n</blockquote>\n<p>I think so. The elaborator and kernel use separate reducibility hints: <code>@[irreducible]</code> and <code>@[reducible]</code> act on the elaborator, while the kernel uses definition height and <code>opaque</code> and <code>abbrev</code></p>",
        "id": 235670707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619095911
    },
    {
        "content": "<p>There isn't much front end support for changing the kernel reducibility settings to something other than the default, so it may well be the case that lean knows a bunch of heuristics that we've taught it and the kernel is floundering without those hints</p>",
        "id": 235670929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619095987
    },
    {
        "content": "<p>export with <code>-j1</code> is running for &gt; 35 minutes now... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 235672267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619096494
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>diff mathlib.txt mathlib.txt.bu <span class=\"p\">|</span> wc -l\n<span class=\"m\">1638141</span>\n</code></pre></div>",
        "id": 235673731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097041
    },
    {
        "content": "<p>how many lines are they?</p>",
        "id": 235673916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097116
    },
    {
        "content": "<p>I imagine the diff is going to be \"almost everything\" because of the intermingling</p>",
        "id": 235674022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097147
    },
    {
        "content": "<p>They are about ~ 20.000.000 lines</p>",
        "id": 235674098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097181
    },
    {
        "content": "<p>both?</p>",
        "id": 235674123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097189
    },
    {
        "content": "<p>1sec</p>",
        "id": 235674147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097200
    },
    {
        "content": "<p>I would guess that they end up at exactly the same number of lines, unless lean nondeterminism is worse than I thought</p>",
        "id": 235674200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097226
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"wc\"><pre><span></span><code>  20268388 ../mathlib_post_7084/mathlib.txt     -- -j1\n  20268430 ../mathlib_post_7084/mathlib.txt.bu  -- regular\n</code></pre></div>",
        "id": 235674279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097243
    },
    {
        "content": "<p>heh</p>",
        "id": 235674302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097253
    },
    {
        "content": "<p>Actually this unsequenced output would cause problems with determinism if we ever wanted to cache those files</p>",
        "id": 235674424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097310
    },
    {
        "content": "<p>because I would bet that even running \"regular\" twice in a row will result in completely different files</p>",
        "id": 235674516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097345
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">391000</span>     <span class=\"mi\">3605</span> <span class=\"n\">rat.num_denom_cases_on._main</span>\n</code></pre></div>\n<p>Is this surprising?</p>",
        "id": 235674528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097350
    },
    {
        "content": "<p>That's an autogenerated theorem?</p>",
        "id": 235674606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097374
    },
    {
        "content": "<p>I should probably check that <code>-j1</code> is deterministic. But first I'm running <code>leanchecker</code></p>",
        "id": 235674621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097378
    },
    {
        "content": "<p>well I guess it contains some user stuff, let me check</p>",
        "id": 235674652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097393
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator]</span> <span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">num_denom_cases_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">int.nat_abs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">)),</span> <span class=\"n\">C</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">num_denom'</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 235674716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097418
    },
    {
        "content": "<p>why is it always the 1 line definitions</p>",
        "id": 235674746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097432
    },
    {
        "content": "<p>no this one should be fast</p>",
        "id": 235674873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097484
    },
    {
        "content": "<p>there are no hard unification problems here</p>",
        "id": 235674921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097501
    },
    {
        "content": "<p>So maybe there is still something that creates noise?</p>",
        "id": 235674976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097522
    },
    {
        "content": "<p>what's around it in the list</p>",
        "id": 235675029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235670707\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Still, how come main Lean has no problem checking this in milliseconds, while it takes seconds to leanchecker? Are they using different heuristics to check rfl?</p>\n</blockquote>\n<p>I think so. The elaborator and kernel use separate reducibility hints: <code>@[irreducible]</code> and <code>@[reducible]</code> act on the elaborator, while the kernel uses definition height and <code>opaque</code> and <code>abbrev</code></p>\n</blockquote>\n<p>I thought that the kernel was always checking the proof of a lemma once it was done, even in interactive mode, so this would mean the elaborator is feeding to the kernel a proof that is easy enough to check. Do you mean that, in main Lean, it checks some decorated proof with additional hints that are not stored in the olean and therefore not available to leanchecker? Or just that leanchecker does not use these hints? (Or am I wrong to believe that the kernel checks every proof even in interactive mode?)</p>",
        "id": 235675275,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619097620
    },
    {
        "content": "<blockquote>\n<p>I thought that the kernel was always checking the proof of a lemma once it was done, even in interactive mode, so this would mean the elaborator is feeding to the kernel a proof that is easy enough to check.</p>\n</blockquote>\n<p>Yes, it is done, but proofs are not provided for defeq tasks, so a proof using a heavy refl is hard for the elaborator and hard for the kernel, and even after it is diced and pickled and given to the external checker it's still hard</p>",
        "id": 235675606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235675029\">said</a>:</p>\n<blockquote>\n<p>what's around it in the list</p>\n</blockquote>\n<p>I can only see this when it's done. The current script saves everything to a file, but prints all intermediate rows that contain <code>000</code>.</p>",
        "id": 235675754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619097789
    },
    {
        "content": "<blockquote>\n<p>Do you mean that, in main Lean, it checks some decorated proof with additional hints that are not stored in the olean and therefore not available to leanchecker? Or just that leanchecker does not use these hints? </p>\n</blockquote>\n<p>Reducibility hints (like <code>@[irreducible]</code>) are definitely in the olean (pretty much everything has to be in the olean because this is the only way data from one lean file gets to another), but they may not be in the export file</p>",
        "id": 235675833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097821
    },
    {
        "content": "<p>Looking at <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/export_format.md\">https://github.com/leanprover-community/lean/blob/master/doc/export_format.md</a> I don't see anything that suggests that it is possible to apply any attributes to anything</p>",
        "id": 235676061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097896
    },
    {
        "content": "<p>this export format is super bare-bones, it needs some love</p>",
        "id": 235676342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619097977
    },
    {
        "content": "<p>Here is something I don't understand. Random part of the intermediate output:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">0</span>.000018    <span class=\"m\">34000</span> set.Iic.lattice._proof_6\n<span class=\"m\">0</span>.000014    <span class=\"m\">35000</span> associates.bounded_lattice._proof_5\n<span class=\"m\">0</span>.000018    <span class=\"m\">36000</span> computability.encoding\n<span class=\"m\">0</span>.000016    <span class=\"m\">37000</span> padic_norm_e.add_eq_max_of_ne<span class=\"err\">'</span>\n<span class=\"m\">0</span>.000015    <span class=\"m\">38000</span> CommGroup.comm_group.to_group.category_theory.bundled_hom.parent_projection\n<span class=\"m\">0</span>.000014    <span class=\"m\">39000</span> equiv.d_array_equiv_fin._match_1\n<span class=\"m\">0</span>.000018    <span class=\"m\">40000</span> tactic.abel.normalize_mode\n<span class=\"m\">0</span>.000015    <span class=\"m\">41000</span> fintype.fintype_prod_right\n</code></pre></div>",
        "id": 235676669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619098097
    },
    {
        "content": "<p>This suggests that it should zip through 1000 decls in about <code>0.015</code> seconds. But in practice it takes much longer.</p>",
        "id": 235676762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619098130
    },
    {
        "content": "<p>that still looks pretty random</p>",
        "id": 235676766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> There's 999 unprinted decls between every 2 rows.</p>",
        "id": 235676863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619098168
    },
    {
        "content": "<p>There is some deviation in the samples, right? You go through fast definitions a lot faster than slow definitions, so if you pick a random definition it's probably fast</p>",
        "id": 235676948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098202
    },
    {
        "content": "<p>I see. So my sample size is just way too small.</p>",
        "id": 235677083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619098237
    },
    {
        "content": "<p>well it's more like there is a consistent bias with this sampling method, since you aren't sampling by time</p>",
        "id": 235677180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098270
    },
    {
        "content": "<p>I'm picking the 145 rows whose row number ends in \"000\". The chance that one of those is slow is apparently quite low.</p>",
        "id": 235677464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619098354
    },
    {
        "content": "<p>if you were to print the definition that lean is working on once a second, you would get much more slow definitions</p>",
        "id": 235677666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619098432
    },
    {
        "content": "<p>Aha, so I should pipe <code>tee</code> to <code>watch</code> instead of to <code>grep \"000 \"</code></p>",
        "id": 235677873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619098499
    },
    {
        "content": "<p>Bingo, a slow proof with index 0 mod 1000:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">419336</span>    <span class=\"mi\">80000</span> <span class=\"n\">preorder_hom.complete_lattice._proof_8</span>\n</code></pre></div>",
        "id": 235679550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619099113
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder_hom.complete_lattice/src\">src#preorder_hom.complete_lattice</a></p>",
        "id": 235680848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099547
    },
    {
        "content": "<p>Now which one is <code>_proof_8</code>?</p>",
        "id": 235680991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619099604
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">preorder_hom.complete_lattice._proof_8</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₘ</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">lattice.inf_le_left</span>\n</code></pre></div>",
        "id": 235681029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099619
    },
    {
        "content": "<p>I guess this is coming from <code>.. (_ : lattice (α →ₘ β))</code></p>",
        "id": 235681137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099653
    },
    {
        "content": "<p>Ouch, I just noticed in <code>htop</code> that <code>leanchecker</code> is still hopping between different threads. Even though there is only one thread active at a given time. Not sure if that is an issue.</p>",
        "id": 235681184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619099672
    },
    {
        "content": "<p>you mean different cores? I think the OS will normally do that</p>",
        "id": 235681340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619099725
    },
    {
        "content": "<p><code>leanchecker</code> finished on <code>post_7084</code> in about 50 minutes. <a href=\"https://gist.github.com/c54d4dda4b22db228c3e91ce5d9ae804\">https://gist.github.com/c54d4dda4b22db228c3e91ce5d9ae804</a></p>",
        "id": 235683106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619100206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt; summary<span class=\"o\">(</span>x<span class=\"o\">[</span>,1<span class=\"o\">])</span><span class=\"p\">;</span>\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.\n  <span class=\"m\">0</span>.00001   <span class=\"m\">0</span>.00002   <span class=\"m\">0</span>.00002   <span class=\"m\">0</span>.02079   <span class=\"m\">0</span>.00002 <span class=\"m\">121</span>.66725\n&gt; sd<span class=\"o\">(</span>x<span class=\"o\">[</span>,1<span class=\"o\">])</span><span class=\"p\">;</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> <span class=\"m\">0</span>.5177284\n</code></pre></div>",
        "id": 235683358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619100282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">20611</span>   <span class=\"m\">34</span>.59937                             bounded_continuous_function.metric_space._proof_8\n<span class=\"m\">32460</span>   <span class=\"m\">14</span>.75494                                    SemiRing.has_forget_to_AddCommMon._proof_1\n<span class=\"m\">32550</span>   <span class=\"m\">15</span>.53428           Ring.category_theory.forget₂.category_theory.creates_limit._proof_3\n<span class=\"m\">45565</span>   <span class=\"m\">57</span>.96984                                    Module.forget₂_AddCommGroup_is_equivalence\n<span class=\"m\">45868</span>   <span class=\"m\">10</span>.62882 category_theory.monoidal.Mon_functor_category_equivalence.inverse_map_hom_app\n<span class=\"m\">46825</span>   <span class=\"m\">21</span>.59894                                      additive.add_left_cancel_monoid._proof_4\n<span class=\"m\">47124</span>   <span class=\"m\">13</span>.88599                                               times_cont_diff_bump.support_eq\n<span class=\"m\">47211</span>   <span class=\"m\">14</span>.46456                             local_homeomorph.mdifferentiable.mfderiv._proof_3\n<span class=\"m\">48034</span>   <span class=\"m\">11</span>.88654                                                          polynomial.roots_one\n<span class=\"m\">48975</span>   <span class=\"m\">20</span>.88203      CommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7\n<span class=\"m\">49289</span>   <span class=\"m\">10</span>.00095                                            rbtree.fold._main.equations._eqn_1\n<span class=\"m\">50327</span>   <span class=\"m\">11</span>.78787                                                     polynomial.smul_eval_smul\n<span class=\"m\">50424</span>   <span class=\"m\">14</span>.23475                                    intermediate_field.to_subalgebra_injective\n<span class=\"m\">54832</span>   <span class=\"m\">18</span>.30227                                                             hash_map.cases_on\n<span class=\"m\">56143</span>   <span class=\"m\">18</span>.56595                                                     subring.to_submonoid_mono\n<span class=\"m\">56455</span>   <span class=\"m\">17</span>.70191                                                        quotient_group.coe_inv\n<span class=\"m\">59635</span>   <span class=\"m\">23</span>.99585                                                           AddGroup.limit_cone\n<span class=\"m\">63901</span>   <span class=\"m\">11</span>.02492                                                       order.ideal.top_carrier\n<span class=\"m\">64361</span>   <span class=\"m\">22</span>.64404                          <span class=\"k\">function</span>.injective.linear_ordered_comm_ring._proof_5\n<span class=\"m\">67257</span>   <span class=\"m\">16</span>.05250                          inner_product_space.of_core.to_normed_space._proof_1\n<span class=\"m\">72118</span>   <span class=\"m\">20</span>.85422                                        category_theory.limits.is_colimit.of_π\n<span class=\"m\">75663</span>  <span class=\"m\">121</span>.66725                                                           sdiff_inf_self_left\n<span class=\"m\">98402</span>   <span class=\"m\">20</span>.69904                                                        power_series.coeff_map\n<span class=\"m\">104327</span>  <span class=\"m\">14</span>.18050                                       order_dual.semilattice_inf_bot._proof_4\n<span class=\"m\">105831</span>  <span class=\"m\">48</span>.03556                                       hyperreal.infinite_pos_mul_infinite_neg\n<span class=\"m\">107723</span>  <span class=\"m\">12</span>.05554                                                pi_tensor_product.lift.unique<span class=\"s1\">'</span>\n<span class=\"s1\">110800  11.50262                      add_equiv.add_equiv_of_unique_of_unique.equations._eqn_1</span>\n<span class=\"s1\">113312  54.91094              formal_multilinear_series.comp_partial_sum_target_tendsto_at_top</span>\n<span class=\"s1\">120427  10.48020       has_finite_inter.finite_inter_closure_has_finite_inter.equations._eqn_1</span>\n<span class=\"s1\">140717  16.62972                                            ordnode.find_max'</span>.equations._eqn_1\n</code></pre></div>",
        "id": 235683405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619100303
    },
    {
        "content": "<p>What's the best thing to try next?</p>",
        "id": 235683494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619100340
    },
    {
        "content": "<p>Shall I run the <code>-j1</code> export again? To see if it is deterministic?</p>",
        "id": 235683531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619100356
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sdiff_inf_self_left</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">\\</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_comm</span><span class=\"o\">,</span> <span class=\"n\">sdiff_inf_self_right</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>what is it with one line functions, that's the fifth one line bad guy</p>",
        "id": 235685126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100846
    },
    {
        "content": "<p>What's the vicinity of <code>sdiff_inf_self_left</code>? That should tell us if it is respecting file divisions</p>",
        "id": 235685248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">75656</span> <span class=\"n\">is_associative.drec_on</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000017</span>    <span class=\"mi\">75657</span> <span class=\"n\">uniform_continuous₂.uniform_continuous</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000017</span>    <span class=\"mi\">75658</span> <span class=\"n\">Hausdorffification.of</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000016</span>    <span class=\"mi\">75659</span> <span class=\"n\">finset.subset.antisymm_iff</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000017</span>    <span class=\"mi\">75660</span> <span class=\"n\">finset.inter_subset_inter</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000017</span>    <span class=\"mi\">75661</span> <span class=\"n\">finset.sdiff_inter_self</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000016</span>    <span class=\"mi\">75662</span> <span class=\"n\">finset.superset.trans</span>\n<span class=\"mi\">121</span><span class=\"bp\">.</span><span class=\"mi\">667253</span>    <span class=\"mi\">75663</span> <span class=\"n\">sdiff_inf_self_left</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000101</span>    <span class=\"mi\">75664</span> <span class=\"n\">finset.sdiff_inter_self_left</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000024</span>    <span class=\"mi\">75665</span> <span class=\"n\">superset.equations._eqn_1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000015</span>    <span class=\"mi\">75666</span> <span class=\"n\">sdiff_le_sdiff</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">75667</span> <span class=\"n\">finset.sdiff_subset_sdiff</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">75668</span> <span class=\"n\">finset.sdiff_empty</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">75669</span> <span class=\"n\">finset.sdiff_eq_self</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">75670</span> <span class=\"n\">finset.sdiff_eq_self_iff_disjoint</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">75671</span> <span class=\"n\">compact_space_Icc.equations._eqn_1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span>    <span class=\"mi\">75672</span> <span class=\"n\">equiv.prod_congr_left._proof_1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000020</span>    <span class=\"mi\">75673</span> <span class=\"n\">equiv.prod_congr_left._proof_2</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000018</span>    <span class=\"mi\">75674</span> <span class=\"n\">equiv.prod_congr_left</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000016</span>    <span class=\"mi\">75675</span> <span class=\"n\">fintype.exists_univ_list</span>\n</code></pre></div>\n<p>Oh hey I remember this place</p>",
        "id": 235685388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100946
    },
    {
        "content": "<p>You can see <code>sdiff_eq_self_iff_disjoint</code>, the previous bad guy, is only 6 definitions later</p>",
        "id": 235685533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100986
    },
    {
        "content": "<p>so clearly the culprit is somewhere around here and these one liners are taking the blame</p>",
        "id": 235685612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619101023
    },
    {
        "content": "<p>but the files are still mixed up :(</p>",
        "id": 235685651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619101037
    },
    {
        "content": "<p>So in one run <code>finset.sdiff_eq_self_iff_disjoint</code> took 2 minutes, and in another run it was <code>sdiff_inf_self_left</code>?</p>",
        "id": 235686635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619101360
    },
    {
        "content": "<p>Now we need <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> to come along and say something like \"this is because there is an <code>@</code> character at position 66 on line 132 in an unrelated Lean file\" or something.</p>",
        "id": 235686799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619101417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235686635\">said</a>:</p>\n<blockquote>\n<p>So in one run <code>finset.sdiff_eq_self_iff_disjoint</code> took 2 minutes, and in another run it was <code>sdiff_inf_self_left</code>?</p>\n</blockquote>\n<p>That might have been because of multithreading in the previous runs.</p>",
        "id": 235687163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619101545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235685651\">said</a>:</p>\n<blockquote>\n<p>but the files are still mixed up :(</p>\n</blockquote>\n<p>I have no idea how to fix this.</p>",
        "id": 235687190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619101557
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>diff mathlib.txt mathlib.txt.1 <span class=\"p\">|</span> wc -l\n<span class=\"m\">0</span>\n</code></pre></div>",
        "id": 235690754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619102801
    },
    {
        "content": "<p>So it seems like with <code>-j1</code> the results are deterministic.</p>",
        "id": 235690781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619102815
    },
    {
        "content": "<p>Now I'm regenerating the <code>pre_7084</code> using <code>-j1</code>.</p>",
        "id": 235690895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619102855
    },
    {
        "content": "<p>So there is a difference between running the export without <code>-j</code> or with <code>-j</code>. But the parameter to <code>-j</code> doesn't matter. <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <br>\nBecause I ran the export script on <code>pre_7084</code> with <code>-j14</code> before. And now I ran it with <code>-j1</code>. But the diff is 0 on the two outputs.</p>",
        "id": 235693242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619103655
    },
    {
        "content": "<p>In particular, here are the stats for <code>pre_7084</code>:<br>\n<a href=\"https://gist.github.com/779d29ce1724ce82ed8588caf5a0490d\">https://gist.github.com/779d29ce1724ce82ed8588caf5a0490d</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt; summary<span class=\"o\">(</span>x<span class=\"o\">[</span>,1<span class=\"o\">])</span><span class=\"p\">;</span>\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.\n  <span class=\"m\">0</span>.00001   <span class=\"m\">0</span>.00002   <span class=\"m\">0</span>.00002   <span class=\"m\">0</span>.01072   <span class=\"m\">0</span>.00002 <span class=\"m\">121</span>.33800\n&gt; sd<span class=\"o\">(</span>x<span class=\"o\">[</span>,1<span class=\"o\">])</span><span class=\"p\">;</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> <span class=\"m\">0</span>.4194959\n&gt;\n&gt; y &lt;- subset<span class=\"o\">(</span>x, t &gt; <span class=\"m\">10</span>.0<span class=\"o\">)</span><span class=\"p\">;</span>\n&gt; print<span class=\"o\">(</span>nrow<span class=\"o\">(</span>y<span class=\"o\">))</span><span class=\"p\">;</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> <span class=\"m\">7</span>\n&gt; print<span class=\"o\">(</span>y<span class=\"o\">[</span>,c<span class=\"o\">(</span><span class=\"s2\">\"t\"</span>, <span class=\"s2\">\"d\"</span><span class=\"o\">)])</span><span class=\"p\">;</span>\n               t                                                   d\n<span class=\"m\">19933</span>   <span class=\"m\">33</span>.04352   bounded_continuous_function.metric_space._proof_4\n<span class=\"m\">44039</span>   <span class=\"m\">57</span>.23696 measure_theory.simple_func.semilattice_inf._proof_5\n<span class=\"m\">65492</span>   <span class=\"m\">13</span>.15512                              nat.of_digits_one_cons\n<span class=\"m\">73812</span>  <span class=\"m\">121</span>.33800                    equiv.perm.sign_prod_congr_right\n<span class=\"m\">103809</span>  <span class=\"m\">14</span>.16039                            int.lor.equations._eqn_4\n<span class=\"m\">111199</span>  <span class=\"m\">53</span>.86009                              is_local_extr_on.inter\n<span class=\"m\">138539</span>  <span class=\"m\">15</span>.00112          times_cont_diff_within_at.equations._eqn_1\n</code></pre></div>",
        "id": 235693637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619103722
    },
    {
        "content": "<p>And as a reminder, the summary stats for <code>post_7084</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt; summary<span class=\"o\">(</span>x<span class=\"o\">[</span>,1<span class=\"o\">])</span><span class=\"p\">;</span>\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.\n  <span class=\"m\">0</span>.00001   <span class=\"m\">0</span>.00002   <span class=\"m\">0</span>.00002   <span class=\"m\">0</span>.02079   <span class=\"m\">0</span>.00002 <span class=\"m\">121</span>.66725\n&gt; sd<span class=\"o\">(</span>x<span class=\"o\">[</span>,1<span class=\"o\">])</span><span class=\"p\">;</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> <span class=\"m\">0</span>.5177284\n</code></pre></div>",
        "id": 235693926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619103769
    },
    {
        "content": "<p>What's weird: the <code>121s</code> is on a totally different decl.</p>",
        "id": 235694080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619103800
    },
    {
        "content": "<p>The mean time almost doubled, but the box-plot doesn't change.</p>",
        "id": 235694199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619103833
    },
    {
        "content": "<p>So the fast 75% remains the same. But the slow 25% just got way slower, basically.</p>",
        "id": 235694460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619103896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235694080\">said</a>:</p>\n<blockquote>\n<p>What's weird: the <code>121s</code> is on a totally different decl.</p>\n</blockquote>\n<p>I'm not sure what to do with this. It seems that I'm not generating reliable data.</p>",
        "id": 235695059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619104035
    },
    {
        "content": "<p>Standard deviation bumped from <code>0.41</code> to <code>0.51</code>.</p>",
        "id": 235695601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619104160
    },
    {
        "content": "<p>Can you plot some histograms?</p>",
        "id": 235695679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619104195
    },
    {
        "content": "<p>I'm really bad a working with such datasets. No idea how to do that.</p>",
        "id": 235695837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619104240
    },
    {
        "content": "<p>Here's the data<br>\npre: <a href=\"https://gist.github.com/779d29ce1724ce82ed8588caf5a0490d\">https://gist.github.com/779d29ce1724ce82ed8588caf5a0490d</a><br>\npost: <a href=\"https://gist.github.com/c54d4dda4b22db228c3e91ce5d9ae804\">https://gist.github.com/c54d4dda4b22db228c3e91ce5d9ae804</a></p>",
        "id": 235695922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619104288
    },
    {
        "content": "<p>It's not only the 120s getting allocated to different lemmas. The 30s ones change as well. For example, in the \"pre\" gist, bounded_continuous_function.metric_space._proof_4 is 33s and the other _proof_i are fast; in the \"post\" gist, bounded_continuous_function.metric_space._proof_8 is 34s and the other are fast.</p>",
        "id": 235697369,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1619104796
    },
    {
        "content": "<p>No idea how to fix that.</p>",
        "id": 235698671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619105345
    },
    {
        "content": "<p>and I looked at a few declarations with 0.1xxx seconds in one gist: the 15 or so examples I looked at are fast in the other file, and I don't see a slower declaration around the same line. This works both ways (slow in pre is fast in post, and reversely).</p>",
        "id": 235698675,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1619105346
    },
    {
        "content": "<p>Since I'm seeing a lot of <code>sdiff</code> above, it makes me wonder if I screwed something up badly in <a href=\"https://github.com/leanprover-community/mathlib/issues/6775\">#6775</a>, which added an intermediate \"generalized Boolean algebra\" class.</p>",
        "id": 235700105,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619105883
    },
    {
        "content": "<p><a href=\"user_uploads/3121/pci--ANT3MfKYAo50A1VWNiC/histograms.png\">histograms.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/pci--ANT3MfKYAo50A1VWNiC/histograms.png\" title=\"histograms.png\"><img src=\"user_uploads/3121/pci--ANT3MfKYAo50A1VWNiC/histograms.png\"></a></div>",
        "id": 235700971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619106267
    },
    {
        "content": "<p>Here's a histogram of pre (yellow) and post (blue). The vast majority are in the first plot, which has all the 0.0001 second definitions. Those are cut out in the second plot, where the bulk are around 0.5-4 seconds, and the shift in the mean is visible. Excluding those and switching to a log scale is the third plot, and there are a lot more blue ones falling in this class as well</p>",
        "id": 235701548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619106511
    },
    {
        "content": "<p>Dammit, you beat me to it</p>",
        "id": 235702166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619106767
    },
    {
        "content": "<p>This doesn't cover the order in the file though. Maybe it's possible to find a pattern by looking at how the peaks shift around</p>",
        "id": 235702661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619106968
    },
    {
        "content": "<p>but really, lean needs to be fixed so that it isn't producing such a crappy data set</p>",
        "id": 235702734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619107011
    },
    {
        "content": "<p>A similar graph with everything on a log plot<br>\n<a href=\"/user_uploads/3121/ypGgFppV6fDzfx2ApwYLzEfS/histograms.png\">histograms.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ypGgFppV6fDzfx2ApwYLzEfS/histograms.png\" title=\"histograms.png\"><img src=\"/user_uploads/3121/ypGgFppV6fDzfx2ApwYLzEfS/histograms.png\"></a></div>",
        "id": 235703028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619107147
    },
    {
        "content": "<p>Funny how there is a clearly separated mode for slow declarations. It looks like the plot one would expect if there was only one main cause for slowness, and the declaration is slow iff it involves that cause.</p>",
        "id": 235703787,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1619107440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235702734\">said</a>:</p>\n<blockquote>\n<p>but really, lean needs to be fixed so that it isn't producing such a crappy data set</p>\n</blockquote>\n<p>hmmz... do we have any idea where to start looking for such a fix? To me that sounds like needle in a 230k line C++ haystack.</p>",
        "id": 235704419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619107685
    },
    {
        "content": "<p>Here's one showing how the sequential time breaks down:<br>\n<a href=\"/user_uploads/3121/acCnRZsE0weyelEeZxAuhkcb/duration.png\">duration.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/acCnRZsE0weyelEeZxAuhkcb/duration.png\" title=\"duration.png\"><img src=\"/user_uploads/3121/acCnRZsE0weyelEeZxAuhkcb/duration.png\"></a></div><p>No obvious pattern suggesting the system is running some task messing with our timing</p>",
        "id": 235704429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619107689
    },
    {
        "content": "<p>Just for completeness: export files were generated using <code>lean -j1 --recursive --export=mathlib.txt src/</code><br>\nThese were then fed to <code>leanchecker</code> using</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>leanchecker +leanprover-community/lean:3.29.0 -v mathlib.txt <span class=\"m\">2</span>&gt;<span class=\"p\">&amp;</span><span class=\"m\">1</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> nl -w8 -s<span class=\"s1\">' '</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> ts -i -m %.s <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> tee mathlib.time <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> grep <span class=\"s2\">\"000 \"</span>\n</code></pre></div>",
        "id": 235704733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619107806
    },
    {
        "content": "<p>It's possible to export just up to a given file, right?</p>",
        "id": 235706060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619108341
    },
    {
        "content": "<p>Perhaps we should try exporting a file that contains a 60s / 120s lemma, and see if it persists</p>",
        "id": 235706102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619108361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235703787\">said</a>:</p>\n<blockquote>\n<p>Funny how there is a clearly separated mode for slow declarations. It looks like the plot one would expect if there was only one main cause for slowness, and the declaration is slow iff it involves that cause.</p>\n</blockquote>\n<p>My bet is that this cause is unpacking an algebraic structure</p>",
        "id": 235706238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619108429
    },
    {
        "content": "<p>well every export file will contain init.core and a whole bunch of prelude files no matter what</p>",
        "id": 235706447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619108518
    },
    {
        "content": "<p>unless you find a way to make an interesting lemma from scratch using <code>prelude</code></p>",
        "id": 235706546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619108545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> do you have any clue what's going with <code>leanchecker</code> here?</p>",
        "id": 235728520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619117128
    },
    {
        "content": "<p>Is it useful/doable to do this?</p>\n<p>Take all instances, the dependency graph between them, assign each of them a number so that an instance of number n only depends on instances on number &lt; n (the maximal definition depth should do it, unless we also want this number to be unique to serve as an identifier), compute the transitive closure of this graph, save it in a file. Then, every time Lean need to come up with an instance <code>I</code> given that it has instances <code>I_1, ..., I_n</code> at its disposal, it fetches the number of each of <code>I, I_1, ..., I_n</code>(say <code>d, d_1, ..., d_n</code>and for each <code>I_i</code> checks whether one of the instances whose number  is <code>n</code> is actually the one we want. If we decide upon unique identifiers (in which case we could simply take it to be the order in which the compiler processes the instances), then the check is even simpler, you just have to look up one value.</p>\n<p>Thus, Lean avoids getting in a rabbit hole by following the route of a too weak instance. But maybe Lean sometimes automatically generates high instances from lower ones? In that case, my idea doesn't quite work, unless we also ask first for Lean to come up with all instances it can, and slide down the dependencies from them.</p>",
        "id": 235735508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619120132
    },
    {
        "content": "<p>What I know is that the algorithm for typeclass search is <em>completely</em> overhauled in Lean 4, and it's now performing much better and solves a lot of issues that were present in Lean 3.</p>",
        "id": 235740573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619122306
    },
    {
        "content": "<p>I don't think it makes much sense to do a complete overhaul of the Lean 3 algorithm. It's better to see if we can just speed up <code>leanchecker</code> somehow, and focus the rest of our energy on mathport.</p>",
        "id": 235740680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619122368
    },
    {
        "content": "<p>My preference would be to disable leanchecker for now because of its shortcomings, but I understand Mario is strongly against this. This means we shouldn't merge <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a>, though, because it again adds 30 minutes to the leanchecker time, and then most bors builds wouldn't finish.</p>",
        "id": 235741296,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619122701
    },
    {
        "content": "<p>It'd be OK if the mathlib build times were &lt;4h as they were before, but it seems that they also increased by about half an hour recently.</p>",
        "id": 235741436,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619122798
    },
    {
        "content": "<p>When PRs only touch leaves of the hierarchy, everything is fine, but we have a lot of PRs touching basic files (at least one in each batch, say), so most of the time things are rebuilt from scratch.</p>",
        "id": 235741655,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619122897
    },
    {
        "content": "<p>Can we switch to one of the lean-checker alternatives?</p>",
        "id": 235742983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619123507
    },
    {
        "content": "<p>Are they faster?</p>",
        "id": 235742997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619123513
    },
    {
        "content": "<p>Does Leanchecker consume the olean files? Could we feed it these as they are generated and so parallelise it with the build?</p>",
        "id": 235747837,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619125472
    },
    {
        "content": "<p>No, <code>leanchecker</code> works off a text file which is generated by <code>lean --export</code>.</p>",
        "id": 235749163,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619125861
    },
    {
        "content": "<p><code>Hausdorffification.of</code> certainly sounds suspicious to me. :-) Anything if <code>ification</code> in the name is surely doing some <code>rfl</code>.</p>",
        "id": 235758778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619130852
    },
    {
        "content": "<p>I think there are several things that we should think about:</p>\n<ol>\n<li>Can we make lean + leanchecker generate accurate timing data? There is good reason to believe that the timing data that I generated yesterday is crappy.</li>\n<li>Are there ways in which we can speed up lean and/or leanchecker without changing mathlib's .lean files?</li>\n<li>Are there ways in which we can speed up by rewriting some proofs in mathlib?</li>\n<li>Are there faster alternatives to leanchecker?</li>\n<li>How bad would it be to disable leanchecker until we have fixed (1)-(3)?</li>\n</ol>",
        "id": 235792710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619159011
    },
    {
        "content": "<p>Re: 4) I've been trying to run <a href=\"https://github.com/gebner/trepplein\"><code>trepplein</code></a>, running <code>./target/universal/stage/bin/trepplein -s ../mathlib/mathlib.txt </code>, so far to no avail. It starts up, rapidly consumes 8gb of ram, and then sits there silently producing no output.  (My amateur diagnosis is that mathlib is too big for it... :-)</p>\n<p>Unfortunately <code>trepplein</code> doesn't seem to have a mode in which is just prints the names of the declarations as it processes them: you can either print the whole type signature (way too verbose!) or nothing.</p>",
        "id": 235796767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619161591
    },
    {
        "content": "<p>I'm running <code>[tc](https://github.com/dselsam/tc)</code> now.</p>",
        "id": 235798355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619162369
    },
    {
        "content": "<p>What about disabling <code>leanchecker</code> on the PRs, but running it once a day and letting it create an issue if it sees a problem? Like the action we have every day on LFTCM2020 trying to merge mathlib master.</p>",
        "id": 235798590,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619162511
    },
    {
        "content": "<p>I think that is similar to my <code>premaster</code> proposal. And I think it could be a good intermediate solution.</p>",
        "id": 235798922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619162759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235741655\">said</a>:</p>\n<blockquote>\n<p>When PRs only touch leaves of the hierarchy, everything is fine, but we have a lot of PRs touching basic files (at least one in each batch, say), so most of the time things are rebuilt from scratch.</p>\n</blockquote>\n<p>Can we thus act smart and make Bors pack together the PRs that touch basic files?</p>",
        "id": 235801947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619164649
    },
    {
        "content": "<p>That doesn't seem very easy. We would have to manually assign priorities based on how \"basic\" we think PRs are. And if you <code>bors merge</code> a PR with high priority, it will cancel the running batch if it has lower priority.</p>",
        "id": 235802182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619164789
    },
    {
        "content": "<p>Priorities are the only way to influence how bors puts things in different batches, as far as I can see.</p>",
        "id": 235802282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619164820
    },
    {
        "content": "<p>Actually, <code>trepplein</code> is awesome:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"bp\">./</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">universal</span><span class=\"bp\">/</span><span class=\"n\">stage</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">trepplein</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"bp\">../</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib.txt</span>\n<span class=\"c1\">-- successfully checked 145490 declarations</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">13</span><span class=\"n\">m0.611s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">14</span><span class=\"n\">m10.181s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">0</span><span class=\"n\">m10.675s</span>\n</code></pre></div>",
        "id": 235805498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619166614
    },
    {
        "content": "<p>On the other hand <code>tc</code> seems to be really struggling with the material in <code>ring_quot</code>...</p>",
        "id": 235805648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619166712
    },
    {
        "content": "<p>Is there some hidden option to make it output some timing data?</p>",
        "id": 235805653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619166714
    },
    {
        "content": "<p>I don't think so. It's written in scala, which I used to speak, so I guess I can try to insert this. Gabriel will be more efficient. :-)</p>",
        "id": 235805769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619166762
    },
    {
        "content": "<p>If we do switch to <code>trepplein</code> would it be worth digging up an old issue that <code>leanchecker</code> caught and demonstrating that <code>trepplein</code> would also flag it?</p>",
        "id": 235806212,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619166967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235802282\">said</a>:</p>\n<blockquote>\n<p>Priorities are the only way to influence how bors puts things in different batches, as far as I can see.</p>\n</blockquote>\n<p>Hmm... That sounds like we could open a feature request.</p>",
        "id": 235809829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619168963
    },
    {
        "content": "<p>If you give the feature request a high priority it might end up in a batch that they start working on early <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 235811035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619169558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235805648\">said</a>:</p>\n<blockquote>\n<p>On the other hand <code>tc</code> seems to be really struggling with the material in <code>ring_quot</code>...</p>\n</blockquote>\n<p>Is this before or after <a href=\"https://github.com/leanprover-community/mathlib/issues/7120\">#7120</a> has been merged?</p>",
        "id": 235817005,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619172923
    },
    {
        "content": "<p>Interesting, <code>tc</code> eventually got past that, but now fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">DEF</span><span class=\"o\">(</span><span class=\"mi\">27959</span><span class=\"o\">):</span> <span class=\"bp\">.</span><span class=\"n\">category_theory.sieve.generate</span>\n<span class=\"n\">IND</span><span class=\"o\">(</span><span class=\"mi\">654</span><span class=\"o\">):</span> <span class=\"bp\">.</span><span class=\"n\">category_theory.presieve.singleton</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">u</span><span class=\"o\">]</span>\n<span class=\"n\">IDeclError</span> <span class=\"o\">(</span><span class=\"n\">TypeCheckError</span> <span class=\"o\">(</span><span class=\"n\">TypeExpected</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Local</span> <span class=\"bp\">&lt;.#</span><span class=\"n\">_system.5</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">App</span><span class=\"o\">:</span> <span class=\"bp\">'.</span><span class=\"n\">set'</span> <span class=\"bp\">@</span> <span class=\"o\">[(</span><span class=\"n\">App</span><span class=\"o\">:</span> <span class=\"bp\">'.</span><span class=\"n\">quiver.hom'</span> <span class=\"bp\">@</span> <span class=\"o\">[(</span><span class=\"n\">Local</span> <span class=\"bp\">&lt;.#</span><span class=\"n\">_system.5</span><span class=\"bp\">&gt;</span><span class=\"o\">),(</span><span class=\"n\">App</span><span class=\"o\">:</span> <span class=\"bp\">'.</span><span class=\"n\">category_theory.category_struct.to_quiver'</span> <span class=\"bp\">@</span> <span class=\"o\">[(</span><span class=\"n\">Local</span> <span class=\"bp\">&lt;.#</span><span class=\"n\">_system.5</span><span class=\"bp\">&gt;</span><span class=\"o\">),(</span><span class=\"n\">App</span><span class=\"o\">:</span> <span class=\"bp\">'.</span><span class=\"n\">category_theory.category.to_category_struct'</span> <span class=\"bp\">@</span> <span class=\"o\">[(</span><span class=\"n\">Local</span> <span class=\"bp\">&lt;.#</span><span class=\"n\">_system.5</span><span class=\"bp\">&gt;</span><span class=\"o\">),(</span><span class=\"n\">Local</span> <span class=\"bp\">&lt;.#</span><span class=\"n\">_system.6</span><span class=\"bp\">&gt;</span><span class=\"o\">)])]),</span><span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">,(</span><span class=\"n\">Local</span> <span class=\"bp\">&lt;.#</span><span class=\"n\">_system.7</span><span class=\"bp\">&gt;</span><span class=\"o\">)])])))</span> <span class=\"s2\">\"ensureSort\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235819435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619174341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235806212\">said</a>:</p>\n<blockquote>\n<p>If we do switch to <code>trepplein</code> would it be worth digging up an old issue that <code>leanchecker</code> caught and demonstrating that <code>trepplein</code> would also flag it?</p>\n</blockquote>\n<p>Does anyone know where we can quickly find such issues?</p>",
        "id": 235837772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619183640
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues?q=is%3Aissue+leanchecker\">https://github.com/leanprover-community/mathlib/issues?q=is%3Aissue+leanchecker</a> is empty</p>",
        "id": 235837877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619183674
    },
    {
        "content": "<p>Was it <a href=\"#narrow/stream/113488-general/topic/leanchecker.20timeout\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/leanchecker.20timeout</a></p>",
        "id": 235840663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619184809
    },
    {
        "content": "<p>or <a href=\"#narrow/stream/144837-PR-reviews/topic/.236375/near/228434456\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.236375/near/228434456</a></p>",
        "id": 235840842,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619184865
    },
    {
        "content": "<p>or <a href=\"#narrow/stream/144837-PR-reviews/topic/.236572.20crashes.20leanchecker\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.236572.20crashes.20leanchecker</a></p>",
        "id": 235840855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619184872
    },
    {
        "content": "<p>From the topmost post in that last one:</p>\n<blockquote>\n<p>commit c8892e44 is the offending one.</p>\n</blockquote>",
        "id": 235840993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184927
    },
    {
        "content": "<p>That gives a pointer to a commit that we can try <code>trepplein</code> on. But we'll first need to see if that commit still exists somewhere.</p>",
        "id": 235841154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184981
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6572/commits/c8892e44fe95f8fe8b7892aa83b6ce0466fba8f5\">https://github.com/leanprover-community/mathlib/pull/6572/commits/c8892e44fe95f8fe8b7892aa83b6ce0466fba8f5</a><br>\ngithub still seems to have it</p>",
        "id": 235841301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185050
    },
    {
        "content": "<p>That last one wasn't actually a bug in leanchecker at all though, it was a bug in the exported output</p>",
        "id": 235841336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185065
    },
    {
        "content": "<p>ooh <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 235841352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185073
    },
    {
        "content": "<p>So should be caught by any checker</p>",
        "id": 235841355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185074
    },
    {
        "content": "<p>aah, so it's actually a good test case</p>",
        "id": 235841458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185101
    },
    {
        "content": "<p>In fact, the commit isn't enough to reproduce it - you need the corrupt olean files that were uploaded by that build</p>",
        "id": 235841468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185104
    },
    {
        "content": "<p>Right, so we need to use an old version of lean</p>",
        "id": 235841508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185118
    },
    {
        "content": "<p>Hopefully <code>elan</code> can find it for us.</p>",
        "id": 235841531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185128
    },
    {
        "content": "<p>If I'm not mistaken, I think the issue where Lean would accept bad oleans due to a hash collision should now be fixed since we now run <code>lean --make src/</code> twice in succession in CI.</p>",
        "id": 235843233,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619185796
    },
    {
        "content": "<p>Well, not fixed, but sufficiently worked around!</p>",
        "id": 235843541,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619185913
    },
    {
        "content": "<p>How so?</p>",
        "id": 235843940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619186080
    },
    {
        "content": "<p>I guess we could double check by amending that commit with an updated CI script</p>",
        "id": 235844123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619186152
    },
    {
        "content": "<p>It seems like <a href=\"https://github.com/leanprover-community/mathlib/runs/2427448873\">https://github.com/leanprover-community/mathlib/runs/2427448873</a> is taking over an hour to install elan - I don't claim to understand how the CI works but this seems wrong to me :| Is there something I can do about this?</p>",
        "id": 235985017,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1619283314
    },
    {
        "content": "<p>This is probably just a display bug, see <a href=\"#narrow/stream/113488-general/topic/CI.20hanging.20on.20trying.20to.20find.20oleans.20cache\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/CI.20hanging.20on.20trying.20to.20find.20oleans.20cache</a></p>",
        "id": 235985482,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1619283721
    },
    {
        "content": "<p>I think that build is actually working on the \"leanpkg build\" step and a callback to update the view we're seeing has just been lost somewhere in the ether.</p>",
        "id": 235985483,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619283722
    },
    {
        "content": "<p>Hi I'm Ben! I'm new so not sure this is helpful, but I modified leanchecker so that it outputs timing data. Code <a href=\"https://github.com/leanprover-community/lean/pull/567\">here</a>.<br>\nIt's the same command as it was previously was to run it: <code>leanchecker -v export.out &gt; leanchecker.txt 2&gt;&amp;1</code> <br>\nIn another terminal, you can run <code>watch -n 10 sort --general-numeric-sort --reverse leanchecker.txt</code> to get a live view of what's slow.<br>\nOutput (for mathlib at f15887a18). <a href=\"user_uploads/3121/Ptn7ZvJ7-8q9gKqfhvhUp9gr/leanchecker_sorted.txt\">leanchecker_sorted.txt</a> <a href=\"user_uploads/3121/aIHU9I6qC2gS8ELwbpgtBcUr/leanchecker.txt\">leanchecker.txt</a></p>\n<p>Top 20: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">96</span><span class=\"bp\">.</span><span class=\"mi\">884151</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">lie_module.derived_series_le_lower_central_series</span>\n<span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">613059</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">has_fpower_series_at.comp</span>\n<span class=\"mi\">38</span><span class=\"bp\">.</span><span class=\"mi\">592329</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">cauchy_seq_finset_of_geometric_bound</span>\n<span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">360009</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux.equations._eqn_1</span>\n<span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">736091</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux</span>\n<span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">605639</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">mv_power_series.X_pow_dvd_iff</span>\n<span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">258607</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">939601</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">to_euclidean.equations._eqn_1</span>\n<span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">142622</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">893232</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">smooth_bump_covering.exists_immersion_findim</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">811549</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommMon.category_theory.forget₂.category_theory.creates_limit._proof_6</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">442576</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommMon.category_theory.forget₂.category_theory.creates_limit._proof_6</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">258426</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">to_euclidean</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">064644</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_8</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">992482</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_9</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">919239</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_10</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">351864</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommRing.category_theory.forget₂.category_theory.creates_limit._proof_3</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">115897</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Top.presheaf.app_bijective_of_stalk_functor_map_bijective</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">065005</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.forget₂_AddCommMon_preserves_limits_aux.equations._eqn_1</span>\n<span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">467336</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.forget₂_AddCommMon_preserves_limits_aux</span>\n</code></pre></div>",
        "id": 235996204,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619290891
    },
    {
        "content": "<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> that’s my lemma at the top. I’ll take a look when I’m at my laptop later this evening. Thanks <span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span></p>",
        "id": 235996769,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619291277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> That's great! Would you mind running this on the following two commits:</p>\n<ul>\n<li><code>3ec54df501359e925d42f84aaf703e853fe6ba1c</code> (just before <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a>)</li>\n<li><code>63801552184f2a519c95a45561300547837915cc</code> (just after <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a>)</li>\n</ul>",
        "id": 235997446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619291810
    },
    {
        "content": "<p>Also, this seems like a very useful feature for <code>leanchecker</code>, so probably Gabriel wouldn't mind seeing this PRd to the community repo.</p>",
        "id": 235997481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619291846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Sure - it's running now. Pull request is <a href=\"https://github.com/leanprover-community/lean/pull/567\">here</a>.</p>",
        "id": 235997906,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619292192
    },
    {
        "content": "<p>I'm looking forward to seeing the histograms generated with the new data!</p>",
        "id": 235998424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619292616
    },
    {
        "content": "<p>Do you want to be to make separate histograms for definitions, inductive definitions and axioms?</p>",
        "id": 235998793,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619292892
    },
    {
        "content": "<p>Well, right now we want to understand why the total thing got so much slower by PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a></p>",
        "id": 235999107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619293132
    },
    {
        "content": "<p>So we want to get a feeling for which declarations got slower between those two commits.</p>",
        "id": 235999135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619293153
    },
    {
        "content": "<p>Being able to split by type of decl could in principle be useful, but for me it doesn't seem an urgent feature.</p>",
        "id": 235999144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619293181
    },
    {
        "content": "<ul>\n<li><code>3ec54df501359e925d42f84aaf703e853fe6ba1c</code> (just before <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a>)<br>\n<a href=\"/user_uploads/3121/beFEUieJ4WUu1pUd0zL5BS6X/leanchecker_3ec54df5_sorted.txt\">leanchecker_3ec54df5_sorted.txt</a> <a href=\"/user_uploads/3121/ocYZScTfZ9J8-t0Wu8M0RsR9/leanchecker_3ec54df5.txt\">leanchecker_3ec54df5.txt</a><br>\nTop 20:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">91</span><span class=\"bp\">.</span><span class=\"mi\">168317</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">lie_module.derived_series_le_lower_central_series</span>\n<span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">849018</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">has_fpower_series_at.comp</span>\n<span class=\"mi\">38</span><span class=\"bp\">.</span><span class=\"mi\">994233</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">cauchy_seq_finset_of_geometric_bound</span>\n<span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">968149</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">mv_power_series.X_pow_dvd_iff</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">603513</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_5</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">602266</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_4</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">484212</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_6</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">963744</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux.equations._eqn_1</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">878469</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">275507</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">category_theory.monoidal.Mon_functor_category_equivalence._proof_1</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">260439</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_1</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">623107</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">int.bitwise_and</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">496212</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">ring.fractional_ideal.eq_one_div_of_mul_eq_one</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">455020</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">right_inverse_eq</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">418527</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">327386</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">int.bitwise_xor</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">305817</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">926131</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">category_theory.monoidal.CommMon_functor_category_equivalence.counit_iso._proof_8</span>\n<span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">770720</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">smooth_bump_covering.exists_immersion_findim</span>\n<span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">710779</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">to_euclidean</span>\n</code></pre></div>",
        "id": 236000302,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619294130
    },
    {
        "content": "<p>The 20th slowest thing used to be 1.7 second and now it's 5.4 seconds</p>",
        "id": 236003399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619296465
    },
    {
        "content": "<ul>\n<li><code>63801552184f2a519c95a45561300547837915cc</code> (just after <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a>)<br>\n<a href=\"/user_uploads/3121/NlMfxI-zxIJu2yd937xlrqPM/leanchecker_63801552_sorted.txt\">leanchecker_63801552_sorted.txt</a> <a href=\"/user_uploads/3121/AnluOe81VWmQvhTCNO2JbeiX/leanchecker_63801552.txt\">leanchecker_63801552.txt</a> <br>\nTop 20:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">348087</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">lie_module.derived_series_le_lower_central_series</span>\n<span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">325001</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">has_fpower_series_at.comp</span>\n<span class=\"mi\">38</span><span class=\"bp\">.</span><span class=\"mi\">674662</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">cauchy_seq_finset_of_geometric_bound</span>\n<span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">162586</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux</span>\n<span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">136728</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux.equations._eqn_1</span>\n<span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">631498</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">mv_power_series.X_pow_dvd_iff</span>\n<span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">470218</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">to_euclidean</span>\n<span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">415529</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">smooth_bump_covering.exists_immersion_findim</span>\n<span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">795835</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">to_euclidean.equations._eqn_1</span>\n<span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">485176</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">044581</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">402438</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommMon.category_theory.forget₂.category_theory.creates_limit._proof_6</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">347118</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.limit_π_ring_hom.equations._eqn_1</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">283634</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.limit_π_ring_hom</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">914338</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_9</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">818749</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommMon.category_theory.forget₂.category_theory.creates_limit._proof_6</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">751567</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_10</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">586451</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function.add_comm_group._proof_8</span>\n<span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">178683</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.forget₂_AddCommMon_preserves_limits_aux</span>\n<span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">924244</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.forget₂_AddCommMon_preserves_limits_aux.equations._eqn_1</span>\n</code></pre></div>",
        "id": 236004977,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619297692
    },
    {
        "content": "<p>Differences from 3ec54df5 to 63801552 (with small relative or absolute differences filtered out): <a href=\"/user_uploads/3121/_37znEM6eCUdLTruWfFELOLL/difference.txt\">difference.txt</a> <br>\nTop 20:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">284117</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux</span>\n<span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">172984</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Algebra.forget₂_Ring_preserves_limits_aux.equations._eqn_1</span>\n<span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">759439</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">to_euclidean</span>\n<span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">644809</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">smooth_bump_covering.exists_immersion_findim</span>\n<span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">346480</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">to_euclidean.equations._eqn_1</span>\n<span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">179359</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">952717</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommMon.category_theory.forget₂.category_theory.creates_limit._proof_6</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">876578</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.limit_π_ring_hom.equations._eqn_1</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">872092</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.limit_π_ring_hom</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">626054</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup.category_theory.forget₂.category_theory.creates_limit._proof_7</span>\n<span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">372604</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommMon.category_theory.forget₂.category_theory.creates_limit._proof_6</span>\n<span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">510193</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.forget₂_AddCommMon_preserves_limits_aux</span>\n<span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">177408</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SemiRing.forget₂_AddCommMon_preserves_limits_aux.equations._eqn_1</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">339591</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommMon.category_theory.forget₂.category_theory.creates_limit</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">259126</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroup.category_theory.forget₂.category_theory.creates_limit</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">167444</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommMon.category_theory.forget₂.category_theory.creates_limit</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">081465</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommGroup.category_theory.forget₂.category_theory.creates_limit.equations._eqn_1</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">003845</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">CommGroup.category_theory.forget₂.category_theory.creates_limit</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">984336</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">AddCommMon.category_theory.forget₂.category_theory.creates_limit.equations._eqn_1</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">955816</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">euclidean.exists_pos_lt_subset_ball</span>\n</code></pre></div>",
        "id": 236005174,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619297860
    },
    {
        "content": "<p>(Script to calculate differences is <a href=\"https://github.com/bentoner/lean/blob/leanchecker-timing/script/compare_leanchecker_timings.py\">here</a>.)</p>",
        "id": 236006914,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619298466
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 236011303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619301727
    },
    {
        "content": "<p>The totals seem to indicate that post 7084 leanchecker should now take just a couple of minutes longer.</p>",
        "id": 236014121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619304154
    },
    {
        "content": "<p>The <code>by convert</code> trick decreases elaboration time of <code>Algebra.forget₂_Ring_preserves_limits_aux</code> from 2.64 seconds to 0.7 seconds.</p>\n<p>In contrast, <code>to_euclidean</code> times out if you insert <code>by convert</code> :-)</p>",
        "id": 236014617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619304590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> Thanks a lot for generating this data!</p>",
        "id": 236117373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619410010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> could you please generate some histograms again, to see what the pictures look like now?</p>",
        "id": 236117402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619410042
    },
    {
        "content": "<p>It would be really great if we had this data regularly. Having a regularly updated \"high score\" chart to direct our attention to some combination of the slow stuff, and the newly-slow stuff, would be super helpful.</p>",
        "id": 236122032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619414619
    },
    {
        "content": "<p>I just kick <a href=\"https://github.com/leanprover-community/mathlib/issues/7359\">#7359</a> on the queue, so the top spot on the leaderboard should be changing a couple of hours from now (-;</p>",
        "id": 236124574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619417048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> do you think we should try to take more action here?</p>",
        "id": 236241989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619470846
    },
    {
        "content": "<p>Could someone double check my finding that trepplein is way faster on mathlib than leanchecker?</p>",
        "id": 236258918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619478727
    },
    {
        "content": "<p>whilst I was googling stuff to install, I found <a href=\"https://github.com/ammkrn/nanoda_lib\">this</a> in rust - may also be a contender?</p>",
        "id": 236262766,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619481353
    },
    {
        "content": "<p>okay, was trying to check but got:</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>Exception in thread \"main\" java.lang.IllegalArgumentException: expected\n, got\n\n        at trepplein.LinesParser.consume(parser.scala:45)\n        at trepplein.LinesParser.lines(parser.scala:50)\n        at trepplein.TextExportParser$.$anonfun$parseStream$5(parser.scala:229)\n        at scala.collection.immutable.LazyList$.$anonfun$flatMapImpl$1(LazyList.scala:1049)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state$lzycompute(LazyList.scala:259)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state(LazyList.scala:252)\n        at scala.collection.immutable.LazyList.isEmpty(LazyList.scala:269)\n        at scala.collection.immutable.LazyList$.$anonfun$collectImpl$1(LazyList.scala:1031)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state$lzycompute(LazyList.scala:259)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state(LazyList.scala:252)\n        at scala.collection.immutable.LazyList.isEmpty(LazyList.scala:269)\n        at trepplein.main$.main(main.scala:140)\n        at trepplein.main.main(main.scala)\n</code></pre></div>",
        "id": 236266081,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619483677
    },
    {
        "content": "<p>(input:  <code>./trepplein -s export.out</code>)</p>",
        "id": 236266107,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619483704
    },
    {
        "content": "<p>I've used nanoda / nanoda-lib before; it's much quicker than <code>leanchecker</code> though I didn't do any timing. This was also before the recent changes that made <code>leanchecker</code> much slower.</p>",
        "id": 236267201,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619484160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/236258918\">said</a>:</p>\n<blockquote>\n<p>Could someone double check my finding that trepplein is way faster on mathlib than leanchecker?</p>\n</blockquote>\n<p>Can confirm. On my system with recent <code>master</code>:</p>\n<ul>\n<li><code>leanchecker</code>: 34m</li>\n<li><code>trepplein -s</code>: 14m</li>\n<li><code>trepplein</code> (16 threads): 3m</li>\n<li><code>tc</code>: consumes &gt;25G memory and dies</li>\n</ul>",
        "id": 236275346,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1619491185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Could you test nanoda as well?</p>",
        "id": 236303872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619513956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/236266081\">said</a>:</p>\n<blockquote>\n<p>okay, was trying to check but got:</p>\n<p><div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>Exception in thread \"main\" java.lang.IllegalArgumentException: expected\n, got\n\n        at trepplein.LinesParser.consume(parser.scala:45)\n        at trepplein.LinesParser.lines(parser.scala:50)\n        at trepplein.TextExportParser$.$anonfun$parseStream$5(parser.scala:229)\n        at scala.collection.immutable.LazyList$.$anonfun$flatMapImpl$1(LazyList.scala:1049)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state$lzycompute(LazyList.scala:259)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state(LazyList.scala:252)\n        at scala.collection.immutable.LazyList.isEmpty(LazyList.scala:269)\n        at scala.collection.immutable.LazyList$.$anonfun$collectImpl$1(LazyList.scala:1031)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state$lzycompute(LazyList.scala:259)\n        at scala.collection.immutable.LazyList.scala$collection$immutable$LazyList$$state(LazyList.scala:252)\n        at scala.collection.immutable.LazyList.isEmpty(LazyList.scala:269)\n        at trepplein.main$.main(main.scala:140)\n        at trepplein.main.main(main.scala)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So this is actually because of Windows – <code>leanchecker</code> makes CRLF files, whilst turns out <code>\\n</code> is Scala is platform-agnostic; strip out the CRLFs and it's totally fine</p>",
        "id": 236308248,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619516230
    },
    {
        "content": "<p>Timings so far: (measured with powershell <code>Measure-Command</code>, on a Ryzen 3600X)</p>\n<p><code>leanchecker</code>: 1.4407... hours<br>\n<code>trepplein</code> : 4.1545... minutes<br>\n<code>trepplein -s</code> : 16.712... minutes<br>\n<code>nanoda</code> (12 threads) : stack overflow<br>\n<code>nanoda</code> (ST): running</p>",
        "id": 236308461,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619516330
    },
    {
        "content": "<p>I've edited my comment with <code>nanoda</code> timings. <code>nanoda</code> wins overall, but not by that much compared to <code>trepplein</code>. It doesn't overflow for me like it does for Eric. Might be Windows vs Linux coming into play.</p>",
        "id": 236326511,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1619526361
    },
    {
        "content": "<p>Cool, so we could even run <code>trepplein</code> and <code>nanoda</code> sequentially, and we wouldn't even notice <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 236328924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619527352
    },
    {
        "content": "<p>yep seems so; I can run em on WSL if people want any more timings, but I think the findings are pretty definitive :b</p>",
        "id": 236335394,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619529841
    },
    {
        "content": "<p>I notice the queue is heavily cluttered at the moment. Stuff that was sent 2 hours ago is still not being processed. Those two actions have been running each for 5 hours: <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/846421065\">https://github.com/leanprover-community/mathlib/actions/runs/846421065</a> <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/846475716\">https://github.com/leanprover-community/mathlib/actions/runs/846475716</a><br>\nAnything to be worried about?</p>",
        "id": 238969514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621163817
    },
    {
        "content": "<p>GH Actions is partially down this morning so may be related: <a href=\"https://www.githubstatus.com/\">https://www.githubstatus.com/</a></p>",
        "id": 238970823,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621165149
    },
    {
        "content": "<p>I just restarted some jobs that were still in the queue. The queue is now empty again.</p>",
        "id": 238997886,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621190460
    },
    {
        "content": "<p>there's a few that failed with an error about continuous issues (e.g. <a href=\"https://github.com/leanprover-community/mathlib/issues/7623\">#7623</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/7363\">#7363</a>); an empty commit will fix them up - just wondering if there's a better way to do this?</p>",
        "id": 238998002,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621190597
    },
    {
        "content": "<p>You can go to the actions page and click \"re-run jobs\".</p>",
        "id": 238998335,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621190928
    }
]