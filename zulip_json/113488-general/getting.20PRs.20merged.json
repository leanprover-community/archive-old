[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Is there anything we can do so that a bunch of PRs get merged before the Christmas break? Merging these PRs would mean that we can spend our Christmas holidays on interesting maths stuff, instead of boring parties with food and fire crackers...</p>",
        "id": 152025635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545052363
    },
    {
        "content": "<p>Yuchai! We're down to 29!</p>",
        "id": 152030063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545056275
    },
    {
        "content": "<p>:o</p>",
        "id": 152030287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545056421
    },
    {
        "content": "<p>...and now mathlib is broken</p>",
        "id": 152030337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545056480
    },
    {
        "content": "<p>:o</p>",
        "id": 152030342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545056488
    },
    {
        "content": "<p>oh, I think it was the <code>squeeze_simp</code> PR</p>",
        "id": 152030494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545056592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> did you actually check that your import works?</p>",
        "id": 152030509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545056611
    },
    {
        "content": "<p>Hmm, it looked like it, but I didn't do a full compile.</p>",
        "id": 152030593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545056652
    },
    {
        "content": "<p>Can you revert that commit?</p>",
        "id": 152030604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545056668
    },
    {
        "content": "<p>Then I will do a more careful check.</p>",
        "id": 152030611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545056675
    },
    {
        "content": "<p>Sorry for the mess.</p>",
        "id": 152030618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545056682
    },
    {
        "content": "<p>I think it's a cyclic import</p>",
        "id": 152030659,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1545056721
    },
    {
        "content": "<p>Maybe two PRs added imports somewhere</p>",
        "id": 152030670,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1545056736
    },
    {
        "content": "<p><code>tactic.squeeze</code> imports <code>meta.rb_map</code> which imports <code>data.option</code> which imports <code>tactic.interactive</code></p>",
        "id": 152030803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545056839
    },
    {
        "content": "<p>where's the cycle?</p>",
        "id": 152030821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545056862
    },
    {
        "content": "<p><code>tactic.interactive</code> imports <code>tactic.squeeze</code></p>",
        "id": 152030930,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1545056927
    },
    {
        "content": "<p>why would it...</p>",
        "id": 152030940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545056937
    },
    {
        "content": "<p>Because then it makes it a lot easier for mere mortals to squeeze their simps. Would save you a lot of work.</p>",
        "id": 152031077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545057040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you want me to PR a reverting commit?</p>",
        "id": 152032030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545057729
    },
    {
        "content": "<p>no, I'm working on it</p>",
        "id": 152032040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545057738
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 152032050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545057751
    },
    {
        "content": "<p>I can make <code>data.option</code> work without <code>tactic.interactive</code>, it just used two <code>simpa</code>s</p>",
        "id": 152032234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545057905
    },
    {
        "content": "<p>But there is another cycle.</p>",
        "id": 152032244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545057908
    },
    {
        "content": "<p><code>category.traversable.instances</code> imports <code>-- import data.list.basic data.set.lattice</code></p>",
        "id": 152032277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545057936
    },
    {
        "content": "<p>It needs those for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mem_traverse</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β&#39;</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β&#39;</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">forall₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">bs</span> <span class=\"err\">∈</span> <span class=\"n\">traverse</span> <span class=\"n\">f</span> <span class=\"n\">as</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mem_traverse</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">],</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 152032305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545057961
    },
    {
        "content": "<p>If we kick that to another file, it seems that the world would be happy again.</p>",
        "id": 152032361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545057978
    },
    {
        "content": "<p>Once again, I apologize for breaking stuff. I'll take this as a lesson that I shouldn't lightly PR things that are low in the dependency chain...</p>",
        "id": 152032457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545058080
    },
    {
        "content": "<p>Aahrg... it's even worse. <code>tactic.squeeze</code> depends on <code>simpa</code> (of course <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span>).</p>",
        "id": 152032612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545058197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for all the merges! And thanks for fixing what I broke. <span class=\"emoji emoji-1f64f\" title=\"thank you\">:thank_you:</span> <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 152044631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545067662
    }
]