[
    {
        "content": "<p>Currently <code>{a, b}</code> is defined as <code>insert b {a}</code>, so various lemmas about insert reverse the order. E.g., <code>Sup {a, b}</code> simplifies to <code>sup b a</code> while I'd expect <code>sup a b</code>. Is there any reason to have it this way?</p>",
        "id": 188656082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582218011
    },
    {
        "content": "<p>From times to times I get random errors using set notations. We can do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>But sometimes the second variant rises an error \"function expected at\", but it's very hard to minimize. Does anyone understand the magic behind this notation? Only the last variation (which is pretty rarely used) has a clear origin using the <code>has_sep</code> class.</p>",
        "id": 193818978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586810607
    },
    {
        "content": "<p>The first two are parsed in C++ with hardcoded <code>set_of</code></p>",
        "id": 193820282,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586811384
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp#L28\" title=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp#L28\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp#L28</a></p>",
        "id": 193820395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586811471
    },
    {
        "content": "<p>Yes I understand that things that are not defined by Lean code are defined by C++ code. My question was not precise enough. I'd like to know whether other people see random failure with these notations and know how to fix them.</p>",
        "id": 193821997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586812320
    },
    {
        "content": "<p>I've never seen a failure, but it's possible that it's triggered by certain combinations of leaving things out which I might be systematically avoiding for style reasons</p>",
        "id": 193822596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586812669
    }
]