[
    {
        "content": "<p>Did anybody else see this:</p>\n<p><a href=\"https://github.com/rust-lang-nursery/wg-verification\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/wg-verification\">https://github.com/rust-lang-nursery/wg-verification</a><br>\n<a href=\"https://gitter.im/rust-lang/wg-verification\" target=\"_blank\" title=\"https://gitter.im/rust-lang/wg-verification\">https://gitter.im/rust-lang/wg-verification</a></p>\n<p>There seems to be an official verification working group for Rust. It might be a great opportunity to promote Lean</p>",
        "id": 125118534,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523817104
    },
    {
        "content": "<p>I think Lean is not quite there yet :(. (Mostly due to stability.)</p>",
        "id": 125119134,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523818585
    },
    {
        "content": "<p>You think we should just wait before getting started in that direction?</p>",
        "id": 125119986,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523820672
    },
    {
        "content": "<p>I do. I have a feeling that Rust wants something more... ready?</p>",
        "id": 125120025,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523820738
    },
    {
        "content": "<p>That makes sense but my impression from the group is that there is a wide variety of approaches. The Iris / RustBelt project seems to be the major one but they seem to encourage diversity rather than try to settle on a single verification approach</p>",
        "id": 125120032,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523820826
    },
    {
        "content": "<p>Perhaps you're right. I think Jared contributes to Rust so mayhap he's already brought it to their attention then?</p>",
        "id": 125120079,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523820911
    },
    {
        "content": "<p>Btw, in spite of the fact that I've been writing Lean exclusively for a few months now (and dropping Coq), if I were to start an industrial project right now I would choose Coq.</p>",
        "id": 125120083,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523820943
    },
    {
        "content": "<p>That makes sense. The infrastructure is far more mature. I think it will take a while for Lean to catch up. It seems to me that 1) it can happen and 2) when / if it does, Lean will be a more approachable solution to start hacking with.</p>",
        "id": 125120135,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821067
    },
    {
        "content": "<p>I completely agree. Really the notation is just more important than the Coq community realizes and Lean has just the right amount (as opposed to Agda who have gone <em>way</em> too far in the notational direction).</p>",
        "id": 125120175,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821129
    },
    {
        "content": "<p>I agree. I feel like organizing the libraries around type classes instead of module / functor also makes them far more usable.</p>",
        "id": 125120226,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821219
    },
    {
        "content": "<p>I guess the point of already starting on verification project is slowly catching up to the Coq infrastructure</p>",
        "id": 125120232,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821267
    },
    {
        "content": "<p>I wonder if it's realistic to hope for a sort of FFI between Lean and Coq</p>",
        "id": 125120236,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821314
    },
    {
        "content": "<p>Typeclasses are sweet. Also I've grown accustomed to using the decidable trick to use the same function in decidable and potentially undecidable contexts. It's so awkward to always do <code>if band</code> in Coq. (Although I believe Lean wants to actually drop this particular use case? Which is saddening.)</p>",
        "id": 125120237,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821317
    },
    {
        "content": "<p>I want FFI to C, Idris style.</p>",
        "id": 125120280,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821365
    },
    {
        "content": "<blockquote>\n<p>It's so awkward to always do if band in Coq.</p>\n</blockquote>\n<p>YES! It took me a while to appreciate that but it's incredible.</p>",
        "id": 125120286,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821416
    },
    {
        "content": "<blockquote>\n<p>Although I believe Lean wants to actually drop this particular use case?</p>\n</blockquote>\n<p>Are you referring to <code>ite</code> taking a <code>bool</code> instead of a decidable <code>Prop</code>? I think all that it will do is shift the use of <code>decidable</code> from <code>ite</code> to the coercion from your proposition to bool. I think it's too useful and pretty to drop.</p>",
        "id": 125120332,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821508
    },
    {
        "content": "<p>Oh, yes I was referring to that but clearly I had misunderstood then.</p>",
        "id": 125120335,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821530
    },
    {
        "content": "<p>So we're keeping the trick.</p>",
        "id": 125120336,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821533
    },
    {
        "content": "<blockquote>\n<p>I want FFI to C, Idris style.</p>\n</blockquote>\n<p>Multiple FFIs might be required. Specifically, a FFI to Coq would be really cool if it allowed us to reuse Coq theorems and tactics. That might mean we can use Iris in Lean for example.</p>",
        "id": 125120377,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821607
    },
    {
        "content": "<p>Give me Omega finally :).</p>",
        "id": 125120382,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821627
    },
    {
        "content": "<p>:D</p>",
        "id": 125120383,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821637
    },
    {
        "content": "<p>It might seem primitive but it even solves goals that I don't find immediately obvious once the set of (in)equalities is big enough.</p>",
        "id": 125120430,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821700
    },
    {
        "content": "<p>Can't wait to see what Lean 7 will bring.</p>",
        "id": 125120438,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821764
    },
    {
        "content": "<p>Why Lean 7?</p>",
        "id": 125120440,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821793
    },
    {
        "content": "<p>Why not 7 :)? We're at 4 soon!</p>",
        "id": 125120490,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821868
    },
    {
        "content": "<p>Surely 7 will be better than 6.</p>",
        "id": 125120492,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821875
    },
    {
        "content": "<p>I hear it won't be quite as good as 8 or 9 ...</p>",
        "id": 125120494,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821899
    },
    {
        "content": "<p>Yeah but I think 7 strikes the right balance between the wait time and quality.</p>",
        "id": 125120496,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523821916
    },
    {
        "content": "<p>Makes sense ... plus: it's a prime number, it's bound to be of prime quality too :D</p>",
        "id": 125120536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523821945
    },
    {
        "content": "<p>Folks, you need to slow down. Wait until Lean 4 is unfinished before starting on the next version.</p>",
        "id": 125185304,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523948326
    },
    {
        "content": "<p>But Lean 4 is currently unfinished!</p>",
        "id": 125186087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523950158
    },
    {
        "content": "<p>Ah ha. Therein lies the quandary...</p>",
        "id": 125186180,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523950343
    }
]