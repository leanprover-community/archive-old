[
    {
        "content": "<p>For context, in Scott Morrison's category theory code he introduces isomorphism as the structure:</p>\n<div class=\"codehilite\"><pre><span></span>structure Isomorphism {C : Type u} [category.{u v} C] (X Y : C) :=\n  (morphism : X ‚ü∂ Y)\n  (inverse : Y ‚ü∂ X)\n  (witness_1 : morphism ‚â´ inverse = ùüô X . obviously)\n  (witness_2 : inverse ‚â´ morphism = ùüô Y . obviously)\n</pre></div>\n\n\n<p>This seems like a perfectly fine way of doing this. Later in the document he uses</p>\n<div class=\"codehilite\"><pre><span></span>instance Isomorphism_coercion_to_morphism : has_coe (Isomorphism.{u v} X Y) (X ‚ü∂ Y) :=\n{ coe := Isomorphism.morphism }\n</pre></div>\n\n\n<p>I can't seem to figure out what a coercion actually is, or what it's use is. It seems like it might be useful. I'm currently trying to state and prove a theorem where a morphism is shown to be an isomorphism and this looks like a promising way of moving from isomorphic objects to isomorphisms. Help much appreciated.</p>",
        "id": 130142384,
        "sender_full_name": "Ned Summers",
        "timestamp": 1532344500
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes</a></p>",
        "id": 130143610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532346348
    },
    {
        "content": "<p>Thanks</p>",
        "id": 130144000,
        "sender_full_name": "Ned Summers",
        "timestamp": 1532346870
    },
    {
        "content": "<p>A coercion is just a way of moving from one type to another by applying a function which you don't want to continually mention, you just want Lean to do it automatically. See that the coercion is defined using <code>instance</code> not <code>definition</code>? That means \"define it, and let the type class inference system use it\". The type class inference system will then apply it whenever necessary.</p>",
        "id": 130170341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532375790
    },
    {
        "content": "<p>Shouldn't that be a <code>has_coe_to_fun</code> not a <code>has_coe</code>?</p>",
        "id": 130170444,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532375898
    },
    {
        "content": "<p>No, because the target isn't a function type (that arrow is not a regular arrow)</p>",
        "id": 130180701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532390183
    },
    {
        "content": "<p>Hi,<br>\nin the current library is there already a coercion to see a field as a comm_semiring ? <br>\nOne can combine <code>field.to_comm_ring </code> with <code>comm_ring.to_comm_semiring</code>, but maybe there is a more direct way.<br>\nThanks</p>",
        "id": 135248099,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1538737675
    },
    {
        "content": "<p>The typeclass system should do that for you. Usually you don't need to touch it.</p>",
        "id": 135248182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538737785
    },
    {
        "content": "<p>If you really need it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 135248235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538737825
    },
    {
        "content": "<p>You can usually also insert the <code>by apply_instance</code> into your proofs if you need it.</p>",
        "id": 135248242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538737850
    },
    {
        "content": "<blockquote>\n<p>The typeclass system should do that for you. Usually you don't need to touch it.</p>\n</blockquote>\n<p>The typeclass system doesn't help here, but the code you gave me with \"instance\" works fine.<br>\nThank you <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 135248929,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1538738887
    },
    {
        "content": "<p>This instance code is exactly using the type class inference system to construct the term which you asked for. But usually the type class inference system can be trusted to handle this question completely, and users don't have to construct this term at all. Why did you want this coercion?</p>",
        "id": 135259239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538750903
    },
    {
        "content": "<blockquote>\n<p>This instance code is exactly using the type class inference system to construct the term which you asked for. But usually the type class inference system can be trusted to handle this question completely, and users don't have to construct this term at all. Why did you want this coercion?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I want to use <code>polynomial.eval</code> with a field (the default argument is a commutative semiring).</p>",
        "id": 135265433,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1538757335
    },
    {
        "content": "<p>That should work out of the box</p>",
        "id": 135265444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538757361
    },
    {
        "content": "<p>Are these typeclasses not just all resolved using type class inference?</p>",
        "id": 135265490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538757376
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">definition</span> <span class=\"n\">KX</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span>\n</pre></div>\n\n\n<p>It just works when you do it this way <span class=\"user-mention\" data-user-id=\"125073\">@Anthony Bordg</span></p>",
        "id": 135265684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538757627
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">KX</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eval_works</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kn\">eval</span> <span class=\"n\">k</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 135265787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538757827
    }
]