[
    {
        "content": "<p>My understanding of idiomatic Lean is that a lot of simple terms have some kind of \"canonical form\", and when writing Lean code (especially simp lemmas) one should write each such term in its canonical form rather than any of the defeq other forms which can be used, because defeq is fine for <code>rfl</code> but not for <code>rw</code>.</p>\n<p>In the past, when things have not come out in the \"canonical form\" which I want them to be, this was user error, because this user in particular had no idea about this canonical form philosophy until recently. </p>\n<p>I'm now attempting to stick to it rigidly whilst writing teaching materials. Here is an example where I decide that <code>0</code> (i.e. <code>has_zero.zero</code>) is my canonical form for <code>mynat.zero</code> and then a <code>mynat.zero</code> appears:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"c1\">-- I want to never see mynat.zero again</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ 0 + zero = zero -- leakage of &quot;zero&quot; i.e. mynat.zero</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive case is fine</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ @eq.{1} mynat (@has_add.add.{0} mynat mynat.has_add (@has_zero.zero.{0} mynat mynat.has_zero) mynat.zero) mynat.zero</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>I was thinking I could just fix this with my own induction <em>function</em>, which does all the rewriting of <code>mynat.zero</code> to <code>has_zero.zero</code>. But I can't do it, because the <code>induction</code> tactic eats some new variable names and this is convenient, so I would have to write my own tactic to do this. I don't know where to start with writing tactics though. I think that in practice all I want to do is some kind of <code>repeat {rw (show mynat.zero = (0 : mynat), from rfl) at *},</code> after every application of any tactic which leaks.</p>\n<p>Does anyone have any advice on how to make Lean a bit more noob-friendly here? I just want it to work for beginners and them never ever see <code>zero</code>.</p>",
        "id": 169636247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562235673
    },
    {
        "content": "<p>Also, this doesn't seem to happen when you reprove <code>zero_add</code> for Lean's version of <code>nat</code>, right?</p>",
        "id": 169636552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562235928
    },
    {
        "content": "<p>Let me check.</p>",
        "id": 169636567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562235940
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 169636657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562235991
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zero_add&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ 0 + 0 = 0 -- no leakage of &quot;zero&quot;</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive case is fine</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169636672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236020
    },
    {
        "content": "<p>So somehow the induction tactic picked up that <code>nat.zero</code> is not canonical form, and it should use <code>0</code>.</p>",
        "id": 169636692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236040
    },
    {
        "content": "<p>It's not that hard to use a custom recursor, including getting names for the variables in the cases. You just use <code>refine</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">refine</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">rec_on&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 169636770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236096
    },
    {
        "content": "<p>This doesn't happen for <code>nat</code> because the pretty printer has magic to print <code>nat.zero</code> as <code>0</code> even though it's not the same as <code>has_zero.zero nat</code></p>",
        "id": 169636827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236181
    },
    {
        "content": "<p>so the leakage is still happening, you just can't see it because of the pp</p>",
        "id": 169636886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236217
    },
    {
        "content": "<p>We could try writing an <code>induction'</code> which doesn't have a broken <code>using</code> clause. I never use it because the <code>refine</code> version is shorter, but if the using clause was triggered automatically with an attribute that could be a lot of value added for custom recursors</p>",
        "id": 169637008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236341
    },
    {
        "content": "<p>I think this could be quite helpful to beginners...</p>",
        "id": 169637063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236426
    },
    {
        "content": "<p>In some sense the <code>induction</code> tactic is quite useless as it is.</p>",
        "id": 169637071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236439
    },
    {
        "content": "<p>I would wish that <code>refine blah.rec_on _ _ _</code> isn't \"idiomatic\". Because the informal proof says \"use induction on <code>x</code>\". It would be great if you could actually type <code>induction x</code> in the Lean proof.</p>",
        "id": 169637164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236499
    },
    {
        "content": "<p>And I wouldn't want a <code>using</code> clause, that's very verbose. I'd rather have some sort of attribute.</p>",
        "id": 169637246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236566
    },
    {
        "content": "<p>If we tag <code>mynat.custom_rec_on</code> with <code>@induction</code> then the <code>induction'</code> tactic could pick that up, right?</p>",
        "id": 169637283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236604
    },
    {
        "content": "<p>that's the idea</p>",
        "id": 169637308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236639
    },
    {
        "content": "<p>I like refine because it's the swiss army knife of lean tactics</p>",
        "id": 169637315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236657
    },
    {
        "content": "<p>it's very straightforward to use and less to remember</p>",
        "id": 169637370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236685
    },
    {
        "content": "<p>and it doesn't have gotchas like <code>apply</code></p>",
        "id": 169637380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562236698
    },
    {
        "content": "<p>Sure <code>refine</code> is great as Swiss army knife. But it doesn't give you the semantics that <code>induction</code> has.</p>",
        "id": 169637570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236916
    },
    {
        "content": "<p>If you want people to see in a glance what the idea behind the proof is...</p>",
        "id": 169637621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236932
    },
    {
        "content": "<p>Of course you can get almost every where with <code>refine</code>, <code>rw</code> and maybe occasionally a <code>simp [foo,bar]</code>.</p>",
        "id": 169637631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236962
    },
    {
        "content": "<p>But if you want to write \"beautiful, beginner-friendly proofs\"...</p>",
        "id": 169637678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562236996
    },
    {
        "content": "<p>What I need are non-leaky tactics, maybe called <code>induction'</code> and <code>cases'</code>, so that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">induction&#39;</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>is the same as</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">mynat</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}},</span>\n</pre></div>\n\n\n<p>etc etc</p>\n<p>and <code>induction'</code> should fail iff <code>induction</code> fails.</p>\n<p>Are these trivial to write?</p>",
        "id": 169698599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562321958
    },
    {
        "content": "<p>I also want a rewrite tactic which does <em>not</em> try <code>rfl</code> at the end. Is this already in Lean?</p>",
        "id": 169698901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562322342
    },
    {
        "content": "<p>Does this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">mynat</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}}]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n</pre></div>",
        "id": 169698952,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562322390
    },
    {
        "content": "<p>You could also write a recursor using <code>has_zero.zero</code> and do <code>induction ... using</code></p>",
        "id": 169698965,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562322423
    },
    {
        "content": "<p>It would be better to use <code>change mynat.zero with 0 at *</code> instead of <code>rw rfl</code> like that</p>",
        "id": 169699058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562322536
    },
    {
        "content": "<p>For the rw with no refl I just copied a bunch of private defs from core and then deleted a random line and I think I got lucky:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">postfix</span> <span class=\"bp\">`</span><span class=\"err\">?</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">optional</span>\n<span class=\"n\">local</span> <span class=\"kn\">postfix</span> <span class=\"bp\">*</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">many</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">resolve_name&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">resolve_name</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">mk_const</span> <span class=\"n\">n</span> <span class=\"c1\">-- create metavars for universe levels</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span>              <span class=\"o\">:=</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">p</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rw_goal</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">rw_rule</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n <span class=\"n\">save_info</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">,</span>\n <span class=\"n\">eq_lemmas</span> <span class=\"err\">←</span> <span class=\"n\">get_rule_eqn_lemmas</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n <span class=\"n\">orelse&#39;</span>\n   <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr&#39;</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">rule</span><span class=\"o\">,</span> <span class=\"n\">rewrite_target</span> <span class=\"n\">e</span> <span class=\"o\">{</span><span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span><span class=\"o\">})</span>\n   <span class=\"o\">(</span><span class=\"n\">eq_lemmas</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rewrite_target</span> <span class=\"n\">e</span> <span class=\"o\">{</span><span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span><span class=\"o\">})</span>\n   <span class=\"o\">(</span><span class=\"n\">eq_lemmas</span><span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">uses_hyp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"n\">ff</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"bp\">_</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">||</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rw_hyp</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">rw_rule</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"n\">hyp</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">::</span><span class=\"n\">rs</span><span class=\"o\">)</span> <span class=\"n\">hyp</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">save_info</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_lemmas</span> <span class=\"err\">←</span> <span class=\"n\">get_rule_eqn_lemmas</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">orelse&#39;</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr&#39;</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">rule</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">uses_hyp</span> <span class=\"n\">e</span> <span class=\"n\">hyp</span><span class=\"o\">))</span> <span class=\"err\">$</span> <span class=\"n\">rewrite_hyp</span> <span class=\"n\">e</span> <span class=\"n\">hyp</span> <span class=\"o\">{</span><span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span><span class=\"o\">}</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">rw_hyp</span> <span class=\"n\">rs</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">eq_lemmas</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rewrite_hyp</span> <span class=\"n\">e</span> <span class=\"n\">hyp</span> <span class=\"o\">{</span><span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span><span class=\"o\">}</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">rw_hyp</span> <span class=\"n\">rs</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">eq_lemmas</span><span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rw_core</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loca</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">loca</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">wildcard</span> <span class=\"o\">:=</span> <span class=\"n\">loca</span><span class=\"bp\">.</span><span class=\"n\">try_apply</span> <span class=\"o\">(</span><span class=\"n\">rw_hyp</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rw_goal</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>            <span class=\"o\">:=</span> <span class=\"n\">loca</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">rw_hyp</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rw_goal</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">returnopt</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">end_pos</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">save_info</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rw&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">rw_core</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"n\">cfg</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>\n\n\n<p>Is this a silly way to do it? I just deleted one of the <code>&gt;&gt;</code> lines after <code>end</code> in <code>rw_core</code></p>",
        "id": 169699986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562323780
    },
    {
        "content": "<p>like I said, use <code>change with</code> instead of <code>rw</code></p>",
        "id": 169700707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562324647
    },
    {
        "content": "<p>use <code>erw</code></p>",
        "id": 169700739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562324696
    },
    {
        "content": "<p><code>change with</code> just looks more complicated than <code>rw</code>. I have a working <code>rw'</code>. I don't mind writing new tactics. To be honest I don't even mind modding core Lean for this project, it's a standalone thing.</p>",
        "id": 169701636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562325942
    },
    {
        "content": "<p>Chris I'll try your induction code when I get back in front of Lean. Thanks!</p>",
        "id": 169701647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562325958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think Mario means that you should use <code>change with</code> inside <code>induction'</code> instead of using <code>rw</code> there.</p>",
        "id": 169702257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562326742
    },
    {
        "content": "<p>I just want one tactic which is simple to apply and which doesn't leak. I am not sure I understand what is being suggested.</p>",
        "id": 169702285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562326782
    },
    {
        "content": "<p>At the minute I am writing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">clear_up_leaks</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 169702334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562326818
    },
    {
        "content": "<p>and I want to write </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">induction&#39;</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- no leaks here}</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- or here}</span>\n</pre></div>",
        "id": 169702353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562326855
    },
    {
        "content": "<p>Right, and Mario says that <code>clear_up_leaks</code> should use <code>change</code> instead of <code>rw</code>.</p>",
        "id": 169702611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327178
    },
    {
        "content": "<p>We might want an attribute <code>@antileak</code> or something like that, that will change terms into defeq terms that are more canonical.</p>",
        "id": 169702649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327263
    },
    {
        "content": "<p>I guess we could also use <code>dsimp</code> for this?</p>",
        "id": 169702654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what happens if you write a simp lemma (tagged with <code>@[simp]</code> that says <code>mynat.zero = 0 := rfl</code>.<br>\nAnd then you call <code>induction n with d hd; dsimp</code>.</p>",
        "id": 169702725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327324
    },
    {
        "content": "<p>Similarly you will want <code>mynat.succ n = n + 1 := rfl</code>.</p>",
        "id": 169702749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327366
    },
    {
        "content": "<p>Is that sufficient to clear up the leaks?</p>",
        "id": 169702759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562327384
    },
    {
        "content": "<p>That's strictly worse than <code>clear_up_leaks</code> because formally it's the same thing (\"apply a tactic and then type something which you don't want\") and secondly <code>simp</code> will close various goals, like <code>rfl</code> goals -- it does too much.</p>",
        "id": 169702763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562327391
    },
    {
        "content": "<p>using <code>change with</code> will not close any goals</p>",
        "id": 169705115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562330040
    },
    {
        "content": "<p>And I am talking about the definition of <code>induction'</code>, like Johan says</p>",
        "id": 169705204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562330097
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">induction&#39;</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 0 + 0 = 0</span>\n  <span class=\"c1\">-- 0 + d = d ⊢ 0 + (d + 1) = d + 1</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Unfortunately <code>change with</code> does not support arguments in the lemmas, so I use some beta reduction at the end there. I don't think it will use <code>rfl</code> at the end though. Also <code>propagate_tags</code> undoes the work for some reason, so you can't use <code>case</code> with this</p>",
        "id": 169706003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562330945
    },
    {
        "content": "<p>So this <code>induction'</code> thing, and <code>rw'</code> and also this <code>structure_helper</code> thing are all attempts to write more user-friendly ways of doing stuff. The idea is that we are shielding the users from Lean's weak spots here. And we're also shielding the user from definitions and recursion; I want to ask them to only prove theorems.</p>",
        "id": 169706509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562331392
    },
    {
        "content": "<p>Yes, but you could say that about any tactic</p>",
        "id": 169706885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562331774
    },
    {
        "content": "<p>I agree you can say this about any tactic, but Kevin is implicitly making a point dear to my heart here --- whenever something is even slightly painful, we should grind away on it, by building suitable tactics, until it becomes smooth and easy. The payoff for building tactics that make life easier is really high!</p>",
        "id": 169714923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562338585
    },
    {
        "content": "<p>Both Scott and I are speaking as mathematicians who have to deal with questions from undergrads of the form \"why doesn't this rewrite work?\" and we give technical answers involving <code>pp.all</code> but we'd rather the rewrite just worked ;-)</p>",
        "id": 169714973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562338639
    },
    {
        "content": "<blockquote>\n<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}]</span>\n</pre></div>\n\n\n</blockquote>\n<p>What do I need to open to make this compile? </p>\n<div class=\"codehilite\"><pre><span></span>unknown identifier &#39;parse&#39;\nunknown identifier &#39;cases_arg_p&#39;\nunknown identifier &#39;parse&#39;\nunknown identifier &#39;with_ident_list&#39;\n</pre></div>\n\n\n<p>Regarding <code>succ</code>, are you suggesting that <code>n + 1</code> is the canonical way of writing <code>succ n</code>? I had assumed it was the other way around.</p>",
        "id": 169724557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562348224
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"c1\">-- I want to never see mynat.zero again</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">induction&#39;</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 0 + 0 = 0</span>\n  <span class=\"c1\">-- 0 + d = d ⊢ 0 + (d + 1) = d + 1</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169725741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562349530
    },
    {
        "content": "<p>Thanks. What I am surprised about is that you want to replace succ with + 1. I decided in my development that succ x was more canonical than x + 1. Is there anything wrong with this decision?</p>",
        "id": 169730976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562354934
    },
    {
        "content": "<p>I guess that it doesn't look very \"mathematical\"...</p>",
        "id": 169731209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562355213
    },
    {
        "content": "<p>I don't really care one away or another... the lean magic is pretty strong in being able to conflate them for nat. The only downside of <code>n+1</code> is simp has a nasty habit of changing it to <code>1+n</code></p>",
        "id": 169732243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562356470
    },
    {
        "content": "<p>Isn't that because <code>add_comm</code> is a simp-lemma for some reason?</p>",
        "id": 169732280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562356538
    },
    {
        "content": "<p>I've seen it show up in the results of <code>squeeze_simp</code>.</p>",
        "id": 169732284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562356553
    },
    {
        "content": "<p>I'm adamant that definitions should be able have attached a way to format themselves, and probably implementing this with an attribute would work really well. Then e.g. once <code>has_zero</code> is defined <code>zero</code> can remember it is always <code>0</code>, and there is no chasing of potential leakage everywhere. Another nice thing would be for <code>vector_space</code> vs <code>module</code>; if the scalar ring is (in <code>expr</code> land) an application of <code>discrete_field.to_ring</code> then print <code>vector_space</code>, else print <code>module</code>, etc.</p>",
        "id": 169751123,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1562386714
    },
    {
        "content": "<p>Surprisingly, this modified tactic still leaks (although I can't see why):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"c1\">-- I want to never see mynat.zero again</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction&#39;</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- leakage</span>\n    <span class=\"c1\">-- h : zero + b = zero</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</pre></div>",
        "id": 169806298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562495876
    },
    {
        "content": "<p>what changed?</p>",
        "id": 169806398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562496043
    },
    {
        "content": "<p>the tactic looks the same</p>",
        "id": 169806405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562496066
    },
    {
        "content": "<p>Oh -- I can see why!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- h : zero + x = x + 0</span>\n    <span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : zero + x = x + 0</span>\n    <span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : 0 + x = x + 0</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is this a bug in <code>change</code> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 169806409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562496070
    },
    {
        "content": "<p>[sorry -- by \"this modified tactic\" I mean \"your tactic\", not \"I modified your tactic\"]</p>",
        "id": 169806463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562496169
    },
    {
        "content": "<p>that's interesting. It looks like a bug (I mean it's definitely not intended behavior)</p>",
        "id": 169806468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562496188
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 169806543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562496328
    },
    {
        "content": "<p>We need formally verified tactics</p>",
        "id": 169806547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562496342
    },
    {
        "content": "<p>My workaround:</p>\n<div class=\"codehilite\"><pre><span></span>try {rw&#39; (show mynat.zero = (0 : mynat), from rfl) at *},\n</pre></div>\n\n\n<p>where <code>rw'</code> is my modded <code>rw</code> which doesn't try to close goals with <code>rfl</code></p>",
        "id": 169806731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562496705
    },
    {
        "content": "<p>It's written in lean, so you can just fix it</p>",
        "id": 169806733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562496715
    },
    {
        "content": "<blockquote>\n<p>We need formally verified tactics</p>\n</blockquote>\n<p>You joke, but...</p>",
        "id": 169806774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562496749
    },
    {
        "content": "<p>I can't understand meta code so I can't.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">`change u` replaces the target `t` of the main goal to `u` provided that `t` is well formed with respect to the local context of the main goal and `t` and `u` are definitionally equal.</span>\n\n<span class=\"cm\">`change u at h` will change a local hypothesis to `u`.</span>\n\n<span class=\"cm\">`change t with u at h1 h2 ...` will replace `t` with `u` in all the supplied hypotheses (or `*`), or in the goal if no `at` clause is specified, provided that `t` and `u` are definitionally equal.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"n\">parse</span> <span class=\"n\">location</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">change_core</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">eq</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">eh</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">change_core</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">eh</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;change-at does not support multiple locations&quot;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"n\">u</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n     <span class=\"n\">ty</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n     <span class=\"n\">eq</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">ty</span><span class=\"o\">),</span>\n     <span class=\"n\">ew</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">ty</span><span class=\"o\">),</span>\n     <span class=\"k\">let</span> <span class=\"n\">repl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">eq</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ew</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n     <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">try_apply</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">change_core</span> <span class=\"o\">(</span><span class=\"n\">repl</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"n\">change_core</span> <span class=\"o\">(</span><span class=\"n\">repl</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169806775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562496750
    },
    {
        "content": "<p>I don't see why <code>at *</code> would fail and <code>at h</code> would succeed. The last three lines are basically executing <code>change ... at x, change ... at h, change ... at |-</code></p>",
        "id": 169806853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562496946
    },
    {
        "content": "<p>Can you reproduce? My post should be a MWE</p>",
        "id": 169806898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562496969
    },
    {
        "content": "<p>sorry, that's nonsense.</p>",
        "id": 169806900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562496982
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"c1\">-- I want to never see mynat.zero again</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">}]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction&#39;</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- leakage</span>\n    <span class=\"c1\">-- h : zero + b = zero</span>\n    <span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- h : zero + x = x + 0</span>\n    <span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : zero + x = x + 0</span>\n    <span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : 0 + x = x + 0</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</pre></div>",
        "id": 169806909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562497011
    },
    {
        "content": "<p>That's a WE</p>",
        "id": 169806914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562497022
    },
    {
        "content": "<p>Aha, I found the problem. Here's a standalone tactic that does the same thing as the <code>change with</code> line, with irrelevant things removed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- h : zero + x = x + 0</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">repl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">hyp_tac</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n      <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">num_reverted</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"err\">←</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n      <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"err\">$</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"o\">(</span><span class=\"n\">repl</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">intron</span> <span class=\"n\">num_reverted</span><span class=\"o\">),</span>\n    <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">try_lst</span> <span class=\"err\">$</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> &lt;- delete -/</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">hyp_tac</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169807690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562498528
    },
    {
        "content": "<p>The tactic fails in this case, but if you remove the <code>x,</code> on the last line then it works</p>",
        "id": 169807699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562498557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">mk_simp_attr</span> <span class=\"bp\">`</span><span class=\"n\">leakage</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"k\">with</span> <span class=\"n\">leakage</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n\n<span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">-- I want to never see mynat.zero again</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">leakage</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mynat_zero_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">-- I want to never see mynat.succ again</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">leakage</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mynat_succ_eq_add_one</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction&#39;</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- no leakage</span>\n    <span class=\"c1\">-- h : 0 + b = 0</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- h : zero + x = x + 0</span>\n    <span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : zero + x = x + 0</span>\n    <span class=\"n\">change</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : 0 + x = x + 0</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</pre></div>",
        "id": 169807712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562498607
    },
    {
        "content": "<p>I like the look of this</p>",
        "id": 169807763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562498691
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>We need formally verified tactics</p>\n</blockquote>\n<p>You joke, but...</p>\n</blockquote>\n<p>What makes you think that I'm joking <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 169807817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562498786
    },
    {
        "content": "<p>The reason it fails is because the <code>change ... at x</code>, while not doing anything to the type, changes the internal name of the local variable because it is reverted and re-introduced, and this also changes the variable <code>h</code> so that the old reference is dangling and fails to achieve the desired result</p>",
        "id": 169807834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562498826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> can you do me a <code>cases'</code> too?</p>",
        "id": 169807892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562498942
    },
    {
        "content": "<p>Currently I just cut and paste the cases tactic and then add stuff to the end</p>",
        "id": 169807899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562498958
    },
    {
        "content": "<p><code>do tactic.interactive.induction hp none ids none,</code> -- it's that line I need for <code>cases</code></p>",
        "id": 169807903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562498982
    },
    {
        "content": "<p>Alternatively, if only the second line is a tactic, then you can write <code>cases foo, unleak</code></p>",
        "id": 169807960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562499029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">mk_simp_attr</span> <span class=\"bp\">`</span><span class=\"n\">leakage</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">none</span> <span class=\"n\">ids</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"k\">with</span> <span class=\"n\">leakage</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">cases&#39;</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"n\">ids</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"k\">with</span> <span class=\"n\">leakage</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n\n<span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">-- I want to never see mynat.zero again</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">leakage</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mynat_zero_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">-- I want to never see mynat.succ again</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">leakage</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mynat_succ_eq_add_one</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases&#39;</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- no leakage</span>\n    <span class=\"c1\">-- h : 0 + b = 0</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- no leakage</span>\n    <span class=\"c1\">-- h : n + 1 + b = n + 1</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</pre></div>",
        "id": 169807963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562499035
    },
    {
        "content": "<p>I'm not sure I like this \"duplicate every tactic\" approach</p>",
        "id": 169807982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562499078
    },
    {
        "content": "<p>me neither</p>",
        "id": 169808031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562499126
    },
    {
        "content": "<p>unleak is good</p>",
        "id": 169808032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562499130
    },
    {
        "content": "<blockquote>\n<p>Alternatively, if only the second line is a tactic, then you can write <code>cases foo, unleak</code></p>\n</blockquote>\n<p><code>cases foo; unleak</code></p>",
        "id": 169808043,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562499144
    },
    {
        "content": "<p>your version unleaks everywhere so it's the same</p>",
        "id": 169808049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562499161
    },
    {
        "content": "<p>but it's probably more idiomatic to drop the all_goals and use <code>;</code></p>",
        "id": 169808060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562499188
    },
    {
        "content": "<p>There's an (interactive) <code>change'</code> tactic that's supposted to deal with the naming issue in <code>change</code>. <a href=\"https://github.com/leanprover-community/mathlib/pull/712\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/712\">https://github.com/leanprover-community/mathlib/pull/712</a></p>",
        "id": 169808277,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562499572
    },
    {
        "content": "<p>or just write <code>dsimp only with leakage</code></p>",
        "id": 169808278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562499577
    },
    {
        "content": "<p>(accidental promotion of <code>simp</code> attributes)</p>",
        "id": 169808281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562499600
    },
    {
        "content": "<p>(I've always been adamant about the widespread use of <code>simp</code> attribute)</p>",
        "id": 169808330,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562499647
    },
    {
        "content": "<p>Someone could add a little custom tactic hook so <code>unleak</code> gets run between every line when you write <code>begin [unleak] ... end</code></p>",
        "id": 169808338,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1562499673
    },
    {
        "content": "<p>i haven't tried this but could you get around with <code>pp.notation</code> and custom notation? Is it possible to hack the pretty printer in any way?</p>",
        "id": 169809147,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562501207
    },
    {
        "content": "<p>hmm, i wonder if there is a vscode extension that watches tabs and can perform regex find and replace</p>",
        "id": 169809315,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562501495
    },
    {
        "content": "<blockquote>\n<p>I'm not sure I like this \"duplicate every tactic\" approach</p>\n</blockquote>\n<p>How do we make Lean more user-friendly for beginners?</p>",
        "id": 169813313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562508400
    },
    {
        "content": "<blockquote>\n<p>i haven't tried this but could you get around with <code>pp.notation</code> and custom notation? Is it possible to hack the pretty printer in any way?</p>\n</blockquote>\n<p>The problem with this is that if the pretty printer is printing both <code>mynat.zero</code> and <code>has_zero.zero</code> as <code>0</code> then <code>rw</code> will <em>still be failing</em> and the error message will be incomprehensible.</p>",
        "id": 169813324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562508471
    },
    {
        "content": "<p>I would rather fix the original tactics rather than inventing new variations on existing things, which is more stuff for the newcomer to learn. If the set of tactics becomes too large, that itself will present a learning curve penalty</p>",
        "id": 169814004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562509922
    },
    {
        "content": "<p>Is there a \"stack exchange\" list somewhere that demonstrates each tactic? As a beginner it would be useful to see how and why to apply each tactic with a working example.</p>",
        "id": 169814111,
        "sender_full_name": "Tim Daly",
        "timestamp": 1562510107
    },
    {
        "content": "<p>Here's something I knocked up very quickly last year, which covers some of the basics.</p>\n<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/tacticindex.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/tacticindex.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/tacticindex.html</a></p>\n<p>This summer I fully intend to make something a lot more professional.</p>\n<p>For the more advanced tactics, </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a></p>\n<p>is invaluable.</p>",
        "id": 169814747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562511479
    },
    {
        "content": "<blockquote>\n<p>I would rather fix the original tactics rather than inventing new variations on existing things, which is more stuff for the newcomer to learn. If the set of tactics becomes too large, that itself will present a learning curve penalty</p>\n</blockquote>\n<p>For this notational leakage issue I am making a standalone thing; ultimately I would like <code>induction</code> to actually run <code>induction'</code>. Fixing this sort of issue in general is a different question. I like the idea of a custom recursor written with the canonical notation which gets tagged somehow and then picked up by the tactic in general.</p>\n<p>So while I'm here, how can I actually override what happens when a user types <code>induction</code> in tactic mode? Editing core lean is fine. But the problem is that just changing the name of the <code>induction</code> tactic in core Lean will break everything, I would imagine. I'd rather have some other namespace open and with a higher priority.</p>",
        "id": 169814881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562511681
    },
    {
        "content": "<p>sadly lean interactive tactics don't work like that</p>",
        "id": 169815059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562512055
    },
    {
        "content": "<p>for it to get picked up you have to call it <code>tactic.interactive.induction</code>, and there can only be one of that</p>",
        "id": 169815065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562512080
    },
    {
        "content": "<p>There are all sorts of ways I can work around this, e.g. processing user input before feeding it to Lean.</p>",
        "id": 169815219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562512390
    },
    {
        "content": "<p>Can't one of <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>'s</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">ninja</span><span class=\"bp\">-</span><span class=\"n\">mode</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>make this work?</p>",
        "id": 169815860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562513535
    },
    {
        "content": "<p>yes, but that requires rewriting every tactic</p>",
        "id": 169815863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562513577
    },
    {
        "content": "<p>It should actually be easy to define an alias <code>newtac</code> for <code>tactic</code> and automatically copy every declaration in <code>tactic.interactive</code> to <code>newtac.interactive</code>. Skip the ones you want to change, then use <code>begin [newtac] ... end</code> blocks. Not the prettiest workaround though.</p>",
        "id": 169817488,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562516820
    },
    {
        "content": "<p>It would be great if there was an option or command line flag to set the default environment</p>",
        "id": 169817553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562516982
    },
    {
        "content": "<p>I would vote for a per-module option (e.g. extend <code>theory</code>, so we can write <code>noncomputable mathlib theory</code> or <code>mathlib theory</code>)</p>",
        "id": 169823969,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1562528975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Using my addition to lean <code>3.5.0</code> you can at least set the default monad for an interactive block.</p>",
        "id": 169855514,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1562580059
    },
    {
        "content": "<p>You create a new <code>executor</code> instance with priority higher than the default.</p>",
        "id": 169855530,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1562580076
    },
    {
        "content": "<p>I am completely open to using 3.5.x with this project. It would be ideal if we could use <code>induction a with d hd</code> rather than <code>induction'</code>. My vision is that the user can only edit the stuff in a textbox within some begin end block (and can't see all the jibberish outside the block).</p>",
        "id": 169857050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562581706
    }
]