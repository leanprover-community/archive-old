[
    {
        "content": "<p>Wow! Can it break anything?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">new_frontend</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">&quot;(&quot;</span> <span class=\"n\">term</span> <span class=\"s2\">&quot;↦&quot;</span> <span class=\"n\">term</span> <span class=\"s2\">&quot;)&quot;</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"err\">$</span><span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"err\">$</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"err\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"err\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">6</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 193653530,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1586601076
    },
    {
        "content": "<p>Hah nice, someone is actually playing with that. You can drop the parens if you set a precedence on the arrow:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">new_frontend</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">&quot;↦&quot;</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"err\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"err\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"err\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"err\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">6</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>or, of course, just</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">&quot;↦&quot;</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>Next task: finding and implementing a sensible syntax for multiple parameters?</p>",
        "id": 193679137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586638620
    },
    {
        "content": "<p>Breaking anything by introducing new syntax should be hard as long as it doesn't cover existing syntax, and the leading token isn't already used somewhere else as a non-leading token, like in the <code>[a,b[</code> example.</p>",
        "id": 193679302,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586638839
    },
    {
        "content": "<p>Well, if they are in the same binder group then you could use the syntax <code>(a b : Nat) ↦ a</code>, and if they are not then you could just right associate as in <code>(a : Nat) ↦ (b : Nat) ↦ a</code></p>",
        "id": 193684295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586646853
    },
    {
        "content": "<p>Yeah, looks fine and should even work out of the box with the above definition</p>",
        "id": 193701879,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586681241
    },
    {
        "content": "<p>where is the associativity getting declared?</p>",
        "id": 193701932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681314
    },
    {
        "content": "<p><code>term</code> is short for <code>term:0</code>, so it will eat any following binders and <code>\"↦\":1024</code></p>",
        "id": 193702011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586681420
    },
    {
        "content": "<p>yeah but it does that on the left too?</p>",
        "id": 193702023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681449
    },
    {
        "content": "<p>why isn't it <code>binder ↦ term : term</code></p>",
        "id": 193702034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681477
    },
    {
        "content": "<p>There is no real LHS. If you start a <code>term</code> syntax with <code>term</code>, the <code>syntax</code> macro recognizes the left recursion and refactors it into a trailing parser. The real parser is <code>\"↦\":1024 term</code>, it is triggered on the arrow.</p>",
        "id": 193702114,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586681569
    },
    {
        "content": "<p>so how does the LHS get parsed then?</p>",
        "id": 193702121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681595
    },
    {
        "content": "<p>it's not a term after all</p>",
        "id": 193702123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681603
    },
    {
        "content": "<p>unless you need it to conform to the term grammar anyway?</p>",
        "id": 193702126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681617
    },
    {
        "content": "<p>Since binders may contain arbitrary patterns, they are in fact parsed as terms. <code>(a : A) (b : B)</code> is an application of type annotations.</p>",
        "id": 193702132,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586681629
    },
    {
        "content": "<p>what about <code>{{a : A}}</code></p>",
        "id": 193702136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681640
    },
    {
        "content": "<p>that's not a valid term in lean 3 at least</p>",
        "id": 193702173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681650
    },
    {
        "content": "<p>Uh, I don't think we have strict implicits atm... not sure if there was a concious decision to remove them</p>",
        "id": 193702259,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586681790
    },
    {
        "content": "<p>what about <code>{a : A}</code>?</p>",
        "id": 193702268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681810
    },
    {
        "content": "<p>that's also not valid</p>",
        "id": 193702269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586681815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Lambda.20syntax.20in.20Lean.204/near/193702259\" title=\"#narrow/stream/113488-general/topic/Lambda.20syntax.20in.20Lean.204/near/193702259\">said</a>:</p>\n<blockquote>\n<p>Uh, I don't think we have strict implicits atm... not sure if there was a concious decision to remove them</p>\n</blockquote>\n<p>But those are crucial!</p>",
        "id": 193702666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586682438
    },
    {
        "content": "<p>Ah, my description was overly simplified. <code>term</code>s are valid binders, but the other annotations are there as well. So the syntax above is not quite complete yet.</p>",
        "id": 193703507,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586683954
    }
]