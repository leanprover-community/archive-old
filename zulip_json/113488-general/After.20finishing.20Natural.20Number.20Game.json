[
    {
        "content": "<p>Any recommendations for where to go after finishing the Natural Numbers Game? I suppose there's the Real Numbers Game (<a href=\"https://github.com/ImperialCollegeLondon/real-number-game\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/real-number-game\">https://github.com/ImperialCollegeLondon/real-number-game</a>) which would be good since I don't have any experience using Lean with the real numbers. Might be able to dig up some of my old undergrad problem sets from calculus and formalize those. I think my large-scale goal is to start formalizing results in quantum information processing.</p>",
        "id": 189918611,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1583518025
    },
    {
        "content": "<p>P.S. I'd also like to say the NNG turned out to be my favorite puzzle game of the past few years, despite the lack of fancy graphics or non-mathematical narrative motivation! Absolutely incredible, truly.</p>",
        "id": 189918719,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1583518091
    },
    {
        "content": "<p>rofl, that's really crazy. Thanks. Did you know that all of maths is a game like the natural number game? Lean has turned out to be my favourite puzzle game of the past few years. These other games like the real number game, the group theory game, the logic game (basic propositions, stuff like (P and Q) or (P and R) = P and (Q or R)), the integer game, ...) are all in half-written states because I'm currently teaching and dealing with admissions for a big PhD programme. Note that there is also plenty of potential for the natural number game 2, proving that every positive integer is uniquely a product of primes and so on. Even just stuff about odd and even numbers is quite fun. </p>\n<p>If you want to play the perfectoid space game, then <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/issues/33\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/issues/33\">here are about 30 levels</a>. But the maths involved is much more serious. It's just another thing on my pile of stuff to do (this is my area of research).</p>\n<p>There are some <a href=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\">maths challenges</a> here, which are short and sweet.</p>\n<p>Here are the example sheets from a short (8 hour) course I taught last term to 1st year maths undergrads: <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M40001_lean\">https://github.com/ImperialCollegeLondon/M40001_lean</a></p>\n<p>It seems to me that there is loads of potential but we just have to find the time to do it. There is someone coming to Imperial for a 4 month \"industrial placement\"(!) who will work on some more games.</p>",
        "id": 189919796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583518825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You should write this kind of thing on the last level of NNG (or the victory screen if you have one)</p>",
        "id": 189941547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583534117
    },
    {
        "content": "<p>When term is over I plan on fixing all the issues which have been reported; I'll add a note about this one.</p>",
        "id": 189941694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583534272
    },
    {
        "content": "<p>Andrew, can you read French? If yes then I have more levels for you.</p>",
        "id": 189975361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583596456
    },
    {
        "content": "<p>Sadly I cannot; my Canadian high school French education was fairly rudimentary!</p>",
        "id": 189978570,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1583601898
    },
    {
        "content": "<p>Surely (Lean French) &lt; (math French) &lt;&lt; (written French). :-)</p>",
        "id": 189979697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583603857
    },
    {
        "content": "<p>i.e. \"come on Patrick, please post the link anyway\" :-)</p>",
        "id": 189979763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583603978
    },
    {
        "content": "<p>Scott, the issue is the Lean files contain explanation in written French.</p>",
        "id": 189981595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583607220
    },
    {
        "content": "<p>I still put an archive for Kevin at <a href=\"https://www.math.u-psud.fr/~pmassot/math114.tar.bz2\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/math114.tar.bz2\">https://www.math.u-psud.fr/~pmassot/math114.tar.bz2</a>. These are all the Lean files I used in my 2020 lectures so far. Everything you need to look at is in <code>src</code>. The file numbered 0 does not contain any exercise, it was shown on day one to give an idea of what Lean looks like, proving an early real analysis lemma (remember students had one semester of real analysis before my classes). Every other file contains a mixture of explanations, worked out examples and exercises. The lectures notes (with more details than what I actually discuss in class are at <a href=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114\">https://www.math.u-psud.fr/~pmassot/enseignement/math114</a>. The file called <code>dm.lean</code> is something I asked them to do at home between files 03 and 04 (5 Lean exercises, including two they had to also write on paper). The file <code>anatole1.lean</code> is a special file I used last Friday on my student who did each of the other files in at most 15 minutes (it is not something I will cover with the other students).</p>",
        "id": 189981893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583607702
    },
    {
        "content": "<p>Is the student interested in doing any more Lean? What kind of maths are they interested in?</p>",
        "id": 189981949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583607781
    },
    {
        "content": "<p>My son this morning, playing the natural numbers game: \"Induction is cool. I like induction.\"</p>",
        "id": 189985970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583614704
    },
    {
        "content": "<p>I once said to Chris Hughes \"isn't it funny that kids learn addition when they're about 6 but don't learn induction until they're about 16\" and he said \"they learn to count before they learn to add\"</p>",
        "id": 189986045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583614835
    },
    {
        "content": "<p>Scott, how old is your son?</p>",
        "id": 189986575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583615766
    },
    {
        "content": "<p>He's 10</p>",
        "id": 189986704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583616080
    },
    {
        "content": "<p>Nice. I should do a French translation of that game in order to try it on my oldest children.</p>",
        "id": 189986754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583616153
    },
    {
        "content": "<p>Level 4 of multiplication would was pretty difficult for him.</p>",
        "id": 189987026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583616689
    },
    {
        "content": "<p>But he seems to be getting it. He's just done an induction on the wrong variable, and is chanting \"there's the annoying successor, how do I move the successor?!\"</p>",
        "id": 189987075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583616740
    },
    {
        "content": "<p>Okay, now Simon is teaching Mike Freedman how his proof of <code>zero_mul</code> worked.</p>",
        "id": 189988025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583618216
    },
    {
        "content": "<p>rofl</p>",
        "id": 189988046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583618263
    },
    {
        "content": "<p>I'll believe it only when I'll see Freedman here on Zulip <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 189988094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583618286
    },
    {
        "content": "<p>Mike was more impressed by Simon's proof of <code>mul_assoc</code> \"it's obvious, they're both cubes with sides a, b, and c\" than with <code>zero_mul</code>.</p>",
        "id": 189988283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583618658
    },
    {
        "content": "<p>He is not ready for formal proofs.</p>",
        "id": 189988299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583618696
    },
    {
        "content": "<p>(Mike I mean)</p>",
        "id": 189988303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583618703
    },
    {
        "content": "<p>The story about Simon is indeed more impressive than the standard analogue for commutativity.</p>",
        "id": 189988305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583618727
    },
    {
        "content": "<p>One can define addition and multiplication on <code>nat</code> in a completely different way, by first of all setting up a theory of cardinality of finite sets, and then defining addition to be \"cardinality of disjoint union\" and multiplication to be \"cardinality of product\". Then one really can give non-inductive proofs of things like <code>mul_comm</code> and <code>mul_assoc</code> of this form</p>",
        "id": 189988539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583619155
    },
    {
        "content": "<p>those exist in lean too, you know</p>",
        "id": 189989303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583620718
    },
    {
        "content": "<p>that's <code>cardinal.mul_assoc</code></p>",
        "id": 189989320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583620764
    },
    {
        "content": "<p>I’m curious about one design decision in the natural numbers game, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>. In the real world, we would carefully add @[simp] to each lemma as we go. I notice you don’t do this - in multiplication world all the lemmas about addition are available to simp, but for example in <code>add_mul</code>, simp can’t do <code>mul_zero</code>.</p>",
        "id": 190020153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583686646
    },
    {
        "content": "<p>I understand the desire to not make levels too easy too early.</p>",
        "id": 190020157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583686661
    },
    {
        "content": "<p>But on the other hand we need to show newcomers that proving in Lean is not _as_ tedious as it first appears, because the automation gets better and better as you go along.</p>",
        "id": 190020198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583686703
    },
    {
        "content": "<p>Oh -- that's just because I don't understand simp :-/</p>",
        "id": 190020200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686707
    },
    {
        "content": "<p>I understand <code>ring</code> so I got that working, but I didn't want to teach <code>simp</code> because I didn't understand it myself.</p>",
        "id": 190020206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686730
    },
    {
        "content": "<p>Doesn't it work eventually -- I think I can show a+b+c+d+e=e+d+c+b+a by simp at the end of it. I think you're suggesting we should start earlier.</p>",
        "id": 190020215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686768
    },
    {
        "content": "<p>(And indeed, the very idea that it’s important that the mathematician themselves improves the automation as they go along —- even if just by marking lemmas with @[simp] — May be worth getting across to new users.)</p>",
        "id": 190020222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583686773
    },
    {
        "content": "<p>yeah — you do point out that simp can do these things</p>",
        "id": 190020233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583686801
    },
    {
        "content": "<p>but I’m wondering what the right pedagogical moment is for “it’s important that you make simp more powerful as you go!”</p>",
        "id": 190020290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583686855
    },
    {
        "content": "<p>Oh dear. “Lean is busy” got stuck in the NNG, and so eventually I suggested to Simon that he reloads the page. That worked, but he’s really sad that all his proofs in earlier levels got lost. :-(</p>",
        "id": 190020512,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583687281
    },
    {
        "content": "<p>We really need some more energy put into this game, including some way to store data. People really like it so it would be worth the effort.</p>",
        "id": 190021306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583688698
    },
    {
        "content": "<p>Regarding the <code>simp</code> discussion: it's not clear to me that this game is meant to teach Lean properly. I understand it as one possible fun introduction, but we don't expect people to start writing serious Lean code right after completing the game.</p>",
        "id": 190021361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583688817
    },
    {
        "content": "<p>I think our first year undergraduates would also like the group theory game (which might appear within the next few months).</p>",
        "id": 190021655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583689406
    },
    {
        "content": "<p>How does <code>simp</code> work exactly? Does lean do some kind of breadth-first search applying all theorems tagged with <code>[simp]</code> to the goal, trying to maximize a similarity score?</p>",
        "id": 190022073,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1583690227
    },
    {
        "content": "<p>No. <code>simp</code> traverses the expression, starting at the deepest parts of the expression, and tries to transform subexpressions using the simp lemmas.</p>",
        "id": 190022078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690271
    },
    {
        "content": "<p>It is entirely undirected --- if a simp lemma can fire, it will.</p>",
        "id": 190022119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690293
    },
    {
        "content": "<p>(The <code>rewrite_search</code> tactic, that Keeley and I wrote a while back back haven't ported to mathlib, does do edit distance based scoring of rewrites.)</p>",
        "id": 190022126,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690331
    }
]