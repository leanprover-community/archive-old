[
    {
        "content": "<p>I'm looking guidance on when it is a good idea to use the <code>invertible</code> class. I am concerned that naive usage can set things up for the dreaded <code>motive is not type correct</code> error.</p>",
        "id": 201482291,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592666942
    },
    {
        "content": "<p>Specifically the \"function\" defined by \"a ↦ ⅟a\" pulls data from a typeclass instance and so is not really a function. I encountered this a couple of hours ago when I was considering modifying <code>matrix.nonsing_inv</code> to use <code>invertible</code> so that it was not necessary for the base type to carry a <code>has_inv</code> instance.</p>",
        "id": 201482359,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667033
    },
    {
        "content": "<p>Here is the example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">invertible</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">section</span> <span class=\"n\">bad_invertible</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Bad definition: pulls data from a typeclass instance. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">nonsing_inv&#39;</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"err\">⅟</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">adjugate</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inverses_are_unique</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonsing_inv&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonsing_inv&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, motive is not type correct</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">bad_invertible</span>\n<span class=\"kn\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 201482390,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667096
    },
    {
        "content": "<p>Now the above is not a problem in the sense that <code>inverses_are_unique</code> is provable by other means but it still seems like <code>nonsing_inv'</code> would be a pretty horrible definition to make.</p>",
        "id": 201482518,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667259
    },
    {
        "content": "<p>So I had a quick look for usage of <code>invertible</code> and I see that <code>equivariant_projection</code> in <code>representation_theory.maschke</code> uses it and, I think, will one day trigger the <code>motive is not type correct</code> error.</p>",
        "id": 201482540,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667327
    },
    {
        "content": "<p>Am I missing the obvious and somehow this is all fine? Do others feel like <code>invertible</code> should come with guidance to stop it being a footgun?</p>",
        "id": 201482613,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/Concerns.20about.20.60invertible.60.20class/near/201482359\">said</a>:</p>\n<blockquote>\n<p>Specifically the \"function\" defined by \"a ↦ ⅟a\" pulls data from a typeclass instance and so is not really a function. </p>\n</blockquote>\n<p>i'm confused. isn't <code>*</code> a function which takes data from a typeclass, namely <code>has_mul</code>? does your objection also apply to this?</p>",
        "id": 201482656,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592667497
    },
    {
        "content": "<p>That same thought is in the back of my mind. I haven't bottomed out on it yet.</p>",
        "id": 201482662,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667520
    },
    {
        "content": "<p>what do you want to be able to do with <code>invertible</code> that you can't \"because it's not really a function\"? (probably i will know the answer to this question after poking at your example for a few minutes)</p>",
        "id": 201482671,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592667553
    },
    {
        "content": "<p>I don't think this is the indended use of the <code>invertible</code> typeclass: it is only there to provide (once and for all) invertibility of a few fixed elements in a ring. If you want to discuss invertibility of variables or complicated objects, <code>is_unit</code> should be used instead (if I understand correctly what the doc in <code>invertible.lean</code> says).</p>",
        "id": 201482677,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592667585
    },
    {
        "content": "<p>Aha, so perhaps I should just be reading the docs!</p>",
        "id": 201482724,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667618
    },
    {
        "content": "<p>OK I see that now. I still think the fact that it has crept into <code>equivariant_projection</code> indicates there is potential for future problems.</p>",
        "id": 201482741,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592667663
    },
    {
        "content": "<p>I think the main difference with <code>has_mul</code> (and this also goes for other things like <code>is_ring_hom</code>) is that <code>invertible</code> has a parameter which is a value, for which you are likely to want to reason about its equality to other values, while <code>has_mul</code> takes a type</p>",
        "id": 201482743,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592667664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Concerns.20about.20.60invertible.60.20class/near/201482671\">said</a>:</p>\n<blockquote>\n<p>what do you want to be able to do with <code>invertible</code> that you can't \"because it's not really a function\"? (probably i will know the answer to this question after poking at your example for a few minutes)</p>\n</blockquote>\n<p>Sorry I missed this. The <code>rw h</code> in my example is the best example I can give.</p>\n<p>In any case, I'm happy to leave this now. I recognise that there is already documentation not to use <code>invertible</code> in the way that I did in my example.</p>",
        "id": 201483111,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592668176
    },
    {
        "content": "<p>As far as I understand, non-typeclass version of <code>⅟(A.det)</code> is <code>def nonsing_inv' (A : matrix n n R) {u : units R} (hu : (u : R) = A.det) := ((u⁻¹ : units R) : R) • adjugate A</code></p>",
        "id": 201486187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592671838
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I think that's exactly what Sebastian was hinting me toward.</p>",
        "id": 201489978,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592676845
    },
    {
        "content": "<p>The only difference between these two approaches is that <code>u : units R</code> shows the problem explicitly. Note that while <code>rw</code> doesn't work <code>dsimp [nonsing_inv']; simp only [h]</code> should work.</p>",
        "id": 201490084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592677012
    },
    {
        "content": "<p>Yes absolutely, I see that.</p>",
        "id": 201490099,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592677033
    },
    {
        "content": "<p>The fact that <code>hu</code> appears an explicit argument makes it clear that there is additional data to handle.</p>",
        "id": 201490141,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592677082
    },
    {
        "content": "<p>I have a little time now so I might see if it looks like it is worth changing the definition of <code>matrix.nonsing_inv</code> along these lines. It would suit something else I'd like to do.</p>",
        "id": 201490202,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592677165
    },
    {
        "content": "<p>What's wrong with <code>invertible</code> definition + <code>subsingleton</code> instance? AFAIR, this should be enough for <code>simp</code> to be able to rewrite <code>h : A = B</code>.</p>",
        "id": 201490279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592677261
    },
    {
        "content": "<p>Perhaps nothing: I don't know anything about <code>subsingleton</code>s!</p>",
        "id": 201490350,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592677323
    },
    {
        "content": "<p><code>[subsingleton α]</code> means that <code>α</code> has at most one element.</p>",
        "id": 201490383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592677380
    },
    {
        "content": "<p>I see, and from what you're saying <code>simp</code> will be smart enough to make use of this. However would <code>rw</code> still trigger the <code>rewrite tactic failed, motive is not type correct</code> error?</p>",
        "id": 201490424,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592677442
    },
    {
        "content": "<p>AFAIR, <code>simp</code> can unify two <code>subsingleton</code>s automatically. If not, then <code>@[congr] lemma nonsing_inv'_congr (h : A = B) : nonsing_inv' A = nonsing_inv' B</code> should help.</p>",
        "id": 201490455,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592677449
    },
    {
        "content": "<p>Yes, <code>rw</code> won't work. For me the general rule is \"if <code>rw</code> or <code>simp</code> doesn't work, try the other one\".</p>",
        "id": 201490469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592677505
    },
    {
        "content": "<p>Understood, this is really a great tutorial you are giving me. Thank you. I'm still reluctant to design something that will cause problems for <code>rw</code> though. Do you think I'm being too conservative?</p>",
        "id": 201490478,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592677548
    },
    {
        "content": "<p>Admittedly I haven't tried it yet but the approach via <code>unit</code>s seems more attractive.</p>",
        "id": 201490535,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592677630
    },
    {
        "content": "<p>How are you going to use this definition? If you want a user to explicitly prove that <code>det A</code> is invertible, then <code>(u : units R)</code> is a good approach. If you want Lean to automatically figure out that <code>det A</code> is invertible, then <code>inv_of</code> is better.</p>\n<p>If you use <code>(u : units R)</code>, then you'll need <code>@[congr] lemma nonsing_inv'_congr {A B : matrix n n R} (h : A = B) {uA uB : units R} {hA : (uA : R) = det A} {hB : (uB : R) = det B} : nonsing_inv' A hA = nonsing_inv' B hB</code>.</p>",
        "id": 201490717,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592677891
    },
    {
        "content": "<p>This should help <code>simp</code> go from <code>nonsing_inv' A hA = nonsing_inv' B hB</code> to <code>A = B</code>, not <code>A = B</code> and <code>uA = uB</code>.</p>",
        "id": 201490768,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592677928
    },
    {
        "content": "<p>I see, it's great to know that the <code>congr</code> decorator can make Lean consume a proof that inverses are unique in this way.</p>",
        "id": 201490789,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592678008
    },
    {
        "content": "<p>Another question is whether you want it to be computable. If not, then you can use <code>hA : is_unit (det A)</code>, and get <code>u</code> from <code>classical.choice</code>.</p>",
        "id": 201490834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592678045
    },
    {
        "content": "<p>I don't care about computability.</p>",
        "id": 201490837,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592678060
    },
    {
        "content": "<p>Note that <code>@[congr]</code> is used by <code>simp</code> but not <code>congr</code> and <code>convert</code>.</p>",
        "id": 201490843,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592678082
    },
    {
        "content": "<p>I plan to have the user provide proof that <code>A.det</code> is invertible so I guess I'll try the approach via <code>unit</code>s.  I guess the advantage of the approach via <code>is_unit</code> over raw <code>unit</code> is that the user need only provide a single argument?</p>",
        "id": 201490922,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592678226
    },
    {
        "content": "<p>Hmm, well I can imagine other differences.</p>",
        "id": 201490932,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592678256
    },
    {
        "content": "<p>The theory of <code>units</code> has more <code>simp</code> lemmas etc.</p>",
        "id": 201491187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592678707
    },
    {
        "content": "<p>I did see that <code>is_unit</code> is basically just a wrapper on top of it. I'm currently tinkering to see if I can get something sane with just <code>unit</code>.</p>",
        "id": 201491231,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592678770
    },
    {
        "content": "<p>simp_rw will avoid the motive issue</p>",
        "id": 201516138,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592713699
    },
    {
        "content": "<p>I explored various approaches for <code>nonsing_inv</code> and eventually settled on <a href=\"https://github.com/leanprover-community/mathlib/pull/3136\">https://github.com/leanprover-community/mathlib/pull/3136</a></p>",
        "id": 201616109,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1592837815
    }
]