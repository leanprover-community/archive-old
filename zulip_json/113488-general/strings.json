[
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"c\">/-</span><span class=\"cm\"> 4084 &#39;0&#39;s -/</span>\n</pre></div>\n\n\n<p>But not if you make it 4085.</p>\n<div class=\"codehilite\"><pre><span></span>deep recursion was detected at &#39;replace&#39; (potential solution: increase stack space in your system)\n</pre></div>",
        "id": 190270439,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583925216
    },
    {
        "content": "<p>Do we really have an effective 4084 character limit on strings?</p>",
        "id": 190270578,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583925320
    },
    {
        "content": "<p>We seem to be able to process and trace longer strings. But not to use them expanded in definitions.</p>",
        "id": 190270662,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583925394
    },
    {
        "content": "<p>I don't think it's specific about strings. There's a bound on the stack size. By looking at that message, it's probably 4 kb</p>",
        "id": 190270922,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583925622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/strings/near/190270578\" title=\"#narrow/stream/113488-general/topic/strings/near/190270578\">said</a>:</p>\n<blockquote>\n<p>Do we really have an effective 4084 character limit on strings?</p>\n</blockquote>\n<p>Yes, for various reasons.  If you write the string literal literally, then it is a deeply nested term, lots of stuff will break on that.  If you're clever and write <code>\"3000chars\" ++ \"3000chars\"</code> then the VM compiler will fail <del>because there are 6000 branches in the bytecode.  (Each character is checked to be a valid Unicode codepoint.)</del>  EDIT: wrong theory, but the stack usage of the optimization pass is still proportional to the function size.</p>",
        "id": 190271353,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583925980
    },
    {
        "content": "<p>Fixed in Lean 4</p>",
        "id": 190271703,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583926299
    }
]