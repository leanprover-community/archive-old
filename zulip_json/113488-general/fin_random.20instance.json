[
    {
        "content": "<p>The following code runs successfully, but fails if <code>1000</code> is replaced by <code>10000</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.random.basic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rnd_comp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">random_gen</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">rand_g</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1000</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">obviously</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">rand.random</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1000</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">rnd_comp</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">trace_rnd</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_generator</span><span class=\"o\">,</span>\n  <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.run_rand</span> <span class=\"bp\">$</span> <span class=\"n\">rnd_comp</span> <span class=\"n\">std_gen</span> <span class=\"o\">[]</span> <span class=\"mi\">30</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1000</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">res</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">trace_rnd</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n</code></pre></div>\n<p>In the latter case, the <code>random (fin 10000)</code> instance from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_random\">docs#fin_random</a> is no longer found, despite <code>h : 0 &lt; 10000</code> being available in the  context.<br>\nAs I do not know how type class resolution works, I thought I'll better report this. (I can, however, easily work around it.)</p>",
        "id": 282127712,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652371027
    },
    {
        "content": "<p>What you need is <code>fact (0 &lt; 10000)</code> in the type class context. I'm not sure how to cajole the equation compiler into doing it right.</p>",
        "id": 282131671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652372305
    },
    {
        "content": "<p>There is a global instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_pos''\">docs#succ_pos''</a> that in principle should provide <code>fact (0 &lt; 10000)</code> but I guess the elaborator gives up before doing enough unfolding to see this</p>",
        "id": 282131856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652372394
    },
    {
        "content": "<p>I don't know how to get the <code>fact</code>, but the hypothesis is there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">random_gen</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rnd_comp</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">rand_g</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10000</span><span class=\"o\">)),</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10000</span><span class=\"o\">),</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10000</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">random</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10000</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282132531,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652372651
    },
    {
        "content": "<p>Oh, I see.<br>\nSo the <code>fact</code> comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_pos''\">docs#succ_pos''</a>, not from the local context</p>",
        "id": 282132621,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652372703
    },
    {
        "content": "<p>you can also use <code>nat.succ 9999</code> instead of <code>10000</code></p>",
        "id": 282132660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652372719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/fin_random.20instance/near/282132660\">said</a>:</p>\n<blockquote>\n<p>you can also use <code>nat.succ 9999</code> instead of <code>10000</code></p>\n</blockquote>\n<p>yes, that works :D</p>",
        "id": 282132995,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652372857
    },
    {
        "content": "<p>thank you both!</p>",
        "id": 282133005,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652372863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rnd_comp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">random_gen</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">rand_g</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10000</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">fact.mk</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rand.random</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10000</span><span class=\"o\">),</span>\n  <span class=\"n\">rnd_comp</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 282133188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652372944
    },
    {
        "content": "<p>very elegant <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  thanks!</p>",
        "id": 282133467,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652373072
    }
]