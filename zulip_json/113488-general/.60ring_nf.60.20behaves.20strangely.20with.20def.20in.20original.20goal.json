[
    {
        "content": "<p>I'd have thought that the following two examples ought to demonstrate the same behaviour (the goals are defeq), but <code>ring_nf</code> solves one but not the other.  Is this expected behaviour?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"c1\">-- fails to do anything</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263335386,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638383384
    },
    {
        "content": "<p>Note that <code>ring</code> solves both goals.</p>",
        "id": 263335410,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638383393
    },
    {
        "content": "<p>The first one uses <code>int.semiring</code> and then a bunch of nonsense (<code>semiring.to_non_assoc_semiring</code>, <code>non_assoc_semiring.to_non_unital_non_assoc_semiring</code> etc etc) to get to addition; the second one just uses <code>int.has_add</code>. You're not right that the first <code>ring_nf</code> fails to do anything -- it gets rid of all the non_assoc_semiring stuff and changes it to <code>int.has_add</code>: you can tell that it does actually do something because if you apply <code>ring_nf</code> again it solves the goal ;-)</p>",
        "id": 263337137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638384167
    },
    {
        "content": "<p>What?? <code>ring_nf</code> is not idempotent?  Is that expected behaviour?</p>",
        "id": 263337745,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638384429
    },
    {
        "content": "<p>I think that <code>ring</code> isn't either!</p>",
        "id": 263339438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638385060
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/ring.20not.20idempotent/near/231077877\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/ring.20not.20idempotent/near/231077877</a></p>",
        "id": 263339680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638385142
    },
    {
        "content": "<p>Aah, it seems that <code>ring_nf</code> was born for this reason. Maybe we need <code>ring_nf_nf</code>?</p>",
        "id": 263340052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638385246
    },
    {
        "content": "<p>most likely this is an instantiated metavariable problem</p>",
        "id": 263340334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638385330
    },
    {
        "content": "<p>actually it's a typeclass problem. Take a look at the goal before and after <code>ring_nf</code> with <code>set_option pp.all</code></p>",
        "id": 263341031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638385587
    },
    {
        "content": "<p>ah, kevin already said this</p>",
        "id": 263341284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638385695
    },
    {
        "content": "<p>Another example I also just found in the last 10 minutes:  what is the typeclass issue here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263341472,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638385783
    },
    {
        "content": "<p>interestingly, <code>ring_nf raw</code> works</p>",
        "id": 263341744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638385897
    },
    {
        "content": "<p>the only difference being that it doesn't postprocess the goal to look nice after</p>",
        "id": 263341861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638385935
    },
    {
        "content": "<p>In both examples, <code>conv_lhs { ring_nf }</code> works as expected, so I think <code>simp</code> is somehow to blame</p>",
        "id": 263342155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638386059
    },
    {
        "content": "<p>Another example:  I've run <code>ring_nf</code> on both hypothesis and goal until <code>ring_nf</code> gives errors on future applications, saying there's nothing more to do.  But the \"normal forms\" produced are different.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263344583,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638386938
    },
    {
        "content": "<p>that is expected behavior</p>",
        "id": 263345461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638387254
    },
    {
        "content": "<p>unless you do them in the same invocation you might get different atom ordering</p>",
        "id": 263345507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638387274
    },
    {
        "content": "<p>but <code>ring_nf at hxy |-</code> should work and it doesn't. A fix is en route</p>",
        "id": 263346594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638387683
    }
]