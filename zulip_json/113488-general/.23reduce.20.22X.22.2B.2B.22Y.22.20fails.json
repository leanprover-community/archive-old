[
    {
        "content": "<p>Evaluating this expression in Lean (VSCode is what I'm using) hangs for a while then reports deep recursion detected, increase stack space. Not very undergraduate-student-friendly. Bug or feature?</p>",
        "id": 133264218,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1535985470
    },
    {
        "content": "<p>As usual, <code>#eval</code> succeeds here</p>",
        "id": 133264296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535985538
    },
    {
        "content": "<p>Why this failure?</p>",
        "id": 133264323,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1535985598
    },
    {
        "content": "<p>Also note that #eval also fails in ways guaranteed to be confusing to new students. Try this (posted previously).</p>\n<p>theorem t : true := true.intro<br>\n#check t<br>\n#eval t</p>\n<p>The real question then, I suppose, is by what simple rule should a new student choose between #eval and #reduce?</p>\n<p>And for the curious student, why do they fail in cases where on the face of it, it looks like they might be expected to work?</p>",
        "id": 133265394,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1535986983
    },
    {
        "content": "<p>Even just <code>#reduce 'X'</code> is asking the kernel to normalize a proof of <code>88 &lt; 55296</code>. This normalizes to 55207 nested applications of <code>nat.less_than_or_equal.step</code>. And this is a subproblem of what you're asking.</p>",
        "id": 133265406,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535987008
    },
    {
        "content": "<p><code>#eval</code> is useful for computing values, it will ignore <code>Prop</code>-valued terms.</p>",
        "id": 133265477,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535987105
    },
    {
        "content": "<p>My simple rule is to choose <code>#eval</code></p>",
        "id": 133266004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535987873
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 133266225,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1535988136
    }
]