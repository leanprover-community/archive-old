[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span> <span class=\"n\">has_top</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">discrete_convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">top.converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>but I get an error <code>error: invalid field notation, type is not of the form (C ...) where C is a constant</code>. Even if I write <code>converges top l x</code>, I still get an error. In order to pacify Lean I have to write <code>@converges a top l x</code>. What is the problem here? Is it because <code>top</code> is not a \"constant\"?</p>",
        "id": 265350015,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639770120
    },
    {
        "content": "<p>Does it work if you write <code>(⊤ : convergence_space a).converges</code>?</p>",
        "id": 265350848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639770299
    },
    {
        "content": "<p>Aah, <code>(foo : convergence_space a)</code> is not an explicit argument of <code>convergence_space.convergence</code> (You can <code>#check</code> it to see the type signature). So it will not work.</p>",
        "id": 265351066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639770339
    },
    {
        "content": "<p>If I switch to a structure, then <code>converges top l x</code> works.</p>",
        "id": 265351344,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639770469
    },
    {
        "content": "<p>But <code>top.converges</code> still doesn't work.</p>",
        "id": 265351360,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639770481
    },
    {
        "content": "<p>Lean has no way of knowing the type of <code>top</code> just by itself</p>",
        "id": 265351518,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639770568
    },
    {
        "content": "<p>Many types have a <code>has_top</code> instance. Even better, in you case <code>convergence_space A</code> has a <code>has_top</code> instance for every <code>A</code>, so how should lean know what <code>A</code> is if you only write <code>top.converges</code>?</p>",
        "id": 265352271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639770934
    },
    {
        "content": "<p>The reason <code>converges top l x</code> works is because lean is able to infer <code>A</code> from <code>l</code> and/or <code>x</code>.</p>",
        "id": 265352370,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639770970
    },
    {
        "content": "<p>Isn't <code>top.converges l x</code> just sugar for <code>converges top l x</code> though?</p>",
        "id": 265352493,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639771048
    },
    {
        "content": "<p>In my mind, they should behave the same since it's just syntax sugar.</p>",
        "id": 265352531,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639771075
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span> <span class=\"n\">has_top</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">discrete_convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤;</span> <span class=\"n\">exact</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265352630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639771134
    },
    {
        "content": "<p>Take a look at the type of <code>converges</code> by using <code>#check converges</code></p>",
        "id": 265352663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639771162
    },
    {
        "content": "<p>I'm using <code>structure convergence_space</code> now and #check says <code>converges : convergence_space ?M_1 → filter ?M_1 → ?M_1 → Prop</code>.</p>",
        "id": 265353176,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639771303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20not.20working.20with.20top/near/265352493\">said</a>:</p>\n<blockquote>\n<p>Isn't <code>top.converges l x</code> just sugar for <code>converges top l x</code> though?</p>\n</blockquote>\n<p>Too a first approximation <code>X.converges l x</code> is sugar for <code>&lt;the type of X&gt;.converges X l x</code>. (In fact, <code>X</code> doesn't need to be the first explicit argument, in general.)</p>",
        "id": 265353444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639771464
    },
    {
        "content": "<p>So Lean needs to know the type of <code>X</code> before it can find the right declaration.</p>",
        "id": 265353477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639771481
    },
    {
        "content": "<p>If you have definitions <code>foo.quux</code> and <code>bar.quux</code>, and you write <code>X.quux</code>, what does it mean? It depends on the type of <code>X</code>...</p>",
        "id": 265353558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639771542
    },
    {
        "content": "<p>In theory, Lean cannot use <code>l</code> and <code>x</code> to figure this out, because it doesn't yet know to which declaration it is feeding them.</p>",
        "id": 265353708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639771585
    },
    {
        "content": "<p>I guess this is another gotcha that I have to keep in mind. Thanks guys.</p>",
        "id": 265354642,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639771918
    }
]