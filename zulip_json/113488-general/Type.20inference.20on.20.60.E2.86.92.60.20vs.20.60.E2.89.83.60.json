[
    {
        "content": "<p>Why is lean able to infer types for the expression using <code>f</code> (<code>→</code>) but not <code>g</code> (<code>≃</code>)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wrapped</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">wrapped</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">wrapped</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wrapped</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>   <span class=\"c1\">-- ok, lean works out that I mean</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wrapped</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>   <span class=\"c1\">-- this, which also works</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wrapped</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>   <span class=\"c1\">-- fail - why can't lean work out that I mean</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wrapped</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"c1\">-- this, which doesn't fail</span>\n</code></pre></div>\n\n<p>(this makes <a href=\"https://github.com/leanprover-community/mathlib/issues/4346\">#4346</a> fail)</p>",
        "id": 211922501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601564024
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wrapped</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 211924230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564688
    },
    {
        "content": "<p>It must be something about how lean decides to coerce a function</p>",
        "id": 211924361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564750
    },
    {
        "content": "<p>My guess is that it sees <code>n</code> which has type <code>nat</code> and things \"okay, <code>g</code> should be a function on <code>nat</code>\" and then it doesn't know what to do with the <code>x</code> which is a real number.</p>",
        "id": 211924486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564785
    },
    {
        "content": "<p>For <code>≃</code> the elaborator has to search for a <code>has_coe_to_fun</code> instance for <code>equiv</code>. It has something to do with that, not sure of the precise details.</p>",
        "id": 211924506,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1601564794
    },
    {
        "content": "<p>Once it finds the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_fun\">docs#has_coe_to_fun</a> instance, shouldn't it discover that <code>g</code> coerces to <code>α → wrapped α</code>, and apply the same rules as <code>f</code>?</p>",
        "id": 211924610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601564845
    },
    {
        "content": "<p>But it sees <code>n</code>first.</p>",
        "id": 211924635,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564857
    },
    {
        "content": "<p>So I imagine it thinks <code>g</code> should be a function on <code>nat</code>.</p>",
        "id": 211924660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564869
    },
    {
        "content": "<p>type inference is outside in, isn't it?</p>",
        "id": 211924785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601564909
    },
    {
        "content": "<p>For example both </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>work</p>",
        "id": 211924801,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564913
    },
    {
        "content": "<p>Yeah, but I think this means that it would look for a coercion of <code>g</code> to a function from <code>nat</code> to <code>wrapped \\R</code>.</p>",
        "id": 211924906,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564958
    },
    {
        "content": "<p>But honestly I don't really know the details of how this stuff works. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is probably the person to ask.</p>",
        "id": 211924941,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601564977
    },
    {
        "content": "<p>But that's not how the API of <code>has_coe_to_fun</code> looks  - it's not like <code>has_coe</code> where there's a target type too - <code>has_coe_to_fun.F</code> specifies the type once it has been found for <code>g</code></p>",
        "id": 211925305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601565086
    },
    {
        "content": "<p>So the error under the <code>g</code> in your example says: <code>term has type wrapped \\N but it is expected to have type wrapped \\R</code>. So this makes me think that it sees <code>n</code>, and finds the coercion of <code>g</code>to <code>\\a \\to wrapped \\a</code>, but fails because you explicitly told it to have type <code>wrapped \\R</code>.</p>",
        "id": 211925747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601565227
    },
    {
        "content": "<p>There is also an error under <code>*</code> because it doesn't know how to handle the coercion from <code>n</code>to <code>\\R</code>.</p>",
        "id": 211925909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601565281
    },
    {
        "content": "<p>If you look at the order of the errors in the output log, the <code>*</code> error comes first</p>",
        "id": 211925942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601565293
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wrapped</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 211926050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601565336
    },
    {
        "content": "<p>As does reversing the order of the multiply</p>",
        "id": 211926104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601565359
    },
    {
        "content": "<p>Also this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">$</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 211926171,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601565370
    },
    {
        "content": "<p>Thanks for suggesting <code>↑</code>, that seems unobtrusive enough to solve my problem. Would still like to hear from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> why things are the way that they are.</p>",
        "id": 211926567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601565530
    }
]