[
    {
        "content": "<p>Hi, what <code>cc</code> tactic can do?</p>",
        "id": 186198597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579623426
    },
    {
        "content": "<p>Docs say \"Tries to prove the main goal using congruence closure.\"</p>",
        "id": 186198672,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579623466
    },
    {
        "content": "<p>But no examples</p>",
        "id": 186198775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579623508
    },
    {
        "content": "<p>Basically it can reason about equality</p>",
        "id": 186199174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579623735
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#cc-congruence-closure\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#cc-congruence-closure\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#cc-congruence-closure</a></p>",
        "id": 186200213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579624309
    },
    {
        "content": "<p>(or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc%20(congruence%20closure)\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc%20(congruence%20closure)\">https://leanprover-community.github.io/mathlib_docs/tactics.html#cc%20(congruence%20closure)</a> )</p>",
        "id": 186201283,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1579624881
    },
    {
        "content": "<p>I've also grep'd for <code>cc</code> in whatever file I currently have open to give you a practical example. These are the kinds of things I use it for normally.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">l₂h</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l₂h</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">eq₁</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">py</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">hd</span>\n<span class=\"err\">⊢</span> <span class=\"n\">py</span> <span class=\"bp\">=</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>I am not sure whether it's an overkill for these but there you go - I use it to show equality \"through\" structures.</p>",
        "id": 186201584,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1579625047
    },
    {
        "content": "<p><code>cc</code> can also discharge some otherwise gnarly heterogeneous equality goals</p>",
        "id": 186202147,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1579625381
    },
    {
        "content": "<p>both of those are <code>cases, refl</code> for me</p>",
        "id": 186230960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579642820
    }
]