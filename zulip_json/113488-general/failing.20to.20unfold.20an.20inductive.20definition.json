[
    {
        "content": "<p>I'm trying to prove</p>\n<div class=\"codehilite\"><pre><span></span>import data.list.basic\n\nvariable (α : Type)\nvariable [decidable_eq α]\n\nopen list\n\n@[simp] theorem count_bag_inter {a : α} :\n  ∀ {l₁ l₂ : list α}, count a (l₁.bag_inter l₂) = min (count a l₁) (count a l₂)\n| []        l₂ := by simp\n| l₁        [] := by simp\n| (h :: l₁) l₂ :=\nbegin\n  dsimp [list.bag_inter], -- succeeds but does nothing?\n  sorry\nend\n</pre></div>\n\n\n<p>but can't seem to get access to the interesting inductive case of the definition of <code>list.bag_inter</code>. What am I meant to be doing here?</p>",
        "id": 159248463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550961306
    },
    {
        "content": "<p>For reference, <code>list.bag_inter</code> is defined as</p>\n<div class=\"codehilite\"><pre><span></span>protected def bag_inter {α} [decidable_eq α] : list α → list α → list α\n| []      _   := []\n| _       []  := []\n| (a::l₁) l₂  := if a ∈ l₂ then a :: bag_inter l₁ (l₂.erase a) else bag_inter l₁ l₂\n</pre></div>\n\n\n<p>in core.</p>",
        "id": 159248471,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550961328
    },
    {
        "content": "<p>What do I import to get count?</p>",
        "id": 159248832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550961871
    },
    {
        "content": "<p>Oh -- maybe I have to open something? List?</p>",
        "id": 159248833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550961884
    },
    {
        "content": "<p>I can't get your code to run :-(</p>",
        "id": 159248849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550961949
    },
    {
        "content": "<p>Sorry, MWE almost there.</p>",
        "id": 159248904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550962005
    },
    {
        "content": "<p>Okay, I've updated the code above to include imports and variables.</p>",
        "id": 159248920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550962038
    },
    {
        "content": "<p><code>#print prefix list.bag_inter</code> reminds us that Lean still does the nil/cons case split on l2 in the a::l1 case when defining bag_inter</p>",
        "id": 159249090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550962359
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">bag_inter</span><span class=\"o\">],</span> <span class=\"c1\">-- now does something</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159249102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550962416
    },
    {
        "content": "<p>[PS I'm sorry, I'm so rubbish if I can't get the code to run. I know lots of people can do this sort of question in their heads but I can't. I was missing the decidable equality]</p>",
        "id": 159249160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550962510
    },
    {
        "content": "<p>ah, cool. Thanks! I didn't know about <code>#print prefix</code>.</p>",
        "id": 159249161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550962529
    },
    {
        "content": "<p><code>dsimp [list.bag_inter]</code> I think attempts to simplify using the equation lemmas for <code>list.bag_inter</code>. I used to think it was just magic, but Lean does not do magic. To see the equation lemmas I always use <code>#print prefix</code>.</p>",
        "id": 159249208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550962605
    },
    {
        "content": "<p>And when you start looking at equation lemmas you learn random stuff like \"even though you defined your function using three cases, Lean internally compiled it up as four cases\"</p>",
        "id": 159249219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550962642
    }
]