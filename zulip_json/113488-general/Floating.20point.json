[
    {
        "content": "<p>Does Lean have any support for floating point? Just for computation, not necessarily reasoning?</p>",
        "id": 126891715,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526935571
    },
    {
        "content": "<p>there's a preliminary floating point implementation in mathlib, but as i'm sure you know, there's way less to reason about with that vs the rational numbers</p>",
        "id": 126892277,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526936404
    },
    {
        "content": "<p>you'll want to ask <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> more about that</p>",
        "id": 126892298,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526936426
    },
    {
        "content": "<p>Oh, neat: <a href=\"https://github.com/leanprover/mathlib/blob/master/data/fp/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/fp/basic.lean\">https://github.com/leanprover/mathlib/blob/master/data/fp/basic.lean</a><br>\nThanks for pointing that out to me!<br>\nUnfortunately, I was looking for something that just reduced to underlying floating point computation, so I'd have things like <code>log</code> there. Maybe I can somehow use the FFI?</p>",
        "id": 126892439,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526936630
    },
    {
        "content": "<p>uh, there's an FFI? the API in <code>lean/src/api</code> is for external C++ programs to call</p>",
        "id": 126892589,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526936795
    },
    {
        "content": "<p>unfortunately in this case if you really need floats in a theorem prover Coq is the best bet for now...</p>",
        "id": 126892613,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526936839
    },
    {
        "content": "<p>Well, actually, in Coq, I'd just write the program on reals and then extract the code to floating point</p>",
        "id": 126893399,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526937966
    },
    {
        "content": "<p>I'm hoping Lean 4 really improves in that regard. I can't use Lean for a lot of math-type things because it doesn't have a fast float/rational</p>",
        "id": 126893511,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526938186
    },
    {
        "content": "<p>even if proving correctness with IEEE floats is a gigantic pain, handwaving and going from real to float is good enough, as you said</p>",
        "id": 126893576,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526938260
    },
    {
        "content": "<p>but one of the bigger goals for the next version of Lean is better support for program extraction and a C++ FFI (I think), so I'm optimistic</p>",
        "id": 126893640,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526938337
    },
    {
        "content": "<p>This is a compilation issue. Lean would need native support for floating point numbers. I think this is coming with the Lean 4 compiler.</p>",
        "id": 126898716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526946487
    },
    {
        "content": "<p>By the way there's nothing in principle stopping us from having <code>log</code> available on floats, in fact once the rounding is done right pretty much all the functions have the same definition in terms of their real counterparts - apply function, round, special behavior at inf and nan.</p>",
        "id": 126900085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526949591
    },
    {
        "content": "<p>(Although I recall hearing that some IEEE functions are impossible to round correctly, i.e. the spec requires solving an undecidable problem.)</p>",
        "id": 126900134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526949653
    }
]