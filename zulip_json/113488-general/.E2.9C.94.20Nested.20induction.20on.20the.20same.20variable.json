[
    {
        "content": "<p>Reading this thread: <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/.E2.9C.94.20Lucy\">#new members &gt; ✔ Lucy</a> I see how I can do nested induction on two separated variables by generalizing the second.  However I've come across a place where I would like to do nested induction on <em>the same</em> variable.  Here's my code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rev_rev</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span><span class=\"o\">{</span>\n<span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"bp\">;</span><span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">conv</span><span class=\"o\">{</span>\n  <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span><span class=\"bp\">←</span><span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">induction</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"n\">z_h</span> <span class=\"n\">z_tl</span> <span class=\"n\">z_ih</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>So here I do induction once, handle the base case do a bit of manipulation on the recursive case, at this point I have a goal I absolutely can solve without the inductive hypothesis (I've proven it as a lemma just fine):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">z</span> <span class=\"bp\">++</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"o\">[])</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is just a theorem so it should be ok.  The issue is I need another induction. However when I apply induction like above I get the same issue as in the linked thread.  <code>z_ih</code> requires something I don't have. </p>\n<p>Generalizing doesn't seem to work in this case, I've tried generalizing both <code>z</code> and <code>s</code> and then a couple of random things for good measure and all of them gave me errors.  That being said I've read the first thread a couple times and I still don't get why induction does this thing.  I find it a little strange.</p>\n<p>Is there some way to do nested induction like this?</p>",
        "id": 256949513,
        "sender_full_name": "É Olive",
        "timestamp": 1633866973
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 256949638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Nested.20induction.20on.20the.20same.20variable/near/256949638\">said</a>:</p>\n<blockquote>\n<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n</blockquote>\n<p>What do you mean?  I've included the partial proof which encounters the issue in the post already. Is there some sort of other mwe I could provide?</p>",
        "id": 256949687,
        "sender_full_name": "É Olive",
        "timestamp": 1633867182
    },
    {
        "content": "<p>Well there's no such thing as <code>rev</code>, for example.</p>",
        "id": 256949806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867245
    },
    {
        "content": "<p>Basically your code should work if I paste it in a new empty Lean file, so I can see the same proof state you are talking about.</p>",
        "id": 256949840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867293
    },
    {
        "content": "<p>Ah, ok. <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=universe%20u%0Avariables%20%7BA%20%3A%20Type%20u%7D%0Anamespace%20mylist%0A%0Ainductive%20list%20%28T%20%3A%20Type%20u%29%20%3A%20Type%20u%0A%7C%20nil%20%3A%20list%0A%7C%20cons%20%3A%20T%20%E2%86%92%20list%20%E2%86%92%20list%0A%0Ainfixr%20%60%20%3A%3A%20%60%3A67%20%3A%3D%20list.cons%0Anotation%20%60%5B%5D%60%20%3A%3D%20list.nil%0A%0Adef%20append%20%3A%20list%20A%20%E2%86%92%20list%20A%20%E2%86%92%20list%20A%0A%7C%20%5B%5D%20t%20%3A%3D%20t%0A%7C%20%28h%20%3A%3A%20s%29%20t%20%3A%3D%20h%20%3A%3A%20%28append%20s%20t%29%0Ainstance%20%3A%20has_append%20%28list%20A%29%20%3A%3D%20%E2%9F%A8%40append%20A%E2%9F%A9%0A%0A%40%5Bsimp%5D%20lemma%20nil_append%20%28s%20%3A%20list%20A%29%20%3A%20%5B%5D%20%2B%2B%20s%20%3D%20s%20%3A%3D%20rfl%0A%40%5Bsimp%5D%20lemma%20cons_append%20%28x%20%3A%20A%29%20%28s%20t%20%3A%20list%20A%29%20%3A%20%28x%20%3A%3A%20s%29%20%2B%2B%20t%20%3D%20x%20%3A%3A%20%28s%20%2B%2B%20t%29%20%3A%3D%20rfl%0A%0A%40%5Bsimp%5D%20def%20rev%20%3A%20list%20A%20%E2%86%92%20list%20A%0A%7C%20%5B%5D%20%3A%3D%20%5B%5D%0A%7C%20%28h%20%3A%3A%20t%29%20%3A%3D%20rev%20t%20%2B%2B%20%28h%20%3A%3A%20%5B%5D%29%0A%0A---%0A--%20edit%20this%20region%20to%20solve%20the%20challenge%0Adef%20rev_rev%20%28s%20%3A%20list%20A%29%20%20%3A%20rev%20%28rev%20s%29%20%3D%20s%20%3A%3D%20by%7B%0Ainduction%20s%20with%20h%20z%20i%3Bsimp%2C%0Aconv%7B%0A%20%20to_rhs%2C%0A%20%20rw%E2%86%90i%2C%0A%7D%2C%0Ainduction%20z%20with%20z_h%20z_tl%20z_ih%2C%0Asimp%2C%0A%7D%0A---%0A%0Aexample%20%3A%20%E2%88%80%20%28s%20%3A%20list%20A%29%2C%20rev%20%28rev%20s%29%20%3D%20s%20%3A%3D%20rev_rev%0Aend%20mylist\">Here's a link to the surrounding context.</a></p>",
        "id": 256949902,
        "sender_full_name": "É Olive",
        "timestamp": 1633867324
    },
    {
        "content": "<p>What's the actual statement of the lemma that you mentioned you proved? \"(I've proven it as a lemma just fine)\"</p>",
        "id": 256950178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867577
    },
    {
        "content": "<p>Ah, maybe you want to <code>clear i</code> before doing the induction?</p>",
        "id": 256950344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867716
    },
    {
        "content": "<p>I think I wrote it in my original post:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">z</span> <span class=\"bp\">++</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"o\">[])</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure if that's what you are asking?</p>",
        "id": 256950452,
        "sender_full_name": "É Olive",
        "timestamp": 1633867807
    },
    {
        "content": "<p>Yes but often people don't tell the truth!</p>",
        "id": 256950489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867863
    },
    {
        "content": "<p>That's what I was asking, yeah.</p>",
        "id": 256950496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Nested.20induction.20on.20the.20same.20variable/near/256950344\">said</a>:</p>\n<blockquote>\n<p>Ah, maybe you want to <code>clear i</code> before doing the induction?</p>\n</blockquote>\n<p>Ah yes, this solves the problem.  I still don't understand how this nested induction works, but at least I can go with that for now.  Thank you.</p>",
        "id": 256950510,
        "sender_full_name": "É Olive",
        "timestamp": 1633867894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448275\">É Olive</span> has marked this topic as resolved.</p>",
        "id": 256950514,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633867902
    },
    {
        "content": "<p>It's not obvious to me why this is easier to prove than the original statement--I thought maybe you really proved <code>rev (y ++ h :: []) = h :: rev y</code> for example.</p>",
        "id": 256950540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633867922
    },
    {
        "content": "<p>I think I basically did prove that.  I just applied some cases first to get rid of my <code>rev z</code>.</p>",
        "id": 256950624,
        "sender_full_name": "É Olive",
        "timestamp": 1633868006
    },
    {
        "content": "<p>The second <code>induction</code> applies to <code>z</code> and the hypothesis <code>i</code> depends on <code>z</code>, so it can vary with <code>z</code>. Suppose that <code>i</code> was something like \"all the elements of <code>z</code> are positive\". Then presumably the statement you would want to prove by induction is \"for any <code>z</code> with all its elements positive, we have blah blah\".<br>\nIn this case, that's not what we want to do--<code>i</code> is some extra information that we already made use of (of course, WE know that <code>rev (rev z) = z</code> for any <code>z</code>), and we don't want to think of it as part of the inductive hypothesis in the second induction.</p>",
        "id": 256950704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633868059
    },
    {
        "content": "<p>You made me realize that I can do the induction on <code>rev z</code> instead, this makes the proof simpler and the original problem doesn't manifest.  But I am glad to have learned some things here.</p>",
        "id": 256951092,
        "sender_full_name": "É Olive",
        "timestamp": 1633868446
    }
]