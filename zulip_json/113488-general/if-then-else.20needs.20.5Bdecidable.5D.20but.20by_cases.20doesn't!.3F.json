[
    {
        "content": "<p>Is there some magic in <code>by_cases</code> that lets it decide <code>l = []</code> without classical reasoning? And if so, how can I use it in term mode?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Works!?</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">∨</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[],</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Error: &quot;failed to synthesize type class instance for ... ⊢ decidable (l = list.nil)&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">∨</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 206139114,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596719950
    },
    {
        "content": "<p>Never mind, this works as well so I'm pretty sure <code>by_cases</code> just uses excluded middle :P </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">42</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[</span><span class=\"mi\">42</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[(</span><span class=\"mi\">42</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)],</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206139306,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596720064
    },
    {
        "content": "<p>Yes, I think <code>by_cases</code> was upgraded to use classical automatically</p>",
        "id": 206139338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720084
    },
    {
        "content": "<p>Interesting. Does this mean the documentation is out of date? (\"This tactic requires that <code>p</code> is decidable.\")</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases</a></p>",
        "id": 206139451,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596720137
    },
    {
        "content": "<p>I think there's an instance which says <code>l = []</code> is decidable (even if you don't go classical)</p>",
        "id": 206140290,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1596720514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294142\">@Chris Wong</span> Yes, the documentation is indeed out of date.  That sentence actually comes from mathlib.  PRs welcome!</p>",
        "id": 206140489,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596720602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113488-general/topic/if-then-else.20needs.20.5Bdecidable.5D.20but.20by_cases.20doesn't!.3F/near/206139451\">said</a>:</p>\n<blockquote>\n<p>Interesting. Does this mean the documentation is out of date? (\"This tactic requires that <code>p</code> is decidable.\")</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases</a></p>\n</blockquote>\n<p>It seems so</p>",
        "id": 206140491,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720602
    },
    {
        "content": "<p>It looks like <code>by_contra</code> doesn't need decidability either, so we'll need to fix the docs for both</p>",
        "id": 206217622,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596765683
    },
    {
        "content": "<p>Wait, it does... <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> what's the reasoning behind <code>by_cases</code> using classical reasoning but <code>by_contra</code> still requiring <code>decidable</code>?</p>",
        "id": 206217913,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596766133
    },
    {
        "content": "<p>That's simple.  I don't use <code>by_contra</code> enough to notice.</p>",
        "id": 206229907,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596784785
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3718\">https://github.com/leanprover-community/mathlib/pull/3718</a><br>\n<a href=\"https://github.com/leanprover-community/lean/issues/433\">https://github.com/leanprover-community/lean/issues/433</a></p>",
        "id": 206243305,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596796940
    }
]