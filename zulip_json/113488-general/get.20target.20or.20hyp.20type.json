[
    {
        "content": "<p>Is there something like this already? Or am I approaching things wrong?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">target_or_hyp_type</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">target</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 194653634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587376328
    },
    {
        "content": "<p>that seems fine to me, but it also looks specific to your use case</p>",
        "id": 194654110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587376665
    },
    {
        "content": "<p>if you want something more general, I would suggest something taking a <code>loc</code> as input</p>",
        "id": 194654203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587376721
    },
    {
        "content": "<p>Does something like that already exist?</p>",
        "id": 194654377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587376848
    },
    {
        "content": "<p>Similarly something like this...??</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace&#39;</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">replace_target</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">replace_hyp</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n</pre></div>",
        "id": 194654477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587376908
    },
    {
        "content": "<p>Or should that also be done with <code>loc</code>?</p>",
        "id": 194654492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587376917
    },
    {
        "content": "<p>I think you are asking the wrong question. What is this for? Usually the goal and the hypotheses have to be treated differently, since in one you can reason forward and the other you reason backward</p>",
        "id": 194654602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587376972
    },
    {
        "content": "<p>Except for <code>rw</code>, I think</p>",
        "id": 194654627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587376993
    },
    {
        "content": "<p>There is a function, <code>loc.apply</code>, where you give it a tactic to operate on hypotheses and another to operate on the goal, and it will do what it needs to on any <code>loc</code>, using any combination of <code>h</code>, <code>|-</code> and <code>*</code></p>",
        "id": 194654735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377063
    },
    {
        "content": "<p>Yep, I'm already using that one</p>",
        "id": 194654771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377088
    },
    {
        "content": "<p>as such, there is no <code>option expr</code> involved</p>",
        "id": 194654798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377110
    },
    {
        "content": "<p>just two separate functions</p>",
        "id": 194654812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377127
    },
    {
        "content": "<p>But that leads to lots of duplication, I think</p>",
        "id": 194654978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377232
    },
    {
        "content": "<p>See the <code>nth-rewrite</code> branch</p>",
        "id": 194655034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377271
    },
    {
        "content": "<p>it's not really duplication, it only looks like it</p>",
        "id": 194655035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377271
    },
    {
        "content": "<p>the actual tactics you have to use and the order stuff flows around is different</p>",
        "id": 194655097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377303
    },
    {
        "content": "<p>once you get to something rewrite-like, it does turn into just one tactic, with the form <code>expr -&gt; tactic (expr x expr)</code></p>",
        "id": 194655155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377343
    },
    {
        "content": "<p>looking at your branch, I think you should indeed factor everything through a conversion and applying a conversion</p>",
        "id": 194655460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377534
    },
    {
        "content": "<p>What is a conversion?</p>",
        "id": 194655491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377561
    },
    {
        "content": "<p><code>expr -&gt; tactic (expr x expr)</code>, given input <code>e</code> produces <code>e'</code> and a proof of <code>p : e = e'</code></p>",
        "id": 194655526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377591
    },
    {
        "content": "<p>you can cleanly express descending into subterms with this type</p>",
        "id": 194655548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377608
    },
    {
        "content": "<p>and given such a conversion you can apply it to the target as one tactic, or apply it to a hypothesis</p>",
        "id": 194655653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377679
    },
    {
        "content": "<p>Are such conversions already used in mathlib? Are there supporting functions?</p>",
        "id": 194655918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377838
    },
    {
        "content": "<p>Or should I roll my own?</p>",
        "id": 194655929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377845
    },
    {
        "content": "<p>there are a couple, I use it a lot in <code>ring</code></p>",
        "id": 194655970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377866
    },
    {
        "content": "<p>but mostly it's just a pattern that doesn't require much support</p>",
        "id": 194656044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587377895
    },
    {
        "content": "<p>Ok, but it hasn't been factored out in some sort of reusable package?</p>",
        "id": 194656046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377896
    },
    {
        "content": "<p>Ok... fine</p>",
        "id": 194656054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587377901
    },
    {
        "content": "<p>see for instance <code>simp_target</code> and <code>simp_hyp</code> that rely on <code>tactic.simplify</code> which is basically a conversion like I described (although it takes some extra arguments)</p>",
        "id": 194656279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587378038
    },
    {
        "content": "<p>they just get the result from the conversion and pass to <code>replace_target</code> and <code>replace_hyp</code> respectively</p>",
        "id": 194656326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587378074
    },
    {
        "content": "<p>so I think these functions are the reusable package</p>",
        "id": 194656417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587378122
    },
    {
        "content": "<p>In the <code>tactic.norm_num</code> file there are some orphaned conversion operations <code>refl_conv</code> and <code>trans_conv</code> that could go in <code>tactic.core</code></p>",
        "id": 194656598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587378225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I have no idea whether I did things right, but I think I've deduplicated the code quite far. See <a href=\"https://github.com/leanprover-community/mathlib/issues/2471\" title=\"https://github.com/leanprover-community/mathlib/issues/2471\">#2471</a></p>",
        "id": 194682241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587392880
    }
]