[
    {
        "content": "<p>I would like to write</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma map_id (F : (C × D) ⥤ E) (X : C) (Y : D) :\n  F.map (𝟙 X, 𝟙 Y) = 𝟙 (F.obj (X, Y)) :=\nF.map_id (X, Y)\n</pre></div>\n\n\n<p>(complete context <a href=\"https://gist.github.com/semorrison/38e89f527d444fd6af24cc7fb0a2f63a\" target=\"_blank\" title=\"https://gist.github.com/semorrison/38e89f527d444fd6af24cc7fb0a2f63a\">here</a>), but I get an error message</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  prod.mk (𝟙 X)\nterm\n  𝟙 X\nhas type\n  X ⟶ X\nbut is expected to have type\n  ?m_1.fst ⟶ ?m_1.fstLean\n</pre></div>\n\n\n<p>and so have to write the rather unpleasant</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma map_id (F : (C × D) ⥤ E) (X : C) (Y : D) :\n  @category_theory.functor.map _ _ _ _ F (X, Y) (X, Y) (𝟙 X, 𝟙 Y) = 𝟙 (F.obj (X, Y)) :=\nF.map_id (X, Y)\n</pre></div>\n\n\n<p>Anyone have ideas to help the elaborator along, here?</p>",
        "id": 162219393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554108104
    },
    {
        "content": "<p><code>(term : type)</code></p>",
        "id": 162219471,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1554108211
    },
    {
        "content": "<p>I've tried that, but can't get anything to work. Did you have a specific suggestion?</p>",
        "id": 162219853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554108653
    },
    {
        "content": "<p>no, sorry</p>",
        "id": 162220031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1554108825
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map_id</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 162221867,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554110501
    },
    {
        "content": "<p>Thank you. :-) I should have managed that one...</p>",
        "id": 162224185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554112741
    }
]