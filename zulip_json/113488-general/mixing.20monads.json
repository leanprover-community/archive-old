[
    {
        "content": "<p>Is there any way to mix the io and tactic monads? There lots of metaprogramming stuff with type <code>tactic something</code> and I would like to write the result to a file. I know I can use <code>tactic.trace</code> and redirect output to a file. But it would feel much cleaner to directly write to a file from Lean.</p>",
        "id": 240707496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622302426
    },
    {
        "content": "<p>Yes, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.unsafe_run_io\">docs#tactic.unsafe_run_io</a></p>",
        "id": 240707925,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622303073
    },
    {
        "content": "<p>But as a note, I think if you are running Lean from the server (e.g. in vs code), you can’t use io inside a tactic to write to stdout, but I do think you can still write to a file which is what you want.  If running lean from the command line, you can use io to write wherever you like.</p>",
        "id": 240708247,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622303549
    },
    {
        "content": "<p>This might be a good place to mention (based on the title of the thread) that we now have ways to pass between the <code>tactic</code>, <code>parser</code>, and <code>io</code> monads:</p>\n<ul>\n<li><code>tactic</code> inside <code>io</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/io.run_tactic\">docs#io.run_tactic</a>  (Starts up a tactic state with the same environment as <code>io</code> and a trivial <code>|- true</code> goal.)</li>\n<li><code>tactic</code> inside <code>parser</code> : <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lean.parser.of_tactic\">docs#lean.parser.of_tactic</a> (So common that tactics are cast to parsers inside a parser monad.)</li>\n<li><code>io</code> inside <code>tactic</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.unsafe_run_io\">docs#tactic.unsafe_run_io</a> (Is \"unsafe\" because one can use it to run stuff on command line, modify files, and send information over the internet.  Also, it can make tactics nondeterministic.)</li>\n<li><code>parser</code> inside <code>tactic</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lean.parser.run\">docs#lean.parser.run</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lean.parser.run_with_input\">docs#lean.parser.run_with_input</a> (The former runs a parser on an empty string to parse.  The latter has you specify the string to parse.)</li>\n</ul>",
        "id": 240709783,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622305707
    },
    {
        "content": "<p>Thanks Floris and Jason.</p>",
        "id": 240709890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622305861
    },
    {
        "content": "<p>Hi, this should probably go in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>, but do you know what are counterparts of these are in Lean 4? In particular, how can one do something like <code>tactic.unsafe_run_io</code>. I know there is <code>unsafeIO</code>, but then the whole thing is marked as unsafe and cannot be used in proofs...</p>",
        "id": 246624931,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1626802901
    },
    {
        "content": "<p>What would you want your IO tactic step to do?</p>",
        "id": 246625025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626802943
    },
    {
        "content": "<p>I'm reading an Array from a file and would like to plug it into a proof.</p>",
        "id": 246625334,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1626803110
    },
    {
        "content": "<p><code>TacticM</code> is based on <code>IO</code></p>",
        "id": 246630107,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626805547
    },
    {
        "content": "<p>Wow, thanks, that is very neat! I'm amazed at how straightforward the solution to my problem is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246701845,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1626863387
    },
    {
        "content": "<p>Or,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">i</span>\n</code></pre></div>\n<p>:)</p>",
        "id": 246705949,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626866568
    }
]