[
    {
        "content": "<p>How do I close this goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">ℤ</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">smul_comm_class.symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">linear_map.smul_apply</span> <span class=\"n\">l</span> <span class=\"n\">z</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>  <span class=\"c1\">-- mul_action.to_has_scalar = linear_map.has_scalar</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the presence of the <code>smul_comm_class</code> instance from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_comm_class.symm\">docs#smul_comm_class.symm</a>, there are now two <code>semimodule ℤ</code> structures on <code>linear_map</code>:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group.int_module\">docs#add_comm_group.int_module</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.semimodule\">docs#linear_map.semimodule</a> (which uses the <code>add_comm_group.int_module : semimodul ℤ N</code>)</li>\n</ul>\n<p>Can priority fix this?</p>",
        "id": 219822867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607941686
    },
    {
        "content": "<p>Seems it might be able to, at least in that tiny example. Let's see if <a href=\"https://github.com/leanprover-community/mathlib/issues/5365\">#5365</a> works...</p>",
        "id": 219824556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607942730
    },
    {
        "content": "<p>You're adding a loop into the instance search graph? Can this ever be right?</p>",
        "id": 219825414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607943362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20diamonds.20in.20.E2.84.A4-module.20structure.20of.20linear_map/near/219825414\">said</a>:</p>\n<blockquote>\n<p>Can this ever be right?</p>\n</blockquote>\n<p>When the future arrives <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 219825538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607943449
    },
    {
        "content": "<p>My other idea is to just swap the arguments in all users of <code>smul_comm_class</code> so that they match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.smul_comm_class\">docs#int.smul_comm_class</a></p>",
        "id": 219826558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607944121
    },
    {
        "content": "<p>With the idea that if you have an object <code>T</code> with an innate R-module structure (linear_map, tensor_product, etc), <code>smul_comm_class S R T</code> is the preferred order</p>",
        "id": 219826650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607944192
    },
    {
        "content": "<p>I think the caching in the typeclass search makes this loop safe? My guess is that the behavior is:</p>\n<ul>\n<li>I need a <code>smul_comm_class R1 R2 M</code></li>\n<li>Hey, I found <code>.symm</code><ul>\n<li>I need a <code>smul_comm_class R2 R1 M</code></li>\n<li>Hey, I found <code>.symm</code><ul>\n<li>I need a <code>smul_comm_class R1 R2 M</code></li>\n<li>Oh, I'm already looking for one of those, so prune this search branch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
        "id": 219831156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607947273
    },
    {
        "content": "<p>At any rate, by adding <code>priority</code>, the loop now only fires if an instance can't be found</p>",
        "id": 219831223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607947320
    },
    {
        "content": "<p>Which is frustrating but not as frustrating as trying to prove instance equality</p>",
        "id": 219831316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607947360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20diamonds.20in.20.E2.84.A4-module.20structure.20of.20linear_map/near/219831156\">said</a>:</p>\n<blockquote>\n<p>I think the caching in the typeclass search makes this loop safe? My guess is that the behavior is:</p>\n<ul>\n<li>I need a <code>smul_comm_class R1 R2 M</code></li>\n<li>Hey, I found <code>.symm</code><ul>\n<li>I need a <code>smul_comm_class R2 R1 M</code></li>\n<li>Hey, I found <code>.symm</code><ul>\n<li>I need a <code>smul_comm_class R1 R2 M</code></li>\n<li>Oh, I'm already looking for one of those, so prune this search branch</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>It wouldn't be hard to implement this, but it is not implemented in Lean 3.</p>",
        "id": 219832754,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1607948222
    },
    {
        "content": "<p>The reason why I didn't implement it (and why I'm a bit skeptical about the Lean 4 version) is that it seems very fragile: <code>smul_comm_class</code> has two type-class parameters, and there are usually many ways to write the same instances (thus defeating the loop detection).</p>",
        "id": 219832975,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1607948329
    },
    {
        "content": "<p>By\"many ways\", do you mean \"with instances that are defeq but not syntactically equal\"?</p>",
        "id": 219833972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607948871
    },
    {
        "content": "<p>Assuming the linked PR passes CI, is the loop still a deal-breaker?</p>",
        "id": 219835247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607949550
    },
    {
        "content": "<p>I think there is a linter for this, so it shouldn't pass CI</p>",
        "id": 219835290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607949591
    },
    {
        "content": "<p>Maybe the solution to my original problem is to make the <code>symm</code> instances available only for <code>nat</code> and <code>int</code>, rather than for all types</p>",
        "id": 219835468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607949670
    },
    {
        "content": "<p>Where does <code>smul_comm_class</code> get involved here? The two linear map structures don't mention it</p>",
        "id": 219835675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607949817
    },
    {
        "content": "<p>I think <code>add_comm_group.int_module</code> is a little dubious as a global instance, it can be selectively introduced</p>",
        "id": 219835764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607949865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20diamonds.20in.20.E2.84.A4-module.20structure.20of.20linear_map/near/219835675\">said</a>:</p>\n<blockquote>\n<p>Where does <code>smul_comm_class</code> get involved here? The two linear map structures don't mention it</p>\n</blockquote>\n<p>What do you mean? It's the last item in the signature of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.semimodule\">docs#linear_map.semimodule</a></p>",
        "id": 219835980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607949999
    },
    {
        "content": "<p><code>nat.smul_comm_class</code> can have a commuted instance</p>",
        "id": 219835981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607949999
    },
    {
        "content": "<p>maybe this is what you mean</p>",
        "id": 219835987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607950005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20diamonds.20in.20.E2.84.A4-module.20structure.20of.20linear_map/near/219835981\">said</a>:</p>\n<blockquote>\n<p><code>nat.smul_comm_class</code> can have a commuted instance</p>\n</blockquote>\n<p>That's what I meant by \"Maybe the solution to my original problem is to ...\", yes</p>",
        "id": 219836030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607950033
    },
    {
        "content": "<p>Isn't the right solution to fix the definition of multiplication on nat and int so that the instances are defeq?</p>",
        "id": 219837343,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607950780
    },
    {
        "content": "<p>I suppose that could fix the diamond, although I'd still have to use the <code>haveI</code>.</p>\n<p>Is there any way to unfold the goal in my top-most post to see what currently _isn't_ defeq?</p>",
        "id": 219838797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607951578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20diamonds.20in.20.E2.84.A4-module.20structure.20of.20linear_map/near/219835290\">said</a>:</p>\n<blockquote>\n<p>I think there is a linter for this, so it shouldn't pass CI</p>\n</blockquote>\n<p><del>It passes CI</del> - github lied to me, and didn't show me the lint run at all</p>",
        "id": 219839053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607951743
    },
    {
        "content": "<p>Sure enough, <a href=\"https://github.com/leanprover-community/mathlib/runs/1550403959?check_suite_focus=true\">it fails the linter</a></p>",
        "id": 219847944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607956080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20diamonds.20in.20.E2.84.A4-module.20structure.20of.20linear_map/near/219835981\">said</a>:</p>\n<blockquote>\n<p><code>nat.smul_comm_class</code> can have a commuted instance</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/5369\">#5369</a>, hopefully the linter is happy with that</p>",
        "id": 219860212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607961181
    },
    {
        "content": "<p>With that merged, the original problem doesn't exist - and it turns out that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.gsmul_eq_smul\">docs#module.gsmul_eq_smul</a> can close the diamond if it's forced to appear, as with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">•</span><span class=\"n\">ℤ</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">linear_map.smul_apply</span> <span class=\"n\">l</span> <span class=\"n\">z</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw gsmul_eq_smul, -- does not close the goal</span>\n  <span class=\"n\">rw</span> <span class=\"n\">module.gsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"c1\">-- closes the goal</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220272730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608225478
    }
]