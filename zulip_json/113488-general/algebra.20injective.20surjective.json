[
    {
        "content": "<p>What would be a good filename for a file that contains all variations of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">comm_ring_of_injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_ring</span> <span class=\"n\">α&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_zero</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_one</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_add</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_mul</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_neg</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inj</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">zero</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">one</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">add</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">mul</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">neg</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(There is also version for <code>surjective f</code>, and then versions for <code>monoid</code>, <code>comm_monoid</code>, <code>group</code>, <code>comm_group</code>, <code>semiring</code>, <code>comm_semiring</code>, <code>ring</code>, and <code>comm_ring</code>. So in total there will be 12 definitions.)</p>",
        "id": 196983313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589018060
    },
    {
        "content": "<p>Or should these just be lumped into <code>algebra.basic</code> (which doesn't exist)?</p>",
        "id": 196983352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589018125
    },
    {
        "content": "<p>Why not put it in <code>algebra.ring</code>?</p>",
        "id": 196983477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589018302
    },
    {
        "content": "<p>the first 4 go in <code>algebra.group</code> and the second 4 go in <code>algebra.ring</code></p>",
        "id": 196983487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589018339
    },
    {
        "content": "<p>Ok</p>",
        "id": 196983497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589018364
    },
    {
        "content": "<p>Do you have some <code>[...]</code> in <code>variables</code>? I guess <code>[comm_ring β] [has_zero α'] [has_one α'] [has_mul α'] [has_neg α'] [has_add α']</code>?</p>",
        "id": 196984312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589019678
    },
    {
        "content": "<p>Note that we have something similar with <code>data.equiv.transfer_instance</code>.</p>",
        "id": 196984382,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589019774
    },
    {
        "content": "<p>(with stronger assumptions).</p>",
        "id": 196984391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589019787
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2638\" title=\"https://github.com/leanprover-community/mathlib/issues/2638\">#2638</a></p>",
        "id": 196988802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589026292
    }
]