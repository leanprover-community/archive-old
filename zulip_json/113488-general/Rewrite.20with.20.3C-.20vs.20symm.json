[
    {
        "content": "<p>This is something I encountered a while ago, but I don't think I've posted about it before. Can someone offer an explanation of why the first rewrite works, but the second, which seems like it is applying an equivalent transformation, does not? This arose because I was trying to switch a simp statement that looked like <code>simp only [&lt;-finset.mul_sum] with my_attribute</code> to one where <code>my_mul_sum</code> was included in the attribute in order to make it look a little cleaner.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_mul_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">finset.mul_sum.symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.fin_range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- rw &lt;-finset.mul_sum, -- works fine</span>\n  <span class=\"n\">rw</span> <span class=\"n\">my_mul_sum</span><span class=\"o\">,</span> <span class=\"c1\">-- this fails where above succeeds</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258100175,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1634591153
    },
    {
        "content": "<p>I tried specializing <code>my_mul_sum</code> to see what's going wrong, but I'm confused about this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.fin_range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">my_mul_sum</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">20:12: type mismatch at application</span>\n<span class=\"cm\">  my_mul_sum</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  fin n</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type : Type 1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type u : Type (u+1)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258102425,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634592050
    },
    {
        "content": "<p>Oh, the problem is that <code>universes</code> is inside the <code>section</code>. Bring it outside the <code>section</code>, and the rewrite goes through.</p>",
        "id": 258102473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634592069
    },
    {
        "content": "<p>Elaboration issue?</p>",
        "id": 258102477,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592070
    },
    {
        "content": "<p>Replace the line <code>universes u v</code> by <code>universe variables u v</code>. That should fix the issue.</p>\n<p><del>I've mentioned a couple times that I think <code>universes</code> should never be used, and always be replaced by <code>universe variables</code>. However, somehow <code>universes</code> has become the de factor standard in mathlib (I think).</del> [EDIT: it seems that as long as you're outside a section it doesn't matter]</p>\n<p>The difference between the two is that <code>universes</code> fixes the universes for the section. So the lemma <code>my_mul_sum</code> can only be applied to <code>α</code> living in the (fixed) universe parameter <code>u</code>, not to a type living in any other universe (at least until the end of the section<del>/namespace/file</del>). <code>universe parameter</code> generalizes the universes immediately, so the lemma <code>my_mul_sum</code> is available immediately to any type in any universe desired (which is usually what you want, even though it rarely makes a difference).</p>",
        "id": 258102531,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592096
    },
    {
        "content": "<p>Oh no, the dreaded <code>universes</code>-<code>section</code> interaction <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 258102536,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592100
    },
    {
        "content": "<p>Oh, if we use <code>universes</code> outside a section does it behave the same as <code>universe variable</code>?</p>",
        "id": 258102673,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592152
    },
    {
        "content": "<p>I think so, yeah. We do all the time without any trouble as far as I know.</p>",
        "id": 258102737,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592183
    },
    {
        "content": "<p>Bhavik and I had a funky example with an added layer of complexity using <code>namespace</code>.</p>",
        "id": 258102790,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592209
    },
    {
        "content": "<p>I thought the \"without any trouble\" was just because you rarely apply a lemma to a type in a different universe. But I guess it's not <em>that</em> uncommon.</p>",
        "id": 258102827,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592226
    },
    {
        "content": "<p>Here it is: <a href=\"#narrow/stream/113488-general/topic/section.2C.20universe.2C.20namespace.20deadly.20interaction/near/241180594\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/section.2C.20universe.2C.20namespace.20deadly.20interaction/near/241180594</a></p>",
        "id": 258103022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592309
    },
    {
        "content": "<p>I didn't know what you just explained at the time, so you might well be right.</p>",
        "id": 258103046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592323
    },
    {
        "content": "<p>Is there a difference between <code>variable</code> and <code>parameter</code>?</p>",
        "id": 258103090,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634592349
    },
    {
        "content": "<p>Yes.</p>",
        "id": 258103104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592356
    },
    {
        "content": "<p>Parameters are \"fixed\" for the section: you can only apply the lemmas (in that section) to <em>that</em> parameter, not any other value.</p>",
        "id": 258103184,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592383
    },
    {
        "content": "<p><code>parameter</code> appends silently the arguments to any call of the defs/lemmas within the same section.</p>",
        "id": 258103196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Rewrite.20with.20.3C-.20vs.20symm/near/258102531\">said</a>:</p>\n<blockquote>\n<p>The difference between the two is that <code>universes</code> fixes the universes for the section.</p>\n</blockquote>\n<p>Oh, I spent a lot of time trying to figure out what the difference was during synport. Even after staring at the code for a while I could only deduce that the distinction is maintained, but it didn't seem to have any visible effects</p>",
        "id": 258103220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634592408
    },
    {
        "content": "<p>Have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zorn.chain\">docs#zorn.chain</a> for an example.</p>",
        "id": 258103222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592408
    },
    {
        "content": "<p>However, the implementation of <code>parameters</code> is leaky, so sometimes this behavior doesn't work as this description says, and therefore parameter should generally not be used</p>",
        "id": 258103274,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592436
    },
    {
        "content": "<p>Ah yes, it is even explained in TPL</p>",
        "id": 258103328,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634592470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Rewrite.20with.20.3C-.20vs.20symm/near/258103220\">said</a>:</p>\n<blockquote>\n<p>Oh, I spent a lot of time trying to figure out what the difference was during synport. Even after staring at the code for a while I could only deduce that the distinction is maintained, but it didn't seem to have any visible effects</p>\n</blockquote>\n<p>Haha, that's fair. It rarely has visible effects.</p>",
        "id": 258103351,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592481
    },
    {
        "content": "<p>I personally don't like <code>parameter</code> because when I look at the API code I have the assumption that this is how I'm going to use the lemmas. And then I always forget the arguments that were parametrized.</p>",
        "id": 258103416,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592496
    },
    {
        "content": "<p>I assume language models could get as confused as I am?</p>",
        "id": 258103491,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634592538
    },
    {
        "content": "<p><code>universe variable</code> / <code>universe parameter</code> was banished years ago, this distinction is entirely a relic of when \"fixed universes\" were a thing</p>",
        "id": 258103528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634592561
    },
    {
        "content": "<p>Until a couple minutes ago I thought that <code>universes</code> still had the behavior of <code>universe parameters</code>. My heuristic \"don't use <code>universe</code>\" is maybe outdated by a couple of years :)</p>",
        "id": 258103692,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592640
    },
    {
        "content": "<p>I think mathlib uses <code>universe</code> almost exclusively</p>",
        "id": 258103756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634592675
    },
    {
        "content": "<p>A quick search seems to suggest that it's used about 20x as much as <code>universe variable</code>.</p>",
        "id": 258104019,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634592800
    },
    {
        "content": "<p>I find 33 uses of <code>universe variable[s]</code>, 946 uses of <code>universe[s]</code>, and 0 for <code>universe parameter[s]</code></p>",
        "id": 258104042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634592811
    },
    {
        "content": "<p>and most of the uses of <code>universe variable</code> are from the old files like logic.basic, and some uses in witt vectors and category theory for some reason</p>",
        "id": 258104278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634592897
    },
    {
        "content": "<p>From a quick glance it looks like they are all at the top level, they aren't doing it to avoid undesired behavior in a section</p>",
        "id": 258104592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634593023
    },
    {
        "content": "<p>and at least one of which I added, in <code>tests/simps</code> :)</p>",
        "id": 258104641,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634593051
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9794\">#9794</a></p>",
        "id": 258105207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634593308
    },
    {
        "content": "<p>Do we see any value in keeping the <code>universes</code>/<code>section</code> interaction, does it exist in Lean 4? If not, why don't we update Lean 3 so that <code>universes</code> always means <code>universe variables</code> (unless opted-in with <code>universe parameters</code>)?</p>",
        "id": 258165364,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634635546
    },
    {
        "content": "<p>We don't need <code>universes</code> at all in Lean 4.</p>",
        "id": 258166230,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634635995
    },
    {
        "content": "<p>Oh wow, I knew about the <code>universe</code>/<code>section</code> interaction, but I never knew that <code>universe variables</code> meant something different--I thought it was just a verbose way of writing <code>universes</code>, and vaguely wondered why it was allowed or why anyone would write it.</p>",
        "id": 258188350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634647850
    },
    {
        "content": "<p>I've been using <code>universe variables</code> ever since I heard that it was better behaved then <code>universes</code> in some corner cases. I never understood the details, so I just used it everywhere as a cargo cult plaster.</p>",
        "id": 258188447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634647906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Rewrite.20with.20.3C-.20vs.20symm/near/258103416\">said</a>:</p>\n<blockquote>\n<p>I personally don't like <code>parameter</code> because when I look at the API code I have the assumption that this is how I'm going to use the lemmas. And then I always forget the arguments that were parametrized.</p>\n</blockquote>\n<p><code>parameter</code> is for sections that prove a bunch of lemmas that build up to a main theorem, that could just as well be <code>private</code> (at least that's how I use it). It's an alternative organization strategy to writing single 500-line proofs.</p>",
        "id": 258188664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634647998
    },
    {
        "content": "<p>I've used it in LTE once or twice, and it made the resulting file <em>more</em> readable, instead of less.</p>",
        "id": 258188795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634648048
    },
    {
        "content": "<p>Do they exist in Lean 4?</p>",
        "id": 258245454,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634667023
    },
    {
        "content": "<p>I use a <code>structure</code> in <a href=\"https://github.com/leanprover-community/mathlib/tree/picard-lindelof\">branch#picard-lindelof</a></p>",
        "id": 258245510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634667051
    },
    {
        "content": "<p>There's a sort of complicated feature that could be nice for reusing code: parameterized namespaces.  If it existed, then it would give a different way to implement <code>to_additive</code> for example.</p>\n<p>Here's an example of how it could work, in this case for adding some additional boilerplate that typeclasses can't add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set_like.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set_like_boilerplate</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">set_like.ext</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set_like_boilerplate</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">my_subobject</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_subobject</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"o\">(</span><span class=\"n\">my_subobject</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">my_subobject.carrier</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set_like_boilerplate</span> <span class=\"k\">with</span> <span class=\"n\">my_subobject</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_subobject</span>\n</code></pre></div>\n<p>I imagine it would create a <code>namespace</code> like normal (if <code>namespace</code> were like <code>section</code> and admitted <code>parameters</code>).  But then in the <code>open</code> syntax there'd be an option to pass in parameters.  Rather than including symbols, however, it would have to create new symbols.  Adding to the complexity, there could be a way to give <code>open</code> a name rewrite function to be able to replace parts of symbol names (so for example, <code>op</code> to <code>mul</code> or <code>add</code>).</p>\n<p>There are many many questions for how this would work.  I've imagined that <code>parameters</code> was originally envisioned for some kind of parameterized modules, but the complexity was deferred, and it was realized that they're not essential.</p>",
        "id": 258254477,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634670440
    },
    {
        "content": "<p>This is like ML modules I guess?</p>",
        "id": 258258642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634672215
    },
    {
        "content": "<p>I think they're like ML functors in particular, but set up so that each declaration is still at the top level and can be typechecked individually like usual. It's also not aiming to do anything like having predefined signatures that the namespace is implementing -- that's what <code>structure</code> is for.  This is trying to solve the problem \"how do I specialize lemmas to have the correct syntax for rewriting, possibly giving the lemmas appropriate names?\"</p>",
        "id": 258263039,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634673987
    }
]