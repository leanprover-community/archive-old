[
    {
        "content": "<p>What is the recommended way to prove:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>I can prove it but it's ugly.</p>",
        "id": 195537668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588065799
    },
    {
        "content": "<p>Shouldn't this be <code>simp with parity_simps</code>?</p>",
        "id": 195537696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588065839
    },
    {
        "content": "<p>I guess it should, but it isn't.</p>",
        "id": 195537806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588065915
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195537915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588065991
    },
    {
        "content": "<p>Thanks Kenny, it looks like what I have, and this is what I call ugly.</p>",
        "id": 195537956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588066020
    },
    {
        "content": "<p>(I have <code>by by_cases h : n % 2 = 0 ; [left, {right ; rw int.mod_two_ne_zero at h}] ;  rw [← int.mod_add_div n 2, h] ; use n/2 ; ring </code>)</p>",
        "id": 195538000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588066064
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 195538284,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588066213
    },
    {
        "content": "<p>I call this <code>simp</code> magic</p>",
        "id": 195538470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588066325
    },
    {
        "content": "<p>or as Clarke calls it, sufficiently advanced <code>simp</code> technology</p>",
        "id": 195538535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588066371
    },
    {
        "content": "<p>Look at <code>int.bit_decomp</code></p>",
        "id": 195588883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588090902
    },
    {
        "content": "<p>And <code>int.bit_cases_on</code></p>",
        "id": 195589042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588090969
    },
    {
        "content": "<p>Thanks Yury. This is really really arcane though. We need some <code>modulo_cases</code> tactic here.</p>",
        "id": 195617288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588103660
    },
    {
        "content": "<p>I think Scott wrote a tactic where given a proof that <code>a % b &lt; b</code> you could case split on all the possibilities for <code>a % b</code>.</p>",
        "id": 195618666,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588104181
    },
    {
        "content": "<p>Right, I used this a lot in codewars. Interval_cases?</p>",
        "id": 195620167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588104748
    },
    {
        "content": "<p>Yes, we need to build it on top of interval_cases of course</p>",
        "id": 195620216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588104775
    },
    {
        "content": "<p>I did it so dirty that the following code should be read by <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  as a PR threat:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interval_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">tk</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"o\">(</span><span class=\"n\">texpr</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">modulo_cases</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">qe</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">i_to_expr</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n   <span class=\"n\">ne</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">i_to_expr</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"err\">«</span><span class=\"k\">have</span><span class=\"err\">»</span> <span class=\"bp\">`</span><span class=\"n\">h1</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"err\">%</span> <span class=\"err\">%%</span><span class=\"n\">qe</span> <span class=\"bp\">+</span> <span class=\"err\">%%</span><span class=\"n\">qe</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"err\">%%</span><span class=\"n\">qe</span><span class=\"o\">))</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"err\">%%</span><span class=\"n\">qe</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">],</span>\n   <span class=\"err\">«</span><span class=\"k\">have</span><span class=\"err\">»</span> <span class=\"bp\">`</span><span class=\"n\">h2</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"err\">%</span> <span class=\"err\">%%</span><span class=\"n\">qe</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"err\">%%</span><span class=\"n\">qe</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">qe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n   <span class=\"err\">«</span><span class=\"k\">have</span><span class=\"err\">»</span> <span class=\"bp\">`</span><span class=\"n\">h4</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">qe</span><span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"n\">h4</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n   <span class=\"n\">h4e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h4</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">h4e</span><span class=\"o\">,</span>\n   <span class=\"err\">«</span><span class=\"k\">have</span><span class=\"err\">»</span> <span class=\"bp\">`</span><span class=\"n\">h3</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"err\">%</span> <span class=\"err\">%%</span><span class=\"n\">qe</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_nonneg</span> <span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n   <span class=\"n\">h1e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h1</span><span class=\"o\">,</span>\n   <span class=\"n\">h2e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n   <span class=\"n\">h3e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h3</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">revert</span> <span class=\"n\">h1e</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">revert</span> <span class=\"n\">h2e</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">revert</span> <span class=\"n\">h3e</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"err\">%</span> <span class=\"err\">%%</span><span class=\"n\">qe</span><span class=\"o\">)),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">generalize</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">ne</span> <span class=\"bp\">/</span> <span class=\"err\">%%</span><span class=\"n\">qe</span><span class=\"o\">)),</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">interval_cases</span> <span class=\"n\">r</span> <span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">}],</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">all_goals</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n      <span class=\"n\">h3e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">revert</span> <span class=\"n\">h3e</span><span class=\"o\">,</span>\n      <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">generalize</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n      <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rintros</span> <span class=\"n\">k</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">modulo_cases</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">k</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">k</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195632609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588110986
    },
    {
        "content": "<p>A (small) part of the problem is I don't know how to parse two <code>texpr</code> in a row without a separating token. And I don't know how to force a type ascription when parsing a <code>texpr</code>. And then of course the name handling is awful.</p>",
        "id": 195632744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588111048
    }
]