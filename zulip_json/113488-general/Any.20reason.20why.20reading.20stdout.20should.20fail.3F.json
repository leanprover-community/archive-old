[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        elif self.state == self.AwaitingResponse:\n            for line in self._proc.stdout:\n               self.check_pause()\n               json = JSON.loads(line)\n               self.receive_queue.append(json)\n            self.state = self.ProcessingResponse\n</pre></div>\n\n\n<p>This grabs the first few lines but on the last line the thread the above is running in crashes because of the read of stdout.  No error is presented in my debugger.</p>\n<p>I'm connecting the process like this:</p>\n<div class=\"codehilite\"><pre><span></span>  def connect_to_server(self):\n      exec = self.lean_executable\n      self._proc = subprocess.Popen([exec, &quot;-j0&quot;, &quot;--server&quot;],\n                                      stdin =subprocess.PIPE,\n                                      stdout=subprocess.PIPE,\n                                      stderr=subprocess.PIPE,\n                                      universal_newlines=True,\n                                      bufsize=1, env={&#39;LEAN_PATH&#39;: self.lean_folder})\n      self.state = self.ServerRunning\n</pre></div>\n\n\n<p>Also doing <code>stdout.readlines()</code> will crash the process as well as <code>stdout.read()</code> or <code>stdout.readline()</code>'ing to the end.</p>",
        "id": 182622543,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575513628
    },
    {
        "content": "<p>The solution is to use <code>communicate()</code>:</p>\n<div class=\"codehilite\"><pre><span></span>            stdout, stderr = self._proc.communicate()\n            print(stdout)\n</pre></div>\n\n\n<p>Process doesn't crash when you do that.</p>",
        "id": 182623218,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1575514705
    }
]