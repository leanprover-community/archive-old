[
    {
        "content": "<p>For each inductive type or structure Lean has to decide whether to generate large or small eliminators (eliminating to a type in an arbitrary universe, or only to a proposition). As I understand it, the algorithm is something like this.</p>\n<ul>\n<li>If the target universe of the inductive type is a Type (<code>Sort u</code> for <code>u &gt;= 1</code>), then always generate a large eliminator.</li>\n<li>If the target universe is <code>Prop</code>, then only generate a large eliminator if there's at most one constructor and all of its fields are <code>Prop</code>s.</li>\n</ul>\n<p>However, with universe polymorphism, the target universe might be <code>Prop</code> for some values of the universe parameters but not others. Currently Lean just rejects such definitions. That means you cannot define a structure like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">structure</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>You have to use a target universe of <code>Sort (max u 1)</code> or similar. This causes some minor issues in <a href=\"https://github.com/leanprover-community/mathlib/issues/824\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/824\">#824</a> where we want to replace <code>Type</code> by <code>Sort</code> in category theory.</p>\n<p>Would it be possible/sound for Lean to instead do the following?</p>\n<ul>\n<li>Solve for the universe variable substitutions which cause the target universe to become <code>Prop = Sort 0</code>, if possible. (This can be done in a simple syntax-directed way: <code>max u v = 0</code> iff <code>u = 0</code> and <code>v = 0</code>; <code>imax u v = 0</code> iff <code>v = 0</code>; <code>u+1</code> is never 0; etc.)</li>\n<li>If there are such substitutions, then apply them before doing the large eliminator check for <code>Prop</code>s.</li>\n</ul>\n<p>In the example, a large eliminator would be generated for <code>a</code>, because when the target universe is <code>Prop</code>, the field <code>f</code> is also a <code>Prop</code>.</p>\n<p>Are there other reasons that Lean needs to know whether or not the target universe is a <code>Prop</code>?</p>",
        "id": 162083803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1553893518
    },
    {
        "content": "<p>This would obviously require a modification to lean's kernel, but I can confirm soundness against the paper proof.</p>",
        "id": 162086079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553895758
    },
    {
        "content": "<p>I think lean will accept inductive types in <code>Sort u</code> under some circumstances; there are weird consequences in general, but it should be fine for large eliminating inductives</p>",
        "id": 162086113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553895837
    },
    {
        "content": "<p>In particular, lean seems to have no trouble with the structure you gave, if you use an inductive instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 162086209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553895911
    },
    {
        "content": "<p>Oh interesting</p>",
        "id": 162086231,
        "sender_full_name": "Reid Barton",
        "timestamp": 1553895948
    },
    {
        "content": "<p>It only generates a small eliminator, though</p>",
        "id": 162086337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1553896057
    },
    {
        "content": "<p>ah yes, that's the weird consequence</p>",
        "id": 162086517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553896250
    },
    {
        "content": "<p>that's why the <code>structure</code> won't work, of course</p>",
        "id": 162086552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553896300
    }
]