[
    {
        "content": "<p>Is there a version of <code>convert</code> that uses congr lemmas to dive into structures? E.g., I want to convert <code>∑ i in s, f i ≤ ∑ i in s, g i</code> to <code>∑ i in s, f' i ≤ ∑ i in s, g' i</code> and get goals <code>∀ i ∈ s, f i = f' i</code> and <code>∀ i ∈ s, g i = g' i</code>.</p>",
        "id": 200505324,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591850454
    },
    {
        "content": "<p>Of course, I can use <code>convert ... using ...; apply sum_congr rfl; ...</code> but I'd prefer to use a tactic.</p>",
        "id": 200505340,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591850511
    },
    {
        "content": "<p>Hmm, I'm actually surprised that <code>convert</code> doesn't just do that (modulo a <code>funext</code>)...</p>",
        "id": 200532360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591875446
    },
    {
        "content": "<p>Currently it generates goals <code>λ i, f i = λ i, f' i</code> and <code>λ i, g i = λ i, g' i</code>.</p>",
        "id": 200629390,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591928949
    },
    {
        "content": "<p>Who understands internals of this tactic? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 200629464,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591929033
    },
    {
        "content": "<p><code>convert</code> is a wrapper around <code>congr'</code>, which is a thin veneer over core's <code>congr</code></p>",
        "id": 200629483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929077
    },
    {
        "content": "<p>Unfortunately <code>congr</code> doesn't do <code>funext</code></p>",
        "id": 200629486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929089
    },
    {
        "content": "<p>You can find plenty of examples of <code>congr, funext, congr</code> if you search mathlib</p>",
        "id": 200629516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929122
    },
    {
        "content": "<p>Would it be hard to write a version that uses <code>@[congr]</code> lemmas? <code>funext</code> is not the main problem here.</p>",
        "id": 200629657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591929295
    },
    {
        "content": "<p>I mean, for me as a user the main problem is that it asks me to prove <code>λ i, f i = λ i, f' i</code> instead of <code>∀ i ∈ s, f i = f' i</code>.</p>",
        "id": 200629827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591929545
    },
    {
        "content": "<p>I thought it did</p>",
        "id": 200630389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930411
    },
    {
        "content": "<p>When you give it the equality goal does <code>congr</code> do the right thing?</p>",
        "id": 200630393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930427
    },
    {
        "content": "<p>Tried these examples right after <code>lemma prod_congr</code> in <code>algebra/big_operators</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">β</span>\n<span class=\"err\">⊢</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n</code></pre></div>",
        "id": 200632086,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591932980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  says that this is the intended behaviour: neither <code>congr</code> nor <code>convert</code> use <code>@[congr]</code>. It seems that none of <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  and me knew for sure about this fact. I'll make a doc PR tonight.</p>",
        "id": 201153439,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592405980
    }
]