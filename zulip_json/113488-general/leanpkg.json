[
    {
        "content": "<p>It is possible to specify git branches in <code>leanpkg</code>?</p>",
        "id": 123021774,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519694953
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[package]\nname = &quot;my_awesome_pkg&quot;\nversion = &quot;0.1&quot;         # no semantic significance currently\nlean_version = &quot;3.3.0&quot;  # optional, prints a warning on mismatch with Lean executable\npath = &quot;src&quot;            # hard-coded, will be removed in the future\ntimeout = 100           # optional, passed to `lean` as `-T` parameter\n\n[dependencies]\n# local dependency\ndemopkg = { path = &quot;relative/path/to/demopkg&quot; }\n# git dependency\nmathlib =\n  { git = &quot;https://github.com/leanprover/mathlib&quot;,\n    rev = &quot;62f7883d937861b618ae8bd645ee16ec137dd0bd&quot; }\n</pre></div>\n\n\n<p>You should be able to specify a branch using the <code>rev</code> field</p>",
        "id": 123022299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519695873
    },
    {
        "content": "<p>When doing that, I keep getting something saying that that revision is not a part of the tree. It's odd</p>",
        "id": 123022372,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519695986
    },
    {
        "content": "<p>update: I managed to make it work. It might not be a leanpkg issue but I'm not sure. It seemed to be having a hard time cloning repositories for some reason. I wonder if it has anything to do that I wasn't pointing at the usual <code>mathlib</code> repo</p>",
        "id": 123028434,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519709011
    },
    {
        "content": "<p>Can you reproduce it if you copy the toml to a fresh directory?</p>",
        "id": 123033857,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519720699
    },
    {
        "content": "<p>Actually, if you clone my repo, the problem should occur again:</p>\n<div class=\"codehilite\"><pre><span></span>git clone https://github.com/cipher1024/lean-pipes\n</pre></div>",
        "id": 123033928,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519720905
    },
    {
        "content": "<p>Sorry, you asked for a naked toml file. Let's see</p>",
        "id": 123033977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519720974
    },
    {
        "content": "<p>So, yes the problem occurs even if the toml file is left on its own</p>",
        "id": 123034036,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519721053
    },
    {
        "content": "<p>Okay, I'll try your repo</p>",
        "id": 123034038,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519721066
    },
    {
        "content": "<p>I don't see your leanpkg.toml referencing a branch</p>",
        "id": 123086767,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519818521
    },
    {
        "content": "<p>Here's the contents of <code>leanpkg.toml</code>:</p>\n<div class=\"codehilite\"><pre><span></span>[package]\nname = &quot;pipes&quot;\nversion = &quot;0.1&quot;\nlean_version = &quot;master&quot;\npath = &quot;src&quot;\n\n[dependencies]\nmathlib = {git = &quot;https://github.com/cipher1024/mathlib&quot;, rev = &quot;ce8da6ab07a68dca1743bd7d8f9768157d644736&quot;}\n</pre></div>\n\n\n<p>It is on my fork of <code>mathlib</code> and that commit is the head of my <code>coinductive-types</code> branch</p>",
        "id": 123102397,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519844631
    },
    {
        "content": "<p>This is a really basic question, but what's the right way to start and maintain a new package that depends on mathlib?<br>\nI see mathlib's <code>leanpkg.toml</code> specifies <code>lean_version = \"3.4.1\"</code>, so I guess I should use Lean 3.4.1.<br>\nSo let's say I run <code>elan run --install 3.4.1 leanpkg new my_project</code>, as recommended by <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/elan.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/elan.md\">https://github.com/leanprover/mathlib/blob/master/docs/elan.md</a>. Now I get a new project whose <code>leanpkg.toml</code> also specifies <code>lean_version = \"3.4.1\"</code>.<br>\nContinuing to follow those directions, I run <code>leanpkg add leanprover/mathlib</code>. But now I end up with the <code>lean-3.4.1</code> branch of mathlib, which hasn't been updated since June 20. I wanted the latest version. And <code>leanpkg upgrade</code> makes no difference.</p>",
        "id": 134435061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537617476
    },
    {
        "content": "<p>Is this behavior intentional? At best, it's confusing if following the instructions in that elan.md file doesn't give you the latest version of mathlib, I think.</p>",
        "id": 134435107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537617552
    },
    {
        "content": "<p>Even though I should supposedly know how all of this works (e.g., I know there is a <code>lean-3.4.1</code> branch of mathlib and leanpkg will select it), I still get caught by surprise since starting a new project is so infrequent--I just made a new project and built mathlib in it and then a half hour later discovered I had the June 20 version which didn't have the new features I wanted to use.</p>",
        "id": 134435173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537617700
    },
    {
        "content": "<p>I once thought that editing the toml file and changing 3.4.1 to \"master\" would fix this, but maybe the issue is that you are using 3.4.1's <code>leanpkg</code>?</p>",
        "id": 134435346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537617979
    },
    {
        "content": "<p>It probably would fix it, especially since I am using elan (although I'm not sure whether it is the version of leanpkg that matters, or what you write in the <code>lean_version</code> field of the toml file).<br>\nThe elan.md instructions (I'm talking about \"Scenario 1: Start a new package\") suggest that you might see <code>nightly-2018-04-06</code> as the Lean version, and I found that <code>elan run --install nightly-2018-04-06 leanpkg new my_playground</code> does give you master mathlib, maybe because there is no branch corresponding to <code>nightly-2018-04-06</code>.<br>\nBut it seems strange that the way to get mathlib master is to tell elan/leanpkg to use any other Lean version than the one actually used by mathlib...</p>",
        "id": 134435466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537618301
    },
    {
        "content": "<p>Presumably when those instructions were written, mathlib really did specify a version other than 3.4.1 and so the instructions worked</p>",
        "id": 134435506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537618334
    },
    {
        "content": "<p>By the way I should say explicitly that I'm assuming the current behavior is incorrect and I'm not supposed to get what appears to me to be this random version from June 20, but maybe others (like perhaps you Kevin) think it's working as intended because you want a fixed version for all your students.</p>",
        "id": 134435557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537618469
    },
    {
        "content": "<p>That is all over now. I wanted a fixed version for my summer students just so I could see the advantages and the disadvantages. One of the advantages is that they don't ever have to update mathlib. What happened in practice was that people generally wanted more recent mathlib stuff and they learnt how to upgrade anyway, because sufficiently many of them knew how to use git because they were on a joint maths/computer science degree, so it worked out fine in the end and everyone was using different mathlibs anyway, and there didn't seem to be a problem.</p>",
        "id": 134436089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537619550
    },
    {
        "content": "<p>Okay, great. In that case I'm going to push for making it impossible to get this random old version of mathlib without asking for it, since I think that results in a potentially confusing experience for new users (e.g., one hears \"mathlib has X\" but then makes a project to try it out and X is missing).</p>",
        "id": 134436346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537620142
    },
    {
        "content": "<p>Moved discussion to github: <a href=\"https://github.com/leanprover/lean/issues/365\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/365\">#365</a></p>",
        "id": 134436566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537620708
    },
    {
        "content": "<p>Dang that's not a link to a mathlib issue.</p>",
        "id": 134436567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537620717
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/issues/365\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/365\">https://github.com/leanprover/mathlib/issues/365</a></p>",
        "id": 134436607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537620731
    },
    {
        "content": "<p>I think this is a really good idea. I've been confused by this, too.</p>",
        "id": 134456778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537659693
    },
    {
        "content": "<p>I guess leanpkg and elan have been designed for reproducible builds, which is the popular option these days. Unfortunately the usual thing new lean/mathlib users want is master + master, which goes against this idea, and so the tools fight them on this.</p>",
        "id": 134457081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537660426
    },
    {
        "content": "<p>I guess you could say they are being \"too smart for their own good\"</p>",
        "id": 134457122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537660458
    },
    {
        "content": "<p>Is this something a switch could fix?</p>",
        "id": 134457124,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537660472
    },
    {
        "content": "<p><code>elan</code> in particular should strive for setting up users with the latest everything unless the user specifically asks for an old version</p>",
        "id": 134457132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537660519
    },
    {
        "content": "<p>Well you still get reproducible builds because the mathlib commit hash is in the leanpkg.toml file. It's just a matter of where you want to start a new project.</p>",
        "id": 134457135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537660525
    },
    {
        "content": "<p>Does <code>elan</code> know that mathlib exists? Or does the default thing just get you lean on its own</p>",
        "id": 134457182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537660626
    },
    {
        "content": "<p>I'm definitely happy that I can still build my lean-homotopy-theory project against the version of mathlib specified in the file, otherwise I would have no idea how any of the proofs that broke when building against master were supposed to work :)</p>",
        "id": 134457187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537660675
    },
    {
        "content": "<p>I think elan only gets you Lean and the lean version in your toml file selects the tag of mathlib</p>",
        "id": 134457228,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537660697
    },
    {
        "content": "<p>elan doesn't know about mathlib. The process is <code>elan run --install 3.4.1 leanpkg new myproject</code>, <code>cd myproject</code>, <code>leanpkg add leanprover/mathlib</code>.</p>",
        "id": 134457230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537660720
    },
    {
        "content": "<p>Then <code>leanpkg</code> picks the 3.4.1 branch of mathlib because that is what is specified in the <code>leanpkg.toml</code> file that elan wrote. I think</p>",
        "id": 134457237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537660765
    },
    {
        "content": "<p>Sorry--that leanpkg wrote</p>",
        "id": 134457238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537660775
    },
    {
        "content": "<p>Right, and this is backwards since it says \"get me the version of mathlib compatible with 3.4.1\" rather than \"get me the version of lean compatible with mathlib master\"</p>",
        "id": 134457240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537660799
    },
    {
        "content": "<p>Yes, that is definitely a bit weird.</p>",
        "id": 134457298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537660860
    },
    {
        "content": "<p>I think you should be able to ask elan to target a particular version/branch of any lean project, not just lean itself</p>",
        "id": 134457304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537660893
    },
    {
        "content": "<p>and then it derives the lean version from the toml file of that project</p>",
        "id": 134457305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537660913
    },
    {
        "content": "<p>I think the current situation is a consequence of the fact that the \"package manager\" leanpkg is shipped/versioned with lean itself</p>",
        "id": 134457403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537661135
    },
    {
        "content": "<p>that is, only leanpkg (not elan) knows about packages at all, but in order to get (any) leanpkg, you first must choose a lean version</p>",
        "id": 134457445,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537661177
    },
    {
        "content": "<p>I wonder how crazy it would be to just replace leanpkg with crate or some other language's tool</p>",
        "id": 134457902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537662195
    },
    {
        "content": "<p>Note that <code>elan</code> <em>is</em> some other language's tool (it is forked from Rust's <code>cargo</code>)</p>",
        "id": 134458086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537662510
    },
    {
        "content": "<blockquote>\n<p>I think you should be able to ask elan to target a particular version/branch of any lean project, not just lean itself<br>\nand then it derives the lean version from the toml file of that project</p>\n</blockquote>\n<p>But that's exactly what it's doing :) . Check out a Lean project at some commit and elan sets up the right Lean version for you.<br>\nWhat you're asking for is for elan not to set up some existing project, but a _new_ project based on its intended _dependencies_, no? What I could imagine is a command <code>elan new</code> that works like <code>leanpkg new</code>, but also takes a list of initial dependencies and selects the new package's Lean version based on that</p>",
        "id": 134458484,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537663265
    },
    {
        "content": "<p>That sounds good to me. Is it currently possible to write stuff in a file to get the equivalent of <code>elan new</code> using <code>elan</code>?</p>",
        "id": 134458530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537663380
    },
    {
        "content": "<p>Though that seems like much more work than documenting \"active mathlib development is happening for Lean version $VERSION, so use <code>elan +$VERSION leanpkg new</code> if you want to use it\"</p>",
        "id": 134458543,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537663440
    },
    {
        "content": "<p>It also sounds like it might be possible for me to set up a \"template\" project that depends on mathlib but otherwise contains very little, as a target for users to download and make elan understand</p>",
        "id": 134458597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537663492
    },
    {
        "content": "<p>Is it possible for a project like this to target the master branch of mathlib?</p>",
        "id": 134458609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537663530
    },
    {
        "content": "<p>What does <code>elan +$VERSION leanpkg new</code> mean here? Do you mean <code>$VERSION = 3.4.1</code>?</p>",
        "id": 134458660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537663634
    },
    {
        "content": "<p>the really important part is being able to tell elan \"get mathlib master\" without having to specify a commit</p>",
        "id": 134458663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537663672
    },
    {
        "content": "<p>I'm fine with telling people to get 3.4.1, since it's basically going to stay that way until lean 4 and then everything will be different anyway, but mathlib won't stay still and elan has to be able to adapt to that</p>",
        "id": 134458711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537663781
    },
    {
        "content": "<p>Okay, that <code>leanpkg upgrade</code> doesn't allow you to customize which branch it uses is a related but separate issue (and specific to leanpkg, not elan)</p>",
        "id": 134458754,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537663836
    },
    {
        "content": "<p>So what is the current recommendation? Do users need to go into <code>_target/deps/mathlib</code> and checkout master?</p>",
        "id": 134458814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537664003
    },
    {
        "content": "<p>I guess we can agree that leanpkg using a separate branch per Lean version was a good idea but didn't work out in practice, since nobody wants to maintain code for multiple Lean versions. We could definitely change that in Lean 4, ie. when development on leanpkg continues</p>",
        "id": 134458817,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537664017
    },
    {
        "content": "<p>The problem isn't maintaining multiple lean versions, it's not allowing other kinds of branches</p>",
        "id": 134458860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537664080
    },
    {
        "content": "<p>in particular master branches, which are going to be, ehm, rather common</p>",
        "id": 134458870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537664106
    },
    {
        "content": "<p>If you use the master branch for development against a Lean version that is not master, it does look like you don't agree with leanpkg at all how branches should be handled</p>",
        "id": 134458974,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537664298
    },
    {
        "content": "<p>Given the current leanpkg, the only real solution would be to rename the master branch to <code>lean-3.4.1</code>. If we don't want that, we'll have to change leanpkg... at some point</p>",
        "id": 134458994,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537664389
    },
    {
        "content": "<p>Is deleting the <code>lean-3.4.1</code> branch not a solution, or merely not a \"real solution\"?</p>",
        "id": 134459118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537664553
    },
    {
        "content": "<p>Then <code>leanpkg upgrade</code> will simply do nothing except complain, afaik</p>",
        "id": 134459128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537664621
    },
    {
        "content": "<p>When Lean 4 arrives we will be able to modify leanpkg at the same time, so is it reasonable to assume for now that there is only one version of Lean in existence?</p>",
        "id": 134459129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537664625
    },
    {
        "content": "<p>Hmm, let me try.</p>",
        "id": 134459132,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537664640
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/leanpkg/leanpkg/git.lean#L10-L14\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/leanpkg/leanpkg/git.lean#L10-L14\">https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/leanpkg/leanpkg/git.lean#L10-L14</a></p>",
        "id": 134459171,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537664670
    },
    {
        "content": "<p>I have a toy project here using <code>nightly-2018-04-06</code> and I changed the mathlib commit to an older version and ran leanpkg configure and verified that it checked out the old version. Then I ran <code>leanpkg upgrade</code> and it successfully upgraded to mathlib master:</p>\n<div class=\"codehilite\"><pre><span></span>rwbarton@bridge:~/lean/my_playground2$ leanpkg upgrade\nmathlib: trying to update _target/deps/mathlib to revision f53c776c2e09eff5358c5de6902e402c641a1673\n&gt; git checkout --detach f53c776c2e09eff5358c5de6902e402c641a1673    # in directory _target/deps/mathlib\nHEAD is now at f53c776... feat(analysis/topology): pi-spaces: topolopgy generation, prove second countability\nconfiguring my_playground2 0.1\nmathlib: trying to update _target/deps/mathlib to revision ca7f118058342a2f077e836e643d26e0ad1f3ca6\n&gt; git checkout --detach ca7f118058342a2f077e836e643d26e0ad1f3ca6    # in directory _target/deps/mathlib\nPrevious HEAD position was f53c776... feat(analysis/topology): pi-spaces: topolopgy generation, prove second countability\nHEAD is now at ca7f118... fix(docs/tactics.md): missing backquote, formatting\nrwbarton@bridge:~/lean/my_playground2$ echo $?\n0\nrwbarton@bridge:~/lean/my_playground2$ cat leanpkg.toml\n[package]\nname = &quot;my_playground2&quot;\nversion = &quot;0.1&quot;\nlean_version = &quot;nightly-2018-04-06&quot;\npath = &quot;src&quot;\n\n[dependencies]\nmathlib = {git = &quot;https://github.com/leanprover/mathlib&quot;, rev = &quot;ca7f118058342a2f077e836e643d26e0ad1f3ca6&quot;}\n</pre></div>",
        "id": 134459228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537664838
    },
    {
        "content": "<p>Is that something special about using nightly lean vs a stable version number?</p>",
        "id": 134459230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537664863
    },
    {
        "content": "<p>Yes, see the link above</p>",
        "id": 134459253,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537664882
    },
    {
        "content": "<p>Ah...</p>",
        "id": 134459273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537664903
    },
    {
        "content": "<blockquote>\n<p>When Lean 4 arrives we will be able to modify leanpkg at the same time, so is it reasonable to assume for now that there is only one version of Lean in existence?</p>\n</blockquote>\n<p>I suppose that is a reasonable assumption right now. Even if we don't change the leanpkg semantics, it will just work if Lean 4 porting efforts happen on the mathlib master branch and development for Lean 3 on the <code>lean-3.4.1</code> branch</p>",
        "id": 134459287,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1537664970
    },
    {
        "content": "<blockquote>\n<p>If you use the master branch for development against a Lean version that is not master, it does look like you don't agree with leanpkg at all how branches should be handled</p>\n</blockquote>\n<p>I think the master branch of lean is basically 3.4.1, so if this is what is needed then I'm okay with it. How do I sign up?</p>",
        "id": 134459337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537665055
    },
    {
        "content": "<p>So before I incorrectly \"realized\" that we could just delete the lean-3.4.1 branch, options I was considering were:</p>\n<ul>\n<li>Development happens on the lean-3.4.1 branch, not master. (You can set lean-3.4.1 as the \"default\" branch in the github UI to help with this--I did it for <a href=\"https://github.com/rwbarton/lean-homotopy-theory\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory\">https://github.com/rwbarton/lean-homotopy-theory</a>. But I don't know whether changing this for an existing project like mathlib with many forks would have some ramifications.)</li>\n<li>There are some obscure git features like <code>git symbolic-ref</code> which might allow us to make lean-3.4.1 an alias to master, but it's not clear whether they would really work for us or whether they can be configured through github.</li>\n<li>We could try to keep lean-3.4.1 up to date with master by some technical or semi-technical means (like a pre-push hook for mathlib committers--there are few enough of them that it should be feasible).</li>\n</ul>",
        "id": 134459715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537665902
    },
    {
        "content": "<p>Why don't people use the latest lean nightly? It's 3.4.1 with some broken stuff fixed.</p>",
        "id": 134469763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537689240
    },
    {
        "content": "<p>6th April, 20th April -- why? I use the June version</p>",
        "id": 134469804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537689269
    },
    {
        "content": "<p>Actually, there's an August version out now...</p>",
        "id": 134469964,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537689693
    },
    {
        "content": "<p>The fixes aren't so important to me. More important is whether switching back to nightlies will improve or exacerbate the <code>leanpkg</code> situation</p>",
        "id": 134470067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537689883
    },
    {
        "content": "<p>Is Kevin's blog post still the best option for installing lean + mathlib on windows?</p>",
        "id": 134470078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537689960
    },
    {
        "content": "<p>As far as I can tell. We really need something like elan for windows.</p>",
        "id": 134472306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537695039
    },
    {
        "content": "<p>elan works fine on Windows</p>",
        "id": 134472811,
        "sender_full_name": "Olli",
        "timestamp": 1537696250
    },
    {
        "content": "<p>the Windows specific issue I and a few others seem to run into is leanpkg failing with \"failed to start child process\", for which I have found no solution for</p>",
        "id": 134472866,
        "sender_full_name": "Olli",
        "timestamp": 1537696384
    },
    {
        "content": "<p>For which subcommands and under what precise circumstances does leanpkg fail on your machine? Does it output anything else?</p>",
        "id": 134473291,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537697367
    },
    {
        "content": "<p>any command that has to do with creating a project, adding dependencies etc. here is an example, where I have modified the leanpkg script (i.e. leanpkg.bat on Windows) to ignore the <code>@ECHO OFF</code> directive so that the commands getting ran are printed:</p>\n<div class=\"codehilite\"><pre><span></span>PS C:\\Users\\Olli\\Dev\\Lean&gt; leanpkg new playground\n\nC:\\Users\\Olli\\Dev\\Lean&gt;SET LEANDIR=C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\n\nC:\\Users\\Olli\\Dev\\Lean&gt;SET LIBDIR=C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\\lib\\lean\n\nC:\\Users\\Olli\\Dev\\Lean&gt;IF NOT EXIST C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\\lib\\lean SET LIBDIR=C:\\Users\\Olli\\.ela\nn\\toolchains\\stable\\bin\\../\n\nC:\\Users\\Olli\\Dev\\Lean&gt;SET LEAN_PATH=C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\\lib\\lean\\library;C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\\lib\\lean\\leanpkg\n\nC:\\Users\\Olli\\Dev\\Lean&gt;SET PATH=C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\\bin;C:\\Users\\Olli\\.elan\\bin;C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin;C:\\Users\\Olli\\lean-3.4.1-windows\\bin;;C:\\Users\\Olli\\AppData\\Local\\Programs\\Microsoft VS Code\\bin\n\nC:\\Users\\Olli\\Dev\\Lean&gt;lean --run C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\\lib\\lean\\leanpkg\\leanpkg\\main.lean new playground\nfailed to start child process\nPS C:\\Users\\Olli\\Dev\\Lean&gt;\n</pre></div>\n\n\n<p>I also tried modifying the script to get rid of the funny looking <code>\\../</code> part of the path, but I get the same result</p>",
        "id": 134474398,
        "sender_full_name": "Olli",
        "timestamp": 1537700020
    },
    {
        "content": "<p>This is what I have installed:</p>\n<div class=\"codehilite\"><pre><span></span>PS C:\\Users\\Olli\\Dev\\Lean&gt; lean --version\nLean (version 3.4.1, commit 17fe3decaf8a, Release)\nPS C:\\Users\\Olli\\Dev\\Lean&gt; elan --version\nelan 0.7.0 (0dd8c5ce4 2018-09-16)\n</pre></div>",
        "id": 134474483,
        "sender_full_name": "Olli",
        "timestamp": 1537700167
    },
    {
        "content": "<p>At your terminal what happens if you type <code>test -f foo</code></p>",
        "id": 134474485,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700220
    },
    {
        "content": "<p>this is PowerShell, so there is no such command</p>",
        "id": 134474491,
        "sender_full_name": "Olli",
        "timestamp": 1537700281
    },
    {
        "content": "<p>what are we trying to find out?</p>",
        "id": 134474530,
        "sender_full_name": "Olli",
        "timestamp": 1537700297
    },
    {
        "content": "<p>this is precisely the problem!</p>",
        "id": 134474536,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700362
    },
    {
        "content": "<p>(and maybe other things)</p>",
        "id": 134474537,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700373
    },
    {
        "content": "<p><code>leanpkg</code> attempts to spawn <code>test</code> when it runs, and it fails, so you see that message</p>",
        "id": 134474539,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700393
    },
    {
        "content": "<p>ah I see, so if I installed a version of that utility compiled for Windows, then that might be a workaround?</p>",
        "id": 134474605,
        "sender_full_name": "Olli",
        "timestamp": 1537700506
    },
    {
        "content": "<p>If you'd be willing to help diagnose, try opening <code>C:\\Users\\Olli\\.elan\\toolchains\\stable\\bin\\../\\lib\\lean\\leanpkg\\leanpkg\\main.lean</code> in a text editor, and navigate to line <code>199</code>. You should see a line:</p>\n<div class=\"codehilite\"><pre><span></span>  ex ← exists_file user_toml_fn,\n</pre></div>\n\n\n<p>Try replacing that line with</p>\n<div class=\"codehilite\"><pre><span></span> let ex := tt,\n</pre></div>\n\n\n<p>Does your command before work then?</p>",
        "id": 134474648,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700559
    },
    {
        "content": "<p>Yes I suppose having a unix-like environment with coreutils would work, but it really shouldn't be necessary. <code>leanpkg</code> should be better<br>\nIf this works for you I can get you a less dodgy solution cooked up in a second, since you're using elan</p>",
        "id": 134474660,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700600
    },
    {
        "content": "<p>Actually my line number is wrong.... But I still mean that line I quoted</p>",
        "id": 134474704,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700666
    },
    {
        "content": "<p>Should be line <code>196</code></p>",
        "id": 134474705,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700695
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">let</span> <span class=\"n\">user_toml_fn</span> <span class=\"o\">:=</span> <span class=\"n\">dot_lean_dir</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">leanpkg_toml_fn</span><span class=\"o\">,</span>\n  <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">write_manifest</span> <span class=\"o\">{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;_user_local_packages&quot;</span><span class=\"o\">,</span>\n      <span class=\"n\">version</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;1&quot;</span>\n    <span class=\"o\">}</span> <span class=\"n\">user_toml_fn</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span>C:\\Users\\Olli\\.elan\\toolchains\\stable\\lib\\lean\\leanpkg\\leanpkg\\main.lean:182:4: error: non-exhaustive match, the followi\nng cases are missing:\nmain &quot;configure&quot; list.nil ({data := _} :: _)\nmain &quot;configure&quot; ({data := _} :: _) _\nmain &quot;new&quot; list.nil _\nmain &quot;new&quot; [_] ({data := _} :: _)\nmain &quot;new&quot; (_ :: {data := _} :: _) _\nmain &quot;init&quot; list.nil _\nmain &quot;init&quot; [_] ({data := _} :: _)\nmain &quot;init&quot; (_ :: {data := _} :: _) _\nmain &quot;add&quot; list.nil _\nmain &quot;add&quot; [_] ({data := _} :: _)\nmain &quot;add&quot; (_ :: {data := _} :: _) _\nmain &quot;upgrade&quot; list.nil ({data := _} :: _)\nmain &quot;upgrade&quot; ({data := _} :: _) _\nmain &quot;install&quot; list.nil _\nmain &quot;install&quot; [_] ({data := _} :: _)\nmain &quot;install&quot; (_ :: {data := _} :: _) _\nmain _ _ _\nC:\\Users\\Olli\\.elan\\toolchains\\stable\\lib\\lean\\leanpkg\\leanpkg\\main.lean:196:5: error: command expected\nfailed to start child process\n</pre></div>",
        "id": 134474757,
        "sender_full_name": "Olli",
        "timestamp": 1537700812
    },
    {
        "content": "<p>you need a <code>let</code> in front of the <code>ex</code>, but I'm reading more now and this won't solve your problem :(( (it will still be the same)<br>\n<code>leanpkg</code> wants <code>test</code> and (unix) <code>mkdir</code></p>",
        "id": 134474819,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700953
    },
    {
        "content": "<p>I should be able to cook something up which does help you, though! Let me dig in a for a sec</p>",
        "id": 134474837,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537700982
    },
    {
        "content": "<p>thanks, yeah I now see what the issue is, I have been meaning to install Lean in WSL but so far haven't had any need to use libraries yet so I didn't get around to it</p>",
        "id": 134475008,
        "sender_full_name": "Olli",
        "timestamp": 1537701251
    },
    {
        "content": "<p>Yeah there are very many pieces which assume a unix-y environment, even just down to the directory separator character<br>\nSetting something like WSL up sounds like your best bet :)</p>",
        "id": 134475208,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537701759
    },
    {
        "content": "<p>(at the moment)</p>",
        "id": 134475210,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537701769
    },
    {
        "content": "<p>if making leanpkg natively support Windows is too tall of a task, I would say the next best thing would be improving the error messages for this particular situation</p>",
        "id": 134475526,
        "sender_full_name": "Olli",
        "timestamp": 1537702536
    },
    {
        "content": "<p>I didn't write it, but the comments in there make sure to say the intention was to add windows support later<br>\nI didn't realise that it was just broken on windows</p>\n<p>I might try to make a version that runs natively later this week</p>",
        "id": 134475862,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537703398
    },
    {
        "content": "<p>don't all the lean installation instructions assume a mingw installation?</p>",
        "id": 134477434,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537707104
    },
    {
        "content": "<p>I do have MinGW installed, but that does not include <code>test</code> which is not an executable but rather a shell built-in as far as I can tell</p>",
        "id": 134477522,
        "sender_full_name": "Olli",
        "timestamp": 1537707248
    },
    {
        "content": "<p>ahh. I never noticed this issue, because a bash shell is required to compile lean</p>",
        "id": 134477633,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537707493
    },
    {
        "content": "<p>So I have no idea about MinGW anything, but for what its worth I've built coreutils before and it has a <code>test</code> binary<br>\nIdk if it's in MinGW though</p>",
        "id": 134477915,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537708099
    },
    {
        "content": "<p>Yeah, on a normal unix system, <code>test</code> is both a shell built-in (for speed) and an executable</p>",
        "id": 134477924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537708185
    },
    {
        "content": "<p>I don't know how POSIX-like the MinGW shell is, but you can try <code>which test</code> or <code>command test</code> (if nothing happens, it worked)</p>",
        "id": 134477978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537708283
    },
    {
        "content": "<p>it's not included with the installation of MinGW that I have, and I've tried googling if I can download it separately from somewhere but unfortunately <code>test</code> is a rather tricky name when it comes to search engines</p>",
        "id": 134478025,
        "sender_full_name": "Olli",
        "timestamp": 1537708364
    },
    {
        "content": "<p>Yes, I found that as well...</p>",
        "id": 134478027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537708376
    },
    {
        "content": "<p>does MinGW ship with a shell?</p>",
        "id": 134478030,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537708386
    },
    {
        "content": "<p>Are you using MSYS?</p>",
        "id": 134478035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537708430
    },
    {
        "content": "<p>yes</p>",
        "id": 134478074,
        "sender_full_name": "Olli",
        "timestamp": 1537708456
    },
    {
        "content": "<p>doesn't msys have bash?</p>",
        "id": 134478075,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537708490
    },
    {
        "content": "<p>yes it does, I will try that next</p>",
        "id": 134478088,
        "sender_full_name": "Olli",
        "timestamp": 1537708555
    },
    {
        "content": "<p>The question is whether it has <code>/usr/bin/test</code> though, right?</p>",
        "id": 134478095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537708562
    },
    {
        "content": "<p>I'd be blown away if it didn't!</p>",
        "id": 134478136,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537708590
    },
    {
        "content": "<p>Well, yeah...</p>",
        "id": 134478138,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537708607
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>PS C:\\MSYS\\1.0\\bin&gt; ./bash.exe\nbash.exe&quot;-3.1$ which test\nwhich: test: unknown command\nbash.exe&quot;-3.1$ exit\n</pre></div>",
        "id": 134478194,
        "sender_full_name": "Olli",
        "timestamp": 1537708688
    },
    {
        "content": "<p>classic!</p>",
        "id": 134478200,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537708702
    },
    {
        "content": "<p>Git bash for windows has it</p>",
        "id": 134478206,
        "sender_full_name": "Olli",
        "timestamp": 1537708735
    },
    {
        "content": "<p>and there it does work as expected</p>",
        "id": 134478228,
        "sender_full_name": "Olli",
        "timestamp": 1537708774
    },
    {
        "content": "<p>I have no idea whether this is useful, but I did find through Google some log <a href=\"https://gist.github.com/choco-bot/eec2966667c148959f417ca93995222e#file-install-txt-L523\" target=\"_blank\" title=\"https://gist.github.com/choco-bot/eec2966667c148959f417ca93995222e#file-install-txt-L523\">https://gist.github.com/choco-bot/eec2966667c148959f417ca93995222e#file-install-txt-L523</a> where it installs something called <code>msys2-base-x86_64-20180531.tar</code> and on line 1054 it installs a certain <code>test.exe</code></p>",
        "id": 134478294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537708853
    },
    {
        "content": "<p>a few windows people here seem to use MSYS2, maybe its less insane! (I dare say that's why they have been oblivious to these issues on windows)</p>",
        "id": 134478303,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537708905
    },
    {
        "content": "<p>you can't just run bash exe</p>",
        "id": 134478459,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537709228
    },
    {
        "content": "<p>the mingw bash script sets a bunch of environment variables</p>",
        "id": 134478460,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537709236
    },
    {
        "content": "<p>also, I use MSYS2 with no issues</p>",
        "id": 134478461,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537709255
    },
    {
        "content": "<p>I see, yeah I will try installing MSYS2, and I just confirmed that I was able to add mathlib to a new project and it appears to work fine from VSCode which is good</p>",
        "id": 134478505,
        "sender_full_name": "Olli",
        "timestamp": 1537709295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126113\">@Olli</span>, so is your conclusion that leanpkg is not compatible with MSYS, but is compatible with MSYS2?</p>",
        "id": 134482297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537717642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> yes that appears to be correct</p>",
        "id": 134482841,
        "sender_full_name": "Olli",
        "timestamp": 1537718721
    },
    {
        "content": "<p>MSYS2 contains <code>test.exe</code></p>",
        "id": 134483308,
        "sender_full_name": "Olli",
        "timestamp": 1537719657
    },
    {
        "content": "<p>Is it also true that using the git-for-windows bash shell also works for you? I don't think I have msys2 on my windows 10 machine and I got leanpkg working there.</p>",
        "id": 134485601,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537724748
    },
    {
        "content": "<p>yes, I should probably have tried that first, but had totally forgot I even had it installed</p>",
        "id": 134486944,
        "sender_full_name": "Olli",
        "timestamp": 1537727619
    },
    {
        "content": "<p>That's great, thanks for being so patient and looking into it. Now we should look into editing these solutions into the various docs that are floating around out there...</p>",
        "id": 134487071,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537727869
    },
    {
        "content": "<p>I don't think git bash is fully usable for lean, although I forget why. I made some attempts to do this when I started and some necessary packages were missing with no clear way to get them</p>",
        "id": 134487567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537728846
    },
    {
        "content": "<p>Certainly CMD and powershell won't work</p>",
        "id": 134487588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537728921
    },
    {
        "content": "<p>I haven't tested Cygwin extensively, but it has its own issues to deal with and I found MSYS2 much easier</p>",
        "id": 134487622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537728963
    },
    {
        "content": "<p>I'd be curious to see if anyone makes lean work with WSL</p>",
        "id": 134487642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537729018
    },
    {
        "content": "<p>I've been using git bash up to now and haven't noticed anything wrong, but all I'm doing with regards to lean is just running <code>leanpkg upgrade</code> and <code>leanpkg build</code> occasionally. I did have to mess around with my console program to get unicode characters to print properly though.</p>",
        "id": 134487844,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537729372
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, did you ever sort this out? Can we just delete the <code>lean-3.4.1</code> branch of <code>mathlib</code>? I see that Mario has been occasionally updating, but it still requires manual intervention.</p>",
        "id": 136440118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1540419391
    },
    {
        "content": "<p>No, we can't just delete it unfortunately--leanpkg requires a branch matching the lean version to exist, when that version is a stable version</p>",
        "id": 136440150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540419451
    },
    {
        "content": "<p>I think the best \"solution\" we have for now is for somebody to figure out how to write a git hook that Mario can use to update the branch head automatically</p>",
        "id": 136440338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540419648
    },
    {
        "content": "<p>I am also using git bash without obvious problems.  I have msys2 installed but it is not in the path so that should not make a difference.<br>\n<span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , what did you do to fix the unicode?</p>",
        "id": 156376118,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1547825409
    },
    {
        "content": "<p>For me it was an issue with a setting in my console program, <a href=\"http://cmder.net/\" target=\"_blank\" title=\"http://cmder.net/\"><code>cmder</code></a> which seems to be a reskin or repackaging of <a href=\"https://conemu.github.io/\" target=\"_blank\" title=\"https://conemu.github.io/\"><code>conemu</code></a>. I had to add the setting <code>chcp utf8</code> to the environment per <a href=\"https://conemu.github.io/en/UnicodeSupport.html\" target=\"_blank\" title=\"https://conemu.github.io/en/UnicodeSupport.html\">this page</a>.</p>",
        "id": 156376424,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547825642
    },
    {
        "content": "<p>Thanks.  That suggestion doesn't seem immediately applicable to me as I am just using git bash in vscode (and git bash outside vscode seems to handle unicode correctly).  I poked around a bit more and found this page <a href=\"https://github.com/Microsoft/vscode/issues/60330\" target=\"_blank\" title=\"https://github.com/Microsoft/vscode/issues/60330\">https://github.com/Microsoft/vscode/issues/60330</a>, but the suggestions there seemed to have no effect.  I'll probably just leave it now as it is not really causing me any trouble, it's just untidy.</p>",
        "id": 156378147,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1547826861
    }
]