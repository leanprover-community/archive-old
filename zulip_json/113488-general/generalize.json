[
    {
        "content": "<p>Could someone build a tactic that allows us to generalize at hypotheses?</p>",
        "id": 125297691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524130993
    },
    {
        "content": "<p>Can you give an example?</p>",
        "id": 125329985,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524178271
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_target</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125342330,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524203569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 125342331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524203571
    },
    {
        "content": "<p>I see. So it reverts your hypotheses for you. That should be doable. I'll look into it. Any idea what it should be called?</p>",
        "id": 125445414,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524224016
    },
    {
        "content": "<p>I think one can extend generalize?</p>",
        "id": 125445638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524224459
    },
    {
        "content": "<p>i.e. still call it generalize, since it builds upon the current generalize (so there won’t be beackwards compatibility problem)</p>",
        "id": 125445648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524224496
    },
    {
        "content": "<p><code>generalize</code> is defined in the core library and they usually don't take pull requests there. We may have to give it a different name and put it in <code>mathlib</code></p>",
        "id": 125445755,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524224663
    },
    {
        "content": "<p>I’m not sure what I would call it. What do you think?</p>",
        "id": 125447182,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524227565
    },
    {
        "content": "<p><code>generalized_generalize</code></p>",
        "id": 125447233,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524227644
    },
    {
        "content": "<p>Can't you have tactic modifying tactics? Then you could just write <code>generalize simp</code> or <code>generalize wlog</code> and of course also <code>generalize generalize</code>.<br>\nLife would be so much <code>simp</code>ler.</p>",
        "id": 125447264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524227726
    },
    {
        "content": "<p>Or <code>ageneralize</code>. <code>a</code> for assumption. We can also call it <code>generalizea</code> (not to be confused with the Canadian <code>generalize</code>, eh?)</p>",
        "id": 125447272,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524227754
    },
    {
        "content": "<p>some tactics have <code>generalizing</code> clauses like <code>induction xs generalizing h</code></p>",
        "id": 125447334,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524227834
    },
    {
        "content": "<p>(kudos for the hockey stick, <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> )</p>",
        "id": 125447851,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524228657
    },
    {
        "content": "<p>Bienvenue, eh!</p>",
        "id": 125447949,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524228824
    },
    {
        "content": "<p>I have a truly marvelous idea</p>",
        "id": 125450421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524233097
    },
    {
        "content": "<p>I have a truly marvelous idea</p>",
        "id": 125450422,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524233097
    },
    {
        "content": "<p>we can call it <code>generalise</code></p>",
        "id": 125450423,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524233097
    },
    {
        "content": "<p>You are truly evil, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 125450448,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524233150
    },
    {
        "content": "<blockquote>\n<p>You are truly evil, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>\n</blockquote>\n<p>Don't forget we learned this morning that Kenny is nothing but Kevin's evil part.</p>",
        "id": 125452634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524236590
    },
    {
        "content": "<p>I wasn't there for that. It all adds up ... his constructivism should really have been a dead give away</p>",
        "id": 125452831,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524236827
    },
    {
        "content": "<p>Btw <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I just made a pull request with your requested feature:</p>\n<p><a href=\"https://github.com/leanprover/mathlib/pull/110\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/110\">https://github.com/leanprover/mathlib/pull/110</a></p>\n<p>Let me know if you like it!</p>",
        "id": 125452840,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524236858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> does it work with more than one local hypothesis?</p>",
        "id": 125453447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524237792
    },
    {
        "content": "<p>Yes it does</p>",
        "id": 125453452,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524237807
    },
    {
        "content": "<p>I like it, thanks</p>",
        "id": 125453456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524237812
    },
    {
        "content": "<p>let's test if it works with induction</p>",
        "id": 125453463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524237822
    },
    {
        "content": "<p>could you test if you can generalize a list and then do induction?</p>",
        "id": 125453469,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524237837
    },
    {
        "content": "<p>Can you show me what you have in mind?</p>",
        "id": 125453519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524237877
    },
    {
        "content": "<p>yes, wait a minute</p>",
        "id": 125453523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524237894
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize_a</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n  <span class=\"o\">{</span> <span class=\"n\">guard_hyp</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span>\n  <span class=\"o\">{</span> <span class=\"n\">guard_hyp</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span> <span class=\"o\">},</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125453683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524238114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> there you go</p>",
        "id": 125453686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524238118
    },
    {
        "content": "<p>I had to change it to: </p>\n<div class=\"codehilite\"><pre><span></span>example (α : Sort*) (L₁ L₂ L₃ : list α)\n  (H : L₁ ++ L₂ = L₃) : L₁ ++ L₂ = L₂ :=\nbegin\n  generalize_a h : L₁ ++ L₂ = L at H,\n  induction L with hd tl ih,\n  case list.nil\n  { tactic.cleanup,\n    change list.nil = L₃ at H,\n    admit },\n  case list.cons\n  { change hd :: tl = L₃ at H,\n    admit },\nend\n</pre></div>\n\n\n<p>but it worked</p>",
        "id": 125453952,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524238521
    },
    {
        "content": "<p>why?</p>",
        "id": 125453958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524238531
    },
    {
        "content": "<p>but thanks</p>",
        "id": 125453963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524238545
    },
    {
        "content": "<p><code>guard_hyp</code> and <code>guard_target</code> are fairly intolerant. If your expressions contain meta variables and that they don't match, it will fail. At least, I believe that's the reason</p>",
        "id": 125454026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524238596
    },
    {
        "content": "<p>I see</p>",
        "id": 125454027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524238604
    },
    {
        "content": "<p>And you're welcome :)</p>",
        "id": 125454034,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524238614
    }
]