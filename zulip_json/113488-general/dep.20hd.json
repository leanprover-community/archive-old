[
    {
        "content": "<p>I am just trying to prove infectivity of :: directly (I know I can use injection). But lean doesn't like my dependent hd. Maybe I am overlooking something obvious?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Hd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Hd</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit.star</span>\n<span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 225538822,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1612788715
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Hd</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit.star</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 225538990,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612788785
    },
    {
        "content": "<p>Why the equation compiler decides to give a \"syntax error\" instead of saying there are too many arguments I don't know.</p>",
        "id": 225539177,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1612788876
    },
    {
        "content": "<p>Ah stupid me. I always forget that lean doesn't repeat the function name like most functional languages.</p>",
        "id": 225539549,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1612788990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> in private correspondence you have indicated to me that you don't like the syntax of Lean 3's equation compiler, and you showed me examples of syntax in other languages which you said were \"more modern\". You know we have a <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream now lean 4 has been released. I wonder whether the more powerful elaborator of lean 4 would be more to your taste, and I think that right now might be a really good time to have a discussion about how far things can be pushed -- the lean 4 devs are watching that stream and seem to me to be very receptive to new ideas right now. Maybe you should post some of your comments about the lean 3 equation compiler there and ask if the things you're looking for are in lean 4?</p>",
        "id": 225540737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612789530
    },
    {
        "content": "<p>Now I have another problem when trying to use hd to prove infectivity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Hd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Hd</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit.star</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inj_hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"o\">::</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">::</span> <span class=\"n\">l'</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>It says unexpected argument at application hd (a' :: l') and that it would expect a::l ???</p>",
        "id": 225541101,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1612789694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/dep.20hd/near/225540737\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> in private correspondence you have indicated to me that you don't like the syntax of Lean 3's equation compiler, and you showed me examples of syntax in other languages which you said were \"more modern\". You know we have a <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream now lean 4 has been released. I wonder whether the more powerful elaborator of lean 4 would be more to your taste, and I think that right now might be a really good time to have a discussion about how far things can be pushed -- the lean 4 devs are watching that stream and seem to me to be very receptive to new ideas right now. Maybe you should post some of your comments about the lean 3 equation compiler there and ask if the things you're looking for are in lean 4?</p>\n</blockquote>\n<p>I can do but my impression was that people in the lean community got used to the syntax (which actually originates from coq).</p>",
        "id": 225541333,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1612789840
    },
    {
        "content": "<p>Lean 4 has a super-powerful macro system so what I am really interested in is whether the features you wanted can be emulated by these macros. It would be a good test for the system.</p>",
        "id": 225541405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612789887
    },
    {
        "content": "<p>People like you who have experience with multiple provers and languages can bring new ideas to Lean and what I'm saying is that right now is a good time to bring those ideas.</p>",
        "id": 225541514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612789933
    },
    {
        "content": "<p>So far I have been really impressed with what can be done. For example lean 3 has a <code>calc</code> environment and it's not in lean 4 but when someone mentioned this, someone else just knocked up a macro to emulate it.</p>",
        "id": 225541625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612790000
    },
    {
        "content": "<p>All this is happening in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>",
        "id": 225541660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612790022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/dep.20hd/near/225541101\">said</a>:</p>\n<blockquote>\n<p>Now I have another problem when trying to use hd to prove injectivity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Hd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Hd</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit.star</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inj_hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"o\">::</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">::</span> <span class=\"n\">l'</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>It says unexpected argument at application hd (a' :: l') and that it would expect a::l ???</p>\n</blockquote>\n<p>The default elaboration strategy is outside-in and expects the type of the right-hand side to be <code>Hd (a :: l)</code> and doesn't consider that this might be the case even if the argument is not <code>a :: l</code>. You can force it to elaborate inside-out by inserting a <code>: _</code> inside those handy extra parentheses on the right-hand side.</p>",
        "id": 225546775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612792478
    }
]