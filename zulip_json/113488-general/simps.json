[
    {
        "content": "<p>Is there some way to ask <code>simps</code> which lemmas it has added?</p>",
        "id": 176768317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569606252
    },
    {
        "content": "<p>No. Currently the best methods are <code>#print prefix</code> (which will give way too much if your namespace is big) or autocompletion.</p>\n<p>Do you want a <code>@[simps?]</code> which also prints which declarations it has added?</p>",
        "id": 176772911,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569609169
    },
    {
        "content": "<p><code>@[simps?]</code> seems like a nice feature.</p>",
        "id": 176780186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569613775
    },
    {
        "content": "<p>I think I would rather go for a <code>#print</code>-like command. Attributes usually do not have such options. On the other hand, if people know the options for <code>#print</code>, a similar command would mesh better with what they already know</p>",
        "id": 176782024,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569614983
    },
    {
        "content": "<p><code>@[simps?]</code> should never show up in the final version of a file. <br>\nIt is probably both the easiest write in a file (just adding a question mark to an attribute you already have) and to implement (since I can just let my tactics return some information)</p>",
        "id": 176784396,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569616830
    },
    {
        "content": "<p>And <code>#print</code> should never appear either. I'm just thinking of the workflow of using Lean. I think it's better to aim for a consistent way of using it. That makes learning the tool and the language much easier. To me, it goes in the column of keeping arbitrary complexity down</p>",
        "id": 176786968,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569619106
    },
    {
        "content": "<p>A lot of tactics give extra information when adding <code>?</code>, so it's pretty similar to that (maybe more attributes should print debug info when <code>?</code> is added).</p>",
        "id": 176787031,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569619177
    },
    {
        "content": "<p>It is a common convention for tactics but not attributes. I think I would support it if the <code>?</code> option printed more than just a list of declarations added to the environment. Maybe some information about the tactics using the attribute for instance.</p>",
        "id": 176787745,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569619760
    },
    {
        "content": "<p>I've been away from zulip for a few days, and just came here specifically to ask for <code>@[simps?]</code>, and I'm very glad to have been pre-empted.</p>",
        "id": 177019183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569902124
    },
    {
        "content": "<p>Also --- I noticed <code>@[simps]</code> fails if the definition uses a <code>let</code>. Not super important.</p>",
        "id": 177022326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569904241
    },
    {
        "content": "<p>Oh, you might not have seen--I have a diff with a lot of <code>simps</code> for category theory, which I haven't PRed yet</p>",
        "id": 177022661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569904814
    },
    {
        "content": "<p>Oops, okay, I didn't see that.</p>",
        "id": 177022934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569905338
    },
    {
        "content": "<p>Where did you get to?</p>",
        "id": 177022940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569905346
    },
    {
        "content": "<p>I ran into one problem in <code>category_theory/products/associator.lean</code>, where <code>@[simps]</code> on <code>associator</code> and <code>inverse_associator</code> didn't seem to have the desired effect. Not quite sure why.</p>",
        "id": 177022999,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569905411
    },
    {
        "content": "<p>I'll stop in that case, and put up what I did so far.</p>",
        "id": 177023019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569905458
    },
    {
        "content": "<blockquote>\n<p>Also --- I noticed <code>@[simps]</code> fails if the definition uses a <code>let</code>. Not super important.</p>\n</blockquote>\n<p>I did not think about <code>let</code> expressions. What is the example in the library where it fails.</p>",
        "id": 177062429,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569941326
    },
    {
        "content": "<blockquote>\n<p>I ran into one problem in <code>category_theory/products/associator.lean</code>, where <code>@[simps]</code> on <code>associator</code> and <code>inverse_associator</code> didn't seem to have the desired effect. Not quite sure why.</p>\n</blockquote>\n<p>It is currently the expected behavior that <code>@[simps]</code> produces different lemmas for this. <code>@[simps]</code> has no idea which structures you want to \"go into\" and which structures you don't, so currently it creates <code>associator_obj_fst</code>, <code>associator_obj_snd_fst</code> and <code>associator_obj_snd_snd</code> (and same for <code>map</code>). <br>\nAt some point, you might be able to write <code>@[simps associator_obj associator_map]</code> to get your desired output, but that is currently not the case. For now you probably shouldn't use <code>@[simps]</code> on this declaration. If you have an algorithmic method of deciding when to not \"go into\" a structure, let me know.</p>",
        "id": 177063024,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569941699
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Also --- I noticed <code>@[simps]</code> fails if the definition uses a <code>let</code>. Not super important.</p>\n</blockquote>\n<p>I did not think about <code>let</code> expressions. What is the example in the library where it fails.</p>\n</blockquote>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/cones.lean#L392\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/cones.lean#L392\">cones.lean</a>:</p>\n<div class=\"codehilite\"><pre><span></span>def map_cone_inv [is_equivalence H]\n  (c : cone (F ⋙ H)) : cone F :=\nlet t := (inv H).map_cone c in\nlet α : (F ⋙ H) ⋙ inv H ⟶ F :=\n  ((whisker_left F (is_equivalence.unit_iso H).inv) : F ⋙ (H ⋙ inv H) ⟶ _) ≫ (functor.right_unitor _).hom in\n{ X := t.X,\n  π := ((category_theory.cones J C).map α).app (op t.X) t.π }\n</pre></div>",
        "id": 177121149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569991244
    },
    {
        "content": "<p>Thanks for the explanation in the associator case. I agree it's not obvious what to do here.</p>",
        "id": 177121192,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569991322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Of course, in this case, I won't be able to generate the lemma <code>map_cone_inv_X</code> as currently stated, because that lemma unfolds some definitions. I could probably generate a lemma like the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map_cone_inv</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">inv</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cone</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span>\n</pre></div>\n\n\n<p>Do we sometimes want to keep the <code>let</code> expression, like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map_cone_inv</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cone</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 177431036,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570309033
    },
    {
        "content": "<blockquote>\n<p>Also --- I noticed <code>@[simps]</code> fails if the definition uses a <code>let</code>. Not super important.</p>\n</blockquote>\n<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/1626\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1626\">#1626</a></p>",
        "id": 179280505,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572300095
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1630\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1630\">#1630</a> allows us to use <code>simps</code> for functors on product categories.</p>",
        "id": 179297052,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572319229
    },
    {
        "content": "<p>I also tried to make <code>simps</code> useful for new <code>category</code> instances. I added an option to shorten the name (so that we generate the name <code>my_category_hom</code> instead of <code>my_category_to_category_struct_to_has_hom_hom</code>). Then I realized that there is a bigger problem: the simp-lemmas you wrote by hand use things like <code>my_category.to_category_struct</code>, but the automatically generated lemmas use the definiens of <code>my_category.to_category_struct</code>. It might be tricky to fold these definitions in.</p>",
        "id": 179297374,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572319743
    },
    {
        "content": "<p>Is there a reason that <code>whisker_left</code> and <code>whisker_right</code> are defined as projections of <code>whiskering_left</code>/<code>whiskering_right</code>? The following feels more natural to me: (not only because we can use <code>@[simps]</code>, but also because it's natural to factor a field out of the definition, if you're going to give it a name anyway)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒟</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ℰ</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₃</span><span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span> <span class=\"err\">𝒟</span> <span class=\"n\">ℰ</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">whisker_left</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">⋙</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">⋙</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">whisker_right</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"err\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"err\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"bp\">;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">whiskering_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"err\">⋙</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">whisker_left</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">τ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n      <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"kn\">end</span> <span class=\"o\">},</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">whiskering_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"o\">((</span><span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"err\">⋙</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">whisker_right</span> <span class=\"n\">α</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">τ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n      <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"kn\">end</span> <span class=\"o\">},</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 179298047,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572320830
    },
    {
        "content": "<p>One thing which I might add in the future is to automatically generate lemmas like <code>cone_of_cocone_left_op_π_app</code> for <code>cone_of_cocone_left_op</code> (in <code>category_theory.limits.cones</code>). <br>\nCurrently, if you write <code>attribute [simps π_app] cone_of_cocone_left_op</code> then when the tactic reaches the <code>app</code> field, it fails. This is because it needs <code>cone_of_cocone_left_op.π</code> to be a constructor to \"look into\". Instead, I can just apply <code>app</code> to both the LHS and the RHS, and then call <code>simp</code> on the RHS to generate the lemma.<br>\nThis should automatically generate <code>cone_of_cocone_left_op_π_app</code>.</p>",
        "id": 179298411,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572321532
    },
    {
        "content": "<p>Oh, I now see <a href=\"https://github.com/leanprover-community/mathlib/issues/1613\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1613\">#1613</a>. That answers my question 2 messages ago.</p>",
        "id": 179298536,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572321741
    },
    {
        "content": "<p>Can I somehow query the list of lemmas generated by <code>simps</code>? Or print all lemmas in a namespace?</p>",
        "id": 191698174,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585106700
    },
    {
        "content": "<p>Already guessed name in my case</p>",
        "id": 191698254,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585106821
    },
    {
        "content": "<p>Do you mean <code>#print prefix your_namespace</code>?</p>",
        "id": 191708166,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585121899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> This is from the docs of <code>simps</code></p>\n<blockquote>\n<p>Example:<br>\n<code>lean\n  def equiv.simps.inv_fun (e : α ≃ β) : β → α := e.symm\n  @[simps] def equiv.trans (e₁ : α ≃ β) (e₂ : β ≃ γ) : α ≃ γ :=\n  ⟨e₂ ∘ e₁, e₁.symm ∘ e₂.symm⟩\n  </code><br>\n  generates<br>\n<code>\n  @[simp] lemma equiv.trans_to_fun : ∀ {α β γ} (e₁ e₂) (a : α), ⇑(e₁.trans e₂) a = (⇑e₂ ∘ ⇑e₁) a\n  @[simp] lemma equiv.trans_inv_fun : ∀ {α β γ} (e₁ e₂) (a : γ),\n    ⇑((e₁.trans e₂).symm) a = (⇑(e₁.symm) ∘ ⇑(e₂.symm)) a\n  </code></p>\n</blockquote>\n<p>And here's my question:<br>\nWouldn't it be better if this generated </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans_to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">e₁</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">e₂</span> <span class=\"err\">∘</span> <span class=\"err\">⇑</span><span class=\"n\">e₁</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>instead? It could chain with <code>function.comp_apply</code> to get the original version, but it would also apply in \"unapplied\" situations (sorry for the pun).</p>",
        "id": 207221581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597723577
    },
    {
        "content": "<p>There is an option for that: <code>@[simps {fully_applied := ff}]</code>. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simps_cfg\">docs#simps_cfg</a>, there are some other nice options, too.</p>\n<p>I don't know what the best form for simp-lemmas are. Most simp-lemmas we write in a fully applied version, I believe. Is there any downside to the non-fully applied version?</p>",
        "id": 207222422,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597724915
    },
    {
        "content": "<p>That it applies less often?</p>",
        "id": 207222509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597725063
    },
    {
        "content": "<p>But I guess that in practice it doesn't really matter that much</p>",
        "id": 207222526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597725096
    },
    {
        "content": "<p>Thanks for teaching me about that option!</p>",
        "id": 207222581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597725128
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 207227641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597732667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I must say, I really appreciate that the error message with <code>simps</code> comes with suggestions. So useful!</p>",
        "id": 207264487,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597760233
    },
    {
        "content": "<p>We still need to put the tactic suggestions in the docstrings of <code>exists</code> etc...</p>",
        "id": 207264555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597760269
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 207264936,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597760423
    },
    {
        "content": "<p>I have a third situation where the type of a field is a function that returns a function (the latter function being of the form <code>fin n -&gt; R</code>) and ideally <code>simps</code> would produce a lemma which is applied to only the first argument.</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">coords</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">coords</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">++</span> <span class=\"n\">coords</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>    <span class=\"c1\">-- here `++` is notation for concatenating `fin n -&gt; R`</span>\n</code></pre></div>\n\n\n<p>I kind of thought it would work that way by default, where <code>simps</code> would use the shape of the definition to decide how many times to eta expand the lemma. Looks like there isn't a setting for this?</p>",
        "id": 207265072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597760490
    },
    {
        "content": "<p>Same way <code>simps</code> uses record construction syntax to decide when to apply projections (right?)</p>",
        "id": 207265171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597760535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> You mean the suggestion to add <code>{rhs_md := semireducible}</code>? I'm glad that was helpful!</p>",
        "id": 207276768,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597765742
    },
    {
        "content": "<p>I actually just used this <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> today as well <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 207277084,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597765880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>: You're saying <code>@[simps]</code> should apply the functions to an argument only if you used a lambda (or at least, that there should be an option for that)? That is currently not an option indeed, but I could make it one.</p>",
        "id": 207277964,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597766290
    },
    {
        "content": "<p>Yes, that's right</p>",
        "id": 207278026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597766315
    },
    {
        "content": "<p>It's not really a big deal for me, I could easily write all ~6 simp lemmas I need by hand. But generating lemmas based on the definition term rather than its type seems consistent with the way we treat structures.</p>",
        "id": 207278354,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597766456
    }
]