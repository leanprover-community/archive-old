[
    {
        "content": "<p>I realise in my talk I call it a \"tactic\" but I'm not at all sure that that's what it is. What's the correct name for it?</p>",
        "id": 203876446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594755007
    },
    {
        "content": "<p>An attribute</p>",
        "id": 203876496,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594755030
    },
    {
        "content": "<p>But a tactic is executed every time an attribute is given right?</p>",
        "id": 203876676,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1594755113
    },
    {
        "content": "<p>As opposed to tagging something with <code>simp</code>, where nothing really happens until someone calls <code>simp</code> later on.</p>",
        "id": 203876801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594755159
    },
    {
        "content": "<p>For some attributes, correct (for other attributes the executed tactic is <code>tactic.skip</code> so then it's technically also correct)</p>",
        "id": 203876802,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594755160
    },
    {
        "content": "<p>So is there a tactic behind the <code>[to_additive]</code> attribute, which humans never run?</p>",
        "id": 203876928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594755233
    },
    {
        "content": "<p>There's also a nuance between what you use in your proof scripts and what is used in an attribute. They are both using the <code>tactic</code> monad which encapsulates most of the meta programming features but I wouldn't say <code>to_additive</code> is a tactic</p>",
        "id": 203877130,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594755318
    },
    {
        "content": "<p>yes, it's written in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_additive.attr/src\">src#to_additive.attr</a></p>",
        "id": 203877189,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594755352
    },
    {
        "content": "<p>I would call it a code generator or a meta program if you want to be more specific than attribute</p>",
        "id": 203877190,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594755352
    },
    {
        "content": "<p>Yeah, I agree with Simon, \"metaprogram\" seems like the right term here.</p>",
        "id": 203879048,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594756309
    },
    {
        "content": "<p>Thanks all</p>",
        "id": 203885010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594759162
    },
    {
        "content": "<p>I agree with Rob, and disagree with Simon (metaprogram should be spelled as one word). ;)</p>",
        "id": 203926385,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594800269
    },
    {
        "content": "<p>Would a more general version of <code>to_additive</code> be desirable? </p>\n<p>To <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> my question, for example, C is equipped with a <code>has_mul</code> which forms a group, but if I need to define another multiplication for it and that multiplication also forms a multiplicative group, how can I do it? Should I use meta program to \"copy\" everything from the group for <code>has_mul</code>?</p>",
        "id": 204053452,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594884697
    },
    {
        "content": "<p>No you have to prove it all yourself if you have a new group. Then, many theorems are polymorphic and will work regardless of what your multiplicative group is.</p>",
        "id": 204081478,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594905452
    },
    {
        "content": "<p>You might want to define a type synonym for <code>C</code> to make it clear when you use one group vs the other</p>",
        "id": 204081599,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594905492
    },
    {
        "content": "<p>Thanks, after some experiments locally, I figured out what you mean by:</p>\n<ol>\n<li>proving(via <code>instance</code>) <code>group C</code> with different <code>mul</code> than the <code>mul</code> in <code>has_mul C</code> (I must haven't pay enough attention when reading <code>data.complex.basic</code>)</li>\n<li>how to deal with the type synonym for <code>C</code> (I used <code>def</code> so everything has to be proven for <code>C'</code>, although it also turns out that type synonym is not needed by 1 but only for making it more clear, just as you suggested literally).</li>\n</ol>",
        "id": 204172519,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594964575
    }
]