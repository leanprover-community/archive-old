[
    {
        "content": "<p>I've created a roadmap for constructing an algebraic closure of a field: <a href=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\">https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md</a></p>",
        "id": 135781672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539530304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 135781674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539530307
    },
    {
        "content": "<p>I just thought of another approach that is very similar: we can construction the \"perfect closure\" of a ring of char p &gt; 0, and then for a field F we consider its perfect closure Fp, and then do the big polynomial ring thing to Fp instead, and we obtain the field K, and we prove that K is algebrically closed. This would require transitivity of integrality though.</p>",
        "id": 135782970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539532679
    },
    {
        "content": "<p>Never mind, forget this other approach.</p>",
        "id": 135783254,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539533073
    },
    {
        "content": "<p>Do we even have char p?</p>",
        "id": 135783607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539533700
    },
    {
        "content": "<p>lol no we don't have</p>",
        "id": 135783619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539533725
    },
    {
        "content": "<p>So you prefer this approach to the \"now repeat steps 22-27 infinitely often and take the direct limit\"? Integral elements form a subring -- you will have to wait a bit for this I guess. The direct limit approach avoids this. I guess Mario already explained why he thinks your approach is better though.</p>",
        "id": 135786179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539537966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you like perfect closure?</p>",
        "id": 135787184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539539998
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">padics</span><span class=\"bp\">.</span><span class=\"n\">padic_norm</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">binomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_pow_char</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_pow</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">choose_self</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">add_left_inj</span><span class=\"o\">],</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">choose_zero_right</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">one_pow</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"n\">add_pow_char</span> <span class=\"n\">hp</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">perfect_closure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)),</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₃</span><span class=\"o\">,</span> <span class=\"n\">x₃</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">w₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span>  <span class=\"n\">x₁</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₃</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">w₁</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₃</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₁</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₃</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₃</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₁</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x₃</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₁</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h₂</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x₃</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 135787223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539540004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> For any field F, according to my approach, I build a big field extension L, and then extract the maximally purely inseparable subfield K, and then use this K to make things work. Here, K turns out to be the perfect closure of F. However, I can define the perfect closure of F constructively as a direct limit of F, as I have typed above. We can do the big field extension on top of the perfect closure of F instead of directly over F. This would increase the complexity of the definition of algebraic closure, but I feel like this approach is better because we can have a computable perfect closure.</p>",
        "id": 135790417,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539545816
    },
    {
        "content": "<p>What do you think?</p>",
        "id": 135790424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539545825
    },
    {
        "content": "<p>Can you remind me what \"the maximally purely inseparable subfield\" of a field extension is? I thought maximal separable subextensions behaved well but inseparable extensions behaved less well. But as I told you once before I don't know this stuff at all; I only know what I lecture in Galois theory. I don't need to know about inseparable extensions at all in my work.</p>",
        "id": 135790852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539546579
    },
    {
        "content": "<p>Let's call this big operation Big(F). So if F is a field, then Big(F) is an algebraic extension of F. The shortcut way to construct algebraic closure is basically direct limit of Big(...Big(Big(F))...).</p>\n<p>The defining property of Big(F) is that <strong>everything in F[X] has a root in Big(F)</strong>.</p>\n<p>Now, for the proper way, we still look at Big(F), but we extract the maximal purely inseparable subextension of Big(F) and call it Perf(F). Yes, in general you shouldn't look at the maximal purely inseparable subextension, but for this case it works fine. Now, we prove that <strong>everything in Perf(F)[X] has a root in Big(F)</strong>.</p>\n<p>My observation is that this Perf(F) turns out to be the perfect closure of F, and is potentially useful, but unfortunately it's noncomputable here.</p>\n<p>My new proposal is that we should define Perf(F) computable as I've defined above, and look at Big(Perf(F)) as the algebraic closure of F instead. I'm saying that this increases complexity but we're using the same property anyway (i.e. <strong>everything in Perf(F)[X] has a root in _</strong>) and if we do this then we have a computable perfect cosure.</p>",
        "id": 135791109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539547036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I hope you can understand this and then explain this in a better way. I'm not particularly good at explaining stuff.</p>",
        "id": 135791523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539547797
    },
    {
        "content": "<p>I don't know anything about char p.</p>",
        "id": 135791628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539547940
    },
    {
        "content": "<p>I am still confused about this inseparable sub</p>",
        "id": 135791632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539547972
    },
    {
        "content": "<p>I don't even know what inseparable means. Does it mean \"not separable\"?</p>",
        "id": 135791637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539547983
    },
    {
        "content": "<p>You'll have to send me some links or something. I'm distracted by real life</p>",
        "id": 135791644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539548000
    },
    {
        "content": "<p>For K/F and x in K, x is \"purely inseparable\" if x^(p^n) in F for some n.</p>",
        "id": 135791650,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548028
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/09HD\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/09HD\">https://stacks.math.columbia.edu/tag/09HD</a></p>",
        "id": 135791698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548071
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/046W\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/046W\">https://stacks.math.columbia.edu/tag/046W</a></p>",
        "id": 135791700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548073
    },
    {
        "content": "<p>perfect thanks</p>",
        "id": 135791704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539548091
    },
    {
        "content": "<p>right, the second link is about perfect closure</p>",
        "id": 135791719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548123
    },
    {
        "content": "<p>Ok I understand what you're doing.</p>",
        "id": 135792161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539548769
    },
    {
        "content": "<p>nice</p>",
        "id": 135792164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548779
    },
    {
        "content": "<p>maybe you should start caring about char p :P</p>",
        "id": 135792166,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548788
    },
    {
        "content": "<p>Is it true that if L/K is some finite extension of fields and the maximal purely inseparable subextension of L is K again, then L/K is separable? I suspect that this is not true.</p>",
        "id": 135792176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539548826
    },
    {
        "content": "<p>no it isn't true, I think</p>",
        "id": 135792184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548841
    },
    {
        "content": "<p>again, I'm not talking about the maximal purely inseparable subextension in general.</p>",
        "id": 135792187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548856
    },
    {
        "content": "<p>Ok so we have finally isolated the thing which I was worried about.</p>",
        "id": 135792193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539548862
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 135792198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539548877
    },
    {
        "content": "<p>I'm talking about the perfect closure.</p>",
        "id": 135792235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548883
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 135792240,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548887
    },
    {
        "content": "<p>yes sorry, it's max insep sub you can't do, right?</p>",
        "id": 135792241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539548915
    },
    {
        "content": "<p>by the way your definition of char p is nonstandard, although I'm not sure whether I should care</p>",
        "id": 135792242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539548928
    },
    {
        "content": "<p>make up your mind <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> :P</p>",
        "id": 135792252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539548969
    },
    {
        "content": "<p>you forgot to say that <code>(n : A) != 0</code> for <code>n &lt; p</code></p>",
        "id": 135792256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539548979
    },
    {
        "content": "<p>In the case where p is prime and 1 != 0, it's actually equivalent</p>",
        "id": 135792261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539548999
    },
    {
        "content": "<p>I know</p>",
        "id": 135792305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549011
    },
    {
        "content": "<blockquote>\n<p>yes sorry, it's max insep sub you can't do, right?</p>\n</blockquote>\n<p>I'll have to ask my friend</p>",
        "id": 135792311,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549032
    },
    {
        "content": "<p>but we will need a classification theorem about the existence of a characteristic, and I don't think there is any way to make that constructive</p>",
        "id": 135792316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549059
    },
    {
        "content": "<p>So we have this abstract (and non-constructive) construction in 22-27 of <a href=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\">https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md</a> which goes from a field F to an algebraic extension L/F with the property that every irred poly in F[X] has a root in L.</p>",
        "id": 135792326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but if we know the char then we can make it constructive</p>",
        "id": 135792329,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549108
    },
    {
        "content": "<p>Kenny's observation is that a second way to construct L would be to start with F, then build its perfect closure (which is the direct limit F -&gt; F -&gt; F -&gt; ... where all the maps are x-&gt;x^p)</p>",
        "id": 135792372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549146
    },
    {
        "content": "<p>and then apply the non-constructive construction to the perfection instead. Kenny is observing that this \"spits out the same L\"</p>",
        "id": 135792380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549217
    },
    {
        "content": "<blockquote>\n<p>yes sorry, it's max insep sub you can't do, right?</p>\n</blockquote>\n<p>my friend says if K/F is insep then the max insep sub is K/F</p>",
        "id": 135792616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549670
    },
    {
        "content": "<p>It's the phrase \"the max insep sub\" which I'm objecting to. I have no doubt it exists sometimes</p>",
        "id": 135792659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549727
    },
    {
        "content": "<p>I'm not objecting, I'm trying to remember what one can and cannot do.</p>",
        "id": 135792663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549744
    },
    {
        "content": "<p>There's some Keith Conrad notes on this stuff I think.</p>",
        "id": 135792665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549753
    },
    {
        "content": "<p>ok.</p>",
        "id": 135792666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549757
    },
    {
        "content": "<p>in general you can find the max sep sub and the max purely insep sub</p>",
        "id": 135792669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549767
    },
    {
        "content": "<p>right</p>",
        "id": 135792670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549771
    },
    {
        "content": "<p>given K/F, if S(K) is the max sep sub, then [S(K):F] = [K:F]_s</p>",
        "id": 135792673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549783
    },
    {
        "content": "<p>(is this an adjunction?)</p>",
        "id": 135792678,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549788
    },
    {
        "content": "<p>Yes, if you even know the negation of <code>char_zero</code> you can construct a finite characteristic</p>",
        "id": 135792688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549838
    },
    {
        "content": "<p>Unfortunately I think a lot of ring theory is hard to do on characteristic almost-zero</p>",
        "id": 135792737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549873
    },
    {
        "content": "<p>what do you mean by almost-zero</p>",
        "id": 135792749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549904
    },
    {
        "content": "<blockquote>\n<p>Yes, if you even know the negation of <code>char_zero</code> you can construct a finite characteristic</p>\n</blockquote>\n<p>that's nice</p>",
        "id": 135792754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549913
    },
    {
        "content": "<p>I mean in that intuitionistic middle ground between finite and zero characteristic, where you've looked for a while and it looks pretty zero but you can't be sure</p>",
        "id": 135792826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539550032
    },
    {
        "content": "<p>I see</p>",
        "id": 135792833,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539550046
    },
    {
        "content": "<p>I think a lot of arguments can be rephrased to \"react to the discovery\" that the ring is actually finite characteristic and rearrange the proof, but that's too much work for most mathematicians</p>",
        "id": 135792878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539550090
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\">https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md</a></p>",
        "id": 135795521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539555398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> you're the master of finiteness. How would you do 1?</p>",
        "id": 135795522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539555414
    },
    {
        "content": "<p>The maths proof I know goes via observing that this finite group has the property that for all n there are at most n elements of order dividing n (because the poly <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X^n-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span> has at most <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span></span></span></span> roots) and cyclic groups are the only finite groups with this property. Morally that's because of the structure theorem for finitely generated modules over a PID ;-)</p>",
        "id": 135796600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539557686
    },
    {
        "content": "<p>What is this discussion doing in #general by the way? How did Chris prove it for Z/pZ? I'm pretty sure he needed it for QR.</p>",
        "id": 135796725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539557917
    },
    {
        "content": "<p>oh right, lemme see...</p>",
        "id": 135796739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539557991
    },
    {
        "content": "<p>ok it's proved in <a href=\"https://github.com/leanprover/mathlib/blob/master/field_theory/finite.lean#L148-L155\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/field_theory/finite.lean#L148-L155\"><code>field_theory/finite.lean</code></a> that the units group of every finite field is cyclic.</p>",
        "id": 135796907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539558307
    },
    {
        "content": "<p>That's not strong enough for you</p>",
        "id": 135796911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539558327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the same proof can be used to prove that any finite subgroup of the units group of a field is cyclic, so this is not in the maximal generality.</p>",
        "id": 135796912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539558336
    },
    {
        "content": "<p>yes it would not surprise me if the same proof could be made to work</p>",
        "id": 135796957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539558374
    },
    {
        "content": "<p>It's great that mathlib is so readable though, isn't it.</p>",
        "id": 135796960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539558415
    },
    {
        "content": "<p>OK super-basic question: I've opened that file in Lean. How do I see the definition of <code>univ.filter</code> painlessly? If I right click on it I get sent to the definition of <code>finset.univ</code></p>",
        "id": 135797132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539558772
    },
    {
        "content": "<p>finset.filter is what you want, presumably</p>",
        "id": 135797137,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539558793
    },
    {
        "content": "<p>right, but I want to get there painlessly</p>",
        "id": 135797138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539558808
    },
    {
        "content": "<p>The key result is <code>card_order_of_eq_totient</code> just before the one you linked to</p>",
        "id": 135797200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539558958
    },
    {
        "content": "<blockquote>\n<p>finset.filter is what you want, presumably</p>\n</blockquote>\n<p><em>doh</em> only just realised that this has nothing to do with filters</p>",
        "id": 135797253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539559027
    },
    {
        "content": "<p>Maybe the proof of <code>card_order_of_eq_totient</code> works with any finite subgroup of the units of alpha if alpha is any field.</p>",
        "id": 135797327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539559180
    },
    {
        "content": "<p>I think it would be best for <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> to re-prove this in more generality instead of us speculating what could be done</p>",
        "id": 135797439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539559365
    },
    {
        "content": "<blockquote>\n<p>I think it would be best for <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> to re-prove this in more generality instead of us speculating what could be done</p>\n</blockquote>\n<p>We all know what is possible. Isn't this admitting defeat that mathlib is write-only code? Only the person that wrote the code can maintain it. That doesn't seem good to me.</p>",
        "id": 135797742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539560008
    },
    {
        "content": "<p>wat kunnen we doen</p>",
        "id": 135797744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539560035
    },
    {
        "content": "<p>In Engels praten?</p>",
        "id": 135797809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539560145
    },
    {
        "content": "<p>what can we do</p>",
        "id": 135797926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539560361
    },
    {
        "content": "<p>We can think really hard about what we mean with \"readable\". <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> say they can read mathlib, and I believe them. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and I complain that we cannot read mathlib, and I hope others believe us. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> says he cannot read mathlib and he doesn't care (and I believe him). But in the end I think people should be able to maintain other peoples code.<br>\nThe only other option is to seriously look into how we can clone Mario.</p>",
        "id": 135797990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539560519
    },
    {
        "content": "<p>I find it very hard to read, and impossible without it being open in Lean in front of me. I could probably struggle through a proof with lean though. The fact that I don't see why readability is important is perhaps a slightly different issue. If readability is important then I still don't really understand why we're not all writing lengthy tactic proofs, which are to be honest still my favourite proofs. But I am in no position to comment because it's the maintainers who know what's best so clearly they should (and do) have the final say -- I shall defer to their judgement on these issues.</p>",
        "id": 135799250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539563150
    },
    {
        "content": "<p>I guess a related issue is that I encourage undergraduates to write tactic proofs -- however Chris and Kenny made the switch no problem</p>",
        "id": 135799291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539563212
    },
    {
        "content": "<p>It actually surprises me that it took me quite a few hours to type out this document despite knowing the construction from top to bottom</p>",
        "id": 135799712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539564021
    },
    {
        "content": "<p>I guess it's just hard for me to organize my thoughts</p>",
        "id": 135799713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539564027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">padics</span><span class=\"bp\">.</span><span class=\"n\">padic_norm</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">binomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_eq_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_pow_char</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_pow</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">choose_self</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">add_left_inj</span><span class=\"o\">],</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">choose_zero_right</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">one_pow</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"n\">add_pow_char</span> <span class=\"n\">hp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">perfect_closure</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">perfect_closure</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">perfect_closure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">perfect_closure</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">perfect_closure</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">perfect_closure</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℕ×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"err\">^</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_pow</span><span class=\"o\">],</span>\n      <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_add</span><span class=\"o\">],</span>\n    <span class=\"n\">constructor</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_add</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">pow_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]),</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]),</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]))</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">perfect_closure</span>\n</pre></div>",
        "id": 135800612,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539565760
    },
    {
        "content": "<p>I find it very hard to read most of mathlib, and I think we're making a mistake leaving things so unreadable!</p>",
        "id": 135803490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539571803
    },
    {
        "content": "<p>I don't try to read mathlib without lean running</p>",
        "id": 135803507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539571856
    },
    {
        "content": "<p>and I don't think that we can reasonably achieve that level of readability (I don't think it's the direction we are going)</p>",
        "id": 135803512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539571904
    },
    {
        "content": "<p>Tactic proofs are readable since you can step through all the steps, and term proofs are readable because they have bounded complexity, as long as you can get at the types of things</p>",
        "id": 135803562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539571993
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I think it would be best for <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> to re-prove this in more generality instead of us speculating what could be done</p>\n</blockquote>\n<p>We all know what is possible. Isn't this admitting defeat that mathlib is write-only code? Only the person that wrote the code can maintain it. That doesn't seem good to me.</p>\n</blockquote>\n<p>I assume the reason Kenny said this is because Chris has the best understanding of the formalization choices and relevant proof approaches, not because he's the only one who can read his proof</p>",
        "id": 135803615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539572117
    },
    {
        "content": "<p>Readable with Lean open is good enough for me. But I can't even read term-mode proofs with Lean open. (Unless I work really really hard, but usually I just give up.)</p>",
        "id": 135806498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539577714
    },
    {
        "content": "<p>I have noticed the following trade-off in functionality of the VS code extension. If I hover over some defined variables / hypotheses in a tactic mode proof, often lean just gives me something useless like the definition of <code>exact</code> or <code>rw</code> or <code>intro</code>. Hovering is more reliably useful inside term mode proofs.</p>",
        "id": 135807472,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539579596
    },
    {
        "content": "<p>It also would be nice if that type info from hovering could be displayed in the infoview window, so that it's not just completely blank when I'm examining a term-mode proof.</p>",
        "id": 135807534,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539579716
    },
    {
        "content": "<p>It will actually give you term mode information if it's actually an expr parser in the tactic (such as after <code>exact</code> or in <code>rw</code> brackets)</p>",
        "id": 135807689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539579967
    },
    {
        "content": "<p>but the name parser doesn't give you any information, so <code>intro</code> hovering doesn't work</p>",
        "id": 135807692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539579992
    },
    {
        "content": "<p>What do you mean by an \"expr parser\"? </p>\n<p>Sometimes I get useful info in exact, but I find that <a href=\"/user_uploads/3121/36syMjdcu-ypF40akvYCYOVf/Screenshot-2018-10-15-01.16.27.png\" target=\"_blank\" title=\"Screenshot-2018-10-15-01.16.27.png\">more often than not I don't:</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/36syMjdcu-ypF40akvYCYOVf/Screenshot-2018-10-15-01.16.27.png\" target=\"_blank\" title=\"more often than not I don't:\"><img src=\"/user_uploads/3121/36syMjdcu-ypF40akvYCYOVf/Screenshot-2018-10-15-01.16.27.png\"></a></div><p>The cursor disappeared when I took the screenshot, but it's hovering over the <code>ha</code> near the bottom left corner of the popup.</p>",
        "id": 135808091,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539580817
    },
    {
        "content": "<p>This thread arguably isn't the right place for this conversation -- which I do think is interesting. I think there could be a place for Lean which is comprehensible to humans -- but maybe that's not mathlib. <a href=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/blob/master/src/example_sheet_01/Sht1Q2/S0102.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/blob/master/src/example_sheet_01/Sht1Q2/S0102.lean\">Here's the answer to some homework</a>. I'm not sure anyone reads Bourbaki either.</p>",
        "id": 135809910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539584125
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the same proof can be used to prove that any finite subgroup of the units group of a field is cyclic, so this is not in the maximal generality.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/mathlib/pull/423\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/423\">https://github.com/leanprover/mathlib/pull/423</a></p>",
        "id": 135826061,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539605276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 135826105,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539605292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Nice! But I think that what Kenny is after is more general. For any arbitrary field <code>K</code> it is true that every finite subgroup of <code>units K</code> is cyclic.</p>",
        "id": 135826327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539605549
    },
    {
        "content": "<p>Sure but it [subgroup of cyclic is cyclic]'s pretty darn useful!</p>",
        "id": 135833000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539612216
    },
    {
        "content": "<p>It's used all the time in 2nd year algebra, which I would imagine Chris is learning now.</p>",
        "id": 135833012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539612237
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you think I should make this definition at all?</p>",
        "id": 135861242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539640350
    },
    {
        "content": "<p>Only if you can layer some additional structure on it</p>",
        "id": 135861271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539640383
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 135861281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539640412
    },
    {
        "content": "<p>like if you define a bundled homomorphism or something</p>",
        "id": 135861357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539640501
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">perfect_closure</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">perfect_closure</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135861497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539640673
    },
    {
        "content": "<p>like this?</p>",
        "id": 135861499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539640674
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">frobenius_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pow</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">frobenius_iterate_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">iterate_zero</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">iterate_succ&#39;</span><span class=\"o\">,</span> <span class=\"n\">frobenius_mul</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">frobenius_one</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">one_pow</span> <span class=\"bp\">_</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">frobenius_iterate_one</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">iterate_zero</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">iterate_succ&#39;</span><span class=\"o\">,</span> <span class=\"n\">frobenius_one</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]]</span>\n</pre></div>",
        "id": 135866443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539646748
    },
    {
        "content": "<p>what's the right way to achieve maximum generality?</p>",
        "id": 135866446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539646754
    },
    {
        "content": "<p>My first personal reaction is that <code>p</code> should be the first parameter.</p>",
        "id": 135869283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539651103
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/perfect_closure.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/perfect_closure.lean\">https://github.com/kckennylau/Lean/blob/master/perfect_closure.lean</a></p>",
        "id": 135914776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539710440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how is this? Is it mathlib ready?</p>",
        "id": 135914788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539710451
    },
    {
        "content": "<p>It's okay, I have some comments but they would be best put on a PR. But sure, there is no structural problem with having this in mathlib</p>",
        "id": 135919893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539714836
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/425\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/425\">https://github.com/leanprover/mathlib/pull/425</a></p>",
        "id": 135956262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539763160
    },
    {
        "content": "<p>I generalized my theorem to any finite subgroup of an integral domain. What file should it go in since it's no longer particular to finite fields?</p>",
        "id": 136062832,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539887893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 136066001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539890951
    },
    {
        "content": "<p>Not sure, what's the most advanced stuff you use?</p>",
        "id": 136066041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539891000
    },
    {
        "content": "<p>Maybe somewhere in <code>ring_theory</code> basics or something</p>",
        "id": 136066092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539891012
    },
    {
        "content": "<p>Polynomials and <code>group_theory.order_of_element</code>.</p>",
        "id": 136066451,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539891408
    },
    {
        "content": "<p>do either of those depend on the other?</p>",
        "id": 136066599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539891564
    },
    {
        "content": "<p>No.</p>",
        "id": 136067170,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539892152
    },
    {
        "content": "<p>The first step is merged!</p>",
        "id": 146801908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541430865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 146801910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541430867
    },
    {
        "content": "<p>Nice! Algebraic closures are so key to everything. I would like to one day start stating non-trivial facts about p-adic Galois representations, which are representations of the absolute Galois group of a number field -- these things are a key part of the Langlands philosophy. Galois theory and algebraic closures are a key part of this dream. I would imagine that many other theorem provers have Galois theory and algebraic closures and p-adic numbers in some form, but with Lean it sort-of feels like they will all be in the same place at the same time and one could start thinking about these far deeper things once they're there.</p>",
        "id": 146802277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541431183
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md\">https://github.com/kckennylau/Lean/blob/master/algebraic-closure-roadmap.md</a></p>",
        "id": 146803609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541432380
    },
    {
        "content": "<p>and we have perfect closure now! <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 146808711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541437201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I have finished proving hilbert basis theorem</p>",
        "id": 146889094,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541533678
    },
    {
        "content": "<p>nice! Now you can prove that if B is a finitely-generated algebra over a noetherian ring then B is Noetherian</p>",
        "id": 146889213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541533758
    },
    {
        "content": "<p>Also... do we already know that <code>int</code> is noetherian <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 146889239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541533800
    },
    {
        "content": "<p>One should prove that PID's are Noetherian and that int is a PID I guess</p>",
        "id": 146889310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541533851
    },
    {
        "content": "<p>Both of these might be in / easy</p>",
        "id": 146889320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541533860
    },
    {
        "content": "<p>The latter is in.</p>",
        "id": 146889347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541533885
    },
    {
        "content": "<p>It seems like <a href=\"https://github.com/leanprover-community/mathlib/blob/f7fde9faf98efa91d49e8f699263d72b3c4d5b0f/ring_theory/hilbert_basis.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/f7fde9faf98efa91d49e8f699263d72b3c4d5b0f/ring_theory/hilbert_basis.lean\">https://github.com/leanprover-community/mathlib/blob/f7fde9faf98efa91d49e8f699263d72b3c4d5b0f/ring_theory/hilbert_basis.lean</a> begins with lots of lemmas that should be moved to other files</p>",
        "id": 146890579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541534866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> could you comment on how you felt that our API to polynomials and modules was behaving during your proof of Hilbert basis?</p>",
        "id": 146894970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541538751
    },
    {
        "content": "<p>eh... can be better</p>",
        "id": 146894976,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541538771
    },
    {
        "content": "<p>do you have specific ideas?</p>",
        "id": 146895260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541539017
    },
    {
        "content": "<p>Actually there isn't many problems, it's just some missing lemmas.</p>",
        "id": 146904524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541548176
    },
    {
        "content": "<p>which isn't a big deal at all, because one can just add them in</p>",
        "id": 146904535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541548196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> We will have integral closure by tonight</p>",
        "id": 147365605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541762893
    },
    {
        "content": "<p>Cool!</p>",
        "id": 147366017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541763562
    },
    {
        "content": "<p>Shouldn't you be catching up on all the lectures you missed while you were absent from your course? ;-)</p>",
        "id": 147368104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541766327
    },
    {
        "content": "<p>I shall continue tomorrow.</p>",
        "id": 147412357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541812063
    },
    {
        "content": "<p>We have integral closure now.</p>",
        "id": 147449421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541886852
    },
    {
        "content": "<p>Can you prove that the integers of a number field are a Dedekind domain?</p>",
        "id": 147449645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887239
    },
    {
        "content": "<p>wow you keep pushing me</p>",
        "id": 147449656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541887268
    },
    {
        "content": "<p>There are a bunch of equivalent definitions</p>",
        "id": 147449665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887295
    },
    {
        "content": "<p>The one which would be easiest would be to show that if K is a field of char 0 which is finite-dimensional over Q then the integral closure of Z in this field (the ring of integers) is Noetherian, an integral domain, integrally closed, and that every non-zero prime ideal is maximal.</p>",
        "id": 147449709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887349
    },
    {
        "content": "<p>The latter follows from the fact that a non-zero ideal contains an integer and hence the quotient of the ring of integers by a non-zero ideal is a finite set, and then observe that a finite integral domain is a field.</p>",
        "id": 147449719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887393
    },
    {
        "content": "<p>The reason this is of interest is that one of the main theorems in an undergraduate algebraic number theory course is that every non-zero ideal in the integers of a number field factors uniquely into prime ideals</p>",
        "id": 147449759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887452
    },
    {
        "content": "<p>however the correct generality in which this theorem should be proved is that it's true for all Dedekind domains</p>",
        "id": 147449765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887477
    },
    {
        "content": "<p>Ok here is a more reasonable question: can you prove that the integral closure of the integral closure is the integral closure?</p>",
        "id": 147449774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887517
    },
    {
        "content": "<p>I mean if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>⊆</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">R\\subseteq S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">⊆</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the integral closure of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the integral closure of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo>=</mo><msup><mi>R</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R'=R''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 147449777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887555
    },
    {
        "content": "<p>Then you'd know that the ring of integers of a number field is integrally closed in its field of fractions</p>",
        "id": 147449816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887583
    },
    {
        "content": "<p>sure, give me another weekend...</p>",
        "id": 147450331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541888659
    },
    {
        "content": "<p>I must be honest, I would rather see Gal(Q-bar/Q)...</p>",
        "id": 147451036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890147
    },
    {
        "content": "<p>no wait</p>",
        "id": 147451038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890158
    },
    {
        "content": "<p>I would rather see all of these things</p>",
        "id": 147451041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890165
    },
    {
        "content": "<p>Kenny here is a genuine much harder challenge. I would like to see a continuous group homomorphism from the absolute Galois group of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo>(</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb{Z}_p)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span><span class=\"mord\"><span class=\"mord mathit\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, unramified outside a finite set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of places.</p>",
        "id": 147451096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890239
    },
    {
        "content": "<p>Everything you are doing is in some sense working up to this; it's a fundamental object in Langlands' philosophy.</p>",
        "id": 147451104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890263
    },
    {
        "content": "<p>I'm sure Johan would be equally pleased to see this. One motivation for doing it is, just like perfectoid spaces, it is a fundamental object in modern number theory which seems to me to be a million miles from anything in any theorem prover at this point. And it really is not that difficult to do, in some sense. All the things you're doing are important for the definition of this object.</p>",
        "id": 147451108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890270
    },
    {
        "content": "<p>I think we have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo>(</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb{Z}_p)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span><span class=\"mord\"><span class=\"mord mathit\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, the topology is not hard, and you are working towards the absolute Galois group.</p>",
        "id": 147451221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890457
    },
    {
        "content": "<p>An even longer term goal would to be to formalise the statement of the conjecture that Toby and I make in <a href=\"https://arxiv.org/abs/1009.0785\" target=\"_blank\" title=\"https://arxiv.org/abs/1009.0785\">https://arxiv.org/abs/1009.0785</a> (conjecture 3.2.1). This is a rigorous statement which one could argue is a formalisation of what part of Langlands' philosophy is.</p>",
        "id": 147451293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890634
    },
    {
        "content": "<p>Before this paper, everyone knew that something like 3.2.1 should be true but nobody had stated it precisely, and several people were well aware that more naive guesses as to what the conjecture should be were provably false.</p>",
        "id": 147451343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541890685
    },
    {
        "content": "<p>This thread should be in #maths, by the way. Is it possible to change it?</p>",
        "id": 147452506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541892323
    },
    {
        "content": "<p>Kenny, here's another reasonable suggestion: <a href=\"https://en.wikipedia.org/wiki/Going_up_and_going_down\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Going_up_and_going_down\">https://en.wikipedia.org/wiki/Going_up_and_going_down</a> . I have Bruns-Herzog in my office if you need a copy.</p>",
        "id": 147452517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541892351
    },
    {
        "content": "<p>This is the correct way to prove that non-zero prime ideals are maximal in the integers of a number field.</p>",
        "id": 147452559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541892371
    },
    {
        "content": "<p>And Matsumura</p>",
        "id": 147452566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541892407
    },
    {
        "content": "<blockquote>\n<p>I mean if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>⊆</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">R\\subseteq S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">⊆</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the integral closure of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the integral closure of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo>=</mo><msup><mi>R</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R'=R''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> done</p>",
        "id": 147479317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541946678
    }
]