[
    {
        "content": "<p>In Coq, you can display the proof term whenever you're in proof mode using the <code>Show Proof</code> tactic.</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">Goal</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"o\">-&gt;</span> <span class=\"n\">B</span> <span class=\"o\">-&gt;</span> <span class=\"n\">A</span><span class=\"o\">.</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"k\">intros</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">.</span>\n  <span class=\"kn\">Show</span> <span class=\"kn\">Proof</span><span class=\"o\">.</span> <span class=\"c\">(*  (fun A B : Prop =&gt; ?Goal)  *)</span>\n  <span class=\"k\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">.</span>\n  <span class=\"kn\">Show</span> <span class=\"kn\">Proof</span><span class=\"o\">.</span> <span class=\"c\">(*  (fun (A B : Prop) (a : A) (b : B) =&gt; ?Goal)  *)</span>\n  <span class=\"kp\">exact</span> <span class=\"n\">a</span><span class=\"o\">.</span>\n  <span class=\"kn\">Show</span> <span class=\"kn\">Proof</span><span class=\"o\">.</span> <span class=\"c\">(*  (fun (A B : Prop) (a : A) (_ : B) =&gt; a)  *)</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</code></pre></div>\n<p>Is there a way to do the same in Lean?</p>\n<p>I have noticed you can <code>#print</code> a theorem to inspect the proof term, but is there something I can do in <code>example</code>s or halfway into a proof?</p>",
        "id": 285670245,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654865204
    },
    {
        "content": "<p><code>show_term</code> will do what you want I think.</p>",
        "id": 285670758,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654865491
    },
    {
        "content": "<p>You can use it around a particular tactic, but you could also use it around the whole proof thus far.</p>",
        "id": 285670883,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654865547
    },
    {
        "content": "<p>It's often, to be fair, not very useful.</p>",
        "id": 285670917,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654865561
    },
    {
        "content": "<p>Took me a moment to figure out how to use it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 285671627,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654865949
    },
    {
        "content": "<p>I really like that this gives me a clickable <code>Try this: exact λ (a : A) (b : B), a</code> rather than just printing it in the console</p>",
        "id": 285671638,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654865958
    },
    {
        "content": "<p>and it also cancels out the <code>by</code> and <code>exact</code> while it's at it :D</p>",
        "id": 285671698,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654865993
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 285671714,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654866001
    },
    {
        "content": "<p>No worries :)</p>",
        "id": 285672292,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866251
    },
    {
        "content": "<p>Are you familiar with <code>refine</code>?</p>",
        "id": 285672319,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866268
    },
    {
        "content": "<p>yes</p>",
        "id": 285672336,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654866281
    },
    {
        "content": "<p>I ask only because that's often very useful for finding a nice term for part or the whole or a proof</p>",
        "id": 285672412,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866335
    },
    {
        "content": "<p>ooooh<br>\n<a href=\"/user_uploads/3121/Vy5vE34arz8jRwiZldbh1imL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Vy5vE34arz8jRwiZldbh1imL/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Vy5vE34arz8jRwiZldbh1imL/image.png\"></a></div>",
        "id": 285672435,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654866346
    },
    {
        "content": "<p>That's so cool!</p>",
        "id": 285672503,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654866365
    },
    {
        "content": "<p>Yeah I'm not entirely sure that will work as written, sometimes the show_term output doesn't.</p>",
        "id": 285672538,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866381
    },
    {
        "content": "<p>But indeed <code>refine \\l a b, _</code> will then give you a state with a as a goal.</p>",
        "id": 285672582,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866406
    },
    {
        "content": "<p>(on phone so can't do lambda)</p>",
        "id": 285672603,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866422
    },
    {
        "content": "<p>You could also simply omit the by, and write <code>\\l ab, _</code> after the <code>:=</code>, and then if you click on the red underline you'll see what is missing</p>",
        "id": 285672778,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866485
    },
    {
        "content": "<p>So really often you can just do things term-wise that way.</p>",
        "id": 285672838,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866511
    },
    {
        "content": "<p>I'm sure you're also aware of <code>rcases</code> and <code>rintros</code> but they are also useful tools when you're hunting for a neat term</p>",
        "id": 285673173,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866679
    },
    {
        "content": "<p>As has been pointed out, sometimes the <code>Try this:</code> needs some cleaning up.  <code>show_term</code> is normally useful with the most \"transparent\" tactics: <code>refine, apply, intros, split, left, right,...</code>.  It tends to be less useful with <code>rw, simp,...</code>.</p>\n<p>I personally found it useful to learn about how Lean works with <code>coe/cast</code>.  <code>show_term{(something)_cast}</code>, is normally a <em>huge</em> term, which, however, contains the names of the lemmas that are used.  Sometimes, this can help with replacing a <code>norm_cast</code> with a sequence of <code>rw</code>.  Besides masochism, a motivation for doing this is to speed up some proofs.</p>",
        "id": 285696384,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654876801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373970\">@Aaron Bies</span> FYI: <code>tactic.trace_result</code> is a more literal translation of <code>Show Proof</code>.  (You must <code>import tactic</code> which is available in base Lean.)</p>",
        "id": 285712314,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654884158
    }
]