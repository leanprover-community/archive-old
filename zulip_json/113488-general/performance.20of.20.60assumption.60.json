[
    {
        "content": "<p>I just encountered a weird performance issue. In the middle of a rather long proof, I have just proved a fact that I want to use next. If I use <code>exact this</code>, this takes less than 3ms. But <code>assumption</code> takes 7 seconds... Of course, in this specific case this is not a problem, but first I was using a tactic that calls <code>assumption</code>, several times in the proof, and the whole proof then took more than 30s. Is there a way to understand what is going on?</p>\n<p>My goal looks like <code>dist (⇑f x') (⇑g x') ≤ ε / 4</code>. The output of the profiler on <code>assumption</code> is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"n\">took</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"n\">ms</span>\n<span class=\"n\">essai</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">520</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">tactic</span> <span class=\"n\">profile</span> <span class=\"n\">data</span>\n\n<span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"n\">s</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">153</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">126</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find_same_type</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find_same_type</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">scope_trace</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad_orelse</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">7060</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">step</span>\n</pre></div>\n\n\n<p>For the record, here is the list of the local facts I have. The issue is probably coming from one of them...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">εpos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">εpos8</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b_lim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">δpos</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n<span class=\"n\">tα</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">this_h_w</span> <span class=\"o\">:</span> <span class=\"n\">tα</span> <span class=\"err\">⊆</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n<span class=\"n\">finite_tα</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">tα</span><span class=\"o\">,</span>\n<span class=\"n\">htα</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">tα</span><span class=\"o\">),</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n<span class=\"n\">tβ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">this_h_w_1</span> <span class=\"o\">:</span> <span class=\"n\">tβ</span> <span class=\"err\">⊆</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n<span class=\"n\">finite_tβ</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">tβ</span><span class=\"o\">,</span>\n<span class=\"n\">htβ</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">tβ</span><span class=\"o\">),</span> <span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">),</span>\n<span class=\"n\">fin_univ</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">tβ</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n<span class=\"n\">approx</span> <span class=\"o\">:</span> <span class=\"n\">bounded_continuous_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"err\">↥</span><span class=\"n\">tα</span> <span class=\"bp\">→</span> <span class=\"err\">↥</span><span class=\"n\">tβ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bounded_continuous_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">tα</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"err\">↑</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">bounded_continuous_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">f_eq_g</span> <span class=\"o\">:</span> <span class=\"n\">approx</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">approx</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n<span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n<span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">x&#39;tα</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">tα</span><span class=\"o\">,</span>\n<span class=\"n\">hx&#39;</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n<span class=\"n\">F_f_g</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">g</span> <span class=\"n\">x&#39;</span><span class=\"o\">),</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">g</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span>\n</pre></div>\n\n\n<p>(one bonus point for you if you can guess which theorem I am proving from this output :)</p>",
        "id": 136852607,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540993508
    },
    {
        "content": "<p>You could try <code>clear</code>ing hypotheses one by one until <code>assumption</code> succeeds quickly. This would at least point out which hypothesis is causing the problem.</p>",
        "id": 136854109,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540994892
    },
    {
        "content": "<p>Just to check -- if you remove the hypothesis that you want it to find, it takes 7 seconds and then fails, right?</p>",
        "id": 136854136,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540994931
    },
    {
        "content": "<p>Excellent idea. Here is the minimized outcome, which really looks like a bug somewhere.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span>\n</pre></div>\n\n\n<p>takes 8 seconds. Remove <code>a</code> or <code>b</code>, it goes down by 4 seconds. Without any of them, 3ms...</p>",
        "id": 136855236,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540996040
    },
    {
        "content": "<p>The problem is that 4 and 8 are big numbers for reals. You can trigger the same problem with rationals if you increase slightly the numbers:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span>\n</pre></div>\n\n\n<p>triggers a timeout on my machine...</p>",
        "id": 136855749,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540996517
    },
    {
        "content": "<p>If I make the definition of inequality irreducible in <code>real.basic</code>:</p>\n<div class=\"codehilite\"><pre><span></span>protected def le (x y : ℝ) : Prop := x &lt; y ∨ x = y\ninstance : has_le ℝ := ⟨real.le⟩\n[...]\nattribute [irreducible] real.le\n</pre></div>\n\n\n<p>then <code>assumption</code> is instant again. Apparently <code>assumption</code> had to do an awful lot of unfolding. <br>\nProbably <code>lt</code> and <code>le</code> in <code>real</code> should be irreducible, after some basic facts have been proven about it.</p>",
        "id": 136856013,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540996782
    },
    {
        "content": "<p>I think I remember Mario saying something about <code>assumption</code> trying to reduce all the hypotheses. I guess <code>le</code> and division are hard to reduce on reals. This example takes 11s to fail on my machine.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>Maybe <code>le</code> and division should be irreducible.</p>",
        "id": 136856465,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540997160
    },
    {
        "content": "<p>Your example is not specific to reals:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>also fails.</p>",
        "id": 136856827,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540997424
    },
    {
        "content": "<p>Making the orders on <code>rat</code> and <code>real</code> irreducible only breaks things at one spot in <code>analysis.complex</code>, and then all of these examples are instant. I think this is the correct setup. I'll PR this in a sec.</p>",
        "id": 136858710,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540999050
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 136859630,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540999929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> maybe it's about time you went through all of mathlib changing all <code>assumption</code>s to what they are supposed to say?</p>",
        "id": 136859919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541000198
    },
    {
        "content": "<p>good idea</p>",
        "id": 136859956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541000246
    },
    {
        "content": "<p>but why am I the only one to make mathlib faster?</p>",
        "id": 136859973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541000265
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> maybe it's about time you went through all of mathlib changing all <code>assumption</code>s to what they are supposed to say?</p>\n</blockquote>\n<p>What is this? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I really think we should improve the system. These things should be solved by making the computer smarter, instead of making our proofs more explicit. Automation is good.</p>",
        "id": 136861850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541001770
    },
    {
        "content": "<p>But <code>assumption</code> will never be as fast as <code>exact H57</code> ;-)</p>",
        "id": 136861889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541001818
    },
    {
        "content": "<p>It should be fast enough that we don't have to care. And caching should make sure that we also don't need to care about 10s proofs.</p>",
        "id": 136861957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541001852
    },
    {
        "content": "<p>I think this is a major problem for Sebastien's proof style, which uses <code>&lt;x ≤ ε /2&gt;</code> in place of <code>h1</code> all over the place, and avoids labeling hypotheses. This is turned into <code>show x ≤ ε /2, by assumption</code> and hence can be very slow if there are \"similar\" hypotheses that require a lot of unfolding. This is one of the reasons I prefer naming hypotheses - it's shorter, and faster.</p>",
        "id": 136887687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541027126
    },
    {
        "content": "<p>The short answer is \"<code>assumption</code> considered harmful\". This is why stuff like <code>rw [...], refl</code> sometimes succeeds where <code>rw [...]</code> fails, because <code>rw</code> tries to close with reflexivity but it doesn't try very hard for performance reasons. <code>assumption</code> has no such limiter.</p>",
        "id": 136887835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541027326
    },
    {
        "content": "<p>I am really unhappy with \"<code>assumption</code> considered harmful\". Is this a theoretical problem? Or could someone with enough skills and free time write a faster version of <code>assumption</code>?</p>",
        "id": 136903475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541052396
    },
    {
        "content": "<p>you could potentially write a \"dumber\" version of assumption that doesn't do as much definitional unfolding, and that would indeed be faster, but also potentially less useful</p>",
        "id": 136903672,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541052792
    },
    {
        "content": "<p>... or we can dovetail it?</p>",
        "id": 136907300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541060042
    },
    {
        "content": "<p>Isn't <code>assumption</code> being asked to do the impossible? The claim is that there's a term in the local context whose type is that of the goal. A human might go through each of the terms and say \"no, no, maybe, no, no, no, ...ooh! Yes!\"</p>",
        "id": 136907364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060160
    },
    {
        "content": "<p>but Lean gets interested in the \"maybe\" and what can you do?</p>",
        "id": 136907406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060172
    },
    {
        "content": "<p>we can dovetail it.</p>",
        "id": 136907846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541060911
    },
    {
        "content": "<p>I think this is a good idea. But I have no idea how to implement the dovetailing in Lean. (For those who don't know what dovetailing is: basically just look at all the assumptions in parallel, if one works, stop looking at the others.)</p>",
        "id": 136909675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541063678
    },
    {
        "content": "<p>Ha ha, and then the one tactic which I understand the Lean code for will be gone :-)</p>",
        "id": 136909782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541063850
    },
    {
        "content": "<p>Yes it's possible to do <code>assumption</code> in parallel, but it's overkill</p>",
        "id": 136910450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541064694
    },
    {
        "content": "<p><code>assumption</code> is one of the oldest and simplest tactics, and I think its simplicity is turning out to not be a good thing</p>",
        "id": 136910504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541064736
    },
    {
        "content": "<p>The easy solution is just not to use full defeq in <code>assumption</code></p>",
        "id": 136910540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541064775
    },
    {
        "content": "<p>just set <code>md := semireducible</code> like all the newer tactics</p>",
        "id": 136910568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541064799
    },
    {
        "content": "<p>The slow examples above aren't really specific to <code>le</code>, by the way--this one is also slow</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 136920250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541077768
    },
    {
        "content": "<p>With bigger numbers, even addition is slow.</p>",
        "id": 136920384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541077933
    },
    {
        "content": "<blockquote>\n<p>just set <code>md := semireducible</code> like all the newer tactics</p>\n</blockquote>\n<p>Looking at the implementation, it seems like <code>assumption</code> is already calling <code>unify</code> with the (implicit) argument <code>md := semireducible</code>.</p>",
        "id": 136923924,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541081631
    },
    {
        "content": "<p>I think a whole lot more should be irreducible, like <code>add</code>, <code>neg</code>, <code>mul</code> and <code>inv</code> for <code>cau_seq.completion</code>.</p>",
        "id": 136923989,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541081659
    }
]