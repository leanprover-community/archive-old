[
    {
        "content": "<p>Hey -- I'm working out how to add a foreign function interface to Lean's VM so that Lean code can call into libraries written in C/C++. Ideas and feedback on how to achieve this are welcome. I've started a branch at <a href=\"https://github.com/agentultra/lean/tree/feature/vm-dynload\" target=\"_blank\" title=\"https://github.com/agentultra/lean/tree/feature/vm-dynload\">https://github.com/agentultra/lean/tree/feature/vm-dynload</a> for adding the low-level plumbing.</p>",
        "id": 164593325,
        "sender_full_name": "James King",
        "timestamp": 1556676107
    },
    {
        "content": "<p>You should coordinate with <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, who has also been working on FFI in the leanprover-community fork</p>",
        "id": 164594296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556677500
    },
    {
        "content": "<p>assuming you aren't already working on the same project as Simon's been discussing</p>",
        "id": 164594365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556677568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I am working with him on it... he has convinced me to get involved with Lean. :)</p>",
        "id": 164594381,
        "sender_full_name": "James King",
        "timestamp": 1556677613
    },
    {
        "content": "<p>First, I would want to see what's the minimum implementation that is fully expressive</p>",
        "id": 164594469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556677725
    },
    {
        "content": "<p>What I'm thinking is that you could load a <code>.so</code> file with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">load_external</span> <span class=\"s2\">&quot;file.so&quot;</span> <span class=\"s2\">&quot;init_function&quot;</span> <span class=\"s2\">&quot;finalize_function&quot;</span>\n</pre></div>\n\n\n<p>and then add bindings with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ffi</span> <span class=\"s2\">&quot;file.so&quot;</span> <span class=\"s2\">&quot;int c_add (int,int)&quot;</span><span class=\"o\">]</span>\n<span class=\"kn\">constant</span> <span class=\"n\">external_add_fn</span> <span class=\"o\">:</span> <span class=\"n\">c_int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c_int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c_int</span>\n</pre></div>",
        "id": 164594560,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556677867
    },
    {
        "content": "<p>And I'm thinking of accumulating <code>.so</code> objects in the `environment object</p>",
        "id": 164594570,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556677901
    },
    {
        "content": "<p>how can you call a function using a string description like that?</p>",
        "id": 164594653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556677988
    },
    {
        "content": "<p>in the c++</p>",
        "id": 164594655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556677996
    },
    {
        "content": "<p>We may need some way of telling the Lean code how to call the function. I was thinking we'd try using the <code>dlopen</code>/<code>dlsym</code> API</p>",
        "id": 164594750,
        "sender_full_name": "James King",
        "timestamp": 1556678159
    },
    {
        "content": "<p>How does it work?</p>",
        "id": 164594796,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556678201
    },
    {
        "content": "<p>I think you just get a void* function pointer</p>",
        "id": 164594799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556678213
    },
    {
        "content": "<p>Well... it's all <code>void *</code> pointers</p>",
        "id": 164594801,
        "sender_full_name": "James King",
        "timestamp": 1556678222
    },
    {
        "content": "<p>I don't know if it's possible to dynamically call a function with a runtime known type</p>",
        "id": 164594841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556678254
    },
    {
        "content": "<p>Right, as far as the <code>.so</code> file is concerned, only the function name matters. The rest of the string is to help us validate and marshal data</p>",
        "id": 164594892,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556678287
    },
    {
        "content": "<p>but how can we adhere to C calling convention with a number of arguments only known at runtime</p>",
        "id": 164594918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556678386
    },
    {
        "content": "<p>You load the <code>so</code> file, you get a <code>void *</code>, you cast it in the right type to do the call (or, in our case, into a <code>type fn_name(...)</code> function I assume) and then you call</p>",
        "id": 164594920,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556678391
    },
    {
        "content": "<p>We're going to need to manipulate the call stack to some extent</p>",
        "id": 164594980,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556678432
    },
    {
        "content": "<p>I think so too.</p>",
        "id": 164594985,
        "sender_full_name": "James King",
        "timestamp": 1556678452
    },
    {
        "content": "<p><a href=\"https://sourceware.org/libffi/\" target=\"_blank\" title=\"https://sourceware.org/libffi/\">https://sourceware.org/libffi/</a> ?</p>",
        "id": 164595001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556678490
    },
    {
        "content": "<p>That would make things nice and easy.</p>",
        "id": 164595061,
        "sender_full_name": "James King",
        "timestamp": 1556678560
    },
    {
        "content": "<p>Sounds like a nice tool</p>",
        "id": 164595074,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556678588
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>!</p>",
        "id": 164595133,
        "sender_full_name": "James King",
        "timestamp": 1556678677
    },
    {
        "content": "<p>See also the manual <a href=\"http://www.chiark.greenend.org.uk/doc/libffi-dev/html/\" target=\"_blank\" title=\"http://www.chiark.greenend.org.uk/doc/libffi-dev/html/\">http://www.chiark.greenend.org.uk/doc/libffi-dev/html/</a>, which was surprisingly hard to find</p>",
        "id": 164595289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556678926
    },
    {
        "content": "<p>You guys are free to work on whatever sounds fun to you. But I cannot help wondering why you work on things that, as far as I can understand, will be completely wiped out by Lean 4. There are so many things that need expert work and will likely be portable to Lean 4. Why don't you work on transfer and parametricity for instance?</p>",
        "id": 164621234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556715522
    },
    {
        "content": "<blockquote>\n<p>I don't know if it's possible to dynamically call a function with a runtime known type</p>\n</blockquote>\n<p>I know there are some experiments in this regard, e.g. <a href=\"https://github.com/stephenrkell/liballocs\" target=\"_blank\" title=\"https://github.com/stephenrkell/liballocs\">https://github.com/stephenrkell/liballocs</a> it essentially parses dwarf debug information and makes the necessary things available to the dynamic loader, but that entails custom compiler etc...</p>",
        "id": 164627136,
        "sender_full_name": "matt rice",
        "timestamp": 1556720852
    },
    {
        "content": "<p>Have you had a look at  <a href=\"http://www.chiark.greenend.org.uk/doc/libffi-dev/html/\" target=\"_blank\" title=\"http://www.chiark.greenend.org.uk/doc/libffi-dev/html/\">http://www.chiark.greenend.org.uk/doc/libffi-dev/html/</a>? This looks even better to me</p>",
        "id": 164627616,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556721212
    },
    {
        "content": "<p>yeah, the thing liballocs gives on top of that is it gives one the ability to query the type of some memory allocation, and so the primitive types are safer i guess, where libffi is i guess an abstraction on top of void *, where the right ffi type corresponds to the c function (if you get it right), which is i believe Mario's complaint above.</p>",
        "id": 164628549,
        "sender_full_name": "matt rice",
        "timestamp": 1556721925
    },
    {
        "content": "<p>Anyhow, the thing i mentioned above is quite an endeavor to build, and rather experimental, but i wanted to point it out none the less.</p>",
        "id": 164628689,
        "sender_full_name": "matt rice",
        "timestamp": 1556722008
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 164628705,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556722024
    },
    {
        "content": "<p>Looks like we're making good progress. We're able to load the shared object into memory and keep a handle; next we'll start adding libffi support and initializing <code>ffi_cif</code> from the Lean annotations</p>",
        "id": 164761769,
        "sender_full_name": "James King",
        "timestamp": 1556849228
    },
    {
        "content": "<p>I think we might be able to avoid the type annotations that Simon showed</p>",
        "id": 164761890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556849350
    },
    {
        "content": "<p>You should be able to derive it from the lean type, i.e. <code>c_int -&gt; c_int -&gt; c_int</code></p>",
        "id": 164761900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556849374
    },
    {
        "content": "<p>I'll give that a try.</p>",
        "id": 164762117,
        "sender_full_name": "James King",
        "timestamp": 1556849642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have an idea for a Lean declaration that would work?</p>\n<div class=\"codehilite\"><pre><span></span>@[ffi &quot;libfile.so&quot;]\nconstant my_fun : c_int -&gt; c_pointer -&gt; c_void\n</pre></div>",
        "id": 165127351,
        "sender_full_name": "James King",
        "timestamp": 1557280590
    },
    {
        "content": "<p>On the lean side, I think that would be <code>io c_void</code> but otherwise that seems fine</p>",
        "id": 165127373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557280639
    },
    {
        "content": "<p>Better yet, just use <code>unit</code> instead of defining <code>c_void</code> (and similarly for other types if they exist)</p>",
        "id": 165127381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557280679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Good idea, thanks.</p>",
        "id": 165127450,
        "sender_full_name": "James King",
        "timestamp": 1557280768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Do you think <code>c_pointer</code> should be a constant or should it be defined to be u64 or whatever</p>",
        "id": 165127514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557280818
    },
    {
        "content": "<p>also I wonder whether we should allow people to define FFI functions that are not in <code>io</code></p>",
        "id": 165127549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557280919
    },
    {
        "content": "<p>It doesn't really make sense for a unit-returning function to not be <code>io</code> but a regular function might be pure</p>",
        "id": 165127617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557280996
    },
    {
        "content": "<p>I thought <code>io</code> made sense myself but I think <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> had a few insights.</p>",
        "id": 165127686,
        "sender_full_name": "James King",
        "timestamp": 1557281068
    },
    {
        "content": "<p>I would make <code>c_pointer</code> into a constant and I would allow non-<code>io</code>-returning functions</p>",
        "id": 165127726,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557281162
    },
    {
        "content": "<p>We can't check whether <code>io</code> should be required so we just have to trust the writer of the bindings</p>",
        "id": 165127772,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557281202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220270\">@James King</span> </p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Do you have an idea for a Lean declaration that would work?</p>\n<div class=\"codehilite\"><pre><span></span>@[ffi &quot;libfile.so&quot;]\nconstant my_fun : c_int -&gt; c_pointer -&gt; c_void\n</pre></div>\n\n\n</blockquote>\n<p>In passing, I was thinking that the <code>ffi</code> attribute could take a Lean name instead of a file name. That way, if there's any complexity around path resolution, it can be isolated into a single declaration</p>",
        "id": 165192944,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557343510
    },
    {
        "content": "<p>So...</p>\n<div class=\"codehilite\"><pre><span></span>@[ffi &#39;main]\nconstant my_fun : c_int -&gt; c_pointer -&gt; c_void\n</pre></div>\n\n\n<p>Would be ideal?</p>",
        "id": 165300676,
        "sender_full_name": "James King",
        "timestamp": 1557450048
    },
    {
        "content": "<p>what does 'main mean?</p>",
        "id": 165301037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557450608
    },
    {
        "content": "<p>also that can probably be just <code>main</code> since we control the parser there</p>",
        "id": 165301050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557450655
    },
    {
        "content": "<p>We have added a function to the environment that loads the foreign object file and stores the handle in a map</p>",
        "id": 165301065,
        "sender_full_name": "James King",
        "timestamp": 1557450682
    },
    {
        "content": "<p>I was trying to follow along with <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> 's suggestion.</p>",
        "id": 165301071,
        "sender_full_name": "James King",
        "timestamp": 1557450699
    },
    {
        "content": "<p>I see. What does that function look like?</p>",
        "id": 165301073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557450719
    },
    {
        "content": "<p>are these names associated to some definitions or are they in their own namespace?</p>",
        "id": 165301126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557450763
    },
    {
        "content": "<p><a href=\"https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_dynload.h\" target=\"_blank\" title=\"https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_dynload.h\">https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_dynload.h</a><br>\n<a href=\"https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_dynload.cpp#L33\" target=\"_blank\" title=\"https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_dynload.cpp#L33\">https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_dynload.cpp#L33</a><br>\n<a href=\"https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_environment.cpp#L318\" target=\"_blank\" title=\"https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_environment.cpp#L318\">https://github.com/agentultra/lean/blob/feature/vm-dynload/src/library/vm/vm_environment.cpp#L318</a></p>",
        "id": 165301225,
        "sender_full_name": "James King",
        "timestamp": 1557450916
    },
    {
        "content": "<p>The foreign symbol stuff will probably go, but we basically load those objects into a map so we can associate the handle with a \"Lean name\" as <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> says</p>",
        "id": 165301279,
        "sender_full_name": "James King",
        "timestamp": 1557450985
    },
    {
        "content": "<p>I'm still pretty new to Lean so forgive my ignorance of the finer points of the language/syntax; it's pretty fun learning about it this way.</p>",
        "id": 165301338,
        "sender_full_name": "James King",
        "timestamp": 1557451089
    },
    {
        "content": "<p>What does the lean side of this look like?</p>",
        "id": 165301633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557451570
    },
    {
        "content": "<p>I think you're doing a great job btw, I'm just thinking about what the lean user side is</p>",
        "id": 165301675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557451662
    },
    {
        "content": "<p>see <code>tests/lean/vm_dynload/ffi.lean</code></p>",
        "id": 165301737,
        "sender_full_name": "James King",
        "timestamp": 1557451730
    },
    {
        "content": "<p>I'm working on changing the bind function to take the argument specs to fill the <code>ffi_cif</code> struct</p>",
        "id": 165301765,
        "sender_full_name": "James King",
        "timestamp": 1557451796
    },
    {
        "content": "<p>Why is <code>bind_foreign_symbol</code> separate from the <code>@[ffi]</code> attribute?</p>",
        "id": 165301814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557451816
    },
    {
        "content": "<p>is there a reason they wouldn't be 1-1?</p>",
        "id": 165301821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557451837
    },
    {
        "content": "<p>I think that's where I'm going to change it so that it uses this attribute part, I'm just not sure where to start to hook into that.</p>",
        "id": 165301826,
        "sender_full_name": "James King",
        "timestamp": 1557451853
    },
    {
        "content": "<p>look for uses of <code>register_system_attribute</code> to add a new system attribute</p>",
        "id": 165301980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557452103
    },
    {
        "content": "<p>Will do, thanks.</p>",
        "id": 165301990,
        "sender_full_name": "James King",
        "timestamp": 1557452116
    },
    {
        "content": "<p>This branch (the last 3 commits) has a lot in common the ffi feature: <a href=\"https://github.com/leanprover-community/lean/tree/vm_override\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/tree/vm_override\">https://github.com/leanprover-community/lean/tree/vm_override</a></p>\n<p>feel free to borrow from it. <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> did most of it.</p>",
        "id": 165304006,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557455375
    }
]