[
    {
        "content": "<p>I know the answer is probably \"don't do these cursed things\", but I want to get <code>decidable_eq</code> instance for <code>quiver.total</code> and am really struggling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">quiver.total</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">quiver.total.ext_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a.hom</span> <span class=\"bp\">==</span> <span class=\"n\">b.hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>now, the very big issue is how in the hell I decide equality of <code>heq</code>. I know I certainly need more <code>decidable</code> instances, but not sure which or how to string them together. The reason I want decidability here is because there's going to be parts where I'm hoping <code>dec_trivial</code> can do the book-keeping and not me.</p>",
        "id": 242114308,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623265539
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.total\">docs#quiver.total</a> for reference</p>",
        "id": 242115919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623266245
    },
    {
        "content": "<p>I doubt this is provable unless you also have decidable equality on all the hom sets. Let's say a.left = b.left and a.right = b.right. Then you want to decide equality of two terms of type <code>a.left ⟶ a.right</code>.</p>",
        "id": 242115974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623266281
    },
    {
        "content": "<p>Yeah, I think you need <code> [Π a b : V, decidable_eq (a ⟶ b)]</code> (edit: or something dependent but weaker)</p>",
        "id": 242116150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623266371
    },
    {
        "content": "<p>For example (I should say that I have no idea what a quiver is so please check what I'm saying) if V = just <code>unit</code> but <code>Hom(star,star)</code> is the real numbers, V has decidable equality but I doubt <code>quiver.total V</code> does.</p>",
        "id": 242116298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623266435
    },
    {
        "content": "<p>No, for sure I think I need more instances. But not sure which and then how to proceed with it</p>",
        "id": 242116932,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623266753
    },
    {
        "content": "<p>Does <code>derive decidable_eq</code> work?</p>",
        "id": 242117091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623266829
    },
    {
        "content": "<p>Worst case scenario you show it's equivalent to a sigma type, and then instances should kick in</p>",
        "id": 242117183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623266883
    },
    {
        "content": "<p>But the derive_handler ought to do that for you</p>",
        "id": 242117211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623266896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/decidable.20heq/near/242117091\">said</a>:</p>\n<blockquote>\n<p>Does <code>derive decidable_eq</code> work?</p>\n</blockquote>\n<p>putting that on <code>quiver.total</code> wants the instance that you thought it'd need, but I'm not sure how to tell <code>derive</code> \"just assume it\"</p>",
        "id": 242117766,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623267141
    },
    {
        "content": "<p>and if I try to use <code>tactic.mk_dec_eq_instance</code> directly it gives me a <code>match failed</code> error</p>",
        "id": 242117805,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623267162
    },
    {
        "content": "<p>aha! this works but probably isn't optimal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">quiver.total</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.mk_dec_eq_instance</span>\n</code></pre></div>",
        "id": 242118113,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623267317
    },
    {
        "content": "<p>Oh nice! You used black magic!</p>",
        "id": 242122773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623269388
    },
    {
        "content": "<p>Looks optimal to me</p>",
        "id": 242125472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623270685
    }
]