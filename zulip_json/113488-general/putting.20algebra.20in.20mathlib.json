[
    {
        "content": "<p>I'm trying to put the algebra from core back into mathlib.<br>\nI'm hitting an error in <code>data/int/basic</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">cast_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span>\n<span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">1193</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">cast_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 197786344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589620908
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">cast_mul</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cast_neg_of_nat</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add_one</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_mul_neg</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cast_neg_of_nat</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add_one</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_neg_mul</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ^ error is here</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"o\">(((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add_one</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 197786390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589620938
    },
    {
        "content": "<p>Of course I can fix it. But I'm trying to understand where the error came from in the first place. I would rather fix the root issue.</p>",
        "id": 197786400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589620979
    },
    {
        "content": "<p>Ooh, never mind... that line has <code>neg_mul_eq_neg_mul</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <br>\nwhich is not the same as <code>neg_mul_eq_mul_neg</code></p>",
        "id": 197786458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589621061
    },
    {
        "content": "<p>So I need to make more things protected. (-;</p>",
        "id": 197786460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589621072
    },
    {
        "content": "<p>Thanks for rubberducking!</p>",
        "id": 197786464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589621081
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a> puts algebra back in mathlib (this depends on a new lean release). Currently the branch builds <code>number_theory/quadratic_reciprocity</code> without errors.</p>",
        "id": 197788047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589623475
    },
    {
        "content": "<p>There are some errors in <code>category_theory</code>, but I think this is due to other changes in the newest version of lean.</p>",
        "id": 197788052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589623501
    },
    {
        "content": "<p>Is there some <code>nightly</code>/<code>hourly</code>/whatever version of <code>lean</code> that we can put into <code>leanpkg.toml</code> instead of <code>local</code>?</p>",
        "id": 197788192,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589623731
    },
    {
        "content": "<p>This means we will be able to remove the simp attribute on <code>one_div_eq_inv</code>, among many many other things. Thanks so much!</p>",
        "id": 197788196,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589623734
    },
    {
        "content": "<p>A second iteration of this might also move the <code>order</code> hierarchy out of core. I didn't do that now, because I don't really have a need for it. And I wanted to keep this \"small\" (-;<br>\nYes, I'm excited about all the tiny little fixes that we can now start making.</p>",
        "id": 197789571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589625748
    },
    {
        "content": "<p>We still have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- this is needed for compatibility between Lean 3.4.2 and Lean 3.5.1c -/</span>\n<span class=\"n\">def</span> <span class=\"n\">has_div_of_division_ring</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_div</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">division_ring_has_div</span>\n</code></pre></div>\n\n\n<p>in <code>algebra/ring</code></p>",
        "id": 197791606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589629086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Sorry, I'm slow. What is your point? I've moved everything out of core, right? So this is stuff that we can now leisurely fix.</p>",
        "id": 197796398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589636695
    },
    {
        "content": "<p>Or am I missing something?</p>",
        "id": 197796403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589636702
    }
]