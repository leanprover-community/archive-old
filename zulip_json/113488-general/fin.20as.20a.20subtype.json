[
    {
        "content": "<p>Now that we are changing core, what do people think of redefining <code>fin n</code> as <code>{k // k &lt; n}</code>?</p>",
        "id": 189465139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583127964
    },
    {
        "content": "<p>Why?</p>",
        "id": 189465461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583128576
    },
    {
        "content": "<p>Because it's a bit weird to me that this type would get special treating.</p>",
        "id": 189465531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583128777
    },
    {
        "content": "<p>It's a subtype, but it isn't defined as such.</p>",
        "id": 189465580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583128825
    },
    {
        "content": "<p>So the whole subtype machinery has to be reproven for <code>fin</code>.</p>",
        "id": 189465587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583128855
    },
    {
        "content": "<p>For instance?</p>",
        "id": 189465721,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583129043
    },
    {
        "content": "<p>Well, there are things like <code>fin.eq_of_veq</code> that are just copies of analogous <code>subtype</code> theorems</p>",
        "id": 189465791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583129188
    },
    {
        "content": "<p>Right but how big is the duplication?</p>",
        "id": 189465870,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583129379
    },
    {
        "content": "<p>Not that large but it has an effect on all later work. You have to use different functions and different theorems, something like the situation with <code>nat.cast</code> vs <code>int.of_nat</code></p>",
        "id": 189466061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583129725
    },
    {
        "content": "<p>I think it doesn't <em>add</em> anything to write it as a structure like that. It might make sense to have a separate definition if <code>fin</code> was defined using the fancy inductive family construction, but right now it's literally just a subset</p>",
        "id": 189466117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583129796
    },
    {
        "content": "<p>If someone feels like creating a branch of Lean with this change to see how much mathlib gets simplified, I'd be curious to see</p>",
        "id": 189466137,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583129868
    },
    {
        "content": "<p>I don't think there will be any simplification, just changing constant names in a few places. It's just more regular</p>",
        "id": 189466181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583129920
    },
    {
        "content": "<p>To me, it feels a bit like the difference between writing a structure with two fields vs using <code>prod</code>. Sometimes, the structure is a nicer solution</p>",
        "id": 189466182,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583129924
    },
    {
        "content": "<p>it's not like the names of the fields are especially meaningful here</p>",
        "id": 189466189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583129964
    },
    {
        "content": "<p>the defeq to subtype seems useful</p>",
        "id": 189466197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583129996
    },
    {
        "content": "<p>What about using coercions from and to subtypes?</p>",
        "id": 189466241,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583130021
    },
    {
        "content": "<p>cycles, can't do it</p>",
        "id": 189466245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583130039
    },
    {
        "content": "<p>lean 3 coercions kind of suck</p>",
        "id": 189466250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583130056
    },
    {
        "content": "<p>I mean functions to convert</p>",
        "id": 189466252,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583130057
    },
    {
        "content": "<p>The sorts of places where you want the defeq is for higher order objects like a proof that a subtype is encodable implies that fin is encodable</p>",
        "id": 189466315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583130149
    },
    {
        "content": "<p>here you need the function to be an equiv and everything has to be transported along it</p>",
        "id": 189466317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583130174
    },
    {
        "content": "<p>missing defeqs at the type level are difficult to patch around</p>",
        "id": 189466322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583130202
    },
    {
        "content": "<blockquote>\n<p>I don't think there will be any simplification, just changing constant names in a few places. It's just more regular</p>\n</blockquote>\n<p>That sounds like a lot of hassle for very little payoff</p>",
        "id": 189466437,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583130419
    },
    {
        "content": "<p>BTW, is there any difference between <code>fin.ext_iff</code> and <code>fin.eq_iff_veq</code>?</p>",
        "id": 189466448,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583130457
    },
    {
        "content": "<p>I prefer to think of changes in terms of how close to ideal they are, rather than how close to today's version they are. The latter mentality leads to cruft</p>",
        "id": 189466848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583131156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Apparently not, and they are literally neighbors in the file. Someone must have missed the first one and wrote the second</p>",
        "id": 189466919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583131284
    },
    {
        "content": "<p>...on the same day by the same person (<a href=\"https://github.com/leanprover-community/mathlib/commit/d2b39404f2216bdf985bb0eed27247d04a73a01f#diff-956a4c8f0f1dea36ca1059a6e71d64a5R47-R48\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/d2b39404f2216bdf985bb0eed27247d04a73a01f#diff-956a4c8f0f1dea36ca1059a6e71d64a5R47-R48\"><code>ext_iff</code></a>, <a href=\"https://github.com/leanprover-community/mathlib/commit/bac655d3ad38cf95870986d819162df33f91d1a1#diff-956a4c8f0f1dea36ca1059a6e71d64a5R25-R26\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/bac655d3ad38cf95870986d819162df33f91d1a1#diff-956a4c8f0f1dea36ca1059a6e71d64a5R25-R26\"><code>eq_iff_veq</code></a>)</p>",
        "id": 189466994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583131421
    },
    {
        "content": "<p>In two different commits.</p>",
        "id": 189467055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583131499
    },
    {
        "content": "<p>This is actually another place where we could stand to be more regular in our naming. <code>ext_iff</code> is used for a bunch of structures now, so the names of extensionality for <code>fin</code> and <code>subtype</code> are now odd men out</p>",
        "id": 189467130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583131618
    }
]