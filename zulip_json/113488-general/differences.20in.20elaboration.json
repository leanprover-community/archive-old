[
    {
        "content": "<p>If I copy out the definition of <code>nat.no_confusion</code> and call it <code>nat.no_confusion'</code>, as below, Lean has no problems with the line <code>nat.no_confusion' h</code> in the proof of <code>one_ne_two</code>. But if I use <code>nat.no_confusion</code> itself, I need to write <code>@nat.no_confusion _ _ _ h</code> instead.</p>\n<p>Two questions:</p>\n<ol>\n<li>Why is there this difference in behaviour? That is, how does <code>nat.no_confusion</code> differ from <code>nat.no_confusion'</code>?</li>\n<li>Why does <code>@nat.no_confusion _ _ _ h</code>work when <code>nat.no_confusion h</code>doesn't? The former expression seems to provide no more information than the latter.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.no_confusion'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"bp\">→</span> <span class=\"n\">nat.no_confusion_type</span> <span class=\"n\">P</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq.rec</span> <span class=\"n\">ℕ</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">nat.no_confusion_type</span> <span class=\"n\">P</span> <span class=\"n\">v1</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h11</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v1</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">nat.cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">nat.no_confusion_type</span> <span class=\"n\">P</span> <span class=\"n\">v1</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.refl</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">v2</span> <span class=\"n\">h12</span> <span class=\"n\">h12</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.no_confusion'</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"n\">nat.no_confusion'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"n\">zero_ne_one</span>\n</code></pre></div>",
        "id": 246462886,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1626705466
    },
    {
        "content": "<p><del>The difference is that <code>nat.no_confusion</code> has <code>@[elab_as_eliminator]</code></del></p>",
        "id": 246465051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626706383
    },
    {
        "content": "<p>Is there any easy way to see what attributes there is? Maybe a #print attribute?</p>",
        "id": 246466616,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626706938
    },
    {
        "content": "<p>regular <code>#print</code> will show you all the attributes on a definition</p>",
        "id": 246466678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626706966
    },
    {
        "content": "<p>The elaborator works differently for \"official\" <code>no_confusion</code> applications <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/elaborator.cpp#L1814\">https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/elaborator.cpp#L1814</a> as you've made a new declaration by hand it doesnt satisfy <code>is_no_confusion</code> and so is not treated specially by the elaborator.</p>",
        "id": 246466697,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626706974
    },
    {
        "content": "<p><code>(id @nat.no_confusion)</code> works too in place of <code>nat.no_confusion'</code></p>",
        "id": 246466942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626707072
    },
    {
        "content": "<p>note that in the error message, the type that it thinks <code>nat.no_confusion h</code> ought to have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nat.no_confusion_type</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p>unfolds to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 246467508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626707331
    },
    {
        "content": "<p>that is, it is using the entire goal as the major premise, rather than just the right hand side of the implication</p>",
        "id": 246467564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626707361
    },
    {
        "content": "<p>this is the proof it was expecting you to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"n\">nat.no_confusion</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.no_confusion</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 246467842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626707506
    },
    {
        "content": "<p>Thanks all. It seems (unless I'm wildly mistaken [EDIT: I am wildly mistaken!]) that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s answer is related to the answers to the <a href=\"#narrow/stream/113488-general/topic/id.20in.20proofs.20generated.20by.20tactics\">question I asked yesterday</a> about the use of <code>id</code> in generated proofs.</p>\n<p>I don't yet understand enough about elaboration / type-checking to see <em>why</em> <code>id</code> helps the kernel in inferring the correct type. Does its use here prevent the special elaboration of <code>no_confusion</code> function applications mentioned by <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> ?</p>",
        "id": 246476969,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1626711606
    },
    {
        "content": "<p>no, <code>id</code> is helping the <em>kernel</em>, after elaboration is complete. This <code>no_confusion</code> stuff is about how <em>elaboration</em> works, before we know all details of the given expression and are trying to fill metavariables</p>",
        "id": 246477204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626711724
    },
    {
        "content": "<p>the reason having id helps the kernel is because checking <code>id B (id C e) : A</code> entails proving that <code>A</code> is defeq to <code>B</code> and <code>B</code> is defeq to <code>C</code> and the type of <code>e</code> is defeq to <code>C</code>, while checking <code>e : A</code> means checking that the type of <code>e</code> is defeq to <code>C</code></p>",
        "id": 246477394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626711833
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>. So would it be fair to say that I was wildly mistaken in my previous comment?</p>",
        "id": 246477395,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1626711834
    },
    {
        "content": "<p>obviously the first thing implies the second if you assume defeq is transitive, but <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">it's not</a>, and more to the point, there can be a large runtime cost difference between checking the former and the latter, even if the kernel can ultimately find its way to the end</p>",
        "id": 246477604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626711955
    },
    {
        "content": "<p>it's the same idea as giving a proof in small steps vs giving no hints and letting the reader come up with their own proof</p>",
        "id": 246477695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626711989
    },
    {
        "content": "<p>That said, <em>most</em> uses of <code>id</code> in tactics are superfluous. The reason they show up so often is because the primitive that does <code>change</code> inserts that identity term, in order to avoid the rare pathologies where dropping the <code>id</code> causes problems</p>",
        "id": 246478051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626712184
    },
    {
        "content": "<p>Specifically, this part: <a href=\"/user_uploads/3121/SLUvhzqy-qcB8AdJO7NwA1HQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SLUvhzqy-qcB8AdJO7NwA1HQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SLUvhzqy-qcB8AdJO7NwA1HQ/image.png\"></a></div>",
        "id": 246478057,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626712186
    },
    {
        "content": "<p>I think I understand now. Just to make sure I'm not being an idiot, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, are those meant to be <code>@id</code>s in your example? If so, I see that the use of <code>@id</code> provides type information.</p>\n<p>I also see that the answers to many of the questions I ask are found in your thesis, so I really should get round to reading it!</p>",
        "id": 246479651,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1626712951
    },
    {
        "content": "<p>yes those are <code>@id</code></p>",
        "id": 246479671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626712967
    },
    {
        "content": "<p>by the way, <code>show T, from e</code> is syntactic sugar for <code>@id T e</code></p>",
        "id": 246479791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626713024
    },
    {
        "content": "<p>Can that be turned off in the pretty-printer?</p>",
        "id": 246484307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626715116
    }
]