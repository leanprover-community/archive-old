[
    {
        "content": "<p>We have a lot of simp lemmas in category theory that describe the action of functors, natural isomorphisms, etc. on various things. Johan has a few open PRs adding more of these lemmas (eg <a href=\"https://github.com/leanprover/mathlib/issues/503\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/503\">#503</a>, <a href=\"https://github.com/leanprover/mathlib/issues/505\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/505\">#505</a>) and they prompted me to try to understand how to describe these lemmas systematically.</p>",
        "id": 151823722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544851472
    },
    {
        "content": "<p>I think we can build these rfl lemmas by applying the following algorithm.</p>\n<ul>\n<li>Start with the result type <code>LHS = RHS</code>, where LHS is the thing being defined and RHS is its definition (this is what just putting <code>@[simp]</code> on the definition would do).</li>\n<li>If the RHS is a Prop, then just throw away the equation (do nothing).</li>\n<li>Otherwise, if the RHS is a record constructor <code>{ f1 := R1, f2 := R2 }</code>, recursively produce lemmas of the form <code>LHS.f1 = R1</code>, <code>LHS.f2 = R2</code>.</li>\n<li>Otherwise, if the RHS is a lambda <code>\\lam x, R x</code>, recursively produce a lemma <code>LHS x = R x</code>.</li>\n<li>Otherwise, output a simp lemma stating <code>LHS = RHS</code> by rfl.</li>\n</ul>",
        "id": 151823896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544851840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I guess we discussed something along these lines at some point</p>",
        "id": 151823958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544852023
    },
    {
        "content": "<p>But now I have a pseudo-spec</p>",
        "id": 151824107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544852306
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/116395-maths/subject/sheaves.20and.20sites/near/148770849\" title=\"#narrow/stream/116395-maths/subject/sheaves.20and.20sites/near/148770849\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/sheaves.20and.20sites/near/148770849</a> for something that might qualify as pre-semi-pseudo-spec.</p>",
        "id": 151825251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544854895
    },
    {
        "content": "<p>My PR's are the result of following Mario's creed \"just go for it\". But I definitely wouldn't mind if this was automated away.</p>",
        "id": 151825291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544854976
    },
    {
        "content": "<p>I remember this conversation. In my mind, that kind of feature might be about translating lemmas about specific definitions into lemmas referring to a type class instance.</p>",
        "id": 151842594,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544891055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I'm not sure I understand what you mean. Is it close to what Reid wrote down, or do you want something (slightly) different?</p>",
        "id": 151844113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544893606
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 151844463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544894189
    },
    {
        "content": "<p>Actually, I have a hard time remembering the details of that idea. I'll try to find the conversation again</p>",
        "id": 151846909,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544899080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> If you want a good showcase of what Reid and I mean, I think you should look at the file on comma categories: <a href=\"https://github.com/leanprover-community/mathlib/blob/over_under/category_theory/comma.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/over_under/category_theory/comma.lean\">https://github.com/leanprover-community/mathlib/blob/over_under/category_theory/comma.lean</a><br>\nI just started adding over categories to the mix (a special case of comma categories), and I'm restating all the simp lemmas. The signal-to-noise ratio is increasing rapidly.</p>",
        "id": 151851104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544907618
    },
    {
        "content": "<p>Ah yes! That's also what I was going for I think. The way I was generalizing it is that we want to unfold specific projections. I think I had an idea of which ones to unfold but I'd have to get back into that mindset</p>",
        "id": 151851170,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544907815
    },
    {
        "content": "<p>The good news is that soon, I won't have to take care of finding an apartment and I will have only Lean and my dissertation to take care of.</p>",
        "id": 151851331,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544908132
    },
    {
        "content": "<p>I'm sorry if I annoyingly keep coming on about this, but I have a command which does the constructor-half of this thing and has been tested on at least one (:D) category theory structure definition. It's called <code>rfl_lemma</code> (you use it on its own line like <code>rfl_lemma inverse_equivalence map</code>---which would tell you that an inverse equivalence of an equivalence has functor going the \"forward way\" equal to the functor going the \"backward way\" in the original equivalence), and is here:<br>\n<a href=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/command/rfl_lemma.lean\" target=\"_blank\" title=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/command/rfl_lemma.lean\">https://github.com/semorrison/lean-tidy/blob/master/src/tidy/command/rfl_lemma.lean</a></p>\n<p>It took multiple iterations because it turned out that getting the types right for the lemma I needed to generate turned out to be really quite hard (at least for me). I can give some examples to elabourate this point if anyone is interested. Making it do this for every projection of a structure instead of just the specified one is trivial.</p>",
        "id": 152319775,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386074
    },
    {
        "content": "<p><code>rfl_lemma?</code> is meant to tell you what the code generated was, and <code>private rfl_lemma ...</code> makes a private definition.</p>",
        "id": 152319830,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386162
    },
    {
        "content": "<p>How much does this depend on the <code>lean-tidy</code> repo?</p>",
        "id": 152319847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545386191
    },
    {
        "content": "<p>Sounds cool btw!</p>",
        "id": 152319851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545386202
    },
    {
        "content": "<p>it depends on a few pieces of the <code>lib</code> folder in there, let me take a look</p>",
        "id": 152319864,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386222
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>tk &quot;private rfl_lemma&quot;\n</pre></div>\n\n\n<p>omg</p>",
        "id": 152319870,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545386242
    },
    {
        "content": "<p>Is that pushing the definition of \"token\" a bit far or something?</p>",
        "id": 152319928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545386306
    },
    {
        "content": "<p>If it doesn't depend too much on <code>lean-tidy</code>, I'dd say: push it to a branch on the community repo. Then we can experiment with it.</p>",
        "id": 152319930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545386310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It is, but I guess it actually works. Though, <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>, have you taken a look at the <code>decl_meta_info</code> parameter?</p>",
        "id": 152319955,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545386367
    },
    {
        "content": "<p>No I haven't Sebastian, and thanks, now I have an idea about what it's for :D</p>",
        "id": 152320028,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386443
    },
    {
        "content": "<p>Yeah, I don't think your current code would have worked anyway. There is no such registered token.</p>",
        "id": 152320044,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545386477
    },
    {
        "content": "<p>The thing is, I'm pretty sure it did work! I'll try...</p>",
        "id": 152320059,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386500
    },
    {
        "content": "<p>also it was before I knew I could do stuff like parse a question mark after a token, so please forgive me... :D</p>",
        "id": 152320066,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386518
    },
    {
        "content": "<p>It will be parsed successfully, but it will still call the regular definition with <code>private := tt</code> in the meta info</p>",
        "id": 152320116,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545386549
    },
    {
        "content": "<p>Unless you've run it and can prove I'm crazy, I just did and I'm quiiite confident a different one of those <code>user_command</code>s is being called depending on private or not</p>",
        "id": 152320210,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386649
    },
    {
        "content": "<p>Does it have something to do with the fact that for <code>user_command</code>s, unlike <code>user_notation</code>s, you don't need to reserve tokens for them to work?</p>",
        "id": 152320258,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386736
    },
    {
        "content": "<p>Right... oops</p>",
        "id": 152320261,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545386748
    },
    {
        "content": "<p>:D</p>",
        "id": 152320305,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386766
    },
    {
        "content": "<p>But no reason not to fix it up so it works properly... cheers! (and I only need a single definition now, not <code>2^2</code>)</p>",
        "id": 152320330,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386807
    },
    {
        "content": "<p>BTW, here's a \"live demo\"</p>",
        "id": 152320363,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386859
    },
    {
        "content": "<p>(RE: the original post)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">my_str</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">a_cnstr</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_str</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">a_cnstr&#39;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_str</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">rfl_lemma</span><span class=\"err\">?</span> <span class=\"n\">a_cnstr</span> <span class=\"n\">a</span>\n<span class=\"kn\">private</span> <span class=\"n\">rfl_lemma</span><span class=\"err\">?</span> <span class=\"n\">a_cnstr&#39;</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 152320369,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545386870
    },
    {
        "content": "<p>Nice. Any reason it's not an attribute?</p>",
        "id": 152320457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545386989
    },
    {
        "content": "<p>That's cool</p>",
        "id": 152320555,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545387082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Based on the pieces of <code>lib</code> which have ended up in mathlib now, I just need the <code>lib.expr</code> support file. My only reluctance comes from the fact that I will have to check whether a few of the functions at the bottom of that file are already in mathlib---at the time it was less effort just to write them.</p>",
        "id": 152320641,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545387213
    },
    {
        "content": "<p>One more thing if anyone doing maths actually uses it: it adds a prime to the projection name you supply, seeing if that works, before trying without. Hopefully that's convenient</p>",
        "id": 152320981,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545387592
    },
    {
        "content": "<p>The interface I had in mind was that you'd write something like <code>@[simp_fields] def a_cnstr ... := ...</code>, and it would automatically generate all of the appropriate lemmas.</p>",
        "id": 152351507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545419280
    }
]