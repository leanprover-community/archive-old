[
    {
        "content": "<p>I'd like to introduce a slight change in PR management on mathlib. In order to support third party contribution to PRs, I would like to introduce \"PR branches\" to mathlib. The basic idea is, if there is a PR that is currently in review, for which you are not the author, and you would like to help get it into mathlib, just ask to have it made public on the PR page, and I will add it as a branch on the mathlib repo. This way, if a PR is stalled, you can get it back on track. I think this will make collaboration on WIPs easier, although it will probably confuse GitHub a bit, because of the way PR pages are set up. If you PR to a PR branch, make sure to reference the original PR # so that we can navigate between them through GitHub.</p>",
        "id": 131008853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533596504
    },
    {
        "content": "<p>Would it be useful to have a separate account for those WIP? That way you can have a stricter separation between the PRs. The added benefit is that you may promote more maintainers for that account</p>",
        "id": 131009168,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533597070
    },
    {
        "content": "<p>an interesting idea, I hadn't thought about having a public fork</p>",
        "id": 131009234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533597170
    },
    {
        "content": "<p>You may or may not recall that mathlib was once <a href=\"https://github.com/leanprover/library_dev\" target=\"_blank\" title=\"https://github.com/leanprover/library_dev\">https://github.com/leanprover/library_dev</a> . When we first moved from library_dev to mathlib, the idea was that library_dev might contain more experimental stuff or stuff that doesn't quite compile, but that never really happened</p>",
        "id": 131009364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533597403
    },
    {
        "content": "<p>I vaguely remember. I think a PR account might have to refrain from having a master branch. It would really be only a waiting room for big PRs</p>",
        "id": 131009435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533597530
    },
    {
        "content": "<p>well, if it's a fork of mathlib then it will have a master branch, that is just tracking mathlib</p>",
        "id": 131009497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533597607
    },
    {
        "content": "<p>Yeah exactly. I would just refrain from merging anything into <code>master</code> that <code>leanprover/mathlib</code> doesn't have</p>",
        "id": 131009519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533597700
    },
    {
        "content": "<p>I'm liking the idea so far. <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> What do you think about this? I can create a <code>lean-sandbox</code> user account, fork mathlib, and just give write access to anyone who wants it. People can still use the PR system on the sandbox account if they want, or create branches and PR them to mathlib.</p>",
        "id": 131009698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533598010
    },
    {
        "content": "<p>I recently created <code>https://github.com/leanprover-community/lean-mode-contrib</code> to host community contributions to <code>lean-mode</code>. It could double as a home for mathlib PRs</p>",
        "id": 131009815,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533598219
    },
    {
        "content": "<p>sounds good</p>",
        "id": 131009834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533598292
    },
    {
        "content": "<p>is <code>lean-mode-contrib</code> a fork of something?</p>",
        "id": 131009910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533598363
    },
    {
        "content": "<p>Not quite. I thought I'd make it a mode that adds to <code>lean-mode</code>. I'm replicating some functionalities from <code>company-coq</code>. And now that the repo exists, I think I'll start adding some of my own scripts (like shortcuts for adding common libraries to your leanpkg.toml file).</p>",
        "id": 131010064,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533598664
    },
    {
        "content": "<p>Now that you ask, it might work if I just make it a fork of <code>lean-mode</code> with added features.</p>",
        "id": 131010110,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533598698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> no objection here.</p>",
        "id": 131011594,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1533601350
    },
    {
        "content": "<p>Great! <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What do you think about migrating <code>for_mathlib</code> to this new repo?</p>",
        "id": 131011651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533601466
    },
    {
        "content": "<p>I suggest we choose a couple of maintainers for that repo. I already sent you and Johannes an invitation. I can send others.</p>",
        "id": 131012185,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533602515
    },
    {
        "content": "<p>I can be a maintainer, but I expect there won't be much maintaining going on</p>",
        "id": 131013207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533604416
    },
    {
        "content": "<p>mostly it's just branch organization and such</p>",
        "id": 131013212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533604440
    },
    {
        "content": "<p>Since the idea is to have it free for all, it's up to individuals to maintain their own branches as they see fit</p>",
        "id": 131013268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533604507
    },
    {
        "content": "<p>I am inspired in part by metamath's \"mathbox\" infrastructure, although in that case the mathboxes are required to compile at all times but are otherwise organized at the discretion of the user</p>",
        "id": 131013282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533604557
    },
    {
        "content": "<p>In principle, the maintainers will have to accept pull requests too. That's why I would err towards more maintainers rather than fewer. </p>\n<p>I've never heard of the mathbox. Do you have a reference for it?</p>",
        "id": 131013456,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533604837
    },
    {
        "content": "<p><a href=\"http://us.metamath.org/mpeuni/mmtheorems.html#19\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/mmtheorems.html#19\">http://us.metamath.org/mpeuni/mmtheorems.html#19</a></p>",
        "id": 131015487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533607982
    },
    {
        "content": "<p>I don't really understand this proposal (that's not some implied criticism -- I just actually mean I don't understand it). I've just looked through the perfectoid <code>for_mathlib</code> directory and I see stuff I wrote and then forgot about, stuff which would be trivial to PR into mathlib, stuff which I half-wrote (quotient rings) and then someone else wrote better and which might already have been PR'ed -- after our discussion yesterday I'm wondering whether actually it might introduce some kind of order into the system if some of the really basic stuff like quotient additive groups and quotient rings should get into mathlib ASAP (indeed some of it might be there already). One thing I certainly don't want is for us to end up in the situation where people are relying on me to do things, as I already have far too much to do. As you know Mario I have started making tiny mathlib PRs, just dipping my toe in as it were; the stuff I put in \"for_mathlib\" myself is just stuff which I feel like it would be too much effort for me to PR into mathlib. On the other hand I'm coming round to the idea that perhaps  working from the bottom up is actually a good idea (rather than what we're currently doing, which is working top down, bottom up and in the middle all at once). </p>\n<p>I think the problem I currently have with the mathlib set-up (which is I think why I started the \"for-mathlib\" directory) is the following. Let's say I realise I need 50 lines of code about e.g. topological groups, which is not in mathlib, but which would very naturally live in an existing mathlib file, e.g. <code>analysis/topology/topological_structures.lean</code>. The thing is, I want them <em>now</em>. I could either edit <code>topological_structure.lean</code> and make a PR, which would take me a long time because mathlib has conventions I don't know about or don't understand, and then there would be some to-ing and fro-ing whilst people told me that I've proved this lemma in a stupid way, and that lemma is just <code>by simp</code>, and that lemma is already there, and that lemma never uses inverses so it should really be in the topological monoid section -- and then I have to find time to edit everything etc etc to try and fix it up -- and this process can easily go on for weeks. During that time I find it really hard to actually access my own work, because it is \"in limbo\" -- it's not in mathlib and so it's not in my project. It's <em>much</em> easier just to write <code>for_mathlib/topological_structures.lean</code> and prove the lemmas I want, with their bad names and bad proofs and superfluous hypotheses, because then I can start using them immediately, because I'm not really interested in these lemmas anyway, I'm far more interested in doing the \"meat\" which is the perfectoid spaces, and in some sense I just want someone else to prove these basic facts about topological groups, someone who knows what they're doing and will do it right the first time. Unfortunately the set of such people is pretty small and they all have their own things that they're doing. I'm not motivated to PR, because of this. </p>\n<p>Will the proposed system offer some sort of alternative approach which gets me out of this hole?</p>",
        "id": 131030200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533630736
    },
    {
        "content": "<blockquote>\n<p>One thing I certainly don't want is for us to end up in the situation where people are relying on me to do things, as I already have far too much to do.</p>\n</blockquote>\n<p>The idea here is to allow other people to work on your PRs</p>",
        "id": 131030222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533630801
    },
    {
        "content": "<blockquote>\n<p>Let's say I realise I need 50 lines of code about e.g. topological groups, which is not in mathlib, but which would very naturally live in an existing mathlib file, e.g. analysis/topology/topological_structures.lean. The thing is, I want them <em>now</em>.</p>\n</blockquote>\n<p>I am fully aware of this situation, I often have to deal with it myself. The solution I came up with for this is to have a <code>pending</code> directory or file, which serves basically the same purpose as your <code>for_mathlib</code>. The difference is that I PR <em>first</em>, and then put something as close as possible to my PR into this pending area during the review period. That way, once the PR is accepted all I have to do is delete the relevant portion from the pending area.</p>",
        "id": 131030404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533631048
    },
    {
        "content": "<p>(mathlib used to have a <code>pending</code> directory, but I removed it since lean core no longer accepts PRs.)</p>",
        "id": 131030672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533631414
    },
    {
        "content": "<p>I see. So basically you're saying that I'm doing it wrong, and I am beginning to learn from my own experience that the \"code now, PR later\" approach has its disadvantages (e.g. I think that my partially written quotient ring code might be obsolete -- did Chris PR this? I still struggle with quotients; I have <code>a ≈ 0↔ ⟦a⟧ = ⟦0⟧ : by sorry</code> in my code at some point). I think it's far easier (for me at least) to understand other people when they say \"do it my way not your way\", once I've begun to realise the disadvantages of my way.</p>",
        "id": 131030721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533631452
    },
    {
        "content": "<p>Which is a pity. It would be awesome if they would accept one final PR that moved all of core into mathlib.</p>",
        "id": 131030722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533631453
    },
    {
        "content": "<p>I'm not saying you have to PR everything as soon as it is written. But once you decide you have something you want to get into mathlib, it moves from where it currently is, probably some random file in your project, to the <code>for_mathlib</code> area and also into a PR, possibly [WIP]. Then you get feedback on your stuff, and if you make any updates to the PR you can either copy them to your local version or just leave the pending area out of date and update later (if you think it will affect your project I would recommend you update sooner rather than later).</p>",
        "id": 131030916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533631783
    },
    {
        "content": "<blockquote>\n<p>I think it's far easier (for me at least) to understand other people when they say \"do it my way not your way\", once I've begun to realise the disadvantages of my way.</p>\n</blockquote>\n<p>I know I have a bad habit of asking people to \"do it my way not your way\", but I try to explain what the major issues are. The main problem is that making bad design decisions can be very expensive time-wise, without even alerting you to the possibility that the cost is avoidable. So when I hear that you've been struggling with an issue for several months and just working around it, my heart goes out to you and I wish I could have saved you from that.</p>",
        "id": 131031154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533632079
    },
    {
        "content": "<p>Is this public repo already available?</p>",
        "id": 131088374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533704996
    },
    {
        "content": "<p>it is now <a href=\"https://github.com/leanprover-community/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a></p>",
        "id": 131088548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533705336
    },
    {
        "content": "<p>Ok, cool! And how would one create a new public PR branch on it?</p>",
        "id": 131088817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533705842
    },
    {
        "content": "<p>Should one ask for push access in this topic?</p>",
        "id": 131088838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533705863
    },
    {
        "content": "<p>yeah, that seems fine</p>",
        "id": 131088859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533705914
    },
    {
        "content": "<p>okay I think I figured it out. You should now be a \"collaborator\" on leanprover-community/mathlib</p>",
        "id": 131089133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533706422
    },
    {
        "content": "<p>I just sent invites to everybody who has ever been reasonably active on mathlib. If you didn't get one just ask</p>",
        "id": 131089305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533706729
    },
    {
        "content": "<p>If you want to use leanprover-community/mathlib to create a PR, I propose you start by creating a branch from leanprover/master. Do not commit to leanprover-community/master directly, that branch is only meant to track leanprover/master.</p>",
        "id": 131089569,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533707317
    },
    {
        "content": "<p>Let me check I understand correctly what I'm meant to do. I close my current norm PR. Push my norm branch to this new repository, open a new PR from there, right?</p>",
        "id": 131100321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533725152
    },
    {
        "content": "<p>Yes, that's about right!</p>",
        "id": 131100390,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533725267
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib\">shared mathlib fork</a> doesn't seem to add much benefit over any other mathlib fork. You could easily use your own. It really is just a bit more convenient is that it has an established “trusted” set of collaborators, so that anyone in that group can contribute to anyone else's work. But if you want to work with only a different set of collaborators, you can also set up your own fork. But it's also a bit more questionable in that there's no clear policy for who does what with what branches, which can cause problems if people have different assumptions or don't communicate changes to each other.</p>",
        "id": 131100889,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726130
    },
    {
        "content": "<p>Clearly it assumes quite a bit a trust, but let's see how it goes (I'm pretty optimistic here).</p>",
        "id": 131100915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726220
    },
    {
        "content": "<p>I think I'd do this differently. Instead of a mathlib fork, I'd suggest a sort of mathlib nursery, which is a library that has mathlib as a dependency. The collaborators would be set up as they are now, but the library source would be initially empty and added to by anyone on the <code>master</code> branch. Then, everybody moves WIP stuff into the mathlib-nursery. Once somebody's happy with part of their work, they can get feedback from others and somebody can PR that to mathlib. When the PR makes it into mathlib, the mathlib dependency commit is updated and the work is removed from mathlib-nursery.</p>",
        "id": 131101252,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726652
    },
    {
        "content": "<p>Too late, I opened <a href=\"https://github.com/leanprover/mathlib/pull/241\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/241\">https://github.com/leanprover/mathlib/pull/241</a> Let's see how this idea works out</p>",
        "id": 131101266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726693
    },
    {
        "content": "<p>The main difference is that everybody works on <code>mathlib-nursery/master</code> instead of multiple <code>mathlib</code> branches.</p>",
        "id": 131101268,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726702
    },
    {
        "content": "<p>Actually, maybe mathlib-nursery and this mathlib fork can coexist and both be useful.</p>",
        "id": 131101274,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726719
    },
    {
        "content": "<p>The advantage of the current proposal is we don't have to move things into their final position</p>",
        "id": 131101316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726727
    },
    {
        "content": "<p>So, work starts in the nursery and then moves to the fork.</p>",
        "id": 131101318,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726730
    },
    {
        "content": "<p>And now Mario has to work on norms in order to prove his new workflow is useful <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 131101323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726760
    },
    {
        "content": "<p>The advantage of the nursery is that things can change and you don't need to worry about final positions. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 131101325,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726768
    },
    {
        "content": "<p>My experience is that the moving to final position phase is very boring and time consuming</p>",
        "id": 131101334,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726802
    },
    {
        "content": "<blockquote>\n<p>And now Mario has to work on norms in order to prove his new workflow is useful <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>But the leanprover-community/mathlib doesn't add anything to what you're doing. You could always have allowed the mathlib collaborators access to your branch.</p>",
        "id": 131101343,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726832
    },
    {
        "content": "<p>What it does allow is non-mathlib collaborators to work on your branch.</p>",
        "id": 131101386,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726849
    },
    {
        "content": "<p>Right, so <em>you</em> should work on that branch, mess it up and prove Mario was wrong.</p>",
        "id": 131101399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726883
    },
    {
        "content": "<p>no, wait</p>",
        "id": 131101412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726905
    },
    {
        "content": "<p>Alternatively, if it was in a nursery, I could already be using it within the nursery. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 131101418,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533726921
    },
    {
        "content": "<p>Say Kenny works on it</p>",
        "id": 131101422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726932
    },
    {
        "content": "<p>or Chris, and prove Mario was right</p>",
        "id": 131101428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726946
    },
    {
        "content": "<p>work on what</p>",
        "id": 131101432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533726957
    },
    {
        "content": "<p>You <em>should</em> do Patrick's homework <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 131101480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533726994
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/norms\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/norms\">https://github.com/leanprover-community/mathlib/tree/norms</a></p>",
        "id": 131101481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726999
    },
    {
        "content": "<p>That's a new branch is the new mathlib fork where everyone from the community can improve on a PR</p>",
        "id": 131101489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533727029
    },
    {
        "content": "<p>The \"nursery\" idea is closer to the original purpose of <code>library_dev</code></p>",
        "id": 131101944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533727757
    },
    {
        "content": "<p>Both options have their uses. I think the main factor is whether you want to work in a project that has a mathlib dependency, or in mathlib itself. For mathlib PRs of course the second option is better</p>",
        "id": 131102033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533727889
    },
    {
        "content": "<p>For offshoot projects and experiments, a separate project is maybe nicer to work with, although you lose the ability to modify bits of mathlib to accomodate the work</p>",
        "id": 131102114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533727985
    },
    {
        "content": "<blockquote>\n<p>Both options have their uses. I think the main factor is whether you want to work in a project that has a mathlib dependency, or in mathlib itself. For mathlib PRs of course the second option is better</p>\n</blockquote>\n<p>Yeah, agreed. I think it would be nice to have a community-based nursery for stuff not ready for PR.</p>",
        "id": 131102193,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533728124
    },
    {
        "content": "<p>So, there could be a staged process:</p>\n<p>1. throw it in the nursery, let other people use it or work on it<br>\n2. when matured, create a community mathlib PR for it</p>",
        "id": 131102261,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533728184
    },
    {
        "content": "<p>By definition, what's in the nursery is immature.</p>",
        "id": 131102266,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533728210
    },
    {
        "content": "<p>Whilst I have no understanding of the ins and outs of this new proposal, I think that there's a lot to be said for trying a random new thing and seeing how it turns out.</p>",
        "id": 131107122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533733530
    },
    {
        "content": "<p>OK so I want to try and get some of this <code>for_mathlib</code> stuff out of the perfetoid repo and into mathlib. I want to start with <a href=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/add_submonoid.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/add_submonoid.lean\">https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/add_submonoid.lean</a> that file, which is Johan Commelin literally translating <a href=\"https://github.com/leanprover/mathlib/blob/master/group_theory/submonoid.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/group_theory/submonoid.lean\">https://github.com/leanprover/mathlib/blob/master/group_theory/submonoid.lean</a> into additive notation. There is also an <code>add_subgroup.lean</code> file which is the corresponding translation of <code>subgroup.lean</code>. Do I PR to mathlib? Do I push to mathlib-community?</p>",
        "id": 131113284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740153
    },
    {
        "content": "<p>This is the other file I would like to get into mathlib: <a href=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/add_subgroup.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/add_subgroup.lean\">https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/add_subgroup.lean</a>, a translation of <a href=\"https://github.com/leanprover/mathlib/blob/master/group_theory/subgroup.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/group_theory/subgroup.lean\">https://github.com/leanprover/mathlib/blob/master/group_theory/subgroup.lean</a> .</p>",
        "id": 131113483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740358
    },
    {
        "content": "<p>literal translation of files to additive notation is what <code>to_additive</code> is for</p>",
        "id": 131113511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740395
    },
    {
        "content": "<p>OK. So what do we do?</p>",
        "id": 131113570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740415
    },
    {
        "content": "<p>Because at the end of the day I want to quotient out an additive group by a subgroup and it's time to make progress.</p>",
        "id": 131113588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740445
    },
    {
        "content": "<p>because what I really want is to quotient out a ring by an ideal and then borrow some properties from the group quotient.</p>",
        "id": 131113616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740488
    },
    {
        "content": "<p>because what I really want is to prove some basic results about valuations, and I need ring quotients.</p>",
        "id": 131113635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740512
    },
    {
        "content": "<p>PR it</p>",
        "id": 131113682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740529
    },
    {
        "content": "<p>PR the two files I just linked to? To mathlib or the community one?</p>",
        "id": 131113689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740549
    },
    {
        "content": "<p>do it from the community fork if you think someone else is going to clean it up for you</p>",
        "id": 131113697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740566
    },
    {
        "content": "<p>What if I don't have a clue if someone else is going to clean it up for me and I don't know how to do it myself either?</p>",
        "id": 131113736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740609
    },
    {
        "content": "<p>then I will clean it up or it will languish</p>",
        "id": 131113748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740628
    },
    {
        "content": "<p>And should I then make the perfectoid repo depend on community mathlib instead of regular mathlib?</p>",
        "id": 131113796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740674
    },
    {
        "content": "<p>No, you should keep the stuff in <code>for_mathlib</code> and develop the PR independently</p>",
        "id": 131113900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740792
    },
    {
        "content": "<p>I see. Thanks!</p>",
        "id": 131113904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533740804
    },
    {
        "content": "<p>So after <code>git push --set-upstream origin additive-subgroup-theory</code> github thinks I'm about to submit a PR to mathlib. Is that what I am supposed to be doing?</p>",
        "id": 131114525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533741550
    },
    {
        "content": "<p>My <code>origin</code> is <code>    git@github.com:leanprover-community/mathlib.git </code></p>",
        "id": 131114617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533741616
    },
    {
        "content": "<p>i.e. is this just a regular PR to mathlib, but from the community fork rather than my own personal fork?</p>",
        "id": 131114640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533741662
    },
    {
        "content": "<p>yes</p>",
        "id": 131114646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533741666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> I like the idea of a nursery. It makes it easier to get features used faster. The only downside is that you can't adapt any existing features of mathlib. I wonder if it might grow into a huge mess. Maybe we can still try to keep it clean.</p>",
        "id": 131134390,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533764718
    },
    {
        "content": "<p>I'm tempted in creating that nursery. Any objections?</p>",
        "id": 131134398,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533764740
    },
    {
        "content": "<blockquote>\n<p>I'm tempted in creating that nursery. Any objections?</p>\n</blockquote>\n<p>Go for it. I'll share the responsibility for keeping it clean. If you don't get around to it, I will create it.</p>",
        "id": 131155297,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533798738
    },
    {
        "content": "<p>I'm on board</p>",
        "id": 131155306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533798773
    },
    {
        "content": "<p>Done! You two should have received an invitation. And I think we can include move people still</p>",
        "id": 131155535,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533799113
    },
    {
        "content": "<p>Got it. Are you going to initialize it with a <code>README.md</code>?</p>",
        "id": 131155610,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799211
    },
    {
        "content": "<p>You could initialize it with the content of <code>library_dev</code></p>",
        "id": 131155646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799317
    },
    {
        "content": "<p>One minimal requirement that I would have and would state on the <code>README.md</code> is that the code should build successfully for a given commit of mathlib and Lean version and not have any <code>sorry</code>s. I don't think it's an issue if the code changes significantly over time, but it's a pain for others if it doesn't build.</p>",
        "id": 131155765,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799504
    },
    {
        "content": "<p>I think that is too strict a requirement. Perhaps it should build but <code>sorry</code> is allowed?</p>",
        "id": 131155820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799568
    },
    {
        "content": "<p>The problem is that <code>sorry</code>s infect downstream code and clutter the error and warning messages.</p>",
        "id": 131155828,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799603
    },
    {
        "content": "<p>Mathlib already has that requirement, and I know it stops me from publishing stuff early because I think the work is not done yet</p>",
        "id": 131155836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799628
    },
    {
        "content": "<p>but for something that brands itself as a \"nursery\", it should explicitly accept unfinished work</p>",
        "id": 131155840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799647
    },
    {
        "content": "<p>Would it resolve your concern if you're allowed to use non-<code>master</code> branches for that code?</p>",
        "id": 131155845,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799659
    },
    {
        "content": "<p>You still have to accept that the library is shared and not private.</p>",
        "id": 131155887,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799689
    },
    {
        "content": "<p>Here it is: <a href=\"https://github.com/leanprover-community/mathlib-nursery\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nursery\">https://github.com/leanprover-community/mathlib-nursery</a></p>",
        "id": 131155890,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533799731
    },
    {
        "content": "<p>So I think it's appropriate to ask collaborators to minimize the burden.</p>",
        "id": 131155897,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799747
    },
    {
        "content": "<p>\"The features are available a library in the meantime.\" typo in the README</p>",
        "id": 131155904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799768
    },
    {
        "content": "<p>A <code>sorry</code> in the middle of the code doesn't hurt anyone, and it is still being checked for correctness</p>",
        "id": 131155905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799769
    },
    {
        "content": "<p>I would rather just filter out sorry warnings</p>",
        "id": 131155906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799796
    },
    {
        "content": "<p>But I don't think it is too much trouble to do <em>everything</em> in non-master branches, right?</p>",
        "id": 131155910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> It is work in progress, I'll get it right eventually ;-)</p>",
        "id": 131155952,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533799816
    },
    {
        "content": "<p>Well, the nursery is different since it's not tracking mathlib</p>",
        "id": 131155960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799844
    },
    {
        "content": "<p>If you make me a collaborator, you could delegate that (-;</p>",
        "id": 131155962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799847
    },
    {
        "content": "<p>it needs a master branch, and everyone should be not too far away from it</p>",
        "id": 131155963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799861
    },
    {
        "content": "<p>Hmmm. I don't understand nurseries.</p>",
        "id": 131155968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799864
    },
    {
        "content": "<p>(Never went to one as a toddler.)</p>",
        "id": 131155973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799872
    },
    {
        "content": "<blockquote>\n<p>A <code>sorry</code> in the middle of the code doesn't hurt anyone, and it is still being checked for correctness</p>\n</blockquote>\n<p>I disagree. It adds overhead in terms of messages.</p>\n<blockquote>\n<p>I would rather just filter out sorry warnings</p>\n</blockquote>\n<p>How?</p>",
        "id": 131155976,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799881
    },
    {
        "content": "<p>awk script?</p>",
        "id": 131155978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799902
    },
    {
        "content": "<p>Also, I'd like to see my own <code>sorry</code> messages and not those of others</p>",
        "id": 131155979,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799904
    },
    {
        "content": "<p>then don't compile or depend on others</p>",
        "id": 131155983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799915
    },
    {
        "content": "<p>we can have the travis build just ignore sorries</p>",
        "id": 131156028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799957
    },
    {
        "content": "<blockquote>\n<p>Well, the nursery is different since it's not tracking mathlib</p>\n</blockquote>\n<p>But it is, isn't it? <a href=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/leanpkg.toml#L8\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/leanpkg.toml#L8\">https://github.com/leanprover-community/mathlib-nursery/blob/master/leanpkg.toml#L8</a></p>",
        "id": 131156029,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799963
    },
    {
        "content": "<p>I'd really rather not have <code>sorry</code>s in the first place. I don't think that's too strong a requirement.</p>",
        "id": 131156039,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533799994
    },
    {
        "content": "<p>It depends on mathlib but does not track it</p>",
        "id": 131156040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533799994
    },
    {
        "content": "<p>I mean in the git sense - it's not a fork</p>",
        "id": 131156041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799994
    },
    {
        "content": "<p>Well, forks also don't track in any sense that I can think of. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 131156049,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800029
    },
    {
        "content": "<p>I can tell you for sure that there are people who work with sorries for long periods, on projects that would be appropriate for this nursery</p>",
        "id": 131156102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800075
    },
    {
        "content": "<p>and this was also how <code>library_dev</code> worked</p>",
        "id": 131156104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800089
    },
    {
        "content": "<p>Even in mathlib it feels like too strong a requirement sometimes. It's just that lean has a completely stupid reporting mechanism for sorry</p>",
        "id": 131156160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800181
    },
    {
        "content": "<p>The downstream warnings are definitely too much.</p>",
        "id": 131156172,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800229
    },
    {
        "content": "<p>they make sense in server mode but not in <code>lean --make</code></p>",
        "id": 131156224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800311
    },
    {
        "content": "<p>I recall in one instance I defined a <code>sorry'</code> axiom just to avoid the loud warnings</p>",
        "id": 131156239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800387
    },
    {
        "content": "<p>Personally, I'd rather be free of <code>sorry</code> warnings. But I understand that others may have different opinions, so, as a compromise, I propose that we make <code>master</code> free of <code>sorry</code>s and allow them in non-<code>master</code> branches.</p>",
        "id": 131156284,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800407
    },
    {
        "content": "<blockquote>\n<p>I recall in one instance I defined a <code>sorry'</code> axiom just to avoid the loud warnings</p>\n</blockquote>\n<p>That seems like a reasonable compromise, too.</p>",
        "id": 131156291,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800446
    },
    {
        "content": "<p>i find <code>sorry'</code> to be a terrifying option</p>",
        "id": 131156302,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533800480
    },
    {
        "content": "<p>Unfortunately it's a bit <em>too</em> quiet</p>",
        "id": 131156303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800492
    },
    {
        "content": "<p>It's like <code>sorry</code> with a tear. <span class=\"emoji emoji-1f622\" title=\"cry\">:cry:</span></p>",
        "id": 131156308,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800511
    },
    {
        "content": "<p>Also, I'd like to minimize the number of branches so that it can be useful as a library</p>",
        "id": 131156309,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533800512
    },
    {
        "content": "<p>what about <code>sorry'</code> being a notation for a tactic that uses an axiom and also prints \"using sorry\"</p>",
        "id": 131156350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800529
    },
    {
        "content": "<blockquote>\n<p>what about <code>sorry'</code> being a notation for a tactic that uses an axiom and also prints \"using sorry\"</p>\n</blockquote>\n<p>Interesting...</p>",
        "id": 131156352,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800546
    },
    {
        "content": "<p>Isn't that just as loud as <code>sorry</code>?</p>",
        "id": 131156368,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533800577
    },
    {
        "content": "<p>no downstream warnings this way</p>",
        "id": 131156376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800589
    },
    {
        "content": "<p>I see. That's a better option. I think I still prefer having master be sorry-free and the rest be fully sorry</p>",
        "id": 131156429,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533800678
    },
    {
        "content": "<p>or sorry allowed. Also called Canadian.</p>",
        "id": 131156430,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533800695
    },
    {
        "content": "<p>Eh?</p>",
        "id": 131156435,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800703
    },
    {
        "content": "<p>(there was no moose)</p>",
        "id": 131156443,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533800730
    },
    {
        "content": "<p>I think I would rather have different projects on different folders of the same branch, because it is much easier to browse</p>",
        "id": 131156444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800733
    },
    {
        "content": "<p>and each project will have their own style of maintenance, which may or may not include sorry stuff</p>",
        "id": 131156493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800785
    },
    {
        "content": "<p>I agree. I would just put temporary versions in branches until the sorries are substituted</p>",
        "id": 131156494,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533800787
    },
    {
        "content": "<p>So, let's see the desires here:</p>\n<ul>\n<li>Minimize <code>sorry</code>s</li>\n<li>Minimize number of branches</li>\n<li>Prefer directories over branches</li>\n</ul>",
        "id": 131156499,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800806
    },
    {
        "content": "<p>That may never happen though - I'm thinking of projects with <em>really</em> long term undefined assumptions</p>",
        "id": 131156506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800831
    },
    {
        "content": "<p>I agree with all of those, but the <code>sorry</code> is the one that can affect others the most.</p>",
        "id": 131156507,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800832
    },
    {
        "content": "<p>like Kevin's top-down formalization projects</p>",
        "id": 131156514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800858
    },
    {
        "content": "<blockquote>\n<p>I would just put temporary versions in branches until the sorries are substituted</p>\n</blockquote>\n<p>Yes, that's what I'm thinking.</p>",
        "id": 131156562,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800894
    },
    {
        "content": "<p>it is utterly unreasonable to just say \"no getting in here until you're done\"</p>",
        "id": 131156565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800898
    },
    {
        "content": "<p>But “unfinished” is not the same as “no <code>sorry</code>s.”</p>",
        "id": 131156578,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533800933
    },
    {
        "content": "<p>In a top-down formalization, it is often impossible to have one without the other</p>",
        "id": 131156587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800966
    },
    {
        "content": "<p>unless you use a hack that is equivalent to <code>sorry</code></p>",
        "id": 131156589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800980
    },
    {
        "content": "<p>and I don't want to encourage that</p>",
        "id": 131156592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533800994
    },
    {
        "content": "<p>I must say I'm on the fence</p>",
        "id": 131156648,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533801038
    },
    {
        "content": "<p>Not everything should go into mathlib-nursery.</p>",
        "id": 131156657,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801054
    },
    {
        "content": "<p>It's easy enough to create another repository for other projects.</p>",
        "id": 131156668,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801081
    },
    {
        "content": "<p>Right</p>",
        "id": 131156671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801095
    },
    {
        "content": "<p>I think mathlib-nursery should be for things that are intended for mathlib and shareable with others.</p>",
        "id": 131156677,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801104
    },
    {
        "content": "<p>What would you put in the nursery, <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> ?</p>",
        "id": 131156680,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533801114
    },
    {
        "content": "<p>Things with <code>sorry</code> are not ready to be shared with others.</p>",
        "id": 131156681,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801116
    },
    {
        "content": "<p>Kevin's <code>for_mathlib</code> stuff, for example.</p>",
        "id": 131156721,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801126
    },
    {
        "content": "<p>I think <code>xena</code> would disagree with you on that point</p>",
        "id": 131156722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801134
    },
    {
        "content": "<blockquote>\n<p>I think <code>xena</code> would disagree with you on that point</p>\n</blockquote>\n<p>I don't understand you.</p>",
        "id": 131156736,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801187
    },
    {
        "content": "<p>I think the whole <code>lean-perfectoid-spaces</code> project is conceivably within scope for the nursery</p>",
        "id": 131156744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801226
    },
    {
        "content": "<p>it is a multiple person project with aspirations to be in mathlib someday, which depends on mathlib but is not properly a part of it right now</p>",
        "id": 131156795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801259
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I think <code>xena</code> would disagree with you on that point</p>\n</blockquote>\n<p>I don't understand you.</p>\n</blockquote>\n<p>Xena is one big repo where a dozen people are all working on different projects and using each others stuff. And half of the time it doesn't even build. People really don't care about a few sorries in there.</p>",
        "id": 131156800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801287
    },
    {
        "content": "<p>exactly</p>",
        "id": 131156801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801295
    },
    {
        "content": "<p>that's what I want to see in the nursery</p>",
        "id": 131156806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801303
    },
    {
        "content": "<p>except maybe for the \"not building\" part</p>",
        "id": 131156815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801317
    },
    {
        "content": "<p>But we do want it to build at least most of the time, no?</p>",
        "id": 131156819,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533801326
    },
    {
        "content": "<p>It is a nursery: toddlers beat each other up, steal each others toys, say <code>sorry</code>, and continue playing together.</p>",
        "id": 131156822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801339
    },
    {
        "content": "<p>Says the guy who never went there, but has a house with 3 toddlers running around.</p>",
        "id": 131156826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801356
    },
    {
        "content": "<p>Right, I suggest that mathlib-toddlers at least make sure that their stuff builds. After all, we're grown-ups.</p>",
        "id": 131156880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801405
    },
    {
        "content": "<p>But even grown-ups should say <code>sorry</code> sometimes.</p>",
        "id": 131156889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801418
    },
    {
        "content": "<p>Ok, so now comes the fun part!</p>",
        "id": 131156911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801461
    },
    {
        "content": "<p>What is the punishment for pushing a commit that doesn't build?</p>",
        "id": 131156913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801471
    },
    {
        "content": "<p>Okay, other than Johan taking an analogy too far (<span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span>), my idea of a mathlib-nursery is a place where projects that are working can be nursed into shape for mathlib.</p>",
        "id": 131156914,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801480
    },
    {
        "content": "<p>You broke it, you fix it</p>",
        "id": 131156962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801531
    },
    {
        "content": "<p>So, first you start with your own repository, then you move bits and pieces into the nursery, then you PR to mathlib.</p>",
        "id": 131156963,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801532
    },
    {
        "content": "<p>But that is what the community fork is already doing...</p>",
        "id": 131156979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801556
    },
    {
        "content": "<p>Yes, that's for the PR part.</p>",
        "id": 131156983,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533801566
    },
    {
        "content": "<p>if a fix doesn't appear forthcoming, some annoyed third party may comment out your file</p>",
        "id": 131156988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533801585
    },
    {
        "content": "<p>Right. And if my witt vectors compile, but they take 15 seconds?</p>",
        "id": 131157049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801608
    },
    {
        "content": "<p>Same treatment, I guess...</p>",
        "id": 131157055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533801617
    },
    {
        "content": "<blockquote>\n<p>if a fix doesn't appear <em>forth</em>coming, some annoyed <em>third</em> party may comment out your file</p>\n</blockquote>\n<p>since it would take <em>seconds</em> to even compile the <em>first</em> line of their code</p>",
        "id": 131157085,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533801668
    },
    {
        "content": "<p>I'm off to bed. I trust you guy will find a vision you agree on for the nursery</p>",
        "id": 131157245,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533801914
    },
    {
        "content": "<p>Optimism. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> Good night!</p>",
        "id": 131157327,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533802000
    },
    {
        "content": "<p>What can I say? I'm monotonically increasing!</p>",
        "id": 131157349,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533802075
    },
    {
        "content": "<p>Good day to you, sir!</p>",
        "id": 131157386,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533802084
    },
    {
        "content": "<p>Wait! What do you mean with <code>_</code> in \"There should be no <code>sorry</code>s or  <code>_</code>.\"?<br>\nWe debated the <code>sorry</code>s (and I still think they should be allowed). But what is this <code>_</code> being forbidden? That's used all over the place in mathlib. I think you mean a specific use of <code>_</code>, but I'm not sure which...</p>",
        "id": 131161276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533807959
    },
    {
        "content": "<p>I assume the kind of <code>_</code> that causes \"could not synth placeholder\" errors</p>",
        "id": 131161370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533808058
    },
    {
        "content": "<p>I just put that in the readme as a starting point. We can continue to debate everything. Nothing is set in stone.</p>",
        "id": 131165577,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533813288
    },
    {
        "content": "<p>Yes, I meant unsolved goals. I'll change it, or someone else could rephrase it.</p>",
        "id": 131165604,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533813332
    },
    {
        "content": "<p>I've hopefully improved on the wording.</p>",
        "id": 131167166,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533815516
    },
    {
        "content": "<p>Does it make sense that if a PR from the community fork is merged that the person who merges (i.e. Mario or Johannes) also deletes the branch on the community fork?</p>",
        "id": 132357821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534594001
    },
    {
        "content": "<p>That keeps the list of branches clean, and it also helps to keep an overview of which branches you can/should work on.</p>",
        "id": 132357836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534594028
    },
    {
        "content": "<p>Or can we have incremental merges from branches on the community fork?</p>",
        "id": 132357838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534594044
    },
    {
        "content": "<p>For example, can/may I work on the <code>docs-theories</code> branched, after it is merged? Or should I start a <code>docs2</code> branch?</p>",
        "id": 132357888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534594087
    },
    {
        "content": "<p>Once a branch has been merged, you should at least rebase / remove merged commits from the branch if you want to keep working on it, but there is no harm in retaining the branch name unless it is confusing to you</p>",
        "id": 132357924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594191
    },
    {
        "content": "<p>Or you could just add a merge commit to the new master and keep working</p>",
        "id": 132357972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594243
    },
    {
        "content": "<p>Right, so if I missed the fact that the branch was merged into the official mathlib, then I mess up the repo...</p>",
        "id": 132357989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534594292
    },
    {
        "content": "<p>well, the merge commit will probably clobber all the work on the branch anyway</p>",
        "id": 132358036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594342
    },
    {
        "content": "<p>and as long as I am squash merging it doesn't really matter how messy the branch gets</p>",
        "id": 132358043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594367
    },
    {
        "content": "<p>I would be fine with deleting branches after a merge (and github gives me a big button to do exactly that), but it is conceivable that I merge before they are really done</p>",
        "id": 132358064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594427
    },
    {
        "content": "<p>For example, I have seen Chris make a PR and then a few more commits come in the next day or two - if I merge those early, then Chris will be in a weird position, even moreso if I delete his branch</p>",
        "id": 132358113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594488
    },
    {
        "content": "<p>If I don't delete the branch (or even if I do, I guess), he can recreate the branch from his local copy, add some more commits, and PR again to post the new material</p>",
        "id": 132358177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594586
    },
    {
        "content": "<p>Right. So in the end... it doesn't really matter, and I can happily push some commits?</p>",
        "id": 132358182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534594615
    },
    {
        "content": "<p>yeah, basically</p>",
        "id": 132358189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594627
    },
    {
        "content": "<p>Ok. That's good to know. I'll be offline again for a couple of days, and I still need to read up on the recent additions to the docs. But I hope to add some stuff later on.</p>",
        "id": 132358209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534594679
    },
    {
        "content": "<p>and I will be traveling this weekend and in germany next week, not sure how much free time there will be</p>",
        "id": 132358263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534594714
    }
]