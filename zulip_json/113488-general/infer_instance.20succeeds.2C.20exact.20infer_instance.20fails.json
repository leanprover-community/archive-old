[
    {
        "content": "<p>What's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.tower</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- fails quickly</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">infer_instance</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- succeeds, very slowly</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>(the instance it finds is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.is_scalar_tower\">docs#mv_polynomial.is_scalar_tower</a> via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower.right\">docs#is_scalar_tower.right</a>)</p>",
        "id": 229775478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615424412
    }
]