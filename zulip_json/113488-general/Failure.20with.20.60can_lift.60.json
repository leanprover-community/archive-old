[
    {
        "content": "<p>The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.with_one</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.lift</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">with_one.can_lift</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">with_one.ne_one_iff_exists.1</span> <span class=\"n\">ha</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb.symm</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">with_zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">inv_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">α</span> <span class=\"n\">using</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">with_zero.monoid_with_zero</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">with_zero.has_inv</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">with_zero.nontrivial</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">with_zero</span>\n</code></pre></div>",
        "id": 211372642,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601144472
    },
    {
        "content": "<p>Here is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">simplification</span> <span class=\"kd\">lemma</span> <span class=\"bp\">'</span><span class=\"n\">with_zero.can_lift'</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"n\">command</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">trace.simp_lemmas</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">more</span> <span class=\"n\">details</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 211372739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601144629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 211379235,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601149042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ?</p>",
        "id": 211379243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601149061
    },
    {
        "content": "<p>This appears to be an interaction with the <code>@[to_additive]</code> attribute</p>",
        "id": 211379581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601149512
    },
    {
        "content": "<p>the <code>lift</code> tactic tries to use simp to rewrite with the equation lemma for <code>with_zero.can_lift</code> but <code>@[to_additive]</code> doesn't create one</p>",
        "id": 211379594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601149548
    },
    {
        "content": "<p>it works fine if you write the zero version manually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">with_one.can_lift</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">with_one.ne_one_iff_exists.1</span> <span class=\"n\">ha</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb.symm</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_zero.can_lift</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero.ne_zero_iff_exists.1</span> <span class=\"n\">ha</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb.symm</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">with_one.can_lift</span>\n</code></pre></div>",
        "id": 211379639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601149600
    },
    {
        "content": "<p>Thank you</p>",
        "id": 211379771,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601149808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do we have an API to actually add these lemmas in <code>@[to_additive]</code>?</p>",
        "id": 211379946,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601150125
    },
    {
        "content": "<p>It seems that I add these lemmas but Lean doesn't know that they're special.</p>",
        "id": 211379992,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601150168
    },
    {
        "content": "<p>I think there is an API for setting the equation lemmas?</p>",
        "id": 211380110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601150381
    },
    {
        "content": "<p><code>environment.add_eqn_lemma</code></p>",
        "id": 211380116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601150398
    }
]