[
    {
        "content": "<p>This lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">h.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>is giving me the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">kernel</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">type</span> <span class=\"n\">check</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">foo'</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">usually</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">buggy</span> <span class=\"n\">tactic</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">builtin</span> <span class=\"n\">elaborator</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"bp\">↥↑</span><span class=\"o\">(</span><span class=\"n\">h.to_finset</span><span class=\"o\">)],</span> <span class=\"n\">true</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">value</span><span class=\"o\">:</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"bp\">↥↑</span><span class=\"o\">(</span><span class=\"n\">h.to_finset</span><span class=\"o\">)],</span> <span class=\"n\">trivial</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"bp\">↥↑</span><span class=\"o\">(</span><span class=\"n\">h.to_finset</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">↥↑</span><span class=\"o\">(</span><span class=\"n\">h.to_finset</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_coe_to_sort.S</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span>\n</code></pre></div>\n<p>In the absence of any tactics, this must be an elaborator bug, right?</p>",
        "id": 233099142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617556787
    },
    {
        "content": "<p>If you're looking for a fix, then coercing manually does the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">((</span><span class=\"n\">h.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 233103695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617561955
    },
    {
        "content": "<p>You don't need finsets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- fails (same error)</span>\n</code></pre></div>",
        "id": 233103791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617562044
    },
    {
        "content": "<p>It appears that the elaborator is inferring this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}⟩</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- fails (kernel error)</span>\n</code></pre></div>\n<p>That is, the universe variable on <code>decidable_eq</code> is a fresh universe <code>v</code> unrelated to the type of anything in sight. The kernel is complaining that it should be <code>u+1</code>, and if you put <code>decidable_eq.{u+1}</code> it works. Perhaps the <code>has_coe_to_sort</code> is getting resolved too late and the universe constraint is never applied?</p>",
        "id": 233137150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617598704
    },
    {
        "content": "<p>(The fact that the above definition is also accepted by the elaborator despite the type error appears to be a variant on the same issue.)</p>",
        "id": 233137307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617598855
    }
]