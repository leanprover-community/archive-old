[
    {
        "content": "<p>I'm helping <span class=\"user-mention\" data-user-id=\"263407\">@Laurent Bartholdi</span> with a Lean course. <span class=\"user-mention\" data-user-id=\"452637\">@Cedric Holle</span> is one of the students at this course and he tries to formalize some equality in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>G</mi><msub><mi>L</mi><mn>4</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q[GL_4(\\mathbb Q)]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">)]</span></span></span></span> (actually, in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>G</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q[G]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is a subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mn>4</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_4(\\mathbb Q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">)</span></span></span></span> but this shouldn't be too important). The equality is rather long and I hope that Cedric will copy+paste relevant definitions below.<br>\nOnce we unfold the definitions, we get a linear combination of <code>finsupp.single (some_matrix) 1 1</code>. In order to simplify this, we need to decide whether <code>some_matrix</code> is equal to one or no. Can some tactic do this for us?</p>",
        "id": 272444292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645211605
    },
    {
        "content": "<p>Please tell me that <code>GL_4(G)</code> is a typo for <code>G</code> :-)</p>",
        "id": 272444398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645211664
    },
    {
        "content": "<p>Thanks! Fixed.</p>",
        "id": 272444654,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645211778
    },
    {
        "content": "<p>Is <code>some_matrix</code> literally a 4x4 matrix with explicit rational coefficients? Does <code>norm_num</code> work?</p>",
        "id": 272444656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645211779
    },
    {
        "content": "<p>Yes, <code>some_matrix</code> is an explicit 4x4 matrix. It is obtained using arithmetic operations from matrices in <code>![...]</code> notation.</p>",
        "id": 272444833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645211877
    },
    {
        "content": "<p>The problem is to make <code>norm_num</code> decide whether this matrix is equal to <code>1</code> or not.</p>",
        "id": 272444934,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645211908
    },
    {
        "content": "<p>And feed the result to one of 2 lemmas about <code>finsupp.single</code>.</p>",
        "id": 272445043,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645211977
    },
    {
        "content": "<p>More generally, we may have <code>finsupp.single a b c</code>, where <code>a = c</code> is decidable.</p>",
        "id": 272445141,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645212020
    },
    {
        "content": "<p>I don't remember if <code>norm_num</code> can tell whether <code>(1 : matrix (fin 2) (fin 2) R) = ![[1, 0], [0, 1]]</code> or not.</p>",
        "id": 272445193,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645212060
    },
    {
        "content": "<p>I see, and this is why you wanted <code>dec_trivial</code>!</p>",
        "id": 272445213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645212071
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">some_matrix</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 272445237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645212079
    },
    {
        "content": "<p>The problem with that is that it only proves that things are equal to 1, not that they're not equal to 1</p>",
        "id": 272445276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645212104
    },
    {
        "content": "<p>And now you have 20-30 terms of this form.</p>",
        "id": 272445278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645212105
    },
    {
        "content": "<p>The question is how to avoid 20-30 explicitly written lemmas \"this is not equal to one\".</p>",
        "id": 272445412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645212155
    },
    {
        "content": "<p>The best I could do for similar problems can be found in this file: <a href=\"https://github.com/pechersky/e222/blob/master/src/problems02.lean#L49-L58\">https://github.com/pechersky/e222/blob/master/src/problems02.lean#L49-L58</a></p>",
        "id": 272445468,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645212190
    },
    {
        "content": "<p>If you write a proof for \"not equal\" manually, then you can just tell Lean which elements are not equal.</p>",
        "id": 272445483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645212199
    },
    {
        "content": "<p>I guess, one can write a tactic that goes over elements of <code>fin 4</code> and evaluates LHS and RHS</p>",
        "id": 272445911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645212420
    },
    {
        "content": "<p>But I'm not good at writing tactics.</p>",
        "id": 272445932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645212429
    },
    {
        "content": "<p>Is that not fin_cases?</p>",
        "id": 272446070,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645212505
    },
    {
        "content": "<blockquote>\n<p>I guess, one can write a tactic that goes over elements of fin 4 and evaluates LHS and RHS<br>\nBut I'm not good at writing tactics.</p>\n</blockquote>\n<p>A simple approach is to write a lemma <code>matrix22_ext_iff : (![![a,b], ![c,d]] = ![![e,f], ![g,h]]) ↔ a=e ∧ b = f ∧ c = g ∧ d = h</code> and then call <code>simp [matrix22_ext_iff]</code> (we might have such a lemma already, didn't check).</p>",
        "id": 272446807,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645212851
    },
    {
        "content": "<p>Am I right that in this case <code>simp</code> will simplify each equality even if one of them already says <code>false</code>?</p>",
        "id": 272447908,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645213490
    },
    {
        "content": "<p>Right.</p>",
        "id": 272448052,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645213569
    },
    {
        "content": "<p>So, a specialized tactic can be more effective but requires some meta programming skills. Let's wait for the students to come here, read the backlog, and decide what they're going to do.</p>",
        "id": 272448271,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645213691
    },
    {
        "content": "<p>Rewriting backwards by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.one_fin_three\">docs#matrix.one_fin_three</a> (but for <code>four</code>) might put you in a place where dec_trivial is easy</p>",
        "id": 272452503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645215710
    },
    {
        "content": "<p><code>dec_trivial</code> can't solve <code>(5 : rat) = 1</code></p>",
        "id": 272452675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645215793
    },
    {
        "content": "<p>And the matrices have half-integer elements.</p>",
        "id": 272452697,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645215812
    },
    {
        "content": "<p>So, we can't just deal with matrices over <code>int</code>.</p>",
        "id": 272452715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645215824
    },
    {
        "content": "<p>You could write an ext lemma which clears the denominators and reduces to <code>int</code> :-)</p>",
        "id": 272460422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645220030
    }
]