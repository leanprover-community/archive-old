[
    {
        "content": "<p>What is the magic monadic combinator that would allow me to write a parser which throws away all the parsed tokens?</p>",
        "id": 223113231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610972734
    },
    {
        "content": "<p><code>*&gt; : m a -&gt; m b -&gt; m b</code>?</p>",
        "id": 223113591,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610972970
    },
    {
        "content": "<p>What do you mean \"throw away\"? <code>tk</code> has type <code>parser unit</code>, it will consume a token and you don't have to do anything with it</p>",
        "id": 223113611,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1610972982
    },
    {
        "content": "<p>I still want to return something, but it doesn't depend on the token.</p>",
        "id": 223114101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610973342
    },
    {
        "content": "<p>The return type is an inductive with several constructors, and I want to choose one constructor depending on which token I see. But the constructor takes no argument.</p>",
        "id": 223114202,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610973383
    },
    {
        "content": "<p><code>*&gt;</code> would work, or <code>&lt;$</code>: <code>(mkX &lt;$ token \"x\") &lt;|&gt; (mkY &lt;$ token \"y\")</code>.</p>",
        "id": 223114381,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610973497
    },
    {
        "content": "<p>I think <code>&lt;$</code> is what I was missing.</p>",
        "id": 223114442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610973544
    },
    {
        "content": "<p>I'm curious to know how you would do it with <code>*&gt;</code>.</p>",
        "id": 223114456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610973557
    },
    {
        "content": "<p>you can use <code>*&gt;</code> or <code>&lt;*</code> depending on whether the thing you want to throw away is the left or right parser</p>",
        "id": 223114485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610973583
    },
    {
        "content": "<p><code>a &lt;$ mb</code> is the same as <code>pure a &lt;* mb</code>.</p>",
        "id": 223114509,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610973602
    },
    {
        "content": "<p>for example <code>tk \"(\" *&gt; texpr &lt;* tk \")\"</code> or thereabouts</p>",
        "id": 223114569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610973613
    },
    {
        "content": "<p>Is there any way to end a tactic invocation with a token?</p>",
        "id": 223114620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610973661
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 223114653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610973684
    },
    {
        "content": "<p>are you writing a tactic or a parser?</p>",
        "id": 223114660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610973694
    },
    {
        "content": "<p>both</p>",
        "id": 223114678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610973702
    },
    {
        "content": "<p>Say I want to rewrite <code>intro</code> so that the syntax is now <code>intro h bang,</code> where <code>bang</code> is a token.</p>",
        "id": 223114739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610973726
    },
    {
        "content": "<p><code>def intro (h : parse texpr) (_ : parse (tk \"bang\")) : tactic unit</code></p>",
        "id": 223114797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610973767
    },
    {
        "content": "<p>or <code>def intro (h : parse (texpr &lt;* tk \"bang\")) : tactic unit</code></p>",
        "id": 223114829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610973791
    },
    {
        "content": "<p>However, keep in mind that this doesn't always work depending on the nature of the first parser, here <code>texpr</code>, because the parser monad does no backtracking</p>",
        "id": 223114923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610973844
    },
    {
        "content": "<p>I'm sorry, I was interrupted. Thanks for you answer, I'll now try to process it.</p>",
        "id": 223125877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610980016
    },
    {
        "content": "<p>I already noticed that no backtracking issue, it's quite annoying.</p>",
        "id": 223125903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610980033
    },
    {
        "content": "<p>We can define a <code>try</code> parser, I'm surprised it wasn't defined in the core.</p>",
        "id": 223134433,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610983982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">parser</span> <span class=\"n\">parse_result</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">try</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cb</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fail</span> <span class=\"n\">_</span> <span class=\"n\">err</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"n\">n</span> <span class=\"n\">err</span>\n<span class=\"bp\">|</span> <span class=\"n\">ok</span> <span class=\"o\">:=</span> <span class=\"n\">ok</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">try_of_done_iff</span> <span class=\"o\">{</span><span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.try</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">n'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">n'</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">cb</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">try</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">try_of_fail_iff</span> <span class=\"o\">{</span><span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"n\">err</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.try</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fail</span> <span class=\"n\">n'</span> <span class=\"n\">err</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">np</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fail</span> <span class=\"n\">np</span> <span class=\"n\">err</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">cb</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">try</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">valid.try</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.valid</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.try.valid</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cb</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">cb</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">try</span><span class=\"o\">,</span> <span class=\"n\">parse_result.pos</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">try</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_try_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">p.try</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mem_def</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">try</span>\n</code></pre></div>",
        "id": 223135010,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610984261
    },
    {
        "content": "<p>And here's a way to use it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">ch</span> <span class=\"sc\">'a'</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"sc\">'b'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">ch</span> <span class=\"sc\">'a'</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"sc\">'c'</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">run_string</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"s2\">\"a1c\"</span> <span class=\"c1\">-- fails: sum.inl \"a1c\\n  ^\\n\\nexpected: b\\n\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">run_string</span> <span class=\"o\">(</span><span class=\"n\">mfirst</span> <span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">])</span> <span class=\"s2\">\"a1c\"</span> <span class=\"c1\">-- fails: equal to above</span>\n<span class=\"k\">#eval</span> <span class=\"n\">run_string</span> <span class=\"o\">(</span><span class=\"n\">mfirst</span> <span class=\"n\">try</span> <span class=\"o\">[</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">])</span> <span class=\"s2\">\"a1c\"</span> <span class=\"c1\">-- succeeds: sum.inr 1</span>\n</code></pre></div>",
        "id": 223135451,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610984475
    },
    {
        "content": "<p>It fails in the first case because there is no backtracking after consuming that first <code>a</code>, so when the <code>c</code> is reached and <code>p1</code> fails because it expects <code>b</code>, the <code>orelse</code> falls back to <code>p2</code>. However, <code>orelse</code> is defined for parsers to pass the position at the failure point, so <code>p2</code> sees a <code>b</code> and expects an <code>a</code>, and fails too.  Then, the whole <code>orelse</code> fails, and gives the failure message of the earlier (in terms of position) parser. That's why we only see the <code>p1</code>'s error.</p>\n<p>But if we wrap each one in <code>try</code>, then when <code>p1</code> fails, we start parsing with <code>p2</code> at the beginning of the buffer.</p>",
        "id": 223136589,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610985066
    },
    {
        "content": "<p>Oh thanks, this will probably help me clean up a lot of code. Up to now I was able to parse everything I wanted but I sort of simulate backtracking with unpleasant boilerplate.</p>",
        "id": 223140938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610987270
    }
]