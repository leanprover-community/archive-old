[
    {
        "content": "<p>Is there anything we can do to get something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n<span class=\"bp\">...</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">h&#39;</span>\n<span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">h&#39;&#39;</span><span class=\"o\">)</span> <span class=\"n\">hp</span>\n</pre></div>\n\n\n<p>to work?</p>",
        "id": 152244122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545298254
    },
    {
        "content": "<p>I'm trying to please Johannes who doesn't like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>which I admit is less transparent...</p>",
        "id": 152244233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545298413
    },
    {
        "content": "<p>If only <code>Prop</code> were a category... then you could write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"err\">≫</span> <span class=\"n\">h&#39;</span> <span class=\"err\">≫</span> <span class=\"n\">h&#39;&#39;</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n</pre></div>",
        "id": 152244390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545298615
    },
    {
        "content": "<p>Maybe I should say that the actual proof would rather look like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n<span class=\"bp\">...</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">h&#39;</span>\n<span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h&#39;&#39;</span><span class=\"o\">)</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 152244479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545298727
    },
    {
        "content": "<p>unfortunately no. Here's the best we can do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">abbreviation</span> <span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span>\n<span class=\"kn\">infixr</span> <span class=\"bp\">`→→`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">imp</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">imp_of_iff_of_imp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"err\">∘</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">iff_of_imp_of_imp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∘</span> <span class=\"n\">h₁</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n<span class=\"bp\">...</span> <span class=\"bp\">→→</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">h&#39;</span>\n<span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">h&#39;&#39;</span><span class=\"o\">)</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 152245121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545299562
    },
    {
        "content": "<p>If you replace <code>→→</code> with <code>→</code> the trans lemmas are rejected</p>",
        "id": 152245150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545299611
    },
    {
        "content": "<p>because <code>→</code> is a bit magic for a binary operator</p>",
        "id": 152245167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545299640
    },
    {
        "content": "<p>This magic obstruction is what I suspected when I tried to define those trans lemmas</p>",
        "id": 152245218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545299670
    },
    {
        "content": "<p>Here is the best I could do in order to rewrite my continuity proof so that it looks like what I see on paper:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">uniform_continuous</span><span class=\"bp\">.</span><span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"n\">continuous_iff_tendsto</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">map</span> <span class=\"n\">ff</span> <span class=\"n\">uniformity</span> <span class=\"bp\">≤</span> <span class=\"n\">uniformity</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">uniformity</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">ff</span> <span class=\"n\">uniformity</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">ff</span> <span class=\"n\">uniformity</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">comap_mono</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">uniformity</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">comap_comap_comp</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nhds_eq_comap_uniformity</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">uniformity</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">key</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">uniformity</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"err\">←</span><span class=\"n\">comap_comap_comp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"err\">←</span><span class=\"n\">nhds_eq_comap_uniformity</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">tendsto_iff_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">this</span>\n</pre></div>",
        "id": 152245238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545299705
    },
    {
        "content": "<p>How do you like that style?</p>",
        "id": 152245338,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545299807
    },
    {
        "content": "<p>too long</p>",
        "id": 152245645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545300157
    },
    {
        "content": "<p>Variation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">uniform_continuous</span><span class=\"bp\">.</span><span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"n\">continuous_iff_tendsto</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">map</span> <span class=\"n\">ff</span> <span class=\"n\">uniformity</span> <span class=\"bp\">≤</span> <span class=\"n\">uniformity</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">uniformity</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">ff</span> <span class=\"n\">uniformity</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">ff</span> <span class=\"n\">uniformity</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">comap_mono</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n<span class=\"n\">nhds</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">uniformity</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">comap_comap_comp</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nhds_eq_comap_uniformity</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">uniformity</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">]</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">uniformity</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">comap_comap_comp</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nhds_eq_comap_uniformity</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>  <span class=\"k\">in</span>\n<span class=\"n\">tendsto_iff_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">this</span>\n</pre></div>",
        "id": 152245876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545300424
    },
    {
        "content": "<p>It's really a pain that <code>le_refl</code> isn't inserted automatically</p>",
        "id": 152245892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545300458
    },
    {
        "content": "<p>what's wrong with the current proof?</p>",
        "id": 152245999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545300588
    },
    {
        "content": "<p>I have added <code>le_refl</code> to the simp set in my mathlib. I will probably PR it one day, together with a lot of other stuff (but cut into atomic pieces, if this is the way we should do PRs), once (or if?) my two topology PRs are merged.</p>",
        "id": 152246297,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1545300955
    },
    {
        "content": "<p>Kenny, the current proof is inelegant. Remember that only Lean thinks proofs are irrelevant</p>",
        "id": 152246363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545301002
    },
    {
        "content": "<p>eh, I also think they're irrelevant</p>",
        "id": 152246384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545301035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You've created little monsters <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span>. Clearly they need to be brought up in the ways of the old masters, who value the esthetics of a good proof, and whose proofs illuminate and inspire understanding.</p>",
        "id": 152246517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545301203
    },
    {
        "content": "<p>Kids these days</p>",
        "id": 152247283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545302192
    },
    {
        "content": "<p>... uphill both ways.</p>",
        "id": 152247312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545302224
    },
    {
        "content": "<blockquote>\n<p>I will probably PR it one day, ... once (or if?) my two topology PRs are merged.</p>\n</blockquote>\n<p>O.o... that doesn't sound good.</p>",
        "id": 152248786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545303625
    },
    {
        "content": "<p>looks like he will PR it after Lean 4 has been released</p>",
        "id": 152248926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545303774
    },
    {
        "content": "<p>It's just that all my constructions build on these two PRs, so there is no way I can PR anything before those two are merged. But this does not prevent me of working steadily on my own branch, I have almost proved now that the Gromov-Hausdorff distance is a distance, which involves a lot of material (several thousands of line, I would say :)</p>",
        "id": 152249007,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1545303876
    },
    {
        "content": "<p>yeah okay. I've been putting it off because it's a big PR and I had to check it out and fiddle with stuff, but I will work on that now</p>",
        "id": 152249801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545304774
    }
]