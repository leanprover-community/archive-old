[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a&#39;</span> <span class=\"n\">b&#39;</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">a₂</span><span class=\"bp\">*</span><span class=\"n\">b₂</span> <span class=\"bp\">-</span> <span class=\"n\">a₁</span><span class=\"bp\">*</span><span class=\"n\">b₁</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">-</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b&#39;</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">-</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"bp\">-</span> <span class=\"n\">b₁</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">a&#39;</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"bp\">-</span> <span class=\"n\">b₁</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 130644147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533044710
    },
    {
        "content": "<p><code>comm_ring</code>?</p>",
        "id": 130644291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533044848
    },
    {
        "content": "<p>oh yes</p>",
        "id": 130644301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533044859
    },
    {
        "content": "<p>Good observation</p>",
        "id": 130644306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533044864
    },
    {
        "content": "<p>\"In the following file, all rings are assumed commutative\"</p>",
        "id": 130644361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533044896
    },
    {
        "content": "<p>I blame Kevin who is always writing all rings are commutative</p>",
        "id": 130644369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533044904
    },
    {
        "content": "<p>It's true by definition! It's a bug in Lean -- they missed commutativity out</p>",
        "id": 130646253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533046798
    }
]