[
    {
        "content": "<p>As a learning experiment, I am trying to define a finally tagless DSL  for XML and custom notations to clean up the authoring of XML docs within Lean.</p>\n<p>However, I am getting an error I may need help digesting it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Xml</span> <span class=\"bp\">?</span><span class=\"n\">m.631</span>\n</code></pre></div>\n<p>Shouldnt I be able to start creating Xml \"sentences\" (see sampleXml below) in this DSL even before providing a concrete implementation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">XmlCat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ROOT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">CHILD</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ATTR</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">XmlCat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Xml</span> <span class=\"o\">(</span><span class=\"n\">repr</span><span class=\"o\">:</span> <span class=\"n\">XmlCat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">text</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">repr</span> <span class=\"n\">CHILD</span>\n  <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">repr</span> <span class=\"n\">ATTR</span>\n  <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">ATTR</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">CHILD</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">repr</span> <span class=\"n\">CHILD</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sampleXml</span> <span class=\"o\">:=</span> <span class=\"n\">Xml.text</span> <span class=\"s2\">\"aaa\"</span>\n</code></pre></div>",
        "id": 267915711,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1642100906
    },
    {
        "content": "<p>This is Lean 4, right?</p>",
        "id": 267916120,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642101116
    },
    {
        "content": "<p>Certainly looks like it based on the naming scheme and <code>Array</code></p>",
        "id": 267917028,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642101488
    },
    {
        "content": "<p>the issue this doesnt work is that the text constructor expects the elaborator to be capable of inferring what <code>CHILD</code> should be, but it is not in this case since it does not have enough information, if you made this possible for it it would be perfectly capable of constructing this value.</p>",
        "id": 267917108,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642101538
    },
    {
        "content": "<p>Yes, Lean4.</p>",
        "id": 267917853,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1642101893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Help.20compiling.20simple.20finally.20tagless.20.20DSL/near/267917108\">said</a>:</p>\n<blockquote>\n<p>the text constructor expects the elaborator to be capable of inferring what <code>CHILD</code> should be</p>\n</blockquote>\n<p>But isnt CHILD a concrete XmlCat constructor?</p>",
        "id": 267918094,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1642102023
    },
    {
        "content": "<p>The other part to this would be to provide a concrete implementation: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">XmlCat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">unR</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.unR</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Xml</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">text</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">unR</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n  <span class=\"n\">attr</span> <span class=\"n\">n</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">unR</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}={v}\"</span> <span class=\"o\">}</span>\n  <span class=\"n\">element</span> <span class=\"n\">n</span> <span class=\"n\">attrs</span> <span class=\"n\">children</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">unR</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;{n}\"</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">CHILD</span> <span class=\"o\">:=</span> <span class=\"n\">text</span> <span class=\"s2\">\"aaa\"</span>\n</code></pre></div>\n<p>And this works.</p>\n<p>Is this mainly a matter or not having type inference like Haskell does?</p>",
        "id": 267918365,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1642102149
    },
    {
        "content": "<p>Yes, looks like it</p>",
        "id": 267918509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642102212
    },
    {
        "content": "<p>In particular, Lean can't infer class constraints (afaik still true in Lean 4)</p>",
        "id": 267918571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642102240
    },
    {
        "content": "<p>Ok, that makes sense. And that also means I am able to define a function that is polymorphic on <code>repr</code>, explicitly: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">Xml</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">CHILD</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">text</span> <span class=\"s2\">\"aaa\"</span>\n</code></pre></div>\n<p>And this also works!</p>\n<p>The puzzling thing at first was getting an error when trying <code>repr</code> instead of <code>r</code> (in fact any any identifier greater than one char seems to cause problems):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">Xml</span> <span class=\"n\">repr</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">CHILD</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">text</span> <span class=\"s2\">\"aaa\"</span> <span class=\"c1\">-- error: \"application type mismatch  Xml repr argument  repr has type  m.628 → Format : Type ?u.627 but is expected to have type  XmlCat → Type : Type 1Lean 4\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">Xml</span> <span class=\"n\">aa</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"n\">CHILD</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">text</span> <span class=\"s2\">\"aaa\"</span> <span class=\"c1\">-- error: \"unknown identifier\"</span>\n</code></pre></div>\n<p>What else is happening here?</p>",
        "id": 267954196,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1642121751
    },
    {
        "content": "<p>I think single letter identifiers implicitly get turned into (implicit) arguments but longer identifiers don't--may have the details wrong about this.</p>",
        "id": 267955569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642122779
    },
    {
        "content": "<p>(btw, maybe I should be posting in lean4?)</p>",
        "id": 267956092,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1642123279
    }
]