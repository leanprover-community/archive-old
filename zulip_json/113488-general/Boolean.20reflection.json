[
    {
        "content": "<p>I am trying to implement boolean reflection, but I am (again) failing to define the correct tactic. I show below three examples. The first two verify that boolean reflection works, but when I wrap it as a tactic, it stops working. Obviously, I am doing something wrong with tactics, but what?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.sym2</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- We define a tactic that will do precisely the same as above</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.bool_reflect</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">r</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">-- And now this does not work</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">bool_reflect</span>\n</code></pre></div>",
        "id": 261788111,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1637158048
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.sym.sym2</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- We define a tactic that will do precisely the same as above</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.bool_reflect</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">r</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">-- And now this does not work</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">bool_reflect</span>\n</code></pre></div>\n<p>this version of the MWE works in the web editor (I guess a file moved in mathlib)</p>",
        "id": 261790107,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637158915
    },
    {
        "content": "<p>You're saying that my non-example works for you?</p>",
        "id": 261790359,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1637159007
    },
    {
        "content": "<p>Looks like the issue is that <code>i_to_expr_strict</code> doesn't (can't) use the expected type to fill in the metavariables in the term.</p>",
        "id": 261790616,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637159096
    },
    {
        "content": "<p>no sorry, just saying that your MWE doesn't work with matlib master (it changes fast) and providing a version that does for anyone who wants to try it</p>",
        "id": 261790700,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637159128
    },
    {
        "content": "<p>Note that commenting out <code>exact r</code> gives the same error.</p>",
        "id": 261790743,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637159144
    },
    {
        "content": "<p>We can also explicitly stick in the goal, which still won't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- We define a tactic that will do precisely the same as above</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.bool_reflect</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">get_goal</span><span class=\"o\">,</span>\n     <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">to_bool_iff</span> <span class=\"bp\">%%</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">r</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">-- And now this does not work</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">bool_reflect</span>\n</code></pre></div>",
        "id": 261790945,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1637159214
    },
    {
        "content": "<p>But hinting the target type works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- We define a tactic that will do precisely the same as above</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.bool_reflect</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr_for_apply</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">tgt</span><span class=\"o\">),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">r</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 261791002,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637159233
    },
    {
        "content": "<p>Commenting out <code>exact r</code> does not work because the failure occurs alread at  <code>i_to_expr</code>.</p>",
        "id": 261791020,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1637159241
    },
    {
        "content": "<p>I confused <code>get_goal</code> and <code>target</code>!</p>",
        "id": 261791183,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1637159302
    },
    {
        "content": "<p>See also the source code of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.exact/src\">src#tactic.interactive.exact</a> where I got the <code>(_ : %%tgt)</code> trick from.</p>",
        "id": 261791567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637159459
    },
    {
        "content": "<p>I knew about the trick, what really helped was to see that <code>target</code> was the right thing (and I was using <code>get_goal</code>). Thanks!</p>",
        "id": 261791676,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1637159505
    },
    {
        "content": "<p>No problem!</p>",
        "id": 261791769,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637159530
    },
    {
        "content": "<p>Also, I'm probably stating the obvious, but <span class=\"user-mention\" data-user-id=\"345260\">@Andrej Bauer</span> I assume you know that we usually use <code>dec_trivial</code> to do the equivalent of boolean reflection in lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 261812427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637167703
    },
    {
        "content": "<p>the implementation of <code>dec_trivial</code> might be interesting to you because it's a notation (for <code>of_as_true (by trivial)</code>), not a tactic</p>",
        "id": 261812656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637167801
    }
]