[
    {
        "content": "<p>I wrote this function</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">let</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">han</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">han</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>But then it occured to me, that this will be slower than necessary because it will be checking whether a bunch of natural numbers are <code>&lt; n</code> unnecessarily. What's the fastest way to write this?</p>",
        "id": 169207239,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561710608
    },
    {
        "content": "<p>You sound like my son. He was complaining yesterday that <code>(a/hcf(a,b),b/hcf(a,b))</code> was slow in his home-made C++ rationals class because one had to evaluate the hcf twice (this was part of some C++ constructor syntax where you didn't have to space to evaluate the function and store the result, apparently). I'm like \"why does anyone even care? Just reason about the objects, don't actually <em>compute</em> them!\". But each to their own, I suppose.</p>",
        "id": 169209523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713009
    },
    {
        "content": "<p>Chris, you're basically asking how to write a for loop in functional programming I guess.</p>",
        "id": 169209562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713083
    },
    {
        "content": "<p>Coincidentally I just wrote another <code>fin</code> function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">xfin</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xfin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xfin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">xfin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169209638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713179
    },
    {
        "content": "<blockquote>\n<p>Coincidentally I just wrote another <code>fin</code> function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">xfin</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xfin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xfin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">xfin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>Isn't that <code>fin2</code>?</p>",
        "id": 169209746,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561713267
    },
    {
        "content": "<p>Oh maybe. I never think about these things; as far as I'm concerned we have a term of type <code>equiv (fin n) (xfin n)</code> so they're the same. I've never heard of <code>fin2</code> I don't think.</p>",
        "id": 169209773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713314
    },
    {
        "content": "<p>Obviously <code>number_theory/dioph.lean</code> is the natural place to put that fundamental construction ;-)</p>",
        "id": 169209894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713430
    },
    {
        "content": "<p>I got the definition from Leroy's lecture.</p>",
        "id": 169209915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561713465
    },
    {
        "content": "<p>We should incorporate <code>fin2</code> and <code>vector2</code> in a better way. They are indeed rewritten every once in a while</p>",
        "id": 169210937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561714490
    },
    {
        "content": "<p>Re: <code>fin.find</code>, I don't think there is a way to write it in terms of <code>nat.find</code> without the bounds check. You will probably have to write your own version, but actually it's a lot easier when you have an upper bound on the witness already</p>",
        "id": 169211245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561714812
    },
    {
        "content": "<blockquote>\n<p>We should incorporate <code>fin2</code> and <code>vector2</code> in a better way. They are indeed rewritten every once in a while</p>\n</blockquote>\n<p><code>vector2</code> does not exist in mathlib. The file <code>data.vector2</code> just adds some stuff about ordinary vectors (presumably the name is to avoid a nameclash with <code>data.vector</code> in core).</p>",
        "id": 169386118,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561979521
    },
    {
        "content": "<p>right, hence the need for better integration</p>",
        "id": 169390796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561984228
    },
    {
        "content": "<p>I have held to the position that the definition doesn't matter as long as we have an appropriate interface, but the equation compiler cares so it's tricky to completely make defeq stuff go away</p>",
        "id": 169390921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561984332
    }
]