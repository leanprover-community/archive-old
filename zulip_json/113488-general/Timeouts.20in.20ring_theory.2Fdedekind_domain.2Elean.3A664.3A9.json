[
    {
        "content": "<p>It seems this is right on the cusp of a timeout. Both <a href=\"https://github.com/leanprover-community/mathlib/issues/9226\">#9226</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/9220\">#9220</a> are failing due to this.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/b7593841620449def9435f0b9f3a1002afecff53/src/ring_theory/dedekind_domain.lean#L664-L680\">https://github.com/leanprover-community/mathlib/blob/b7593841620449def9435f0b9f3a1002afecff53/src/ring_theory/dedekind_domain.lean#L664-L680</a></p>\n<p>Any ideas, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>?</p>",
        "id": 253576572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631797021
    },
    {
        "content": "<p>Changing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">mt</span> <span class=\"n\">ideal.is_unit_iff.mpr</span> <span class=\"n\">hirr.not_unit</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">mt</span> <span class=\"n\">ideal.is_unit_iff.mpr</span> <span class=\"n\">hirr.not_unit</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n</code></pre></div>\n<p>on line 669 seems to shave over 1 second off elaboration time on my machine, so that's some kind of sticking plaster</p>",
        "id": 253578223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631797679
    },
    {
        "content": "<p>That was going to be my first guess :)</p>",
        "id": 253578432,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631797764
    },
    {
        "content": "<p>I didn't know <code>use</code> could go into binders like that. The goal is a structure with one field, and <code>use</code> gives a term of the field's type.</p>",
        "id": 253578796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631797932
    },
    {
        "content": "<p>The actual issue seems to be the <code>simp only</code>, to my mild surprise</p>",
        "id": 253578891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631797985
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ideal.unique_factorization_monoid</span> <span class=\"o\">:</span>\n  <span class=\"n\">unique_factorization_monoid</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">irreducible_iff_prime</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hirr</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hirr.ne_zero</span><span class=\"o\">,</span> <span class=\"n\">hirr.not_unit</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P.is_maximal</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">mt</span> <span class=\"n\">ideal.is_unit_iff.mpr</span> <span class=\"n\">hirr.not_unit</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span><span class=\"o\">,</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">J_ne</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">hunit</span><span class=\"o\">,</span> <span class=\"n\">P_eq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.dvd_not_unit_iff_lt.mpr</span> <span class=\"n\">hJ</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ideal.is_unit_iff.mp</span> <span class=\"o\">((</span><span class=\"n\">hirr.is_unit_or_is_unit</span> <span class=\"n\">P_eq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"n\">hunit</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ideal.dvd_iff_le</span><span class=\"o\">,</span> <span class=\"n\">ideal.dvd_iff_le</span><span class=\"o\">,</span> <span class=\"n\">ideal.dvd_iff_le</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_le.le</span><span class=\"o\">,</span> <span class=\"n\">preorder.le</span><span class=\"o\">,</span> <span class=\"n\">partial_order.le</span><span class=\"o\">],</span>\n      <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_mem</span><span class=\"o\">,</span> <span class=\"n\">x_not_mem</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y_mem</span><span class=\"o\">,</span> <span class=\"n\">y_not_mem</span><span class=\"o\">⟩⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ideal.mul_mem_mul</span> <span class=\"n\">x_mem</span> <span class=\"n\">y_mem</span><span class=\"o\">,</span>\n             <span class=\"n\">mt</span> <span class=\"n\">this.is_prime.mem_or_mem</span> <span class=\"o\">(</span><span class=\"n\">not_or</span> <span class=\"n\">x_not_mem</span> <span class=\"n\">y_not_mem</span><span class=\"o\">)⟩,</span>\n    <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">prime.irreducible</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">ideal.wf_dvd_monoid</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>is much faster on my computer.</p>",
        "id": 253579106,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631798076
    },
    {
        "content": "<p>I can reproduce here</p>",
        "id": 253579235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631798133
    },
    {
        "content": "<p>Btw, the <code>simp only</code> line is a clear sign of a missing API.</p>",
        "id": 253579305,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631798160
    },
    {
        "content": "<p>I think it's just lost api, its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like.le_def\">docs#set_like.le_def</a></p>",
        "id": 253579389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631798177
    },
    {
        "content": "<p>Ah, great, thanks! Then it could even be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ideal.unique_factorization_monoid</span> <span class=\"o\">:</span>\n  <span class=\"n\">unique_factorization_monoid</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">irreducible_iff_prime</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hirr</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hirr.ne_zero</span><span class=\"o\">,</span> <span class=\"n\">hirr.not_unit</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P.is_maximal</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">mt</span> <span class=\"n\">ideal.is_unit_iff.mpr</span> <span class=\"n\">hirr.not_unit</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span><span class=\"o\">,</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">J_ne</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">hunit</span><span class=\"o\">,</span> <span class=\"n\">P_eq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.dvd_not_unit_iff_lt.mpr</span> <span class=\"n\">hJ</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ideal.is_unit_iff.mp</span> <span class=\"o\">((</span><span class=\"n\">hirr.is_unit_or_is_unit</span> <span class=\"n\">P_eq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"n\">hunit</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ideal.dvd_iff_le</span><span class=\"o\">,</span> <span class=\"n\">ideal.dvd_iff_le</span><span class=\"o\">,</span> <span class=\"n\">ideal.dvd_iff_le</span><span class=\"o\">,</span>\n          <span class=\"n\">set_like.le_def</span><span class=\"o\">,</span> <span class=\"n\">set_like.le_def</span><span class=\"o\">,</span> <span class=\"n\">set_like.le_def</span><span class=\"o\">],</span>\n      <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_mem</span><span class=\"o\">,</span> <span class=\"n\">x_not_mem</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y_mem</span><span class=\"o\">,</span> <span class=\"n\">y_not_mem</span><span class=\"o\">⟩⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ideal.mul_mem_mul</span> <span class=\"n\">x_mem</span> <span class=\"n\">y_mem</span><span class=\"o\">,</span>\n             <span class=\"n\">mt</span> <span class=\"n\">this.is_prime.mem_or_mem</span> <span class=\"o\">(</span><span class=\"n\">not_or</span> <span class=\"n\">x_not_mem</span> <span class=\"n\">y_not_mem</span><span class=\"o\">)⟩,</span>\n    <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">prime.irreducible</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">ideal.wf_dvd_monoid</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 253579691,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631798290
    },
    {
        "content": "<p>We're now down from 7 seconds to 3 on my machine so probably this will solve the issues.</p>",
        "id": 253579898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631798373
    },
    {
        "content": "<p>Another interesting find: changing the first line of <code>is_dedekind_domain_inv_iff</code> from <code>set h : fraction_ring A ≃ₐ[A] K := fraction_ring.alg_equiv A K,</code> to<code>set h := fraction_ring.alg_equiv A K,</code>, saves about a second on my machine.</p>",
        "id": 253580437,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631798599
    },
    {
        "content": "<p>I assume it doesn't change the speed of the lemma I started with, and just speeds up its own lemma?</p>",
        "id": 253580626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631798669
    },
    {
        "content": "<p>Yes, sorry for the confusion.</p>",
        "id": 253580760,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631798717
    },
    {
        "content": "<p>Do you plan to PR both speedups <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>?</p>",
        "id": 253582522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631799406
    },
    {
        "content": "<p>Sure, I'm seeing if I can speed up <code>_inv_iff</code> some more</p>",
        "id": 253582590,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631799438
    },
    {
        "content": "<p>Looks like the main source of slowness is unifying the <code>comm_ring</code> instance deriving from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fraction_ring.field\">docs#fraction_ring.field</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization.comm_ring\">docs#localization.comm_ring</a></p>",
        "id": 253584564,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631800200
    },
    {
        "content": "<p>Ok, I went through <code>dedekind_domain.lean</code> and now we have 3 declarations (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_dedekind_domain_inv_iff\">docs#is_dedekind_domain_inv_iff</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_inv_cancel_of_le_one\">docs#mul_inv_cancel_of_le_one</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.unique_factorization_monoid\">docs#ideal.unique_factorization_monoid</a>) that went from &gt;10 seconds on my machine to about 3 seconds now. Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> for the speedup! All the other declarations in the file are less than 2 seconds.</p>",
        "id": 253595206,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631804160
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9232\">#9232</a></p>",
        "id": 253595796,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631804382
    },
    {
        "content": "<p>Looks like CI is unhappy; I'm wary of the <code>irreducible</code> attributes, those frequently cause more harm than good on instances</p>",
        "id": 253604358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631807711
    },
    {
        "content": "<p>And it timed out me a build again! I'm really looking forward to that speedup <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 253709905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631868402
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9227\">#9227</a> failed bors because of this timeout</p>",
        "id": 253710904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631868977
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib/issues/9243\">#9243</a> to stop the bleeding, since <a href=\"https://github.com/leanprover-community/mathlib/issues/9232\">#9232</a> has fallen afoul of its own ambition</p>",
        "id": 253711223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631869193
    },
    {
        "content": "<p>I've just borsed it (this one is too important to wait for CI :-)</p>",
        "id": 253711623,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631869360
    },
    {
        "content": "<p>No doubt we will need the rest of <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s speedups sooner rather than later, but this will buy us some time</p>",
        "id": 253711828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631869445
    },
    {
        "content": "<p>Yeah, turns out that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization\">docs#localization</a> mixes a lot of its instances between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con.comm_monoid\">docs#con.comm_monoid</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization.comm_monoid\">docs#localization.comm_monoid</a>, so it will take a bit to untangle <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 253711979,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631869544
    },
    {
        "content": "<p>Okay, I think I put all the <code>quot</code> behind the <code>irreducible</code> barrier on <code>localization</code>, let's see if anything else tries to escape...</p>",
        "id": 253725369,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631876935
    }
]