[
    {
        "content": "<p>I just came across this situation where combining two rewrites into one results in it failing to apply a rule.</p>\n<p>Is this a bug or am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_even</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--rw [nat.mul_div_cancel', nat.dvd_iff_mod_eq_zero, n_even],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">n_even</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278435697,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649545444
    },
    {
        "content": "<p>The issue is that the first <code>rw</code> creates a subgoal, which can't then be rewritten. This doesn't look like it is the case, however, as it's then instantly solved by <code>refl</code> as <code>rw</code> tries <code>refl</code> afterwards, and only leaves you the goal that you were missing from <code>mul_div_cancel'</code>.</p>",
        "id": 278435791,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649545614
    },
    {
        "content": "<p>Ah, that explains it, thank you!</p>",
        "id": 278436247,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649546297
    }
]