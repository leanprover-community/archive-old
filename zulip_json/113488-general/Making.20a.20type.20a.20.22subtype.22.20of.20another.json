[
    {
        "content": "<p>I have created a type of continuous functions with compact support. In mathlib there is a type of bounded continuous functions, and it is shown that they are a normed group, ring, etc. <br>\nI would like to show that compact support functions are a substructure of these algebraic structures. What is the right way to do this?<br>\nI think the relevant term here is \"coercion\" but I'm not really sure how to use that properly.</p>",
        "id": 206305401,
        "sender_full_name": "Noam Atar",
        "timestamp": 1596832055
    },
    {
        "content": "<p>You define the type of compact support functions, and then define a function from compact support function to BCF, and register it as a coercion. You will want to prove it preserves a bunch of properties, for example it is a metric embedding, respects addition and so on</p>",
        "id": 206305979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596832425
    },
    {
        "content": "<p>It might be clearer to start with to not have it be a coercion and just make it a plain function like <code>to_BCF : compact_support A B -&gt; BCF A B</code></p>",
        "id": 206306095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596832485
    },
    {
        "content": "<p>Or maybe define it as a submodule, to inherit automatically the norm.</p>",
        "id": 206306148,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596832520
    },
    {
        "content": "<p>How do I then register it as a coercion?</p>",
        "id": 206306211,
        "sender_full_name": "Noam Atar",
        "timestamp": 1596832559
    },
    {
        "content": "<p>Or as a submodule?</p>",
        "id": 206306280,
        "sender_full_name": "Noam Atar",
        "timestamp": 1596832581
    },
    {
        "content": "<p><code>instance : has_coe (compact_support A B) (BCF A B) := \\&lt;to_BCF\\&gt;</code></p>",
        "id": 206306302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596832590
    },
    {
        "content": "<p>for the submodule approach you don't have to define the coe as you get that for free with submodule coercing to a type</p>",
        "id": 206306375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596832631
    },
    {
        "content": "<p>but you will have to prove it's a submodule of course</p>",
        "id": 206306392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596832646
    },
    {
        "content": "<p>I see there is a submodule type, but no subalgebra and subring</p>",
        "id": 206307000,
        "sender_full_name": "Noam Atar",
        "timestamp": 1596832997
    },
    {
        "content": "<p>So should I define it as a module and then prove separately that it is also an algebra and ring using coe?</p>",
        "id": 206307042,
        "sender_full_name": "Noam Atar",
        "timestamp": 1596833026
    },
    {
        "content": "<p>Just define your functions and and prove that the canonical map between your functions and lean's is an injective ring Hom. You don't have to worry about subtypes at all that way and you will have proved all the results that people will need if they want to use subtypes. We have unbundled subrings but soon we'll have bundled subrings and so subtype code might need to be rewritten</p>",
        "id": 206354797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596904580
    },
    {
        "content": "<p>Once you define an injective function from continuous functions with compact support to bounded continuous functions and <code>has_zero</code> etc, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.ring\">docs#function.injective.ring</a> to avoid proofs of <code>add_comm</code> etc.</p>",
        "id": 206355130,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596905164
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric_space.induced\">docs#metric_space.induced</a> to get a <code>metric_space</code> instance.</p>",
        "id": 206355160,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596905271
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 206362778,
        "sender_full_name": "Noam Atar",
        "timestamp": 1596918268
    }
]