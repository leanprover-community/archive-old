[
    {
        "content": "<p>I know that mathlib has formalized a model of ZFC in Lean. But I want to show the construction of the math world only using ZFC and logic. So I want to add a constant type <code>Set</code> and several axioms to achieve that. The problem is that <code>classical.choice</code> is too strong but I need to use its corollary <code>em</code>, and I still want the automatic tactics about classical logic. What should I do?</p>",
        "id": 291145096,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658988827
    },
    {
        "content": "<p>Mathlib as a whole uses choice freely and carelessly. If you want to explicitly avoid choice, then mathlib and its tactics are not for you.</p>",
        "id": 291147004,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658991013
    },
    {
        "content": "<p>By the way, I presume that by \"tactics about classical logic\" you mean <code>tauto!</code>? I've only found it useful in a few situations, I don't think you'll lose out on much by not having it.</p>",
        "id": 291147065,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658991108
    },
    {
        "content": "<p>Thank you. I will not use mathlib then. And I may use Lean4 instead.</p>",
        "id": 291147368,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658991404
    },
    {
        "content": "<p>lean itself is already stronger than ZFC in axiomatic strength</p>",
        "id": 291147404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658991459
    },
    {
        "content": "<p>Btw, how strong is the lean's axioms? Are there any statements about its consistency?</p>",
        "id": 291147838,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658991951
    },
    {
        "content": "<p>Why are you interested in this? As a normal person, I write proofs and couldn't care less about foundations. Foundations are too high, not yet for me.</p>",
        "id": 291148385,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1658992449
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> has the full breakdown. The short answer is that Lean's type theory is equiconsistent with ZFC + n inaccessibles for all n &lt; omega</p>",
        "id": 291148434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658992513
    },
    {
        "content": "<p>That includes the 3 standard axioms though. No-axioms lean is less well studied, but I believe it to still have approximately the same strength (intuitionistic logic is well known to be equiconsistent with classical logic via double negation translation, and similarly ZF and ZFC are equiconsistent because you can construct L as an inner model in which choice holds)</p>",
        "id": 291148591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658992648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"511228\">@Huỳnh Trần Khanh</span> different people are interested in different things</p>",
        "id": 291148676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658992695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478392\">Jiatong Yang</span> <a href=\"#narrow/stream/113488-general/topic/ZFC.20in.20Lean/near/291145096\">said</a>:</p>\n<blockquote>\n<p>I know that mathlib has formalized a model of ZFC in Lean. But I want to show the construction of the math world only using ZFC and logic. So I want to add a constant type <code>Set</code> and several axioms to achieve that.</p>\n</blockquote>\n<p>You may be interested in a small <a href=\"https://github.com/user7230724/lean-projects4/tree/master/Src/Prover\">project</a> of mine, in which I stated ZFC axioms and constructed some data structures and proved things about them (unordered/ordered pairs, natural numbers, induction principle, set functions as cartesian products, classical propositions, conditionals, etc). It's not written according to the recommended Lean 4 style guide though.</p>",
        "id": 291207297,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1659021308
    }
]