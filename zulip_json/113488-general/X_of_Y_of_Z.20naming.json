[
    {
        "content": "<p>What theorem is called <code>X_of_Y_of_Z</code>? Is it <code>Y -&gt; Z -&gt; X</code> or <code>Z -&gt; Y -&gt; X</code> or even something else? Or are things more fluid than this?</p>",
        "id": 124954801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523486724
    },
    {
        "content": "<p><code>Y -&gt; Z -&gt; X</code></p>",
        "id": 124954877,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523486827
    },
    {
        "content": "<p>as in <code>lt_of_le_of_lt</code></p>",
        "id": 124954879,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523486846
    },
    {
        "content": "<p>Right, that's why I asked.</p>",
        "id": 124954882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523486855
    },
    {
        "content": "<p>I just don't understand how the brackets work</p>",
        "id": 124954886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523486865
    },
    {
        "content": "<p>If \"of\" means \"follows from\"</p>",
        "id": 124954890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523486876
    },
    {
        "content": "<p>is <code>of</code> right associative</p>",
        "id": 124954892,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523486878
    },
    {
        "content": "<p>since it represents <code>-&gt;</code></p>",
        "id": 124954929,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523486884
    },
    {
        "content": "<p>then <code>Y-&gt;Z-&gt;X</code> is <code>Y-&gt;(Z-&gt;X)</code></p>",
        "id": 124954935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523486894
    },
    {
        "content": "<p>which is <code>(X_of_Z)_of_Y</code></p>",
        "id": 124954938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523486910
    },
    {
        "content": "<p>it is also a mystery to me, hah</p>",
        "id": 124954942,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523486915
    },
    {
        "content": "<p>I think <code>X_of_Y_of_Z</code> is <code>Y -&gt; Z -&gt; X</code>: only the consequent is out of order in the name</p>",
        "id": 124954957,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523486966
    },
    {
        "content": "<p>well <code>(X_of_Y)_of_Z</code> seems to mean <code>Z-&gt;(Y-&gt;X)</code> and <code>X_of_(Y_of_Z)</code> seems to mean <code>(Z-&gt;Y)-&gt;X</code></p>",
        "id": 124954958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523486973
    },
    {
        "content": "<p>So are you clear on the logic? What does <code>A_of_B_of_C_of_D</code> say?</p>",
        "id": 124955010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523487011
    },
    {
        "content": "<p>I don't know these fancy CS terms like consequent by the way</p>",
        "id": 124955028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523487065
    },
    {
        "content": "<p>Sorry</p>",
        "id": 124955031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523487066
    },
    {
        "content": "<p>somewhere, a logician is crying</p>",
        "id": 124955034,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487078
    },
    {
        "content": "<p>next you'll be telling me that something is a minor premise</p>",
        "id": 124955038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523487084
    },
    {
        "content": "<blockquote>\n<p>well <code>(X_of_Y)_of_Z</code> seems to mean <code>Z-&gt;(Y-&gt;X)</code> and <code>X_of_(Y_of_Z)</code> seems to mean <code>(Z-&gt;Y)-&gt;X</code></p>\n</blockquote>\n<p>I disagree with that assessment. I would say that <code>A_of_B_of_C_of_D</code> is <code>B -&gt; C -&gt; D -&gt; A</code></p>",
        "id": 124955076,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523487124
    },
    {
        "content": "<p>I think <code>of</code> doesn't follow right or left associativity rules</p>",
        "id": 124955081,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523487148
    },
    {
        "content": "<p>Consequent is the only positive term in a chain of implications, i.e. the right-most term.</p>",
        "id": 124955083,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523487161
    },
    {
        "content": "<p>if i had to guess i would think like simon it's right assoc</p>",
        "id": 124955144,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487243
    },
    {
        "content": "<p>so a_of_b... is B -&gt; C -&gt; D -&gt; A</p>",
        "id": 124955153,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487255
    },
    {
        "content": "<p>so how do we put parentheses in our theorem names? who knows</p>",
        "id": 124955170,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487279
    },
    {
        "content": "<p>oh</p>",
        "id": 124955173,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487301
    },
    {
        "content": "<p>i have seen <code>imp</code> used in theorem names</p>",
        "id": 124955179,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487306
    },
    {
        "content": "<blockquote>\n<p>I don't know these fancy CS terms like consequent by the way</p>\n</blockquote>\n<p>I wonder if we could create a sitcom where a mathematician and a computer scientist share a flat. I'm sure they'd get into lots of crazy (conceptual) hijinks</p>",
        "id": 124955181,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523487307
    },
    {
        "content": "<p>so <code>(a-&gt;b)-&gt;c</code> is <code>c_of_a_imp_b</code></p>",
        "id": 124955184,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487336
    },
    {
        "content": "<blockquote>\n<p>if i had to guess i would think like simon it's right assoc</p>\n</blockquote>\n<p>I don't think that's an associativity rule actually.</p>",
        "id": 124955228,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523487370
    },
    {
        "content": "<p>if it isn't that way, it should be, it should follow the same rules as <code>-&gt;</code></p>",
        "id": 124955235,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487391
    },
    {
        "content": "<p>otherwise my brain may explode</p>",
        "id": 124955238,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487397
    },
    {
        "content": "<p>As for <code>imp</code>, the difference is that you use <code>imp</code> where you would normally use <code>le</code> or <code>lt</code>: <code>and_imp_and_of_imp_of_imp</code> for example to state that conjunction is monotonic in both arguments</p>",
        "id": 124955256,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523487435
    },
    {
        "content": "<p>frankly speaking, trying to remember how a theorem should be named is kinda of ridiculous. when lean 4 comes out i'm sure <span class=\"user-mention\" data-user-id=\"110027\">@Moses Sch√∂nfinkel</span> will write the Lean SearchAbout we've been waiting for :)</p>",
        "id": 124955306,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487489
    },
    {
        "content": "<p>i have the same general hatred when it comes to reading C++ qualifiers</p>",
        "id": 124955407,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487655
    },
    {
        "content": "<p>the rule is, read it from the right and wrap around, which is terrible</p>",
        "id": 124955416,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487668
    },
    {
        "content": "<p><a href=\"http://goshdarnfunctionpointers.com\" target=\"_blank\" title=\"http://goshdarnfunctionpointers.com\">http://goshdarnfunctionpointers.com</a></p>",
        "id": 124955431,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523487710
    },
    {
        "content": "<p>Now I remember that fun :)</p>",
        "id": 124955478,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523487731
    },
    {
        "content": "<p>Looking through mathlib it does seem to be consistently using <code>X_of_Y_of_Z : Y -&gt; Z -&gt; X</code></p>",
        "id": 124955781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523488258
    },
    {
        "content": "<p>and there was me thinking there would be some sort of logic ;-)</p>",
        "id": 124955786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523488267
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lt_of_lt_of_le\nlt_of_le_of_lt\npos_of_dvd_of_pos\ndecidable_of_decidable_of_iff\nneg_of_nat_of_succ\nlt_add_of_le_of_pos\nmem_of_eq_of_mem\nmem_of_subset_of_mem\neq_of_subset_of_subset\nnat.not_coprime_of_dvd_of_dvd\neq_of_le_of_forall_le_of_dense\nmul_nonpos_of_nonpos_of_nonneg\nlt_add_of_lt_of_nonneg\neq_of_sublist_of_length_le\nnot_mem_cons_of_ne_of_not_mem\neq_of_sorted_of_perm\nheq_of_heq_of_eq\ndecidable_of_decidable_of_iff\ndiv_of_neg_of_pos\n</pre></div>",
        "id": 124955852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523488326
    },
    {
        "content": "<p>Does it really matter? If I want <code>pos_of_dvd_of_pos</code> and I get <code>pos_of_pos_of_dvd</code> they're both the same thing.</p>",
        "id": 124956074,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523488713
    },
    {
        "content": "<p>oh they are very anal about names here :-)</p>",
        "id": 124956089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523488791
    },
    {
        "content": "<p>looking through that stacks file you wrote I see <code>lemma thingy ...</code> so perhaps you are less fussy than them ;-)</p>",
        "id": 124956144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523488834
    },
    {
        "content": "<p>The logic I see is: <code>&lt;something&gt;_of_&lt;list_of_assumptions_separated_by_of&gt;</code> and that list of assumptions is in the order that you should feed them to a function application if you build the proof term by hand. You could advocate for <code>&lt;list_of_assumptions_separated_by_of&gt;_of_&lt;something&gt;</code> so that the name mentions assumptions in the same order as the type but I think it's very useful that the first thing you see in the name is what you can achieve with it.</p>",
        "id": 124956317,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523489124
    },
    {
        "content": "<p>Yes that's why they went for of rather than imp, right? I like that, I just can't make any sense of the logic for the rest of it when there are two ofs</p>",
        "id": 124956617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489594
    },
    {
        "content": "<p>You mean like <code>lt_of_lt_of_le</code>? It proves <code>lt</code> from two assumptions: 1. <code>lt</code>; 2. <code>le</code>. The order of those assumptions is the same as in the name</p>",
        "id": 124956706,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523489707
    },
    {
        "content": "<p>right, as in <code>lt_of_lt_and_le</code></p>",
        "id": 124956718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489733
    },
    {
        "content": "<p>Yeah, exactly</p>",
        "id": 124956722,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523489760
    },
    {
        "content": "<p>but not as in <code>lt_is_implied_by_lt_which_is_implied_by_le</code></p>",
        "id": 124956763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489769
    },
    {
        "content": "<p>i.e. not as in <code>lt_of_lt_of_le</code></p>",
        "id": 124956769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489788
    },
    {
        "content": "<p>if \"of\" is supposed to mean \"is implied by\"</p>",
        "id": 124956776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489816
    },
    {
        "content": "<p>and also not as in \"(lt_is_implied_by_lt)_is_implied_by_le\"</p>",
        "id": 124956791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489880
    },
    {
        "content": "<p>but actually exactly as in \"(lt_is_implied_by_le)_is_implied_by_lt\"</p>",
        "id": 124956839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489902
    },
    {
        "content": "<p>i.e. exactly \"(lt_of_le)_of_lt\"</p>",
        "id": 124956842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489914
    },
    {
        "content": "<p>Right. I guess that's where the associativity talk is relevant. It's <code>(lt of lt) of le</code> with the little twist that the assumptions are shuffled ..</p>",
        "id": 124956847,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523489921
    },
    {
        "content": "<p>Aah</p>",
        "id": 124956852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489938
    },
    {
        "content": "<p>for you <code>X -&gt; Y -&gt;Z</code> and <code>Y -&gt; X -&gt; Z</code> are exactly the same</p>",
        "id": 124956860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523489957
    },
    {
        "content": "<p>Yes. As you said</p>",
        "id": 124956861,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523489958
    },
    {
        "content": "<p>Because it's equivalent to <code>lt_of_lt_and_le</code>, the assumptions commute</p>",
        "id": 124956866,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523489984
    },
    {
        "content": "<p>They are logically equivalent</p>",
        "id": 124956921,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523490007
    },
    {
        "content": "<p>so you're saying <code>lt_of_lt_of_le</code> and <code>lt_of_le_of_lt</code> should be defeq? ;-)</p>",
        "id": 124956924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523490024
    },
    {
        "content": "<p>Nooooooo, no, no, no! <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 124956928,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523490051
    },
    {
        "content": "<p>then why did you name one after what the other one does? ;-)</p>",
        "id": 124956937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523490068
    },
    {
        "content": "<p>Because I'm a bad person</p>",
        "id": 124956942,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523490091
    },
    {
        "content": "<p>Of course the names leave out important information that we have to rely on your imagination to fill in. The full name should be <code>x_lt_z_of_x_lt_y_of_y_le_z</code>. Then swapping the assumptions is not semantically meaningful, it's just confusing.</p>",
        "id": 124957006,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523490186
    },
    {
        "content": "<p>Note: defeq and logically equivalent, are not the same by the way ;-)</p>",
        "id": 124957015,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523490231
    },
    {
        "content": "<p>The <code>X_of_Y_of_Z</code> means <code>Y -&gt; Z -&gt; X</code> convention is used throughout mathlib, and it was documented a long time ago in Jeremy's style notes</p>",
        "id": 124958788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523493126
    },
    {
        "content": "<p>Yes, I learnt that now, from example</p>",
        "id": 124958797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523493168
    },
    {
        "content": "<p>I was just querying the logic</p>",
        "id": 124958799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523493174
    },
    {
        "content": "<blockquote>\n<p>The hypotheses are listed in the order they appear, <em>not</em> reverse order. For example, the theorem <code>A ‚Üí B ‚Üí C</code> would be named <code>C_of_A_of_B</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\">https://github.com/leanprover/mathlib/blob/master/docs/naming.md</a></p>",
        "id": 124958807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523493197
    },
    {
        "content": "<p>The logic is, the consequent is the most important part, so it comes first (this is important for autocomplete), but otherwise there is no reshuffling of names from the order they appear in the statement or the order you use them</p>",
        "id": 124958868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523493297
    },
    {
        "content": "<p>Don't think too hard about currying these things, theorems are generally fully applied anyway</p>",
        "id": 124958921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523493364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> I 100% will.</p>",
        "id": 124973894,
        "sender_full_name": "Moses Sch√∂nfinkel",
        "timestamp": 1523520926
    }
]