[
    {
        "content": "<p>Is there something I don't understand about simplifying in a dite conditional? Why do the first two examples work, but the third one doesn't?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fin</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">succ_above_lt_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">succ_above_lt_ge</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">succ_above_above</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">cast_succ_lt_succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_above_below</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_above_ne</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pred_above</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- it&#39;s able to simp in the dite condition</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">p : fin (n + 1),</span>\n<span class=\"cm\">i : fin n</span>\n<span class=\"cm\">⊢ dite (i.cast_succ &lt; p) (λ (h : i.cast_succ &lt; p), (p.succ_above i).cast_lt _)</span>\n<span class=\"cm\">      (λ (h : ¬i.cast_succ &lt; p), (p.succ_above i).pred _) =</span>\n<span class=\"cm\">    i</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_above_ne</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pred_above</span><span class=\"o\">,</span>\n  <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- still able to simp in the dite condition, suggests succ_above_lt_iff</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_above_ne</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pred_above</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">succ_above_lt_iff</span><span class=\"o\">],</span> <span class=\"c1\">-- simplify tactic failed to simplify</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209593305,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599709381
    },
    {
        "content": "<p>Yes, this is really annoying. I don't understand the details, but it's a known issue. And I think people have ideas on how to improve this.</p>",
        "id": 209596850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599714818
    }
]