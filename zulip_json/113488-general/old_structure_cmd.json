[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">TopCommRing</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">cr</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">uniform</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">topological_add_group</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">CmplTopCommRing</span> <span class=\"kn\">extends</span> <span class=\"n\">TopCommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">sp</span> <span class=\"o\">:</span> <span class=\"n\">separated</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">uniform</span>\n</pre></div>",
        "id": 162644619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554486638
    },
    {
        "content": "<p>Should I use the <code>old_structure_cmd</code> or not? What are the pros and cons?</p>",
        "id": 162644647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554486659
    },
    {
        "content": "<p>I will say this: <em><code>old_structure_cmd</code> is not deprecated</em>. The name is really unfortunate, and it should be something more like <code>flat_structure</code></p>",
        "id": 162646713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488030
    },
    {
        "content": "<p><code>old_structure_cmd</code> will lay out a structure as a bunch of fields, inlining all fields of the parent(s). It then constructs \"parent coercions\" (also a bad name, it's an instance not a coercion) so that you can infer parents from the children</p>",
        "id": 162646846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488122
    },
    {
        "content": "<p>This can get expensive, especially for deep hierarchies or structures with many fields</p>",
        "id": 162646882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488156
    },
    {
        "content": "<p>The \"new structure cmd\" (aka the default) is to use a \"nested\" layout, where a structure <code>B extends A</code> contains a field <code>to_A</code> that allows access to all the fields of A. Some magic is then done so you can't tell the difference, but the parent coercions are now a lot simpler to define</p>",
        "id": 162647038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488253
    },
    {
        "content": "<p>The major downside of the new structure cmd is that you can't nest two structures with a common field, at least not if you don't want two copies of the field as data (and they can potentially be different, and bad things can happen). To avoid this, diamonds are just plain rejected. So <code>structure foo extends add_comm_group A, ring A</code> is rejected</p>",
        "id": 162647173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488355
    },
    {
        "content": "<p>For a structure without parents, I don't think it makes a difference which you use</p>",
        "id": 162647313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488430
    },
    {
        "content": "<p>But my example has a parent (-;</p>",
        "id": 162647402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554488499
    },
    {
        "content": "<p>In the end, I want to put a category structure on both, get the induced forgetful functor, etc...<br>\nThis all goes quite smoothly.<br>\nNow, what I would like is if I have an type <code>R</code> and it turns out to have instances of <code>complete_space</code> and <code>topological_ring</code> etc... that I can just write<br>\n<code>{ \\alpha := R }</code> for the object of <code>CmplTopCommRing</code> and that type class inference figures out the other fields of the structure.</p>",
        "id": 162647569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554488630
    },
    {
        "content": "<p>Does that affect my choice for old/flat vs new/nested structures?</p>",
        "id": 162647623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554488650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why are flat structures expensive if you have deep hierarchies? As in, why more expensive then nested structures?</p>",
        "id": 162652936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554492028
    },
    {
        "content": "<p>Are all the \"grandparent coercions\" also inlined into the flat structure? Is that the issue?</p>",
        "id": 162652972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554492067
    },
    {
        "content": "<p>Yes, all transitive parent fields are pulled in. I think leo had examples like <code>decidable_linear_ordered_field</code> or something which were one line to write but just massive under the hood</p>",
        "id": 162654332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554493192
    },
    {
        "content": "<p>what exactly does <code>set_option old_structure_cmd true</code> do?</p>",
        "id": 199093780,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590704700
    },
    {
        "content": "<p>I can't find this in the mathlib docs</p>",
        "id": 199093791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590704707
    },
    {
        "content": "<p>one thing I observed is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[instance]</span>\n<span class=\"cm\">def B.to_A : Π (n : ℕ) [s : B n], A n :=</span>\n<span class=\"cm\">λ (n : ℕ) [s : B n], {A := B.A n s}</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">false</span>\n\n<span class=\"n\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">to_C</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[instance, reducible]</span>\n<span class=\"cm\">def D.to_C : Π {n : ℕ} [c : D n], C n :=</span>\n<span class=\"cm\">λ (n : ℕ) [c : D n], [D.to_C c]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 199093981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590704843
    },
    {
        "content": "<p>the latter one is problematic because it might cause things that should be defeq to not be defeq</p>",
        "id": 199094033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590704880
    },
    {
        "content": "<p>e.g. when there are diamonds</p>",
        "id": 199094084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590704886
    },
    {
        "content": "<p>This is core Lean. The original Lean 3 encoding of structures stored all the fields flat, and a structure could extend and combine as many structures as you want. At some point, Leo determined that the multiple inheritance and diamonds were causing efficiency problems, and changed the representation, making it harder to have inheritance diamonds. (You could still define them by hand, but <code>extends</code> doesn't allow it.) This option restores the old behavior, which is sometimes convenient, though it potentially causes inefficiencies.</p>",
        "id": 199094120,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590704914
    },
    {
        "content": "<p>thanks</p>",
        "id": 199094148,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590704951
    },
    {
        "content": "<p>however the <code>old_strcuture_cmd</code> is not a panacea either, as demonstrated by this example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"bp\">.</span> <span class=\"c1\">-- failed to add declaration to environment, it contains local constants</span>\n</code></pre></div>",
        "id": 199094272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590705038
    },
    {
        "content": "<p>Note that you can replicate the behavior of <code>old_structure_cmd</code> by hand, by inlining all the fields of the parents</p>",
        "id": 199094433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590705152
    },
    {
        "content": "<p>The whole reason the <code>@[ancestor]</code> attribute exists is because these are indistinguishable by later things</p>",
        "id": 199094460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590705179
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 199094563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590705244
    },
    {
        "content": "<p>Leo wrote this before making the switch: <a href=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\">https://github.com/leanprover/lean/wiki/Refactoring-structures</a>.</p>",
        "id": 199094652,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590705321
    },
    {
        "content": "<p>looks like I should just <code>set_option old_structure_cmd true</code> for everything in the algebra hierarchy</p>",
        "id": 199095854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706238
    },
    {
        "content": "<p>at least those without <code>is_</code></p>",
        "id": 199095856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706243
    },
    {
        "content": "<p>but then they would be very slow</p>",
        "id": 199096006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706357
    },
    {
        "content": "<p>I hesitate to give any blanket rule here, but it is true that most types in the algebraic hierarchy use <code>old_structure_cmd</code></p>",
        "id": 199096050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706405
    },
    {
        "content": "<p>I think that the speed issue that leo was worried about is not the major concern, because it deals with the cost of elaborating a new <code>class</code> declaration, which is relatively rare. Even structure literals are pretty rare in mathlib</p>",
        "id": 199096164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706482
    },
    {
        "content": "<p>the real killer in mathlib is the constant typeclass inference</p>",
        "id": 199096189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706505
    },
    {
        "content": "<p>which makes this quote especially terrifying:</p>\n<blockquote>\n<p>Another potential problem is performance: <code>theory_ac.cpp</code> generates many type class resolution problems. It generates at least one for every subterm of the form <code>f a b</code>. I'm not sure how expensive it will be. The simplifier also generates a lot of type class resolution problems.</p>\n</blockquote>",
        "id": 199096224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706549
    },
    {
        "content": "<p>yeah... but the new approach generates diamond problems</p>",
        "id": 199096235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706562
    },
    {
        "content": "<p>because things are not defeq anymore</p>",
        "id": 199096274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706568
    },
    {
        "content": "<p>the new approach solves diamond problems by giving an error</p>",
        "id": 199096297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706586
    },
    {
        "content": "<p>you just can't do it</p>",
        "id": 199096310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706597
    },
    {
        "content": "<p>here's the real use case</p>",
        "id": 199096312,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706600
    },
    {
        "content": "<p>which is a non-solution for all the stuff in the algebraic hierarchy</p>",
        "id": 199096333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706620
    },
    {
        "content": "<p><code>euclidean_domain</code> extends <code>comm_ring</code> (it used to extend <code>nonzero_comm_ring</code>)</p>",
        "id": 199096334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706620
    },
    {
        "content": "<p>and there is an instance that every euclidean domain is an integral domain</p>",
        "id": 199096346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706633
    },
    {
        "content": "<p>so you get two paths to <code>comm_ring</code> that are not defeq</p>",
        "id": 199096360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706640
    },
    {
        "content": "<p><code>euclidean_domain</code> uses the new approach</p>",
        "id": 199096369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706651
    },
    {
        "content": "<p>while <code>integral_domain</code> uses the old approach</p>",
        "id": 199096373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706658
    },
    {
        "content": "<p>what should I do?</p>",
        "id": 199096378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706666
    },
    {
        "content": "<p>make it an old structure</p>",
        "id": 199096383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706673
    },
    {
        "content": "<p>aha</p>",
        "id": 199096416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706682
    },
    {
        "content": "<p>alright</p>",
        "id": 199096434,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706686
    },
    {
        "content": "<p>actually now that I come to think about it I'm not sure that's actually a problem</p>",
        "id": 199096480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706725
    },
    {
        "content": "<p>but now <code>rw</code> cannot find</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_distrib</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span>\n       <span class=\"n\">a</span>\n       <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span>\n       <span class=\"n\">b</span>\n       <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(which is <code>a * s + b * t</code>)<br>\ninside</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_distrib</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199096511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/old_structure_cmd/near/199096480\">said</a>:</p>\n<blockquote>\n<p>actually now that I come to think about it I'm not sure that's actually a problem</p>\n</blockquote>\n<p>I get <code>synthesized</code> error</p>",
        "id": 199096528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706763
    },
    {
        "content": "<p>it's true that the two paths to <code>comm_ring</code> are not defeq, but that doesn't matter, what matters is that all projections out of <code>comm_ring</code> are defeq regardless of the path</p>",
        "id": 199096530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590706764
    },
    {
        "content": "<p>but the problem is that <code>ideal</code> uses <code>comm_ring</code> itself</p>",
        "id": 199096547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706789
    },
    {
        "content": "<p>it used to not matter because there is <code>nonzero_comm_ring</code> in between</p>",
        "id": 199096559,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590706797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you can actually see the error itself <em>in vivo</em> in <code>src/ring_theory/principal_ideal_domain.lean</code> in the <code>nonzero</code> branch</p>",
        "id": 199097050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707138
    },
    {
        "content": "<p>(which has oleans ready)</p>",
        "id": 199097056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707144
    },
    {
        "content": "<p>Is the <code>rw</code> using <code>euclidean_domain.mul_comm</code> or something? I remember this causing problems</p>",
        "id": 199097134,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590707191
    },
    {
        "content": "<p>as in, the error caused by the two paths not being defeq</p>",
        "id": 199097181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707243
    },
    {
        "content": "<p>the <code>rw</code> error arises when I use old structure command</p>",
        "id": 199097191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707254
    },
    {
        "content": "<p>which is currently not enabled</p>",
        "id": 199097201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707264
    },
    {
        "content": "<p>Because. <code>old_structure_cnd</code> will ad <code>euclidean_domain.mul_comm </code> to the environment</p>",
        "id": 199097271,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590707297
    },
    {
        "content": "<p>right</p>",
        "id": 199097292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707324
    },
    {
        "content": "<p>You can <code>protect</code> lemmas after defying them now, so you can solve that problem if that was the problem.</p>",
        "id": 199097580,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590707609
    },
    {
        "content": "<p>the current problem is the two paths not being defeq because euclidean domain is using the new approach</p>",
        "id": 199097653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707685
    },
    {
        "content": "<p>and \"just use the old approach\" creates other problems which might or might not be solvable depending or not depending on <a href=\"https://github.com/leanprover-community/lean/issues/282\">lean#282</a></p>",
        "id": 199097682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707724
    },
    {
        "content": "<p>What are the other problems?</p>",
        "id": 199097699,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590707753
    },
    {
        "content": "<p>the <code>rw</code> problem not recognizing <code>a * s + b * t</code></p>",
        "id": 199097839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590707885
    },
    {
        "content": "<p>This command after the definition of euclidean domain solves the rw issue </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">set_env</span> <span class=\"err\">$</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"n\">env</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n</code></pre></div>",
        "id": 199097991,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590708107
    },
    {
        "content": "<p>I am so proud of my undergraduates and their deep understanding of the system I love</p>",
        "id": 199098117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590708237
    },
    {
        "content": "<p>I think the two paths are actually defeq, but not defeq with instance reducibility, because it involves unfolding <code>ideal</code> to note that the definition only uses the various components of a ring and not the ring itself</p>",
        "id": 199101684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590711838
    },
    {
        "content": "<p>then what should i do?</p>",
        "id": 199116404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590731354
    },
    {
        "content": "<p>Use <code>old_structure_cmd</code></p>",
        "id": 199116921,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590732002
    },
    {
        "content": "<p>I don't understand why making mul_assoc protected has anything to do with rw figuring out some patterns</p>",
        "id": 199118015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590734150
    },
    {
        "content": "<p>as a result one should not <code>open euclidean_domain</code> now</p>",
        "id": 199120707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590736558
    },
    {
        "content": "<p>aha</p>",
        "id": 199120807,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590736618
    },
    {
        "content": "<p>or I should make everything protected</p>",
        "id": 199120810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590736623
    },
    {
        "content": "<p>how does <code>set_env</code> work? I thought it cannot change anything</p>",
        "id": 199121180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590736907
    },
    {
        "content": "<p>or is that limited to new declarations</p>",
        "id": 199121189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590736917
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2855\">#2855</a> gives you an attribute to protect the projections</p>",
        "id": 199127747,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590741638
    },
    {
        "content": "<p>oh thanks!</p>",
        "id": 199127821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590741704
    },
    {
        "content": "<p>but some projections might not need to be protected</p>",
        "id": 199127882,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590741728
    },
    {
        "content": "<p>this is what I do currently for <code>euclidean_domain</code>:</p>",
        "id": 199127897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590741747
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/396edbf68a450118a6c880c59943a8bd9c395ba5/src/algebra/euclidean_domain.lean#L36-L54\">https://github.com/leanprover-community/mathlib/blob/396edbf68a450118a6c880c59943a8bd9c395ba5/src/algebra/euclidean_domain.lean#L36-L54</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">add_left_neg</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">set_env</span> <span class=\"n\">env</span>\n</code></pre></div>",
        "id": 199127973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590741807
    },
    {
        "content": "<p>as in, there's no need to make <code>euclidean_domain.quotient</code> protected</p>",
        "id": 199128054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590741855
    },
    {
        "content": "<p>oh I guess there's a need</p>",
        "id": 199128073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590741875
    },
    {
        "content": "<p>it coincides with the <code>quotient</code> for quotienting a setoid</p>",
        "id": 199128084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590741883
    },
    {
        "content": "<p>Can we make fields of a structure/class protected by default?</p>",
        "id": 199128167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741949
    },
    {
        "content": "<p>I'm not sure there's a way to unprotect, that's the only trouble I can think of with that.</p>",
        "id": 199128285,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590742013
    },
    {
        "content": "<p>I see... we might want to protect at the end of the file that introduced the structure...</p>",
        "id": 199128621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590742216
    },
    {
        "content": "<p>here's hoping <code>protected</code> becomes an attribute at some point...</p>",
        "id": 199128676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590742242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/old_structure_cmd/near/199128676\">said</a>:</p>\n<blockquote>\n<p>here's hoping <code>protected</code> becomes an attribute at some point...</p>\n</blockquote>\n<p>I added this to <a href=\"https://github.com/leanprover-community/mathlib/issues/2855\">#2855</a></p>",
        "id": 199137290,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590748543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Wow, thanks for that PR!</p>",
        "id": 199138911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590749885
    }
]