[
    {
        "content": "<p>While I was reading TPIL, I was wondering why do we need the quotient axioms (<code>quot</code>, <code>quot.mk</code>, <code>quot.ind</code>, <code>quot.lift</code> and <code>quot.sound</code>)? I mean, why do they need to be stated as constants and axioms, rather than definitions and lemmas? If <code>r</code> is an equivalence relation, all of them can be implemented using the axiom of choice. If it is not, what is the purpose of using quotients in that case? Is there some data structure or mathematical object that can't be represented without them?</p>",
        "id": 267368490,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641749847
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.ind\">docs#quot.ind</a> a constant? I thought it was implemented in terms of something else</p>",
        "id": 267371647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641754237
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/e948149d3d1bbdb8eac9cd103d58626a59fae3b9/library/init/core.lean#L92\">https://github.com/leanprover-community/lean/blob/e948149d3d1bbdb8eac9cd103d58626a59fae3b9/library/init/core.lean#L92</a> has some context you may have already found, but I'm not sure I believe the comment.</p>",
        "id": 267371821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641754468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>quot.ind</code> is a constant.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">quot.ind</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">builtin-quotient-type-constant quot.ind : ∀ {α : Sort u} {r : α → α → Prop} {β : quot r → Prop},</span>\n<span class=\"cm\">  (∀ (a : α), β (quot.mk r a)) → ∀ (q : quot r), β q</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 267372252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641754996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> I assume you mean using something like equivalence classes to implement <code>quot</code>. If you do that then you can indeed define these constants, but you won't have the computation rule for applying <code>quot.lift</code> to <code>quot.mk</code> as a definitional equality.</p>",
        "id": 267372342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641755132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> My understanding is that they're designed to give you quotients in a computable way. They're also used to prove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/funext\">docs#funext</a></p>\n<p>I think an idea here is that part of an interface of a <code>Type</code> is its associated <code>eq</code> relation. The <code>quot</code> system is a way to let you say \"and now these terms are <code>eq</code>, too\" while making sure that whenever you look at underlying terms you do so in a way that provably respects this new <code>eq</code>.</p>",
        "id": 267372406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641755209
    },
    {
        "content": "<p>Yeah you can (indeed I did when I was trying to understand this) reimplement quotients using equivalence classes. You have to restrict to type rather than sort and you lose that the proof of the fundamental commuting diagram is refl</p>",
        "id": 267374623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641758384
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 267374715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641758419
    },
    {
        "content": "<p>Quotients a la Lean makes lean's type theory have some properties which some people find undesirable but which don't seem to bother mathematicians</p>",
        "id": 267374766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641758468
    },
    {
        "content": "<p>Thanks. So, to summarize, if I got it right, the quotient axioms exist in Lean only for pragmatic purposes, and not for the foundational purposes? It means they are not needed for the underlying logic framework, but just to facilitate defeq-related stuff.</p>",
        "id": 267375973,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641759852
    },
    {
        "content": "<blockquote>\n<p>You have to restrict to type rather than sort...</p>\n</blockquote>\n<p>Are you sure about that?</p>",
        "id": 267375975,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641759860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113488-general/topic/Quotient.20axioms/near/267375973\">said</a>:</p>\n<blockquote>\n<p>and not for the foundational purposes?</p>\n</blockquote>\n<p>(I believe that's with the proviso that you'd need to include <code>funext</code> as an axiom instead.)</p>",
        "id": 267376242,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641760245
    },
    {
        "content": "<p>Re type not sort, I'm just going from memory. I guess I can reconstruct what happened: an equivalence class for an equivalence relation is a subset but IIRC lean doesn't let you make subsets of P : Prop.</p>",
        "id": 267382877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641770016
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set\">docs#set</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient\">docs#quotient</a></p>",
        "id": 267382880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641770027
    },
    {
        "content": "<p>Yeah quotient allows sorts but set only allows types</p>",
        "id": 267382933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641770088
    },
    {
        "content": "<p>That quotient allows <code>Sort u</code> (and in particular, produces a <code>Prop</code> when the input is a <code>Prop</code>, rather than having type <code>Sort (max 1 u)</code> like stuff built with inductive types) is arguably a bug, and it leads to one of the two examples of non-transitivity of defeq, mentioned in section 3.1.1 of <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a></p>",
        "id": 267398897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641794668
    }
]