[
    {
        "content": "<p>Should I be able to use <code>calc</code> to construct  a <code>linear_equiv</code>?</p>",
        "id": 240337990,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622041141
    },
    {
        "content": "<p>For example, should <code>calc_linear_equiv</code> work in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Works. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">calc_equiv</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">e₁</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">e₂</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Fails with error:</span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  linear_equiv.trans</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  M</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type u_2 : Type (u_2+1)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  module ?m_1 ?m_2 : Type (max ? ?)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">calc_linear_equiv</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">e₁</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">e₂</span>\n</code></pre></div>",
        "id": 240338118,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622041180
    },
    {
        "content": "<p><code>@[trans]</code> only works on types with two arguments, I think. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv\">docs#equiv</a> is therefore fine, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv\">docs#linear_equiv</a> has way too many. I imagine even <code>mul_equiv</code> is not an option here. Maybe comparing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.trans\">docs#equiv.trans</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.trans\">docs#linear_equiv.trans</a> can help.</p>",
        "id": 240338518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622041313
    },
    {
        "content": "<p>I see!</p>",
        "id": 240338653,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622041351
    },
    {
        "content": "<p>Does <code>@[trans]</code> do anything else or are many such decorators basically pointless then?</p>",
        "id": 240338789,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622041396
    },
    {
        "content": "<p>(Also, if anyone has a reference for this \"two arguments\" rule, I'd be grateful to receive it.)</p>",
        "id": 240338874,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622041430
    },
    {
        "content": "<p>My hunch is it's pointless...</p>",
        "id": 240339147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622041508
    },
    {
        "content": "<p>The attribute also works for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transitivity\">tactic#transitivity</a> I think</p>",
        "id": 240339254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622041545
    },
    {
        "content": "<p>But I expect it to fail in the same way</p>",
        "id": 240339268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622041550
    },
    {
        "content": "<p>Right, thanks.</p>",
        "id": 240339494,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622041631
    },
    {
        "content": "<p>Here's a possible fix - replace the weird <code>{module}</code> binders with <code>[module]</code> in <code>linear_equiv.trans</code></p>",
        "id": 240339582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622041664
    },
    {
        "content": "<p>The supposition being that implicit, but not typeclass, arguments contribute to the magical \"two arguments\" count?</p>",
        "id": 240340008,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622041816
    },
    {
        "content": "<p>Well, or that my previous rationale was nonsense.</p>",
        "id": 240343919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622043164
    },
    {
        "content": "<p>Very unlikely! I'm going to leave this alone though, I don't want this badly enough.</p>",
        "id": 240352288,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622046559
    }
]