[
    {
        "content": "<p>What does it mean in Lean to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I am guessing that it means showing that two hypotheses contradict, but I have no idea how to do this in Lean.</p>",
        "id": 217720260,
        "sender_full_name": "Formally Verified Waffle Maker",
        "timestamp": 1606201644
    },
    {
        "content": "<p>There's not one golden rule which says how to prove something. Blame Gödel.</p>",
        "id": 217720960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606202705
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 217721368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606203189
    },
    {
        "content": "<p>I mean, at least include the whole context (\"context\" means all the hypotheses and the goals in the error message)</p>",
        "id": 217721386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606203197
    },
    {
        "content": "<p>Often, you can apply a \"negative statement\" to convert the <code>false</code> to the corresponding \"positive statement\".  If one of your hypotheses is <code>h : 0 ≠ 0</code>, then <code>apply h</code> will convert the <code>false</code> into a <code>0 = 0</code>.  Hope that this helps!</p>",
        "id": 217723297,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1606205182
    },
    {
        "content": "<p>to cite section 3.3.3 of Theorem Proving in Lean: \"Negation, ¬p, is actually defined to be p → false, so we obtain ¬p by deriving a contradiction from p. Similarly, the expression hnp hp produces a proof of false from hp : p and hnp : ¬p. \"</p>",
        "id": 217723438,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1606205360
    },
    {
        "content": "<p>Or if you have <code>hp</code> and <code>hnp</code> as hypotheses, <code>contradiction</code> should find them.</p>",
        "id": 217724367,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1606206142
    },
    {
        "content": "<p>You can have a look at the file <code>logic.lean</code> where many of the \"basic\" logical implications are coded. For instance, you have <br>\n<code>lemma elim (h : a ≠ b) : a = b → false := h</code><br>\nshowing that if you have proven <code>h : a ≠ b</code> and you have somewhere in your proof <code>h1 : a = b</code>, then <code>elim h h1</code> (or rather <code>ne.elim h h1</code>) produces <code>false</code>.</p>\n<p>Similarly, you have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_false_intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.intro</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">false.rec</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which allows you to deduce <code>false</code> by applying the (modus ponens) of this lemma <code>iff_false_intro</code> to two hypotheses  <code>h : ¬a</code> and <code>h2 : a</code> namely by writing <code>(iff_false_intro h).mp h2</code> (or <code>apply (iff_false_intro h).mp h2</code> if you're in tactic mode).</p>\n<p>Finally (but there might be more examples) there is also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- We can't have `a` and `¬a`, that would be absurd!-/</span>\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">absurd</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">false.rec</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(with the nice description above): it says that from <code>a</code> and <code>¬a</code> everything can be deduced, including <code>false</code>. So, you can also prove <code>false</code> from  <code>h</code> and <code>h2 : ¬h</code> by <code>apply absurd h  h2</code>.</p>",
        "id": 217725900,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606207495
    },
    {
        "content": "<p>In this case of <code>apply absurd h h2</code> I would rather say <code>exact absurd h h2</code> because there is not an application there, but rather the complete statement.</p>",
        "id": 217757411,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606226685
    },
    {
        "content": "<p>Right!</p>",
        "id": 217757443,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606226706
    },
    {
        "content": "<p>golfer protip: <code>cases h2 h</code></p>",
        "id": 217762278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606228924
    },
    {
        "content": "<p>This way your one goal is replaced by a goal for each case. But there are no cases :-)</p>",
        "id": 217763566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606229487
    },
    {
        "content": "<p><code>cases h h2</code>?</p>",
        "id": 217764021,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1606229673
    },
    {
        "content": "<p>Filippo's post seems to contain both conventions.</p>",
        "id": 217764182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606229761
    }
]