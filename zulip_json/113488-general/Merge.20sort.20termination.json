[
    {
        "content": "<p>Hi everyone, </p>\n<p>I am wondering how can I show the termination of <code>mergeList</code> function. (I understand that I need to turn <code>1 + sizeOf (xhs ++ yh :: yhs)</code> into <code>2 + sizeOf (xhs ++ yhs)</code> but I am lacking the knowledge of syntax and the required lemmas)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">MergeSort</span>\n  <span class=\"kd\">universe</span> <span class=\"n\">u</span>\n  <span class=\"kd\">variable</span>\n    <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">splitList</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.take</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">List.drop</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">splitList</span> <span class=\"o\">(</span><span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">mergeList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span>  <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">xhs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">xh</span> <span class=\"n\">yh</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">mergeList</span> <span class=\"n\">xhs</span> <span class=\"o\">(</span><span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">mergeList</span> <span class=\"o\">(</span><span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">xhs</span><span class=\"o\">)</span> <span class=\"n\">yhs</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">mergeList</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span>\n  <span class=\"k\">have</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    How to show</span>\n<span class=\"cm\">    A : Type u</span>\n<span class=\"cm\">    xh : A</span>\n<span class=\"cm\">    xhs : List A</span>\n<span class=\"cm\">    yh : A</span>\n<span class=\"cm\">    yhs : List A</span>\n<span class=\"cm\">    ⊢ 1 + sizeOf (xhs ++ yhs) &lt; 1 + sizeOf (xhs ++ yh :: yhs)</span>\n\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MergeSort</span>\n</code></pre></div>",
        "id": 316668689,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1671426823
    },
    {
        "content": "<p>you want to use <code>xs.length + ys.length</code> as the termination measure, not <code>xs ++ ys</code></p>",
        "id": 316668753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671426884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks!  Given that the goal is provable, I am still curious about the proof using <code>have</code> or <code>decreasing_by</code> syntax. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">xh</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">xhs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span>\n<span class=\"n\">yh</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">yhs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">xhs</span> <span class=\"bp\">++</span> <span class=\"n\">yhs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">xhs</span> <span class=\"bp\">++</span> <span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316669251,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1671427417
    },
    {
        "content": "<p>The goal there is more annoying because it relies on the <code>sizeOf</code> function for lists, which does not have many lemmas about it (because if the automatic proof method doesn't work then you should use something with more sensible proof principles like <code>length</code> instead)</p>",
        "id": 316669451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671427672
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">mergeList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span>  <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">xhs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">xh</span> <span class=\"n\">yh</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">mergeList</span> <span class=\"n\">xhs</span> <span class=\"o\">(</span><span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">xhs</span> <span class=\"bp\">++</span> <span class=\"n\">yhs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">xhs</span> <span class=\"bp\">++</span> <span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">decreasing_trivial</span>\n      <span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">mergeList</span> <span class=\"o\">(</span><span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">xhs</span><span class=\"o\">)</span> <span class=\"n\">yhs</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">mergeList</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span>\n</code></pre></div>",
        "id": 316669703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671427900
    },
    {
        "content": "<p>another termination metric which works here is lexicographic order:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">mergeList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span>  <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">xhs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">xh</span> <span class=\"n\">yh</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">mergeList</span> <span class=\"n\">xhs</span> <span class=\"o\">(</span><span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">yhs</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">yh</span> <span class=\"o\">::</span> <span class=\"n\">mergeList</span> <span class=\"o\">(</span><span class=\"n\">xh</span> <span class=\"o\">::</span> <span class=\"n\">xhs</span><span class=\"o\">)</span> <span class=\"n\">yhs</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">mergeList</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316669838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671428006
    }
]