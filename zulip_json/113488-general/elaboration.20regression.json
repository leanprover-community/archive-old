[
    {
        "content": "<p>I'm trying to recycle an old demo file but it seems Lean became worse at elaborating.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_dist.comp</span> <span class=\"o\">(</span><span class=\"n\">h.prod_map</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  failed to synthesize type class instance for</span>\n<span class=\"cm\">  α : Type u_1,</span>\n<span class=\"cm\">  _inst_1 : metric_space α,</span>\n<span class=\"cm\">  β : Type u_2,</span>\n<span class=\"cm\">  _inst_2 : metric_space β,</span>\n<span class=\"cm\">  f : α → β,</span>\n<span class=\"cm\">  h : continuous f</span>\n<span class=\"cm\">  ⊢ topological_space (β × β)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>This is using Lean 3.34. 0.  It works perfectly on Lean 3.18.4. Replacing <code>lemma foo</code> by <code>example</code> makes it work.<br>\nAlso, using <code>continuous_dist.comp (h.prod_map h : _)</code> works. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  any idea?</p>",
        "id": 259074343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635242402
    },
    {
        "content": "<p>I think this might be related to the recent changes with the universe levels and Floris' linter.</p>",
        "id": 259075142,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635242872
    },
    {
        "content": "<p>This is how the goal looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">continuous.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">real</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.topological_space.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span> <span class=\"n\">β</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space.to_topological_space.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space.to_topological_space.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space.to_topological_space.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.pseudo_metric_space</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prod.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">has_dist.dist.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pseudo_metric_space.to_has_dist.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.fst.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.snd.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 259075209,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635242904
    },
    {
        "content": "<p>The <code>max u_2 ?l_1</code> is highly suspicious.</p>",
        "id": 259075239,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635242930
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259075943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635243351
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259076400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635243605
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259076495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635243689
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259076501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635243701
    },
    {
        "content": "<p>This part is weird, where the <code>?l_1</code> appears the first time in the trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">topological_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">uniform_space.to_topological_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_22</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">x_43</span> <span class=\"bp\">?</span><span class=\"n\">x_44</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">topological_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"bp\">=?=</span> <span class=\"n\">topological_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_22</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">x_43</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">topological_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_0</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">topological_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_22</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"bp\">?</span><span class=\"n\">x_43</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">x_43</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_44</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.10.172</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_23</span> <span class=\"bp\">?</span><span class=\"n\">u_24</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">x_45</span> <span class=\"bp\">?</span><span class=\"n\">x_46</span> <span class=\"bp\">?</span><span class=\"n\">x_47</span>\n</code></pre></div>",
        "id": 259077035,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635244006
    },
    {
        "content": "<p>There shouldn't be any <code>Pi.uniform_space</code> appearing</p>",
        "id": 259077360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635244206
    },
    {
        "content": "<p>and indeed it doesn't appear in the goal you quoted</p>",
        "id": 259077384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635244222
    },
    {
        "content": "<p>It seems the only difference is there is now a <code>pseudo_metric_space</code> class between <code>metric_space</code> and <code>uniform_space</code></p>",
        "id": 259077631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635244391
    },
    {
        "content": "<p>Hmm... This is weird.<br>\nWhen replacing <code>lemma</code> by <code>example</code> (or equivalently, <code>def</code>), it works, but it makes <code>β</code> have type <code>Type (max u_2 u_3)</code>, which is definitely undesired.</p>",
        "id": 259081116,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1635246692
    },
    {
        "content": "<p>Patrick, the <code>Pi.uniform_space</code> is not what I wanted to show (and of course that type class instance doesn't apply here).  The weird part is that applying the <code>uniform_space.to_topological_space</code> instance creates the <code>?l__fresh.10.172</code> universe metavariable, for no good reason.</p>",
        "id": 259081884,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635247186
    },
    {
        "content": "<p>An easy workaround for the lemma: <code>continuous_dist.comp (h.prod_map h : _)</code></p>",
        "id": 259082506,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635247590
    },
    {
        "content": "<p>As far as workarounds go, following the advice in <a href=\"https://github.com/leanprover-community/mathlib/issues/9954\">#9954</a> we can replace the proof by <code>(h.comp continuous_fst).dist (h.comp continuous_snd)</code></p>",
        "id": 259082641,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1635247700
    },
    {
        "content": "<p>It's nice to see this workaround but it's clearly less natural than the original proof</p>",
        "id": 259082919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635247910
    }
]