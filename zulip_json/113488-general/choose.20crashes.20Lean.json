[
    {
        "content": "<p>The following code crashes Lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>\"Server has stopped with error code 3221225477.\"<br>\n(the error code is consistent)</p>",
        "id": 167556945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559895155
    },
    {
        "content": "<p>3221225477 = 0xC0000005, the access violation error code on Windows. Probably the stack is running out?</p>",
        "id": 167557210,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559895455
    },
    {
        "content": "<p>It crashes for me on Linux too. I think this is the top of the stack trace of the thread that crashed:</p>\n<div class=\"codehilite\"><pre><span></span>#0  0x0000000000431241 in lean::name::imp::display_core(std::ostream&amp;, lean::name::imp*, bool, char const*) ()\n#1  0x0000000000431257 in lean::name::imp::display_core(std::ostream&amp;, lean::name::imp*, bool, char const*) ()\n#2  0x0000000000432295 in lean::operator&lt;&lt;(std::ostream&amp;, lean::name const&amp;) ()\n#3  0x0000000000939bf8 in lean::revert(lean::list&lt;lean::expr&gt; const&amp;, lean::tactic_state const&amp;, bool) ()\n#4  0x000000000093a0d9 in lean::tactic_revert_lst(lean::vm_obj const&amp;, lean::vm_obj const&amp;) ()\n</pre></div>",
        "id": 167563534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559901498
    },
    {
        "content": "<p>Looks like maybe <code>choose</code> is invoking <code>tactic.revert</code> with <code>h.2</code>, and that crashes for some reason while trying to print an error?</p>",
        "id": 167563684,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559901630
    },
    {
        "content": "<p><code>revert</code> has some issues when you misuse it. I fixed that in Lean 3.5.0</p>",
        "id": 167588094,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559922471
    },
    {
        "content": "<p>It's probably being called with something that isn't a local_const</p>",
        "id": 167588172,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559922504
    },
    {
        "content": "<p>In Lean 3.5.0c it doesn't crash and instead returns this:</p>\n<div class=\"codehilite\"><pre><span></span>revert tactic failed, expecting local variable, found &#39;and.right true (Pi (i : nat), (Exists.{1} nat (fun (j : nat), (ne.{1} nat i j)))) h&#39;\nstate:\nh : true ∧ ∀ (i : ℕ), ∃ (j : ℕ), i ≠ j\n⊢ true\n</pre></div>\n\n\n<p><a href=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20tactic.interactive%0A%0Aexample%20(h%20%3A%20true%20%E2%88%A7%20%E2%88%80%20i%20%3A%20%E2%84%95%2C%20%E2%88%83%20j%20%3A%20%E2%84%95%2C%20i%20%E2%89%A0%20j)%20%3A%20true%20%3A%3D%0Aby%20choose%20f%20using%20h.2%0A%0A\" target=\"_blank\" title=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20tactic.interactive%0A%0Aexample%20(h%20%3A%20true%20%E2%88%A7%20%E2%88%80%20i%20%3A%20%E2%84%95%2C%20%E2%88%83%20j%20%3A%20%E2%84%95%2C%20i%20%E2%89%A0%20j)%20%3A%20true%20%3A%3D%0Aby%20choose%20f%20using%20h.2%0A%0A\">web-editor link</a></p>",
        "id": 167588762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1559922850
    },
    {
        "content": "<p>The error message could be better but it's at least clearer than a crash</p>",
        "id": 167589094,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559923092
    },
    {
        "content": "<p>Is this an issue with <code>choose</code> that can be fixed in mathlib so my users can use <code>choose</code> in 3.4.2?</p>",
        "id": 170990012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563286739
    },
    {
        "content": "<p>You can still use <code>choose</code> in normal situations. Do you have a  real use case where there is a problem?</p>",
        "id": 170996150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563290189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> said it crashed her Lean.</p>",
        "id": 171000473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563292842
    },
    {
        "content": "<p>It's happened to me a couple of times; the <code>example</code> obviously not a real use case but the definition essentially is. I can't remember if choose is supposed to work in definitions though (hence the example too). Both of these crash Lean on their own with the same error code as above.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">choose</span> <span class=\"n\">c</span> <span class=\"kn\">using</span> <span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">blah</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">choose</span> <span class=\"n\">c</span> <span class=\"kn\">using</span> <span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 171000590,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1563292913
    },
    {
        "content": "<p>It's bad that Lean crashes, but <code>exists_eq_mul_right_of_dvd h</code> is not at all the kind of statement that <code>choose</code> is meant to consume.</p>",
        "id": 171006105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563296610
    },
    {
        "content": "<p>Ah - I'm pretty new to this; what sort of statement is better suited to <code>choose</code>?</p>",
        "id": 171006360,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1563296784
    },
    {
        "content": "<p>\"choose\" is meant in the strong sense of \"instantly make infinitely many choice\", aka \"use the axiom of choice\".</p>",
        "id": 171006412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563296845
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">blah</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">c</span> <span class=\"n\">h2</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">c</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works for me</p>",
        "id": 171006484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563296893
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">blah</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>avoids the tactic completely.</p>",
        "id": 171006579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563296980
    },
    {
        "content": "<p>Oh, right, Amelia also forgot to name the property</p>",
        "id": 171006627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297003
    },
    {
        "content": "<p>But this stops the crash :D</p>",
        "id": 171006670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563297045
    },
    {
        "content": "<p>Anyway, the idiomatic mathlib way is <code>rcases exists_eq_mul_right_of_dvd h with ⟨c, h2⟩,</code> or, since last week, the gorgeous </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 171006698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297067
    },
    {
        "content": "<p>Aha... that works for me too. Thank you. It's not so easy to notice user error when user error is crashing Lean.<br>\nSurely you can't use <code>rcases</code> in a definition though?</p>",
        "id": 171006813,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1563297168
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 171006857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297213
    },
    {
        "content": "<p>Because of the <code>induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop</code> error</p>",
        "id": 171006966,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1563297295
    },
    {
        "content": "<p>oh I see. Then you could use <code>choose</code> or, more traditionally, <code>classical.some</code> and its friends</p>",
        "id": 171007019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297352
    },
    {
        "content": "<p>We should really have a documentation file about these issues. Just like what Chris wrote about finite sets or well-founded recursion.</p>",
        "id": 171007085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297394
    },
    {
        "content": "<p>It would probably a very good exercise for you to write it.</p>",
        "id": 171007103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297411
    },
    {
        "content": "<p>It would be in mathlib's greatest documentation writing tradition. You prepare a list of examples that you can't do, or at least not without suffering. Then you ask here until you have nice and elegant solutions for all (or you people write a new helper tactic) and then you proudly put all the explanations in the docs folder.</p>",
        "id": 171007208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297516
    },
    {
        "content": "<p>Thanks for the help. I would love to give that a go, yeah!</p>",
        "id": 171007269,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1563297595
    },
    {
        "content": "<p>All files in <a href=\"https://github.com/leanprover-community/mathlib/tree/master/docs/extras\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/master/docs/extras\">https://github.com/leanprover-community/mathlib/tree/master/docs/extras</a> were written using this strategy.</p>",
        "id": 171007402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1563297705
    }
]