[
    {
        "content": "<p>I just stumbled over a situation where I wanted to simp a term like in the following mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span> <span class=\"n\">group_theory.submonoid.basic</span>\n  <span class=\"n\">group_theory.submonoid.operations</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would expect that <code>simp</code> replaces <code>0 - 0</code> with <code>0</code>. However, it seems that the <code>[add_monoid V]</code> instance that is expected by <code>p</code> prevents <code>simp</code> from doing so. It works after replacing <code>simp only</code> by <code>rw</code>. I know that those tactics work somehow differently but I cannot explain this phenomenon. Is this just a situation that should be avoided or solved with <code>rw</code> or is there another trick to make <code>simp</code> work?</p>",
        "id": 292325530,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1659886637
    },
    {
        "content": "<p>If you look at the output of <code>set_option pp.implicit true</code>, you can see there are two places that <code>simp</code> would need to rewrite simultaneously. That's not something it can do without some more help, but <code>rw</code> can do it because it works by generalizing an expression and substituting everywhere simultaneously.</p>\n<p>The way you can help <code>simp</code> out is via congr lemmas. Here's one that says \"yes you can rewrite <code>V</code>, and here's how to construct a new instance\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">congr_p</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">p</span> <span class=\"n\">V'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The downside to this is that it inserts an <code>eq.rec</code> around the <code>add_monoid</code> instance.</p>",
        "id": 292326028,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659887346
    },
    {
        "content": "<p>Thanks for the explanation, the example and also the behavior of rw and simp make a lot more sense now!<br>\nAnd <code>set_option pp.implicit true</code> is also worth keeping in mind.</p>",
        "id": 292330562,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1659893858
    }
]