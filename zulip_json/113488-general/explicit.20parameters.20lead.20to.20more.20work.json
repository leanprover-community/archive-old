[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">implicit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo'</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>        <span class=\"n\">_</span>        <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">implicit</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">explicit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo'</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">⊥</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span>       <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span>       <span class=\"bp\">⊥</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">m₁</span> <span class=\"n\">n</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">m₁</span> <span class=\"n\">n</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m₁</span> <span class=\"n\">using</span> <span class=\"n\">with_bot.rec_bot_coe</span><span class=\"bp\">;</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m₂</span> <span class=\"n\">using</span> <span class=\"n\">with_bot.rec_bot_coe</span><span class=\"bp\">;</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">with_bot.rec_bot_coe</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">with_bot.bot_add</span><span class=\"o\">],</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">with_bot.add_bot</span><span class=\"o\">],</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">with_bot.coe_add</span><span class=\"o\">],</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">explicit</span>\n</code></pre></div>\n<p>Once I made the pattern matching argument explicit, I found I had to deal with far more problems on my own than before. Are there any better solutions?</p>",
        "id": 283215475,
        "sender_full_name": "FR",
        "timestamp": 1653200458
    },
    {
        "content": "<p>Oh, I did it. Just use <code>simp !</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">m₁</span> <span class=\"n\">n</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">!</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283226235,
        "sender_full_name": "FR",
        "timestamp": 1653217073
    },
    {
        "content": "<p>But it unfolds too much. Can I control it?</p>",
        "id": 283227453,
        "sender_full_name": "FR",
        "timestamp": 1653218832
    },
    {
        "content": "<blockquote>\n<p>Once I made the pattern matching argument explicit</p>\n</blockquote>\n<p>What do you mean by that? Your <code>implicit.foo</code> and <code>explicit.foo</code> contain a different number of patterns to match against; there's more difference than just <code>(m n : with_bot ℕ)</code> vs <code>{m n : with_bot ℕ}</code></p>",
        "id": 283229501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653222072
    },
    {
        "content": "<p>I suspect your question is actually \"why does this get harder when I fully-expand the wildcard pattern\", and the answer is something along the lines of \"because now you have to do the same expansion in the proof</p>",
        "id": 283229553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653222146
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">implicit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo'</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">implicit</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">explicit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo'</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">m₁</span> <span class=\"n\">n</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">m₁</span> <span class=\"n\">n</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">explicit</span>\n</code></pre></div>\n<p>But this still fails?</p>",
        "id": 283229836,
        "sender_full_name": "FR",
        "timestamp": 1653222610
    },
    {
        "content": "<p>It seems that simp treats implicit parameters differently than explicit parameters.</p>",
        "id": 283230080,
        "sender_full_name": "FR",
        "timestamp": 1653223031
    },
    {
        "content": "<p>Ah thanks, you're right!</p>",
        "id": 283230742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653223955
    },
    {
        "content": "<p>A slightly shorter mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.monoid</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">implicit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">implicit</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">explicit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo'</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"n\">_</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">m₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">explicit</span>\n</code></pre></div>",
        "id": 283231012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653224399
    },
    {
        "content": "<p>How should I get lean to do the same thing in the case of explicit parameters? <code>simp !</code> can unfold it but this would also unfold other things.</p>",
        "id": 283237512,
        "sender_full_name": "FR",
        "timestamp": 1653233413
    },
    {
        "content": "<p>simp uses reducible transparency for matching.  With reducible transparency, a definition like <code>(0 : with_bot ℕ)</code> is not unfolded to <code>some 0</code> because it is only semireducible.</p>",
        "id": 283237989,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653234127
    },
    {
        "content": "<p>However, there's a big exception.  Implicit arguments get \"upgraded\" to semireducible transparency.</p>",
        "id": 283237993,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653234147
    },
    {
        "content": "<p>In other words, the following works with the implicit version but not the explicit version, because <code>0 = some 0</code> is only defeq with semireducible transparency:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.reducible</span>\n</code></pre></div>",
        "id": 283238001,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653234176
    }
]