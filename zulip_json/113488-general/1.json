[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">--fails</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 169713355,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562337359
    },
    {
        "content": "<p>how strongly is <code>1</code> associated with <code>nat</code>?</p>",
        "id": 169713405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562337369
    },
    {
        "content": "<p><code>change</code> is quite happy to fail if it decides what your input means and then realises that it's nothing to do with what the hypothesis it's supposed to be changing is.</p>",
        "id": 169713430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562337419
    },
    {
        "content": "<p>When I see <code>change</code> fail I sometimes change <code>change X at H</code> to <code>def Z := X</code></p>",
        "id": 169713453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562337439
    },
    {
        "content": "<p>and often the def fails. If the def fails I think change just fails. I don't think change looks at what it's supposed to be changing until it's made the thing it's supposed to be changing it to. That's my impression at least.</p>",
        "id": 169713482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562337480
    },
    {
        "content": "<p>So in the first case I guess <code>change</code> is trying to solve the metavariables ASAP, without looking at <code>H</code>, and so it solves them using nat.</p>",
        "id": 169713557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562337532
    },
    {
        "content": "<p>That is nat defaulting you are seeing. If a numeral doesn't have a particular type after elaboration it defaults to nat</p>",
        "id": 169713727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562337680
    },
    {
        "content": "<p>I think the <code>change</code> expression might be elaborated separately from the goal to cause this behavior</p>",
        "id": 169713728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562337680
    }
]