[
    {
        "content": "<p>There are different ways to write un-applied or partially applied functions that have infix notation:</p>\n<ul>\n<li><code>(λ x, x + c)</code> is the same as <code>(+ c)</code></li>\n<li><code>(λ x y, x + y)</code> is the same as <code>(+)</code></li>\n<li><code>(λ y, c + y)</code> is the same as <code>((+) c)</code></li>\n</ul>\n<p>Same holds for other infix notations: <code>= ≠ * / ≤ &lt; &gt; ≥</code></p>\n<p>So for example for <code>l : list ℕ</code> you can write the expression <code>(l.filter (≠ 1)).foldr (+) 0</code>.</p>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/3935\">#3935</a> I suggested to consistently use the shorter, but more confusing notation.</p>\n<p>So here a poll (vote by reacting) (<strong>warning</strong>: the emote reactions might not be ordered correctly):</p>",
        "id": 207926459,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598333817
    },
    {
        "content": "<p><span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span> we should consistently use <code>(λ x, x + c)</code>;<br>\n<span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span> we should consistently use <code>(+ c)</code>;<br>\n<span aria-label=\"three\" class=\"emoji emoji-0033-20e3\" role=\"img\" title=\"three\">:three:</span> the author should decide which one to use.</p>",
        "id": 207926463,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598333824
    },
    {
        "content": "<p><span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span> we should consistently use <code>(λ x y, x + y)</code>;<br>\n<span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span> we should consistently use <code>(+)</code>;<br>\n<span aria-label=\"three\" class=\"emoji emoji-0033-20e3\" role=\"img\" title=\"three\">:three:</span> the author should decide which one to use.</p>",
        "id": 207926471,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598333845
    },
    {
        "content": "<p><span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span> we should consistently use <code>(λ y, c + y)</code>;<br>\n<span aria-label=\"two\" class=\"emoji emoji-0032-20e3\" role=\"img\" title=\"two\">:two:</span> we should consistently use <code>((+) c)</code>;<br>\n<span aria-label=\"three\" class=\"emoji emoji-0033-20e3\" role=\"img\" title=\"three\">:three:</span> the author should decide which one to use.</p>",
        "id": 207926474,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598333850
    },
    {
        "content": "<p>The third poll is the only one I have a strong opinion on.</p>",
        "id": 207926594,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598334006
    },
    {
        "content": "<p>Remark: \"(λ x, x + c) is the same as (+ c)\" is literally true, in the sense that one is parser notation for the other. For <code>(+)</code> and <code>(+) c</code>, these are partial applications, meaning they are eta-contracted versions of the lambdas, and so some tactics will be able to tell the difference, so they are not exactly substitutable in all contexts.</p>",
        "id": 207929744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598338492
    },
    {
        "content": "<p>I think that having <code>(+ c)</code> and <code>((+) c</code> meaning two different things is <em>extremely</em> confusing. It's not so bad with a commutative operation, but I guess you also want to use this trick with potential non-commutative multiplication. I really don't want to spend a couple of second of thinking about which one is which each time I see this.</p>",
        "id": 207935996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598343949
    },
    {
        "content": "<p>I would reserve its use to functional programming stuff. It falls in the same mental category as <code>(+) &lt;$&gt; f &lt;*&gt; g</code> for me</p>",
        "id": 207937359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598345027
    },
    {
        "content": "<p>But I don't think we should have a particular required style about this either. Let the author decide how to present this for whatever purpose it is put to</p>",
        "id": 207937495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598345108
    },
    {
        "content": "<p>Haskell (which I assume this syntax came from) also allows <code>(c +)</code> to mean <code>\\lam y, c + y</code>. I don't think <code>((+) c)</code> is ever preferred there, except in the few cases where it's mandatory.</p>",
        "id": 207940466,
        "sender_full_name": "Chris Wong",
        "timestamp": 1598347483
    },
    {
        "content": "<p>Of course we would prefer to write that, but due to a limitation of lean's parser you can't write left sections</p>",
        "id": 207940515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347532
    },
    {
        "content": "<p>Yep, understood. I guess the point I was trying to make was that <code>((+) c)</code> might confuse functional programmers as well <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 207940958,
        "sender_full_name": "Chris Wong",
        "timestamp": 1598347898
    },
    {
        "content": "<p>As the clover begins to bloom, we could look forward and copy its section syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`⬝+</span> <span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">+⬝`</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">⬝+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+⬝</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207940959,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598347898
    },
    {
        "content": "<p>I added Gabriel's suggestion as a new option to the poll. <br>\nBut it seems like the preliminary result is to not change our current approach (too much).</p>",
        "id": 207994482,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598376834
    },
    {
        "content": "<p>This suggestion require new notation for each new function, right? That being said, having it for addition and multiplication would already cover a lot of cases.</p>",
        "id": 207999919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598379131
    },
    {
        "content": "<p>Based on the result of this poll, should we be changing the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/comp_mul_left/src\">src#comp_mul_left</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_left_regular/src\">src#is_left_regular</a> to not use the <code>(*)</code> notation?</p>",
        "id": 227292302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614010528
    },
    {
        "content": "<p>The only time the <code>comp_mul</code> come up in my experience (and why I wrote them) was for rewriting of composed <code>foldr</code>s or <code>list.prod</code>s</p>",
        "id": 227292964,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614010760
    }
]