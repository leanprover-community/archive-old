[
    {
        "content": "<p>Here's a demo of a new <code>quote</code> tactic, indended for working with domain-specific languages:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">class</span> <span class=\"n\">has_quote</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">quote_with</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_quote</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">has_quote</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">α</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">quote_with</span> <span class=\"err\">%%</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">eval_expr&#39;</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span><span class=\"o\">),</span>\n  <span class=\"n\">r</span> <span class=\"err\">←</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;conversion failed&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 157967981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549791213
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_reflect</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">ring_expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ring_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ring_expr</span> <span class=\"bp\">→</span> <span class=\"n\">ring_expr</span> <span class=\"bp\">→</span> <span class=\"n\">ring_expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">to_ring_expr</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ring_expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">+</span> <span class=\"err\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ring_expr</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">to_ring_expr</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">to_ring_expr</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">ring_expr</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span>\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_quote</span> <span class=\"n\">ring_expr</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">to_ring_expr</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ring_expr</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">quote</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">E</span>\n\n<span class=\"c1\">-- def E : ring_expr :=</span>\n<span class=\"c1\">-- ring_expr.add (ring_expr.num 2) (ring_expr.num 2)</span>\n</pre></div>",
        "id": 157967982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549791224
    },
    {
        "content": "<p>the idea is that you write a parser function for your target syntax, as a function <code>expr -&gt; option A</code>, and then <code>quote</code> will spit out parsed values of your type</p>",
        "id": 157968085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549791372
    },
    {
        "content": "<p>Do you have a more realistic use case in mind?</p>",
        "id": 157968430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549792091
    },
    {
        "content": "<p>Jesse and Floris could use this for parsing formulas in first order logic into their embedded language</p>",
        "id": 157968498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549792268
    },
    {
        "content": "<p>I'm thinking about using it for writing programs and embedding in an AST without too much notational overhead</p>",
        "id": 157968499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549792303
    },
    {
        "content": "<p>The nice thing is that it's completely non-meta after the parsing stage, just like any other proof producing tactic</p>",
        "id": 157968549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549792336
    },
    {
        "content": "<p>It's probably not that useful for regular maths, but for anything involving deep embeddings or embedded DSLs this is a very important technique</p>",
        "id": 157968658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549792564
    },
    {
        "content": "<p>That kind of looks like the beginning of a compiler, am I close?</p>",
        "id": 157968677,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549792655
    },
    {
        "content": "<p>it's also useful for custom lean compilers ;)</p>",
        "id": 157968984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549793250
    },
    {
        "content": "<p>Who would ever want that? :P</p>",
        "id": 157969513,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549794228
    },
    {
        "content": "<p>Unfortunately it's still pretty limited since the quoted expression has to be a valid expr. It's possible to relax it to pexprs, but the pattern matching for pexpr is not nearly as nice. I also haven't figured out how to support antiquoting or really anything that's not well typed by lean standards</p>",
        "id": 157969985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549795172
    },
    {
        "content": "<p>What kind of expression would you like Lean to accept?</p>",
        "id": 157970047,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549795322
    },
    {
        "content": "<p><code>by quote 2 + AQ e</code> is one thing I'm trying for the <code>ring_expr</code> example, where <code>e : ring_expr</code></p>",
        "id": 157970227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549795664
    },
    {
        "content": "<p>but there are plenty of things that aren't even syntactically correct lean terms that I would like to support. Probably most of this will need to wait for Sebastian's parser work</p>",
        "id": 157970286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549795769
    },
    {
        "content": "<p>When you parse it, you could temporarily add functions <code>quote</code> and <code>AQ</code> of the right type and then restore the environment</p>",
        "id": 157970289,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549795791
    },
    {
        "content": "<p>Yeah, that can't be helped</p>",
        "id": 157970333,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549795812
    },
    {
        "content": "<p>Getting <code>AQ</code> to have the right type is not easy. In this case it should have type <code>ring_expr -&gt; nat</code> but <code>nat</code> isn't mentioned anywhere else</p>",
        "id": 157970422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549795987
    },
    {
        "content": "<p>Plus in cases like formula quotation we want two kinds of AQ, <code>formula -&gt; Prop</code> and <code>term -&gt; A</code> where <code>A</code> is the fictional domain of the FOL formula</p>",
        "id": 157970472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549796073
    }
]