[
    {
        "content": "<p>Is there an existing tactic that runs a tactic, then restores the original tactic_state if it fails?</p>",
        "id": 135090187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538557425
    },
    {
        "content": "<p>try?</p>",
        "id": 135090200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538557442
    },
    {
        "content": "<p>(I've run into a problem where failed tactics are having unwanted side effects, e.g. unifying metavariables.)</p>",
        "id": 135090235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538557448
    },
    {
        "content": "<p>So you write <code>try tac</code>, <code>tac</code> unifies variables and then fails and the unification persists?</p>",
        "id": 135091267,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538558668
    },
    {
        "content": "<p><code>try</code> definitely restores the original tactic state after failure, so it's possible you've stumbled upon one of lean's less functional sides</p>",
        "id": 135091455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538558914
    },
    {
        "content": "<p>Hmm, it seems I was wrong, as sticking such a tactic into the place I thought would fix things, hasn't fixed things. Maybe more later, sorry for the noise!</p>",
        "id": 135091563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538559082
    }
]