[
    {
        "content": "<p>Is this a bug in <code>abel</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.abel</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- goal `v + (0 + (-1) • a • w) = v + (-1) • a • w`</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 266645648,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641176232
    },
    {
        "content": "<p>Simplified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span> <span class=\"c1\">-- \"abel failed to simplify\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266648574,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641180961
    },
    {
        "content": "<p>Further simplified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.abel</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">abel1</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 266656872,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641193912
    },
    {
        "content": "<p>The error message indicates that the problem is that the LHS, RHS normal forms under <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.abel.eval\">docs#tactic.abel.eval</a> are not the same: respectively</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  tactic.abel.termg 1 w (tactic.abel.termg 1 0 0) : V\n  tactic.abel.termg 1 w 0 : V\n</code></pre></div>",
        "id": 266656934,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641193970
    },
    {
        "content": "<p>I think the answer to </p>\n<blockquote>\n<p>Is this a bug in <code>abel</code>?</p>\n</blockquote>\n<p>is definitely yes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 266657006,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641194065
    },
    {
        "content": "<p>Feel free to open an issue, I'll find time to look into it</p>",
        "id": 266657014,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641194088
    },
    {
        "content": "<p>Or cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you have ideas</p>",
        "id": 266657025,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1641194106
    },
    {
        "content": "<p>It looks like <code>0</code> has been interpreted as an atom there. What does it look like as <code>pp.all</code>?</p>",
        "id": 266657096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641194185
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_def_eq</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">expressions</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"o\">(</span><span class=\"n\">remark</span><span class=\"o\">:</span> <span class=\"n\">is_def_eq</span> <span class=\"n\">tactic</span> <span class=\"n\">does</span> <span class=\"n\">modify</span> <span class=\"n\">the</span> <span class=\"n\">metavariable</span> <span class=\"n\">assignment</span><span class=\"o\">)</span>\n  <span class=\"bp\">@</span><span class=\"n\">tactic.abel.termg.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tactic.abel.termg.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))))</span>\n  <span class=\"o\">:</span> <span class=\"n\">V</span>\n<span class=\"n\">and</span>\n  <span class=\"bp\">@</span><span class=\"n\">tactic.abel.termg.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))</span>\n  <span class=\"o\">:</span> <span class=\"n\">V</span>\n</code></pre></div>",
        "id": 266657146,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641194258
    },
    {
        "content": "<p>Does it work if you use a concrete universe?</p>",
        "id": 266657241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641194349
    },
    {
        "content": "<p>No (switched from Type* to Type)</p>",
        "id": 266657264,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641194372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/.60abel.60.20not.20rewriting.20with.20.60sub_zero.60/near/266657014\">said</a>:</p>\n<blockquote>\n<p>Feel free to open an issue, I'll find time to look into it</p>\n</blockquote>\n<p>Thanks! <a href=\"https://github.com/leanprover-community/mathlib/pull/11200\">#11200</a></p>",
        "id": 266657367,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641194490
    },
    {
        "content": "<p>Oh! <code>abel</code> doesn't support numeric literals at all</p>",
        "id": 266657515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641194647
    },
    {
        "content": "<p>I suppose there is no relevant numeric literal other than 0, in an add_comm_group.</p>",
        "id": 266657641,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641194783
    },
    {
        "content": "<p>Well, other numeric literals should probably evaluate to <code>smul(g) n 1</code></p>",
        "id": 266657656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641194816
    },
    {
        "content": "<p>What is the 1?</p>",
        "id": 266657672,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641194843
    },
    {
        "content": "<p>Dunno, depends on the type</p>",
        "id": 266657699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641194872
    },
    {
        "content": "<p>but if <code>3</code> typechecks then presumably <code>1</code> does too</p>",
        "id": 266657746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641194888
    },
    {
        "content": "<p>but there are a bunch of cases there and maybe it's best just to ignore it</p>",
        "id": 266657763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641194920
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11201\">#11201</a></p>",
        "id": 266658048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641195303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If I am trying out your code correctly, the following example still fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">abel1</span>\n</code></pre></div>",
        "id": 266658543,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641195940
    },
    {
        "content": "<p>That looks like an independent bug :) <code>n • a = n • a</code> fails too</p>",
        "id": 266658720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641196113
    },
    {
        "content": "<p>In some sense this is expected, <code>abel</code> wants <code>n</code> to be a numeral, but it should have some kind of fallback to treat <code>n • a</code> as an atom</p>",
        "id": 266658872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641196315
    },
    {
        "content": "<p>also fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/11201\">#11201</a></p>",
        "id": 266659174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641196622
    },
    {
        "content": "<p>I see.  In fact the example I initially asked about seems to fixed by (the first version of <a href=\"https://github.com/leanprover-community/mathlib/pull/11201\">#11201</a>, before the additional fix):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>so it's just that it can't deal with <code>R = ℤ</code> because <code>ℤ</code>-multiplication is exploited in the <code>abel</code> code.</p>",
        "id": 266659208,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641196653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60abel.60.20not.20rewriting.20with.20.60sub_zero.60/near/266659174\">said</a>:</p>\n<blockquote>\n<p>also fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/11201\">#11201</a></p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 266659225,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641196679
    },
    {
        "content": "<p>Conceivably we could have the analogue of <code>ring_exp</code> here, where the scalar multiplies are handled using <code>ring</code> instead of <code>norm_num</code></p>",
        "id": 266659301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641196752
    },
    {
        "content": "<p>Do you mean things like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.abel</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and I were just discussing this earlier today.</p>",
        "id": 266659478,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641196892
    },
    {
        "content": "<p>Yes. I guess that would be a <code>module</code> tactic</p>",
        "id": 266659529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641196926
    },
    {
        "content": "<p>Couple of other tests for such a tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 266659893,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641197286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 266659908,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641197312
    }
]