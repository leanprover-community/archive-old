[
    {
        "content": "<p>Do we want to use unicode for <code>¬∃</code> like we do for <code>∉</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `¬` on the right to make nested binders behave</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∄`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Exists</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span><span class=\"n\">r</span>\n\n<span class=\"c1\">-- notation means the obvious thing</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∄</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.rfl</span>\n</code></pre></div>",
        "id": 280754686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651350811
    },
    {
        "content": "<p>Side question: could we do this for <code>ne</code>, rather than having it be a separate definition? I know <code>ne</code> lets us have some dot notation, but I wonder whether we can improve the rules for dot notation to be able to have specifically <code>ne</code> theorems only accessible from a <code>ne</code>. For example, perhaps if <code>h : ¬ a = b</code> then <code>h.foo</code> first tries <code>not.foo</code>, and if that fails, tries <code>not.eq.foo</code>, using the name of the first explicit argument's type.</p>",
        "id": 280754954,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651351218
    },
    {
        "content": "<p>The not-exists notation seems nice, though with the font I have it's very very ugly:</p>\n<p><a href=\"/user_uploads/3121/XXT6KqcHdlx2IN3fQfglRSKs/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XXT6KqcHdlx2IN3fQfglRSKs/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XXT6KqcHdlx2IN3fQfglRSKs/image.png\"></a></div><p>In comparison:</p>\n<p><a href=\"/user_uploads/3121/w-5mPPFfRSrf7B3vBnrkfeT_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/w-5mPPFfRSrf7B3vBnrkfeT_/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/w-5mPPFfRSrf7B3vBnrkfeT_/image.png\"></a></div>",
        "id": 280755030,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651351327
    },
    {
        "content": "<p>Yeah, I also had font concerns, it's a lot easier to misread \"not exists\" for \"exists\" with this notation</p>",
        "id": 280755042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651351379
    },
    {
        "content": "<p>On a tangent relating to exist notation, here's a version of <code>exists_unique</code> that means the right thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∃!'`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exists_unique</span> <span class=\"o\">(</span><span class=\"n\">function.has_uncurry.uncurry</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but unfortunately requires a bit of manual unfolding</p>",
        "id": 280755067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651351429
    },
    {
        "content": "<p>I've never seen the symbol <code>∄</code> before. Of course there are many symbols we use in lean that we don't in maths. But in this case I don't see how it aids readability to do this really</p>",
        "id": 280755255,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651351690
    },
    {
        "content": "<p>Never seen it in unicode or in maths?</p>",
        "id": 280755413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651352026
    },
    {
        "content": "<p>In maths I don't think.</p>",
        "id": 280756177,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651352982
    },
    {
        "content": "<p>I'm opposed to this, because my first instinct when seeing <code>¬ ∃</code> is to get rid of it with <code>push_neg</code>!</p>",
        "id": 287794047,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656462607
    },
    {
        "content": "<p>No analogous instinct for <code>∉</code></p>",
        "id": 287794064,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656462624
    },
    {
        "content": "<p>It's common Isabelle notation (where it's an abbreviation). For instance in the statement of this theorem:</p>\n<p><code>theorem real_non_denum: \"∄f :: nat ⇒ real. surj f\"</code></p>\n<p><a href=\"http://www.cse.unsw.edu.au/~kleing/top100/#22\">http://www.cse.unsw.edu.au/~kleing/top100/#22</a></p>",
        "id": 287896010,
        "sender_full_name": "Asta Halkjær From",
        "timestamp": 1656526585
    },
    {
        "content": "<p>Oh yeah, that is quite a natural example of a non-existence theorem</p>",
        "id": 287901123,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656528867
    }
]