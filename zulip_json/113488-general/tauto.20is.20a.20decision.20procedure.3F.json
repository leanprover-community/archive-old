[
    {
        "content": "<p>In Coq, the <code>tauto</code> tactic implements a decision procedure, <a href=\"https://coq.inria.fr/refman/proofs/automatic-tactics/logic.html\">https://coq.inria.fr/refman/proofs/automatic-tactics/logic.html</a>. What about the <code>tauto</code> of Lean? The <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tautology\">https://leanprover-community.github.io/mathlib_docs/tactics.html#tautology</a> is not clear. I was not able to prove some theorems of <a href=\"http://www.iltp.de/\">http://www.iltp.de/</a> using auto as expected if tauto is a decision procedure.</p>",
        "id": 233222469,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617653277
    },
    {
        "content": "<p><code>dec_trivial</code> may be more like what Coq's <code>tauto</code> does</p>",
        "id": 233222714,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617653384
    },
    {
        "content": "<p>It doesn't solve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">t1</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p4</span> <span class=\"n\">p5</span> <span class=\"n\">p6</span> <span class=\"n\">p7</span> <span class=\"n\">p8</span> <span class=\"n\">p9</span> <span class=\"n\">p10</span> <span class=\"n\">p11</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span> <span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p4</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p5</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p6</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p7</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p8</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p9</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p10</span> <span class=\"bp\">∧</span> <span class=\"n\">p11</span> <span class=\"o\">))))))))))</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p3</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p4</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p5</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p6</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span> <span class=\"n\">p7</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p8</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p9</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p10</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p11</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">))))))))))))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p4</span> <span class=\"n\">p5</span> <span class=\"n\">p6</span> <span class=\"n\">p7</span> <span class=\"n\">p8</span> <span class=\"n\">p9</span> <span class=\"n\">p10</span> <span class=\"n\">p11</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">t1</span>\n</code></pre></div>\n<p>If I replace variables with constants, it still doesn't solve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">t1</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p4</span> <span class=\"n\">p5</span> <span class=\"n\">p6</span> <span class=\"n\">p7</span> <span class=\"n\">p8</span> <span class=\"n\">p9</span> <span class=\"n\">p10</span> <span class=\"n\">p11</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span> <span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p4</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p5</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p6</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p7</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p8</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p9</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p10</span> <span class=\"bp\">∧</span> <span class=\"n\">p11</span> <span class=\"o\">))))))))))</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p3</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p4</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p5</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p6</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span> <span class=\"n\">p7</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p8</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p9</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p10</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p11</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">))))))))))))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">t1</span>\n</code></pre></div>",
        "id": 233223678,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617653967
    },
    {
        "content": "<p>But tauto solves if I introduce the propositions as variables and h as axiom:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">t1</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p4</span> <span class=\"n\">p5</span> <span class=\"n\">p6</span> <span class=\"n\">p7</span> <span class=\"n\">p8</span> <span class=\"n\">p9</span> <span class=\"n\">p10</span> <span class=\"n\">p11</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span> <span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p4</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p5</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p6</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p7</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p8</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p9</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p10</span> <span class=\"bp\">∧</span> <span class=\"n\">p11</span> <span class=\"o\">))))))))))</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p3</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p4</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p5</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p6</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span> <span class=\"n\">p7</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p8</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p9</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p10</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p11</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">))))))))))))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">t1</span>\n</code></pre></div>",
        "id": 233223808,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617654035
    },
    {
        "content": "<p>dec_trivial does not solve the last one.</p>",
        "id": 233223817,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617654037
    },
    {
        "content": "<p>Only finish solves  when the propositions and h are passed as arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p4</span> <span class=\"n\">p5</span> <span class=\"n\">p6</span> <span class=\"n\">p7</span> <span class=\"n\">p8</span> <span class=\"n\">p9</span> <span class=\"n\">p10</span> <span class=\"n\">p11</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span> <span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p3</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p4</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p5</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p6</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p7</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p8</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p9</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">p10</span> <span class=\"bp\">∧</span> <span class=\"n\">p11</span> <span class=\"o\">))))))))))</span> <span class=\"bp\">∨</span>\n             <span class=\"o\">((</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p3</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p4</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p5</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p6</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n             <span class=\"o\">((</span> <span class=\"n\">p7</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p8</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p9</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span> <span class=\"n\">p10</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p11</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">))))))))))))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233224023,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617654167
    },
    {
        "content": "<p>tauto is not a decision procedure, although I think it should be</p>",
        "id": 233224418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617654378
    },
    {
        "content": "<p>The docstring of <code>finish</code> says:</p>\n<blockquote>\n<p><code>finish</code> is complete for propositional logic.</p>\n</blockquote>\n<p>So that may be the decision procedure you're looking for.</p>",
        "id": 233224421,
        "sender_full_name": "Greg Price",
        "timestamp": 1617654380
    },
    {
        "content": "<p>Here's a shortened version of the same example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span><span class=\"n\">p1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">finish</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span><span class=\"n\">p1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tauto</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 233225059,
        "sender_full_name": "Greg Price",
        "timestamp": 1617654728
    },
    {
        "content": "<p>finish uses <code>by_contradiction</code>. This is an Intuitionistic theorem.</p>",
        "id": 233226216,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617655284
    },
    {
        "content": "<p><code>tauto</code> is not a complete intuitionistic logic prover</p>",
        "id": 233227451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617655948
    },
    {
        "content": "<p><code>ifinish</code> claimed to be but wasn't so it was removed</p>",
        "id": 233227496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617655968
    },
    {
        "content": "<p>thanks, Mario, so I assume there is a motivation for having such a decision procedure available, right?</p>",
        "id": 233227605,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617656042
    },
    {
        "content": "<p>Yes, but someone has to write it</p>",
        "id": 233227648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617656053
    },
    {
        "content": "<p>But very few people around here care about intuitionistic logic so it's not a high priority</p>",
        "id": 233227714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617656092
    },
    {
        "content": "<p><code>tauto</code> is neither a decision procedure nor intuitionistic. I've been distracted by real life, but before that I was planning to propose removing <code>tauto</code> and replacing it with <code>tauto!</code>, which I think is complete for classical logic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 233228743,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1617656507
    },
    {
        "content": "<p>Alternatively, someone could fix whatever is leaking classical logic into <code>tauto</code>, but that will take someone who cares!</p>",
        "id": 233228976,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1617656551
    },
    {
        "content": "<p>Say hello to <code>itauto</code>: <a href=\"https://github.com/leanprover-community/mathlib/issues/7057\">#7057</a></p>",
        "id": 233269772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617688262
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span>\n<span class=\"k\">#print</span> <span class=\"n\">T</span>\n<span class=\"c1\">-- theorem T : ∀ (p : Prop), ¬(p ↔ ¬p) :=</span>\n<span class=\"c1\">-- λ (p : Prop) (h0 : p ↔ ¬p), h0.mp (h0.mpr (λ (h1 : p), h0.mp h1 h1)) (h0.mpr (λ (h1 : p), h0.mp h1 h1))</span>\n</code></pre></div>",
        "id": 233269982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617688499
    },
    {
        "content": "<p>Can you prove that it never uses classical axioms?</p>",
        "id": 233278233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617694714
    },
    {
        "content": "<p>Yeah, that's not too hard. It only uses <code>exfalso</code> (the tactic, although it could just be <code>apply false.rec</code>), <code>triv</code> (the tactic, but this one really is just <code>apply trivial</code>), <code>intro</code>, <code>and.left/right/intro</code>,<code>or.inl/inr/elim</code>, <code>iff.mp/mpr/intro</code>, and application (modus ponens)</p>",
        "id": 233367792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617734266
    },
    {
        "content": "<p>So I think it is actually a \"no axioms\" prover</p>",
        "id": 233367911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617734299
    },
    {
        "content": "<p>I was thinking about adding support for <code>p = q</code> by treating it like <code>p &lt;-&gt; q</code>, but this will require using <code>propext</code> sometimes</p>",
        "id": 233368053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617734358
    },
    {
        "content": "<p>Hi Mario, in <a href=\"http://www.iltp.de/formulae.html\">http://www.iltp.de/formulae.html</a>, one of the problems is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span><span class=\"c1\">--------------------------------------------------------------------------</span>\n<span class=\"bp\">%</span> <span class=\"n\">File</span>     <span class=\"o\">:</span> <span class=\"n\">SYJ203</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">006</span> <span class=\"o\">:</span> <span class=\"n\">ILTP</span> <span class=\"n\">v1.1.2</span>\n<span class=\"bp\">%</span> <span class=\"n\">Domain</span>   <span class=\"o\">:</span> <span class=\"n\">Intuitionistic</span> <span class=\"n\">Syntactic</span>\n<span class=\"bp\">%</span> <span class=\"n\">Problem</span>  <span class=\"o\">:</span> <span class=\"n\">Formulae</span> <span class=\"n\">requiring</span> <span class=\"n\">many</span> <span class=\"n\">contractions</span>\n<span class=\"bp\">%</span> <span class=\"n\">Version</span>  <span class=\"o\">:</span> <span class=\"n\">Especial.</span>\n<span class=\"bp\">%</span>            <span class=\"n\">Problem</span> <span class=\"n\">formulation</span> <span class=\"o\">:</span> <span class=\"n\">Intuit.</span> <span class=\"n\">Valid</span>  <span class=\"n\">Size</span> <span class=\"mi\">6</span>\n<span class=\"bp\">%</span> <span class=\"n\">English</span>  <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"bp\">&amp;&amp;</span><span class=\"n\">_</span><span class=\"o\">{</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">..</span><span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">||</span><span class=\"n\">_</span><span class=\"o\">{</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">..</span><span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span><span class=\"n\">f</span><span class=\"o\">)))</span><span class=\"bp\">=&gt;</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span><span class=\"n\">f</span>\n\n<span class=\"bp\">%</span> <span class=\"n\">Refs</span>     <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Dyc97</span><span class=\"o\">]</span> <span class=\"n\">Roy</span> <span class=\"n\">Dyckhoff.</span> <span class=\"n\">Some</span> <span class=\"n\">benchmark</span> <span class=\"n\">formulas</span> <span class=\"n\">for</span>\n<span class=\"bp\">%</span>                    <span class=\"n\">intuitionistic</span> <span class=\"n\">propositional</span> <span class=\"n\">logic.</span> <span class=\"n\">At</span>\n<span class=\"bp\">%</span>                    <span class=\"n\">http</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">www.dcs.st</span><span class=\"bp\">-</span><span class=\"n\">and.ac.uk</span><span class=\"bp\">/~</span><span class=\"n\">rd</span><span class=\"bp\">/</span><span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">marks.html</span>\n<span class=\"bp\">%</span>          <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Fr88</span><span class=\"o\">]</span>  <span class=\"n\">T.</span> <span class=\"n\">Franzen</span><span class=\"o\">,</span> <span class=\"n\">Algorithmic</span> <span class=\"n\">Aspects</span> <span class=\"n\">of</span> <span class=\"n\">intuitionistic</span>\n<span class=\"bp\">%</span>                    <span class=\"n\">propositional</span> <span class=\"n\">logic</span><span class=\"o\">,</span> <span class=\"n\">SICS</span> <span class=\"n\">Research</span> <span class=\"n\">Report</span> <span class=\"n\">R87010B</span><span class=\"o\">,</span>\n<span class=\"bp\">%</span>                    <span class=\"mi\">1988</span><span class=\"bp\">.</span>\n<span class=\"bp\">%</span>          <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Fr89</span><span class=\"o\">]</span>  <span class=\"n\">T.</span> <span class=\"n\">Franzen</span><span class=\"o\">,</span> <span class=\"n\">Algorithmic</span> <span class=\"n\">Aspects</span> <span class=\"n\">of</span> <span class=\"n\">intuitionistic</span>\n<span class=\"bp\">%</span>                    <span class=\"n\">propositional</span> <span class=\"n\">logic</span> <span class=\"n\">II</span><span class=\"o\">,</span> <span class=\"n\">SICS</span> <span class=\"n\">Research</span> <span class=\"n\">Report</span>\n<span class=\"bp\">%</span>                    <span class=\"n\">R</span><span class=\"bp\">-</span><span class=\"mi\">89</span><span class=\"bp\">/</span><span class=\"mi\">89006</span><span class=\"o\">,</span> <span class=\"mi\">1989</span><span class=\"bp\">.</span>\n<span class=\"bp\">%</span> <span class=\"n\">Source</span>   <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Dyc97</span><span class=\"o\">]</span>\n<span class=\"bp\">%</span> <span class=\"n\">Names</span>    <span class=\"o\">:</span> <span class=\"n\">con_p6</span> <span class=\"o\">:</span> <span class=\"n\">Dyckhoff's</span> <span class=\"n\">benchmark</span> <span class=\"n\">formulas</span> <span class=\"o\">(</span><span class=\"mi\">1997</span><span class=\"o\">)</span>\n<span class=\"bp\">%</span>\n<span class=\"bp\">%</span> <span class=\"n\">Status</span> <span class=\"o\">(</span><span class=\"n\">intuit.</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Theorem</span>\n<span class=\"bp\">%</span> <span class=\"n\">Rating</span> <span class=\"o\">(</span><span class=\"n\">intuit.</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">v1.0.0</span>\n<span class=\"bp\">%</span>\n\n<span class=\"bp\">%</span> <span class=\"n\">Comments</span> <span class=\"o\">:</span> <span class=\"s2\">\"proof in LJ needs n contractions\"</span> <span class=\"o\">[</span><span class=\"n\">Dyc97</span><span class=\"o\">]</span>\n<span class=\"bp\">%</span><span class=\"c1\">--------------------------------------------------------------------------</span>\n<span class=\"n\">fof</span><span class=\"o\">(</span><span class=\"n\">axiom1</span><span class=\"o\">,</span><span class=\"kd\">axiom</span><span class=\"o\">,(</span>\n<span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">p1</span> <span class=\"bp\">&amp;</span> <span class=\"o\">(</span> <span class=\"n\">p2</span> <span class=\"bp\">&amp;</span> <span class=\"o\">(</span> <span class=\"n\">p3</span> <span class=\"bp\">&amp;</span> <span class=\"o\">(</span> <span class=\"n\">p4</span> <span class=\"bp\">&amp;</span> <span class=\"o\">(</span> <span class=\"n\">p5</span> <span class=\"bp\">&amp;</span> <span class=\"n\">p6</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">p2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">p3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">p4</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">p5</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">p6</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">))</span><span class=\"bp\">.</span>\n\n<span class=\"n\">fof</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">,</span><span class=\"n\">conjecture</span><span class=\"o\">,(</span>\n<span class=\"n\">f</span>\n<span class=\"o\">))</span><span class=\"bp\">.</span>\n\n<span class=\"bp\">%</span><span class=\"c1\">--------------------------------------------------------------------------</span>\n</code></pre></div>\n<p>Converted to Lean the new itauto proved it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SYJ203_1_006</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p4</span> <span class=\"n\">p5</span> <span class=\"n\">p6</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((((</span><span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p3</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p4</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p5</span> <span class=\"bp\">∧</span> <span class=\"n\">p6</span><span class=\"o\">)))))</span> <span class=\"bp\">∨</span>\n   <span class=\"o\">((</span><span class=\"n\">p1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">p2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">p3</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">p4</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"n\">p5</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p6</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">)))))))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">itauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/7057\">https://github.com/leanprover-community/mathlib/pull/7057</a> I asked how to use your code but it seems that I made a workaround. I manually modified the <code>src/tactic/basic.lean</code> and added the <code>src/tactic/itauto.lean</code>. I don't know yet how to compile the files to produce the <code>olean</code> files for them. But restarting the lean process, I was able to prove the theorem above.</p>\n<p>But I am getting warnings in the import tactic. See <a href=\"/user_uploads/3121/IJF2buJuBk72y1-uRpJ496Iq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/IJF2buJuBk72y1-uRpJ496Iq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/IJF2buJuBk72y1-uRpJ496Iq/image.png\"></a></div>",
        "id": 233833276,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1617979523
    }
]