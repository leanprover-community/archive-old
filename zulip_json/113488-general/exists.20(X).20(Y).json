[
    {
        "content": "<p><code>topological_space.is_topological_basis</code> has, as part of its definition, <code>∃ (t₃ : set α) (H : t₃ ∈ s), x ∈ t₃ ∧ ...</code>, that is, \"there exists a set with some property such that...\"</p>",
        "id": 126709974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579674
    },
    {
        "content": "<p>So I've just sat down to write some trivial thing and it's ended up like this:</p>",
        "id": 126709984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579693
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">basis_nhds</span> <span class=\"o\">(</span><span class=\"n\">HB</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_topological_basis</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">basis_nhds_has_so_called_sup</span> <span class=\"o\">(</span><span class=\"n\">HB</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_topological_basis</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_sup</span> <span class=\"o\">(</span><span class=\"n\">basis_nhds</span> <span class=\"n\">HB</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Us</span> <span class=\"n\">Vs</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">HB</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">Vs</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">Vs</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">Vs</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n      <span class=\"k\">with</span> <span class=\"n\">W</span> <span class=\"n\">HW</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"n\">HW</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">HB</span> <span class=\"n\">HW</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">HW</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">HB</span><span class=\"bp\">⟩⟩</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 126709996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579708
    },
    {
        "content": "<p>[this is all your fault <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> ]</p>",
        "id": 126710000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579722
    },
    {
        "content": "<p>I want to define a function \"sup\", so I need some classical stuff to pull out witnesses for the exists</p>",
        "id": 126710018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579752
    },
    {
        "content": "<p>and I have to run it twice because it's \"exists this, such that exists that, such that...\"</p>",
        "id": 126710067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579773
    },
    {
        "content": "<p>Based on the \"it's trivial so write a one-liner in term mode\" principle I'd ideally like to write a one-liner in term mode, but writing <code>classical.indefinite_description</code> twice fills up most of the line already :-/</p>",
        "id": 126710139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579864
    },
    {
        "content": "<p>Is there a trick I'm missing?</p>",
        "id": 126710140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526579869
    },
    {
        "content": "<p>This only saves one of your lines, but for <code>∃ (H : p), q</code> where <code>p</code> is a <code>Prop</code>, check out <code>Exists.fst</code> and <code>Exists.snd</code>.<br>\nYou can eliminate the second line and change the third to <code>exact ⟨W,⟨HW.snd.1,HW.fst⟩⟩</code></p>",
        "id": 126717885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526590314
    },
    {
        "content": "<p>This little detail about how <code>∃ t₃∈s, ...</code> means <code>∃ t₃, ∃ H : (t₃∈s), ...</code> is a bit annoying in this case, but using <code>.fst</code> and <code>.snd</code> you can pretty much pretend it actually means <code>∃ t₃, t₃∈s ∧ ...</code></p>",
        "id": 126718073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526590531
    },
    {
        "content": "<p>Here's a mathlib-free version of what I'm moaning about:</p>",
        "id": 126719052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526591836
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">H3</span><span class=\"o\">,</span><span class=\"n\">H4</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126719053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526591841
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">H2</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span><span class=\"n\">H2</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126719176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526592071
    },
    {
        "content": "<p>Aah I see <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  -- thanks for these tips.</p>",
        "id": 126719179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526592077
    },
    {
        "content": "<p>I hadn't really internalised why there were two exists, or the trick with \"exists proof\".</p>",
        "id": 126719190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526592102
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">H2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"n\">r</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">H2</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span><span class=\"n\">H2</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126719195,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526592120
    },
    {
        "content": "<p>let cases := classical.indefinite_description _ :-/</p>",
        "id": 126719240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526592150
    },
    {
        "content": "<p>I would prefer to do the proof in two stages, first showing it's directed and then extracting the witness</p>\n<div class=\"codehilite\"><pre><span></span>section\nvariables {X : Type u} [topological_space X] {B : set (set X)}\nvariables (HB : topological_space.is_topological_basis B) (x : X)\ninclude HB\n\ndefinition basis_nhds := {U : set X // x ∈ U ∧ U ∈ B}\n\ntheorem basis_nhds_directed (U V : basis_nhds HB x) :\n  ∃ W : basis_nhds HB x, W.1 ⊆ U.1 ∧ W.1 ⊆ V.1 :=\nlet ⟨W, h₁, h₂, h₃⟩ := HB.1 _ U.2.2 _ V.2.2 _ ⟨U.2.1, V.2.1⟩ in\n⟨⟨W, h₂, h₁⟩, set.subset_inter_iff.1 h₃⟩\n\nnoncomputable instance basis_nhds_has_so_called_sup :\n  lattice.has_sup (basis_nhds HB x) :=\n{ sup := λ Us Vs, classical.some (basis_nhds_directed HB x Us Vs) }\nend\n</pre></div>\n\n\n<p>You don't need <code>indefinite_description</code> here since you don't need the proof part for the definition</p>",
        "id": 126722300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526597554
    },
    {
        "content": "<p>Of course I need it the moment I want to prove <code>le_sup_left</code>, but I got distracted by all the function.comp shenannigans in the other thread and never got to this bit :-/</p>",
        "id": 126722619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598115
    },
    {
        "content": "<p>This is a much better approach though -- my initial attempt ran into problems when I tried proving <code>le_sup_left</code> because my definition used tactics so wouldn't unfold definitionally when I wanted it to. This is a much better idea.</p>",
        "id": 126722676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598233
    },
    {
        "content": "<p>So many tricks still to learn!</p>",
        "id": 126722729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598298
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>section\nvariables {X : Type u} [topological_space X] {B : set (set X)}\nvariables (HB : topological_space.is_topological_basis B) (x : X)\ninclude HB\n\ndefinition basis_nhds := {U : set X // x ∈ U ∧ U ∈ B}\n\ninstance : partial_order (basis_nhds HB x) :=\n{ le := λ u v, v.1 ⊆ u.1,\n  le_refl := λ u, set.subset.refl u.1,\n  le_trans := λ u v w uv vw, set.subset.trans vw uv,\n  le_antisymm := λ u v vu uv, subtype.eq $ set.subset.antisymm uv vu }\n\ntheorem basis_nhds_directed (U V : basis_nhds HB x) :\n  ∃ W : basis_nhds HB x, U ≤ W ∧ V ≤ W :=\nlet ⟨W, h₁, h₂, h₃⟩ := HB.1 _ U.2.2 _ V.2.2 _ ⟨U.2.1, V.2.1⟩ in\n⟨⟨W, h₂, h₁⟩, set.subset_inter_iff.1 h₃⟩\n\nnoncomputable instance basis_nhds_has_so_called_sup :\n  lattice.has_sup (basis_nhds HB x) :=\n{ sup := λ Us Vs, classical.some (basis_nhds_directed HB x Us Vs) }\n\ntheorem sup_le_left (u v : basis_nhds HB x) : u ≤ u ⊔ v :=\n(classical.some_spec (basis_nhds_directed HB x u v)).1\n\ntheorem sup_le_right (u v : basis_nhds HB x) : v ≤ u ⊔ v :=\n(classical.some_spec (basis_nhds_directed HB x u v)).2\n\nend\n</pre></div>",
        "id": 126722943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526598696
    },
    {
        "content": "<p>Indeed</p>",
        "id": 126722994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598763
    },
    {
        "content": "<p>You missed a trick with le_antisymm though</p>",
        "id": 126723001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598792
    },
    {
        "content": "<p>Oh actually maybe you didn't</p>",
        "id": 126723005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598815
    },
    {
        "content": "<p>I guess you can throw a <code>function.swap</code> in there if you want to be \"point-free\"</p>",
        "id": 126723006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526598822
    },
    {
        "content": "<p>Because the order is the other way</p>",
        "id": 126723007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598830
    },
    {
        "content": "<p>but also that circ madness is limited in usefulness since it's nondependent</p>",
        "id": 126723050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526598865
    },
    {
        "content": "<p>so for example it wouldn't work in the definition of <code>sup</code></p>",
        "id": 126723053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526598880
    },
    {
        "content": "<p>You mean the HB and x screw it up?</p>",
        "id": 126723104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526598965
    },
    {
        "content": "<p>no, the u and v do - the type of <code>basis_nhds_directed HB x u v</code> depends on them</p>",
        "id": 126723112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526599008
    },
    {
        "content": "<p>if it worked, it would look something like <code>((∘) ∘ (∘)) classical.some (basis_nhds_directed HB x)</code></p>",
        "id": 126723122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526599049
    },
    {
        "content": "<p>So now all I need is for that PR to be accepted <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 126723126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526599063
    },
    {
        "content": "<p>There is a <code>dcomp</code> function which is dependent, but I don't think it has nice notation</p>",
        "id": 126723127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526599071
    },
    {
        "content": "<p>Unfortunately it looks like it might still need some work by someone who is in the middle of exams...</p>",
        "id": 126723172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526599127
    },
    {
        "content": "<p>hm, lean doesn't like <code>((∘') ∘' (∘'))</code></p>",
        "id": 126723187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526599178
    },
    {
        "content": "<p>You're being sucked into the circ madness...</p>",
        "id": 126723239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526599227
    },
    {
        "content": "<p>So thanks for writing that proof for me Mario. I was completely on top of everything after Reid's comment about this trick for Exists so I knew I could write it, so I did the optimal thing of just writing it all myself anyway and then comparing with what you wrote. I missed the trick with <code>let ⟨W, h₁, h₂, h₃⟩ =...</code> -- I did the expansion using the trick Reid explained later on. But I also didn't use <code>include</code> and I carried <code>HB</code> around with me as an input variable. Aah, I see -- this is why you have used a section; include plays two roles and I'd only appreciated one of them until now. It can be used to insert hypotheses into the context in a tactic proof, but also to include variables into defintions in a section. I'll remark that I just learnt this by searching the pdf of TPIL for <code>include</code> -- I find the sphinx search very disappointing in this regard -- if you search the online docs for include then you just get the unenlightening response that the word is mentioned in every section, and are told the first occurrence of the word in each section; I would in this case far rather see all occurrences so I can try and spot which ones are in code blocks.</p>",
        "id": 126738602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526631986
    },
    {
        "content": "<p>It tried to read this thread but I still don't understand how to use <code>exists</code> classical stuff. How do you tell Lean about <code>example (X Y : Type) (f : X → Y) :  (∀ y : Y, ∃ x : X, f x = y) → (∃ g : Y → X, f ∘ g = id)</code></p>",
        "id": 127424574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527870699
    },
    {
        "content": "<p>use <code>axiom_of_choice</code> on that hypothesis and then <code>funext</code></p>",
        "id": 127424633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527870756
    },
    {
        "content": "<p>Thanks you very much. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hyp</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">axiom_of_choice</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hyp</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">y</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works. I still have questions: is it what you had in mind? is there a simpler solution? can we hide this to mathematicians? can we avoid frightening stuff like <code>∃ (f_1 : Π (x : Y), (λ (y : Y), X) x), ∀ (x : Y), (λ (y : Y) (x : X), f x = y) x (f_1 x)</code> which is defeq to <code>∃ f_1 : Y → X, ∀ (x : Y), f (f_1 x) = x</code>?</p>",
        "id": 127425370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527871802
    },
    {
        "content": "<p>the frightening is what you get from <code>classical.axiom_of_choice hyp</code></p>",
        "id": 127425457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527871892
    },
    {
        "content": "<p><code>set_option pp.beta true</code> should help</p>",
        "id": 127425460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527871900
    },
    {
        "content": "<p>perfect</p>",
        "id": 127425513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527871947
    },
    {
        "content": "<p>And yeah, that's pretty much what I had in mind (or you can write it more succinctly in term mode)</p>",
        "id": 127425517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527871960
    },
    {
        "content": "<p>Why is this <code>pp.beta</code> not true by default?</p>",
        "id": 127425532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527871999
    },
    {
        "content": "<p>Is there any way to merge the two lines <code>replace hyp := classical.axiom_of_choice hyp,  cases hyp with g H,</code> into one <code>I_really_mean hyp with g H</code>?</p>",
        "id": 127425612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527872106
    },
    {
        "content": "<p><code>cases</code> can take an expression, so you can inline the redefinition of <code>hyp</code></p>",
        "id": 127425637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527872142
    },
    {
        "content": "<p>I tried that and couldn't succeed</p>",
        "id": 127425640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527872155
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">axiom_of_choice</span> <span class=\"n\">hyp</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"c1\">-- etc.</span>\n</pre></div>",
        "id": 127425681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527872179
    },
    {
        "content": "<p>Ok, Lean is afraid of you</p>",
        "id": 127425701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527872206
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">axiom_of_choice</span> <span class=\"n\">hyp</span> <span class=\"k\">in</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127425704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527872212
    },
    {
        "content": "<p>it didn't work with me before you wrote it</p>",
        "id": 127425711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527872223
    },
    {
        "content": "<p>I also tried various stuff involving <code>let</code>...</p>",
        "id": 127425735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527872264
    },
    {
        "content": "<p>just remember that everything in term mode is subtly different from the corresponding thing in tactic mode and you should be fine <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 127425809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527872331
    },
    {
        "content": "<p>it's a bit confusing that the <code>funext</code> tactic takes the variable name as argument while the term version takes the quantified equality</p>",
        "id": 127425828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527872370
    },
    {
        "content": "<p>Anyway, I have to go back home now. Thank you very much Reid!</p>",
        "id": 127425906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527872410
    },
    {
        "content": "<p>Patrick I asked this very question here a month or two ago. Let me see if I can dig out the thread.</p>",
        "id": 127429106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527876037
    },
    {
        "content": "<p>All I remember is that I used the axiom of choice twice and Mario pointed out that I should only be using it once</p>",
        "id": 127429119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527876059
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/cases.20eliminating.20into.20type\" title=\"#narrow/stream/113488-general/topic/cases.20eliminating.20into.20type\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/cases.20eliminating.20into.20type</a></p>",
        "id": 127429204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527876147
    },
    {
        "content": "<p>Maybe that will have some relevant material</p>",
        "id": 127429208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527876156
    },
    {
        "content": "<p>I thought so, bu I found the wrong thread when I searched. Thank you</p>",
        "id": 127431357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527878819
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, should I PR something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">  `choice hyp with g H` takes an hypothesis `hyp` of the form</span>\n<span class=\"cm\">  `∀ (y : Y), ∃ (x : X), P x y` for some `P : X → Y → Prop` and outputs into</span>\n<span class=\"cm\">  context a function `g : Y → X` and a proposition `H` stating</span>\n<span class=\"cm\">  `∀ (y : Y), P (g y) y`. It presumably also works with dependent versions</span>\n<span class=\"cm\">  (see the actual type of `classical.axiom_of_choice`)</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">axiom_of_choice</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">ids</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"n\">choice</span> <span class=\"n\">hyp</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I know this is purely cosmetic, but I think it would help mathematicians to have a nice interface to choice.</p>",
        "id": 127515866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528061518
    },
    {
        "content": "<p>Of course this is a version of what Simon wrote in the other thread</p>",
        "id": 127515910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528061553
    },
    {
        "content": "<p>This is really nice and I want to be showing this to my 1st years.</p>",
        "id": 127516186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528062149
    },
    {
        "content": "<p>It was on my todo list to  get this into a xena library.</p>",
        "id": 127516187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528062159
    },
    {
        "content": "<p>Patrick -- can choice be used to replace cases everywhere?</p>",
        "id": 127516194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528062209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it's important we make a good interface for mathematicians, so they can learn more quickly.</p>",
        "id": 127516301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528062448
    },
    {
        "content": "<p>Skolem normal form?</p>",
        "id": 127516364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528062576
    }
]