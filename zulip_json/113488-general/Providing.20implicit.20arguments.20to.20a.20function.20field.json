[
    {
        "content": "<p>Suppose I have code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">l</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">→</span> <span class=\"n\">Obj</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">,</span> <span class=\"n\">Arr</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span>  <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A.Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B.Obj</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">B.Arr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">bid</span> <span class=\"o\">:=</span> <span class=\"n\">B.id</span> <span class=\"k\">in</span> <span class=\"bp\">@</span><span class=\"n\">bid</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would like to avoid the let binding, but Lean complains at both <code>@B.id</code> and <code>B.@id</code>. Is there anything I can do?</p>",
        "id": 223454916,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611187764
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">B.Arr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Thing.id</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 223455222,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611188046
    },
    {
        "content": "<p>EDIT: This was wrong, sorry (I get a \"too many arguments\" error message when trying that)</p>",
        "id": 223455377,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611188210
    },
    {
        "content": "<p>I don't understand why <code>B.id</code> doesn't work, something weird about implicit argument insertion and dot notation? sounds vaguely familiar...</p>",
        "id": 223455462,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611188283
    },
    {
        "content": "<p>Does this not work for you <span class=\"user-mention\" data-user-id=\"278626\">@Lime Sublime</span> ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">l</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">→</span> <span class=\"n\">Obj</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">,</span> <span class=\"n\">Arr</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span>  <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A.Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B.Obj</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">B.Arr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Thing.id</span> <span class=\"n\">_</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 223455826,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611188551
    },
    {
        "content": "<p>That code works for me! Unfortunately, the solution produces an error in a larger section of code. Trying to build a repro now</p>",
        "id": 223456598,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611189227
    },
    {
        "content": "<p>If you need to give an explicit argument for some reason then another option is <code>@Thing.id B (f a)</code></p>",
        "id": 223456678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611189291
    },
    {
        "content": "<p>In fact it does work, <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> ! Thanks! How did you generate the fix?</p>",
        "id": 223456775,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611189369
    },
    {
        "content": "<p>I took Reid's suggestion from earlier for the notation to just use the structure's field instead of relying on projection notation</p>",
        "id": 223456847,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611189452
    },
    {
        "content": "<p>Yeah, you cannot combine the <code>@</code> with the projection notation (dot notation), so in that case you have to just write the full name of the projection.</p>",
        "id": 223470697,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611205593
    }
]