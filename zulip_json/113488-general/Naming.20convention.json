[
    {
        "content": "<p>How should I name the following theorem? I have tried to follow the naming convention, but it looks longish.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Minkowski inequality: the `L^p` norm satisfies the triangular inequality, i.e.,</span>\n<span class=\"cm\">`||f+g||_p ≤ ||f||_p + ||g||_p`. Version for sums over finite sets, with nonnegative functions. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_add_rpow_rpow_inv_le_sum_rpow_rpow_inv_add_sum_rpow_rpow_inv</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199548204,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129428
    },
    {
        "content": "<p>You forgot the <code>of_pos_of_pos_of_one_le</code> at the end...</p>",
        "id": 199548362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591129492
    },
    {
        "content": "<p>More serious: how about chopping of everything after the <code>le</code>?</p>",
        "id": 199548424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591129520
    },
    {
        "content": "<p>how about <code>lp_sum_le_sum_lp</code></p>",
        "id": 199548587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591129581
    },
    {
        "content": "<p>or something along these lines</p>",
        "id": 199548607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591129587
    },
    {
        "content": "<p>And make the norm into a definition?</p>",
        "id": 199548694,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591129636
    },
    {
        "content": "<p>I like <code>lp_sum_le_sum_lp</code>: people who would need this should now what <code>lp</code> is.</p>",
        "id": 199548751,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129662
    },
    {
        "content": "<p><code>lp_norm</code> in place of <code>lp</code> is also possible, it seems short enough still.</p>",
        "id": 199548842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591129694
    },
    {
        "content": "<p>The definition of the norm is coming afterwards, to put a distance on a finite product of metric spaces.</p>",
        "id": 199548896,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129731
    },
    {
        "content": "<p><code>finset.lp_norm_add_le_add_lp_norm</code>?</p>",
        "id": 199548935,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129758
    },
    {
        "content": "<p>or <code>lᵖ_sum_le_sum_lᵖ</code></p>",
        "id": 199548970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591129778
    },
    {
        "content": "<p>I wouldn't mention the <code>sum</code> in the name, because it's already part of the definition of the norm. And no, superscripts in theorem names are not acceptable.</p>",
        "id": 199549090,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129820
    },
    {
        "content": "<p>aw :(</p>",
        "id": 199549099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591129826
    },
    {
        "content": "<p>Of course, this follows from Hölder inequality. Same naming contest for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Hölder inequality: the scalar product of two functions is bounded by the product of their</span>\n<span class=\"cm\">`L^p` and `L^q` norms when `p` and `q` are conjugate exponents. Version for sums over finite sets,</span>\n<span class=\"cm\">with nonnegative functions. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_mul_le_sum_rpow_rpow_inv_mul_sum_rpow_rpow_inv</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">is_conjugate_exponent</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 199549138,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129846
    },
    {
        "content": "<p><code>finset.sum_mul_le_lp_norm_mul_lq_norm</code>?</p>",
        "id": 199549210,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129883
    },
    {
        "content": "<p>The problem with these names is that they hardcode the exponents <code>p</code> or <code>q</code>. But we do the same with <code>char_p</code>, and since it's completely standard I don't think it's harmful.</p>",
        "id": 199549414,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591129961
    },
    {
        "content": "<p>How about <code>finset.sum_minkowski</code></p>",
        "id": 199550626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130567
    },
    {
        "content": "<p>the name-by-symbols method is only useful if that is the way theorems are being distinguished from each other in a sea of lemmas, like in <code>group.basic</code>. If it is a high level theorem with no similar versions and a complex statement, then people will probably use the name in maths to look it up and so you should use a name based on that. Especially here, where they have well known names</p>",
        "id": 199550845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130686
    },
    {
        "content": "<p>This is against the holy naming convention that names should follow the sequence of symbols in the statement ! :) More seriously, there are enough theorems by Minkowski that this is not discriminating enough.</p>",
        "id": 199550848,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591130687
    },
    {
        "content": "<p>That's why it's <code>finset.sum_minkowski</code> and not <code>minkowski_ineq</code></p>",
        "id": 199550889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130711
    },
    {
        "content": "<p>The idea here is to put some basic namespacing in, but otherwise use the usual name</p>",
        "id": 199550926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130733
    },
    {
        "content": "<p>You can lookup Minkowski sum on wikipedia to check that there is a serious ambiguity here :)</p>",
        "id": 199550948,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591130747
    },
    {
        "content": "<p>What are the distinguishing features of this minkowski theorem vs the other ones?</p>",
        "id": 199551044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130782
    },
    {
        "content": "<p>whatever they are, put them in the name</p>",
        "id": 199551065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130790
    },
    {
        "content": "<p>It's the one about the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span></span></span> norm</p>",
        "id": 199551186,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591130856
    },
    {
        "content": "<p>Well, L^p doesn't come up in the statement, but rpow does, so perhaps <code>finset.sum_rpow_minkowski</code>?</p>",
        "id": 199551292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130905
    },
    {
        "content": "<p>Also, I don't think that Minkowski sum will clash here since that is a sum over <code>set</code> not <code>finset</code></p>",
        "id": 199551503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591131003
    },
    {
        "content": "<p>I would be fine with <code>finset.sum_rpow_holder_of_nonneg</code> and <code>finset.sum_rpow_minkowsi_of_nonneg</code> (where the <code>of_nonneg</code> is necessary to distringuish it from the general version where one takes absolute values).</p>",
        "id": 199551507,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591131005
    },
    {
        "content": "<p>(You could take a Minkowski sum of a <code>finset</code> of sets though.)</p>",
        "id": 199551805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591131155
    },
    {
        "content": "<p>That would be a new function, though, which would get its own name or name segment like <code>finset.mink</code> so that it can be used as a name segment in other theorems</p>",
        "id": 199552057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591131275
    },
    {
        "content": "<p>(not that I'm actually proposing that name)</p>",
        "id": 199552120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591131308
    },
    {
        "content": "<p>I would probably call it <code>zip_with_add</code></p>",
        "id": 199552145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591131326
    },
    {
        "content": "<p>oh wait it's not a zip nvm</p>",
        "id": 199552171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591131342
    }
]