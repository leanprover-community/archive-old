[
    {
        "content": "<p>For the perfectoid project we often need to work with subsets of quotient types. A mathematician would write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">QuotType</span> <span class=\"bp\">|</span> <span class=\"n\">formula</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and afterwards bother with the proof obligation of showing that it is well-defined. Can we mimic this in Lean?<br>\nI imagine that this subset notation would call the appropriate <code>lift</code> lemma, and generate a proof obligation that we can prove after the subset notation. Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">QuotType</span> <span class=\"bp\">|</span> <span class=\"n\">formula</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">proof_of_soundness</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134956599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538381562
    },
    {
        "content": "<p>Maybe we could have <code>{ .. | .. } is_well_defined ..</code> be some fancy notation for this type of things?</p>",
        "id": 134956665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538381652
    },
    {
        "content": "<p>Do you mean <code>{[[x]] : QuotType | formula x}</code>?</p>",
        "id": 134956774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538381880
    },
    {
        "content": "<p>Does that work?</p>",
        "id": 134956817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538381905
    },
    {
        "content": "<p>Looks like the image of <code>quotient.mk</code> of some set.</p>",
        "id": 134956818,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538381908
    },
    {
        "content": "<p><code>quotient.mk '' {x | formula x}</code></p>",
        "id": 134956832,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538381933
    },
    {
        "content": "<p>there are two ways of forming subquotient</p>",
        "id": 134956838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538381944
    },
    {
        "content": "<p>and a theorem that they are the same</p>",
        "id": 134956842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538381949
    },
    {
        "content": "<p>(in maths, not in Lean)</p>",
        "id": 134956843,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538381954
    },
    {
        "content": "<p>Right, I see where this is going...</p>",
        "id": 134956847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538381970
    },
    {
        "content": "<p>In particular, they aren't defeq</p>",
        "id": 134956850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538381987
    },
    {
        "content": "<p>few things are</p>",
        "id": 134956970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538382171
    },
    {
        "content": "<p>So Chris gives a workaround, but proving that his thing is the same as what I want is non-trivial.</p>",
        "id": 134956992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538382241
    },
    {
        "content": "<p>But it's non trivial because there's mathematical content right?</p>",
        "id": 134957502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538382970
    },
    {
        "content": "<p>Right, you have to prove that <code>formula</code> is constant on equivalence classes</p>",
        "id": 134957509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538383009
    },
    {
        "content": "<p>The harder <code>lift</code> definition is probably the best one to use.</p>",
        "id": 134957645,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538383218
    },
    {
        "content": "<p>Yes, so I don't mind proving something hard, but I would like to keep a readable definition. Hence this question.</p>",
        "id": 134957658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538383253
    },
    {
        "content": "<p>To keep the definition readable, make the well definedness part a lemma that you prove immediately before</p>",
        "id": 134958313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538384205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That is certainly an option, but<br>\n(1) the definition still won't be able to use subset notation;<br>\n(2) it is not what mathematicians are used to. We always define something, and afterwards fill in the proof obligation of showing that the definition is well-defined.</p>",
        "id": 134959001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385379
    },
    {
        "content": "<p>I think that it matches mathematical practice in that you aren't licensed to use the definition until you have proven the well definedness condition</p>",
        "id": 134959021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385442
    },
    {
        "content": "<p>in lean if you can say it you can use it, so you have to be intercepted right at the definition</p>",
        "id": 134959030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385466
    },
    {
        "content": "<p>I'm a little confused about what exactly you want to write though</p>",
        "id": 134959080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385521
    },
    {
        "content": "<p>I completely agree.</p>",
        "id": 134959096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385589
    },
    {
        "content": "<p>So my suggestion was to <em>syntactically</em> prove the well-definedness after the definition. But in fact it is just part of the definition.</p>",
        "id": 134959144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385618
    },
    {
        "content": "<p>Most importantly, I would like the definition to be <em>very</em> readable.</p>",
        "id": 134959148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385633
    },
    {
        "content": "<p>Isn't that what <code>quot.lift</code> already does?</p>",
        "id": 134959149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385635
    },
    {
        "content": "<p>Yes. But then my subset notation goes out of the window.</p>",
        "id": 134959155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385657
    },
    {
        "content": "<p>Can you be more specific?</p>",
        "id": 134959176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385696
    },
    {
        "content": "<p>Any mathematician who first looks at Lean, and wants to look up the definition of <code>Spv</code> in the perfectoid project will not understand anything if he/she sees a <code>quot.lift</code>.</p>",
        "id": 134959189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385720
    },
    {
        "content": "<p>That is completely foreign.</p>",
        "id": 134959229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385726
    },
    {
        "content": "<p>And the stuff that follows it is barely recognisable.</p>",
        "id": 134959232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385740
    },
    {
        "content": "<p>On the other hand</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">QuotType</span> <span class=\"bp\">|</span> <span class=\"n\">formula</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">is_well_defined</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">proof_of_soundness</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>is very readable.</p>",
        "id": 134959244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385783
    },
    {
        "content": "<p>But my Lean-fu is not sufficient to turn that into valid Lean.</p>",
        "id": 134959255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385803
    },
    {
        "content": "<p>Currently in the perfectoid project we are stacking 5 subquotients on top of each other.</p>",
        "id": 134959266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385834
    },
    {
        "content": "<p>And it becomes really horrible.</p>",
        "id": 134959302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385843
    },
    {
        "content": "<p>(Well, <em>currently</em> there is no <code>quot</code>, but that isn't tenable either. So we need the <code>quot</code>, and we'dd like it to be readable.)</p>",
        "id": 134959324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538385887
    },
    {
        "content": "<p>I am confused about why your def is not valid lean</p>",
        "id": 134959443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386055
    },
    {
        "content": "<p>I wrote what I thought you were trying to say but you have not adopted my change</p>",
        "id": 134959455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386080
    },
    {
        "content": "<p>Sorry, which change are you talking about?</p>",
        "id": 134959507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386121
    },
    {
        "content": "<p>I mean, I wrote what I thought was invalid lean</p>",
        "id": 134959509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386124
    },
    {
        "content": "<p>I put the equiv class notation in</p>",
        "id": 134959513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386137
    },
    {
        "content": "<p>Right. So now I tried using Chris's suggestion.</p>",
        "id": 134959525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386160
    },
    {
        "content": "<p>But then you can define <code>Spa</code>, and you get stuck when you want to define the opens.</p>",
        "id": 134959533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386189
    },
    {
        "content": "<p>To paraphrase Mario:</p>\n<blockquote>\n<p>But I <em>do not</em> want to be thinking about <code>quot.lift</code> and <code>subtype.val</code> when I am writing a proof<br>\nthe mindset is completely different, it is a distraction</p>\n</blockquote>",
        "id": 134959614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386258
    },
    {
        "content": "<p>Is your <code>foobar</code> stuff about <code>Spa</code>? If so can you show what it looks like in situ</p>",
        "id": 134959617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386260
    },
    {
        "content": "<p>All I am saying is that you keep saying that something is invalid lean and it looks fine to me</p>",
        "id": 134959618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386262
    },
    {
        "content": "<p>But the definitional equality of <code>quotient.lift</code> is really handy. Just give a docstring. Aiming to make your code usable by someone who doesn't know what <code>quotient.lift</code> is is probably impossible.</p>",
        "id": 134959634,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538386279
    },
    {
        "content": "<p>And I wrote something which was invalid lean and asked if it was what you meant and all you did was asked me if my invalid lean was valid</p>",
        "id": 134959650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386310
    },
    {
        "content": "<p>So we're clearly at cross purposes. My question is what is invalid about your lean</p>",
        "id": 134959708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386350
    },
    {
        "content": "<p>Are we talking about <code>def foobar := {x : QuotType | formula x} is_well_defined (by proof_of_soundness)</code>?</p>",
        "id": 134959722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538386386
    },
    {
        "content": "<p>In the case of <code>Spa</code>, I don't think you should try to get defeq just right, because <code>Spa</code> itself is not quite a quotient in the way we want it to be anyway</p>",
        "id": 134959728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386391
    },
    {
        "content": "<p>It seems pretty invalid to me</p>",
        "id": 134959729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538386395
    },
    {
        "content": "<p>I don't have access to lean right now so I'll just shut up and stop adding to the noise</p>",
        "id": 134959735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Sorry, I finally understand. I think <code>{[[x]] : QuotType | formula x}</code> doesn't leave any room for the proof obligation that <code>formula x</code> only depends on <code>[[x]]</code>. That proof has to go somewhere. Mathematicians also do that.</p>",
        "id": 134959782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386455
    },
    {
        "content": "<p>That's a perfectly valid definition, which means the image of such and such</p>",
        "id": 134959783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386477
    },
    {
        "content": "<p>why not <code>{q : QuotType | formula q}</code></p>",
        "id": 134959806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386528
    },
    {
        "content": "<p>and define <code>formula q</code> using a lift</p>",
        "id": 134959814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386545
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">Spa</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Huber_pair</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">is_continuous</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"err\">⁺</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 134959816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386554
    },
    {
        "content": "<p>This is what I have now.</p>",
        "id": 134959855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386563
    },
    {
        "content": "<p>is <code>is_continuous</code> constant on equivalence classes?</p>",
        "id": 134959863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386576
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">Valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"err\">Γ</span>   <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">grp</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"err\">Γ</span> <span class=\"n\">grp</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Valuation</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"err\">Γ</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">linear_ordered_value_group</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">grp</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Valuation</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Spv</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v₁</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">v₂</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v₂</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v₃</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">Spv</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">Spv</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134959866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes it is, but the proof is sorried.</p>",
        "id": 134959871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386604
    },
    {
        "content": "<blockquote>\n<p>is <code>is_continuous</code> constant on equivalence classes?</p>\n</blockquote>\n<p>yes, although I was waiting for module refactoring to prove it.</p>",
        "id": 134959879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386615
    },
    {
        "content": "<p>Yep, that will need quite some module-juggling.</p>",
        "id": 134959891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386641
    },
    {
        "content": "<p>And a bit of <code>tfae</code>-icing <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 134959900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386663
    },
    {
        "content": "<p>It is mostly rings but I was using module refactoring as an excuse to put it off</p>",
        "id": 134959913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386681
    },
    {
        "content": "<p>what happened to the relations?</p>",
        "id": 134959944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386691
    },
    {
        "content": "<p>Which relations?</p>",
        "id": 134959946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386697
    },
    {
        "content": "<p>Aah, lol, they are gone</p>",
        "id": 134959958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386704
    },
    {
        "content": "<p>They are in the setoid</p>",
        "id": 134959961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386710
    },
    {
        "content": "<p>So there are no longer relations on <code>R</code>.</p>",
        "id": 134959967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386733
    },
    {
        "content": "<p>The reason for that definition was because the quotient doesn't work</p>",
        "id": 134959982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386757
    },
    {
        "content": "<p>So how can you define <code>lift</code> and friends using the relations?</p>",
        "id": 134959989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386775
    },
    {
        "content": "<p>it's not universe polymorphic enough, and your definition lives in a higher universe</p>",
        "id": 134959992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386784
    },
    {
        "content": "<p>That's what the whole thing about generating valuations is for</p>",
        "id": 134960044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386823
    },
    {
        "content": "<p>To me <code>quot</code> is a bunch of <code>C++</code> magic that somehow works. But I don't know how to provide my own <code>lift</code> without at some point resorting to <code>quot.lift</code>.</p>",
        "id": 134960045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386823
    },
    {
        "content": "<p>You do it the old fashioned way</p>",
        "id": 134960048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386839
    },
    {
        "content": "<p>with sets</p>",
        "id": 134960050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386843
    },
    {
        "content": "<p>Sorry, I don't follow.</p>",
        "id": 134960059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386864
    },
    {
        "content": "<p>Given a relation on <code>R</code>. How do you get a valuation?</p>",
        "id": 134960068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386881
    },
    {
        "content": "<blockquote>\n<p>For the perfectoid project we often need to work with subsets of quotient types. A mathematician would write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">QuotType</span> <span class=\"bp\">|</span> <span class=\"n\">formula</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and afterwards bother with the proof obligation of showing that it is well-defined. Can we mimic this in Lean?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">QuotType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"n\">QuotType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">definition</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">QuotType</span> <span class=\"bp\">|</span> <span class=\"n\">formula</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Mimicked. That was what I was trying to say.</p>",
        "id": 134960073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538386895
    },
    {
        "content": "<p>The relation is assumed to be the image of some valuation</p>",
        "id": 134960081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386905
    },
    {
        "content": "<p>Could you write down the definition of <code>lift</code> (with a <code>sorry</code>)?</p>",
        "id": 134960141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386948
    },
    {
        "content": "<p>I couldn't write down anything of which I was even sure that a proof existed.</p>",
        "id": 134960150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386966
    },
    {
        "content": "<p>Wasn't this already done in an earlier version?</p>",
        "id": 134960158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386979
    },
    {
        "content": "<p>No, only the claim that it should be done.</p>",
        "id": 134960261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387058
    },
    {
        "content": "<p><code>mk</code> was done. That's not so hard.</p>",
        "id": 134960265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387068
    },
    {
        "content": "<p>But <code>lift</code> wasn't.</p>",
        "id": 134960267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387076
    },
    {
        "content": "<p><code>mk</code> took me forever</p>",
        "id": 134960269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538387083
    },
    {
        "content": "<p>Wasn't this the one where I had to invoke the first isomorphism theorem between objects in different universes?</p>",
        "id": 134960279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538387103
    },
    {
        "content": "<p>yes</p>",
        "id": 134960288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538387115
    },
    {
        "content": "<p>I thought I did most of the hard work for this</p>",
        "id": 134960294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538387127
    },
    {
        "content": "<p>and that everything else was just noise modulo continuous being constant on equiv classes</p>",
        "id": 134960301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538387144
    },
    {
        "content": "<p>Hmm, sorry. That wasn't nice to say. You indeed need all the minimal_valuation stuff.</p>",
        "id": 134960311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387160
    },
    {
        "content": "<p>But once that is there <code>mk</code> is not very hard.</p>",
        "id": 134960357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387176
    },
    {
        "content": "<p>I'm not offended, I am just aware that there are issues here I don't understand so am a bit scared of messing with stuff</p>",
        "id": 134960360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538387183
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">Spv</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- quotient (Spv.setoid R)</span>\n<span class=\"o\">{</span><span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">],</span>\n  <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Γ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">ineq</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 134960379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387205
    },
    {
        "content": "<p>Voila, the old definition.</p>",
        "id": 134960381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387210
    },
    {
        "content": "<p>I agree that the universe issue wasn't solved by what I did. (I'm really silly when it comes to universes.)</p>",
        "id": 134960396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think this would work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">≈</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Spv</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 134960467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387304
    },
    {
        "content": "<p>can you post enough to make <code>Spv</code> compile? Stub out the definition of <code>valuation</code> and such</p>",
        "id": 134960497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538387387
    },
    {
        "content": "<p>mathlib doesn't have <code>linear_ordered_comm_group</code></p>",
        "id": 134960670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538387590
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">valuations</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">valuation</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_valuation</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span>  <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">valuation</span>\n\n<span class=\"n\">def</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"err\">Γ</span> <span class=\"bp\">//</span> <span class=\"n\">valuation</span><span class=\"bp\">.</span><span class=\"n\">is_valuation</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">valuation</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">Valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"err\">Γ</span>   <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">grp</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"err\">Γ</span> <span class=\"n\">grp</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Valuation</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"err\">Γ</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">linear_ordered_value_group</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">grp</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Valuation</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Spv</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v₁</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">v₂</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v₂</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v₃</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">Spv</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">],</span>\n  <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Γ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">ineq</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Spv</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Spv</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">minimal_value_group</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"err\">Γ</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">minimal_value_group</span><span class=\"bp\">.</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">minimal_valuation</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">minimal_valuation_equiv</span><span class=\"bp\">⟩⟩⟩⟩</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">≈</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Spv</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 134960675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387604
    },
    {
        "content": "<p>Aah, too bad mathlib doesn't have that.</p>",
        "id": 134960677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387613
    },
    {
        "content": "<p>mathlib has the decidable version</p>",
        "id": 134960745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538387683
    },
    {
        "content": "<p>(rather core has it)</p>",
        "id": 134960750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538387694
    },
    {
        "content": "<p>is there a reason that doesn't work here?</p>",
        "id": 134960763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538387707
    },
    {
        "content": "<blockquote>\n<p>I agree that the universe issue wasn't solved by what I did. (I'm really silly when it comes to universes.)</p>\n</blockquote>\n<p>I don't know if there is a universe issue with your version. I find subtypes easier to use than quotient types but this might just be lack of practice. I am happy if you think a change will make it more readable but I don't want to run into universe issues. My understanding of the universe issues is that I should not let a valuation be an \"equivalence class\" of <code>v : R -&gt; with_zero Gamma</code> where Gamma is allowed to vary over any type in any universe. I instead restricted to Gamma varying over things in the same universe as R and then I had to work to show that if I had a Gamma in another universe it was equivalent to Gamma in R's universe. I think that these issues (which I don't understand fully) are not the same as the one Johan is talking about, which is defining Spv not to be the ordering on R but to be the equiv class of valuations which give the ordering, so my guess is that these changes should be fine <em>as long as the equiv reln is defined on valuations taking values in things in R's universe</em>. I am not 100% sure that this is the point but that's my current understanding; I'm currently about to start travelling for 2 hours by the way.</p>",
        "id": 134960848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538387863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <del>Mathlib</del>core has the additive version...</p>",
        "id": 134960849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538387875
    },
    {
        "content": "<p>Unfortunately, you can't even take an equivalence class over all valuations with type in the same universe as R, because this is already too big</p>",
        "id": 134960919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388000
    },
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hv</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Γ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n</pre></div>\n\n\n<p>in my local context. Somehow <code>cases hv</code> complains that it can only eliminate into <code>Prop</code>. <span class=\"emoji emoji-1f622\" title=\"cry\">:cry:</span></p>",
        "id": 134960982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388043
    },
    {
        "content": "<p>The best you can do is take an equivalence class over all valuations in some \"small\" collection of representatives</p>",
        "id": 134960984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388047
    },
    {
        "content": "<p>Use <code>classical.cases_on</code></p>",
        "id": 134960986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388056
    },
    {
        "content": "<blockquote>\n<p>Unfortunately, you can't even take an equivalence class over all valuations with type in the same universe as R, because this is already too big</p>\n</blockquote>\n<p>Like I just experienced (-;</p>",
        "id": 134960987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388056
    },
    {
        "content": "<p>I'm still struggling to get your file to compile, but that's what I was going to do</p>",
        "id": 134961003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388086
    },
    {
        "content": "<p>just use <code>classical.cases_on</code> three times and apply the function</p>",
        "id": 134961011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388109
    },
    {
        "content": "<p>You won't even need the well definedness assumption, it's just for show</p>",
        "id": 134961053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388132
    },
    {
        "content": "<p>Let me try</p>",
        "id": 134961068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388158
    },
    {
        "content": "<p>How do I \"use\" <code>classical.cases_on</code> with <code>hv</code>?</p>",
        "id": 134961089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388225
    },
    {
        "content": "<p><code>refine classical.cases_on hv (\\lam Gamma h', _)</code></p>",
        "id": 134961133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388252
    },
    {
        "content": "<p>I see</p>",
        "id": 134961136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388280
    },
    {
        "content": "<p>Good old refine</p>",
        "id": 134961138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388290
    },
    {
        "content": "<p>You might be able to use a custom recursor with <code>induction</code> but I find <code>refine</code> the most straightforward</p>",
        "id": 134961139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388292
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  classical.cases_on hv\nterm\n  hv\nhas type\n  ∃ {Γ : Type u₁} [_inst_3 : linear_ordered_comm_group Γ] (v_1 : valuation R Γ),\n    ∀ (r s : R), ⇑v_1 r ≤ ⇑v_1 s ↔ v r s : Prop\nbut is expected to have type\n  Prop : Type\n</pre></div>",
        "id": 134961152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388322
    },
    {
        "content": "<p>Also... lunch time</p>",
        "id": 134961156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388342
    },
    {
        "content": "<p>See you later</p>",
        "id": 134961157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538388344
    },
    {
        "content": "<p>lol</p>",
        "id": 134961159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388347
    },
    {
        "content": "<p>sorry, I think it's called <code>classical.rec_on</code></p>",
        "id": 134961210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388394
    },
    {
        "content": "<p>it's a bad name</p>",
        "id": 134961215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388407
    },
    {
        "content": "<p>it should be more like <code>exists.rec_on_classical</code></p>",
        "id": 134961221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538388419
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">≈</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Spv</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"err\">Γ</span> <span class=\"n\">hv&#39;</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"n\">refine</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hv&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">inst</span> <span class=\"n\">hv&#39;&#39;</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"n\">refine</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hv&#39;&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:=</span> <span class=\"err\">Γ</span><span class=\"o\">,</span> <span class=\"n\">grp</span> <span class=\"o\">:=</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134963338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538391651
    },
    {
        "content": "<p>That kind of worked. But I didn't use <code>H</code></p>",
        "id": 134963350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538391669
    },
    {
        "content": "<p>Mario announced that you wouldn't need H</p>",
        "id": 134964015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538392686
    },
    {
        "content": "<p>So, is this some sort of \"cheating\" definition?</p>",
        "id": 134964138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538392869
    },
    {
        "content": "<p>I guess we should leave <code>H</code> in place, because otherwise <code>lift</code> can be abused.</p>",
        "id": 134964152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538392905
    },
    {
        "content": "<p>You will need <code>H</code> to prove that <code>lift f H (mk v) = f v</code></p>",
        "id": 134964277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538393044
    },
    {
        "content": "<p>Good point. Let me prove such things now.</p>",
        "id": 134964394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538393213
    },
    {
        "content": "<p>It seems this is a very convenient way to setup things: define stuff without precondition, and prove they have the expected properties under the appropriate conditions. An extreme example is <a href=\"https://github.com/leanprover-community/mathlib/blob/b3b50ce67c8b73442372c5141e8836c64ea13826/analysis/topology/completion.lean#L442-L446\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/b3b50ce67c8b73442372c5141e8836c64ea13826/analysis/topology/completion.lean#L442-L446\">https://github.com/leanprover-community/mathlib/blob/b3b50ce67c8b73442372c5141e8836c64ea13826/analysis/topology/completion.lean#L442-L446</a></p>",
        "id": 134964400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538393223
    },
    {
        "content": "<p>Now I'm stuck on the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"bp\">_</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">hv&#39;</span> <span class=\"o\">:</span>\n         <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Γ</span><span class=\"o\">),</span>\n           <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n         <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hv&#39;</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">hv&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Γ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n              <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hv&#39;&#39;</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"err\">⇑</span><span class=\"n\">v_1</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n                   <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:=</span> <span class=\"err\">Γ</span><span class=\"o\">,</span> <span class=\"n\">grp</span> <span class=\"o\">:=</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">v_1</span><span class=\"o\">})))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">f</span> <span class=\"n\">v</span>\n</pre></div>\n\n\n<p>The maths is clear, but I have no idea how to work with this <code>classical.rec_on</code>. How do I fight those?</p>",
        "id": 134965116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538394140
    },
    {
        "content": "<p>Ok, so I can turn it into the rather unhelpful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lift_mk</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">≈</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ {Γ := classical.some _, grp := classical.some _, val := classical.some _} ≈ v</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134965842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538395177
    },
    {
        "content": "<p>As you can see in the code, there is this bit saying <code>(hv'' : ∃ (v_1 : valuation R Γ), ∀ (r s : R), ⇑v_1 r ≤ ⇑v_1 s ↔ ⇑(v.val) r ≤ ⇑(v.val) s),</code>. I need to extract that, and use it to close my goal.</p>",
        "id": 134965907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538395240
    },
    {
        "content": "<p>Ok, from browsing code I think that I should use <code>some_spec</code> or <code>some_spec2</code>. Can anyone confirm that this is reasonable? (I have yet to figure out how I should use them...)</p>",
        "id": 134966633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538396326
    },
    {
        "content": "<p>This is what I have now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lift_mk</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">≈</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ineq</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">ineq</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- R : Type u₁,</span>\n<span class=\"c1\">-- _inst_1 : comm_ring R,</span>\n<span class=\"c1\">-- _inst_2 : decidable_eq R,</span>\n<span class=\"c1\">-- β : Type u₃,</span>\n<span class=\"c1\">-- f : Valuation R → β,</span>\n<span class=\"c1\">-- H : ∀ (v₁ v₂ : Valuation R), v₁ ≈ v₂ → f v₁ = f v₂,</span>\n<span class=\"c1\">-- v : Valuation R,</span>\n<span class=\"c1\">-- ineq : Spv R := mk v,</span>\n<span class=\"c1\">-- foo : ∀ (r s : R), ⇑(classical.some _) r ≤ ⇑(classical.some _) s ↔ ineq.val r s,</span>\n<span class=\"c1\">-- r s : R</span>\n<span class=\"c1\">-- ⊢ ⇑(classical.some _) r ≤ ⇑(classical.some _) s ↔ ⇑v r ≤ ⇑v s</span>\n</pre></div>\n\n\n<p>Looks deceptively close, but I can't finish it.</p>",
        "id": 134967775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538397898
    },
    {
        "content": "<p>Yes, if you want to proof something about <code>classical.some</code>. What you usually do is to define a the constant using <code>classical.some</code> and then proof when a corresponding value exists, then the constant has the properties.</p>",
        "id": 134967787,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538397910
    },
    {
        "content": "<p>what is the type of <code>_</code> in <code>classical.some _</code>?</p>",
        "id": 134967800,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538397945
    },
    {
        "content": "<p>Hooray!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lift_mk</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">≈</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ineq</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">spec</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">spec</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">spec</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134967891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538398064
    },
    {
        "content": "<p>Somehow I managed to convince Lean!</p>",
        "id": 134967896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538398076
    },
    {
        "content": "<p>I agree <code>some_spec</code> is awkward, but for what it's worth, it is mentioned in TPIL. When I first saw the example provided in 11.6 I didn't have any idea how it worked.</p>",
        "id": 134967899,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538398081
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">function</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">linv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ex</span> <span class=\"k\">else</span> <span class=\"n\">arbitrary</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">linv_comp_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linv</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ex</span>  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span>   <span class=\"n\">feq</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">some_spec</span> <span class=\"n\">ex</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">linv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">ex</span> <span class=\"o\">:</span>  <span class=\"n\">dif_pos</span> <span class=\"n\">ex</span>\n             <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">a</span>       <span class=\"o\">:</span>  <span class=\"n\">inj</span> <span class=\"n\">feq</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134967939,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538398088
    }
]