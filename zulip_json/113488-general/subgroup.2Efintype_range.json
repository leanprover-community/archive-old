[
    {
        "content": "<p>Would these instances cause any problem ? I'm considering adding them because they allow to do with bundled subgroups what is already possible with (deprecated) unbundled subgroups : when working with unbundled subgroups everything is <code>set.range</code> anyway, so typeclass inference finds <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite_image\">docs#set.finite_image</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite_range\">docs#set.finite_range</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subgroup.fintype_comap</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.fintype_image</span> <span class=\"n\">S.carrier</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subgroup.fintype_range</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">f.range</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.fintype_range</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 243215128,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1624057125
    },
    {
        "content": "<p>We'll definitely need a lemma saying <code>S = T</code> implies <code>finset.univ (S.map f) = finset.univ (T.map f)</code>. I can't think of any other important considerations. (They do not appear fragile since there's no dependence on a specific choice of <code>f</code>, and the specific choice of <code>S</code> is not too bad since there are more typeclasses for specific subgroups.)</p>",
        "id": 243256535,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624118992
    },
    {
        "content": "<p>Anne, isn't your lemma just an instance of <code>eq.subst</code>?</p>",
        "id": 243257199,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1624120001
    },
    {
        "content": "<p>You are completely right, not quite sure what I was thinking there :P</p>",
        "id": 243267970,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624135118
    }
]