[
    {
        "content": "<p>What's the idiomatic way to, for example, multiply both sides of an equation by the same object (in contexts where that makes sense)? <code>@mul_left_cancel</code> works, technically, but there doesn't seem to be a good way to tell Lean what to 'un-cancel' without first working my way through the rest of the implicit arguments. I'm almost tempted to just put an alias at the top of my code to make just the first parameter non-implicit; is there a better way?</p>",
        "id": 214984331,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603985806
    },
    {
        "content": "<p>By \"equation\" do you mean a goal or a hypothesis? If the goal then I sometimes just write <code>suffices : a*b=a*c, exact mul_left_cancel this</code>.</p>",
        "id": 214984684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603985913
    },
    {
        "content": "<p>Goal in this case, though I'm curious about hypotheses as well.</p>\n<p>That works, thanks!</p>",
        "id": 214985422,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603986160
    },
    {
        "content": "<p>For hypotheses of course you need the argument the other way. If you have <code>h : a*b=a*c</code> you can <code>replace h := mul_left_cancel h</code> and if you have <code>h : b = c</code> then you don't need <code>mul_left_cancel</code>, you can do something like <code>apply_fun (λ x, a * x) at h</code>.</p>",
        "id": 214986143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603986468
    },
    {
        "content": "<p>... How did I manage to work through all the tutorials I could find without meeting <code>apply_fun</code>? &gt;.&gt; </p>\n<p>Thanks, that's <em>really</em> helpful.</p>",
        "id": 214986569,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603986650
    },
    {
        "content": "<p>Because it's a tactic that isn't actually that old</p>",
        "id": 214986718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603986703
    },
    {
        "content": "<p>I still think the name is terrible, because it doesn't apply a function</p>",
        "id": 214986855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603986746
    },
    {
        "content": "<p>it should be <code>congr at h</code></p>",
        "id": 214986874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603986759
    },
    {
        "content": "<p>does it not?</p>",
        "id": 214987032,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1603986831
    },
    {
        "content": "<p>How would it know what function to, uh, definitely not apply?</p>",
        "id": 214987059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603986840
    },
    {
        "content": "<p><code>congr f at h</code>?</p>",
        "id": 214987154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603986867
    },
    {
        "content": "<p><code>mul_left a at h</code></p>",
        "id": 214987224,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603986899
    },
    {
        "content": "<p><code>apply f at h</code> should do the equivalent of <code>replace h := f h</code></p>",
        "id": 214987256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603986909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113488-general/topic/Reverse.20cancelling.2F'same.20thing.20on.20both.20sides'/near/214986569\">said</a>:</p>\n<blockquote>\n<p>... How did I manage to work through all the tutorials I could find without meeting <code>apply_fun</code>? &gt;.&gt; </p>\n<p>Thanks, that's <em>really</em> helpful.</p>\n</blockquote>\n<p>Here's the info about <code>apply_fun</code> on our tactic docs page: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">tactic#apply_fun</a></p>\n<p>The list of tactics there is much more complete.</p>",
        "id": 214987293,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603986927
    },
    {
        "content": "<p><code>congr f at h</code> should do the equivalent of <code>replace h := congr_arg f h</code></p>",
        "id": 214987296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603986928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> That would balloon the number of named tactics, which would make navigating the documentation much harder</p>",
        "id": 214987499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603987007
    },
    {
        "content": "<p>I think Johan has a plan for a tactic along those lines though</p>",
        "id": 214987533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603987020
    },
    {
        "content": "<p>lol. so basically you are saying 1. if we do this then the documentation will be impossible to understand, 2. and it's already in progress! excellent <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 214987631,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603987061
    },
    {
        "content": "<p>the difference is that johan's tactic is more like <code>calc_step a * h</code> IIRC</p>",
        "id": 214987842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603987134
    },
    {
        "content": "<p>I remember there being some kerfuffle when <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> suggested <code>apply_fun</code>; the main objections from the CS people were that all the tools were there already to do this. The argument from the maths people were that there was a constant stream of undergrads asking how to apply a function to both sides of an equality!</p>",
        "id": 214988492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603987353
    },
    {
        "content": "<p>I haven't fully understood what Johan's plans are, but it's interesting to note that IIRC Patrick's first foray into tactic-writing was <code>apply_fun</code> (or at least one of the first), and now Johan is taking his first steps. Me, I'm still terrified :-)</p>",
        "id": 214988714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603987430
    },
    {
        "content": "<p>Oh, I just had a great idea for a sufficiently flexible interface:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">bikeshed</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span> <span class=\"bp\">+</span> <span class=\"n\">h1</span>\n</code></pre></div>\n\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">bikeshed</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"k\">in</span> <span class=\"n\">h1</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span> <span class=\"bp\">+</span> <span class=\"n\">h1</span>\n</code></pre></div>\n\n<p>The trick is that the expression <code>h1 * h2 + h1</code> is elaborated with <code>h1 h2 : nat</code> and then they are lambda abstracted to produce the motive for the congr application</p>",
        "id": 214989577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603987761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Reverse.20cancelling.2F'same.20thing.20on.20both.20sides'/near/214987842\">said</a>:</p>\n<blockquote>\n<p>the difference is that johan's tactic is more like <code>calc_step a * h</code> IIRC</p>\n</blockquote>\n<p>yup... though it's very much wip. atm it only handles the goal.</p>",
        "id": 214990809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603988262
    },
    {
        "content": "<p>And the name is terrible. Suggestions very welcome!</p>",
        "id": 214990840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603988274
    },
    {
        "content": "<p>I like <code>bikeshed</code>.</p>",
        "id": 214991377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603988509
    }
]