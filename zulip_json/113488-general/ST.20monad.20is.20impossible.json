[
    {
        "content": "<p>Just a little proof that might be of general interest. Haskell uses an <code>ST</code> monad for handling mutable variables. Here's a reasonable axiomatization of the primitives:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">State</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">State</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">State</span><span class=\"bp\">.</span><span class=\"n\">run_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">σ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">σ</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">mut_var</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mut_var</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">mut_var</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n<span class=\"kn\">constant</span> <span class=\"n\">read</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mut_var</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n<span class=\"kn\">constant</span> <span class=\"n\">write</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mut_var</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">mut_var</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">has_val</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mut_var</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_val</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">read</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_val</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">has_val</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">read</span> <span class=\"bp\">_</span> <span class=\"n\">β</span> <span class=\"n\">v&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">write_ne</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">v&#39;</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">v&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">has_val</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">has_val</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">write</span> <span class=\"n\">v&#39;</span> <span class=\"n\">a&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">write_eq</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_val</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">write</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">read_has_val</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">mut_var</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_val</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">read</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mut_var</span>\n</pre></div>\n\n\n<p>and here's a proof that it's not consistent:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"err\">$</span> <span class=\"n\">State</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">σ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span>\n<span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mut_var</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s&#39;</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">in</span>\n<span class=\"bp\">@</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">cantor_injective</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"bp\">@</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective_of_left_inverse</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">s&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">mut_var</span><span class=\"bp\">.</span><span class=\"n\">read_has_val</span> <span class=\"n\">mut_var</span><span class=\"bp\">.</span><span class=\"n\">has_val</span><span class=\"bp\">.</span><span class=\"n\">write_eq</span>\n</pre></div>",
        "id": 157923445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549705072
    },
    {
        "content": "<p>so Haskell is inconsistent? :o</p>",
        "id": 157923553,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549705217
    },
    {
        "content": "<p>Not exactly; Haskell uses a different semantics for functions and types, so this proof is not directly applicable. In fact Haskell has a proof of soundness of the ST monad specifically</p>",
        "id": 157923696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549705515
    },
    {
        "content": "<p>They use System F for the underlying type theory, which is like <code>Type : Type</code> but without choice and other noncomputable things, so function spaces are \"smaller than they appear\" from the point of view of a rich type theory like lean</p>",
        "id": 157923745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549705620
    },
    {
        "content": "<p>So Haskell's proofs are incorrect? :o</p>",
        "id": 157923754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549705639
    },
    {
        "content": "<p><a href=\"https://www.discogs.com/artist/68181-System-F\" target=\"_blank\" title=\"https://www.discogs.com/artist/68181-System-F\">https://www.discogs.com/artist/68181-System-F</a></p>\n<p>I remember System F from my 90's raving days. Or is this another System F?</p>",
        "id": 157923799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549705694
    },
    {
        "content": "<p>System F is inconsistent with the types-as-sets model</p>",
        "id": 157923803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549705718
    },
    {
        "content": "<p>I'll tell him if I ever run into him again</p>",
        "id": 157923816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549705788
    },
    {
        "content": "<p>Unfortunately wikipedia doesn't say where his name came from</p>",
        "id": 157923865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549705827
    },
    {
        "content": "<p>The type system System F was apparently carefully named though -</p>\n<blockquote>\n<p>According to Girard, the \"F\" in System F was picked by chance.</p>\n</blockquote>",
        "id": 157923878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549705888
    },
    {
        "content": "<p>The quote about where Ferry Corsten got it from on discogs is not backed up by a reliable secondary source.</p>",
        "id": 157923882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549705907
    },
    {
        "content": "<p>It is a very cool name though. You can see why it caught on in the Haskell community.</p>",
        "id": 157923923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549705929
    },
    {
        "content": "<p>Actually, it looks like the haskell implementation is not pure functional, although maybe I peeled back too many layers. Here are two ways to play with mutable variables in Haskell, demonstrating that restoring the state before a write does not actually undo the write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE MagicHash, UnboxedTuples #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.ST</span>\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.Base</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.STRef</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">State</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"kt\">State</span> <span class=\"p\">(</span><span class=\"kt\">State</span><span class=\"o\">#</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"nf\">readST</span> <span class=\"ow\">::</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"kt\">State</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"nf\">readST</span> <span class=\"ow\">=</span> <span class=\"kt\">ST</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"o\">#</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">State</span> <span class=\"n\">s</span> <span class=\"o\">#</span><span class=\"p\">))</span>\n\n<span class=\"nf\">writeST</span> <span class=\"ow\">::</span> <span class=\"kt\">State</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">ST</span> <span class=\"n\">s</span> <span class=\"nb\">()</span>\n<span class=\"nf\">writeST</span> <span class=\"p\">(</span><span class=\"kt\">State</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">ST</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"o\">#</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"nb\">()</span> <span class=\"o\">#</span><span class=\"p\">))</span>\n\n<span class=\"nf\">example1</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span>\n<span class=\"nf\">example1</span> <span class=\"ow\">=</span> <span class=\"n\">runST</span> <span class=\"o\">$</span> <span class=\"kr\">do</span>\n  <span class=\"n\">v</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">newSTRef</span> <span class=\"kt\">False</span>\n  <span class=\"n\">s</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readST</span>\n  <span class=\"n\">a</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readSTRef</span> <span class=\"n\">v</span>\n  <span class=\"n\">writeSTRef</span> <span class=\"n\">v</span> <span class=\"kt\">True</span>\n  <span class=\"n\">writeST</span> <span class=\"n\">s</span>\n  <span class=\"n\">b</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readSTRef</span> <span class=\"n\">v</span>\n  <span class=\"n\">pure</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"nf\">example2</span> <span class=\"ow\">::</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span>\n<span class=\"nf\">example2</span> <span class=\"ow\">=</span> <span class=\"kt\">IO</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">s&#39;</span> <span class=\"ow\">-&gt;</span>\n  <span class=\"kr\">let</span> <span class=\"p\">(</span><span class=\"o\">#</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">#</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">newMutVar</span><span class=\"o\">#</span> <span class=\"kt\">False</span> <span class=\"n\">s&#39;</span> <span class=\"kr\">in</span>\n  <span class=\"kr\">let</span> <span class=\"p\">(</span><span class=\"o\">#</span> <span class=\"kr\">_</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">#</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">readMutVar</span><span class=\"o\">#</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"kr\">in</span>\n  <span class=\"kr\">let</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"n\">writeMutVar</span><span class=\"o\">#</span> <span class=\"n\">v</span> <span class=\"kt\">True</span> <span class=\"n\">s</span> <span class=\"kr\">in</span>\n  <span class=\"kr\">let</span> <span class=\"p\">(</span><span class=\"o\">#</span> <span class=\"kr\">_</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">#</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">readMutVar</span><span class=\"o\">#</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"kr\">in</span>\n  <span class=\"p\">(</span><span class=\"o\">#</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">#</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"n\">print</span> <span class=\"n\">example1</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">example2</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">print</span>\n</pre></div>\n\n\n<p>Each example should print <code>(False, False)</code>. However:</p>\n<div class=\"codehilite\"><pre><span></span>$ runhaskell test.hs\n(False,True)\n(False,True)\n</pre></div>",
        "id": 157926140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549710397
    },
    {
        "content": "<p>It definitely isn't and isn't supposed to be pure functional--all these operations are O(1). In fact they are the same underlying operations used by IO, which is just the ST monad specialized to <code>s = RealWorld</code>. All these \"state token\" types have no representation at runtime.</p>",
        "id": 157931448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549720832
    }
]