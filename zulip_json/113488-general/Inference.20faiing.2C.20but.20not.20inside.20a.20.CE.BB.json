[
    {
        "content": "<p>I just encountered this weird failure of typeclass inference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ιs</span> <span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">ιs</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ιs</span> <span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">ιs</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Any idea why the first one fails and how to make it work again?</p>",
        "id": 233460540,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617789417
    },
    {
        "content": "<p>Looking at <code>trace.class_instances</code>, the first thing it does is <code>@finsupp.add_comm_monoid (?x_1 i) (?x_2 i) (?x_3 i) failed is_def_eq</code>, but that should \"obviously\" be defeq.</p>",
        "id": 233461498,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617789699
    },
    {
        "content": "<p>Aha, the expected type of the instance contains <code>mul_zero_class.to_has_zero</code> and <code>finsupp.add_comm_monoid</code> uses <code>add_zero_class.to_has_zero</code>.</p>",
        "id": 233461855,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617789854
    },
    {
        "content": "<p>And indeed, after <code>local attribute [-instance] mul_zero_class.to_has_zero</code> the first <code>infer_instance</code> works again.</p>",
        "id": 233461963,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617789919
    },
    {
        "content": "<p>So I guess the question is: why is <code>semiring.to_monoid_with_zero.to_mul_zero_class.to_has_zero</code> not defeq to <code>semiring.to_add_comm_monoid.to_add_monoid.to_add_zero_class.to_has_zero</code>, unless you add the λ?</p>",
        "id": 233462268,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617790096
    },
    {
        "content": "<p>I've seen this before, but never worked out what was going on</p>",
        "id": 233469747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617794259
    }
]