[
    {
        "content": "<p>Why do we have these lemmas in <code>data/nat/basic</code>, rather than just having the <code>iff</code> versions that they depend upon?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">dvd_add_left</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat.dvd_add_iff_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">dvd_add_right</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat.dvd_add_iff_right</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 294866281,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1661261663
    },
    {
        "content": "<p>Those actually look better than the ones they are derived from, because their RHS are simpler than their LHS.</p>",
        "id": 294867390,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661262007
    },
    {
        "content": "<p>Are the originals in core?</p>",
        "id": 294868300,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661262303
    },
    {
        "content": "<p>Yep</p>",
        "id": 294869673,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661262699
    },
    {
        "content": "<p>These lemmas are useful -- you can rewrite with them. I used one of them in my ANTS talk two weeks ago in a live proof that there were infinitely many primes. I don't understand the question. What are \"the iff versions\"? The quoted lemmas are iff statements.</p>",
        "id": 294985276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661321386
    },
    {
        "content": "<p>Look at how they're proved!</p>",
        "id": 294985344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661321416
    },
    {
        "content": "<p>Oh, so the answer is just \"core is silly and we don't care enough to change it\"</p>",
        "id": 294985394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661321473
    },
    {
        "content": "<p>Hi Folks! I'm looking to start a project on categories here at the Lean community. I was wondering if anyone could help me out with finding a few of the basic constructions... maybe you know where to look.</p>\n<p>I'd like to be able to:<br>\n1) Create a category given a type for the objects, morphisms, etc. (or some variation of this)<br>\n2) Create the opposite category<br>\n3) Product and internal hom of categories<br>\n4) Isomorphism classes of natural transformations.<br>\n5) Simplicial C w/  for a category C<br>\n6) Full subcategory consisting of objects matching a certain condition<br>\n7) Equalizer and coequilizer of functors.</p>",
        "id": 296443691,
        "sender_full_name": "Dean Young",
        "timestamp": 1661977529
    },
    {
        "content": "<p>[this has been asked again in a more appropriate thread <a href=\"#narrow/stream/113489-new-members/topic/Help.20finding.20some.20category.20definitions/near/296444530]\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Help.20finding.20some.20category.20definitions/near/296444530]</a></p>",
        "id": 296454520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661982064
    }
]