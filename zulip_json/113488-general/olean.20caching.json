[
    {
        "content": "<p>I just created a PR to get <code>git</code> to preserve your <code>olean</code> files and restore them when you switch branches. I'd like to know if it works for people. Please let me know if you try it and if it helps.</p>",
        "id": 135366355,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538947674
    },
    {
        "content": "<p>:D</p>",
        "id": 135366398,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538947726
    },
    {
        "content": "<p>In particular, I'd like to know if it needs to be adapter for windows because I use shell scripts</p>",
        "id": 135366500,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538947922
    },
    {
        "content": "<p>If you manage to allow us to switch mathlib branches back and forth without recompiling I phone the inquisition.</p>",
        "id": 135366580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538948046
    },
    {
        "content": "<p>Let me just delete a branch, one sec</p>",
        "id": 135366585,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948077
    },
    {
        "content": "<p>That would be one sorcery prowess too many for your own good.</p>",
        "id": 135366589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538948096
    },
    {
        "content": "<p>Can the quota be negotiated?</p>",
        "id": 135366693,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948308
    },
    {
        "content": "<p>If you want to try it before the branch is merged, here are the files</p>\n<p><a href=\"/user_uploads/3121/KxJGKo8Df8IDgnEp7wUA57ar/cache_olean.zip\" target=\"_blank\" title=\"cache_olean.zip\">cache_olean.zip</a></p>",
        "id": 135366699,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948341
    },
    {
        "content": "<p>You unzip them in your mathlib directory and call <code>./install_hooks.sh</code></p>",
        "id": 135366707,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948373
    },
    {
        "content": "<p>I'll negociate for you if you manage to convince Travis to put mathlib olean for linux somewhere git will find them each we git pull mathlib</p>",
        "id": 135366752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538948435
    },
    {
        "content": "<p>What it does is:</p>\n<p>* when you commit, it makes a copy of your olean files<br>\n  * when you checkout a branch, it checks if a cache exists for that branch and restores it if one exists<br>\n  * when you rebase a branch A on top of branch B, it caches the files of A and restores the files of B</p>",
        "id": 135366768,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948493
    },
    {
        "content": "<p>just the olean files?</p>",
        "id": 135366769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948504
    },
    {
        "content": "<p>Yes, just the olean files</p>",
        "id": 135366770,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948519
    },
    {
        "content": "<blockquote>\n<p>I'll negociate for you if you manage to convince Travis to put mathlib olean for linux somewhere git will find them each we git pull mathlib</p>\n</blockquote>\n<p>That's a tall order. You're asking for a complete new feature, all I did was a small hack :P</p>",
        "id": 135366815,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948562
    },
    {
        "content": "<p>Actually ... that's feasible</p>",
        "id": 135366831,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948611
    },
    {
        "content": "<p>Actually, I think doing it half-way is more than half-way useful</p>",
        "id": 135366894,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948683
    },
    {
        "content": "<p>Do you guys feel like giving it a spin?</p>",
        "id": 135366921,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948744
    },
    {
        "content": "<p>I'll definitely try tomorrow, but I really need to go to bed now</p>",
        "id": 135366972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538948820
    },
    {
        "content": "<p>I thought you enjoyed working with Lean</p>",
        "id": 135366985,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538948850
    },
    {
        "content": "<p>Sleep well :)</p>",
        "id": 135367104,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538949102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Does this work the same way for packages that include <code>mathlib</code> as a dependency?</p>",
        "id": 135368285,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538951532
    },
    {
        "content": "<p>Wait, maybe that question doesn't make sense.</p>",
        "id": 135368290,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538951581
    },
    {
        "content": "<p>You can make it work in that situation I believe. Once you configured the package, go in <code>_target/deps/mathlib</code> and call <code>./install_hooks.sh</code>. If different versions of the same package use different branches of mathlib, switching between the versions of your package might get cheaper (we'd have to test it to make sure)</p>",
        "id": 135368396,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538951787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>hint: The &#39;.git/hooks/post-checkout&#39; hook was ignored because it&#39;s not set as executable.\nhint: You can disable this warning with `git config advice.ignoredHook false`.\n</pre></div>\n\n\n<p>Should I change the permissions on these files?</p>",
        "id": 135368397,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538951801
    },
    {
        "content": "<p>Yes good idea. And I'll make fixes to the scripts</p>",
        "id": 135368405,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538951829
    },
    {
        "content": "<p>Any luck?</p>",
        "id": 135369137,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538953248
    },
    {
        "content": "<p>I've been switching back and forth between <code>master</code> and <code>tutorials</code> and running <code>lean --make</code> and each time it does a full rebuild. If I do <code>lean --make</code> does that force a rebuild no matter what?</p>",
        "id": 135369336,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538953716
    },
    {
        "content": "<p>I'm on my macbook.</p>",
        "id": 135369338,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538953727
    },
    {
        "content": "<p>No, it doesn't/</p>",
        "id": 135369347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538953787
    },
    {
        "content": "<p>Hmm, my master was out of date. Let me try again.</p>",
        "id": 135369392,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538953819
    },
    {
        "content": "<p>The problem is likely that master has introduced changes to stuff way down the dependency tree.</p>",
        "id": 135369401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538953866
    },
    {
        "content": "<p>If you rebase tutorial onto master it should make life better.</p>",
        "id": 135369406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538953876
    },
    {
        "content": "<p>I think I see what you're saying, but shouldn't caching all the olean files associated to a given commit also preserve the build status?</p>",
        "id": 135369458,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538954001
    },
    {
        "content": "<p>It should. Can you <code>ls .bin/branches</code> and tell me what you get?</p>",
        "id": 135369461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538954041
    },
    {
        "content": "<p>Where's <code>.bin</code>?</p>",
        "id": 135369505,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538954094
    },
    {
        "content": "<p>Oh I see, I guess <code>.bin</code> somehow hasn't been created.</p>",
        "id": 135369569,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538954257
    },
    {
        "content": "<p>It is created when you commit or rebase. You can also manually call <code>.git/hooks/cache_olean.sh</code></p>",
        "id": 135370095,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538955249
    },
    {
        "content": "<p>I ran <code>cache_olean.sh</code> after building on tutorials and master, and the olean files seem to be in .bin/branches/ but running lean --make still starts a rebuild.</p>",
        "id": 135371074,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538956926
    },
    {
        "content": "<p>What if you run <code>restore_olean.sh</code> before rebuilding?</p>",
        "id": 135371280,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957320
    },
    {
        "content": "<blockquote>\n<p>./install_hooks.sh <br>\ncp: .git/hooks: Not a directory</p>\n</blockquote>",
        "id": 135371281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957324
    },
    {
        "content": "<p>Just needs a <code>mkdir -p .git/hooks</code> in <code>install_hooks.sh</code>.</p>",
        "id": 135371293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957374
    },
    {
        "content": "<p>I tried running <code>restore_olean.sh</code> and it's rebuilding again.</p>",
        "id": 135371296,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538957391
    },
    {
        "content": "<p>I pushed a commit that fixes this.</p>",
        "id": 135371359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Can you check what the time stamp is on the most recently modified file in <code>.bin/branches/tutorial</code>? I'm assuming that's the one you're trying to cache.</p>",
        "id": 135371360,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> You're too fast! Thanks!</p>",
        "id": 135371362,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957500
    },
    {
        "content": "<p>Ah, but I fixed the wrong problem.</p>",
        "id": 135371403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957525
    },
    {
        "content": "<p>The actual problem is that I don't have a .git directory.</p>",
        "id": 135371406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957534
    },
    {
        "content": "<p>I have a .git file, because I'm using a submodule.</p>",
        "id": 135371409,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957541
    },
    {
        "content": "<p>Crap...</p>",
        "id": 135371412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957551
    },
    {
        "content": "<p>This is not going to affect many people at all, but I guess I want a fix myself. :-)</p>",
        "id": 135371419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957571
    },
    {
        "content": "<p>Darn! How come you work without git?</p>",
        "id": 135371422,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957577
    },
    {
        "content": "<p>The problem is that I work with git for _everything_. My entire home directory is a giant git repository, and everything else is a git submodule, so things get synchronised between my computers.</p>",
        "id": 135371433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957625
    },
    {
        "content": "<p>Actually, if you go in <code>_target/deps/mathlib</code> and call <code>install_hooks.sh</code> there, I'm hoping that will do the job</p>",
        "id": 135371473,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957645
    },
    {
        "content": "<p>Well, but I mostly want this for mathlib itself.</p>",
        "id": 135371478,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957675
    },
    {
        "content": "<p>Switching between branches that touch tactic/basic.lean is unpleasant...</p>",
        "id": 135371479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957693
    },
    {
        "content": "<p>The timestamps all seem to be from when I ran <code>cache_olean.sh</code>.</p>",
        "id": 135371534,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538957782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, why do you put <code>cache_olean.sh</code> and <code>restore_olean.sh</code> in the <code>.git/hooks</code> directory, rather than leaving them in the root directory?</p>",
        "id": 135371560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> That is useful information. I'll look into preserving time stamps properly</p>",
        "id": 135371597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I want to be able to use the hooks even on branches where the files aren't in the repo</p>",
        "id": 135371606,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957946
    },
    {
        "content": "<p>Ah, good point.</p>",
        "id": 135371621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957992
    },
    {
        "content": "<p>The timestamps of the <code>.lean</code> files are bumped when I checkout a new branch. So do we need the timestamps of the olean files to be more recent than that?</p>",
        "id": 135371622,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538957996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> do you mean that the .lean timestamps are set to the time at which you checkout the files?</p>",
        "id": 135371782,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538958288
    },
    {
        "content": "<p>Yes.</p>",
        "id": 135371788,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538958306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Maybe there's a way to include a search step at the beginning of the script to climb up the directory structure until a <code>.git</code> is found.</p>",
        "id": 135371797,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538958358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> What platform are you on?</p>",
        "id": 135371843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538958370
    },
    {
        "content": "<p>There's a nice fix, almost pushed.</p>",
        "id": 135371844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958380
    },
    {
        "content": "<p><code>git rev-parse --git-dir</code> tells you where your <code>.git</code> directory really is.</p>",
        "id": 135371847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958394
    },
    {
        "content": "<p>e.g. for me: <code>/Users/scott/.git/modules/projects/lean/mathlib</code></p>",
        "id": 135371856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958436
    },
    {
        "content": "<p>Okay, pushed that change.</p>",
        "id": 135371910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958540
    },
    {
        "content": "<p>I think we need more hooks. I want my olean files cached even if we don't  make a commit!</p>",
        "id": 135371918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958565
    },
    {
        "content": "<p>Thanks! Did you put that <code>.git</code> dir in a variable?</p>",
        "id": 135371919,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538958574
    },
    {
        "content": "<p>e.g. I never commit to master, but I want a cache.</p>",
        "id": 135371922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958593
    },
    {
        "content": "<p>Yeah, me too! I haven't found a good hook for that</p>",
        "id": 135371923,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538958595
    },
    {
        "content": "<p>I just have <code>GITDIR=`git rev-parse --git-dir</code> in most of the scripts.</p>",
        "id": 135371959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958603
    },
    {
        "content": "<p>What if when we checkout, we _first_ restore, _then_ cache.</p>",
        "id": 135371971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958619
    },
    {
        "content": "<p>I think we might need to get <code>leanpkg</code> or, emacs / VS code to do that after you build</p>",
        "id": 135371973,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538958627
    },
    {
        "content": "<p>macOS. Not all of the .lean files have their timestamps bumped, but the ones that don't exist in <code>master</code> certainly do.</p>",
        "id": 135371974,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538958628
    },
    {
        "content": "<p>If there was something to restore, then it just harmlessly puts it back again.</p>",
        "id": 135371977,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958634
    },
    {
        "content": "<p>But if there was nothing to restore, then we build a cache?</p>",
        "id": 135371978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958646
    },
    {
        "content": "<p>hmm...</p>",
        "id": 135371979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958654
    },
    {
        "content": "<p>no</p>",
        "id": 135371980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958655
    },
    {
        "content": "<p>because that cache will be wrong. :-)</p>",
        "id": 135371996,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538958676
    },
    {
        "content": "<p>All the files that are changed between branches have their timestamps set to the time I do the checkout.</p>",
        "id": 135372054,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538958812
    },
    {
        "content": "<p>What if on every checkout we:<br>\n1) run cache before checkout (saving the state of the branch we're leaving)</p>",
        "id": 135372179,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959061
    },
    {
        "content": "<p>2) run restore after checkout</p>",
        "id": 135372180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959061
    },
    {
        "content": "<p>3) run cache after that</p>",
        "id": 135372181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959061
    },
    {
        "content": "<p>What a bummer. I found this information here. <a href=\"https://confluence.atlassian.com/bbkb/preserving-file-timestamps-with-git-and-mercurial-781386524.html\" target=\"_blank\" title=\"https://confluence.atlassian.com/bbkb/preserving-file-timestamps-with-git-and-mercurial-781386524.html\">https://confluence.atlassian.com/bbkb/preserving-file-timestamps-with-git-and-mercurial-781386524.html</a></p>\n<p>It recommends a certain build system as a solution</p>",
        "id": 135372182,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> run cache after the restore or after build?</p>",
        "id": 135372223,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959101
    },
    {
        "content": "<p>I was thinking just immediately after the restore.</p>",
        "id": 135372227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959123
    },
    {
        "content": "<p>This has the effect of actually creating the cache merely by checking out.</p>",
        "id": 135372229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959138
    },
    {
        "content": "<p>Otherwise I don't see how a cache for master will ever be created</p>",
        "id": 135372240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959155
    },
    {
        "content": "<p>Could we just <code>touch</code> all the <code>.olean</code> files right before restoring?</p>",
        "id": 135372244,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538959175
    },
    {
        "content": "<p>I think the problem is that risk making things worse.</p>",
        "id": 135372295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959231
    },
    {
        "content": "<p>Yeah</p>",
        "id": 135372296,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959240
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 135372301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959259
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 135372304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959266
    },
    {
        "content": "<p>What I'm thinking of is, after a checkout, look at each lean file and set its time stamp to that of the latest commit that changed it</p>",
        "id": 135372307,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959278
    },
    {
        "content": "<p>oof...</p>",
        "id": 135372309,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959290
    },
    {
        "content": "<p>(Presumably you mean to the time stamp of the corresponding olean file.)</p>",
        "id": 135372341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538959322
    },
    {
        "content": "<p>What if you just don't use <code>cp -a</code>?</p>",
        "id": 135372349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538959341
    },
    {
        "content": "<p>The olean files will all be interpreted as up-to-date but some might not be</p>",
        "id": 135372408,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959499
    },
    {
        "content": "<blockquote>\n<p>(Presumably you mean to the time stamp of the corresponding olean file.)</p>\n</blockquote>\n<p>No. For any source file we need to determine if we need to rebuild it. One information we need is when we last built it which is why we shouldn't overwrite the time stamp of the olean file. The other one is when we last change it which is why we wouldn't want git to overwrite the time stamp of a file but it does.</p>",
        "id": 135372469,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959615
    },
    {
        "content": "<p>I think we'd like to know if the file was built since the last commit that changed it</p>",
        "id": 135372480,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959665
    },
    {
        "content": "<p>This olean caching stuff is really important, and I will be super happy if we can get it working smoothly. I'm not sure I can help at the moment with the timestamp issues, but let me know if there's anything I can do.</p>",
        "id": 135386341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538985484
    },
    {
        "content": "<p>I hope one day we could even build a distributed cache; I could certainly contribute CPU cycles building olean files for central distribution.</p>",
        "id": 135386369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538985558
    },
    {
        "content": "<p>I'll keep at it</p>",
        "id": 135407646,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539009463
    },
    {
        "content": "<p>I just have 17 copies of mathlib saved, so I never have to switch branches.</p>",
        "id": 135420726,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539023642
    },
    {
        "content": "<p>Diskspace is cheap...</p>",
        "id": 135420896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539023821
    },
    {
        "content": "<p>I used to work like that. As the number of branches changes, I find it hard to manage</p>",
        "id": 135421237,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539024157
    },
    {
        "content": "<p>Interesting. I am not really up-to-speed here, but i might be interesting to look at existing tools which address these issues.</p>",
        "id": 135451769,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539072866
    },
    {
        "content": "<p>Specifically, there is 'ninja' a very fast alternative for make.</p>",
        "id": 135451775,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539072888
    },
    {
        "content": "<p>And 'ccache' which caches the compilation of C/C++ files.</p>",
        "id": 135451788,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539072905
    },
    {
        "content": "<p>If lean would have a way to export the \"include\" files, it might be possible to adapt these tools (or use at least their design).</p>",
        "id": 135451800,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539072955
    },
    {
        "content": "<p>My feeling is that connecting .olean files to git branches is pretty fragile \"hacky\".</p>",
        "id": 135451863,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539072998
    },
    {
        "content": "<p>Hashing the source files and having a proxy for returning the right source file in case a hash is already known is a strategy that works well in the OS projects I have been working on.</p>",
        "id": 135451886,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073053
    },
    {
        "content": "<p>lean already uses ninja for compilation</p>",
        "id": 135451892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539073063
    },
    {
        "content": "<p>You would have to hash the file plus the hashes of dependent files, git-style</p>",
        "id": 135451958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539073132
    },
    {
        "content": "<p>Right. The ccache docu explains well what is needed to do this kind of caching.</p>",
        "id": 135451968,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , are you saying lean is using 'ninja' for compiling the lean binary, or is it called as part of 'lean --make'?</p>",
        "id": 135452307,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073491
    },
    {
        "content": "<p>ninja can optionally be used to compile lean itself.  lean --make doesn't use ninja (the equivalent linja tool in Lean 2 did though).  Ninja doesn't do anything more fancy than lean --make, I believe.  (Does ninja use content hashes or modification times?)  Something like ccache might be interesting when switching between branches.</p>",
        "id": 135452480,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539073741
    },
    {
        "content": "<p>Also, to get the dependent files lean already has a command '--deps'.</p>",
        "id": 135452491,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073754
    },
    {
        "content": "<p>Ninja does not do anything more fancy than lean --make, I assume.</p>",
        "id": 135452558,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073851
    },
    {
        "content": "<p>However, it is _very_ fast.</p>",
        "id": 135452561,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073857
    },
    {
        "content": "<p>in checking if files have been modified.</p>",
        "id": 135452568,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073868
    },
    {
        "content": "<p>That is pretty much the least expensive part of running <code>lean --make</code> though.</p>",
        "id": 135452580,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539073892
    },
    {
        "content": "<p>This does not matter for the perf problems we have today, but I feel it will matter in the future.</p>",
        "id": 135452581,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539073893
    },
    {
        "content": "<p>the problem is that the usual dependency analysis will say that too many files are affected and compile them all</p>",
        "id": 135452640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539073977
    },
    {
        "content": "<p>Right, it's more a difference between 5 seconds and 0.01 second on clean builds. It really improves productivity on large C++ code bases and might be useful for lean as well (especially if we interactively want to update proofs).</p>",
        "id": 135452658,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074001
    },
    {
        "content": "<p>Right. Most of likely requires changes in lean proper.</p>",
        "id": 135452665,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074021
    },
    {
        "content": "<p>0.01 second vs 1 second to tell me that nothing needs doing doesn't seem so useful</p>",
        "id": 135452711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539074052
    },
    {
        "content": "<p>but if you could reason that most of the library is unaffected by a new theorem in <code>logic.basic</code> that would be a HUGE gain</p>",
        "id": 135452724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539074086
    },
    {
        "content": "<p>like an hour compilation</p>",
        "id": 135452727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539074097
    },
    {
        "content": "<p>I mean these are orthogonal.</p>",
        "id": 135452737,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074116
    },
    {
        "content": "<p>is it? I'm talking about proper caching and dependency analysis</p>",
        "id": 135452748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539074147
    },
    {
        "content": "<p>You need all a) proper dependency analysis, b) good caching, c) worry about how to check if files have changed.</p>",
        "id": 135452800,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074196
    },
    {
        "content": "<p>ninja is really good in minimizing file IO and stat calls to very quickly check for c)</p>",
        "id": 135452808,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074219
    },
    {
        "content": "<p>If there were thousands of files then I can see this being a problem</p>",
        "id": 135452818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539074254
    },
    {
        "content": "<p>but at that point total compile times will dwarf all of this</p>",
        "id": 135452822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539074276
    },
    {
        "content": "<p>In server mode we don't even do any file IO?  We actually have a precomputed dependency graph.</p>",
        "id": 135452860,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539074284
    },
    {
        "content": "<p>But it does not help with a) and b).</p>",
        "id": 135452893,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074359
    },
    {
        "content": "<p>I see.</p>",
        "id": 135452900,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074365
    },
    {
        "content": "<p>So my feeling is at some point we would just need proper caching in server mode.</p>",
        "id": 135452946,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074404
    },
    {
        "content": "<p>Which would be a lean specific thing, that just needs to be implemented, right?</p>",
        "id": 135452960,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539074428
    },
    {
        "content": "<p>\"just\"</p>",
        "id": 135479143,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539100176
    },
    {
        "content": "<p>:)</p>",
        "id": 135479146,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539100179
    },
    {
        "content": "<p>I have created a branch of <code>ccache</code> to try and add support for Lean. I saw an issue discussion that suggests that it might be a simple business so I thought I'd try it out: <a href=\"https://github.com/leanprover-community/ccache\" target=\"_blank\" title=\"https://github.com/leanprover-community/ccache\">https://github.com/leanprover-community/ccache</a></p>",
        "id": 135500213,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539120305
    },
    {
        "content": "<p>Wow, I've been thinking about doing this for a long time, but didn't think anyone would ever actually go ahead with it...</p>",
        "id": 135500355,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539120446
    },
    {
        "content": "<p>Though are you sure you don't want to modify <a href=\"https://github.com/mozilla/sccache\" target=\"_blank\" title=\"https://github.com/mozilla/sccache\">https://github.com/mozilla/sccache</a> instead :) ?</p>",
        "id": 135500422,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539120486
    },
    {
        "content": "<p>(No idea if it would actually be easier, just newer code base, cloud support, and my preference for Rust)</p>",
        "id": 135500445,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539120515
    },
    {
        "content": "<p>That sounds like an even more useful tool. I don't know what it would take to adapt though</p>",
        "id": 135500578,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539120638
    },
    {
        "content": "<p>Do I understand correctly that it allows sharing binaries between team members or community members?</p>",
        "id": 135500603,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539120666
    },
    {
        "content": "<p>I assume it's intended for sharing with trusted team members. Securing public r/w access to some cloud storage doesn't sound like a simple issue.</p>",
        "id": 135500732,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539120821
    },
    {
        "content": "<p>I think I'll put that issue aside to handle a simpler problem :)</p>",
        "id": 135500844,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539120944
    },
    {
        "content": "<p>Sounds like an important issues, I've seen people discussing assuming <code>nat = int</code>, they probably shouldn't be trusted</p>",
        "id": 135500878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539120962
    },
    {
        "content": "<p>how about we remove <code>*.olean</code> from <code>gitignore</code>?</p>",
        "id": 135500931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539121019
    },
    {
        "content": "<p>It is a big no-no. We don't want to keep the history of those files, we just want appropriate binaries. Keeping those binaries will make <code>git</code> slower and will make merging more complicated.</p>",
        "id": 135501059,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539121200
    },
    {
        "content": "<p>Also <code>olean</code> is OS dependent</p>",
        "id": 135501140,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539121307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> it looks like <code>sccache</code> works with Lean out of the box. You just call <code>sccache leanpkg build</code>. Does that make sense to you?</p>",
        "id": 135501243,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539121417
    },
    {
        "content": "<p>I have no idea. Does it look like it actually does anything?</p>",
        "id": 135501295,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539121449
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> It's not, AFAIK. Though it will be architecture-dependent in Lean 4)</p>",
        "id": 135501320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539121515
    },
    {
        "content": "<p>It does look like it actually calls <code>leanpkg</code> but I'll have to experiment and see if a cache is created.</p>",
        "id": 135501394,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539121609
    },
    {
        "content": "<p>Yes, that would be the important part <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 135501476,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539121715
    },
    {
        "content": "<p>If it does work out of the box, the next step would be integration: how do we make it invisible to the Lean user</p>",
        "id": 135501579,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539121857
    },
    {
        "content": "<p>I think part of it working with <code>leanpkg</code> and <code>elan</code> is to create a symbolic link so that when <code>lean</code> is called, it calls <code>sccache lean</code> instead. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Does that sound like that could break the build system?</p>",
        "id": 135502099,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539122424
    },
    {
        "content": "<p>That could work</p>",
        "id": 135502577,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539122946
    },
    {
        "content": "<p>Right now, I put a shell script called <code>~/.sccache/bin/lean</code> that just prints \"calling lean\" and I put it in my path (I checked with <code>which lean</code>) but <code>leanpkg</code> does not seem to call it</p>",
        "id": 135502811,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539123246
    },
    {
        "content": "<p>oh <a href=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/bin/leanpkg#L24\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/bin/leanpkg#L24\">https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/bin/leanpkg#L24</a></p>",
        "id": 135503095,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539123658
    },
    {
        "content": "<p>So how does <code>elan</code> redirect to the right version of <code>lean</code>?</p>",
        "id": 135503113,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539123707
    },
    {
        "content": "<p>It doesn't in that case, it just calls the right version of <code>leanpkg</code> :)</p>",
        "id": 135503160,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539123731
    },
    {
        "content": "<p>argh!</p>",
        "id": 135503203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539123807
    },
    {
        "content": "<p>Any chance we might hard code <code>ccache</code> or <code>sccache</code> into <code>elan</code>?</p>",
        "id": 135503261,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539123892
    },
    {
        "content": "<p>How would that help?</p>",
        "id": 135503278,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539123926
    },
    {
        "content": "<p>Maybe it could call a <code>leanpkg-2</code> bash script instead of <code>leanpkg</code> and also produce the <code>leanpkg-2</code> script so that the paths are set properly (for <code>sccache</code>). I have a feeling that that bash script did not change a lot between versions. Am I right?</p>",
        "id": 135503369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539124033
    },
    {
        "content": "<p>I see. But if you want to support both <code>sccache leanpkg</code> and <code>sccache lean</code> anyway, are you sure you save any code by making the former call the latter?</p>",
        "id": 135503577,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539124219
    },
    {
        "content": "<p>Actually, what I'd like to do is just replace every call to <code>lean</code> to <code>sccache lean</code>. <code>sccache</code> seems to index its cache by command line arguments.</p>",
        "id": 135503683,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539124350
    },
    {
        "content": "<p>Actually, it might be enough to have <code>elan</code> rename <code>lean</code> to <code>lean-2</code> and create a bash script <code>lean</code> in its place to call <code>sccache</code> when <code>elan</code> downloads a version of <code>lean</code></p>",
        "id": 135503859,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539124556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> It's starting to look to me like we may have to alter the way <code>lean --make</code> works for either of <code>sccache</code> or <code>ccache</code> to be useable</p>",
        "id": 135570892,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539208603
    },
    {
        "content": "<p>I wouldn't be surprised :)</p>",
        "id": 135570906,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539208619
    },
    {
        "content": "<p>Bummer, I was hoping it might be a small(-ish) thing to do</p>",
        "id": 135570924,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539208644
    },
    {
        "content": "<p>I was fully prepared that someone might at some point write an alternative <code>leanpkg</code> that fixes many issues with it (and would probably not be written in Lean)</p>",
        "id": 135571003,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539208741
    },
    {
        "content": "<p>Is there a way to use <code>lean</code> to export all the dependencies in a project? <code>lean --deps</code> seems to interact poorly with leanpkg.toml files</p>",
        "id": 135571113,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539208883
    },
    {
        "content": "<p>If I could use it, maybe I could generate a Makefile (or ninja config?) and that might be a better starting point than <code>lean --make</code></p>",
        "id": 135571264,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539209103
    },
    {
        "content": "<p>I don't think so, you basically have to parse the file header...</p>",
        "id": 135571728,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539209775
    },
    {
        "content": "<p>+1 for 'ninja + make', at best if it's auto-generated from the lean files.</p>",
        "id": 135614724,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270374
    },
    {
        "content": "<p>The other tool I've heard of is Bazel. Have you heard of it and would you endorse it?</p>",
        "id": 135614792,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539270462
    },
    {
        "content": "<p>Never used it.</p>",
        "id": 135615005,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270604
    },
    {
        "content": "<p>I feel it might be too high level.</p>",
        "id": 135615032,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270612
    },
    {
        "content": "<p>In the end we know all dependences.</p>",
        "id": 135615039,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270619
    },
    {
        "content": "<p>And just want to declare them and execute.</p>",
        "id": 135615050,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270633
    },
    {
        "content": "<p>I mean, you might also try to use cmake:<br>\n<a href=\"https://cmake.org/pipermail/cmake/2011-April/043761.html\" target=\"_blank\" title=\"https://cmake.org/pipermail/cmake/2011-April/043761.html\">https://cmake.org/pipermail/cmake/2011-April/043761.html</a></p>",
        "id": 135615213,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270798
    },
    {
        "content": "<p>Not sure if this makes things easier.</p>",
        "id": 135615236,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270830
    },
    {
        "content": "<p>I fell, getting dependences out of lean files is certainly a useful component in any of these tools.</p>",
        "id": 135615286,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539270846
    },
    {
        "content": "<p>In the end, we'll probably need to parse the Lean files ourselves though, no? Unless we can get <code>lean</code> to get them out for us.</p>",
        "id": 135615513,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539271026
    },
    {
        "content": "<p>In the meantime, I started a branch in <code>sccache</code> and I talked to the developers on how to support Lean. It sounds doable. I just need to learn a bit more of Rust. And they seem willing to take our patch</p>",
        "id": 135615802,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539271233
    },
    {
        "content": "<p>Cool. This sounds very exciting, indeed.</p>",
        "id": 135615854,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539271286
    },
    {
        "content": "<p>What is the problem with --deps?</p>",
        "id": 135615893,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539271319
    },
    {
        "content": "<p>As far as I can tell, it just doesn't work properly</p>",
        "id": 135615984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539271375
    },
    {
        "content": "<p>I can't get it to work at the scale of a project. It seems to work off of <code>LEAN_PATH</code> which is no longer required (and indeed harmful) to work with <code>leanpkg</code></p>",
        "id": 135616006,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539271390
    },
    {
        "content": "<p>I see. I have no idea of this code, but fixing it seems the most direct thing to do. In fact, does it do a lot more than parsing the imports?</p>",
        "id": 135616582,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539271912
    },
    {
        "content": "<p>AFAIU it should just parse the imports and then print this to stdout in some way.</p>",
        "id": 135616638,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539271943
    },
    {
        "content": "<p>Simon, have you gotten it to work under any circumstances?</p>",
        "id": 135616639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539271945
    },
    {
        "content": "<p>Oh, I figured out why it is broken. It thinks that the presence of both <code>foo.lean</code> and <code>foo.olean</code> means that the import of <code>foo</code> is ambiguous.</p>",
        "id": 135617597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539272889
    },
    {
        "content": "<p>So, this is something we could work around (in principle, at least)</p>",
        "id": 135617619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539272918
    },
    {
        "content": "<p>I was actually thinking that temporarily setting <code>LEAN_PATH</code> might fix it but I'm not done experimenting with it</p>",
        "id": 135618364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539273657
    },
    {
        "content": "<p>I looked at <code>strace -e trace=file</code> output and it's clearly not failing to find the files it's looking for</p>",
        "id": 135618381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539273683
    },
    {
        "content": "<p>And it is looking in the correct paths as reported by <code>lean -p</code> (and examining the source seems to indicate that <code>lean -p</code> is using the same path information as <code>lean --deps</code>)</p>",
        "id": 135618449,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539273742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Any chance we may get a fix for <code>lean --deps</code>?</p>",
        "id": 135618997,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539274417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Yes, I feel that could be a reasonable change. It would be great if you or someone else could investigate fixing it</p>",
        "id": 135619199,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539274606
    },
    {
        "content": "<p>Sure I'll look into it. Do you have a suggestion of where I should start?</p>",
        "id": 135619323,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539274771
    },
    {
        "content": "<p>The relevant call should be this one: <a href=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/src/shell/lean.cpp#L698\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/src/shell/lean.cpp#L698\">https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/src/shell/lean.cpp#L698</a></p>",
        "id": 135619525,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539274984
    },
    {
        "content": "<p>Wow, <code>display_deps</code> is still testing for <code>.hlean</code> and <code>.lua</code></p>",
        "id": 135619547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539275028
    },
    {
        "content": "<p>What I have inferred from looking at the source and the strace output: Say the module imports <code>data.rbmap</code>. <code>display_deps</code> calls</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">find_file</span><span class=\"p\">(</span><span class=\"n\">search_path</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">paths</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">optional</span><span class=\"o\">&lt;</span><span class=\"kt\">unsigned</span><span class=\"o\">&gt;</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">rel</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">fname</span><span class=\"p\">,</span>\n                      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">initializer_list</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span> <span class=\"k\">const</span> <span class=\"o\">*&gt;</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">extensions</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</pre></div>\n\n\n<p>in <code>src/util/lean_path.cpp</code>. That calls <code>file_path</code> just above, because the import is not relative. That one tries each extension in the given list and pushes all the successes into a list of results.</p>",
        "id": 135619731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539275240
    },
    {
        "content": "<p>Because both <code>data/rbmap/default.lean</code> and <code>data/rbmap/default.olean</code> are found, that function raises an \"ambiguous import\" exception. Then <code>display_deps</code> catches the exception and reports an uninformative \"file not found\" error message.</p>",
        "id": 135619803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539275314
    },
    {
        "content": "<p>You may want to verify this by inserting tracing printfs and/or having <code>display_deps</code> show the original exception</p>",
        "id": 135619828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539275349
    },
    {
        "content": "<p>Wow! you're fast!</p>",
        "id": 135619830,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539275350
    },
    {
        "content": "<p>Nice work! This is the code the regular path uses for importing, you may want to adapt that <a href=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/src/library/module_mgr.cpp\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/src/library/module_mgr.cpp\">https://github.com/leanprover/lean/blob/b13ac127fd83f3724d2f096b1fb85dc6b15e3746/src/library/module_mgr.cpp</a></p>",
        "id": 135619917,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539275416
    },
    {
        "content": "<p>I was just looking into this earlier (see my messages of 42 minutes ago)</p>",
        "id": 135619925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539275419
    },
    {
        "content": "<p>Note that this code already looks completely different in Lean 4. So fixing this would only make sense if it was a big win for Lean 3 users (which a working <code>sccache</code> would probably be)</p>",
        "id": 135620046,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539275554
    },
    {
        "content": "<p>I think it would be. It seems like a small fix on the Lean side and I'm hopeful <code>sccache</code> should be easily ported from Lean 3 to Lean 4 (once it works for Lean 3)</p>",
        "id": 135620153,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539275648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Can I leave that fix to you?</p>",
        "id": 135620168,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539275673
    },
    {
        "content": "<p>I can take a shot at it. We should make sure we have some working setup for <code>sccache</code> before upstreaming the change to Lean though. For testing purposes, you should be able to just remove <code>\".olean\"</code> from the list of extensions in <code>display_deps</code>.</p>",
        "id": 135620573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539276139
    },
    {
        "content": "<blockquote>\n<p>we have some working setup for sccache before upstreaming the change to Lean though</p>\n</blockquote>\n<p>I think the fix is usable on its own. Why do you think we should wait?</p>",
        "id": 135620680,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539276257
    },
    {
        "content": "<p>Only because Lean 3 is currently in this state where it doesn't change without a particularly good reason</p>",
        "id": 135620813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539276439
    },
    {
        "content": "<p>It makes it harder to progress if we wait for everything to be ready before we push anything. If we do the heavy lifting, I don't think they will begrudge us fixing a problem even if the <code>sccache</code> idea doesn't pan out.</p>",
        "id": 135620982,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539276634
    },
    {
        "content": "<p>I just tried removing <code>.olean</code> from the list in <code>display_deps</code> and it's working. Is that a good enough fix?</p>",
        "id": 135624103,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539280048
    },
    {
        "content": "<p>It seems like it should be good enough for us, though there could be other bugs lurking underneath. The other question is whether it would break any other users of Lean and specifically of <code>lean --deps</code>. The only way I could imagine the change breaking a working system is if that system uses out-of-tree builds (output <code>.olean</code> files not located in the same place as the corresponding source files) and also relies on <code>.olean</code> files as inputs without corresponding source <code>.lean</code> files. That seems pretty unlikely to me, considering that lean's library itself is not built out-of-tree, so at a minimum the implicit import of <code>init</code> will fail.</p>",
        "id": 135627574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539283397
    },
    {
        "content": "<p>That's also my impression. I wonder if they had anything else in mind when they put <code>.olean</code> in that list.</p>",
        "id": 135627687,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539283524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Here's the fix that did it for me: <a href=\"https://github.com/cipher1024/lean/commit/d2d81a3539bdf952eaf6126d2be69f2fda0b2f1f\" target=\"_blank\" title=\"https://github.com/cipher1024/lean/commit/d2d81a3539bdf952eaf6126d2be69f2fda0b2f1f\">https://github.com/cipher1024/lean/commit/d2d81a3539bdf952eaf6126d2be69f2fda0b2f1f</a></p>",
        "id": 135627908,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539283773
    },
    {
        "content": "<p>Also, is <code>--make</code> the only way to produce <code>.olean</code> files? For me, even if I give a file name, it seems to build the whole project. Is there any way around that?</p>",
        "id": 135628632,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539284578
    },
    {
        "content": "<p>It should only build the file you specify (and its dependencies if necessary)</p>",
        "id": 135628799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539284738
    },
    {
        "content": "<p>You're right, I misinterpreted what I saw</p>",
        "id": 135628948,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539284882
    },
    {
        "content": "<p>Now with the fix, I managed to build a make file that discovers dependencies and builds what it needs.</p>",
        "id": 135629007,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539284920
    },
    {
        "content": "<p>Nice!</p>",
        "id": 135629452,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539285356
    },
    {
        "content": "<p>I decided to go for bare minimum and only use <code>make</code>. We can make it more sophisticated once we see it is working.</p>",
        "id": 135629798,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539285679
    },
    {
        "content": "<p>Seems like a good idea. Looking forward to checkout the make file.</p>",
        "id": 135629867,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539285741
    },
    {
        "content": "<p>I'll push it in a branch in a moment. If you have comments, I'd love to hear them</p>",
        "id": 135631243,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539287116
    },
    {
        "content": "<p>It won't be functional because I hard coded a path to my Lean version</p>",
        "id": 135631248,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539287153
    },
    {
        "content": "<p>You can use elan to manage your local Lean fork :)</p>",
        "id": 135632212,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539288180
    },
    {
        "content": "<p>Niiice! How?</p>",
        "id": 135632230,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539288208
    },
    {
        "content": "<p><code>elan help toolchain link</code></p>",
        "id": 135632317,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539288274
    },
    {
        "content": "<p>\"crate\", oops</p>",
        "id": 135632390,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539288356
    },
    {
        "content": "<p>Haha! I didn't even notice! I was thinking that you've been pretty thorough in replacing Rust with Lean :)</p>",
        "id": 135632476,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539288408
    },
    {
        "content": "<p>Btw, have you looked at my commit?</p>",
        "id": 135632579,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539288513
    },
    {
        "content": "<p>Yeah, I think it should be fine. You can remove \".lua\" too.</p>",
        "id": 135632845,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539288766
    },
    {
        "content": "<p>Will do!</p>",
        "id": 135632879,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539288801
    },
    {
        "content": "<p>Here we go: <a href=\"https://github.com/leanprover/lean/pull/1978\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1978\">https://github.com/leanprover/lean/pull/1978</a></p>",
        "id": 135634431,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539290201
    },
    {
        "content": "<p>Is it possible to use <code>elan</code> to refer to a specific git commit on github?</p>",
        "id": 135637248,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539293085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span> here is what I did for the Makefile. It generates dependency files for each <code>.lean</code> file before it gets started building any files and the first time you get a lot of error messages because they are missing.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/d090d711c0b438223479635b663e720dab2d07e7\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/d090d711c0b438223479635b663e720dab2d07e7\">https://github.com/leanprover-community/mathlib/commit/d090d711c0b438223479635b663e720dab2d07e7</a></p>",
        "id": 135641178,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539297868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> You use emacs right? What do you use for Rust?</p>",
        "id": 135642448,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539299422
    },
    {
        "content": "<p>Nice. </p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span> here is what I did for the Makefile. It generates dependency files for each <code>.lean</code> file before it gets started building any files and the first time you get a lot of error messages because they are missing.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/d090d711c0b438223479635b663e720dab2d07e7\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/d090d711c0b438223479635b663e720dab2d07e7\">https://github.com/leanprover-community/mathlib/commit/d090d711c0b438223479635b663e720dab2d07e7</a></p>\n</blockquote>\n<p>Now just the sccache needs to work. I feel this might indeed be a great improvement. </p>\n<p>Best Tobias</p>",
        "id": 135655934,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539323111
    },
    {
        "content": "<p>My laptop just crashed while compiling mathlib. This is the first time it crashed in a couple of years. We really need to make mathlib easier on prehistoric hardware <span class=\"emoji emoji-1f409\" title=\"dragon\">:dragon:</span></p>",
        "id": 135919858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539714789
    },
    {
        "content": "<p>I'm sciencing as fast as I can ... it's coming</p>",
        "id": 135923867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539718581
    },
    {
        "content": "<p>or we can make mathlib compile <em>faster</em></p>",
        "id": 135924071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539718805
    },
    {
        "content": "<p>I don't think we should pick just one</p>",
        "id": 135924198,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539718948
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, would you have time to give a status update on <code>sccache</code> integration, in particular pointing out if there are places someone else could help write code/investigate issues/do some research?</p>",
        "id": 147996200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542662449
    },
    {
        "content": "<p>Sure. I can push what I currently have</p>",
        "id": 147996348,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542662562
    },
    {
        "content": "<p>What I did is provide a way for sscache to determine if an olean file is outdated or not through hashing.</p>",
        "id": 147996392,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542662598
    },
    {
        "content": "<p>I'm still struggling to get the tests to pass. I think once that work, we should have a version sscache that can locally cache any lean build we like.</p>",
        "id": 147996477,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542662645
    },
    {
        "content": "<p>I wrote a Makefile to take advantage of it and I pushed it on leanprover-community. I also made a patch to lean itself to fix the way it computes dependencies</p>",
        "id": 147996521,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542662689
    },
    {
        "content": "<p>After I'm done with this part, one possible extension (if you want to spend the time) is figure out how to get some cloud storage to store a Lean cache. That would involve configuring sccache itself and setting up instructions for people who want to access the cache.</p>",
        "id": 147996650,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542662795
    },
    {
        "content": "<p>At this point I see that more as goody than as a must have though</p>",
        "id": 147996663,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542662813
    },
    {
        "content": "<p>I pushed two minor changes to the <code>build-system</code> branch.</p>",
        "id": 148010429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542678027
    },
    {
        "content": "<p>Where is that \"is an olean file outdated, via hashing\" code?</p>",
        "id": 148089909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542778793
    },
    {
        "content": "<p>Using timestamps to decide whether to recompile makes life really difficult. Do we know an obstacle (besides patching Lean), to instead have each olean file contain a hash of its source file and of the olean files for each of its imports? To decide if an olean file is stale or not you would read those hash from the olean file, and compare them against the current hashes of those files.</p>",
        "id": 148090026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542778987
    },
    {
        "content": "<p>Once one <code>.lean</code> file changes, this would propagate staleness of all dependent <code>.olean</code> files.</p>",
        "id": 148090031,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779017
    },
    {
        "content": "<p>And no timestamps would ever be considered.</p>",
        "id": 148090032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779033
    },
    {
        "content": "<p>Or, <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, is this what you've already done?</p>",
        "id": 148090072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779076
    },
    {
        "content": "<p>That's what I'm working on yes. More exactly, when calling <code>sccache lean --make foo.lean</code>, we get the list of modules imported (directly or indirectly) by <code>foo.lean</code>, we hash all of them (including <code>foo.lean</code>) and recompile only if that hash changes.</p>",
        "id": 148090145,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542779229
    },
    {
        "content": "<p>I see -- you hash the source files of the imports, or the olean files?</p>",
        "id": 148090216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779368
    },
    {
        "content": "<p>And this is all being done by the sccache wrapper, with no modification of Lean?</p>",
        "id": 148090260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779407
    },
    {
        "content": "<p>The sources</p>",
        "id": 148090261,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542779409
    },
    {
        "content": "<p>That's correct</p>",
        "id": 148090263,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542779419
    },
    {
        "content": "<p>But won't we then get burnt still by Lean being wrong about what is stale?</p>",
        "id": 148090270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779458
    },
    {
        "content": "<p>I'd like to hash the olean but all the ways I have thought of are flawed</p>",
        "id": 148090279,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542779465
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 148090284,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542779478
    },
    {
        "content": "<p>Say we have files A &lt; B &lt; C, and A and B are already built correctly, according to their hashes, while C needs to be rebuilt.</p>",
        "id": 148090288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779490
    },
    {
        "content": "<p>But suppose the timestamps on A.olean and B.olean are messed up.</p>",
        "id": 148090292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779505
    },
    {
        "content": "<p>When sccache invokes Lean on C.lean, what is to stop Lean from going and recompiling A and B?</p>",
        "id": 148090339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542779529
    },
    {
        "content": "<p>I don't think this will be happening but I have to double check. Maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> can tell us. If we call <code>lean --make foo.lean</code>, will Lean attempt to rebuild any of the dependencies? If so, is there a way to tell it not to?</p>",
        "id": 148090365,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542779642
    },
    {
        "content": "<p>One thing I have considered is to manually set the modification time of the <code>olean</code> files when they don't need to be rebuilt. That should solve the issue.</p>",
        "id": 148090473,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542779825
    },
    {
        "content": "<p>Yeah, that's what I would have proposed, too</p>",
        "id": 148095554,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1542788855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Any updates on the caching front? (Yes, indeed, I thought of it again because I'm currently recompiling... <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span>)</p>",
        "id": 151848308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544901872
    },
    {
        "content": "<p>Haha! I actually managed to make progress on it today and yesterday. Now I'm testing it and I'm hoping I can roll out a version soon</p>",
        "id": 151848324,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544901943
    },
    {
        "content": "<p>Awesome news!</p>",
        "id": 151848327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544901960
    },
    {
        "content": "<p>I managed to build a version that passes all their tests:</p>\n<p><a href=\"https://github.com/leanprover-community/sccache/tree/lean-support-2\" target=\"_blank\" title=\"https://github.com/leanprover-community/sccache/tree/lean-support-2\">https://github.com/leanprover-community/sccache/tree/lean-support-2</a></p>",
        "id": 152043694,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1545067009
    },
    {
        "content": "<p>When I try it with my Makefile though, it fails. There seems to be issue with the timing when <code>sccache</code> produces the binaries</p>",
        "id": 152043765,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1545067073
    },
    {
        "content": "<p>If someone wants to try it for themselves, I can share the Makefile</p>",
        "id": 152043832,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1545067104
    }
]