[
    {
        "content": "<p>Today I came across several instance of <code>have := stuff, exact this</code> closing a goal where <code>exact stuff</code> doesn't. I guess this is yet another elaboration subtlety, but I'd like to know if there is a nicer way to do this in one tactic.</p>",
        "id": 130305391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532556614
    },
    {
        "content": "<p>I use Chris's trick: <code>exact (stuff : _)</code></p>",
        "id": 130314992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532568684
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 130327840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532591498
    },
    {
        "content": "<p>Could we get a mathlib tactic replacing <code>exact</code> which tries <code>exact</code> and then Chris's trick?</p>",
        "id": 130353906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532620586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> : is this a well known bug or a feature?</p>",
        "id": 130353926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532620621
    },
    {
        "content": "<p>I'll go with feature</p>",
        "id": 130354033,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532620709
    },
    {
        "content": "<p>Too easy...</p>",
        "id": 130354040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532620727
    },
    {
        "content": "<p>Seriously, what do I miss to understand this thing?</p>",
        "id": 130354069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532620760
    },
    {
        "content": "<p>I mean, it's clear that omitting the expected type can lead to different elaboration results in some cases, and in some of these cases, the result without expected type may even be preferable. Whether that is something that could be improved in the elaborator can only be decided on a case by case basis.</p>",
        "id": 130354309,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532620965
    },
    {
        "content": "<p>I sort of understand this. What I don't get is how <code>(stuff : _)</code> differs from not specifying the expected type of <code>stuff</code>. Here we really mean underscore, this is not an abbreviation for Zulip purposes.</p>",
        "id": 130354494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532621147
    },
    {
        "content": "<p>Where do you not specify it? If you use <code>exact stuff</code>, the expected type is the goal.</p>",
        "id": 130355110,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532621661
    },
    {
        "content": "<p>In both <code>have := stuff</code> and <code>(stuff : _)</code>, there is no expected type</p>",
        "id": 130355120,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532621681
    },
    {
        "content": "<p>I mean <code>exact stuff</code> versus <code>exact (stuff : _)</code>, both meant to close the current goal.</p>",
        "id": 130355632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532622214
    },
    {
        "content": "<p>Sometimes only the later succeeds</p>",
        "id": 130355646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532622231
    },
    {
        "content": "<p>As I said, only in <code>exact stuff</code> do you have an expected type. It's the goal.</p>",
        "id": 130356150,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532622661
    },
    {
        "content": "<p>Sorry I'm slow.</p>",
        "id": 130356190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532622709
    },
    {
        "content": "<p>But it's really really hot here</p>",
        "id": 130356242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532622731
    },
    {
        "content": "<p>I'm very grateful to spend the remaining summer in the land of air conditioning :)</p>",
        "id": 130356283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532622796
    },
    {
        "content": "<p>USA?</p>",
        "id": 130356295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532622813
    },
    {
        "content": "<p>Yes, I'm doing an internship under Leo until October</p>",
        "id": 130356748,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532623287
    },
    {
        "content": "<p>Oooh, that sounds like a very good idea!</p>",
        "id": 130356771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532623316
    },
    {
        "content": "<p>Hi, all! I have a doubt with the exact tactic. My local context is:</p>\n<p>hQ: Q ∉ r<br>\nH: P = Q<br>\nhP: Q ∈ r<br>\n⊢ false</p>\n<p>and typing \"exact hQ hP,\" closes the goal, but typing \"exact hP hQ,\" does not. I don't understand why. Could sb explain me the difference?</p>",
        "id": 294624018,
        "sender_full_name": "Luis Castillo",
        "timestamp": 1661155402
    },
    {
        "content": "<p><code>Q ∉ r</code> is definitionally <code>Q ∈ r → false</code>. <code>Q ∈ r</code> is <strong>not</strong> definitionally <code>Q ∉ r → false</code>. This requires double negation elimination (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_not\">docs#not_not</a>)</p>",
        "id": 294624818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661155669
    }
]