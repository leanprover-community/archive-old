[
    {
        "content": "<p>So, i have this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">condition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">condOp</span> <span class=\"o\">:</span> <span class=\"n\">condition</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≠</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;=</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&gt;=</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The idea is to wrap those operator so when i want to reason about them all i can use the fact they're all decidable, or i can use a specific operator if i want.<br>\nNow, when i do <code>if (condOp c) x y then ... else ...</code> i get <code>failed to synthesize type class instance for</code>. I understand why but i don't know how to solve it easily.</p>",
        "id": 261714620,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1637100756
    },
    {
        "content": "<p>That's because you never gave the decidable instances. One way to solve this quickly is to add <code>@[derive decidable_eq]</code> (and maybe others) as an attribute.</p>",
        "id": 261714880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637100884
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">condition</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 261715348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637101121
    },
    {
        "content": "<p><code>@[derive decidable_eq]</code> doesn't help, and <code>@[derive decidable_rel]  </code> fail to make instance.</p>",
        "id": 261715689,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1637101287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364007\">Alice Laroche</span> <a href=\"#narrow/stream/113488-general/topic/Automatic.20class.20instance/near/261714620\">said</a>:</p>\n<blockquote>\n<p>Now, when i do <code>if (condOp c) x y then ... else ...</code> i get <code>failed to synthesize type class instance for</code>.</p>\n</blockquote>\n<p>For what though? You cut off the most important part of the message <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>!</p>",
        "id": 261715877,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637101371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">condition</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">condOp</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261715968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637101429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n<span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"o\">:</span> <span class=\"n\">condition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">condition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">condOp</span> <span class=\"o\">:</span> <span class=\"n\">condition</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≠</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;=</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&gt;=</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">condition</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">condOp</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"gr\">sorry</span> <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 261716005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637101442
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"364007\">@Alice Laroche</span> we love <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s here, so everyone can see the same error as you)</p>",
        "id": 261716085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637101473
    },
    {
        "content": "<p>You need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">condOp</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_eq</span>\n<span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≠</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_lt</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_le</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 261716218,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637101552
    },
    {
        "content": "<p>Whoa, that's... verbose, thanks.</p>",
        "id": 261716469,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1637101671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Automatic.20class.20instance/near/261716085\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"364007\">Alice Laroche</span> we love <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s here, so everyone can see the same error as you)</p>\n</blockquote>\n<p>Yeah, i'm bad at giving examples, sorry.</p>",
        "id": 261716614,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1637101722
    },
    {
        "content": "<p>Pretty slick once you know what it does! It's literally deciding all order relations on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>. 6 algorithms (or 3 if you're feeling that way) in 7 lines is not bad.</p>",
        "id": 261716672,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637101757
    },
    {
        "content": "<p>It would be nice to find a shorter proof, but at the end of the day the proof that <code>condOp</code> is decidable really _is_ \"check all six cases explicitly and deal with each separately\". I'm no computer scientist though, there could be a trick to do it all in one go.</p>",
        "id": 261716689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637101770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Automatic.20class.20instance/near/261716672\">said</a>:</p>\n<blockquote>\n<p>Pretty slick once you know what it does! It's literally deciding all order relations on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>. 6 algorithms (or 3 if you're feeling that way) in 7 lines is not bad.</p>\n</blockquote>\n<p>I hopped the deriving syntax could do something, but sadly not.</p>",
        "id": 261716973,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1637101899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">condition</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">condOp</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">condOp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 261716981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637101904
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">condition</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">condOp</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">ne.decidable</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_le</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_lt</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat.decidable_le</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>(thanks <code>show_term</code>)</p>",
        "id": 261717074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637101936
    },
    {
        "content": "<p>Always the semicolon people... <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 261717134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637101972
    },
    {
        "content": "<p>(Oh, Reid beat me to it, though I used <code>rw condOp</code>.)</p>",
        "id": 261717344,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637102052
    },
    {
        "content": "<p>you should use <code>dsimp only [condOp]</code> or <code>dunfold condOp</code> here, because rw/simp will add a rewrite across an equality of propositions, which will cause <code>#reduce</code> / <code>dec_trivial</code> to get stuck on the equality proof</p>",
        "id": 261719482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637103273
    },
    {
        "content": "<p>Right, I was in the mindset of not caring about the definition, but in that case you could just use the classical one</p>",
        "id": 261720039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637103591
    }
]