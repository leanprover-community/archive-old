[
    {
        "content": "<p>Hello</p>\n<p>I am learning LEAN and have run into an issue with the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Literal</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Literal</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">set</span> <span class=\"n\">Literal</span>\n</code></pre></div>\n\n\n<p>The type checker complains about the #check line and I'm not sure why</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">set</span> <span class=\"n\">Literal</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">Literal</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"n\">Lean</span>\n</code></pre></div>\n\n\n<p>If someone could help explain what the issue is or point me in the right direction I'd be greatly appreciative</p>",
        "id": 197743566,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589571649
    },
    {
        "content": "<p>You can use <code>set (Literal nat)</code></p>",
        "id": 197743660,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589571715
    },
    {
        "content": "<p><code>Literal</code> is a function that takes a type <code>Term</code>, and returns a new type.</p>",
        "id": 197743731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589571741
    },
    {
        "content": "<p>You need to apply it to some type to get a <code>Type</code></p>",
        "id": 197743749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589571756
    },
    {
        "content": "<p>UPD: how do you define <code>Term</code>?</p>",
        "id": 197743797,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589571790
    },
    {
        "content": "<p>It seems that <code>Literal</code> takes an argument of type <code>Term</code>, not <code>Type</code></p>",
        "id": 197743854,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589571829
    },
    {
        "content": "<p>Thanks,<br>\nTerm is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n\n\n<p>I think I'm going about this the wrong way...</p>",
        "id": 197743864,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589571833
    },
    {
        "content": "<p>What are you trying to achieve?</p>",
        "id": 197743937,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589571865
    },
    {
        "content": "<p>I'd like a set of elements that are each either of the variants of  Literal</p>",
        "id": 197743948,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589571876
    },
    {
        "content": "<p>I think your definition of <code>Literal</code> does not mean what you think.</p>",
        "id": 197744023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589571897
    },
    {
        "content": "<p>And probably <code>Term</code> as well.</p>",
        "id": 197744046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589571913
    },
    {
        "content": "<p>probably not...</p>",
        "id": 197744082,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589571936
    },
    {
        "content": "<p>So please explain what do you want to achieve with your definitions of <code>Term</code> and <code>Literal</code></p>",
        "id": 197744095,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589571945
    },
    {
        "content": "<p>I would guess what you want is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Literal</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Literal</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span>\n</code></pre></div>",
        "id": 197744105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589571949
    },
    {
        "content": "<p>Or possibly </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Literal</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Literal</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span>\n</code></pre></div>\n\n\n<p>where <code>Term</code> has previously been defined</p>",
        "id": 197744206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589571993
    },
    {
        "content": "<p>Yes, I started with that, then changed my mind for some reason, but probably you are right</p>",
        "id": 197744272,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589572034
    },
    {
        "content": "<p>I want to define a type, Interpretation that is a set of literals where a literal is either true or false and has an associated Term<br>\nI realize I could probably accomplish much of this with the standard lib but it's a learning process <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 197744286,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589572041
    },
    {
        "content": "<p>What is a Term though</p>",
        "id": 197744313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589572062
    },
    {
        "content": "<p>I'm not really sure, in my code so far I have it as a Prop</p>",
        "id": 197744400,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589572095
    },
    {
        "content": "<p>It should probably be a <code>Type</code>, not a <code>Prop</code></p>",
        "id": 197744500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589572165
    },
    {
        "content": "<p>What do you want to do with these types?</p>",
        "id": 197744518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589572174
    },
    {
        "content": "<p>I'm writing stuff for stable model semantics. Just seeing if I can do some basic theorems</p>",
        "id": 197744595,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589572211
    },
    {
        "content": "<p>so what's the thing you want to define/prove?</p>",
        "id": 197744649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589572262
    },
    {
        "content": "<p>I'd like to prove that an interpretation is a model for a logic program<br>\nI thought I'd define all the constructs before hand but maybe that isn't the best place to start</p>",
        "id": 197744848,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589572410
    },
    {
        "content": "<p>I'm going to try getting rid of the parameter on Literal like you suggested and see if that gets me where I want</p>",
        "id": 197745060,
        "sender_full_name": "Spencer Killen",
        "timestamp": 1589572527
    },
    {
        "content": "<p>how about write down the mathematical definitions first</p>",
        "id": 197745093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589572557
    },
    {
        "content": "<p>This logic-type stuff can actually be pretty tricky to formalize even when in a sense nothing much is happening. I mean everyone \"knows\" what a real number is--if you don't really know what one is then you still know that it corresponds to the type <code>real</code>; but it's not so easy to say what a variable is. It doesn't help that sources usually don't explain very clearly what they mean, either.</p>",
        "id": 197745370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589572726
    }
]