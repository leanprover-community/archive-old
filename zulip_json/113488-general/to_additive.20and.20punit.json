[
    {
        "content": "<p>Why does <code>to_additive</code> fail here? There definitely is a <code>has_add</code> instance for <code>punit</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">@[to_additive foo']</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 231542403,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1616533040
    },
    {
        "content": "<p>What is the error message that it gives?</p>",
        "id": 231542648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616533149
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">G</span> <span class=\"bp\">≃+</span> <span class=\"n\">punit</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">punit</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">punit</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">punit</span> <span class=\"n\">punit.comm_ring</span><span class=\"o\">))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_mul</span> <span class=\"n\">punit</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_add</span> <span class=\"n\">punit</span>\n</code></pre></div>",
        "id": 231543379,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1616533406
    },
    {
        "content": "<p>ouch... it's getting the multiplication from the ring structure</p>",
        "id": 231544018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616533699
    },
    {
        "content": "<p>What exactly are you trying to do? Can you abstract <code>punit</code> away? For example by using a subsingleton type?</p>",
        "id": 231544104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616533733
    },
    {
        "content": "<p>I was hoping to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_subsingleton</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and transfer it to additive notation.</p>",
        "id": 231544539,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1616533902
    },
    {
        "content": "<p>If you want to fix this, then you should define <code>@[to_additive] instance punit.has_mul</code>, <code>@[to_additive] instance punit.has_one</code>, in <code>algebra/punit_instances</code>, then make sure that all instances in that file use <code>mul := (*)</code> etc.</p>",
        "id": 231544691,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616533934
    },
    {
        "content": "<p>Okay, I'll give that a go.</p>",
        "id": 231545157,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1616534157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"345682\">@Adrián Doña Mateo</span> So, what I would suggest is that you show that two groups <code>G</code> and <code>H</code> with <code>[unique G]</code> and <code>[unique H]</code> are isomorphic.</p>",
        "id": 231545427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616534275
    },
    {
        "content": "<p>Then you can specialise this to <code>H = punit</code> whenever you want.</p>",
        "id": 231545492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616534287
    },
    {
        "content": "<p>Oh yeah, that makes sense. What is the difference between <code>unique</code> and <code>subsingleton</code>?</p>",
        "id": 231545645,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1616534387
    },
    {
        "content": "<p><code>[unique α]</code> gives you <code>[default α]</code></p>",
        "id": 231546383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616534740
    },
    {
        "content": "<p>But for a <code>[monoid]</code>, you already have <code>1</code>.</p>",
        "id": 231546423,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616534760
    },
    {
        "content": "<p>Right, in this case it wouldn't matter. Thanks a lot!</p>",
        "id": 231546538,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1616534793
    },
    {
        "content": "<p><code>subsingleton</code>s can be empty</p>",
        "id": 231547423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616535186
    }
]