[
    {
        "content": "<p>I like dot notation (writing <code>B.some_function</code> when <code>(B : bla)</code> and <code>bla.some_function</code> is a function which takes an explicit <code>bla</code> parameter), and I know how to use 'at' notation to specify implicit parameters (for example, writing <code>@some_function 5</code> when <code>some_function</code> takes an implicit natural number argument), but I can't seem to use both at the same time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">bla</span> <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"bp\">|</span> <span class=\"n\">A</span>\n<span class=\"kn\">open</span> <span class=\"n\">bla</span> <span class=\"c1\">-- to shorten 'bla.B' to just 'B'</span>\n<span class=\"kd\">def</span> <span class=\"n\">bla.some_function</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bla</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">B.some_function</span><span class=\"o\">)</span> <span class=\"c1\">-- bool, as expected</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.some_function</span><span class=\"o\">)</span> <span class=\"c1\">-- error: unknown identifier 'B.some_function'</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">B.</span><span class=\"bp\">@</span><span class=\"n\">some_function</span><span class=\"o\">)</span> <span class=\"c1\">-- error: command expected</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bla.some_function</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"c1\">-- Π {n : ℕ}, bool, but this is cumbersome</span>\n</code></pre></div>\n<p>Is there a nice way of doing this?</p>\n<p>Alternatively, is there a way to make function parameters implicit within a section, but explicit outside of the section? (Especially when those implicit parameters are declared via <code>variables {X Y Z : bla}</code>?)</p>",
        "id": 216832392,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1605502078
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">explicit</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">bla</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- bla is implicit, X Y Z explicit</span>\n<span class=\"bp\">#</span><span class=\"n\">where</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">implicit</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- bla X Y Z all implicit</span>\n<span class=\"bp\">#</span><span class=\"n\">where</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">implicit</span>\n\n<span class=\"c1\">-- bla is implicit, X Y Z explicit again</span>\n<span class=\"bp\">#</span><span class=\"n\">where</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">explicit</span>\n</code></pre></div>",
        "id": 216837824,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605509904
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/other_commands.html\">https://leanprover.github.io/reference/other_commands.html</a></p>",
        "id": 216837860,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605509958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252278\">Mathieu Guay-Paquet</span> <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20and.20explicit.20implicit.20parameters/near/216832392\">said</a>:</p>\n<blockquote>\n<p>Alternatively, is there a way to make function parameters implicit within a section, but explicit outside of the section? (Especially when those implicit parameters are declared via <code>variables {X Y Z : bla}</code>?)</p>\n</blockquote>\n<p>This is approximately what <code>parameters (X Y Z : bla)</code> does, though there are some rough edges.</p>",
        "id": 216849797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605519769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , I don't think that's what I'm looking for, but thanks for teaching me about <code>#where</code>, that's super useful!</p>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> , I hadn't thought of <code>parameters</code> that way, interesting. Unfortunately I think that makes the value essentially fixed for the whole section, yes? My use case is that I have some function arguments which are usually inferrable (with different values each time) within a section containing a bunch of related lemmas about a <code>structure</code> type, but outside of this section it's useful to specify these function arguments explicitly (for example, to call the tactic <code>by rw [some_equation_lemma]</code> successfully, I don't think <code>some_equation_lemma</code> can contain implicit function arguments).</p>",
        "id": 216966044,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1605587897
    },
    {
        "content": "<p>Or, more accurately, something like <code>by rw [my_struct_value.some_equation_lemma X Y]</code>.</p>",
        "id": 216966074,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1605587997
    },
    {
        "content": "<p>I see, this doesn't exist then. I think Coq has some thing where you can change implicitness of arguments after the fact, but in Lean it's fixed.</p>",
        "id": 216993635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605614251
    },
    {
        "content": "<p>Ah ok, at least I can stop looking now, thanks!</p>",
        "id": 217026621,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1605630633
    }
]