[
    {
        "content": "<p>I always have a hard time finding instance definitions. Is there some algorithmic approach?</p>\n<p>I am working on Scott's <code>enriched</code> branch of mathlib. He's pointed me to some <code>sorry</code>s and I'm trying to fill them in, but I need to learn the library. For definitions I don't know, I just right click. But for type classes I sometimes get stuck. For example, I realised in a file that <code>Type</code> was a monoidal category. I tried</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">fooz</span> <span class=\"o\">:</span> <span class=\"n\">monoidal_category</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>and it worked, so he's given <code>Type</code> the structure of a <code>monoidal_category</code>, which is a typeclass whose definition I can see. One of the fields of this typeclass is <code>tensor_unit</code>. So I now want to see the definition of <code>tensor_unit</code> in <code>fooz</code> because I want to know the definition of this field for <code>Type</code>. I try this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">fooz</span><span class=\"o\">:</span> <span class=\"n\">monoidal_category</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">fooz</span>\n</pre></div>\n\n\n<p>and I find </p>\n<div class=\"codehilite\"><pre><span></span>def Module.fooz : monoidal_category Type :=\nconcrete_monoidal_category.to_monoidal_category Type\n</pre></div>\n\n\n<p>OK great. So now I discover there is a new class <code>concrete_monoidal_category C</code>. I can find the definition, and see it extends <code>concrete_category C</code> and <code>monoidal_category C</code>. I then try this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">barz</span> <span class=\"o\">:</span> <span class=\"n\">concrete_monoidal_category</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">barz</span>\n</pre></div>\n\n\n<p>and I see</p>\n<div class=\"codehilite\"><pre><span></span>def Module.barz : concrete_monoidal_category Type :=\ncategory_theory.concrete_monoidal_category\n</pre></div>\n\n\n<p>and now the trail has basically run dry. </p>\n<p>There must be a better way to do this. It is not specifically this question I'm interested in -- this is most definitely not the first time this has happened to me. I'd like to be able to get to the bottom of these things myself instead of having to ask.</p>",
        "id": 190610114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584213828
    },
    {
        "content": "<p>I don't understand yet why the trail has run dry. What is <code>category_theory.concrete_monoidal_category</code>? If you <code>#check category_theory.concrete_monoidal_category</code> and use jump to definition on it, where does it take you?</p>",
        "id": 190610356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584214092
    },
    {
        "content": "<p>I guess another approach would be this:</p>\n<div class=\"codehilite\"><pre><span></span>#check monoidal_category.tensor_unit Type\n-- ùüô_ Type : Type\n</pre></div>\n\n\n<p>(the funny 1 is just notation). I want to know what term this unfolds to, ideally by just looking at the code. I was expecting it to be <code>unit</code> but <code>example : monoidal_category.tensor_unit Type = unit := rfl</code> fails</p>",
        "id": 190610413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214111
    },
    {
        "content": "<p>Well, I would guess <code>punit</code> next</p>",
        "id": 190610415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584214136
    },
    {
        "content": "<p>But I know it's not your real question</p>",
        "id": 190610423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584214145
    },
    {
        "content": "<p>That was the other thing I tried and it was when that failed that I started on the typeclass woozle-hunt.</p>",
        "id": 190610442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214166
    },
    {
        "content": "<p>Aaah, that's another thing we can fix in Lean 3.8. <code>unit</code> should be <code>punit : Type</code></p>",
        "id": 190610482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214187
    },
    {
        "content": "<p>Ah, is the problem somehow that the information you need is in an implicit argument of <code>category_theory.concrete_monoidal_category</code>?<br>\nI haven't looked at the code, but so far I am as confused as you</p>",
        "id": 190610484,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584214192
    },
    {
        "content": "<p>It might be a universe issue but I thought it would be easier to look than to guess.</p>",
        "id": 190610485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214196
    },
    {
        "content": "<p>I don't understand why the code compiles:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">concrete_monoidal_category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lax_monoidal</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">lax_monoidal_id</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 190610540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214226
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">concrete_monoidal_category</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"kn\">extends</span> <span class=\"n\">concrete_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">monoidal_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lax_monoidal</span> <span class=\"o\">:</span> <span class=\"n\">lax_monoidal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">concrete_category</span><span class=\"bp\">.</span><span class=\"n\">forget</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am surprised there is no <code>..[the stuff I want to see]</code> in the definition</p>",
        "id": 190610559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214265
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monoidal/types.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monoidal/types.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monoidal/types.lean</a></p>",
        "id": 190610577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214293
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monoidal/of_has_finite_products.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monoidal/of_has_finite_products.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/monoidal/of_has_finite_products.lean</a></p>",
        "id": 190610584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214314
    },
    {
        "content": "<p><em>boggle</em> so it's <code>terminal Type</code>?</p>",
        "id": 190610631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214351
    },
    {
        "content": "<p>Yup...</p>",
        "id": 190610636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214365
    },
    {
        "content": "<p>I would hope that is <code>(p)unit</code></p>",
        "id": 190610644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214383
    },
    {
        "content": "<p>Isn't terminal <code>Type</code> defined to be <code>punit</code>?</p>",
        "id": 190610646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584214388
    },
    {
        "content": "<p>I still don't see why the code compiles.</p>",
        "id": 190610649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214392
    },
    {
        "content": "<p>That instance definition doesn't seem to give enough fields, or any indication as to where the extra fields are coming from.</p>",
        "id": 190610663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214425
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">concrete_category</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"kn\">extends</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">forget_faithful</span> <span class=\"o\">:</span> <span class=\"n\">faithful</span> <span class=\"n\">forget</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span> <span class=\"n\">prio</span>\n</pre></div>\n\n\n<p>Those fields are all missing in the instance definition.</p>",
        "id": 190610781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214491
    },
    {
        "content": "<p>There is some wizardry going on.</p>",
        "id": 190610791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214502
    },
    {
        "content": "<p>Or does <code>terminal Type</code> come from some <code>has_limits</code> definition, so I'm guessing <code>pempty -&gt; pempty</code></p>",
        "id": 190610803,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584214558
    },
    {
        "content": "<p>Chris do you understand how that instance code can possibly compile when not all fields are defined?</p>",
        "id": 190610848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214591
    },
    {
        "content": "<p>Fields of the form <code>[foobar X]</code> are filled in by typeclass search. You don't need to give them.</p>",
        "id": 190610858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214623
    },
    {
        "content": "<p>But <code>forget</code> is not marked in that way.</p>",
        "id": 190610865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214649
    },
    {
        "content": "<p>Fields of the form <code>(foobar X . obviously)</code> are filled in by <code>tidy</code>. You hopefully don't need to give them.</p>",
        "id": 190610866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214651
    },
    {
        "content": "<p>But <code>forget</code> doesn't have the <code>obviously</code> autoparam either.</p>",
        "id": 190610871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214669
    },
    {
        "content": "<p>Hmmm,... where is this definition that you are talking about?</p>",
        "id": 190610917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214692
    },
    {
        "content": "<p>Aaah, found it</p>",
        "id": 190610925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214723
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/bc36a65c8da72345bdae5af67eec1c11dd62f680/src/category_theory/enriched/examples.lean#L12\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/bc36a65c8da72345bdae5af67eec1c11dd62f680/src/category_theory/enriched/examples.lean#L12\">https://github.com/leanprover-community/mathlib/blob/bc36a65c8da72345bdae5af67eec1c11dd62f680/src/category_theory/enriched/examples.lean#L12</a></p>",
        "id": 190610926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214730
    },
    {
        "content": "<p>I was just playing with this <code>sorry</code>, figuring out what it actually said etc.</p>",
        "id": 190610935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214746
    },
    {
        "content": "<p>and the goal for that first <code>sorry</code> is <code>‚ä¢ ùüô_ Type ‚ü∂ (concrete_category.forget (Module ‚Ñ§)).obj (ùüô_ (Module ‚Ñ§))</code></p>",
        "id": 190611044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214812
    },
    {
        "content": "<p>Maybe unification takes care of all the other fields?</p>",
        "id": 190611049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584214828
    },
    {
        "content": "<p>and I just got interested in the definition of <code>ùüô_ Type</code></p>",
        "id": 190611056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214834
    },
    {
        "content": "<p>I'm very impressed if type class unification can solve <code>faithful ?m_1</code> and then unification can solve <code>?m_1</code>!</p>",
        "id": 190611083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214895
    },
    {
        "content": "<p>Oh -- but perhaps unification can solve it first.</p>",
        "id": 190611087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214906
    },
    {
        "content": "<p>Probably this is not even the right question (the actual definition of the term), but I was surprised I couldn't answer it by inspecting the code.</p>",
        "id": 190611144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584214962
    },
    {
        "content": "<p>The definition of the map should be done just using the universal properties of the term.</p>",
        "id": 190611153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584215010
    },
    {
        "content": "<p><code>example : monoidal_category.tensor_unit Type = limits.terminal Type := rfl</code> btw</p>",
        "id": 190611260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584215177
    },
    {
        "content": "<p><code>Œµ := Œª _, 0,</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 190612850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584217525
    },
    {
        "content": "<p>and we will never know the definition of the source :-)</p>",
        "id": 190612856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584217543
    }
]