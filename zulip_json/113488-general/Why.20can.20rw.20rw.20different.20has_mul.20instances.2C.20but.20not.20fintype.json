[
    {
        "content": "<p>In the following code, <code>rw</code> manages to recognize that two different expressions involving different paths of inferring the <code>has_mul</code> type class are equal. It can't do this with two definitionally equal <code>fintype</code> instances however. What's the difference between <code>has_mul</code> and <code>fintype</code> that leads to this behaviour?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">int2</span> <span class=\"o\">:=</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">int2</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_times_two</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c\">/-</span><span class=\"cm\">@eq int2</span>\n<span class=\"cm\">    (@has_mul.mul int2</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_mul int2</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class int2 (@ring.to_semiring int2 (@comm_ring.to_ring int2 int2.comm_ring))))</span>\n<span class=\"cm\">       1</span>\n<span class=\"cm\">       2)</span>\n<span class=\"cm\">    2-/</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">int2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">int2</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">int2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\">@eq int2</span>\n<span class=\"cm\">    (@has_mul.mul int2</span>\n<span class=\"cm\">       (@no_zero_divisors.to_has_mul int2</span>\n<span class=\"cm\">          (@domain.to_no_zero_divisors int2 (@integral_domain.to_domain int2 int2.integral_domain)))</span>\n<span class=\"cm\">       1</span>\n<span class=\"cm\">       2)</span>\n<span class=\"cm\">    2-/</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_times_two</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bool2</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">bool2</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_bool1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">bool2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bool2_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">bool2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">},</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bool2_fintype3</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">bool2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">{</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">},</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_bool2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">bool2</span> <span class=\"n\">bool2_fintype</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">card_bool1</span> <span class=\"c1\">-- They are defeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_bool3</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">bool2</span> <span class=\"n\">bool2_fintype</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_bool1</span><span class=\"o\">,</span> <span class=\"c1\">--doesn&#39;t work</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_bool4</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">bool2</span> <span class=\"n\">bool2_fintype3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">card_bool1</span>\n</pre></div>",
        "id": 128082489,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529005626
    },
    {
        "content": "<p>what error do you get?</p>",
        "id": 128082839,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529006052
    },
    {
        "content": "<p>I accidentally gave an example that did work. I've just edited it.</p>",
        "id": 128083025,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529006337
    },
    {
        "content": "<p><code>card_bool2</code> works not because they're defeq, but perhaps because it knows fintype is a subsingleton.</p>",
        "id": 128083327,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529006753
    },
    {
        "content": "<p>I think it works because it reduced both <code>card_bool1</code> and <code>card_bool2</code> to <code>2 = 2</code></p>",
        "id": 128083559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529007042
    },
    {
        "content": "<p>it = <code>card_bool2</code></p>",
        "id": 128083570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529007062
    },
    {
        "content": "<p>I don't know why your <code>rw one_times_two</code> works though.</p>",
        "id": 128083640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529007154
    },
    {
        "content": "<p>Yeah, rw is usually really snotty about things like this</p>",
        "id": 128083660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529007197
    }
]