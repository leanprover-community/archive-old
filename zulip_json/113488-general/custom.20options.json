[
    {
        "content": "<p>I noticed that in Lean 4 you can make your own options with <code>register_option</code>:<br>\n<a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/options.md#making-our-own\">https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/options.md#making-our-own</a></p>\n<p>Does this feature exist in Lean 3?</p>",
        "id": 300009798,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663782940
    },
    {
        "content": "<p>Unfortunately not. I think the closet thing you can do is register a tracing option. Which in the past people have (ab)used to pretend it's like a normal option</p>",
        "id": 300012423,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663783767
    },
    {
        "content": "<p>I'd be up for that abuse, do you know of an example I could look at?</p>",
        "id": 300013641,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663784211
    },
    {
        "content": "<p>I'm on mobile, but i found the thread I'm thinking of <a href=\"#narrow/stream/113488-general/topic/A.20useless.20option.20which.20I.20can.20use.20for.20another.20purpose.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/A.20useless.20option.20which.20I.20can.20use.20for.20another.20purpose.3F</a></p>",
        "id": 300016797,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663785322
    },
    {
        "content": "<p>I can look a bit later for something more specific</p>",
        "id": 300016864,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663785349
    },
    {
        "content": "<p>Thanks!  I see that I can register my fake tracing option using <code>declare_trace</code>; I think the only other thing I need to know is how to access the state of the option within meta code.</p>",
        "id": 300018432,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663785904
    },
    {
        "content": "<p>Here's another reference I found: <a href=\"#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/296282435\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Chapter.203.20coordination/near/296282435</a> (it uses the <code>declare_trace</code> hack)</p>",
        "id": 300018492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663785927
    },
    {
        "content": "<p>I believe the function is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.get_bool_option\">docs#tactic.get_bool_option</a></p>",
        "id": 300018538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663785949
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, I got it working!  See <a href=\"https://github.com/leanprover-community/mathlib/pull/16586\">#16586</a> for my use case.</p>",
        "id": 300043123,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663796109
    },
    {
        "content": "<p>Nice work!</p>",
        "id": 300086901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663829317
    }
]