[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">sub_pos_of_lt</span>\n<span class=\"c1\">-- sub_pos_of_lt : ?M_4 &lt; ?M_3 → 0 &lt; ?M_3 - ?M_4</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">sub_neg_of_lt</span>\n<span class=\"c1\">-- sub_neg_of_lt : ?M_3 &lt; ?M_4 → ?M_3 - ?M_4 &lt; 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">sub_nonpos_of_le</span>\n<span class=\"c1\">-- sub_nonpos_of_le : ?M_3 ≤ ?M_4 → ?M_3 - ?M_4 ≤ 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">sub_nonneg_of_le</span>\n<span class=\"c1\">-- sub_nonneg_of_le : ?M_4 ≤ ?M_3 → 0 ≤ ?M_3 - ?M_4</span>\n</pre></div>",
        "id": 125982093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525246903
    },
    {
        "content": "<p>but I know the answer already: this is in core so we can't do nothing about it</p>",
        "id": 125982096,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525246912
    },
    {
        "content": "<p>what's the issue?</p>",
        "id": 125984462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525251420
    },
    {
        "content": "<blockquote>\n<p>what's the issue?</p>\n</blockquote>\n<p>shouldn't one be <code>lt</code> and the other be <code>gt</code>?</p>",
        "id": 125985953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525254056
    },
    {
        "content": "<p>no? there is no usage of <code>gt</code> in those lemmas</p>",
        "id": 125986033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525254187
    },
    {
        "content": "<p>I mean, how can both be lt</p>",
        "id": 125986036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525254196
    },
    {
        "content": "<p>so does lt imply sub_pos or sub_neg?</p>",
        "id": 125986038,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525254202
    },
    {
        "content": "<p>both...</p>",
        "id": 125986043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525254234
    },
    {
        "content": "<p>it's just a matter of where the variables go</p>",
        "id": 125986084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525254253
    },
    {
        "content": "<p>in mathlib the analogous theorem is just called <code>sub_pos</code></p>",
        "id": 125986096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525254314
    },
    {
        "content": "<p>aha</p>",
        "id": 125986101,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525254331
    },
    {
        "content": "<p>Lol, we need Lean to generate the names for us, given the type. Then we can have <em>provably correct names</em></p>",
        "id": 125986144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525254376
    },
    {
        "content": "<p>although the usage of <code>pos</code> and <code>neg</code> as names for &gt;0 and &lt;0 is problematic since it overlaps <code>neg</code> meaning <code>-x</code></p>",
        "id": 125986147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525254395
    },
    {
        "content": "<p>maybe <code>-x</code> should be called <code>minus</code> instead of <code>neg</code>?</p>",
        "id": 125991698,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525265021
    },
    {
        "content": "<p>What is the correct name for the following class?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">give_me_a_name</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193152113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586246583
    },
    {
        "content": "<p>a pomonoid :-)</p>",
        "id": 193152412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586246774
    },
    {
        "content": "<p>Cancellative partially ordered monoid?</p>",
        "id": 193152957,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586247103
    },
    {
        "content": "<p>Is it equivalent to $a b \\le a c \\iff b \\le c$ ?</p>",
        "id": 193153034,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586247132
    },
    {
        "content": "<p>Ahh I guess its not right, if I take $\\ZZ_{\\ge 0}$ then $0 * 3 \\le  0 * 1$ but $3 \\le 1$ is false.</p>",
        "id": 193153134,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586247208
    },
    {
        "content": "<p>Yes, this all comes up from the general \"group with 0\" thing meant to encapsulate targets of valuations/norms such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 193153849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586247624
    },
    {
        "content": "<p>Yeah I found several references online to translation invariant monoids and pomonoids, but they all mean this stronger thing.</p>",
        "id": 193154062,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586247763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/naming.20issues/near/193152957\" title=\"#narrow/stream/113488-general/topic/naming.20issues/near/193152957\">said</a>:</p>\n<blockquote>\n<p>Cancellative partially ordered monoid?</p>\n</blockquote>\n<p>You might want to call it an <code>ordered_comm_monoid</code>... but those already exist: just replace <code>*</code> with <code>+</code> in the definition.</p>",
        "id": 193154072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586247772
    }
]