[
    {
        "content": "<p>Hello,<br>\nthe Hitchhiker's Guide contains the following lemma :</p>\n<p>lemma cong_fst_arg {α : Type} (a a' b : α)<br>\n  (f : α → α → α) (ha : a = a') :<br>\n  f a b = f a' b :=<br>\nbegin<br>\n  apply eq.subst ha<br>\n  apply refl<br>\nend</p>\n<p>... which I am trying to convert to Lean 4:</p>\n<p>theorem cong_fst_arg {α : Type} (a a' b : α)<br>\n  (f : α → α → α) (ha : a = a') :<br>\n  f a b = f a' b := by<br>\n  --apply Eq.subst ha<br>\n  -- apply Eq.refl</p>\n<p>Unfortunately, both apply tactics fail. </p>\n<p>Any help would be much appreciated.</p>\n<p>Many thanks.</p>\n<p>P</p>",
        "id": 230338524,
        "sender_full_name": "Phiroc",
        "timestamp": 1615812615
    },
    {
        "content": "<p>I would've written <code>rw ha</code> for the first line in lean3; maybe that's easier to convert?</p>",
        "id": 230339553,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615813134
    },
    {
        "content": "<p>That did it. Many thanks Ruben.</p>",
        "id": 230352401,
        "sender_full_name": "Phiroc",
        "timestamp": 1615818243
    },
    {
        "content": "<p>It seems like Lean 4's higher-order unification is weaker than Lean 3's. Here's a working proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cong_fst_arg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n</code></pre></div>\n<p>Lean 4 apparently fails to infer the <code>motive</code> while Lean 3 manages. This is an example of higher-order unification (since <code>motive</code> is a function), which is undecidable in general. Dependently typed languages generally support limited forms of higher-order unification to deal with 'practical' examples like this, but it seems like Lean 4 has opted not to make it very strong.</p>",
        "id": 230352800,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1615818381
    },
    {
        "content": "<p>It's the elaborator that changed, not the unifier per se. See <a href=\"#narrow/stream/270676-lean4/topic/type.20mismatch.20error/near/225228721\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/type.20mismatch.20error/near/225228721</a>.</p>",
        "id": 230353447,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615818614
    },
    {
        "content": "<p>Ah yes, thanks! So the canonical answer is to always use tactics to apply things that require higher-order unification?</p>",
        "id": 230354026,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1615818823
    },
    {
        "content": "<p>No, definitely not always. Even just calling a monadic function involves higher-order unification. But when there is something like a motive to be found, tactics are probably the correct answer, yes.</p>",
        "id": 230354398,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615818952
    },
    {
        "content": "<p>To summarize, what is the most efficient way to translate the above code to Lean 4?</p>",
        "id": 230355326,
        "sender_full_name": "Phiroc",
        "timestamp": 1615819263
    },
    {
        "content": "<p>The idiomatic way is <code>rw ha</code>. I suspect that this example is meant to show what <code>rw</code> generates under the hood, so if you want to translate exactly that, my version with the explicit motive seems like the way to go.</p>",
        "id": 230356606,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1615819740
    },
    {
        "content": "<p>In Lean 4, we have a custom elaborator for constructing <code>Eq.rec</code>: <code>h1 ▸ h2</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cong_fst_arg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230532215,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615908279
    }
]