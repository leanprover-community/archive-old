[
    {
        "content": "<p>Lean produces some rather odd variable names when you let it name them.   Often they seem to include the character <code>ᾰ</code>, but sometimes not.  For example I have seen it generate the variable name <code>s_ᾰ_1</code> in one proof and then moments later it in the same proof it generates the the much nicer name of <code>ih</code> for something else.  For code-golf I would like to be able to predict these somewhat so I can make informed decisions, and try to steer them towards shorter names without the unweildy <code>with</code> statements.  How does it generate these?  And why does it sometimes generate nice names and sometimes not?</p>",
        "id": 256957835,
        "sender_full_name": "É Olive",
        "timestamp": 1633874796
    },
    {
        "content": "<p>Eh, I think you're in for some trouble because Lean names variables weirdly to avoid clashing. When it names \"nicely\", it's because it's using some recursor/ext lemma under the hood where the introduced variable is named, in which case that name is used.</p>",
        "id": 256958742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633875583
    },
    {
        "content": "<p>For example, when the goal has an outer <code>forall</code>, <code>intros</code> will introduce the variable and give it the name of the variable in the binder.</p>",
        "id": 256958849,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633875656
    },
    {
        "content": "<p>For code golf, you can use french quoted underscore to have a short way of saying \"by assumption\"</p>",
        "id": 256960369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633876947
    },
    {
        "content": "<p>The <code>ᾰ</code> is not only trying to avoid clashing with things you named yourself, it is also explicitly trying to discourage you from using it. If you need to refer to it then you should provide a name.</p>",
        "id": 256961982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633878481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/How.20does.20Lean.20name.20new.20variables.3F/near/256958742\">said</a>:</p>\n<blockquote>\n<p>Eh, I think you're in for some trouble because Lean names variables weirdly to avoid clashing. When it names \"nicely\", it's because it's using some recursor/ext lemma under the hood where the introduced variable is named, in which case that name is used.</p>\n</blockquote>\n<p>The <code>forall</code> and <code>intro</code>/<code>intros</code> makes sense to me, but I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"bp\">∀</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">rev</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rev</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">conv</span>\n      <span class=\"o\">{</span> <span class=\"n\">to_rhs</span>\n      <span class=\"o\">,</span> <span class=\"n\">rw</span><span class=\"bp\">&lt;-</span><span class=\"n\">r</span> <span class=\"n\">t</span>\n      <span class=\"o\">}</span>\n    <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">;</span> <span class=\"n\">induction</span> <span class=\"n\">rev</span> <span class=\"n\">t</span>\n    <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=universe%20u%0Avariables%20%7BA%20%3A%20Type%20u%7D%0Anamespace%20mylist%0A%0Ainductive%20list%20%28T%20%3A%20Type%20u%29%20%3A%20Type%20u%0A%7C%20nil%20%3A%20list%0A%7C%20cons%20%3A%20T%20%E2%86%92%20list%20%E2%86%92%20list%0A%0Ainfixr%20%60%20%3A%3A%20%60%3A67%20%3A%3D%20list.cons%0Anotation%20%60%5B%5D%60%20%3A%3D%20list.nil%0A%0Adef%20append%20%3A%20list%20A%20%E2%86%92%20list%20A%20%E2%86%92%20list%20A%0A%7C%20%5B%5D%20t%20%3A%3D%20t%0A%7C%20%28h%20%3A%3A%20s%29%20t%20%3A%3D%20h%20%3A%3A%20%28append%20s%20t%29%0Ainstance%20%3A%20has_append%20%28list%20A%29%20%3A%3D%20%E2%9F%A8%40append%20A%E2%9F%A9%0A%0A%40%5Bsimp%5D%20lemma%20nil_append%20%28s%20%3A%20list%20A%29%20%3A%20%5B%5D%20%2B%2B%20s%20%3D%20s%20%3A%3D%20rfl%0A%40%5Bsimp%5D%20lemma%20cons_append%20%28x%20%3A%20A%29%20%28s%20t%20%3A%20list%20A%29%20%3A%20%28x%20%3A%3A%20s%29%20%2B%2B%20t%20%3D%20x%20%3A%3A%20%28s%20%2B%2B%20t%29%20%3A%3D%20rfl%0A%0A%40%5Bsimp%5D%20def%20rev%20%3A%20list%20A%20%E2%86%92%20list%20A%0A%7C%20%5B%5D%20%3A%3D%20%5B%5D%0A%7C%20%28h%20%3A%3A%20t%29%20%3A%3D%20rev%20t%20%2B%2B%20%28h%20%3A%3A%20%5B%5D%29%0A%0A---%0A--%20edit%20this%20region%20to%20solve%20the%20challenge%0Adef%20r%3A%E2%88%80s%2Crev%28%40rev%20A%20s%29%3Ds%0A%7C%20%5B%5D%20%3A%3D%0A%20%20rfl%0A%7C%20%28x%3A%3At%29%20%3A%3D%0A%20%20by%0A%20%20%20%20%7B%20conv%0A%20%20%20%20%20%20%7B%20to_rhs%0A%20%20%20%20%20%20%2C%20rw%3C-r%20t%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%3B%20simp%0A%20%20%20%20%3B%20induction%20rev%20t%0A%20%20%20%20%3B%20simp%0A%20%20%20%20%3B%20simp%20%5Bih%5D%0A%20%20%20%20%7D%0A---%0A%0Aexample%20%3A%20%E2%88%80%20%28s%20%3A%20list%20A%29%2C%20rev%20%28rev%20s%29%20%3D%20s%20%3A%3D%20r%0Aend%20mylist\">Full mwe</a></p>\n<p>Here the nice name <code>ih</code> comes out of the <code>induction</code>, but most the time the inductive hypothesis is named some jibberish like <code>s_ᾰ_ih</code>.  I can't quite figure out what is causing the nice name here.</p>",
        "id": 256962711,
        "sender_full_name": "É Olive",
        "timestamp": 1633879114
    },
    {
        "content": "<p>Can you provide an mwe that produces the gibberish name?</p>",
        "id": 256967611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633883905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/How.20does.20Lean.20name.20new.20variables.3F/near/256967611\">said</a>:</p>\n<blockquote>\n<p>Can you provide an mwe that produces the gibberish name?</p>\n</blockquote>\n<p>Sure, here's a really short example where I introduce a variable without supplying a name and it becomes <code>ᾰ</code>, which seems to be the preferred default</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">f</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}:</span><span class=\"n\">A</span><span class=\"bp\">-&gt;</span><span class=\"n\">A</span><span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">ᾰ</span>\n</code></pre></div>",
        "id": 256968000,
        "sender_full_name": "É Olive",
        "timestamp": 1633884289
    },
    {
        "content": "<p>If you're going to use a name, then you should do <code>intro h</code>.</p>",
        "id": 256968034,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633884327
    },
    {
        "content": "<p>Yes, but that would make it no longer a mwe.</p>",
        "id": 256968137,
        "sender_full_name": "É Olive",
        "timestamp": 1633884442
    },
    {
        "content": "<p>If you do <code>intro</code> without supplying a name, then you should not refer introduced variables by names.</p>",
        "id": 256968334,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633884624
    },
    {
        "content": "<p>Consider this to be our way to enforce a coding style.</p>",
        "id": 256968396,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633884688
    },
    {
        "content": "<p>Alright, here's a mwe in which I do not refer to the variable.  I think this makes it harder to see what is going on, but here it is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">f</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}:</span><span class=\"n\">A</span><span class=\"bp\">-&gt;</span><span class=\"n\">nat</span><span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 256968468,
        "sender_full_name": "É Olive",
        "timestamp": 1633884739
    },
    {
        "content": "<p>Lean (more precisely, Lean 3 community edition) uses strange characters for autogenerated variable names in order to avoid possible name clash. As a side effect, some definitions have funny variable names in <code>#print</code>/<code>#check</code> output.</p>",
        "id": 256969035,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633885243
    },
    {
        "content": "<p>In your A to A mwe, by assumption will work. So if you're trying to golf, use the French quoted underscore.</p>",
        "id": 256969053,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633885263
    },
    {
        "content": "<p>And you have to name any <code>intro</code>duced variable if you're going to use its name in the proof.</p>",
        "id": 256969056,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633885265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448275\">É Olive</span> <a href=\"#narrow/stream/113488-general/topic/How.20does.20Lean.20name.20new.20variables.3F/near/256968000\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/How.20does.20Lean.20name.20new.20variables.3F/near/256967611\">said</a>:</p>\n<blockquote>\n<p>Can you provide an mwe that produces the gibberish name?</p>\n</blockquote>\n<p>Sure, here's a really short example where I introduce a variable without supplying a name and it becomes <code>ᾰ</code>, which seems to be the preferred default</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">f</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}:</span><span class=\"n\">A</span><span class=\"bp\">-&gt;</span><span class=\"n\">A</span><span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">ᾰ</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Here's a mwe where I get the precise jibberish name I made up earlier of <code>s_ᾰ_ih</code>.  Notably it seems that the default naming works different on my new lists vs. the ones in the prelude, so you have to use my lists to get this name.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">mylist</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">mylist</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">mylist</span> <span class=\"bp\">→</span> <span class=\"n\">mylist</span>\n\n<span class=\"kd\">@[simp]def</span> <span class=\"n\">f</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}:</span><span class=\"n\">mylist</span> <span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"n\">mylist</span> <span class=\"n\">A</span><span class=\"o\">:=</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">q</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}:</span><span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">mylist</span><span class=\"o\">(</span><span class=\"n\">mylist</span> <span class=\"n\">A</span><span class=\"o\">),</span><span class=\"n\">s</span><span class=\"bp\">=</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):=</span><span class=\"kd\">by</span><span class=\"o\">{</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"n\">induction</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">simp</span><span class=\"o\">,</span><span class=\"n\">induction</span> <span class=\"n\">s_ᾰ</span><span class=\"bp\">;</span><span class=\"n\">simp</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 256969233,
        "sender_full_name": "É Olive",
        "timestamp": 1633885423
    },
    {
        "content": "<p>Coding style says to name variables in <code>intro</code> and <code>induction</code>.</p>",
        "id": 256969373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633885552
    },
    {
        "content": "<p>For <code>induction</code> you can also use <code>case nil : { }</code>, <code>case cons : a l ihl { }</code></p>",
        "id": 256969440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633885591
    },
    {
        "content": "<p>If you're really trying to golf here, you can directly say \"apply mylist.rec_on\" or some variant of that, instead of using the induction tactic. But you should also remember that the whole language is set up to be expressive and to avoid ambiguitity, which is pretty counter to syntax-style golfing.</p>",
        "id": 256969607,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633885762
    },
    {
        "content": "<p>That's very interesting, and yes will probably be very useful to me.  Is there any sort of documentation for the function?  It's a little mystical to me.</p>",
        "id": 256970133,
        "sender_full_name": "É Olive",
        "timestamp": 1633886205
    },
    {
        "content": "<p>For each new inductive type (incl. structures), Lean generates <code>typename.rec_on</code> and a few other functions. I don't know if they're documented somewhere. You can alway <code>#print prefix mylist</code> to list them, then <code>#check mylist.rec_on</code> or <code>#print mylist.rec_on</code> to see what they do.</p>",
        "id": 256970520,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633886591
    },
    {
        "content": "<p>To be fair, a much better golfing metric would be the size of the underlying generated term.</p>",
        "id": 256970691,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633886739
    },
    {
        "content": "<p>Is that measurable?</p>",
        "id": 256970885,
        "sender_full_name": "É Olive",
        "timestamp": 1633886891
    },
    {
        "content": "<p>Definitely! I don't personally know how to access it, but it's perfectly possible.</p>",
        "id": 256971033,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633887036
    },
    {
        "content": "<p>Well, if anyone finds out I'd be interested in giving it a spin, but until then I will probably live with bytes on disc, since that's easy for me to measure.</p>",
        "id": 256971147,
        "sender_full_name": "É Olive",
        "timestamp": 1633887137
    }
]