[
    {
        "content": "<p>I've just managed to internalise something Mario told me a couple of weeks ago.</p>",
        "id": 125691805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690134
    },
    {
        "content": "<p>Here's the <code>cases</code> tactic in action.</p>",
        "id": 125691809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690152
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">Pg</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"> context now has</span>\n<span class=\"cm\">g : γ,</span>\n<span class=\"cm\">Pg : P g</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125691811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690159
    },
    {
        "content": "<p>Now here's an example of it failing because we need to use the axiom of choice.</p>",
        "id": 125691818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690183
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- cases H with g Pg -- fails as we can only eliminate into Prop</span>\n<span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125691829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690210
    },
    {
        "content": "<p>But of course us classical people want to run cases anyway.</p>",
        "id": 125691862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- cases H with g Pg -- fails as we can only eliminate into Prop</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">Pg</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"> ... but I made it anyway. Context now</span>\n<span class=\"cm\">g : γ := ...</span>\n<span class=\"cm\">Pg : P g</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125691880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690253
    },
    {
        "content": "<p>Using this trick (classical some and some_spec, <em>plus</em> the thing which I think Mario was trying to explain to me, which was that the moment you run <code>classical.some</code> you should make something _useful_ from <code>classical.some_spec</code> rather than just <code>have Pg := classical.some_spec H</code> which is a statement about <code>classical.some _</code> and hence harder to work with.</p>",
        "id": 125691969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690407
    },
    {
        "content": "<p>I am going to use this idiom again and again</p>",
        "id": 125691997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690447
    },
    {
        "content": "<p>but surely this should just be a tactic</p>",
        "id": 125692002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690458
    },
    {
        "content": "<p><code>classical_cases H with g Pg</code></p>",
        "id": 125692011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690479
    },
    {
        "content": "<p>I have been fretting a bit over things like the fact that the \"obvious in maths\" statement that if there's a surjection <code>X -&gt; Y</code> then there's an injection <code>Y -&gt; X</code> looks so convoluted in Lean.</p>",
        "id": 125692082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690540
    },
    {
        "content": "<p>But this tactic is probably trivial to write and just looks like an extension of <code>cases</code>, which the students learn very early on when learning Lean anyway</p>",
        "id": 125692096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690567
    },
    {
        "content": "<p>Is this there already?</p>",
        "id": 125692105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690598
    },
    {
        "content": "<p>If not -- I _really_ think it should be! It is far more natural to write than all this classical.some_spec or indefinite_confusion or whatever it's called</p>",
        "id": 125692161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690626
    },
    {
        "content": "<p>Let me stress that the trick is that you force the type of <code>Pg</code> to be <code>P g</code>, the thing you want it to be, by explicitly making it of this type when you construct it. Just writing <code>have Pg := classical.some_spec H</code> doesn't work.</p>",
        "id": 125692256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524690774
    },
    {
        "content": "<p>Maybe <code>choose</code> for the tactic name?</p>",
        "id": 125692355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524690927
    },
    {
        "content": "<p>Have a look at <a href=\"https://github.com/unitb/lean-lib/blob/master/test/tactic/classical.lean\" target=\"_blank\" title=\"https://github.com/unitb/lean-lib/blob/master/test/tactic/classical.lean\">https://github.com/unitb/lean-lib/blob/master/test/tactic/classical.lean</a> . It is not quite behaving like <code>cases</code> but it does make <code>some</code> and <code>epsilon</code> easier to work with. (I linked to the test case so that you see how I use it rather than how it works).</p>",
        "id": 125692512,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524691136
    },
    {
        "content": "<p>How do I use <code>apply_some_spec</code> Simon? I mean how do I get it running on my machine?</p>",
        "id": 125693176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524692008
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>leanpkg add unitb/lean-lib\n</pre></div>\n\n\n<p>and don't forget:</p>\n<div class=\"codehilite\"><pre><span></span>import util.classical\n</pre></div>",
        "id": 125693242,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524692108
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">inj_of_surj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">--slightly weird first move</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"c1\">-- ha ha, swap is now overloaded because I opened function!</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c1\">--classical_cases (Hf y) with x Hx,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c1\">--classical_cases (Hf y) with x Hx,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Hx</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125693530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524692454
    },
    {
        "content": "<p>I think my way looks a bit less intimidating for the newbie</p>",
        "id": 125693535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524692466
    },
    {
        "content": "<p>You can do it like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">ccases</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">ids</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">inj_of_surj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"c1\">--slightly weird first move</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"c1\">-- ha ha, swap is now overloaded because I opened function!</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">ccases</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">ccases</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- let x := classical.some (Hf y),</span>\n  <span class=\"c1\">-- have Hx : f x = y := classical.some_spec (Hf y),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Hx</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125695647,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524695242
    },
    {
        "content": "<p>Lol @ indefinite_confusion. But the right way to do this is to do cases on the pair <code>some, some_spec</code>, which is indeed <code>classical.indefinite_description</code>.</p>",
        "id": 125696083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524695864
    },
    {
        "content": "<p>Here's an idea that might help:</p>\n<div class=\"codehilite\"><pre><span></span>@[elab_as_eliminator]\nnoncomputable def classical.rec_on\n  {α} {p : α → Prop} {C : Sort*}\n  (h : ∃ a, p a) (H : ∀ a, p a → C) : C :=\nH (classical.some h) (classical.some_spec h)\n</pre></div>",
        "id": 125696468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524696459
    },
    {
        "content": "<p>You can <code>apply</code> that theorem to do cases on an exists without making <code>cases</code> complain</p>",
        "id": 125696509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524696491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what if I told you “surjective functions have right inverse” is already in mathlib as <code>inv_fun</code></p>",
        "id": 125696540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524696595
    },
    {
        "content": "<p>But in the case of <code>inj_of_surj</code>, this is the wrong approach (same for <code>ccases</code> or cases on indefinite description), because you are doing the case twice, once to define the function and again to give its properties. That means that you will have to unfold whatever proof term you constructed in the first half, i.e. <code>classical.rec_on</code> or <code>subtype.rec_on</code> or something</p>",
        "id": 125696553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524696602
    },
    {
        "content": "<p>The right solution here is to use <code>axiom_of_choice</code></p>",
        "id": 125696594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524696624
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem inj_of_surj (X Y : Type) (f : X → Y) (Hf : surjective f) : ∃ g : Y → X, f ∘ g = id :=\nlet ⟨g, h⟩ := classical.axiom_of_choice Hf in ⟨g, funext h⟩\n</pre></div>",
        "id": 125696615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524696685
    },
    {
        "content": "<p>(Also this theorem already exists in core IIRC)</p>",
        "id": 125696623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524696708
    },
    {
        "content": "<p>For the golfers:</p>\n<div class=\"codehilite\"><pre><span></span>(classical.axiom_of_choice Hf).imp $ λ g, funext\n</pre></div>",
        "id": 125697084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524697512
    },
    {
        "content": "<p>The inj of surj example was pedagogical -- I know it's there, but I want to teach students how to write it without pain. There are other times this comes up too. I suspect a lot of undergraduate mathematicians will be very confused by constructive maths so I want to hide it from them. Many thanks for the tactic Simon and for the comments everyone.</p>",
        "id": 125711834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727448
    },
    {
        "content": "<p>I think in particular that you should add <code>axiom_of_choice</code> to your toolkit</p>",
        "id": 125711847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727506
    },
    {
        "content": "<p>You are certainly right in that it's not currently in my toolkit.</p>",
        "id": 125711911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727644
    },
    {
        "content": "<p>I remember really struggling with all of this the first time around.</p>",
        "id": 125711913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727655
    },
    {
        "content": "<p>It's only revisiting it now I'm older and wiser that I understand it well enough to try and manipulate it into a form which I think beginners with no programming background might find more comprehensible.</p>",
        "id": 125711954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727710
    },
    {
        "content": "<p>I would think that <code>axiom_of_choice</code> is the version of choice people are most used to</p>",
        "id": 125711961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727763
    },
    {
        "content": "<p><code>classical.some</code> is more like global choice, which ZFC doesn't usually admit so most proofs aren't framed that way</p>",
        "id": 125711965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727799
    },
    {
        "content": "<p>The problem is that most mathematicians apply the axiom of choice without noticing, and those that are aware of it believe that it says that an infinite product of non-empty sets is non-empty.</p>",
        "id": 125712014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727827
    },
    {
        "content": "<p>Mathematicians don't know the difference between the different kinds of non-empty</p>",
        "id": 125712015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727839
    },
    {
        "content": "<p>I'm not talking about LEM here though</p>",
        "id": 125712022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727865
    },
    {
        "content": "<p>right</p>",
        "id": 125712027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727880
    },
    {
        "content": "<p>all notions of nonempty are basically the same modulo LEM</p>",
        "id": 125712028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727881
    },
    {
        "content": "<p>they don't know what LEM is either</p>",
        "id": 125712031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524727887
    },
    {
        "content": "<p>I'm talking about how to use AC proper</p>",
        "id": 125712063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727923
    },
    {
        "content": "<p>I think it is not a good thing that lean thinks LEM and AC are the same</p>",
        "id": 125712073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727968
    },
    {
        "content": "<p>mathematicians certainly don't</p>",
        "id": 125712074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524727982
    },
    {
        "content": "<p>you can argue that mathematicians think both are true, but I think they admit LEM implicitly and don't see the need for AC until they reach a certain level</p>",
        "id": 125712081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524728029
    },
    {
        "content": "<p>exactly</p>",
        "id": 125712082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728035
    },
    {
        "content": "<p>LEM is part of the logic</p>",
        "id": 125712084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728041
    },
    {
        "content": "<p>AC has some content</p>",
        "id": 125712121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728044
    },
    {
        "content": "<p>Lean kind of gives you the ability to distinguish the two, since LEM is computable but AC is not</p>",
        "id": 125712127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524728076
    }
]