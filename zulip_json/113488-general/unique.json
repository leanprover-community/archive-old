[
    {
        "content": "<p>how do I write \"there are a unique integer and a unique natural number such that ...\"?</p>",
        "id": 202177060,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593250295
    },
    {
        "content": "<p>I don't think <code>∃! (a : \\Z) (b : \\N)</code> is what I want because it says \"there is a unique integer such that there is a unique natural number such that\"</p>",
        "id": 202177067,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593250316
    },
    {
        "content": "<p>I guess I just can't write it and have to separate it into two theorems</p>",
        "id": 202177129,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593250368
    },
    {
        "content": "<p>What about using a product type?</p>",
        "id": 202177144,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593250426
    },
    {
        "content": "<p>Yes, exists unique does not concatenate correctly</p>",
        "id": 202177710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593251321
    },
    {
        "content": "<p>You can also use <code>unique (\\Sigma ...)</code> etc</p>",
        "id": 202177975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593251796
    },
    {
        "content": "<p>I forgot, what is the <code>Prop</code>-valued version of <code>unique</code>?</p>",
        "id": 205807415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596468159
    },
    {
        "content": "<p><code>exists_unique</code> is the only other version</p>",
        "id": 205808203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596468557
    },
    {
        "content": "<p>there is no prop valued class like <code>unique</code> AFAIK</p>",
        "id": 205808276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596468595
    },
    {
        "content": "<p>you could use <code>nonempty (unique A)</code> of course</p>",
        "id": 205808342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596468611
    },
    {
        "content": "<p>This is so ridiculous.</p>",
        "id": 205808368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596468626
    },
    {
        "content": "<p><code>nonempty (unique α)</code> and <code>subsingleton α ∧ nonempty α</code> are both used exactly once in mathlib</p>",
        "id": 205808378,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596468631
    },
    {
        "content": "<p>How about card = 1?</p>",
        "id": 205808479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596468691
    },
    {
        "content": "<p>I assume that's one of the two mentioned uses</p>",
        "id": 205808523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596468720
    },
    {
        "content": "<p>It's the second one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">lemma</span><span class=\"w\"> </span><span class=\"n\">eq_one_iff_subsingleton_and_nonempty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"err\">↔</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">subsingleton</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">∧</span><span class=\"w\"> </span><span class=\"n\">nonempty</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205808656,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596468774
    }
]