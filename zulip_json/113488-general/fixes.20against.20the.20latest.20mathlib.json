[
    {
        "content": "<p>now there is a global <code>^</code> called <code>pow</code>, and now the type of <code>n</code> will not be inferred from <code>f^n</code> (you need to manually state that <code>n</code> is of type <code>nat</code>). In that case, <code>pow</code> unfolds to <code>monoid.pow</code>, which can be unfolded as before the latest version.</p>",
        "id": 124799280,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523194684
    },
    {
        "content": "<p>Are you talking about the nightly from the 6th?</p>",
        "id": 124799512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523195313
    },
    {
        "content": "<p>right</p>",
        "id": 124799513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523195330
    },
    {
        "content": "<p>So no more nat.pow?</p>",
        "id": 124800387,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523197608
    },
    {
        "content": "<p>I have not tested, but I believe Lean figures out whether you mean <code>monoid.pow</code> or <code>nat.pow</code></p>",
        "id": 124800392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523197636
    },
    {
        "content": "<p>depending on the first argument</p>",
        "id": 124800393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523197642
    },
    {
        "content": "<p>Getting rid of <code>local  infix </code> ^ <code> := monoid.pow</code> seems to help, so it uses <code>has_pow.pow</code> which is definitionally equal, but has rw lemmas.</p>",
        "id": 124804713,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523208185
    }
]