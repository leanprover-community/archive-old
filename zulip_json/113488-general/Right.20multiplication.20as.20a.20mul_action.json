[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.to_mul_action\">docs#monoid.to_mul_action</a> which defines <code>∀ x y : R, x • y = x * y</code>. Is there (or should there be) some alias such that <code>∀ x y : R, foo x • y = y * x</code>?</p>",
        "id": 239012156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621205228
    },
    {
        "content": "<p>This won't satisfy the associativity condition for a mul action</p>",
        "id": 239012789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621205897
    },
    {
        "content": "<p>We need a notion of an action on the right (right mul action, right modules, etc.)</p>",
        "id": 239012799,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621205923
    },
    {
        "content": "<p>it will in a comm ring, but I guess there is no point in a separate definition in that case</p>",
        "id": 239012801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621205938
    },
    {
        "content": "<p>I hope we can get by with mul actions by the opposite ring instead of right modules</p>",
        "id": 239012834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621205998
    },
    {
        "content": "<blockquote>\n<p>This won't satisfy the associativity condition for a mul action</p>\n</blockquote>\n<p>Won't it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">monoid.opposite_to_mul_action</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c.unop</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">opposite</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 239012917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621206019
    },
    {
        "content": "<p>We have the <code>has_pow</code> class, why not have a <code>pow_action</code>?</p>",
        "id": 239012950,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621206043
    },
    {
        "content": "<p>Which would really just be a right action</p>",
        "id": 239012970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621206061
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mi>x</mi></msup><msup><mo stretchy=\"false\">)</mo><mi>y</mi></msup><mo>=</mo><msup><mi>a</mi><mrow><mi>x</mi><mi>y</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(a^x)^y = a^{xy}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 239012994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621206091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> isn't that just <code>monoid.to_mul_action</code> using the opposite mul?</p>",
        "id": 239013011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621206115
    },
    {
        "content": "<p>I don't understand your question. It seems to satisfy my original request:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">opposite.op</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 239013162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621206197
    },
    {
        "content": "<p>Does that instance above seem like a good idea to you?</p>",
        "id": 239013305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621206327
    },
    {
        "content": "<p>(along with a similar one for <code>semiring.to_semimodule</code> etc)</p>",
        "id": 239013362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621206365
    },
    {
        "content": "<p>The instance would be useful here: <a href=\"https://github.com/leanprover-community/mathlib/pull/7572/files#r633152366\">https://github.com/leanprover-community/mathlib/pull/7572/files#r633152366</a></p>",
        "id": 239013760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621206801
    },
    {
        "content": "<p>I'm basically wondering how this instance relates to the <code>mul_action (opposite R) (opposite R)</code> instance coming from <code>monoid.to_mul_action</code>. Is it the same?</p>",
        "id": 239013861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621206921
    },
    {
        "content": "<p>Yes, they're definitionally equal but only if you abuse the type aliases a bit</p>",
        "id": 239014048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621207147
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7630\">#7630</a></p>",
        "id": 239052878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621241034
    },
    {
        "content": "<p>Should we introduce a notation for this? <code>notation a ` •← `:72 b:73 := op b • a</code> is pretty bad but is a start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.opposites</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">•←</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- precedence:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">•←</span> <span class=\"n\">d</span> <span class=\"bp\">•←</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">•←</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">•←</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 240350906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622045967
    },
    {
        "content": "<p>Probably this is worse but we could also consider <code>a↶b</code>.</p>",
        "id": 240352165,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622046503
    },
    {
        "content": "<p>Here's a fun <del>vscode</del> unicode rendering bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- safe: ≃, •⃖</span>\n<span class=\"c1\">-- fail: =, •⃖</span>\n<span class=\"c1\">-- safe: ≃, •⃖</span>\n</code></pre></div>\n<p>The symbol at the end of each line is the same, but in my vscode and chrome they render differently</p>",
        "id": 240353362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622046975
    },
    {
        "content": "<p>Should there be difference between the three lines?  For me, only the ≃ and = differs (in both vscode and chromium).</p>",
        "id": 240353654,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622047107
    },
    {
        "content": "<p>The symbols at the end of each line all appear the same in Firefox on macOS, using DejaVu Sans Mono:<br>\n<a href=\"user_uploads/3121/vfA16LjcFTdIozawvhbUZLib/Screen-Shot-2021-05-26-at-12.43.22-PM.png\">Screen-Shot-2021-05-26-at-12.43.22-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/vfA16LjcFTdIozawvhbUZLib/Screen-Shot-2021-05-26-at-12.43.22-PM.png\" title=\"Screen-Shot-2021-05-26-at-12.43.22-PM.png\"><img src=\"user_uploads/3121/vfA16LjcFTdIozawvhbUZLib/Screen-Shot-2021-05-26-at-12.43.22-PM.png\"></a></div>",
        "id": 240354451,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622047475
    },
    {
        "content": "<p>This is a weird bug seemingly connected to font fallback.  I've been playing around with the Zulip CSS:</p>\n<div class=\"codehilite\" data-code-language=\"CSS\"><pre><span></span><code><span class=\"nt\">font-family</span><span class=\"o\">:</span> <span class=\"s2\">\"Source Code Pro\"</span><span class=\"o\">,</span> <span class=\"nt\">monospace</span><span class=\"o\">;</span> <span class=\"c\">/* default, broken */</span>\n<span class=\"nt\">font-family</span><span class=\"o\">:</span> <span class=\"s2\">\"Source Code Pro\"</span><span class=\"o\">,</span> <span class=\"s2\">\"DejaVu Sans Mono\"</span><span class=\"o\">;</span>\n <span class=\"c\">/* works, reported fallback font is DejaVu Sans */</span>\n<span class=\"nt\">font-family</span><span class=\"o\">:</span> <span class=\"s2\">\"Source Code Pro\"</span><span class=\"o\">;</span> <span class=\"c\">/* works as well, reported fallback font is DejaVu Sans */</span>\n</code></pre></div>",
        "id": 240354457,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622047479
    },
    {
        "content": "<p>In chrome on windows:</p>\n<p><a href=\"/user_uploads/3121/50oggO4SRzfMyy_CVrHvQ2uc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/50oggO4SRzfMyy_CVrHvQ2uc/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/50oggO4SRzfMyy_CVrHvQ2uc/image.png\"></a></div>",
        "id": 240354598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622047542
    },
    {
        "content": "<p>At any rate, that probably means the syntax I was trying is _not_ a good idea!</p>",
        "id": 240354754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622047592
    },
    {
        "content": "<p>Chromium (actually electron) on linux:<br>\n<a href=\"/user_uploads/3121/J46lkqYsGWNGfjk8oJGeCBmN/weird_glyph.png\">weird_glyph.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/J46lkqYsGWNGfjk8oJGeCBmN/weird_glyph.png\" title=\"weird_glyph.png\"><img src=\"/user_uploads/3121/J46lkqYsGWNGfjk8oJGeCBmN/weird_glyph.png\"></a></div>",
        "id": 240354859,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622047653
    }
]