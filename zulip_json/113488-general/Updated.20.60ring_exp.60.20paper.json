[
    {
        "content": "<p>I've been updating the short paper on <code>ring_exp</code>, now it should be (almost) ready to submit to Springer. The latest version is available here: <a href=\"https://www.cs.vu.nl/~tbn305/publicaties/2020-ring_exp.pdf\" title=\"https://www.cs.vu.nl/~tbn305/publicaties/2020-ring_exp.pdf\">https://www.cs.vu.nl/~tbn305/publicaties/2020-ring_exp.pdf</a> I'm very grateful to the Lean community for the help they have already given. If you have time to read it this week, I would really appreciate any feedback.</p>",
        "id": 193882047,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586863200
    },
    {
        "content": "<p>+1 for using 37 as an example of a nat.</p>",
        "id": 194231729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586987009
    },
    {
        "content": "<p>I don't understand why you bother telling people that on random expressions ring_exp is slower; I have consistently found <code>ring_exp</code> to be faster. I'm writing a proof right now which uses <code>ring</code> and I just tried replacing it with <code>ring_exp</code> and there is a 30% speed-up. My experience with <code>ring_exp</code> on highly non-random examples is extremely positive and so you might want to mention that there is anecdotal evidence that it is performing better in practice with single-variable polynomial calculations of degree 3 or more, which is what often comes up in my work.</p>",
        "id": 194232462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586987481
    },
    {
        "content": "<p>Last (silly) comment -- in the last-but-one sentence of the paper it sounds like you are accusing Gabriel etc of being the anonymous reviewers :-) You could put \"Gabriel Ebner, ..., and the anonymous reviewers read this paper...\" to avoid this ambiguity.</p>",
        "id": 194232686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586987604
    },
    {
        "content": "<p>Do you have any time to do a test suite of random expressions in one variable with degrees between 3 and 10?</p>",
        "id": 194232808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586987658
    },
    {
        "content": "<p>Some minor typos:</p>\n<p>On page 2:</p>\n<blockquote>\n<p>The <code>ring_exp</code> tactic does not use reflection but directly constructs proof terms <strong>to type</strong> checked by Leanâ€™s kernel,</p>\n</blockquote>\n<p>On page 6:</p>\n<blockquote>\n<p>on linear expressions such <strong>as passed</strong> by <code>linarith</code>, <code>ring_exp</code> is 1.67 times slower than <code>ring</code>.</p>\n</blockquote>",
        "id": 194237663,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586990617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Updated.20.60ring_exp.60.20paper/near/194232462\" title=\"#narrow/stream/113488-general/topic/Updated.20.60ring_exp.60.20paper/near/194232462\">said</a>:</p>\n<blockquote>\n<p>I don't understand why you bother telling people that on random expressions ring_exp is slower; I have consistently found <code>ring_exp</code> to be faster. I'm writing a proof right now which uses <code>ring</code> and I just tried replacing it with <code>ring_exp</code> and there is a 30% speed-up. My experience with <code>ring_exp</code> on highly non-random examples is extremely positive and so you might want to mention that there is anecdotal evidence that it is performing better in practice with single-variable polynomial calculations of degree 3 or more, which is what often comes up in my work.</p>\n</blockquote>\n<p>It doesn't seem as uniformly positive to me. My own anecdotal evidence is that it's easy to find worse performance for either tactic in practice. Visually looking through the benchmark output, <code>ring</code> seems to be not too much worse than <code>ring_exp</code> when it loses the race, compared to <code>ring_exp</code> losing by a lot when it does. So <code>ring_exp</code> is about 30% faster than <code>ring</code> on showing <code>(1 + x + x^2 + x^3 + x^4) * (x - 1) = x^5 - 1</code>, but 4 <em>times</em> slower than <code>ring</code> on showing <code>(x - 1)^4 = (1 - x)^4</code> (I think because <code>(a + b)^4</code> is unfolded into a bunch of multiplications, which <code>ring</code> tends to be faster at).</p>",
        "id": 194281572,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1587031636
    },
    {
        "content": "<p>OK, then maybe what you have is fine.</p>",
        "id": 194281748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587031743
    },
    {
        "content": "<p>Thank you for the benchmark suggestion. With a fixed degree, <code>ring_exp</code> seems to catch up somewhat to <code>ring</code>. I will let it run for a couple of hours to compare the distributions.</p>",
        "id": 194288557,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1587036092
    },
    {
        "content": "<p>Just an FYI, but I have some work optimizing <code>ring</code> in progress. The plan is to back port all the performance tricks used in <code>ring_exp</code> to <code>ring</code>, and if possible see what can be done to merge the two without performance regression</p>",
        "id": 194289182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587036509
    },
    {
        "content": "<p>Could one mention this in the paper? The work has inspired other work etc</p>",
        "id": 194289295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587036587
    }
]