[
    {
        "content": "<p>Random bit from LTE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The obvious embedding from `fin M` to `fin N` for `M ≤ N`. -/</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">ι</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">M</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fin.cast_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n\n<span class=\"c1\">-- Should this be in mathlib?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_eq_sum_map_ι</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset.map</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.sum_bij'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ι</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩})</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">finset.mem_map.mp</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">ww</span><span class=\"o\">⟩,</span><span class=\"n\">hw</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">change</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span> <span class=\"o\">⟩)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243689164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624471068
    },
    {
        "content": "<p>Do we have a version of <code>finset.sum_bij'</code> for injective maps. Since <code>\\iota</code> is injective, I feel like the proof of the lemma should be a 1-liner</p>",
        "id": 243689295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624471116
    },
    {
        "content": "<p>Nevermind: <code>finset.sum_map</code></p>",
        "id": 243689765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624471321
    }
]