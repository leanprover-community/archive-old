[
    {
        "content": "<p>Are .olean files like object files that speed things up somehow? how's that work exactly? are they just like the object files gcc generates before linking?</p>",
        "id": 220018218,
        "sender_full_name": "Abhishek Cherath",
        "timestamp": 1608055496
    },
    {
        "content": "<p>they certainly speed things up</p>",
        "id": 220018349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608055561
    },
    {
        "content": "<p>compiling mathlib takes between 30 minutes and 2 hours on most machines</p>",
        "id": 220018422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608055583
    },
    {
        "content": "<p>but with the <code>leanproject</code> tool, you can just download <code>olean</code> files in 5 seconds, and you're up and running.</p>",
        "id": 220018479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608055609
    },
    {
        "content": "<p>They are kind of like gcc object files, although there is no linking going on. An olean file stores the result of elaboration of a complete lean file, meaning that in order to compile one lean file you only need the olean files of all dependents</p>",
        "id": 220018615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608055678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/diff.20between.20.2Elean.20and.20.2Eolean/near/220018615\">said</a>:</p>\n<blockquote>\n<p>They are kind of like gcc object files, although there is no linking going on. An olean file stores the result of elaboration of a complete lean file, meaning that in order to compile one lean file you only need the olean files of all dependents</p>\n</blockquote>\n<p>I see so when I say import x from mathlib, it doesn't just macro expand the .lean files, it uses the pre ASTed or whatever .olean file</p>",
        "id": 220023172,
        "sender_full_name": "Abhishek Cherath",
        "timestamp": 1608057639
    },
    {
        "content": "<p>Well not really either one. It declares a dependency on the other lean file; the environment objects for all dependents are merged to form the initial environment for the current file. It's a more semantically meaningful thing than C style text replacement</p>",
        "id": 220023433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608057803
    },
    {
        "content": "<p>In server mode it will generally use the olean files if they exist and the hashes match and you aren't currently editing that other file</p>",
        "id": 220023550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608057860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/diff.20between.20.2Elean.20and.20.2Eolean/near/220023433\">said</a>:</p>\n<blockquote>\n<p>Well not really either one. It declares a dependency on the other lean file; the environment objects for all dependents are merged to form the initial environment for the current file. It's a more semantically meaningful thing than C style text replacement</p>\n</blockquote>\n<p>yes that's what I meant, so the way lean knows what's already known is from the final env state from prev files, and because of olean it doesn't have to do all the work</p>",
        "id": 220023826,
        "sender_full_name": "Abhishek Cherath",
        "timestamp": 1608057998
    },
    {
        "content": "<p>right</p>",
        "id": 220024028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058098
    }
]