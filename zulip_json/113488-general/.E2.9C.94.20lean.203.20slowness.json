[
    {
        "content": "<p>has anyone experienced a slowness in Lean 3 when using <code>by_contra</code>?</p>",
        "id": 261032848,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636568661
    },
    {
        "content": "<p>Slowness how? On what problem? There are a million things that can contribute to slowness</p>",
        "id": 261033588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636568969
    },
    {
        "content": "<p>the main reason for the <code>by_contra</code> tactic to be slow (it is a very simple tactic) is if determining the decidability of the predicate is hard</p>",
        "id": 261033902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636569084
    },
    {
        "content": "<p>I have this state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span>\n<span class=\"n\">he</span><span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">V</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">color</span><span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">he.elim</span>\n<span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">color</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">color</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>now I want to use <code>by_contra</code> then prove <code>false</code> with <code>exact is_empty_iff.mp he v</code></p>",
        "id": 261034596,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636569359
    },
    {
        "content": "<p>This was the original state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span>\n<span class=\"n\">he</span><span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">V</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">color</span><span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">he.elim</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">color</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">color</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>At first I wanted to prove the goal with some kind of vacuous reasoning</p>",
        "id": 261034867,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636569469
    },
    {
        "content": "<p>Is there a better way to do this?</p>",
        "id": 261035105,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636569557
    },
    {
        "content": "<p>If it's not a proof by contradiction, I would not use <code>by_contra</code></p>",
        "id": 261035233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636569605
    },
    {
        "content": "<p>use <code>exfalso</code> if you want to prove <code>false</code> instead of your goal</p>",
        "id": 261035260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636569619
    },
    {
        "content": "<p>or <code>exact (...).elim</code> where <code>...</code> is a proof of false</p>",
        "id": 261035327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636569642
    },
    {
        "content": "<p>or <code>cases ...</code></p>",
        "id": 261035346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636569650
    },
    {
        "content": "<p>Here by \"proof by contradiction\" I mean that you are interested in using the negation of your goal for part of the proof</p>",
        "id": 261035473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636569709
    },
    {
        "content": "<p><code>exfalso</code> worked like a charm. thank you very much!</p>",
        "id": 261035547,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636569735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 261035678,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636569807
    },
    {
        "content": "<p>Yes, I've found it to be very slow, especially at leaves of the import heirarchy</p>",
        "id": 261038605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636571069
    },
    {
        "content": "<p>Finding the <code>decidable</code> instance takes so long that it never gets around to giving up and using <code>classical.decidable</code></p>",
        "id": 261038722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636571137
    },
    {
        "content": "<p>Mainly because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.decidable\">docs#eq.decidable</a> sending it through the entire order heirarchy.</p>",
        "id": 261038818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636571171
    },
    {
        "content": "<p>The fix I usually use is to apply the <code>classical</code> tactic just before</p>",
        "id": 261040369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636571921
    },
    {
        "content": "<p>Locally removing that instance and the other one that goes through the order heirarchy that I can't find also works</p>",
        "id": 261045842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636574303
    }
]