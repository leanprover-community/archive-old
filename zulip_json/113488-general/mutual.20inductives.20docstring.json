[
    {
        "content": "<p>Dumb question... Where do I put the docstring on a mutual inductive definition? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nEg, from <code>set_theory.lists</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">lists.equiv</span><span class=\"o\">,</span> <span class=\"n\">lists'.subset</span>\n<span class=\"k\">with</span> <span class=\"n\">lists.equiv</span> <span class=\"o\">:</span> <span class=\"n\">lists</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">lists</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lists.equiv</span> <span class=\"n\">l</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">antisymm</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">lists'</span> <span class=\"n\">α</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">lists'.subset</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">lists'.subset</span> <span class=\"n\">l₂</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">lists.equiv</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">⟩</span>\n<span class=\"k\">with</span> <span class=\"n\">lists'.subset</span> <span class=\"o\">:</span> <span class=\"n\">lists'</span> <span class=\"n\">α</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">lists'</span> <span class=\"n\">α</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lists'.subset</span> <span class=\"n\">lists'.nil</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lists.equiv</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"n\">lists'.to_list</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span>\n  <span class=\"n\">lists'.subset</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">lists'.subset</span> <span class=\"o\">(</span><span class=\"n\">lists'.cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l'</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">~</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">lists.equiv</span>\n</code></pre></div>",
        "id": 251720307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630591503
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.add_doc_string\">docs#tactic.add_doc_string</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"c1\">-- /-- Foo and bar -/</span>\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">{}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.add_doc_string</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"s2\">\"foooo\"</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.add_doc_string</span> <span class=\"bp\">`</span><span class=\"n\">bar</span> <span class=\"s2\">\"barrr\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"k\">#eval</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">doc_string</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n<span class=\"k\">#eval</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">doc_string</span> <span class=\"bp\">`</span><span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 251722384,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630592254
    },
    {
        "content": "<p>Smart smart smart!</p>",
        "id": 251722483,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630592283
    },
    {
        "content": "<p>Don't know if this is expected behavior, but doing this puts the docstring on both <code>lists.equiv</code> and <code>lists'.subset</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A docstring -/</span>\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">lists.equiv</span><span class=\"o\">,</span> <span class=\"n\">lists'.subset</span>\n<span class=\"k\">with</span> <span class=\"n\">lists.equiv</span> <span class=\"o\">:</span> <span class=\"n\">lists</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">lists</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lists.equiv</span> <span class=\"n\">l</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">antisymm</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">lists'</span> <span class=\"n\">α</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">lists'.subset</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">lists'.subset</span> <span class=\"n\">l₂</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">lists.equiv</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">⟩</span>\n<span class=\"k\">with</span> <span class=\"n\">lists'.subset</span> <span class=\"o\">:</span> <span class=\"n\">lists'</span> <span class=\"n\">α</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">lists'</span> <span class=\"n\">α</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lists'.subset</span> <span class=\"n\">lists'.nil</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lists.equiv</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"n\">lists'.to_list</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span>\n  <span class=\"n\">lists'.subset</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">lists'.subset</span> <span class=\"o\">(</span><span class=\"n\">lists'.cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l'</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">~</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">lists.equiv</span>\n</code></pre></div>",
        "id": 251723687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630592740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/mutual.20inductives.20docstring/near/251722384\">said</a>:</p>\n<blockquote>\n<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.add_doc_string\">docs#tactic.add_doc_string</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"c1\">-- /-- Foo and bar -/</span>\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">{}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.add_doc_string</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"s2\">\"foooo\"</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.add_doc_string</span> <span class=\"bp\">`</span><span class=\"n\">bar</span> <span class=\"s2\">\"barrr\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"k\">#eval</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">doc_string</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n<span class=\"k\">#eval</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">doc_string</span> <span class=\"bp\">`</span><span class=\"n\">bar</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Or better, <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#add_decl_doc\">command#add_decl_doc</a></p>",
        "id": 251726284,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1630593661
    },
    {
        "content": "<p>Didn't Mario find a syntax for this in his weird syntax thread?</p>",
        "id": 251726575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630593761
    },
    {
        "content": "<p>Nope, what he did was to find a way to add docstrings to constructors of an inductive type. It didn't involve mutual inductives.</p>",
        "id": 251726880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630593871
    },
    {
        "content": "<p>By the way, these constructor docstrings don't seem to be picked up by docgen.</p>",
        "id": 251727205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630593984
    }
]