[
    {
        "content": "<p>When I'm done with my current project (if it ever gets done...), I'll have the rest of my PhD to do more or less anything that makes Lean, and interactive theorem proving in general, better. So, since I have a lot of people using Lean in anger here: what are the issues standing in the way of Lean world domination?</p>",
        "id": 203958439,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1594821507
    },
    {
        "content": "<p>If not for COVID, we could all go have a beer in a moment and plot.</p>",
        "id": 203959751,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594822138
    },
    {
        "content": "<p>Fixing these instance diamonds would be really nice:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">â‰ </span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">field</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">is_unit_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- integral_domain.to_domain I.quotient = division_ring.to_domain</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- group_with_zero.to_monoid_with_zero I.quotient = semiring.to_monoid_with_zero I.quotient</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203960169,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594822358
    },
    {
        "content": "<p>There was <a href=\"https://easychair.org/smart-program/IJCAR2020/2020-07-01.html#talk:147086\">a paper at IJCAR</a> about this</p>",
        "id": 203960272,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594822412
    },
    {
        "content": "<p>Bah, those look painful )-;</p>",
        "id": 203960897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594822684
    },
    {
        "content": "<p>Ah never mind the specific case, it turns out I should have used <code>letI</code> instead of <code>haveI</code>. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 203962356,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594823327
    },
    {
        "content": "<p>ooh, good catch</p>",
        "id": 203962464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594823387
    },
    {
        "content": "<p>I think better general automation, like a really good sledgehammer, would put us halfway to world domination. We have lots of tricks to mitigate the tedium of searching for things in the library, but it is still tedious, and a distraction from the mathematics. I know Lean 3 is not the right place to do it and Lean 4 isn't quite ready, but I'd be excited to see anything that moves in that direction, like preliminary experiments with Lean 4 or better data on what the pain points are in Lean 3. (But the challenge then is to make that into a sensible dissertation project.)</p>\n<p>Scott's talk on the first day of the conference, where <code>library_search</code> and <code>suggest</code> worked so well,  was really compelling. If formalization was always so nice, we'd have lots more users.</p>",
        "id": 203963072,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594823656
    },
    {
        "content": "<ul>\n<li>more people --- it's clear that the frontier of mathlib is large relative to the people working on it (and, just as importantly, I think at the moment we have capacity to bring more people up to mathlib-speed)</li>\n<li>better automation --- we really want mjolnir <span aria-label=\"hammer\" class=\"emoji emoji-1f528\" role=\"img\" title=\"hammer\">:hammer:</span> and friends</li>\n<li>surviving the transition to Lean4 --- it's going to be great, but getting mathlib across will be epic</li>\n</ul>",
        "id": 203963088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594823664
    },
    {
        "content": "<p>(Sounds like I agree with Jeremy!)</p>",
        "id": 203963142,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594823697
    },
    {
        "content": "<p>(Regarding my talk on the first day, earlier iterations of this talk had cheated and used a prototype <code>back</code> (short for \"backwards reasoning\") tactic that I've been working on on and off forever. It's never been good enough for use in the wild, but I think it could be. The general strategy is just to do a tree search applying lemmas from the library against the active goal, but working more generally than either <code>solve_by_elim</code> (which just does depth first, on a specified set of lemmas) or <code>library_search</code>, which does a single step from the entire library, followed by <code>solve_by_elim</code> with local hypotheses. For <code>back</code>, I maintain a priority queue of different branches of the search, and try to get the priority function right. Heuristics like \"anytime you get to use a local hypothesis is good\" and \"more subgoals is worse than less\" and \"goals that depend on other goals via metavariables are bad\" get you some of the way. Idiotic heuristics like \"use lemmas with short names instead of long names\" are surprisingly helpful.)</p>",
        "id": 203963834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594824020
    },
    {
        "content": "<p><code>back</code> sounds very similar to <code>auto</code>, which is Coq's main workhorse. Afaik they even use some of the same heuristics.</p>",
        "id": 203965405,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1594824773
    },
    {
        "content": "<p>Yes. We really should just port <code>auto</code>. As far as I know there's no real obstacle to following what they do.</p>",
        "id": 203965904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594824998
    },
    {
        "content": "<p>I have been reinventing the wheel for no defendable reason whatsoever. :-)</p>",
        "id": 203965955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594825019
    },
    {
        "content": "<p>I originally wrote <code>finish</code> with <code>auto</code> in mind, but I relied on some not-very-widely-used SMT-like gadgets that Leo has implemented in C++ to find useful instantiations for quantifiers. They didn't do exactly what I wanted, and at that point I was stuck: I didn't have the energy or expertise to write my own C++ versions, and they would have been too slow in metaprogramming. But now that <code>leanprover-community</code> has Lean 3, that's a reasonable option.</p>",
        "id": 203966022,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594825049
    },
    {
        "content": "<p>Jasmin has seen my exploration of what sort of automation would be helpful:<br>\n<a href=\"http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf\">http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf</a><br>\n<a href=\"https://github.com/avigad/arwm\">https://github.com/avigad/arwm</a><br>\nThe last 10 slides of the talk are my take-home message.</p>",
        "id": 203966645,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594825313
    },
    {
        "content": "<p>Thank you Jeremy, those slides were very interesting. I'll look more into possible topics in automation. It seems clear to me that abstracting from tedious details is extremely important for any sort of mainstream adoption, but I don't yet have any good idea of how to advance that goal.</p>\n<p>Actually, let me run an idea by you all. It's like half an hour old, so no details, but the gist is to make automation interactive. Currently, all these search procedures are essentially black boxes: you call them and they either succeed or fail; if they fail you have to figure out, usually without any help, what lemmas or proof steps were missing. There are also often performance concerns where the heuristic picks the wrong branch of a search tree and ends up wasting an eternity on an unprovable goal. These concerns, and maybe more, could be alleviated by just asking the user:</p>\n<ul>\n<li>\"I've spent N ms on this goal without being able to solve it. Do you think it should be provable?\"</li>\n<li>\"I could apply this lemma to solve the goal if this precondition was true, but I can't prove it. Is it true?\"</li>\n<li>\"Applying this technique is risky because it may blow up the search space. Would you like me to try anyway?\"</li>\n<li>\"I could make progress by breaking through some abstraction barrier. Is that a good idea?\"</li>\n<li>\"There are different possible solutions for this typeclass instance. Which one should I choose?\"</li>\n</ul>\n<p>Obviously, there are a lot of technical questions here, but does this sound like something worth trying?</p>",
        "id": 203977623,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1594829994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Yes, this sounds like exactly the kind of thing that I would love to use.</p>",
        "id": 203979105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594830583
    },
    {
        "content": "<p>I agree. One of the things I like about Isabelle's <code>auto</code> is that you can use it sort-of interactively. You try it, look at the mess it leaves, and then say, \"oh, it just needs this <code>simp</code> lemma\" or \"it just needs this fact.\" That doesn't always work: sometimes, it does some unpacking and then doesn't know how to instantiate some quantifier, and then there is no way to specify that from the start. (\"When you get to the part when you have introduced an arbitrary <code>epsilon</code> and want to use the continuity hypothesis, use <code>epsilon / 2</code>.\") It would be great to find ways of conveying that information. Typically the user has a general idea why the inference is true, and will be happy to provide additional guidance.</p>\n<p>By the way, my understanding is that stuff like this is one of the motivations for turning syntax into first-class objects in Lean 4. Imagine what we could do if the simplifier returned a trace as a structured object that a tactic could traverse. You could use a GUI to navigate the tree and figure out where it is going wrong, and then add an annotation to steer it in the right direction.</p>\n<p>Another thought: it is generally easier for users (especially mathematicians) to give terms and statements rather than theorem names. We want to say \"at some point, use <code>p &gt; 0</code>\" rather than \"at some point, use <code>nat.prime_pos</code>.\" We want to think about the mathematically relevant stuff, not the names of theorems or the way they are expressed in the library.</p>",
        "id": 203982622,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594832372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> Making syntax a first class citizen will not improve the interaction between tactics, I believe because they already have the option of exchanging bits of syntax. Case in point, I wrote <code>squeeze_simp</code>, then <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> modified it so that <code>tidy</code> could access the results and now <code>tidy</code> can return a piece of advice that contains an explicit list of <code>simp</code> lemmas.</p>\n<p>What I think will change is the style of interaction with the user. When complicated types don't quite match in subtle ways, having the syntax tree allows emacs / VS code to do a structural comparison and bring the user's attention to what is actually relevant to them.</p>",
        "id": 203983437,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594832769
    },
    {
        "content": "<p>Thanks! I stand corrected.</p>",
        "id": 203987815,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594834796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/What.20are.20Lean's.20biggest.20issues.3F/near/203982622\">said</a>:</p>\n<blockquote>\n<p>... That doesn't always work: sometimes, it does some unpacking and then doesn't know how to instantiate some quantifier, and then there is no way to specify that from the start. (\"When you get to the part when you have introduced an arbitrary <code>epsilon</code> and want to use the continuity hypothesis, use <code>epsilon / 2</code>.\") It would be great to find ways of conveying that information. Typically the user has a general idea why the inference is true, and will be happy to provide additional guidance.</p>\n<p>Another thought: it is generally easier for users (especially mathematicians) to give terms and statements rather than theorem names. We want to say \"at some point, use <code>p &gt; 0</code>\" rather than \"at some point, use <code>nat.prime_pos</code>.\" We want to think about the mathematically relevant stuff, not the names of theorems or the way they are expressed in the library.</p>\n</blockquote>\n<p><a href=\"https://github.com/bzhan/auto2\">auto2</a> supports some (or all?) of these ideas. I am no expert, but I am about to integrate it in a project of mine, so I could tell you more about how it works out in practice hopefully soon.</p>\n<p>There was also some work on a proof planner in Isabelle: <a href=\"https://dream.inf.ed.ac.uk/projects/isaplanner/\">IsaPlanner</a>. But it seems quite dead.</p>",
        "id": 203988303,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594835025
    },
    {
        "content": "<p>I am a big fan of Bohua Zhan. Yes, please do let me know what you think of <code>auto2</code>.</p>",
        "id": 203989415,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594835537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/What.20are.20Lean's.20biggest.20issues.3F/near/203983437\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> Making syntax a first class citizen will not improve the interaction between tactics, I believe because they already have the option of exchanging bits of syntax. Case in point, I wrote <code>squeeze_simp</code>, then <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> modified it so that <code>tidy</code> could access the results and now <code>tidy</code> can return a piece of advice that contains an explicit list of <code>simp</code> lemmas.</p>\n</blockquote>\n<p>But you still have to copy and insert the suggestion manually, don't you? I know there is a hole command, but then you still have to insert the hole first. When you can generate and manipulate actual syntax trees and not just strings, automatically rewriting the tactic proof itself becomes absolutely possible.</p>\n<p>I don't think you need <code>Syntax</code> for improving unification error messages; the terms are produced from the pretty printer anyway, which can annotate the output in any way it wants. Is that not exactly what <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> is doing, just not with pairs of terms (yet)?</p>",
        "id": 204010406,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1594845835
    },
    {
        "content": "<blockquote>\n<p>But you still have to copy and insert the suggestion manually, don't you?</p>\n</blockquote>\n<p>It should now be possible to use widgets to insert the suggestion if you click a button made by a widget made by squeeze simp.</p>",
        "id": 204010853,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1594846081
    },
    {
        "content": "<p>The new pretty printer tagging thing effectively gives lean pretty printed strings source maps. So I think you would need a bit more work to get it to output structured data for other procedures like simplification, particularly the C++ implemented ones.</p>",
        "id": 204011246,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1594846270
    },
    {
        "content": "<p>Speaking of the pretty printer, one issue Iâ€™d love to see resolved would be to have the pretty printer round trip.</p>",
        "id": 204013046,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1594847257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113488-general/topic/What.20are.20Lean's.20biggest.20issues.3F/near/204010853\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But you still have to copy and insert the suggestion manually, don't you?</p>\n</blockquote>\n<p>It should now be possible to use widgets to insert the suggestion if you click a button made by a widget made by squeeze simp.</p>\n</blockquote>\n<p>Or press <code>Alt - V</code></p>",
        "id": 204039696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594868511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/What.20are.20Lean's.20biggest.20issues.3F/near/203983437\">said</a>:</p>\n<blockquote>\n<p>Case in point, I wrote <code>squeeze_simp</code>, then <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> modified it so that <code>tidy</code> could access the results and now <code>tidy</code> can return a piece of advice that contains an explicit list of <code>simp</code> lemmas.</p>\n</blockquote>\n<p>I don't think we actually did this! We definitely talked about it, but at least the <code>tidy</code> end doesn't do this yet.</p>",
        "id": 204042485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594872032
    },
    {
        "content": "<p>Bohua got extremely far using <code>auto2</code> in his own formalizations. I was curious to see the workflow and asked him, in Cambridge, to prove an easy lemma live, so I could see it. Unfortunately, it didn't convince me, quite the opposite. Maybe I picked the wrong lemma.</p>\n<p>There was no information or guidance on failure, a bit like Sledgehammer, and when you use it it's the only tactic available (it comes with its own Isar-like structured proof language but more implicit and where every goal is proved by <code>auto2</code>). Many of the ideas are good, but I'm not sure about the lack of labels (even pen-and-paper proofs track dependencies more closely than <code>auto2</code>), and the impossibility to plug in your own tactic in the middle is bound to put off people who know a few tactics and want to use them.</p>",
        "id": 204050831,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594882112
    },
    {
        "content": "<p>Those are good points Jasmin, thanks for pointing them out. I will take notes about them when experimenting with auto2</p>",
        "id": 204058498,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594888755
    },
    {
        "content": "<p>Could also be because it's his own tooling so he didn't bother too much with debuggability. The question is whether these problems would still be there with a few additional person-years of work <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204084638,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1594906836
    },
    {
        "content": "<blockquote>\n<p>There was also some work on a proof planner in Isabelle: IsaPlanner. But it seems quite dead.</p>\n</blockquote>\n<p>Not only it's quite dead, it was never alive. I'm not aware of any users, and its user manual's most impressive example automated a proof that could have been achieved with the one-liner <code>by (induct x) auto</code>, I seem to recall.</p>",
        "id": 204315293,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595102226
    },
    {
        "content": "<p>Answering to Simon C.: Some of it is tooling for sure, some of it is design choices I would question, but I agree all of this is fixable, and there's probably a lot to learn from <code>auto2</code>.</p>",
        "id": 204315354,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595102322
    },
    {
        "content": "<p>In principle, <code>auto2</code> the tactic (as opposed to the structured proof language built on top of it) is very similar to Lean's <code>smt</code> mode: it propagates equalities a bit like <code>cc</code>, heuristically instantiated quantifiers, etc. But it seems to work much better, at least for Bohua. I really wonder why.</p>",
        "id": 204315425,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595102447
    }
]