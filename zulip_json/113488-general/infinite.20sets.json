[
    {
        "content": "<p>We know a lot of things about <code>set.finite</code>, but what do we know when the set is not finite?</p>",
        "id": 166648386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558973327
    },
    {
        "content": "<p>for example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">of_not_finite</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 166648523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558973435
    },
    {
        "content": "<p>that's equivalent to a <code>cardinal</code> theorem</p>",
        "id": 166648682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558973608
    },
    {
        "content": "<p>how many lines would I need?</p>",
        "id": 166648776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558973682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">of_not_finite</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hfs</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">hf1</span> <span class=\"n\">hf2</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">linarith</span><span class=\"bp\">.</span><span class=\"n\">eq_of_not_lt_of_not_gt</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">conv_rhs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec&#39;</span> <span class=\"o\">},</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hf2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">],</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hmn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_attach</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"n\">conv_lhs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec&#39;</span> <span class=\"o\">},</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hf2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">],</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hnm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_attach</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf1</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166650012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558974878
    },
    {
        "content": "<p>14 lines without <code>cardinal</code></p>",
        "id": 166650015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558974887
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">of_not_finite</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_of_not_lt</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">lt_omega_iff_finite</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hfs</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166650130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558975058
    },
    {
        "content": "<p>the proof is morally done after line 2 (you have <code>ℕ ↪ ↥s</code>) and the rest is making it fit your statement</p>",
        "id": 166650223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558975138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> By the way, this is how I want high powered libraries to work</p>",
        "id": 166650269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558975199
    },
    {
        "content": "<p>The main theorem is one line, and the rest is elementary unpacking</p>",
        "id": 166650324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558975222
    },
    {
        "content": "<p>great</p>",
        "id": 166650370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558975298
    },
    {
        "content": "<p>where should we put this lemma? it has some tricky dependencies...</p>",
        "id": 166650375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558975314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sounds good... I want more high-powered libraries (-;</p>",
        "id": 166650554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558975482
    },
    {
        "content": "<p>Also... if possible the elementary unpacking should be <code>by tidy</code> or <code>by schoolkid</code> or <code>by elementary</code></p>",
        "id": 166650588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558975515
    }
]