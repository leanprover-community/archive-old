[
    {
        "content": "<p>Have a look at <a href=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/b1e6489145be504e64a009226c6811bfd84a5070/src/valuations.lean#L143-L151\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/b1e6489145be504e64a009226c6811bfd84a5070/src/valuations.lean#L143-L151\">https://github.com/kbuzzard/lean-perfectoid-spaces/blob/b1e6489145be504e64a009226c6811bfd84a5070/src/valuations.lean#L143-L151</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"n\">none</span>     <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>What would be a way to compress this down to three lines?  Replacing lines 3 to N by <code>|_ _ _ := rfl</code> doesn' work.</p>",
        "id": 127771996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528464599
    },
    {
        "content": "<p>I would try something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">option</span> <span class=\"bp\">_</span> <span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">congr_arg</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">refl</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127772157,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528464723
    },
    {
        "content": "<p>Maybe this would be clearer and faster:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">option</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n     <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n     <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127772285,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528464919
    },
    {
        "content": "<p>Thanks. You need to try <code>rfl</code> first or replace names by wildcards since <code>x</code>, <code>y</code>, <code>z</code> are defined only in one case</p>",
        "id": 127774966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">option</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n     <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>  <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127774970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468409
    },
    {
        "content": "<p>Isn't the correct answer to your initial question <code>obviously</code>?</p>",
        "id": 127775025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528468456
    },
    {
        "content": "<p>Ok, it's time for some tactic lecture. How to you get Lean to see the name of the theorem we are proving is <code>mul_assoc</code> and there are three variables in order to use this information instead of explicitly writing <code>_root_.mul_assoc _ _ _</code>? Then you can do a bunch of other proofs with the same tactic</p>",
        "id": 127775053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468537
    },
    {
        "content": "<p>I don't think we have <code>obviously</code> yet. But indeed it would be the correct answer</p>",
        "id": 127775095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468563
    },
    {
        "content": "<p>Maybe we can add Scott's repo as a dependency</p>",
        "id": 127775102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468574
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 127775105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528468580
    },
    {
        "content": "<p>But I think it requires adding lots of attribute through mathlib.</p>",
        "id": 127775112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528468597
    },
    {
        "content": "<p>So it might not go as smoothly as we hope.</p>",
        "id": 127775113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528468605
    },
    {
        "content": "<p>His library is not orthogonal to mathlib, so it won't be an easy PR, I guess.</p>",
        "id": 127775144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528468672
    },
    {
        "content": "<p>I don't think it's true</p>",
        "id": 127775194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468698
    },
    {
        "content": "<p>My pull request has not been merged yet but if you want to use my branch the code would end up very similar to your indexed product.</p>",
        "id": 127775202,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528468717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I would love to be proved wrong. But what I've seen so far, is that you need to put a lot of attributes at a lot of definitions. And then afterwards life becomes easy.</p>",
        "id": 127775278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528468806
    },
    {
        "content": "<p>At least you can add lean-tidy to the project and then <code>import tidy.tidy</code> and get access to <code>obviously</code>. Then it doesn't prove this lemma</p>",
        "id": 127775330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468895
    },
    {
        "content": "<p>Simon I don't understand what you wrote</p>",
        "id": 127775340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468914
    },
    {
        "content": "<blockquote>\n<p>At least you can add lean-tidy to the project and then <code>import tidy.tidy</code> and get access to <code>obviously</code>. Then it doesn't prove this lemma</p>\n</blockquote>\n<p>Right... but your point is that it might still prove other lemma's?</p>",
        "id": 127775402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528468962
    },
    {
        "content": "<p>I hope so</p>",
        "id": 127775419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528468992
    },
    {
        "content": "<p>Let's see what time is it in Australia.</p>",
        "id": 127775434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469021
    },
    {
        "content": "<p>I made a pull request with <code>refine_struct</code> that would be useful here. It hasn't been merged yet but you can still use it.</p>",
        "id": 127775439,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528469030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> We currently have this proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">option</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>  <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Question: should this be killed by one of your magic tactics?</p>",
        "id": 127775487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469056
    },
    {
        "content": "<p>Simon: But the question at hand has no structure to refine</p>",
        "id": 127775493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469088
    },
    {
        "content": "<p>Aren't you building up to a monoid or semigroup?</p>",
        "id": 127775587,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528469211
    },
    {
        "content": "<p>True</p>",
        "id": 127775601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469237
    },
    {
        "content": "<p>I don't know what I was thinking</p>",
        "id": 127775607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469245
    },
    {
        "content": "<p>You may be able to have only one proof for the whole instance</p>",
        "id": 127775614,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528469264
    },
    {
        "content": "<p>I was carelessly browsing code in lean-perfectoid and saw this lemma with seven stupid lines and focussed on it. But of course its only use is in an instance later.</p>",
        "id": 127775662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469295
    },
    {
        "content": "<p>That's a pretty common mindset for me. That's actually a fun part of doing engineering: some days I don't feel smart so I can do some mindless tasks until I feel inspired again. The downside is that I don't consider much contexts while doing that so I end up improving the minutia of solutions that should just scrapped altogether</p>",
        "id": 127775784,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528469455
    },
    {
        "content": "<p>It's a bit annoying that this PR is not merged because it's content is scattered among several files, so it's not immediate to incorporate it into another project</p>",
        "id": 127775861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469538
    },
    {
        "content": "<p>What you can do is link to my repo in your toml file</p>",
        "id": 127775950,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528469681
    },
    {
        "content": "<p>I may have to update that branch first but I can do that right now</p>",
        "id": 127775976,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528469721
    },
    {
        "content": "<p>That may be a good solution if <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> need more time to review your PR, because the Perfectoid project will need a lot of instances of algebraic objects.</p>",
        "id": 127776127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528469916
    },
    {
        "content": "<p>It's ready when you are.</p>",
        "id": 127777679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528471563
    },
    {
        "content": "<p>After doing <code>field ← get_current_field,</code> how would you replace <code>whatever.something</code> with <code>_root_.something</code> inside <code>field</code> so that I can later use it in the relevant version of <code>derive_field</code>?</p>",
        "id": 127779269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473446
    },
    {
        "content": "<p>Is <code>whatever</code> something like <code>semigroup</code>?</p>",
        "id": 127779369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528473588
    },
    {
        "content": "<p>yes</p>",
        "id": 127779372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473600
    },
    {
        "content": "<p>Why do you need to strip it away?</p>",
        "id": 127779429,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528473624
    },
    {
        "content": "<p>because it doesn't work otherwise</p>",
        "id": 127779454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473676
    },
    {
        "content": "<p>see the handcrafted proof above</p>",
        "id": 127779456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473681
    },
    {
        "content": "<p>Do you have an instance of <code>semigroup</code> for <code>α</code>?</p>",
        "id": 127779538,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528473774
    },
    {
        "content": "<p><code>linear_ordered_comm_group</code> actually</p>",
        "id": 127779562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473823
    },
    {
        "content": "<p>and the goal is to build <code>linear_ordered_comm_monoid (option α)</code></p>",
        "id": 127779564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473836
    },
    {
        "content": "<p>but <code>to_string field</code> turns out to be <code>comm_monoid.mul_assoc</code> here</p>",
        "id": 127779611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473865
    },
    {
        "content": "<p>but the proof then needs <code>_root_.mul_assoc</code></p>",
        "id": 127779616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473888
    },
    {
        "content": "<p>I find it odd: the types are very similar. Can you give me the error you get when your proof fails?</p>",
        "id": 127779821,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528474154
    },
    {
        "content": "<p>(It is possible to do what you ask but I think we're better off taking a different approach)</p>",
        "id": 127779827,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528474178
    },
    {
        "content": "<p>I minimized to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"n\">class</span> <span class=\"n\">linear_ordered_comm_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"kn\">extends</span> <span class=\"n\">comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">linear_ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"kn\">extends</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>        <span class=\"bp\">_</span>        <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">_</span>        <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field_option</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>The game is to add <code>derive_field_option</code> to <code>algebra.pi_instances</code> (from your branch of course) to make it work</p>",
        "id": 127780142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474582
    },
    {
        "content": "<p>Again, this is not crucial, Kenny did it by hand, I'm only trying to slowly learn tactic writing for specialized automation</p>",
        "id": 127780175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474657
    },
    {
        "content": "<p>Nice :) I'm going to play a bit :D</p>",
        "id": 127780177,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528474660
    },
    {
        "content": "<p>I should go and take care of my family (I'm not even talking about the work I should have been doing)</p>",
        "id": 127780228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474697
    },
    {
        "content": "<p>Ah family! They keep interrupting math, don't they? :D</p>",
        "id": 127780239,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528474732
    },
    {
        "content": "<p>The version which doesn't work is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">derive_field_option</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">is_prop</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">field</span><span class=\"o\">),</span>\n     <span class=\"n\">intros</span><span class=\"o\">,</span>\n     <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">option</span> <span class=\"bp\">_</span><span class=\"o\">],</span>\n     <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">}]</span>\n  <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">skip</span>\n</pre></div>",
        "id": 127780314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474816
    },
    {
        "content": "<p>Just arrived back from underwater. I've starred the proof you asked about, @Patrick, and will try out <code>obviously</code>. I suspect it requires more case bashing (on <code>option</code>) than obviously is by default willing to do.</p>",
        "id": 127888806,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528705579
    }
]