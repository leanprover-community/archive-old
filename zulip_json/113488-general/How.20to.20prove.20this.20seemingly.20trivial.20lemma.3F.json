[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma append_is_prefix [decidable_eq α] (l₁ : list α) (l₂ : list α) :\nis_prefix_of l₁ (l₁ ++ l₂) = tt := sorry\n</pre></div>",
        "id": 188759645,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582309245
    },
    {
        "content": "<p><code>is_prefix_of</code> is a <code>Prop</code>, right? So there is a bool coercion there that you should first get rid of</p>",
        "id": 188759794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309360
    },
    {
        "content": "<p>It's a bool</p>",
        "id": 188759804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582309373
    },
    {
        "content": "<p>crazy computer science thing</p>",
        "id": 188759821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582309384
    },
    {
        "content": "<p>In that case there should be a theorem relating it to <code>&lt;:+</code> which is a prop</p>",
        "id": 188759847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309407
    },
    {
        "content": "<p>XD<br>\nyeah I had no idea how to work with bool in lean</p>",
        "id": 188759867,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582309432
    },
    {
        "content": "<p>what is <code>&lt;:+</code></p>",
        "id": 188759919,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582309446
    },
    {
        "content": "<p>I think its actual name is <code>list.is_prefix</code></p>",
        "id": 188759940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309465
    },
    {
        "content": "<p>oh wow</p>",
        "id": 188759949,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582309471
    },
    {
        "content": "<p>that's where you will find the theorems</p>",
        "id": 188759970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309486
    },
    {
        "content": "<p>Oops, prefix is <code>&lt;+:</code>, suffix is <code>&lt;:+</code></p>",
        "id": 188760081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309564
    },
    {
        "content": "<p>ah ok</p>",
        "id": 188760099,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582309575
    },
    {
        "content": "<p>I was only looking in <code>init.list.basic</code></p>",
        "id": 188760118,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582309592
    },
    {
        "content": "<p>ah ok <code>prefix_append</code> already proved</p>",
        "id": 188760183,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582309646
    },
    {
        "content": "<p>Oh, looks like you found a hole in the library. The equivalence of <code>list.is_prefix</code> and <code>list.is_prefix_of</code> is not proved</p>",
        "id": 188760330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309727
    },
    {
        "content": "<p>You should just use <code>list.is_prefix</code> anyway, it has a decidable instance so it's better than a bool function</p>",
        "id": 188760376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309763
    },
    {
        "content": "<p>but <code>list.is_prefix_of</code> is in core... maybe now we can finally do something about these bits and bobs</p>",
        "id": 188760460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582309797
    },
    {
        "content": "<p>thx y'all, I've finished it</p>",
        "id": 188760887,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582310046
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">bool</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_prefix_of_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n  <span class=\"n\">is_prefix_of</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">↔</span> <span class=\"n\">l₁</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">nil_prefix</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l₂</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_::_</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">eq_nil_of_prefix_nil</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_prefix_of</span><span class=\"o\">,</span> <span class=\"n\">band_coe_iff</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">coe_to_bool</span><span class=\"o\">,</span> <span class=\"n\">is_prefix_of_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">prefix_cons_inj</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">injection</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</pre></div>",
        "id": 188762112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582310935
    }
]