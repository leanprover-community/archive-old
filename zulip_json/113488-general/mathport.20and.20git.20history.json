[
    {
        "content": "<p>I don't think this is a goal in this process.  Things are difficult enough.</p>",
        "id": 265815478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640186091
    },
    {
        "content": "<p>Would it be at all within the realm of possibility to run <code>git filter-branch --tree-filter 'synport **/*.lean'</code> on the entirety of mathlib history? I might look into that if I suddenly find myself with too much free time :)</p>",
        "id": 265815792,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640186271
    },
    {
        "content": "<p>On the other hand, it requires zero Lean skills so the chance of executing this in parallel (by finding a different set of volunteers to do the repo surgery) is much higher. But it requires a few executive decisions first so the mathlib3 and mathlib4 GitHub Issues don't end up in different repositories if the history surgery is eventually done.</p>",
        "id": 265815993,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1640186365
    },
    {
        "content": "<p>The easiest way to do that would be to probably <em>copy</em> the git /mathlib repo to /mathlib3 when the day comes (instead of renaming through GitHub) and push a big commit to /mathlib with the migration. This preserves history and issues, and also allows someone to do work in the future to improve git blame support across versions.</p>",
        "id": 265816521,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1640186658
    },
    {
        "content": "<p>I like this approach. Another way to think of it is starting a fresh repository with precisely the current <code>mathlib</code> files and git history and then do a big commit replacing everything by the migrated version.</p>",
        "id": 265818120,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640187572
    },
    {
        "content": "<p>This depends on whether people decide keeping old issues/PRs in the same repo as new ones is desirable, because those don't live in-repo. It has its pros and cons.</p>",
        "id": 265818717,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1640187844
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 265819282,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640188143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/Community.20blog/near/265818120\">said</a>:</p>\n<blockquote>\n<p>I like this approach. Another way to think of it is starting a fresh repository with precisely the current <code>mathlib</code> files and git history and then do a big commit replacing everything by the migrated version.</p>\n</blockquote>\n<p>This is the approach I would lean towards. In particular, it means that git-savvy users can:</p>\n<ul>\n<li>Run synport on the new files in some stale lean3 PR</li>\n<li>merge mathlib4/master into the PR, and have things mostly just work</li>\n</ul>",
        "id": 265820176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640188617
    },
    {
        "content": "<p>Wouldn't that be easier if mathlib was the Lean 4 repo post-migration? You could even update stale lean3 PRs in-place.</p>",
        "id": 265820388,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1640188714
    },
    {
        "content": "<p>(Note: this discussion originated as reply to a community blogpost. See <a href=\"#narrow/stream/113488-general/topic/Community.20blog/near/265810799\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Community.20blog/near/265810799</a>)</p>",
        "id": 265820740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640188858
    },
    {
        "content": "<p>Keeping it separate has the advantages of:</p>\n<ul>\n<li>A clean slate for Prs in mathlib4</li>\n<li>Leaving behind an easily viewable snapshot of working lean3 PRs, that don't end up being wrecked by a half-baked attempt at a lean4 port before users abandon them again</li>\n</ul>",
        "id": 265820750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640188862
    },
    {
        "content": "<p>In principle we can decide what to do about where to keep old mathlib3 PRs later, we can always swap around the git repos under the hood if we change our mind (as long as we have no mathlib4 PRs yet)<br>\n!</p>",
        "id": 265820927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640188929
    },
    {
        "content": "<p>Maybe the best argument for <em>keeping</em> the same PRs (as you suggest, <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>) is that PR references in commit messages will continue to point to the right thing.</p>",
        "id": 265820996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640188964
    },
    {
        "content": "<p>That is, preserving the closed PRs is more important than the open ones</p>",
        "id": 265821031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640188980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/mathport.20and.20git.20history/near/265820750\">said</a>:</p>\n<blockquote>\n<p>Keeping it separate has the advantages of:</p>\n<ul>\n<li>A clean slate for Prs in mathlib4</li>\n<li>Leaving behind an easily viewable snapshot of working lean3 PRs, that don't end up being wrecked by a half-baked attempt at a lean4 port before users abandon them again</li>\n</ul>\n</blockquote>\n<p>For the second point, there would still be a snapshot of branches  in a read-only, archived /mathlib3 repository, so people could go to the mathlib PR, copy the branch name and look it up in /mathlib3 in case of wreckage. It's a bit more work but it sounds like an exceptional case.</p>\n<p>I don't know enough about mathlib to opine on the first point (and maybe the right choice will depend on the usability of synport on flag day), but in general \"clean slate\" doesn't sound like a good thing when it comes to version control. If that is desired, though, it can be \"emulated\" by closing all PRs on flag day.</p>",
        "id": 265822252,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1640189610
    },
    {
        "content": "<p>Note that there are separate repos for <a href=\"https://github.com/leanprover/lean2/\">https://github.com/leanprover/lean2/</a>, <a href=\"https://github.com/leanprover/lean/\">https://github.com/leanprover/lean/</a> and <a href=\"https://github.com/leanprover/lean4/\">https://github.com/leanprover/lean4/</a>, so I think I know the strategy that Leo prefers: a clean break in a new repository. Similarly mathlib is in a separate repository from the lean 2 library (well, they were not separated into core + mathlib at the time so this is no surprise). So I would suggest keeping the new mathlib4 repository separate forever, although we might change the repo names around at some point.</p>",
        "id": 265850766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640205952
    },
    {
        "content": "<p>If you want to do git archaeology, it's really not that bad to switch over to the other repo if you hit the bottom and want to keep digging</p>",
        "id": 265850944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206041
    },
    {
        "content": "<p>If we did concatenate the histories in some way, I don't think the git diff would be useful at all. Early mathlib4 history will show entire files being ported from somewhere, and then the initial commit will show deletion of a bunch of stuff that is not restored until way later. Much simpler just to acknowledge that they have completely separate edits. If every mathlib change had a corresponding mathlib4 change it might be a different story, but the port isn't going to work like that except possibly in the very late stage</p>",
        "id": 265851277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206271
    },
    {
        "content": "<p>What are the benefits of keeping the git history? Is the main one <code>git blame</code>?</p>",
        "id": 265851283,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640206273
    },
    {
        "content": "<p>And the ability to merge old mathlib3 branches with git trying to help</p>",
        "id": 265851511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640206410
    },
    {
        "content": "<p>git can't help...</p>",
        "id": 265851535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206429
    },
    {
        "content": "<p>I'd counter with \"what would be the benefit of <em>not</em> keeping the history?\"</p>",
        "id": 265851539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640206438
    },
    {
        "content": "<p>It amounts to providing the fiction that mathlib4 was somehow produced by editing mathlib, which is not the case and would be very hard to present well</p>",
        "id": 265851649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206502
    },
    {
        "content": "<p>But that's not fiction, is it? The \"editing\" is performed by synport</p>",
        "id": 265851711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640206548
    },
    {
        "content": "<p>The process that produces files that appear in mathlib4 is complex, involving automatic translation of a mathlib file plus a bunch of human touchup. There is no way git will have a good time trying to understand this relationship</p>",
        "id": 265851808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206607
    },
    {
        "content": "<p>Knowing \"who did this\" might be helpful, but one can just ask here on Zulip.<br>\nAnother advantage of git history is keeping growth data. But it's a bit strange to mix mathlib3 and 4 contribution data</p>",
        "id": 265851915,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640206680
    },
    {
        "content": "<p>Plus, there will be a long period of co-evolution (which we are currently in), where mathlib3 still receives commits while mathlib4 is doing its own thing. Appending histories implies that there is a \"last\" commit of mathlib3, and I don't think we ever need to make a hard break on this</p>",
        "id": 265852041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206731
    },
    {
        "content": "<p>It's not like we're going to delete the mathlib3 repo, so calling it \"not keeping the history\" is disingenuous</p>",
        "id": 265852107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206773
    },
    {
        "content": "<p>I'm not even sure we need to archive it</p>",
        "id": 265852216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206807
    },
    {
        "content": "<p>You can still contribute to lean 2 if you want</p>",
        "id": 265852296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206830
    },
    {
        "content": "<p>It's a very personal thing but maybe others resonate: I like enclosing cycles and doing things in a way that help me build the feeling of starting fresh and wiser <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 265852523,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640206942
    },
    {
        "content": "<p>If I were plotting growth data, I would put mathlib3 and mathlib4 on different lines / colors and let readers connect the dots themselves</p>",
        "id": 265852530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640206948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathport.20and.20git.20history/near/265850766\">said</a>:</p>\n<blockquote>\n<p>Note that there are separate repos for <a href=\"https://github.com/leanprover/lean2/\">https://github.com/leanprover/lean2/</a>, <a href=\"https://github.com/leanprover/lean/\">https://github.com/leanprover/lean/</a> and <a href=\"https://github.com/leanprover/lean4/\">https://github.com/leanprover/lean4/</a>, so I think I know the strategy that Leo prefers: a clean break in a new repository. Similarly mathlib is in a separate repository from the lean 2 library (well, they were not separated into core + mathlib at the time so this is no surprise). So I would suggest keeping the new mathlib4 repository separate forever, although we might change the repo names around at some point.</p>\n</blockquote>\n<p>The lean4 repo started as a copy of the lean repo (history starts in 2013 and the least common ancestor is <code>d36b859c6579ce1b86f257a494bb99417c7cdac1</code>, from 2018). But, as you said, this may be an apples to oranges comparison.</p>",
        "id": 265853274,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1640207422
    },
    {
        "content": "<p>Also, mathlib derives from an earlier repository via manual porting, which will probably look similar to the mathlib4 port. The repo can now be found at <a href=\"https://github.com/avigad/library_dev\">https://github.com/avigad/library_dev</a></p>",
        "id": 265857160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640209759
    },
    {
        "content": "<p>It does not have any common commits with mathlib, but many files are copied from it in the first few commits</p>",
        "id": 265857279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640209825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is the intention to add synported files to the current mathlib4 repository or to start a new fresh respository with the whole synported merged with state of mathlib4 at that time? If it is the former, keeping them separate is almost a necessity as mathlib4 already has its own PRs and issues that one would probably not want to smash.</p>",
        "id": 265908893,
        "sender_full_name": "Mac",
        "timestamp": 1640259570
    },
    {
        "content": "<p>Right now, it's the former. We might revisit this question when we are ready to start the large scale port, but there are files that need to be ported before that because they are used in tactics, and those are all going into mathlib4 as is. I expect somewhere around 5-10% of mathlib to be \"pre-ported\" in this way before we can do the rest of it.</p>",
        "id": 265910462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640261083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathport.20and.20git.20history/near/265851808\">said</a>:</p>\n<blockquote>\n<p>The process that produces files that appear in mathlib4 is complex, involving automatic translation of a mathlib file plus a bunch of human touchup. There is no way git will have a good time trying to understand this relationship</p>\n</blockquote>\n<p>Now that <a href=\"https://github.com/github/feedback/discussions/5033#discussioncomment-2318478\">GitHub supports ignoring commits in the blame view</a>, I did a simplistic experiment to see how well Git would handle blame data if we simply replaced every file by its mathported version. It's at my mathlib fork (for example, look at <a href=\"https://github.com/collares/mathlib/blame/master/src/LinearAlgebra/Basic.lean\">https://github.com/collares/mathlib/blame/master/src/LinearAlgebra/Basic.lean</a>, <a href=\"https://github.com/collares/mathlib/blame/master/src/GroupTheory/Sylow.lean\">https://github.com/collares/mathlib/blame/master/src/GroupTheory/Sylow.lean</a> or <a href=\"https://github.com/collares/mathlib/blame/master/src/Algebra/Group/Freiman.lean\">https://github.com/collares/mathlib/blame/master/src/Algebra/Group/Freiman.lean</a>).</p>",
        "id": 275406549,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1647365070
    },
    {
        "content": "<p>Wow, that third file is really well written!</p>",
        "id": 275408165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647365854
    },
    {
        "content": "<p>I suspect we want to do that, but also merge in the Mathlib4 history at the same time, so that we don't lose the non-mathportable tactic history there. Either way, thanks for the experiment!</p>",
        "id": 275414894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647368350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/mathport.20and.20git.20history/near/275414894\">said</a>:</p>\n<blockquote>\n<p>I suspect we want to do that, but also merge in the Mathlib4 history at the same time, so that we don't lose the non-mathportable tactic history there. Either way, thanks for the experiment!</p>\n</blockquote>\n<p>Right! That seems doable with <code>git subtree split</code>.</p>",
        "id": 275415130,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1647368465
    },
    {
        "content": "<p><code>git merge --allow-unrelated-histories</code> ought to be enough</p>",
        "id": 275417470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647369411
    }
]