[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">digits</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">digits</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"err\">%</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">digits</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test&#39;</span> <span class=\"o\">:</span> <span class=\"n\">digits</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"err\">%</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">digits</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>          <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 203469392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594356896
    },
    {
        "content": "<p>There's an <code>acc.rec</code> in the definition of <code>digits_aux</code> which is the main source of funny things like this.</p>",
        "id": 203469738,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1594357528
    },
    {
        "content": "<p>and what's wrong with <code>acc.rec</code>? isn't everything computable?</p>",
        "id": 203470215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594358195
    },
    {
        "content": "<p>meta-theorem: if it's computable and everything is explicit then it can be unfolded</p>",
        "id": 203470230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594358213
    },
    {
        "content": "<p>I would love to understand this, too. I know in my work on combinatorial games, nothing was every \"actually\" computable if I used well-founded recursion, and I always had to rewrite everything in terms recursion over <code>nat</code> before proofs by <code>rfl</code> or <code>dec_trivial</code> would start working.</p>",
        "id": 203470558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594358739
    },
    {
        "content": "<p>I fixed it <a href=\"https://gist.github.com/ChrisHughes24/84ffdb76b8009134a9f42e7a08a92ac5\">here</a> by writing an axiom free well foundedness proof.</p>",
        "id": 203492911,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1594377999
    },
    {
        "content": "<p>The best move is to avoid definitional reduction of <code>acc.rec</code>.  It is one of the few places in Lean where the actual proof term matters.  Namely the <code>acc.rec</code> application is reduced as many times as there are <code>acc.intro</code> in the well-foundedness proof.  This is also one of the earliest known failures of transitivity of definitional equality in Lean.</p>",
        "id": 203493563,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594378549
    }
]