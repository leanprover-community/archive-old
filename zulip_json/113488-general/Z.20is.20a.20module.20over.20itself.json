[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">int_module</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span>\n</code></pre></div>",
        "id": 207182363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597690263
    },
    {
        "content": "<p>The mere fact that this diamond occurs is a proof that <code>module int int</code> is a subsingleton...</p>",
        "id": 207182460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597690313
    },
    {
        "content": "<p>sigh</p>\n<p>pencil-and-paper maths has an unfair advantage</p>",
        "id": 207182589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597690361
    },
    {
        "content": "<p>Fun story: this was the first Lean error I ever encountered. I was close to quitting on day 1.</p>",
        "id": 207182700,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1597690405
    },
    {
        "content": "<p>I'm really glad you didn't quit!</p>",
        "id": 207182776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597690439
    },
    {
        "content": "<p>Perhaps you can use <code>convert</code> creatively to have it apply the subsingleton instance we have for <code>module Z</code>?</p>",
        "id": 207182911,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1597690501
    },
    {
        "content": "<p>Hmm... but that doesn't scale</p>",
        "id": 207182955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597690531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> In case you want an example of multiple instances of a class leading to headaches: voila <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 207183238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597690647
    },
    {
        "content": "<p>And the silly thing is: the two instances are provably equal, but not equal by definition. So lean complains.</p>",
        "id": 207183303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597690679
    },
    {
        "content": "<p>Can one fix <code>gsmul</code> to have definitional equality here?</p>",
        "id": 207186650,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597692403
    },
    {
        "content": "<p>but that won't solve other subsingleton problems right</p>",
        "id": 207187328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597692791
    },
    {
        "content": "<p>In a perfect library all such problems should be eliminated, one by one. Yes, this is hard work!</p>",
        "id": 207187704,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597693009
    },
    {
        "content": "<p>(Fixing <code>gsmul</code> seems complicated, it might be easier to fix integer multiplication but this would break absolutely everything <span aria-label=\"anguished\" class=\"emoji emoji-1f627\" role=\"img\" title=\"anguished\">:anguished:</span> )</p>",
        "id": 207187969,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597693200
    },
    {
        "content": "<p>in a perfect library we wouldn't rely on definitional equality</p>",
        "id": 207189373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597693979
    },
    {
        "content": "<p>First, we should fix it for <code>nat</code>, by the way:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zou</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">nat_semimodule</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">glou</span> <span class=\"o\">:</span> <span class=\"n\">zou</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 207189506,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597694043
    },
    {
        "content": "<p>is it even possible to fix it? <code>semiring.to_semimodule</code> turns <code>semiring R</code> into <code>semimodule R R</code>, which must use multiplication; <code>add_comm_monoid.nat_semimodule</code> turns <code>add_comm_monoid M</code> into <code>semimodule ℕ M</code>, and there can be no multiplication</p>",
        "id": 207190149,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597694423
    },
    {
        "content": "<p>If you give exactly the same definition for multiplication on the integers (using the additive structure on the second variable) and for the integer action on any <code>add_comm_group</code>, I don't see why they couldn't be defeq.</p>",
        "id": 207190383,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597694526
    },
    {
        "content": "<p>aha, you want us to change multiplication</p>",
        "id": 207190619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597694644
    },
    {
        "content": "<p>It's not me, it's Johan <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 207190763,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597694725
    },
    {
        "content": "<p>For <code>nat</code>, it just means that <code>nat.mul</code> (used for <code>semiring.to_semimodule</code>) should be defined in the same was as an additive version of <code>monoid.pow</code> (used for <code>nsmul</code>, used for <code>add_comm_monoid.nat_semimodule</code>). I think you can change either of them to get a definitional equality.</p>",
        "id": 207203704,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597702958
    },
    {
        "content": "<p>aah so the fix is easy! Just change the definition of nat.mul and fix the errors!</p>",
        "id": 207203905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597703096
    },
    {
        "content": "<p>Oh wait, two definitions defined in the same way using the equation compiler are not recognized as definitionally equal by Lean.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">my_mul1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">my_mul1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_mul2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">my_mul2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_mul1</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">my_mul2</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n\n\n<p>So if we want this, we might need to not use the equation compiler for these definitions?</p>",
        "id": 207204424,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597703453
    },
    {
        "content": "<p>Or we can define <code>nat.mul</code> as <code>nsmul</code> if we refactor the library so much that <code>nsmul</code> is defined before <code>nat.mul</code>...</p>",
        "id": 207204511,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597703522
    },
    {
        "content": "<p>I wish that instead we could tell Lean to not bother about diamonds if it can find an instance of <code>subsingleton (target_class)</code></p>",
        "id": 207220604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597721945
    },
    {
        "content": "<p>But I guess that requires a full-blown <code>transport</code> framework?</p>",
        "id": 207220612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597721978
    }
]