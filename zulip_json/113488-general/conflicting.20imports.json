[
    {
        "content": "<p>When I import two unrelated files (that are not yet in mathlib, so giving a MWE is complicated), I get the error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">closeds</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"err\">&#39;</span><span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">._</span><span class=\"n\">proof_1&#39;</span>\n</pre></div>\n\n\n<p>So it seems my two files define an object with the same name, but of course I never gave this name to anything. In the two files, <code>#check metric.metric_space._proof_1</code> gives respectively</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nonempty_compacts</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span> <span class=\"n\">emetric</span><span class=\"bp\">.</span><span class=\"n\">Hausdorff_edist</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span>\n    <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">of_real</span>\n        <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span>\n            <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">extension</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"bp\">×</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n           <span class=\"n\">x</span>\n           <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">of_real</span>\n        <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span>\n            <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">extension</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"bp\">×</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n           <span class=\"n\">x</span>\n           <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>These two statements come from instance proofs in the two files. For instance, the first one comes from</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">nonempty_compacts</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">emetric_space</span><span class=\"bp\">.</span><span class=\"n\">to_metric_space</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Hausdorff_edist_ne_top_of_ne_empty_of_bounded</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"o\">(</span><span class=\"n\">bounded_of_compact</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bounded_of_compact</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>If I give a name to the instance, then the problem disappears. Does this mean that one should always give a name to instances, or is there a better way to solve the issue?</p>",
        "id": 159054235,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550743301
    },
    {
        "content": "<p>you should name your instance if it gets a dumb name</p>",
        "id": 159054424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550743482
    },
    {
        "content": "<p>you can learn the naming algorithm with some trial and error, and predict the dumb names</p>",
        "id": 159054457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550743521
    },
    {
        "content": "<p>like <code>is_ring_hom.is_ring_hom</code>? :P</p>",
        "id": 159054473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550743541
    },
    {
        "content": "<p>Usually you just notice this stuff when someone (or you) complains about it</p>",
        "id": 159054483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550743561
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">fully_faithful</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">topological_spaces</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">is_group_hom</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">is_monoid_hom</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">faithful</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">fully_faithful</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">Meas</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n</pre></div>",
        "id": 159055768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550744702
    }
]