[
    {
        "content": "<p>Hi, <br>\nI'm trying to map meta expressions to an inductive type in the object language (with pattern matching on expr as described in <a href=\"https://leanprover.github.io/papers/tactic.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/papers/tactic.pdf\">https://leanprover.github.io/papers/tactic.pdf</a>). <br>\nThere's a constructor taking a natural number as argument (var : ℕ → term). How can the number be extracted from an expression with this constructor?<br>\nAlso, how does this work if I go from the inductive type back to exprs?</p>",
        "id": 134585528,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1537868651
    },
    {
        "content": "<p>I'm not sure if I understand exactly what you're after. You want a function <code>expr → ℕ</code> that will return the index if the input is made with <code>expr.var</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">var_index</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>You can do the same in the other direction, if the nat appears in a constructor of your inductive type. Match on your type, get the nat argument, and feed it back into <code>expr.var</code>.</p>",
        "id": 134586345,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1537869912
    },
    {
        "content": "<p>Or did you mean something else?</p>",
        "id": 134586346,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1537869917
    },
    {
        "content": "<p>No, that helped, thanks!</p>",
        "id": 134592201,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1537877811
    }
]