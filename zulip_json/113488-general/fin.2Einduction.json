[
    {
        "content": "<p>Does anyone know what are the equations for <code>fin.induction_on</code>? I was expecting something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fin.induction_on_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i.cast_succ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">fin.induction_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"n\">C</span> <span class=\"n\">h0</span> <span class=\"n\">hs</span> <span class=\"bp\">=</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fin.induction_on_succ</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i.cast_succ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">fin.induction_on</span> <span class=\"n\">n</span> <span class=\"n\">i.succ</span> <span class=\"n\">C</span> <span class=\"n\">h0</span> <span class=\"n\">hs</span>  <span class=\"bp\">=</span> <span class=\"n\">hs</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fin.induction_on</span> <span class=\"n\">n</span> <span class=\"n\">i.cast_succ</span> <span class=\"n\">C</span> <span class=\"n\">h0</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But the second one fails.</p>",
        "id": 282558963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652734388
    },
    {
        "content": "<p>Am I confused with my <code>fin.succ</code>, <code>fin.cast_succ</code> etc?</p>",
        "id": 282558998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652734409
    },
    {
        "content": "<p>I find it rather suspicious that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.induction\">docs#fin.induction</a> is defined in tactic mode. This seems to ask for trouble when writing the above lemmas.</p>",
        "id": 282559129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652734466
    },
    {
        "content": "<p>It's the <code>rcases</code> at the beginning I think. If you do <code>cases i</code> it unsticks the <code>rfl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fin.induction_on_succ</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i.cast_succ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">i.cast_succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">fin.induction_on</span> <span class=\"n\">n</span> <span class=\"n\">i.succ</span> <span class=\"n\">C</span> <span class=\"n\">h0</span> <span class=\"n\">hs</span>  <span class=\"bp\">=</span> <span class=\"n\">hs</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fin.induction_on</span> <span class=\"n\">n</span> <span class=\"n\">i.cast_succ</span> <span class=\"n\">C</span> <span class=\"n\">h0</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282559330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652734571
    },
    {
        "content": "<p>Nice!</p>",
        "id": 282560304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652734998
    },
    {
        "content": "<p>Arguably we should fix <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.induction\">docs#fin.induction</a> anyway</p>",
        "id": 282560338,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652735014
    },
    {
        "content": "<p>I suspect it's done in tactic mode as the version generated by the equation compiler doesn't reduce in the kernel</p>",
        "id": 282561396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652735526
    },
    {
        "content": "<p>I had some troubles with using the equation compiler for this (as in it didn't reduce nicely when trying to prove <code>fin.induction_on_succ</code>)</p>",
        "id": 282561513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652735609
    },
    {
        "content": "<p>Here's the tactic proof as a term mode proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fin.induction'</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i.cast_succ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">subtype.cases_on</span> <span class=\"n\">i</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">nat.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">IH</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_of_succ_lt_succ</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_of_succ_lt</span> <span class=\"n\">hi</span><span class=\"o\">)))</span>\n  <span class=\"n\">i</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 282561531,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652735621
    },
    {
        "content": "<p>Is there any advantage to that proof over the one we have?</p>",
        "id": 282561717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652735728
    },
    {
        "content": "<p>It's pretty much exactly the same.</p>",
        "id": 282561901,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652735803
    },
    {
        "content": "<p>I guess it doesn't have the eq.mpr in it, which is nice</p>",
        "id": 282561914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652735810
    },
    {
        "content": "<p>At the <code>h0</code>? That's along a <code>rfl</code> lemma anyway, so I'm not sure it matters</p>",
        "id": 282561967,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652735846
    }
]