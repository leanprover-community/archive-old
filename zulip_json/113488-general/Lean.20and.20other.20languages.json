[
    {
        "content": "<p>Is there much written comparing and contrasting Lean (Lean 3 and Lean 4) with other similar theorem provers like Coq, or other general-languages-that-contain-theorem-provers like F*, or the wider zoo of Theoremy Stuff?</p>\n<p>I'm currently trying to learn a bit of F* and it just seems horrible, conceptually, compared to the more elegant approach of Lean, but I'm sure I'm missing something. I'm looking for balanced thoughts on the different things that these different languages do well. I like Lean the most - but maybe I'm biased or wrong! It has been tricky to find discussion of serious comparisons though.</p>",
        "id": 273090753,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645710451
    },
    {
        "content": "<blockquote>\n<p>I'm currently trying to learn a bit of F* and it just seems horrible, conceptually, compared to the more elegant approach of Lean, but I'm sure I'm missing something.</p>\n</blockquote>\n<p>Could you elaborate on what seems horrible about F*? I can make some guesses but there are a lot of ways you could mean this.</p>",
        "id": 273097569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645713669
    },
    {
        "content": "<p>Oh, well, first off I find the whole \"embed proofs into the types of definitions\" thing... just very Ugh.</p>",
        "id": 273123418,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645724346
    },
    {
        "content": "<p>I'm fundamentally happier with a paradigm where you define things, and then prove stuff about them.</p>",
        "id": 273123464,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645724376
    },
    {
        "content": "<p>Sometimes, of course, a definition contains a proof - fine. But - to take the example they give in their manual - the idea that the type of a max function should include the assertion that it is indeed the max seems...</p>",
        "id": 273123697,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645724486
    },
    {
        "content": "<p>I just don't understand what advantages are gained by doing things like that.</p>",
        "id": 273123724,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645724502
    },
    {
        "content": "<p>Also in general I think it looks less nice than Lean, but that's really just syntax + syntactic sugar + Unicode support helping Lean.</p>",
        "id": 273123833,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645724541
    },
    {
        "content": "<p>I don't know anything about F#, but a function like max is totally determined by its characteristic property and the particular implementation is irrelevant. The proof of correctness of the implementation is necessarily coupled to the implementation anyways, so you might as well do them at the same time and then create an abstraction boundary around them.</p>",
        "id": 273129519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645726995
    },
    {
        "content": "<p>For functions like addition of natural numbers, obviously that kind of thing doesn't make sense.</p>",
        "id": 273129542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645727008
    },
    {
        "content": "<p>F*, not F#. Agreed that the particular implementation is irrelevant, but the way Lean does this (you have a \"default max\" function, and then a linear order contains as part of its structure a different max function and a proof that it is equal to the default) makes much more sense to me. (Because the type of max is still α → α → α.)</p>",
        "id": 273130744,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645727587
    },
    {
        "content": "<p>Since F* has subtyping, I think you can say the type of max is A -&gt; A -&gt; A too</p>",
        "id": 273131410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645727986
    },
    {
        "content": "<p>Oh I assumed we were talking about, say, the maximum of a list</p>",
        "id": 273131536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645728069
    },
    {
        "content": "<p>Yeah, I guess! I just find it much harder to read.</p>",
        "id": 273131546,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645728072
    },
    {
        "content": "<p>Again I don't know much about F* (including the name, lol) but the fact that the max operation on an ordering is determined by the other structure is at the very least conceptually important--it means you don't have to worry about where the operation came from, or about keeping definitions of max coherent. In the Lean approach you just know it is a function, and then you have to worry about its definition and coherence and so on</p>",
        "id": 273132044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645728354
    },
    {
        "content": "<p>Anyways the main point is that \"define things and then prove facts about them\" is non-modular if you don't have some other form of discipline, since a proof about a definition is coupled to that definition.</p>",
        "id": 273133037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645728816
    },
    {
        "content": "<p>I think F* is mainly aimed at program verification, right? So then it makes sense that you would have a lot of functions like <code>list.max</code> that are intended to fulfill some given specification, and you want to treat them as opaque and not transparent.</p>",
        "id": 273134376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645729402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20and.20other.20languages/near/273132044\">said</a>:</p>\n<blockquote>\n<p>Again I don't know much about F* (including the name, lol) but the fact that the max operation on an ordering is determined by the other structure is at the very least conceptually important--it means you don't have to worry about where the operation came from, or about keeping definitions of max coherent. In the Lean approach you just know it is a function, and then you have to worry about its definition and coherence and so on</p>\n</blockquote>\n<p>We-ll, actually in Lean you know some of its properties inherently - but yeah this is essentially why F* does things that way I think.</p>",
        "id": 273136045,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1645730264
    }
]