[
    {
        "content": "<p>Is there an instance of fintype that shows that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If not, maybe there is some advice how to prove it?</p>",
        "id": 291217270,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659025456
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.fintype\">docs#pi.fintype</a></p>",
        "id": 291217363,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659025508
    },
    {
        "content": "<p>It needs decidable equality on the domain to construct that fintype.</p>",
        "id": 291217518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659025576
    },
    {
        "content": "<p>One trick for finding these instances from within Lean when you're not sure of the decidability assumptions is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- ... pi.fintype</span>\n</code></pre></div>",
        "id": 291217764,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659025686
    },
    {
        "content": "<p>Actually what we really want to show is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">decPow</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decP</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finpow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">decPow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(How can we use universes better here?) We can show this by using pi.fintype and showing that decPow is the same as A -&gt; Bool but maybe there is a better way?</p>",
        "id": 291219237,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659026357
    },
    {
        "content": "<p><del>Does <code>@[derive fintype]</code> work?</del></p>",
        "id": 291219688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659026570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20for.20functions/near/291219688\">said</a>:</p>\n<blockquote>\n<p><del>Does <code>@[derive fintype]</code> work?</del></p>\n</blockquote>\n<p>Like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">decPow</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decP</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span>\n  <span class=\"kd\">@[derive fintype]</span>\n</code></pre></div>\n<p>seems to work?</p>",
        "id": 291220105,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659026782
    },
    {
        "content": "<p>It goes before not after</p>",
        "id": 291220254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659026877
    },
    {
        "content": "<p>But it won't work here</p>",
        "id": 291220277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659026882
    },
    {
        "content": "<p>Ok now I see. <code>failed to find a derive handler for 'fintype'</code></p>",
        "id": 291220393,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659026945
    },
    {
        "content": "<p><code>import tactic.derive_fintype</code></p>",
        "id": 291220407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659026955
    },
    {
        "content": "<p>Ah ok then I get <code>failed to synthesize type class instance for</code></p>",
        "id": 291220459,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659027000
    },
    {
        "content": "<p>But like I said, it won't work anyway. <code>by tactic.mk_fintype_instance</code> also fails</p>",
        "id": 291220461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20for.20functions/near/291219237\">said</a>:</p>\n<blockquote>\n<p>We can show this by using pi.fintype and showing that decPow is the same as A -&gt; Bool but maybe there is a better way?</p>\n</blockquote>\n<p>this sounds like a good strategy to me. I think the equivalence with <code>A -&gt; Bool</code> is worth having anyway</p>",
        "id": 291220621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027074
    },
    {
        "content": "<p>Do we actually need the equivalence? It seems we should only need one direction. Namely that the is an injection from <code>DecProp A</code> to <code>A -&gt; Bool</code>. I guess there is a fintype instance for this?</p>",
        "id": 291220816,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659027176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20for.20functions/near/291219237\">said</a>:</p>\n<blockquote>\n<p>(How can we use universes better here?)</p>\n</blockquote>\n<p>Let lean deal with it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">decPow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">decP</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>as it turns out, there's no need for a universe bump</p>",
        "id": 291220850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027191
    },
    {
        "content": "<p>Arguably you should make the equivalence anyway since it's true</p>",
        "id": 291221003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027255
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_surjective\">docs#fintype.of_surjective</a> is what you're after</p>",
        "id": 291221065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027288
    },
    {
        "content": "<p>Although you might run into trouble since that needs decidable equality of your structure</p>",
        "id": 291221150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027326
    },
    {
        "content": "<p>I'm not sure you can make <code>decPow</code> be a computable <code>fintype</code> -- is that ok?</p>",
        "id": 291221156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659027327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20for.20functions/near/291221150\">said</a>:</p>\n<blockquote>\n<p>Although you might run into trouble since that needs decidable equality of your structure</p>\n</blockquote>\n<p>Yes, but we need this anyway.</p>",
        "id": 291221277,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659027369
    },
    {
        "content": "<p>Here's a noncomputable one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">decPow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decP</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- ideally this could be generated automatically using a `mk_equiv` attribute, like `mk_iff`</span>\n<span class=\"kd\">def</span> <span class=\"n\">decPow_equiv</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decPow</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">o.pred</span><span class=\"o\">,</span> <span class=\"n\">o.decP</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">decPow.mk</span> <span class=\"n\">_</span> <span class=\"n\">e.1</span> <span class=\"n\">e.2</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">finpow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">decPow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">decPow_equiv</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 291221289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659027376
    },
    {
        "content": "<p>The issue is that you can't enumerate <code>decidable p</code> unless you have a proof or disproof of <code>p</code>.</p>",
        "id": 291221496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659027476
    },
    {
        "content": "<p>I disagree, it's computable</p>",
        "id": 291221547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027486
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">decPow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">decP</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">decPow.decP</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finpow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">decPow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.of_equiv</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A.pred</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 291221592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027510
    },
    {
        "content": "<p>Ah, right, ok</p>",
        "id": 291221625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659027527
    },
    {
        "content": "<p>At that point, I think it would be better to define <code>pred</code> to be <code>A -&gt; bool</code> rather than tacking on the decidability assumption, seeing as <code>decidable_pred</code> amounts to a way to lift <code>A -&gt; Prop</code> to <code>A -&gt; bool</code>.</p>",
        "id": 291221701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659027564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, can you add imports to your example?</p>",
        "id": 291221893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027632
    },
    {
        "content": "<p>Sure, it's a silly one (<code>import topology.separation</code>) just because of the file I happened to be in.</p>",
        "id": 291222050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659027690
    },
    {
        "content": "<p>Weird, I can't reproduce your code any more</p>",
        "id": 291222129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027718
    },
    {
        "content": "<p>I accidentally had <code>open_locale classical</code> too.</p>",
        "id": 291222208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659027736
    },
    {
        "content": "<p>Perhaps mathlib should have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.sigma_decidable_pred</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">A.1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A.2</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">bool.to_bool_coe</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 291222641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659027918
    },
    {
        "content": "<p>The proof of the <code>sorry</code> escapes me</p>",
        "id": 291223560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659028331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">equiv.sigma_decidable_pred</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">A.2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">A.1</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">bool.to_bool_coe</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(I also changed <code>to_fun</code> to use a coercion, but that's immaterial.)</p>",
        "id": 291225176,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659029039
    },
    {
        "content": "<p>I guess <code>decidable</code> is one of those rare types where you can deduce parameters are equal from heterogeneous equality of terms.</p>",
        "id": 291225591,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659029211
    },
    {
        "content": "<p>Can you prove that?</p>",
        "id": 291225796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659029292
    },
    {
        "content": "<p>you can prove it by \"cases\" on <code>p</code> and <code>q</code></p>",
        "id": 291225845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659029311
    },
    {
        "content": "<p>that is, <code>p = true \\/ p = false</code></p>",
        "id": 291225872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659029328
    },
    {
        "content": "<p>actually maybe not; even if you know <code>decidable true = decidable false</code> I don't think you can deduce a contradiction</p>",
        "id": 291225987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659029389
    },
    {
        "content": "<p>because both types are singletons</p>",
        "id": 291226007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659029400
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.sigma_decidable_pred</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">A.1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A.2</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">sigma.ext</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">subsingleton.helim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">bool.to_bool_coe</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>maybe is a bit clearer</p>",
        "id": 291226330,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659029519
    },
    {
        "content": "<p>I think <code>foo</code> is a weaker version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subsingleton.helim\">docs#subsingleton.helim</a>, actually</p>",
        "id": 291226459,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659029571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20for.20functions/near/291221701\">said</a>:</p>\n<blockquote>\n<p>At that point, I think it would be better to define <code>pred</code> to be <code>A -&gt; bool</code> rather than tacking on the decidability assumption, seeing as <code>decidable_pred</code> amounts to a way to lift <code>A -&gt; Prop</code> to <code>A -&gt; bool</code>.</p>\n</blockquote>\n<p>Yes, we thought of this. However, I want to use this in a lecture and it is easy to just use Prop for reasoning and to show separately that decidable predicates are the same as booleans. This is needed in the construction of the power automaton.</p>",
        "id": 291226525,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1659029609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20for.20functions/near/291225796\">said</a>:</p>\n<blockquote>\n<p>Can you prove that?</p>\n</blockquote>\n<p>Sometimes Lean lets me too easily turn off the part of my brain that informs me about what I'm actually doing. I interpreted <code>foo</code> as if it were its converse when I said that.</p>",
        "id": 291227168,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659029942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20for.20functions/near/291221150\">said</a>:</p>\n<blockquote>\n<p>Although you might run into trouble since that needs decidable equality of your structure</p>\n</blockquote>\n<p>Given the equivalence of <code>(Σ (p : α → Prop), decidable_pred p) ≃ (α → bool)</code>, do we have a convenient way to show the decidable equality of  <code>Σ (p : α → Prop), decidable_pred p</code>?</p>",
        "id": 291822042,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1659518613
    },
    {
        "content": "<p>Yes, you can use <code>equiv.sigma_decidable_pred.symm.surjective.forall\\2</code> or similar</p>",
        "id": 291822185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659518699
    },
    {
        "content": "<p>Figured out that <code>equiv.decidable_eq equiv.sigma_decidable_pred</code> could solve the problem.</p>",
        "id": 291823676,
        "sender_full_name": "Quanwen Chen",
        "timestamp": 1659519506
    }
]