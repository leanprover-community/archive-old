[
    {
        "content": "<p>Am I just missing a <code>singleton</code> class, the pushout of <code>inhabited</code> and <code>subsingleton</code>? Am I meant to define my own?</p>",
        "id": 131976871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039554
    },
    {
        "content": "<p>do you need one?</p>",
        "id": 131976914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039615
    },
    {
        "content": "<p>You can just assume both classes if you need</p>",
        "id": 131976922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039671
    },
    {
        "content": "<p>just seems wordy: I was about to use this a whole bunch of times</p>",
        "id": 131976965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039727
    },
    {
        "content": "<p>for what?</p>",
        "id": 131976966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039735
    },
    {
        "content": "<p>universal properties</p>",
        "id": 131976967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039740
    },
    {
        "content": "<p>I wanted to try out a design for equalizers/products/pushouts based on a class <code>is_equalizer</code>, which would have a <code>singleton ...</code> field that expresses that there's a map with some property, and that map is unique.</p>",
        "id": 131976975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039800
    },
    {
        "content": "<p>hm, I would say that's a bit too clever</p>",
        "id": 131977017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039829
    },
    {
        "content": "<p>just state the map and state a separate field asserting it is unique</p>",
        "id": 131977020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039849
    },
    {
        "content": "<p>my current design just says these things separately</p>",
        "id": 131977021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039850
    },
    {
        "content": "<p>You will have to unpack it all the time</p>",
        "id": 131977027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039868
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure Equalizer (f g : X ⟶ Y) :=\n(equalizer     : C)\n(inclusion     : equalizer ⟶ X)\n(map           : ∀ {Z : C} (k : Z ⟶ X) (w : k ≫ f = k ≫ g), Z ⟶ equalizer)\n(witness       : inclusion ≫ f = inclusion ≫ g . obviously)\n(factorisation : ∀ {Z : C} (k : Z ⟶ X) (w : k ≫ f = k ≫ g), (map k w) ≫ inclusion = k . obviously)\n(uniqueness    : ∀ {Z : C} (a b : Z ⟶ equalizer) (witness : a ≫ inclusion = b ≫ inclusion), a = b . obviously)\n</pre></div>",
        "id": 131977028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039872
    },
    {
        "content": "<p>the alternative would be to pack <code>map</code>, <code>witness</code>, <code>factorisation</code>, and <code>uniqueness</code> all into one <code>singleton</code> instance, with an appropriate subtype</p>",
        "id": 131977072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039941
    },
    {
        "content": "<p>uniqueness can be stated with one fewer pi btw</p>",
        "id": 131977073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039945
    },
    {
        "content": "<p>you mean don't name <code>witness</code>?</p>",
        "id": 131977075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039961
    },
    {
        "content": "<p>just say <code>a = witness</code> at the end</p>",
        "id": 131977076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039969
    },
    {
        "content": "<p>sure</p>",
        "id": 131977077,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039970
    },
    {
        "content": "<p>the other <code>witness</code></p>",
        "id": 131977078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534039976
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 131977083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534039992
    },
    {
        "content": "<p>yeah, I've gone back and forth on that a few times</p>",
        "id": 131977084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040008
    },
    {
        "content": "<p>er, I mean <code>a = map something something</code></p>",
        "id": 131977085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040008
    },
    {
        "content": "<p>Also, you can pack <code>witness</code> and <code>factorisation</code> and <code>uniqueness</code> into one field with an iff</p>",
        "id": 131977125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040061
    },
    {
        "content": "<p>that was Reid's design</p>",
        "id": 131977133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040122
    },
    {
        "content": "<p>I feel like that has the same objection to using <code>singleton</code>, but the unpacking and packing required is even less intuitive</p>",
        "id": 131977136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040145
    },
    {
        "content": "<p>I just want to avoid packing the data in too</p>",
        "id": 131977141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040162
    },
    {
        "content": "<p>I see.</p>",
        "id": 131977181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040171
    },
    {
        "content": "<p>Would you like a way to quickly say <code>{a | p a} = {x}</code>?</p>",
        "id": 131977190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040233
    },
    {
        "content": "<p>(a = x) iff p a</p>",
        "id": 131977238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040290
    },
    {
        "content": "<p>right, with <code>a</code> abstracted</p>",
        "id": 131977245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040306
    },
    {
        "content": "<p>Ok. This is exactly how Reid did things in the category theory he has in his homotopy library. At first I didn't like it much, but I'm coming around. :-)</p>",
        "id": 131977257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040352
    },
    {
        "content": "<p>like <code>def is_the {α} (p : α → Prop) (x : α) := ∀ a, x = a ↔ p a</code></p>",
        "id": 131977315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040423
    },
    {
        "content": "<p>I will see if I can do something that feels uniform across product/equalizer/pullback, and makes things sufficiently obvious.</p>",
        "id": 131977316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040425
    },
    {
        "content": "<p>the definition might be gratuitous</p>",
        "id": 131977326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040463
    },
    {
        "content": "<p>perhaps something like <code>universal_property</code> instead of <code>is_the</code>? Longer, but friendlier to the mathematicians.</p>",
        "id": 131977330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040484
    },
    {
        "content": "<p>I'll try with and without. :-)</p>",
        "id": 131977332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040497
    },
    {
        "content": "<p>the name is based on the <code>the</code> sometimes used for definite description</p>",
        "id": 131977336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040518
    },
    {
        "content": "<p>it's <code>∃!</code> with the witness free</p>",
        "id": 131977379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040543
    },
    {
        "content": "<p>Yeah; just a note that this is how you talk about universal properties will be good enough for the mathematicians.</p>",
        "id": 131977385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040563
    },
    {
        "content": "<p>okay, kids need lunch!</p>",
        "id": 131977390,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534040587
    },
    {
        "content": "<p>I'm open to slick binder notations for that</p>",
        "id": 131977396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534040636
    }
]