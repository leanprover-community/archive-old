[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"c1\">-- FAILS:</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supr</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_supr</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"c1\">-- function expected at `le_supr U i` term has type `complete_lattice.le (U i) (supr U)`</span>\n\n<span class=\"c1\">-- WORKS, but makes me sad:</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supr</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">le_supr</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205193374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595904057
    },
    {
        "content": "<p>What is one meant to do here to write a term-mode proof?</p>",
        "id": 205193380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595904068
    },
    {
        "content": "<p><code>(show ..., from ...) h</code></p>",
        "id": 205194294,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595905454
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- WORKS:</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supr</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_supr</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 205202402,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595918444
    },
    {
        "content": "<p>I'd forgotten that trick.</p>",
        "id": 205205226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595921812
    },
    {
        "content": "<p>alternatively</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supr</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">le_supr</span>\n</code></pre></div>",
        "id": 205209140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595925028
    },
    {
        "content": "<p>Can you explain what's going on in that trick <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>?</p>",
        "id": 205324484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596006648
    },
    {
        "content": "<p>Lean elaborates from outside to inside</p>",
        "id": 205324503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596006683
    },
    {
        "content": "<p>that trick forces Lean to evaluate the inside first</p>",
        "id": 205324514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596006699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> During elaboration, Lean keeps track of the \"expected type\" of a subexpression.  For example, if we elaborate <code>(x + y : ℕ)</code>, then the expected type of <code>x</code> will be <code>ℕ</code>, no matter how little we know about <code>x</code>.<br>\nThis works by propagating the expected type to the arguments when elaborating function applications.  I believe this is what goes wrong in the first example.  The <code>(e : _)</code> pattern is idiomatically used to prevent the expected type propagation.</p>",
        "id": 205330258,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596011727
    },
    {
        "content": "<p>Is there somewhere sensible to collect tricks like this, along with the trick of <code>by letI := ....; exact</code> for letI in term mode, etc?</p>",
        "id": 205332019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596013131
    },
    {
        "content": "<p>I don't think we have anything more organised than Zulip atm...</p>",
        "id": 205332150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596013212
    },
    {
        "content": "<p>But feel free to PR them to the \"extra\" docs</p>",
        "id": 205332165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596013226
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/master/docs/extras\">https://github.com/leanprover-community/mathlib/tree/master/docs/extras</a></p>",
        "id": 205332195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596013259
    },
    {
        "content": "<p>Eric, if you can list ten tips which newcomers can only find out by running into them and asking, I could write a blog post :-)</p>",
        "id": 205334319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596014843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I assume you mean <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/tree/newsite/templates/extras\">https://github.com/leanprover-community/leanprover-community.github.io/tree/newsite/templates/extras</a>?</p>",
        "id": 205335042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596015359
    },
    {
        "content": "<p>Probably, yes</p>",
        "id": 205335091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596015371
    },
    {
        "content": "<p>I'm getting old</p>",
        "id": 205335099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596015377
    },
    {
        "content": "<p>We should burn that other directory with fire (or just leave a README with a pointer to the new location).</p>",
        "id": 205335144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596015411
    },
    {
        "content": "<p>I thought the old one already disappeared</p>",
        "id": 205335524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015650
    },
    {
        "content": "<p>A redirect from the old page would be more useful - I think google indexes it above the new one</p>",
        "id": 205339047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596018315
    },
    {
        "content": "<p>I don't think GitHub Pages supports automatic redirects, sadly. But maybe <code>&lt;link rel=\"canonical\"&gt;</code> can help with the Google issue?<br>\n<a href=\"https://en.wikipedia.org/wiki/Canonical_link_element\">https://en.wikipedia.org/wiki/Canonical_link_element</a></p>",
        "id": 205349385,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596025694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/question.20about.20.60le.60.20on.20sets/near/205335144\">said</a>:</p>\n<blockquote>\n<p>We should burn that other directory with fire (or just leave a README with a pointer to the new location).</p>\n</blockquote>\n<p>I've added some README files in <a href=\"https://github.com/leanprover-community/mathlib/issues/3623\">#3623</a>.</p>",
        "id": 205358029,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596030380
    }
]