[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/geom_sum/src\">src#geom_sum</a> is a definition <code>def geom_sum (x : α) (n : ℕ) := ∑ i in range n, x ^ i</code>. Is there any reason to have this definition, instead of just stating the results about the sum itself? Looking through mathlib, it seems that everywhere that people need to use <code>geom_sum</code>, they need to begin by rewriting by <code>geom_sum_def</code>, which seems rather annoying.</p>\n<p>It also means that none of the simp lemmas actually apply until you rewrite things in terms of <code>geom_sum</code>, which seems tedious: I'd say if there's reason to keep the definition we probably should restate all its simp lemmas with <code>geom_def</code> unfolded.</p>",
        "id": 282211215,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426221
    },
    {
        "content": "<p>Just to remark that I've been using geometric sums in LTE and I didn't use this definition once</p>",
        "id": 282211353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652426347
    },
    {
        "content": "<p>Kevin, did you use finite or infinite geometric sums?</p>",
        "id": 282211362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652426368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> would it help if we make it an <code>abbreviation</code>?</p>",
        "id": 282211377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652426380
    },
    {
        "content": "<p>Aah, infinite ones. Is it something to do with ticking off something on the UG list?</p>",
        "id": 282211394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652426394
    },
    {
        "content": "<p>I tried <code>abbreviation</code>, and it doesn't help with the <code>@[simp]</code> lemma problem, because that is working syntactically, so it can't see that explicit sums are <code>geom_sum</code>s.</p>",
        "id": 282211531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426504
    },
    {
        "content": "<p>Yeah, my first thought was \"this might be needed by undergrad.yml\"</p>",
        "id": 282211610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652426545
    },
    {
        "content": "<p>Can I just make it notation?</p>",
        "id": 282211614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426553
    },
    {
        "content": "<p>I don't even think there's any point having the notation</p>",
        "id": 282211635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652426575
    },
    {
        "content": "<p>Is there a way to expand <code>geom_sum x n</code> as <code>∑ i in range n, x ^ i</code>?</p>",
        "id": 282211642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426579
    },
    {
        "content": "<p>Mostly I just want to notation temporarily to check that the file behaves as expected, without actually having to rewrite it :-)</p>",
        "id": 282211663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426603
    },
    {
        "content": "<p>Does anyone know if this notation is possible, without a token between the <code>x</code> and <code>n</code>? I can't find an example in mathlib.</p>",
        "id": 282211805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426715
    },
    {
        "content": "<p><code>notation `geom_sum` x := λ n, (range n).sum ((^) x)</code> maybe?</p>",
        "id": 282211806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652426716
    },
    {
        "content": "<p>Let me try</p>",
        "id": 282211824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426728
    },
    {
        "content": "<p>If you can deal with one lingering lambda</p>",
        "id": 282211836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652426741
    },
    {
        "content": "<p>Doesn't seem to work anyway.</p>",
        "id": 282211912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426785
    },
    {
        "content": "<p>Every <code>geom_sum x n</code> gives a <code>function expected at x term has type ...</code></p>",
        "id": 282211985,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426871
    },
    {
        "content": "<p>Maybe <code>notation `geom_sum` x:2000 := (λ n, (range n).sum ((^) x))</code></p>",
        "id": 282212055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426907
    },
    {
        "content": "<p>Still too much lambda, oh well, I'll bite the bullet and write them out.</p>",
        "id": 282212087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652426943
    },
    {
        "content": "<p>I wonder if it would be worth having an <code>elab_inline</code> attribute, so then we could have synonyms that don't get in the way of rewrites, and we wouldn't need to abuse notation?</p>",
        "id": 282640989,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652794568
    },
    {
        "content": "<p>For the \"too much lambda\" problem, maybe there could be a special <code>elab_beta</code> identity function that causes the elaborator to do beta reduction using its first two arguments.</p>",
        "id": 282641421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652794790
    }
]