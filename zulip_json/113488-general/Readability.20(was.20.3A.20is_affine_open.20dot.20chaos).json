[
    {
        "content": "<p>In maths, \"the natural map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">c</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"script\">O</mi><mi>X</mi></msub><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Spec}(\\mathcal{O}_X(U))\\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Spec</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> an affine open subset of the scheme <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>\". In Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_affine_open.from_Spec</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">topological_space.opens</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.carrier</span><span class=\"o\">)},</span>\n    <span class=\"n\">is_affine_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">Scheme.Spec.obj</span>\n         <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"o\">(</span><span class=\"n\">X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.presheaf.obj</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">U</span><span class=\"o\">)))</span> <span class=\"bp\">⟶</span>\n       <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>As well, as the <code>X.a.b.c.d.e</code> we have all these <code>op</code>s! Can't we just have contravariant functors? I guess this is an independent issue, but I'm just thinking generally about readability. Can we do better?</p>",
        "id": 299910925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663750761
    },
    {
        "content": "<p>darn it, sorry I broke the thread. Can a mod glue?</p>",
        "id": 299911095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663750832
    },
    {
        "content": "<p>To be fair, the situation would be better if appropriate namespaces are open. It looks like <br>\n<code>Π {X : Scheme} {U : opens X.carrier} (hU : is_affine_open U) : Scheme.Spec.obj (op $ X.presheaf.obj $ op U) ⟶ X</code><br>\nin the source code, and I would say that the readability of this is not that bad.</p>\n<p>In the info view however, <code>X.presheaf</code> gets expanded into <code>X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.presheaf</code>, so this is still a problem that needs fixing.</p>\n<p>As for the readability of the docs, I think this is a separate issue that I have no idea how to fix.</p>",
        "id": 299912012,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663751244
    },
    {
        "content": "<p>If there is the notation <code>Γ(X, U)</code> for <code>X.presheaf.obj $ op U</code>, we could potentially shorten it into <br>\n<code>Π {X : Scheme} {U : opens X.carrier} (hU : is_affine_open U) : Spec.obj (op Γ(X, U)) ⟶ X</code><br>\nwith <code>open Scheme</code></p>",
        "id": 299912441,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663751436
    },
    {
        "content": "<p>Let me also mention some examples that are already ugly in code.<br>\nFor <code>x f : X.presheaf.obj (op U)</code>, to restrict <code>x</code> onto <code>D(f)</code> we need to write <code>X.presheaf.map (hom_of_le $ X.basic_open_subset f : X.basic_open f ⟶ U).op x</code>. <a href=\"https://github.com/leanprover-community/mathlib/pull/16088\">#16088</a> is an attempt fixing it, but I'm not sure if it is satisfactory.</p>",
        "id": 299914499,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663752246
    },
    {
        "content": "<p>There is also discussion on giving <code>functor</code> a <code>has_coe_to_fn</code> instance <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Real.20measures\">here</a>. Though I understand that there will be difficulties providing them for both objects and morphisms, I think it is perfectly reasonable to at least provide one on the object level, and I think this is also what's done in LTE examples now?</p>",
        "id": 299915695,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663752667
    },
    {
        "content": "<p>I've been reading algebraic geometry today and seeing how far we've gone. Apart from the notation, which makes me occasionally sad, it looks like we have a really robust foundation nowadays. Thanks to you guys! I'm trying to figure out how to sell it, that was my frustration with the notation.</p>",
        "id": 299973339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663771692
    },
    {
        "content": "<p>By \"sell it\" I mean \"teach an 8 hour course on it in November\" :-)</p>",
        "id": 299973441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663771725
    },
    {
        "content": "<p>I heard of some fancy new dot notation tricks also in Lean3 from <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 299974718,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663772146
    },
    {
        "content": "<p>That should help at leat a little bit</p>",
        "id": 299974895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663772191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Last I checked, the Lean 4 pretty printer would still display <code>X.carrier</code> as <code>X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.carrier</code> too.</p>\n<p>The backported Lean 4 feature that might be helpful is that if you've got a dot-notation-friendly function <code>foo</code> in the <code>PresheafedSpace</code> namespace then you can write <code>X.foo</code> rather than <code>X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.foo</code>.</p>",
        "id": 299985441,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663775260
    },
    {
        "content": "<p>I was going to at some point take a look at adding an option to the pretty printer to more aggressively reverse dot notation, so that the first thing would actually print as <code>X.carrier</code>.</p>",
        "id": 299985744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663775340
    },
    {
        "content": "<p>That would be really sweet!</p>",
        "id": 300027192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663789163
    }
]