[
    {
        "content": "<p>If I have <code>a or b or c or d</code>, can I split into four goals in one go?</p>",
        "id": 130900638,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533409565
    },
    {
        "content": "<p><code>rcases [identifier] with H | H | H | H</code></p>",
        "id": 130900640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533409583
    },
    {
        "content": "<p>I can't interpret \"split into four goals\". If it's a hypothesis then you get four hypotheses. If it's a goal then you get one goal.</p>",
        "id": 130900647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533409618
    },
    {
        "content": "<p>Alternatively, <code>casesm* [_ ∨ _]</code> also helps.</p>",
        "id": 130900700,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533409702
    },
    {
        "content": "<p>Thanks</p>",
        "id": 130900707,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533409754
    },
    {
        "content": "<p>there is no brackets in <code>rcases</code></p>",
        "id": 130900812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533409924
    },
    {
        "content": "<p><code>[identifier]</code> is a placeholder</p>",
        "id": 130900816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533409937
    },
    {
        "content": "<p>hm, it's hard to tell the difference between meta notation and lean notation... we need more brackets</p>\n<div class=\"codehilite\"><pre><span></span>rcases ⟅identifier⟆ with H | H | H | H\n</pre></div>",
        "id": 130900836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533410039
    },
    {
        "content": "<p>On a similar note, if you want to prove <code>∃ a b c,  ...</code> is there a way to do something like <code>existsi a b c</code>? I tried<code>repeat {constructor}</code> for fun, and I was surprised to see lean perfectly guess what a, b and c were.</p>",
        "id": 130906775,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533423421
    },
    {
        "content": "<p>Also, when I used <code>constructor,</code> three times, lean did not guess them.</p>",
        "id": 130906828,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533423549
    },
    {
        "content": "<p>you could also do <code>existsi [a,b,c]</code> if you want to specify the witnesses yourself.</p>",
        "id": 130906831,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533423572
    },
    {
        "content": "<p>Ah thank you, I had not tried those brackets. Is there a rule to know which type is used where?</p>",
        "id": 130907028,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533423964
    },
    {
        "content": "<p>Which types do you mean?</p>",
        "id": 130907038,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533424029
    },
    {
        "content": "<p>which type of bracket?</p>",
        "id": 130907080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533424141
    },
    {
        "content": "<p>I guess you can look at the documentation for the tactic...</p>",
        "id": 130907085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533424178
    },
    {
        "content": "<p>(by hovering over it)</p>",
        "id": 130907087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533424185
    },
    {
        "content": "<p>brackets are syntax, so I don‘t think they can have _types_, nor kinds, nor sorts ... must be varieties, I guess? ;)</p>",
        "id": 130907138,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1533424254
    },
    {
        "content": "<p>we’re going to run out of variants of words soon to describe these things</p>",
        "id": 130907192,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1533424411
    }
]