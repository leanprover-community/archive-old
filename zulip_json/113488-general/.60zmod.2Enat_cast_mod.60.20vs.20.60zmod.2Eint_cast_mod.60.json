[
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">zmod.nat_cast_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span>\n <span class=\"kd\">theorem</span> <span class=\"n\">zmod.int_cast_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span>\n</code></pre></div>\n<p>The order of arguments is not compatible.</p>",
        "id": 281338734,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651774836
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.nat_cast_mod/src\">src#zmod.nat_cast_mod</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.int_cast_mod/src\">src#zmod.int_cast_mod</a></p>",
        "id": 281339496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651775196
    },
    {
        "content": "<p>Should be a fun PR fixing it!</p>",
        "id": 281345123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651777872
    },
    {
        "content": "<p>Somebody has to decide which order is preferable...</p>",
        "id": 281352103,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651781124
    },
    {
        "content": "<p>The order in which you see the variables when reading from left to right is a sensible default I think. If there is no compelling reason to prefer something else like the lemma naturally parameterising other useful lemmas when the first arguments are specified</p>",
        "id": 281352686,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651781430
    },
    {
        "content": "<p><code>zmod.nat_cast_mod</code> seems to be used only in a couple of places outside (and once within) <code>data.zmod.basic</code>, so it shouldn't be a lot of work. Maybe I'll do it if I have time tomorrow (but no guarantee).</p>",
        "id": 281360893,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651785682
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13988\">#13988</a></p>",
        "id": 281415755,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651830024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/.60zmod.2Enat_cast_mod.60.20vs.20.60zmod.2Eint_cast_mod.60/near/281352686\">said</a>:</p>\n<blockquote>\n<p>The order in which you see the variables when reading from left to right is a sensible default I think.</p>\n</blockquote>\n<p>Note that this order changes depending on whether you write <code>((a % n : ℕ) : zmod n) = a</code> or <code>(coe : ℕ \\to zmod n) (a % n) = a</code>, so this heuristic is often not enough</p>",
        "id": 281416221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651830317
    }
]