[
    {
        "content": "<p>Hi,<br>\nIs there a natural place here on the Zulip server to post requests for comments on lean code? I'm thinking of things longer than a few lines, but not yet suitable for a PR.</p>",
        "id": 272420148,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1645200372
    },
    {
        "content": "<p>Posting here would be fine, you can always open a draft PR though and link to it from here asking for comments, that might be easier for people to comment on then</p>",
        "id": 272422298,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645201329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> If it's related to a PR, then the <a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a> stream might also be a good fit</p>",
        "id": 272425377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645202870
    },
    {
        "content": "<p>I've written a simple number guessing game in Lean 4 in the imperative style. Does anyone have suggestions for improvements? I wanted to use a <code>repeat do</code> block in <code>readGuess</code> but I couldn't get it to work (I have another post about this). I also would like to use a bounded natural number type for the guess &amp; answer, but <code>Fin</code> doesn't support arbitrary lower bounds (I want a <code>Fin minAns maxAns</code>) and I don't know enough about programming with dependent types to implement this yet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">minAns</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">maxAns</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Number Guessing Game in Lean 4\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"==============================</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ans</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.rand</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">numGuesses</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n  <span class=\"n\">repeat</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Guess a number from {minAns} to {maxAns}.\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">guess</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">readGuess</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"n\">numGuesses</span> <span class=\"o\">:=</span> <span class=\"n\">numGuesses</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">==</span> <span class=\"n\">ans</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Congratulations, you're correct! You guessed {numGuesses} times.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n      <span class=\"n\">break</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ans</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Your guess is too low.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Your guess is too high.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">readGuess</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.getStdin</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">guess</span><span class=\"bp\">?</span> <span class=\"o\">:=</span>\n       <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">stdin.getLine</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"n\">String.dropRightWhile</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Char.isWhitespace</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span>\n\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">guess</span> <span class=\"o\">:=</span> <span class=\"n\">guess</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">minAns</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">guess</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">maxAns</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">guess</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Your guess is invalid.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">readGuess</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313436938,
        "sender_full_name": "Cole Shepherd",
        "timestamp": 1669964287
    },
    {
        "content": "<p>I made some small changes, partly to show some features, partly out of personal style.</p>\n<ol>\n<li>There's a nice chained method notation you can use for <code>guess?</code></li>\n<li>I like to avoid <code>mutual</code> blocks involving <code>partial</code> functions since it can be less clear if there's accidentally an infinite loop somewhere.</li>\n<li>I moved the <code>minAns</code>/<code>maxAns</code> constants into <code>main</code> and passed them as parameters to <code>readGuess</code>. Global constants aren't as bad as global variables, but this lets you more easily play the game with different bounds at runtime.</li>\n<li>As an example of a dependent type, I made <code>readGuess</code> take in a proof  that <code>minAns &lt;= maxAns</code>. It doesn't use the proof, but it guarantees that anyone who calls <code>readGuess</code> must prove that there's a number the user can actually provide that will leave the loop.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Takes a proof that `minAns ≤ maxAns` to guarantee the user can provide some answer! -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">readGuess</span> <span class=\"o\">(</span><span class=\"n\">minAns</span> <span class=\"n\">maxAns</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">minAns</span> <span class=\"bp\">≤</span> <span class=\"n\">maxAns</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">guess</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">dropRightWhile</span> <span class=\"n\">Char.isWhitespace</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toNat</span><span class=\"bp\">?</span>\n\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">guess</span> <span class=\"o\">:=</span> <span class=\"n\">guess</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">minAns</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">guess</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">maxAns</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">guess</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Your guess should be in the range {minAns} to {maxAns}.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">readGuess</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span> <span class=\"n\">h</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">minAns</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">maxAns</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Number Guessing Game in Lean 4\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"==============================</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ans</span> <span class=\"bp\">←</span> <span class=\"n\">IO.rand</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">numGuesses</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n  <span class=\"n\">repeat</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Guess a number from {minAns} to {maxAns}.\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">guess</span> <span class=\"bp\">←</span> <span class=\"n\">readGuess</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"n\">numGuesses</span> <span class=\"o\">:=</span> <span class=\"n\">numGuesses</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">==</span> <span class=\"n\">ans</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Congratulations, you're correct! You guessed {numGuesses} times.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n      <span class=\"n\">break</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ans</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Your guess is too low.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Your guess is too high.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>",
        "id": 313459935,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669974078
    },
    {
        "content": "<p>Here's an implementation that uses a type <code>NatRange lo hi</code> for natural numbers in the range <code>lo .. hi</code> inclusive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Natural numbers that must be in the range `lo .. hi` inclusive. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">NatRange</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">lo_le</span> <span class=\"o\">:</span> <span class=\"n\">lo</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"n\">le_hi</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">hi</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"o\">(</span><span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"o\">:=</span> <span class=\"n\">r1.n</span> <span class=\"bp\">==</span> <span class=\"n\">r2.n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"o\">(</span><span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"o\">:=</span> <span class=\"n\">r1.n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r2.n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"o\">:=</span> <span class=\"n\">r1.n</span> <span class=\"bp\">≤</span> <span class=\"n\">r2.n</span>\n\n<span class=\"c1\">-- Copied these incantations from `Fin`.</span>\n<span class=\"c1\">-- These make it so that you can use `&lt;` and `≤` in `if` statements.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">LT.lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLt</span> <span class=\"bp\">..</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLe</span> <span class=\"bp\">..</span>\n\n<span class=\"sd\">/-- Try to make a `NatRange` in the given range, returning `none` otherwise. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">NatRange.mk</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lo</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">hi</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lo_le</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span><span class=\"o\">,</span> <span class=\"n\">le_hi</span> <span class=\"o\">:=</span> <span class=\"n\">h.right</span> <span class=\"o\">}</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">none</span>\n\n<span class=\"sd\">/-- The lower bound of the range. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">NatRange.lower</span> <span class=\"o\">{</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lo</span> <span class=\"bp\">≤</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">lo</span><span class=\"o\">,</span> <span class=\"n\">lo_le</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">le_hi</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NatRange.rand</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lo</span> <span class=\"bp\">≤</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">NatRange</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">IO.rand</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span>\n  <span class=\"c1\">-- The `IO.rand` function doesn't have any proofs that its result is</span>\n  <span class=\"c1\">-- in the correct range, so just in case it's out of range we return some default value.</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">NatRange.mk</span><span class=\"bp\">?</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"o\">(</span><span class=\"n\">NatRange.lower</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Takes a proof that `minAns ≤ maxAns` to guarantee the user can provide some answer! -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">readGuess</span> <span class=\"o\">(</span><span class=\"n\">minAns</span> <span class=\"n\">maxAns</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">minAns</span> <span class=\"bp\">≤</span> <span class=\"n\">maxAns</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">NatRange</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">guess</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">dropRightWhile</span> <span class=\"n\">Char.isWhitespace</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toNat</span><span class=\"bp\">?</span>\n\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">guess</span> <span class=\"o\">:=</span> <span class=\"n\">guess</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- Showing off that the expected type can be used to fill in the implicit arguments to `NatRange.mk?`:</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">NatRange</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">NatRange.mk</span><span class=\"bp\">?</span> <span class=\"n\">guess</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">n</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Your guess should be in the range {minAns} to {maxAns}.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">readGuess</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span> <span class=\"n\">h</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">minAns</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">maxAns</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Number Guessing Game in Lean 4\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"==============================</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ans</span> <span class=\"bp\">←</span> <span class=\"n\">NatRange.rand</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">numGuesses</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n  <span class=\"n\">repeat</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Guess a number from {minAns} to {maxAns}.\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">guess</span> <span class=\"bp\">←</span> <span class=\"n\">readGuess</span> <span class=\"n\">minAns</span> <span class=\"n\">maxAns</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"n\">numGuesses</span> <span class=\"o\">:=</span> <span class=\"n\">numGuesses</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">==</span> <span class=\"n\">ans</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Congratulations, you're correct! You guessed {numGuesses} times.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n      <span class=\"n\">break</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ans</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Your guess is too low.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Your guess is too high.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>",
        "id": 313463155,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669975273
    },
    {
        "content": "<p>This is really great, thank you!!</p>",
        "id": 313526966,
        "sender_full_name": "Cole Shepherd",
        "timestamp": 1669995697
    }
]