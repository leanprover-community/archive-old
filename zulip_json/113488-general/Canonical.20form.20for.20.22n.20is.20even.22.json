[
    {
        "content": "<p>What's the canonical way to say that a natural number is even? I see <code>2 \\dvd n</code>, <code>n % 2 = 0</code>, <code>even n</code>...</p>\n<p>Context: I'd like to prove that <code>alternating_sum</code> and <code>++</code> commute when the first list has even length.</p>",
        "id": 207023636,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597500779
    },
    {
        "content": "<p>Given that <code>even n</code> exists, it really ought to be the answer to this question</p>",
        "id": 207023727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597500909
    },
    {
        "content": "<p>Thanks for un <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> ing the question</p>",
        "id": 207030769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597512068
    },
    {
        "content": "<p>you might want to also consider the more general statement <code>alternating_sum (L1 ++ L2) = alternating_sum L1 + (-1) ^ L1.length * alternating_sum L2</code></p>",
        "id": 207030819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597512136
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>. I guess my source of confusion was this lemma, and the one below it:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/data/nat/parity.html#nat.two_not_dvd_two_mul_add_one\">https://leanprover-community.github.io/mathlib_docs/data/nat/parity.html#nat.two_not_dvd_two_mul_add_one</a><br>\nWhat's the reason for using <code>2 \\dvd</code> here – especially in the module where <code>even</code> is defined?</p>",
        "id": 207047734,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597539878
    },
    {
        "content": "<p>the name of the theorem is <code>not_two_dvd_...</code> so perhaps it's specifically about this form</p>",
        "id": 207048071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597540485
    },
    {
        "content": "<p>especially in the module where even and odd are defined you are more likely to find alternative representations, because that's where you would prove equivalence of the alternative representations</p>",
        "id": 207048090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597540531
    },
    {
        "content": "<p>I also found <code>parity_simps</code> from reading the source. That should really be documented...</p>",
        "id": 207048198,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597540739
    },
    {
        "content": "<p><code>data.nat.parity</code> is a 100 line file--even if someone were to write documentation for it, the most efficient way to find out what's in it would still be to just read the whole thing.</p>",
        "id": 207048319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597541006
    },
    {
        "content": "<p>heh, there are some <code>example</code>s at the end of <code>data.nat.parity</code></p>",
        "id": 207048576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597541472
    },
    {
        "content": "<p>Even (hehe) so, when reading the docs I think that there's an expectation that what's listed is the complete public interface for that module. That defs and lemmas are shown, but custom simp sets and examples are not, seems like a bug to me.</p>",
        "id": 207048932,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597542133
    },
    {
        "content": "<p>(Examples aren't part of the API but you get what I mean <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>)</p>",
        "id": 207049118,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597542454
    },
    {
        "content": "<p>Regarding the <code>(-1) ^ L1.length</code> formulation – that requires a <code>ring</code>, whereas the specialized approach only needs <code>add_comm_group</code> (like the other <code>alternating_sum</code> lemmas). And it gets more complicated when we consider <code>alternating_prod</code>. So perhaps both statements are useful?</p>\n<p>And un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> -ing further, I'm using this to prove \"a palindromic number of even length is divisible by 11\", so the specialized version would be more useful to me. (I should have mentioned that first whoops)</p>",
        "id": 207050929,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597545495
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">alternating_sum</span> <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"bp\">++</span> <span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">alternating_sum</span> <span class=\"n\">L1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">L1</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">alternating_sum</span> <span class=\"n\">L2</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>for the general version, no ring required (in the statement at least).</p>",
        "id": 207051293,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597546101
    },
    {
        "content": "<p>Here's what I've got so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">parity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">alternating_sum_append_of_even_length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">alternating_sum</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">alternating_sum</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">alternating_sum</span> <span class=\"n\">l₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">l₂</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"o\">]</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">alternating_sum_append_of_even_length</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">even_succ</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">alternating_sum_reverse_of_even_length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">alternating_sum</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">alternating_sum</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">even_succ</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">alternating_sum_append_of_even_length</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">length_reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n        <span class=\"n\">alternating_sum_reverse_of_even_length</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207052319,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597548191
    },
    {
        "content": "<p>I'll try Alex's generalization later unless someone else gets to it first</p>",
        "id": 207052320,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597548197
    },
    {
        "content": "<p><span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">alternating_sum_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">alternating_sum</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nil</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">alternating_sum_cons</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">alternating_sum</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">alternating_sum</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sub_zero</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">alternating_sum_cons_cons</span><span class=\"o\">,</span> <span class=\"n\">alternating_sum_cons</span> <span class=\"n\">y</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">sub_add</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">alternating_sum_append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">alternating_sum</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">alternating_sum</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">alternating_sum</span> <span class=\"n\">l₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">alternating_sum_append</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">alternating_sum_cons</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">sub_add</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Now I wonder if it's safe to put <code>@[simp]</code> on <code>alternating_sum_cons</code>...</p>",
        "id": 207636397,
        "sender_full_name": "Chris Wong",
        "timestamp": 1598017988
    },
    {
        "content": "<p>Yes I think that looks like a great simp lemma</p>",
        "id": 207639294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598019552
    },
    {
        "content": "<p>I agree! My concern is about this existing lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n <span class=\"kn\">theorem</span> <span class=\"n\">alternating_sum_cons_cons&#39;</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">alternating_sum</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">alternating_sum</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>That'll probably conflict with <code>alternating_sum_cons</code>, right? I guess I'll have to try and see</p>",
        "id": 207703042,
        "sender_full_name": "Chris Wong",
        "timestamp": 1598063162
    }
]