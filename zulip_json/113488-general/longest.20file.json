[
    {
        "content": "<p>Is there a magical grep command to find the longest files in mathlib? I just needed to add a lemma to <code>topological_space.algebra.ordered.basic</code>, but then I realized it was already 3870 lines long...</p>",
        "id": 257745494,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1634323429
    },
    {
        "content": "<p>I was going to split it. I'll try to do it tonight.</p>",
        "id": 257746234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634323737
    },
    {
        "content": "<p>Longest files by number of lines:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ find . -iname '*.lean' -exec wc -l {} + | sort -rn | head -n 20\n  645859 total\n    5138 ./data/list/basic.lean\n    3869 ./topology/algebra/ordered/basic.lean\n    3079 ./data/finset/basic.lean\n    3062 ./measure_theory/measure/measure_space.lean\n    2969 ./analysis/calculus/fderiv.lean\n    2961 ./analysis/calculus/times_cont_diff.lean\n    2889 ./data/set/basic.lean\n    2777 ./order/filter/basic.lean\n    2741 ./data/finsupp/basic.lean\n    2684 ./data/buffer/parser/basic.lean\n    2614 ./linear_algebra/basic.lean\n    2556 ./data/multiset/basic.lean\n    2539 ./measure_theory/function/lp_space.lean\n    2450 ./computability/turing_machine.lean\n    2415 ./measure_theory/integral/interval_integral.lean\n    2404 ./group_theory/subgroup/basic.lean\n    2396 ./tactic/core.lean\n    2340 ./measure_theory/integral/lebesgue.lean\n    2247 ./topology/metric_space/basic.lean\n</code></pre></div>",
        "id": 257749278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634325130
    },
    {
        "content": "<p>I don't like the way the <code>list</code> stuff is arranged. Every time I jump to a <code>list</code> definition hoping to find the relevant lemmas next to it, it brings me to this huge mess that <code>data.list.basic</code> is.</p>",
        "id": 257750766,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634325813
    },
    {
        "content": "<p>Would you like if I split it up in files per definitions (or groups of definitions).</p>",
        "id": 257751271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634326030
    },
    {
        "content": "<p><code>cloc</code> is also a nice thing -- <a href=\"https://github.com/AlDanial/cloc\">https://github.com/AlDanial/cloc</a> -- for mathlib it produces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊙</span>  <span class=\"n\">cloc</span> <span class=\"c1\">--by-file src | head -n 20                                                                                                                                                  julian@Airm</span>\n    <span class=\"mi\">1820</span> <span class=\"n\">text</span> <span class=\"n\">files.</span>\n    <span class=\"mi\">1820</span> <span class=\"n\">unique</span> <span class=\"n\">files.</span>\n       <span class=\"mi\">0</span> <span class=\"n\">files</span> <span class=\"n\">ignored.</span>\n\n<span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">AlDanial</span><span class=\"bp\">/</span><span class=\"n\">cloc</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">90</span>  <span class=\"n\">T</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">80</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"mi\">1012</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">files</span><span class=\"bp\">/</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">358420</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">lines</span><span class=\"bp\">/</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"c1\">-----------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"n\">File</span>                                                                                            <span class=\"n\">blank</span>        <span class=\"n\">comment</span>           <span class=\"n\">code</span>\n<span class=\"c1\">-----------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                                                         <span class=\"mi\">1057</span>            <span class=\"mi\">190</span>           <span class=\"mi\">3891</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                                           <span class=\"mi\">632</span>            <span class=\"mi\">429</span>           <span class=\"mi\">2808</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">measure_space.lean</span>                                                     <span class=\"mi\">576</span>            <span class=\"mi\">246</span>           <span class=\"mi\">2240</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">fderiv.lean</span>                                                                 <span class=\"mi\">617</span>            <span class=\"mi\">218</span>           <span class=\"mi\">2134</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">times_cont_diff.lean</span>                                                        <span class=\"mi\">381</span>            <span class=\"mi\">470</span>           <span class=\"mi\">2110</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                                                        <span class=\"mi\">772</span>            <span class=\"mi\">285</span>           <span class=\"mi\">2022</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                                                       <span class=\"mi\">586</span>            <span class=\"mi\">170</span>           <span class=\"mi\">2021</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space.lean</span>                                                         <span class=\"mi\">407</span>            <span class=\"mi\">135</span>           <span class=\"mi\">1997</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finsupp</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                                                       <span class=\"mi\">590</span>            <span class=\"mi\">237</span>           <span class=\"mi\">1914</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">buffer</span><span class=\"bp\">/</span><span class=\"n\">parser</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                                                 <span class=\"mi\">425</span>            <span class=\"mi\">370</span>           <span class=\"mi\">1889</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                                                           <span class=\"mi\">846</span>            <span class=\"mi\">153</span>           <span class=\"mi\">1884</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">lebesgue.lean</span>                                                         <span class=\"mi\">335</span>            <span class=\"mi\">135</span>           <span class=\"mi\">1870</span>\n</code></pre></div>",
        "id": 257751794,
        "sender_full_name": "Julian Berman",
        "timestamp": 1634326242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Does splitting the file up solve the problem of finding relevant lemmas? Wouldn't reordering things within the file be equivalent for that purpose?</p>",
        "id": 257751854,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634326277
    },
    {
        "content": "<p>Nope, because the current situation is that defs are in a file and lemmas in other ones.</p>",
        "id": 257751905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634326308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/longest.20file/near/257751271\">said</a>:</p>\n<blockquote>\n<p>Would you like if I split it up in files per definitions.</p>\n</blockquote>\n<p>The advantage of having the definitions separate from the non-trivial lemmas is that you don't have to worry about circular imports when proving the N^2 different interactions between those definitions</p>",
        "id": 257752076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634326376
    },
    {
        "content": "<p>If you had a file per definition, you to some extent have to pick a linear order over your definitions, such that <code>list/aaa.lean</code> contains lemmas about only <code>list.aaa</code>, <code>list/zzz.lean</code> contains lemmas about how <code>list.zzz</code> interacts with <code>list.yyy</code>, <code>list.xxx</code>, ..., <code>list.aaa</code></p>",
        "id": 257752271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634326456
    },
    {
        "content": "<p>Yes sure, but that still happens because you need the nontrivial lemmas for the next nontrivial lemmas.</p>",
        "id": 257754640,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634327518
    },
    {
        "content": "<p>Also, this linearization of definition happens all the time, except maybe that <code>list</code> has many more definitions.</p>",
        "id": 257754768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634327564
    },
    {
        "content": "<p>Another reason <code>list</code> lemmas and defs are split is that many of the defs are used to define tactics, that are used before the lemmas can be proved.</p>",
        "id": 257756565,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634328157
    },
    {
        "content": "<p>I don't want to claim it's impossible to disentangle this, but it would be a big effort, and IMO not necessarily for the better.</p>",
        "id": 257756677,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634328203
    },
    {
        "content": "<p>Oh yeah most of the definitions are in core.</p>",
        "id": 257757249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634328450
    },
    {
        "content": "<p>This is orthogonal to splitting <code>data.list.basic</code> though.</p>",
        "id": 257757294,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634328470
    },
    {
        "content": "<p>Not entirely. Splitting <code>data.list.basic</code> won't help you with this, because the definitions are in core or in <code>data.list.defs</code>, for good reasons:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/longest.20file/near/257750766\">said</a>:</p>\n<blockquote>\n<p>I don't like the way the <code>list</code> stuff is arranged. Every time I jump to a <code>list</code> definition hoping to find the relevant lemmas next to it, it brings me to this huge mess that <code>data.list.basic</code> is.</p>\n</blockquote>",
        "id": 257758272,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634328856
    },
    {
        "content": "<p>Splitting <code>data.list.basic</code> sounds okay to me, regardless. But I'm not sure there are clear lines for where to split it because of the interactions that Eric mentions.</p>",
        "id": 257758374,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634328911
    },
    {
        "content": "<p>It should be clear to someone who proves a lemma about <code>list.f</code> and <code>list.g</code> where they should put it. Right now I guess the answer is \"as high up in <code>list.basic</code> as you can,\" which isn't great</p>",
        "id": 257758593,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634329003
    },
    {
        "content": "<p>I've previously done lots of splitting of <code>data.list.basic</code>. I'm in favour of anyone doing more!</p>",
        "id": 257758801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634329099
    },
    {
        "content": "<p>I have a few ideas. For example, we could separate the defs that look up elements, like <code>head</code>, <code>tail</code>, <code>nth</code> <code>take</code>, <code>drop</code>, the defs that transform lists, like <code>map</code>, <code>map2</code>, <code>bind</code>, the defs that consider lists as combinatorial objects, like <code>sublist</code>, <code>permutations</code>, <code>perm</code>...</p>",
        "id": 257759384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634329372
    },
    {
        "content": "<p>Any other suggestions?</p>",
        "id": 257759433,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634329393
    },
    {
        "content": "<p>Note that its not enough to say \"we should split out these groups\", you also need to say \"and we'll put them in this order in the imports heirarchy\"</p>",
        "id": 257760733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634329914
    },
    {
        "content": "<p>Or keep around a \"lemmas\" file for the interactions</p>",
        "id": 257760812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634329934
    },
    {
        "content": "<p>This is the dirty job I will figure out when doing.</p>",
        "id": 257760960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634329994
    },
    {
        "content": "<p><code>permutation</code> can earn its own file just before <code>perm</code>.</p>",
        "id": 257761362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634330180
    },
    {
        "content": "<p>Coincidentally I made <a href=\"https://github.com/leanprover-community/mathlib/issues/9728\">#9728</a> earlier today, it doesn't help with the length much but hopefully simplifies the import hierarchy a little (and makes it easier to avoid loops).</p>",
        "id": 257781783,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634341331
    },
    {
        "content": "<p>Moved ~270 lines from <code>topology.algebra.ordered.basic</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/9745\">#9745</a></p>",
        "id": 257807597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634366320
    },
    {
        "content": "<p>Am moving 194 lines from <code>data.list.basic</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/9906\">#9906</a></p>",
        "id": 258827025,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635000176
    },
    {
        "content": "<p>An update</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">find</span> <span class=\"bp\">.</span> <span class=\"bp\">-</span><span class=\"n\">iname</span> <span class=\"bp\">'*.</span><span class=\"n\">lean'</span> <span class=\"bp\">-</span><span class=\"n\">exec</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"o\">{}</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span> <span class=\"n\">sort</span> <span class=\"bp\">-</span><span class=\"n\">rn</span> <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"mi\">20</span>\n <span class=\"mi\">260185</span> <span class=\"n\">total</span>\n <span class=\"mi\">240111</span> <span class=\"n\">total</span>\n <span class=\"mi\">178400</span> <span class=\"n\">total</span>\n  <span class=\"mi\">12135</span> <span class=\"n\">total</span>\n   <span class=\"mi\">4114</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">3278</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">measure_space.lean</span>\n   <span class=\"mi\">3085</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2969</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">fderiv.lean</span>\n   <span class=\"mi\">2965</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">times_cont_diff.lean</span>\n   <span class=\"mi\">2800</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2774</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2753</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finsupp</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2684</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">buffer</span><span class=\"bp\">/</span><span class=\"n\">parser</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2677</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2614</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2577</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space.lean</span>\n   <span class=\"mi\">2557</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2486</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">subgroup</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n   <span class=\"mi\">2450</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">computability</span><span class=\"bp\">/</span><span class=\"n\">turing_machine.lean</span>\n   <span class=\"mi\">2407</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">core.lean</span>\n</code></pre></div>",
        "id": 260959369,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636533631
    }
]