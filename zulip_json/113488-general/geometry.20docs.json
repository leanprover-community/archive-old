[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> would you be interested in writing a page like <a href=\"https://leanprover-community.github.io/theories/linear_algebra.html\">this</a> or <a href=\"https://leanprover-community.github.io/theories/category_theory.html\">this</a> about your work on geometry? You only need to create a markdown in <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/tree/newsite/templates/theories\">this folder</a> and add an entry to <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/theories_index.yaml\">this file</a> (I can easily do the later if the format is obscure).</p>",
        "id": 206007315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596623408
    },
    {
        "content": "<p>It seems quite hard to get to those pages starting from the leanprover-community home page (as far as I can see, that linear algebra page is only accessible from the overview, not directly from the API documentation for linear algebra, for example).</p>\n<p>I can see the use of such pages in cases such as sets.html where they're describing a collection of related concepts from different parts of mathlib. I don't think my work on geometry is really spread out in a way that needs such a page yet, as opposed to expanding the module doc strings for <code>linear_algebra.affine_space</code> and <code>geometry.euclidean</code> to discuss more about the current contents.</p>\n<p>I do wonder if I should be splitting up <code>linear_algebra/affine_space.lean</code> into smaller files, given it's now the 12th largest <code>.lean</code> file in mathlib (and there are still lots of mathematically obvious facts about affine spaces not yet included), but even if split up I think module doc strings should be able to give a sufficient overview of the API at present.</p>",
        "id": 206090669,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596670805
    },
    {
        "content": "<p>I agree that the most important step would be to improve module docstrings, especially listing what's in there instead of simply saying that there isn't much. And splitting <code>affine_space.lean</code> could be useful as well.</p>",
        "id": 206236934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596791282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> another geometry question: the affine space file never mention <code>convex</code> or <code>convex_hull</code>, do you intend to connect things soon here? I guess you'll want to redo most of our <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/convex/basic.html\">convex/basic.lean</a> in the case of affine spaces.</p>",
        "id": 206240010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596793959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> was working on porting convexity to affine spaces, see branch convex-affine (and issue <a href=\"https://github.com/leanprover-community/mathlib/issues/2910\">#2910</a>).</p>",
        "id": 206240884,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596794685
    },
    {
        "content": "<p>Thanks. The history of this branch is hard to read because of master merges, so I'll wait for Yury to describe its status.</p>",
        "id": 206241578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596795345
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3719\">#3719</a> expands the module doc string for affine spaces.</p>",
        "id": 206243835,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596797457
    },
    {
        "content": "<p>The main problem with porting convexity to <code>affine_space</code>s is that without making <code>V</code> an <code>out_param</code> in <code>affine_space k V P</code> we have to define <code>convex V s</code> instead of <code>convex s</code>.</p>",
        "id": 206250666,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596803306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> am I right to think that, in order to resume work on porting convexity to affine spaces, we can simply copy <code>convex/basic.lean</code> from the branch to a up to date mathlib?</p>",
        "id": 206250701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596803338
    },
    {
        "content": "<p>Ah.</p>",
        "id": 206250715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596803348
    },
    {
        "content": "<p>That's bad indeed.</p>",
        "id": 206250722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596803354
    },
    {
        "content": "<p>I saw that even segments on the branch have an explicit type in the notation.</p>",
        "id": 206250748,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596803392
    },
    {
        "content": "<p>I tried to make <code>V</code> an <code>out_param</code> but failed, see <a href=\"#narrow/stream/113488-general/topic/out_param.20.26.20add_torsor\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/out_param.20.26.20add_torsor</a></p>",
        "id": 206250865,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596803467
    },
    {
        "content": "<p>This reminds me of when I tried to define affine spaces three years ago.</p>",
        "id": 206250991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596803548
    },
    {
        "content": "<p>Joseph avoided all these random failures by putting explicit arguments all over the place, but it's not very satisfying.</p>",
        "id": 206251040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596803587
    },
    {
        "content": "<p>I can quickly port convexity adding explicit arguments but I don't think that you'll like the result.</p>",
        "id": 206251101,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596803635
    },
    {
        "content": "<p>I think this is a rather serious issue. It's not blocking me because all the convexity part of my project happen in vector spaces (they are tangent spaces), but it's very bad for formalization in general if Lean doesn't allow to do this nicely.</p>",
        "id": 206251629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596804013
    },
    {
        "content": "<p>Unfortunately, I don't understand <strong>why</strong> it fails and make an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to test with Lean 4.</p>",
        "id": 206251899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596804215
    },
    {
        "content": "<p>It would be nice to get input from people who really understand all the subtlety of elaboration here.</p>",
        "id": 206252372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596804486
    },
    {
        "content": "<p>I tried asking Gabriel. Who else should I ask?</p>",
        "id": 206253537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596805212
    },
    {
        "content": "<p>Mario, Rob, Floris? Or even Sebastian if you can minimize enough.</p>",
        "id": 206255594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596806421
    },
    {
        "content": "<p>an MWE would help</p>",
        "id": 206257028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596807248
    },
    {
        "content": "<p>It would be nice for <code>k</code> as well as <code>V</code> to be implicit everywhere using affine spaces. (That's not such an issue for convexity because that's hardcoding ‚Ñù everywhere.) If anyone ever wants to reinterpret a complex affine space as a real one, using copies of the types should suffice; I certainly think the normal case is that <code>k</code> and <code>V</code> are both implied by <code>P</code>.</p>",
        "id": 206284294,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596820687
    },
    {
        "content": "<p>We don't do this for vector spaces, so I'd prefer to avoid this for affine spaces as well.</p>",
        "id": 206310391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596834870
    },
    {
        "content": "<p>we originally had vector spaces set up like this, and rolled it back after it came to light that it's actually not uncommon to have the one vector space over two different fields</p>",
        "id": 206310509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596834940
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3726\">#3726</a> splits up <code>affine_space.lean</code>, so reducing it from 10th largest <code>.lean</code> file in mathlib to 41st largest.</p>",
        "id": 206351125,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596898583
    },
    {
        "content": "<p>:( I'm removing <code>V</code> arguments from <code>affine_space.lean</code></p>",
        "id": 206355226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596905344
    }
]