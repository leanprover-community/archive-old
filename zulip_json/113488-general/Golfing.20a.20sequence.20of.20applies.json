[
    {
        "content": "<p>I'm trying to get better at golfing proofs and I was wondering if there is some nice golfing one can do with things of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">My_lem</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I've got quite a few of these (specially when proving some function is continuous, like in <a href=\"https://github.com/leanprover-community/mathlib/pull/13500\">#13500</a>) and it feels like there is just something basic I'm missing (or perhaps I shouldn't be proving things this way!).</p>",
        "id": 279424262,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650381838
    },
    {
        "content": "<p><code>apply_rules</code> maybe?</p>",
        "id": 279424385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650381883
    },
    {
        "content": "<p><code>refine A (B $ C $ C _)</code> with maybe some more underscores in between?</p>",
        "id": 279424392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650381884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Golfing.20a.20sequence.20of.20applies/near/279424385\">said</a>:</p>\n<blockquote>\n<p><code>apply_rules</code> maybe?</p>\n</blockquote>\n<p>Oh I didn't know about this, it seems to help sometimes, thanks!</p>",
        "id": 279425113,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650382160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Golfing.20a.20sequence.20of.20applies/near/279424392\">said</a>:</p>\n<blockquote>\n<p><code>refine A (B $ C $ C _)</code> with maybe some more underscores in between?</p>\n</blockquote>\n<p>Ah thanks, I'd not thought of trying to use a refine here, it also works for some of them!</p>",
        "id": 279425176,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1650382191
    },
    {
        "content": "<p>Yael's tip, together with the use of projection notation (<code>continuous_on_const.smul hf</code> instead of <code>continuous_on.smul continuous_on_const hf</code>) can greatly shrink the size of some of your continuity proofs.</p>",
        "id": 279425614,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650382338
    },
    {
        "content": "<p>Also lumping them together in a <code>show_term { tactics }</code> will give you a single expression.  Whether it is reasonable or not, depends on what you feed it!</p>\n<p>In the case you give, it should return an output similar to what Yaël describes.  I'm not sure if it will use dot-notation aggressively, though.  It wi also fill in all the underscores, some of which you can replace again with underscores.</p>",
        "id": 279440025,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650388210
    },
    {
        "content": "<p>Maybe it would be useful if we had a tactic like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">section</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.apply_list</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">pexpr_list</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">monad.mapm'</span> <span class=\"n\">tactic.interactive.apply</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The proof would simply be <code>apply_list [A, B, C, C]</code> and we don't need to worry about underscores.</p>",
        "id": 279443813,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650390000
    },
    {
        "content": "<p>If I have a proof which is only <code>apply</code> and <code>use</code> and <code>refine</code> and <code>exact</code> I usually change all the <code>apply</code>s and <code>use</code>s to <code>refine</code>s and then start doing the jigsaw puzzle to make it all into one line.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>-&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">C</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">C</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>-&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279446089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650391094
    },
    {
        "content": "<p>Isn't this exactly what <code>show_term</code> is useful for though? (Admittedly, I always forget about <code>show_term</code> myself)</p>",
        "id": 279446270,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650391198
    },
    {
        "content": "<p><code>show_term</code> won't tell you which underscores are allowed, although you can always just try replacing things with <code>_</code></p>",
        "id": 279473675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650405113
    }
]