[
    {
        "content": "<p>Would it be reasonable to PR something like the following?  This would allow recursion over even/odd numbers without having to deal with implementation details like <code>bit0</code> and <code>bit1</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even_odd_rec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">binary_rec</span> <span class=\"n\">P</span> <span class=\"n\">h0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">bit0_val</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h_even</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">bit1_val</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h_odd</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289817071,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657960589
    },
    {
        "content": "<p>I feel like the bit0 and bit1 version might still be more useful</p>",
        "id": 289821384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657967407
    },
    {
        "content": "<p>Since we have lots of lemmas about those</p>",
        "id": 289821391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657967423
    },
    {
        "content": "<p>But I can see that the one in terms of nat.bit could be annoying to use</p>",
        "id": 289821406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657967468
    },
    {
        "content": "<p>The bit0 and bit1 version would still be there for anyone who wants them, of course.</p>",
        "id": 289827891,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657977506
    },
    {
        "content": "<p>It just seems wrong and inconvenient to have to drop out of the familiar world of natural numbers and into the world of bits, when we could just as easily provide the same functionality within <code>ℕ</code>.</p>",
        "id": 289827992,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657977688
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15457\">#15457</a></p>",
        "id": 289877459,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658054413
    }
]