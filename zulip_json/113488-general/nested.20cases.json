[
    {
        "content": "<p>Is there a more convenient way to unpack the components of a conclusion of the form <code>∃ x y, p x ∧ q y ∧ r x y</code> in a tactics block than using multiple <code>cases</code> tactics?</p>",
        "id": 123003168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1519662609
    },
    {
        "content": "<p>you want mathlib's <code>rcases</code> or core's <code>cases_matching</code></p>",
        "id": 123003198,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519662669
    },
    {
        "content": "<p>oh yeah, <code>rcases</code> is what I want. Much better!</p>",
        "id": 123003381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1519662963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"rwbarton@gmail.com\" data-user-id=\"110032\">@Reid Barton</span> Also, in case you didn't know, the anonymous constructor notation <code>⟨..., ...⟩</code> is right-associative for nested constructors. So, for example, you can do <code>rcases h with ⟨x, y, px, qy, rxy⟩</code> with your type. I learned this recently, and it's quite convenient.</p>",
        "id": 123041049,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519734070
    }
]