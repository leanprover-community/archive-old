[
    {
        "content": "<p>Am I right that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.take\">docs#stream.take</a> is propositionally equal to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.approx\">docs#stream.approx</a>? Should we leave only one of them?</p>",
        "id": 258770623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634934908
    },
    {
        "content": "<p>They seem to be propositionally equal to me, with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stream.approx\">docs#stream.approx</a> having better definitional equalities.</p>",
        "id": 258774993,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634936942
    },
    {
        "content": "<p>I'm going to move <code>stream</code> from lean core to <code>mathlib</code> so that we can fix names/docs/simp attrs.</p>",
        "id": 258775187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634937036
    },
    {
        "content": "<p>Here's a crude proof to back up the claim:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.stream.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.approx</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">s.take</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stream.take</span><span class=\"o\">,</span> <span class=\"n\">list.range_eq_range'</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stream.approx</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">list.range'</span><span class=\"o\">,</span> <span class=\"n\">list.map</span><span class=\"o\">],</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">stream.tail</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">list.map_map</span><span class=\"o\">],</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">list.map_add_range'</span> <span class=\"mi\">1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258775891,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634937410
    }
]