[
    {
        "content": "<p>Consider the following silly lean program:</p>\n<div class=\"codehilite\"><pre><span></span>import system.io\n\nstructure the_structure :=\n  (a_type : Type)\n  (str : string)\n\ndef print_struct : io the_structure := do\n  return (the_structure.mk nat &quot;some-text&quot;)\n</pre></div>\n\n\n<p>The program fails to typecheck witht he following error:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  io the_structure\nterm\n  the_structure\nhas type\n  Type 1 : Type 2\nbut is expected to have type\n  Type : Type 1\n</pre></div>\n\n\n<p>Is there anything that can be done to salvage this code?</p>\n<p>I suppose I'm really asking: why am I prevented from doing this?</p>",
        "id": 131240824,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533911569
    },
    {
        "content": "<p><code>the_structure</code> contains a <code>Type</code>, so it is a member of <code>Type 1</code></p>",
        "id": 131240924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533911639
    },
    {
        "content": "<p>On the other hand <code>io</code> is defined to only take <code>Type = Type 0</code> (for some reason...)</p>",
        "id": 131241013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533911690
    },
    {
        "content": "<p>Is there any reason why <code>io</code> should only take <code>Type</code>s?</p>",
        "id": 131241027,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533911703
    },
    {
        "content": "<p>Yes, that is what I was wondering!</p>",
        "id": 131241039,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533911712
    },
    {
        "content": "<p>not really, I think Leo just didn't think it would get used like that - programming stuff usually lives in Type</p>",
        "id": 131241078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533911752
    },
    {
        "content": "<p>Normally everything is universe polymorphic, <code>io</code> seems to be an exception</p>",
        "id": 131241202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533911830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do you know anything about the story here?</p>",
        "id": 131241213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533911847
    },
    {
        "content": "<p>Unfortunately even <code>meta</code> doesn't save you from universe checks</p>",
        "id": 131241299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533911913
    },
    {
        "content": "<p>Here's a weird meta workaround:</p>\n<div class=\"codehilite\"><pre><span></span>meta structure the_structure : Type :=\n(a_type : expr)\n(str : string)\n\nmeta def print_struct : io the_structure := do\nreturn (the_structure.mk `(nat) &quot;some-text&quot;)\n</pre></div>",
        "id": 131241455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533912012
    },
    {
        "content": "<p>I see. Thanks. I think what I'm doing isn't too ridiculous---I'd like to to have a few modules in a program which are different ways of performing the same \"job\", each needing their own internal types etc. I wanted to be able to fill a structure with their functions and the types they take so the calling code could be module-independent. I'm just trying to say I don't think I'm doing something toooo arcane</p>\n<p>haha indeed, and once something is bumped up somewhere it is a cancer which proliferates through everything! :D</p>",
        "id": 131241536,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533912089
    },
    {
        "content": "<p>existential types are one of the weak points of dependent type theory over a system F like type system such as Haskell</p>",
        "id": 131241617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533912139
    },
    {
        "content": "<p>You can get many of the same benefits of existential types through typeclasses</p>",
        "id": 131241655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533912174
    },
    {
        "content": "<p>Thanks for the workaround there---but am I right in thinking that without converting just everything into expressions, that I won't be able declare another member of that structure to be a function which takes something of type <code>a_type</code>?</p>\n<p>ok thanks very much for your comments, I think i might resort to that even though there might be a bit more ugliness down the road!</p>",
        "id": 131241764,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533912249
    },
    {
        "content": "<p>Most of the currently available typeclasses have a mathematical bent, but consider for example <code>group A</code>. This is a typeclass on a type <code>A</code> providing it with a \"multiplication\" operation, which can be implemented however you like, provided it meets the axioms stated in the structure. This is lean's version of java type interfaces</p>",
        "id": 131241892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533912378
    },
    {
        "content": "<p>If you have an operation that can be implemented multiple ways, you define the operation as a typeclass and have multiple instances (implementations) of it</p>",
        "id": 131241919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533912421
    },
    {
        "content": "<blockquote>\n<p>Thanks for the workaround there---but am I right in thinking that without converting just everything into expressions, that I won't be able declare another member of that structure to be a function which takes something of type a_type?</p>\n</blockquote>\n<p>You can convert from expressions to objects and back in meta land using <code>eval_expr</code> and <code>reflect</code>, respectively</p>",
        "id": 131242028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533912491
    },
    {
        "content": "<p>You lose typechecking though - it's just two <code>expr</code>s and it's up to you to make sure one is a function and the other is a value of the same type</p>",
        "id": 131242075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533912547
    },
    {
        "content": "<p>I think I can make it weirder! So, it turns out (because of variable universes being allowed there) changing \"io\" to \"tactic\" above <em>does</em> work. But(!) now consider the following slight modification</p>\n<div class=\"codehilite\"><pre><span></span>structure the_structure :=\n  (a_type : Type)\n  (str : string)\n\n#check the_structure\n\nmeta def print_struct : tactic the_structure := do\n  t ← pure (the_structure.mk nat &quot;some-text&quot;),\n  n ← pure &quot;ello&quot;,\n  return t\n</pre></div>\n\n\n<p>We now fail to typecheck because:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  pure &quot;ello&quot;\nterm\n  &quot;ello&quot;\nhas type\n  string : Type\nbut is expected to have type\n  ?m_1 : Type 1\n</pre></div>\n\n\n<p>So <code>string</code> is too <em>low</em> in the universe hierarchy! This seems even weirder to me than the previous case---is there any why this shouldn't be allowed?</p>",
        "id": 131242441,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533912912
    },
    {
        "content": "<p>This is due to the fact that everything lives in exactly one type - there is no type subsumption in lean</p>",
        "id": 131242565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913012
    },
    {
        "content": "<p>but it's easy to work around in this case  - the <code>ulift</code> function moves things from any universe to a higher one</p>",
        "id": 131242585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913045
    },
    {
        "content": "<p>so you should be able to replace that line with <code>⟨n⟩ ← pure (ulift.up.{1} \"ello\"),</code></p>",
        "id": 131242677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913132
    },
    {
        "content": "<p>or <code>⟨n⟩ ← pure (⟨\"ello\"⟩ : ulift string),</code></p>",
        "id": 131242720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913169
    },
    {
        "content": "<p>you're awesome, mario! cheers and thanks again</p>",
        "id": 131242795,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533913214
    },
    {
        "content": "<blockquote>\n<p>you're awesome, mario! </p>\n</blockquote>\n<p>Without him, none of this would be happening.</p>",
        "id": 131243075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533913450
    },
    {
        "content": "<p>I believe a universe-polymorphic <code>io</code> would only make sense if we add a new primitive <code>io.ulift : io a -&gt; io (ulift a)</code>. Otherwise you would not be able to use any io primitives from an <code>io</code> of a higher universe. Monads really seem to be one of the better arguments for universe cumulativity, though so far we haven't run into any unavoidable issues regarding that yet.</p>",
        "id": 131834807,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1533920221
    },
    {
        "content": "<p><code>io.ulift</code> is just <code>map ulift.up</code></p>",
        "id": 131835355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533920930
    },
    {
        "content": "<p>oh wait nvm</p>",
        "id": 131835390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533920982
    },
    {
        "content": "<p>better yet, <code>io.map</code> should be a primitive</p>",
        "id": 131835397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533920997
    },
    {
        "content": "<p>I came up with a type class <code>liftable</code> which I like for this kind of problem. With functors, this universe thing infects the types. I think this will help.</p>",
        "id": 131842156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533929579
    },
    {
        "content": "<p><a href=\"https://github.com/cipher1024/slim_check/blob/f6c44cc48bc44c108ce88c4b1d5cad7b3f63445d/test/slim_check/liftable.lean\" target=\"_blank\" title=\"https://github.com/cipher1024/slim_check/blob/f6c44cc48bc44c108ce88c4b1d5cad7b3f63445d/test/slim_check/liftable.lean\">https://github.com/cipher1024/slim_check/blob/f6c44cc48bc44c108ce88c4b1d5cad7b3f63445d/test/slim_check/liftable.lean</a></p>",
        "id": 131842157,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533929580
    },
    {
        "content": "<p>I can put it in the nursery</p>",
        "id": 131842166,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533929587
    }
]