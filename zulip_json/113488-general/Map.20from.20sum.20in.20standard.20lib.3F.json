[
    {
        "content": "<p>Is a function similar to this one (and a notation for it) available in the standard library?</p>\n<div class=\"codehilite\"><pre><span></span>def map_from_sum {A B C : Type} (f : A → C) (g : B → C) : (A ⊕ B) → C\n| (sum.inl a) := f a\n| (sum.inr b) := g b\n</pre></div>\n\n\n<p>Thanks, Benedikt</p>",
        "id": 191032753,
        "sender_full_name": "Benedikt Ahrens",
        "timestamp": 1584560942
    },
    {
        "content": "<p>You're really here to check that your students aren't cheating in your Lean course, right? ;-)</p>",
        "id": 191034185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584561608
    },
    {
        "content": "<p>I was expecting to lay my hands on that function at once, but I can't immediately find it.</p>",
        "id": 191034333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584561681
    },
    {
        "content": "<p><code>or.elim : ∀ {a b c : Prop}, a ∨ b → (a → c) → (b → c) → c</code> but I couldn't spot <code>sum.elim</code></p>",
        "id": 191034408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584561716
    },
    {
        "content": "<p>oh found it, it's in <code>data.sum</code></p>",
        "id": 191034596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584561799
    },
    {
        "content": "<p>ha ha, I didn't even know that file existed.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">sum.elim : Π {α : Type u_1} {β : Type u_2} {γ : Sort u_3}, (α → γ) → (β → γ) → α ⊕ β → γ</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 191034641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584561835
    },
    {
        "content": "<p>Nice, I didn't know this existed either. Non-dependent eliminators are frequently more convenient, I wish Lean would generate them automatically.</p>",
        "id": 191034752,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584561878
    },
    {
        "content": "<p>I was surprised that <code>suggest</code> didn't help:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map_from_sum</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⊕</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">suggest</span>\n<span class=\"c\">/-</span><span class=\"cm\"> There are no applicable declarations</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">A B C : Type,</span>\n<span class=\"cm\">f : A → C,</span>\n<span class=\"cm\">g : B → C</span>\n<span class=\"cm\">⊢ A ⊕ B → C -/</span>\n</pre></div>",
        "id": 191037230,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584563177
    },
    {
        "content": "<p>Might be because it's data not a prop?</p>",
        "id": 191037577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584563325
    },
    {
        "content": "<p>Ah, that makes sense. This reminds me of how we couldn't use <code>cc</code> on your <a href=\"#narrow/stream/113488-general/topic/function.20with.20random.20definition\" title=\"#narrow/stream/113488-general/topic/function.20with.20random.20definition\">\"random types\" challenge</a>.</p>",
        "id": 191039168,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584564085
    },
    {
        "content": "<p>Thanks a lot for your answers.<br>\nI tried hard to find <code>empty.elim</code> (or another map of type empty -&gt; C), but have not been successful. Is such a map pre-defined?</p>",
        "id": 191401426,
        "sender_full_name": "Benedikt Ahrens",
        "timestamp": 1584890874
    },
    {
        "content": "<p><code>empty.elim</code> does exist (in mathlib, <code>logic.basic</code>, one of the very first imports). There's also <code>empty.rec</code> and <code>empty.rec_on</code> in core.</p>",
        "id": 191401808,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584891320
    },
    {
        "content": "<p>It's just <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/logic/basic.lean#L35\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/logic/basic.lean#L35\"><code>logic.basic</code></a>, not <code>data.logic.basic</code>.</p>",
        "id": 191401888,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584891406
    },
    {
        "content": "<p>I was also surprised <code>suggest</code> didn't find this. Maybe <code>suggest</code> shouldn't filter out <code>Sort *</code> declarations? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 191401972,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584891498
    }
]