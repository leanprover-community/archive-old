[
    {
        "content": "<p>Say that I make a change in <code>X.lean</code>. This might make Lean think that 50% of mathlib needs to be recompiled. But I'm convinced that 99% of all potential errors will occur in a file containing the string <code>zero</code>. So I run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"n\">zero</span>\n</code></pre></div>\n<p>which returns a list of files that contain <code>zero</code>. This is again, say, 50% of mathlib. But the overlap is presumably only 25%. How do I figure out this overlap, so that I can pass it to <code>lean --make</code> and find my errors faster?</p>",
        "id": 279415430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650378078
    },
    {
        "content": "<p>Is there a way to get lean to say which files it will touch to compile? Probably not until it actually does the compilation</p>",
        "id": 279416094,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650378408
    },
    {
        "content": "<p>If Lean doesn't think it needs to recompile some file then recompiling it should be fast.</p>",
        "id": 279416325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650378503
    },
    {
        "content": "<p>But most likely your 50% of files containing <code>zero</code> will collectively import ~90% of mathlib</p>",
        "id": 279416383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650378536
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"n\">zero</span> <span class=\"bp\">|</span> <span class=\"n\">xargs</span> <span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"o\">{}</span> <span class=\"n\">lean</span> <span class=\"c1\">--make {}</span>\n</code></pre></div>\n<p>to make those files.<br>\nReally, you want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span> <span class=\"c1\">--which-files-need-recompilation-bfs-order | rg zero | xargs -I{} lean --make {}</span>\n</code></pre></div>",
        "id": 279416386,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650378537
    },
    {
        "content": "<p>But if you pass it explicitly to <code>lean --make</code> it will ignore the <code>olean</code>, right? I think that at least matches my anecdotal experience.</p>",
        "id": 279416433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650378553
    },
    {
        "content": "<p>I don't think so, from a quick test with a slow file</p>",
        "id": 279418277,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650379393
    },
    {
        "content": "<p>Hmm, then I must be an impatient person <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 279418493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650379489
    },
    {
        "content": "<p><del>(GNU parallel should be faster than xargs since I think <code>lean --make</code> is single-core by default. [xargs does have a crappy -P but yeah parallel ftw]) -- e.g. <code>rg -l zero | parallel lean --make {}</code></del></p>",
        "id": 279419542,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650379977
    },
    {
        "content": "<p>I thought it launched system threads+2 as default? You can pass <code>lean --make -j (number)</code> instead, I think that's better because if not some of those parallel invocations are surely going to tread on each others' toes</p>",
        "id": 279419836,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650380091
    },
    {
        "content": "<p>I thought I tried <code>-j</code> with make yesterday and it ignored it... /me tries again</p>",
        "id": 279419879,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650380116
    },
    {
        "content": "<p>Yeah here it ignores it I think. And I only get 1 CPU used (both with and without it)</p>",
        "id": 279420104,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650380224
    },
    {
        "content": "<p>that's weird, are you on your mobile setup?</p>",
        "id": 279420199,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650380280
    },
    {
        "content": "<p>No this is on my laptop -- for you you get multicore?</p>",
        "id": 279420285,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650380306
    },
    {
        "content": "<p>Aha, interesting, at some different point in the compilation now it's using multiple cores, but not consistently saturating them</p>",
        "id": 279420401,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650380359
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3cUpm4JLouhRrlgn5CBT2jsT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3cUpm4JLouhRrlgn5CBT2jsT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3cUpm4JLouhRrlgn5CBT2jsT/image.png\"></a></div>",
        "id": 279420450,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650380380
    },
    {
        "content": "<p>yeah, it depends whether files are needed or not. if everything needs logic/basic it has to compile that first and i'm not sure how coarse the threading is on a file like that</p>",
        "id": 279420563,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650380408
    },
    {
        "content": "<p>Aha.</p>",
        "id": 279420713,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650380460
    }
]