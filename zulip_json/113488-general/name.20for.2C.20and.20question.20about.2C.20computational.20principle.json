[
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\">section 11.4 of TPIL</a> they talk about quotients. The computational principle is introduced with its <code>rfl</code> proof. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>The theorem is given the unilluminating name of <code>thm</code>. I'm rolling my own quotient structure. Does this theorem have a canonical name? Furthermore, I realise that I also want a variant for my structure where f is Prop-valued and the theorem states</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">thm&#39;</span> <span class=\"o\">:</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">â†”</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>Does this theorem have a canonical name?</p>\n<hr>\n<p>The question is this: In <a href=\"https://leanprover.github.io/reference/expressions.html#computation\" target=\"_blank\" title=\"https://leanprover.github.io/reference/expressions.html#computation\">section 3.7 of the reference manual</a> they define abstract definitional equality, and then mention (right near the end) that Lean's procedure is \"more conservative\". But in the formal definition of definitional equality this computational principle for <code>quot</code> is never mentioned. So it seems to me that Lean's procedure is less conservative in this instance.</p>",
        "id": 161647802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553523755
    },
    {
        "content": "<p>I think it might be called <code>quot.lift_beta</code></p>",
        "id": 161648170,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553523969
    },
    {
        "content": "<p>Oh indeed! I just looked in core lean and lo and behold it's not called <code>thm</code> after all :-) So should we call ours <code>lift_beta</code>? Johan called it <code>lift_eq</code> which I thought sounded much better.</p>",
        "id": 161648821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553524351
    }
]