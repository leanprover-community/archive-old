[
    {
        "content": "<p>A common assumption in complex analysis is that a function is continuous on a set and is differentiable on its interior. In many cases, we apply a theorem with these assumptions to a function that is differentiable on the whole set. Then the application looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">my_lemma</span> <span class=\"n\">hd.continuous_on</span> <span class=\"o\">(</span><span class=\"n\">hd.mono</span> <span class=\"n\">interior_subset</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so we have to use <code>hd</code> twice. If we don't have <code>hd</code> in the environment, we need to prove it first instead of doing <code>apply my_lemma, { ... }, { ... }</code>.<br>\nShould we introduce a predicate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">name_me</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then provide dot notation lemmas like <code>differentiable_on.name_me</code>? If yes, what name would you suggest?</p>",
        "id": 273190993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645767596
    },
    {
        "content": "<p>Let me suggest <code>cont_diff_on_int</code>. Better names are welcome.</p>",
        "id": 273192459,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645769235
    },
    {
        "content": "<p>I'd rather avoid anything containing <code>cont_diff</code>, because in mathlib this now relates to higher smoothness. <code>diff_on_int_cont</code> would be ok, though.</p>",
        "id": 273194394,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1645771658
    },
    {
        "content": "<p>OK.</p>",
        "id": 273195213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645772620
    },
    {
        "content": "<p>Now I wonder which notion is more useful: <code>diff_on_int_cont</code> or <code>diff_cont_on_cl K f s := differentiable_on K f s ∧ continuous_on f (closure s)</code>? The latter takes an open domain as an argument.</p>",
        "id": 276703183,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648266443
    }
]