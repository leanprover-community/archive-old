[
    {
        "content": "<p>Starting on January 14th, I'll be teaching my <a href=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/\">Lean-powered undergraduate course</a> again. Last year I was so afraid of the installation procedure on Windows that I didn't tell my students to try to install Lean at home. But this turned out to be a huge issue. So I'm offering <strong>as much beer as you can drink</strong> during <a href=\"http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/index.html\" target=\"_blank\" title=\"http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/index.html\">Fomm2020</a> to anyone contributing to a download-and-click-only install of Lean+VScode+plugin+update-mathlib on Windows which then allows to download and unzip a project containing a compiled mathlib and use it without recompiling or typing any command in a shell. Ideally this should work on any version of Windows that my students could have, but having the main current version covered would already be nice. Useful starting points could include: <a href=\"https://github.com/NeilStrickland/lean_installer\" target=\"_blank\" title=\"https://github.com/NeilStrickland/lean_installer\">https://github.com/NeilStrickland/lean_installer</a> and <a href=\"https://dzone.com/articles/making-a-stand-alone-executable-from-a-python-scri\" target=\"_blank\" title=\"https://dzone.com/articles/making-a-stand-alone-executable-from-a-python-scri\">https://dzone.com/articles/making-a-stand-alone-executable-from-a-python-scri</a> or similar (one can only assume students will have an installation of python fighting Lean, not helping it). Let me ping potential windows users: <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, <span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span></p>",
        "id": 184316990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577447216
    },
    {
        "content": "<p>Would an installer be necessary? It seems to me you could just make a zip file. Some combination of VSCode portable mode <a href=\"https://code.visualstudio.com/docs/editor/portable\" target=\"_blank\" title=\"https://code.visualstudio.com/docs/editor/portable\">https://code.visualstudio.com/docs/editor/portable</a>, configuring the VSCode settings file, and bundling Lean and Mathlib.</p>",
        "id": 184336618,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1577471887
    },
    {
        "content": "<p>I don't know about installer. I only know students are not able to follow a list of instructions if is has more than two items or if one of the item is not \"download\" or \"click\".</p>",
        "id": 184338231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577473979
    },
    {
        "content": "<p>And also I have no access to Windows so I can't try anything.</p>",
        "id": 184338245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577474004
    },
    {
        "content": "<p>Ahh. Windows 10 has unlimited trial versions for development, in case you end up needing to do your own troubleshooting: <a href=\"https://developer.microsoft.com/en-us/windows/downloads/virtual-machines\" target=\"_blank\" title=\"https://developer.microsoft.com/en-us/windows/downloads/virtual-machines\">https://developer.microsoft.com/en-us/windows/downloads/virtual-machines</a></p>",
        "id": 184339858,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1577475968
    },
    {
        "content": "<p>If you really want them to just download and unzip a project containing compiled mathlib, then installing <code>update-mathlib</code> should be unnecessary, right?</p>",
        "id": 184340019,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577476173
    },
    {
        "content": "<p>That should let you skip all the Python nonsense.</p>",
        "id": 184340065,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577476203
    },
    {
        "content": "<p>If that's the case, I agree with Andrew, throw everything in one zip with a configured portable VSCode. Maybe wrap it in a script that adds a shortcut or executable or something to open the right directory in VSCode.</p>",
        "id": 184340236,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577476411
    },
    {
        "content": "<p>I cheated a bit by mixing my lecture requirements with the general case. But I shouldn't have done that. What is urgent indeed doesn't need update-mathlib.</p>",
        "id": 184342308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577478931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Will your current IO api work allow to code update-mathlib in Lean?</p>",
        "id": 184342357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577478967
    },
    {
        "content": "<p>But I still don't know how the portable VScode thing will find Lean.</p>",
        "id": 184342367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577478997
    },
    {
        "content": "<p>I still don’t have support for processes but once I have that it should be doable and more portable than a Lean 3 solution</p>",
        "id": 184342626,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577479334
    },
    {
        "content": "<blockquote>\n<p>But I still don't know how the portable VScode thing will find Lean.</p>\n</blockquote>\n<p>You might be able to include in your bundle a settings.json with a line that sets <a href=\"https://github.com/leanprover/vscode-lean#extension-settings\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean#extension-settings\"><code>lean.executablePath</code></a> to an appropriate relative path.</p>",
        "id": 184342722,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577479443
    },
    {
        "content": "<p>I will probably try such hacks since nobody seems interested by beer. But it would be nice to offer a full solution.</p>",
        "id": 184342778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577479542
    },
    {
        "content": "<p>The latest versions of CMake allow easier installer creation. When Lean4 rolls around I will investigate it if I have time, I recently had to do a lot of this kind of thing for work so I have some familiarity with it. It's a little arcane.</p>",
        "id": 184346781,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1577484914
    },
    {
        "content": "<p>I was thinking about this (for the same sort of reasons) a month or two ago, and it seemed to me to be reasonable to say to the students \"download VS Code by clicking here\" but then I decided that the holy grail would be for them never to have to type a command into a command line, so ideally one would want one click which says \"tell me a directory where you want to put your Lean stuff\" and then installs lean (somewhere) + a tutorial repo with compiled mathlib (in the directory they chose) and also, ideally, installs the Lean extension for VS Code.</p>",
        "id": 184348406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577487375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> What do you mean by \"rolls around\"? The source code is available and it can be built so you can already use it</p>",
        "id": 184348679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577487789
    },
    {
        "content": "<p>I tried to build Lean 4 in... November? The CMake build on Windows with Clang + Mingw wasn't working for me. There was some issue with the bootstrap procedure (I don't really remember what it was, because I only spent ~30 minutes investigating). Perhaps the Windows build works now? I have not tested it since then.</p>",
        "id": 184352002,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1577493729
    },
    {
        "content": "<p>The CI system builds a Windows version, maybe you should look at it</p>",
        "id": 184352125,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577493963
    },
    {
        "content": "<p>Yeah. I knew going in it was going to be a semi-pain, since Nix doesn't run on Windows at all. Maybe I will try again this weekend.</p>",
        "id": 184352207,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1577494201
    },
    {
        "content": "<p>I <em>think</em> I just managed to boot the Windows VM pointed out by Andrew!</p>",
        "id": 184392630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577570157
    },
    {
        "content": "<p>So I'm now exploring that portable mode in VScode. I manage to \"install\" VScode + lean plugin in user space. Now I can download lean and put it in the same folder. But I need to choose the right Lean executable path. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> or <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> do you have any idea how I could use a path relative to the VScode executable here?</p>",
        "id": 184393374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577571493
    },
    {
        "content": "<p>I don't even know whether I should use Windows backward path separator here.</p>",
        "id": 184393380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577571533
    },
    {
        "content": "<p>It seems that giving a full absolute path with backward separators works in the sense that it doesn't complain about lauching Lean. But then <code>#check nat</code> takes forever. I'll continue investigating tomorrow. But this is pointless if we can't solve that relative path issue.</p>",
        "id": 184393558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577571868
    },
    {
        "content": "<p>Just now I set up a portable vscode on my Mac, but I couldn't get the extension to find Lean whenever I used any relative path (even <code>~/path/to/lean</code> didn't work). There's a semi-related issue <a href=\"https://github.com/microsoft/vscode/issues/2809\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/issues/2809\">here</a> that I found after googling for \"VS Code relative paths\" (long story short, a keyword to use in settings paths that would stand for the location of the executable doesn't exist yet). </p>\n<p>Maybe we could hack something in vscode-lean (or a fork?). <a href=\"https://stackoverflow.com/questions/38955116/how-does-an-extension-for-vs-code-get-the-install-path-of-vs-code\" target=\"_blank\" title=\"https://stackoverflow.com/questions/38955116/how-does-an-extension-for-vs-code-get-the-install-path-of-vs-code\">Apparently</a>, we can get the absolute path to the vscode-lean extension with <code>vscode.extensions.getExtension (\"jroesch.lean\").extensionPath</code>. Since the folder structure for the portable VS Code that you provide should be predictable, we should be able to use this method to give an absolute path to Lean?</p>\n<p>I'll experiment with this a little bit more tonight, but no promises.</p>",
        "id": 184399644,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577583947
    },
    {
        "content": "<p>OK, <a href=\"https://github.com/bryangingechen/vscode-lean/tree/pmassot\" target=\"_blank\" title=\"https://github.com/bryangingechen/vscode-lean/tree/pmassot\">here's</a> a fork of vscode-lean which allows you to use <code>%extensionPath%</code> in the <code>lean.executablePath</code> and <code>lean.leanpkgPath</code> settings as a placeholder for the absolute path to the extension. You then can specify a relative path on top of that and hopefully that's enough for your needs. To test it out:</p>\n<ul>\n<li>Clone the repo and then <a href=\"https://code.visualstudio.com/api/working-with-extensions/publishing-extension#packaging-extensions\" target=\"_blank\" title=\"https://code.visualstudio.com/api/working-with-extensions/publishing-extension#packaging-extensions\">bundle it with <code>vsce package</code> to get a <code>.vsix</code> file</a>. Or if you trust me, you can download the attached file: <a href=\"/user_uploads/3121/0UiIdOqEwS-u0amZcBSOph_N/lean-0.14.8.vsix\" target=\"_blank\" title=\"lean-0.14.8.vsix\">lean-0.14.8.vsix</a>. </li>\n<li>Open the extensions tab in your portable version of VS Code and then click the three dots at the top right to \"Install from VSIX\".</li>\n<li>Now open the settings and edit <code>lean.executablePath</code> and <code>lean.leanpkgPath</code> (the 2nd most likely doesn't matter since your students are not likely to use the leanpkg integration). The string should begin with <code>%extensionPath%</code> and then include a relative path from the extension folder inside <a href=\"https://code.visualstudio.com/docs/editor/portable\" target=\"_blank\" title=\"https://code.visualstudio.com/docs/editor/portable\">the \"portable data\" folder</a> to the Lean executable you want to use. E.g. I think <code>%extensionPath%/../../../lean</code> will point to <code>lean</code> in the same directory as the Visual Studio Code executable.</li>\n</ul>\n<p>I only did some minimal testing, so I'm not sure if you need to use forward slashes or back slashes on Windows.</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> If you think this would be valuable for the main extension I can add some more documentation and PR this.</p>",
        "id": 184402035,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577588858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> The <code>%</code> variable interpolation syntax looks very much like 90s Windows. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>  But lexical syntax aside, please submit a PR!</p>",
        "id": 184412616,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1577610082
    },
    {
        "content": "<p>Thank you very much Bryan! I'll try that.</p>",
        "id": 184413718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577612415
    },
    {
        "content": "<p>I confirm that Bryan's version of the extension works as advertised (at least for the lean executable path).</p>",
        "id": 184414328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577613687
    },
    {
        "content": "<p>Great! <a href=\"https://github.com/leanprover/vscode-lean/pull/134\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/134\">Here's the PR</a>. I'm not so wedded to the syntax, so if anyone feels like bikeshedding, feel free to comment there.</p>",
        "id": 184426228,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577635229
    },
    {
        "content": "<p>Make a docker image containing the full install and run docker on windows.</p>",
        "id": 184457618,
        "sender_full_name": "Tim Daly",
        "timestamp": 1577693089
    },
    {
        "content": "<p>Here are the instructions I wrote to make an Axiom docker image:<br>\n<a href=\"https://github.com/daly/axiom/blob/master/Dockerfile.howto\" target=\"_blank\" title=\"https://github.com/daly/axiom/blob/master/Dockerfile.howto\">https://github.com/daly/axiom/blob/master/Dockerfile.howto</a></p>\n<p>It should be similar if you swap out the Axiom specific parts for Lean.<br>\nDocker runs on windows.</p>",
        "id": 184458695,
        "sender_full_name": "Tim Daly",
        "timestamp": 1577694842
    },
    {
        "content": "<p>Once you create the docker image your students only need to type<br>\ndocker run -i -t Massot/Lean Lean<br>\n(the last Lean being whatever command starts your lean development environment)</p>\n<p>PS: I prefer Irish Stout, yaknow, the nasty, warm, sticky stuff with various forms of pond life.</p>",
        "id": 184458873,
        "sender_full_name": "Tim Daly",
        "timestamp": 1577695134
    },
    {
        "content": "<p>It would, in general, if the various releases of Lean were available as docker images.<br>\nThis will be especially true when Lean 4 drops. That way it would be possible to run Lean3 in one image and Lean4 in another at the same time.</p>",
        "id": 184458956,
        "sender_full_name": "Tim Daly",
        "timestamp": 1577695287
    },
    {
        "content": "<p>I will be at the Formal Methods / Lean Together conference if you need help.</p>",
        "id": 184460036,
        "sender_full_name": "Tim Daly",
        "timestamp": 1577696560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Can you tell me what version of Ubuntu and what sequence of steps are needed to get a running environment? I can try to build a docker image for it.</p>",
        "id": 184477523,
        "sender_full_name": "Tim Daly",
        "timestamp": 1577718014
    },
    {
        "content": "<p>Thanks Tim, but I don't really see the advantage of a docker image over the lighter \"portable VScode  + lean\" solution. None of those will really give you a native fully working environment and the docker solution looks much heavier (embarking a Linux distribution).</p>",
        "id": 184482139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577722544
    },
    {
        "content": "<p>The just-released vscode-lean 0.14.9 contains the <code>%extensionPath%</code> feature, so no need to use the custom version of the extension any more.</p>",
        "id": 184857052,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578245205
    },
    {
        "content": "<p>I'm coming back to the issue of trying to use Lean in windows. After some tests in Pittsburgh, I thought it was possible to distribute a zip file containing VScode, its lean extension, Lean and mathlib. But my students told me it doesn't work (Lean is constantly recompiling thousands of files). Indeed I now have a virtual machine with Win10 and it doesn't work. Does anyone know how to ask Lean why it's compiling?</p>",
        "id": 187586701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581021826
    },
    {
        "content": "<p>I tried downloading a mathlib nightly (from before the Lean 3.5.0 switch) and ask Lean if it's ok. But it always want to compile.</p>",
        "id": 187586782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581021872
    },
    {
        "content": "<p>I would be very grateful if some windows user here could download <a href=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/bundles/math114_win.zip\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/bundles/math114_win.zip\">https://www.math.u-psud.fr/~pmassot/enseignement/math114/bundles/math114_win.zip</a>, unzip it and launch math114.bat and tell me why Lean is compiling stuff.</p>",
        "id": 187586856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581021934
    },
    {
        "content": "<p>I think it's a time stamp thing. I saw the recompiling behavior. Then I ran the standard touch olean incantation, restarted the server, and it was fine. Trying again from scratch to test.</p>",
        "id": 187588682,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581023106
    },
    {
        "content": "<p>I tried the touch olean incantations so many times...</p>",
        "id": 187588714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023130
    },
    {
        "content": "<p>BTW, something seems funny with your .bat script, it didn't terminate even after quitting VSCode. It was keeping a lock on the files so I couldn't delete the directory.</p>",
        "id": 187588744,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581023160
    },
    {
        "content": "<p>That was the first bat file I wrote since 1998.</p>",
        "id": 187588839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023199
    },
    {
        "content": "<p>I can believe it is funny.</p>",
        "id": 187588856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023214
    },
    {
        "content": "<p>I don't know what the cmd shell version of the touch olean script should be. (I did it from Git Bash before.) cmd has a different find and no grep by default.</p>",
        "id": 187589856,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581023887
    },
    {
        "content": "<p>I tried from git bash</p>",
        "id": 187589866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023900
    },
    {
        "content": "<p>Life is hard enough on Windows without using cmd</p>",
        "id": 187589890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023916
    },
    {
        "content": "<p>But presumably your students wont' be using git bash, right?</p>",
        "id": 187589898,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581023921
    },
    {
        "content": "<p>If they're just double clicking the .bat script it's going through cmd?</p>",
        "id": 187589911,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581023934
    },
    {
        "content": "<p>No, but I mean: even when I touch olean using git bash I still can't get VScode to open my exercises without trying to compile thousands of lean files</p>",
        "id": 187589954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023977
    },
    {
        "content": "<p>Did you managed to achieve that?</p>",
        "id": 187589977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023992
    },
    {
        "content": "<p>Yes. I unzipped the files, ran the .bat, opened 00_appercu.lean, saw the recompiling behavior. Restarted the server a bunch, same behavior. Closed VSCode. in Git Bash, <code>find . | grep \"[.]olean$\" | xargs touch</code>. Ran the bat again. 00_appercu.lean opened and everything is compiled.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">limite_suite</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span><span class=\"o\">,</span>\n<span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continue_en</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span>\n<span class=\"err\">⊢</span> <span class=\"n\">limite_suite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 187590241,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581024136
    },
    {
        "content": "<p>Where did you ran that find command?</p>",
        "id": 187590288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581024185
    },
    {
        "content": "<p>in which folder?</p>",
        "id": 187590294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581024191
    },
    {
        "content": "<p>The root of your archive, same directory as the bat.</p>",
        "id": 187590306,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581024209
    },
    {
        "content": "<p>What if you know zip that folder, move it somewhere else, unzip and run the bat?</p>",
        "id": 187590577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581024401
    },
    {
        "content": "<p>Uh, there are tons of tiny files in that archive, it takes a long time to zip and unzip. I can try. But I think that will overwrite the timestamps. Everything was stamped to the time I unzipped it before.</p>",
        "id": 187590819,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581024562
    },
    {
        "content": "<p>It's possible it depends on the zip/unzip tool, I have no idea.</p>",
        "id": 187590951,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581024638
    },
    {
        "content": "<p>I also tried the zip file.  Directly after unzipping, lean tries to compile everything.  After <code>touch `find` </code> in git bash, everything works as expected (i.e., no compiling).</p>",
        "id": 187590952,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581024639
    },
    {
        "content": "<p>Windows world is so crazy :-(</p>",
        "id": 187591048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581024721
    },
    {
        "content": "<p>OK, I just tried it, and it works out of the box for me.</p>",
        "id": 187591172,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581024807
    },
    {
        "content": "<p>I mean, I don't really see what's crazy? There are olean time stamp issues on Linux too. It's not unreasonable to consider a file created at the moment it's unzipped, is it?</p>",
        "id": 187591190,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581024834
    },
    {
        "content": "<p>So I've just tried two things on windows:</p>",
        "id": 187591235,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581024847
    },
    {
        "content": "<p>If I extract the zip file via drag-and-drop, then the files get the current timestamp.</p>",
        "id": 187591249,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581024864
    },
    {
        "content": "<p>I never had any olean time stamp issues on Linux.</p>",
        "id": 187591250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581024865
    },
    {
        "content": "<p>I mean, I unzipped it, I executed the bat file, then I opened <code>01egalites</code>, it didn't recompile anything and I could start proving stuff right away.</p>",
        "id": 187591258,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581024875
    },
    {
        "content": "<p>If I extract the file via \"extract all...\", then they have the old timestamp.</p>",
        "id": 187591262,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581024878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> How did you unzip them?</p>",
        "id": 187591270,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581024887
    },
    {
        "content": "<p>I used an unzipper called 7-zip.</p>",
        "id": 187591294,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581024909
    },
    {
        "content": "<p>The timestamps are the original ones.</p>",
        "id": 187591306,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581024922
    },
    {
        "content": "<p>Haha, okay. I zipped my copy with the updated time stamps, moved it to a new folder, and unzipped it, both using the built in Windows 10 unzip tool. It kept the time stamps and works immediately.</p>",
        "id": 187591332,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581024954
    },
    {
        "content": "<blockquote>\n<p>I never had any olean time stamp issues on Linux.</p>\n</blockquote>\n<p>I have, using cache-olean/update-mathlib.</p>",
        "id": 187591402,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581024993
    },
    {
        "content": "<p>I couldn't do anything with Gabriel's method but installing 7-zip worked.</p>",
        "id": 187592162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581025671
    },
    {
        "content": "<p>Thank you very much Rob, Gabriel and Sébastien!</p>",
        "id": 187592208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581025686
    },
    {
        "content": "<p><a href=\"https://devblogs.microsoft.com/oldnewthing/20110504-00/?p=10743\" target=\"_blank\" title=\"https://devblogs.microsoft.com/oldnewthing/20110504-00/?p=10743\">https://devblogs.microsoft.com/oldnewthing/20110504-00/?p=10743</a></p>",
        "id": 187592232,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581025714
    },
    {
        "content": "<p>Apparently windows helpfully resets the timestamp when you extract zip files.  But only for zip files that you've downloaded!</p>",
        "id": 187592276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581025759
    },
    {
        "content": "<p>The fix seems to be to check <code>Unblock</code> in the properties dialog...</p>",
        "id": 187592287,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581025771
    },
    {
        "content": "<p>Indeed that Unblock checkbox also does the trick! Thank you very much for investigating this Gabriel!</p>",
        "id": 187592619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581026063
    }
]