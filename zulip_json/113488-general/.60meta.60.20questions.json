[
    {
        "content": "<p>How do I do the following inside a <code>meta def</code>?</p>\n<ol>\n<li>Define a <code>structure</code> type?</li>\n<li>Define a <code>structure</code> instance from field values?</li>\n<li>Is it possible to define <code>protected</code> lemmas/definitions with Lean 3.5?</li>\n</ol>",
        "id": 188294492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581793224
    },
    {
        "content": "<p>I want to write a command that will generate some basic definitions/lemmas about <code>monoid_hom</code>, <code>ring_hom</code> etc.</p>",
        "id": 188294512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581793281
    },
    {
        "content": "<p>You can create structures using some lean 3.5 additions</p>",
        "id": 188295373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581794992
    },
    {
        "content": "<p>The internal interface to <code>protected</code> suggests that you can post hoc protect any definition, but it lacks a public API</p>",
        "id": 188295517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581795299
    },
    {
        "content": "<p>Where can I read about these additions?</p>",
        "id": 188295641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581795550
    },
    {
        "content": "<p>oh, I think I was mistaken. We added the ability to mimic the <code>inductive</code> command, but not <code>structure</code>. You can of course mimic it with an inductive, but structure projections get some fancy internal markings that you can't replicate</p>",
        "id": 188295703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581795639
    },
    {
        "content": "<p>looks like the structure command does its magic right from the parser, so that will require some refactoring</p>",
        "id": 188295719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581795678
    },
    {
        "content": "<p>OK, I can't mimic <code>structure</code>. How do I create a <code>def</code> producing a <code>structure</code>?</p>",
        "id": 188295792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581795803
    },
    {
        "content": "<p>Also, there is always the parser hack: use <code>with_input</code> to parse a string that contains the structure definition</p>",
        "id": 188295797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581795821
    },
    {
        "content": "<p>that works for pretty much anything, it's like <code>eval</code> for lean</p>",
        "id": 188295802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581795841
    },
    {
        "content": "<p>what do you mean by a def producing a structure?</p>",
        "id": 188295841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581795864
    },
    {
        "content": "<p>I mean something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mM</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mN</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>or <code>monoid_hom.id</code>.</p>",
        "id": 188295924,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581796035
    },
    {
        "content": "<p>I'll try <code>with_input</code>. Can I use some quotation magic in the argument?</p>",
        "id": 188295987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581796123
    },
    {
        "content": "<p>That's just sugar for a structure constructor. Is there a reason you can't just call that?</p>",
        "id": 188296044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581796237
    },
    {
        "content": "<p>I think the angle brackets notation is a <code>pexpr</code> that you may or may not be able to create from lean</p>",
        "id": 188296047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581796266
    },
    {
        "content": "<p>Ah, indeed this was a stupid question.</p>",
        "id": 188296127,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581796407
    },
    {
        "content": "<p>This will construct the anonymous brackets though:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span>\n</pre></div>",
        "id": 188296169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581796445
    },
    {
        "content": "<p>when you run <code>to_expr</code> it will use the target type to resolve what constructor it is, as usual</p>",
        "id": 188296182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581796494
    }
]