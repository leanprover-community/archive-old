[
    {
        "content": "<p>What is the use of the <code>@[congr]</code> annotation in <code>equiv.prod_congr</code>? I thought these annotations are used by <code>congr</code> and <code>simp</code>, but those tactics error when I try to apply them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"c1\">-- congr tactic failed</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- simplify tactic failed to simplify</span>\n</code></pre></div>",
        "id": 211509869,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601307805
    },
    {
        "content": "<p>Diagnosing myself with the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem: should I mark <code>prod_congr_left : β₁ ≃ β₂ → β₁ × α₁ ≃ β₂ × α₁</code> as <code>@[congr]</code>?</p>",
        "id": 211510945,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601308303
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 211596330,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601370184
    },
    {
        "content": "<p>To answer your first question: yes, the simplifier can use congruence lemmas for other simplification relations (such as <code>≃</code>).  This is not completely straightforward, but it can happen in two ways:</p>\n<ol>\n<li>You can instruct the simplifier to switch to another relation by providing an appropriate congruence lemma such as <code>α ≃ β → card α = card β</code>.</li>\n<li>You can call the simplifier manually (most functions accept the relation name as an extra argument).</li>\n</ol>",
        "id": 211596626,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601370394
    },
    {
        "content": "<p>The simp linters won't check any of this.</p>",
        "id": 211596645,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601370414
    },
    {
        "content": "<p>As for your second question: I wouldn't mark <code>prod_congr_left</code> as congr.</p>",
        "id": 211596667,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601370433
    }
]