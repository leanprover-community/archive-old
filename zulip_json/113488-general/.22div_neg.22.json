[
    {
        "content": "<p>algebra/field.lean L95:</p>\n<div class=\"codehilite\"><pre><span></span>lemma div_neg (a : α) (hb : b ≠ 0) : a / -b = -(a / b) :=\nby rw [← division_ring.neg_div_neg_eq _ (neg_ne_zero.2 hb), neg_neg, neg_div]\n</pre></div>",
        "id": 134617532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537900243
    },
    {
        "content": "<p>but <code>div_neg_eq_neg_div</code> is the exact same</p>",
        "id": 134617540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537900251
    },
    {
        "content": "<p>it's not the same, it's over twice as hard to type</p>",
        "id": 134652104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537947075
    },
    {
        "content": "<p>Especially if you're using a <a href=\"#narrow/stream/113488-general/subject/caching.20proofs/near/134214831\" title=\"#narrow/stream/113488-general/subject/caching.20proofs/near/134214831\">typewriter</a>. <span class=\"emoji emoji-1f5a8\" title=\"printer\">:printer:</span></p>",
        "id": 134652157,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537947143
    },
    {
        "content": "<p>I imagine I was annoyed with the lean core name and duplicated it with a new name</p>",
        "id": 134652158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947143
    },
    {
        "content": "<p>then why don't you prove it just using that?</p>",
        "id": 134652162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947158
    },
    {
        "content": "<p>probably the proof is shorter too?</p>",
        "id": 134652165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947176
    },
    {
        "content": "<p>I think you're misunderstanding me. See <a href=\"https://github.com/leanprover-community/mathlib/commit/6b2ee1dd45fedc0d04a4c9df76b3d0ce1ec084ed#diff-6bbbc7fb99ee6d3f77c06e4b7ad403a1L97\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/6b2ee1dd45fedc0d04a4c9df76b3d0ce1ec084ed#diff-6bbbc7fb99ee6d3f77c06e4b7ad403a1L97\">this edit of mine</a>.</p>",
        "id": 134652234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947274
    },
    {
        "content": "<p>No, I know exactly what you mean. I am saying the proof is shorter than the original proof</p>",
        "id": 134652262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947312
    },
    {
        "content": "<p>you've also revealed to me that your compile times change is doing more than just improving compile times :}</p>",
        "id": 134652353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947411
    },
    {
        "content": "<p>that's not true. my term mode proof is faster than <code>rw</code></p>",
        "id": 134652412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947485
    },
    {
        "content": "<p>the point is not to be significantly refactoring the proofs while you do it though</p>",
        "id": 134652426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947514
    },
    {
        "content": "<p>but that would reduce the time by like at least 90%</p>",
        "id": 134652431,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947531
    },
    {
        "content": "<p>because that brings in more controversial aspects of the work</p>",
        "id": 134652435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947545
    },
    {
        "content": "<p>I don't see why proofs are relevant</p>",
        "id": 134652439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947557
    },
    {
        "content": "<p>you aren't making it easy for me to merge this PR</p>",
        "id": 134652447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947574
    },
    {
        "content": "<p>also don't you like shorter proofs?</p>",
        "id": 134652449,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947577
    },
    {
        "content": "<p>yes, that's why I want the original proof there</p>",
        "id": 134652517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947651
    },
    {
        "content": "<p>because the original proof <code>by rw [← division_ring.neg_div_neg_eq _ (neg_ne_zero.2 hb), neg_neg, neg_div]</code> is longer and slower?</p>",
        "id": 134652528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947671
    },
    {
        "content": "<p>I expect that the core theorem will disappear shortly, and I don't want to forget that it's already been minimized</p>",
        "id": 134652530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947679
    },
    {
        "content": "<p>Don't sweat the small stuff. I'm hoping that your work is focusing on the actual worst offenders</p>",
        "id": 134652591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947740
    },
    {
        "content": "<p>Did you test your proofs for actual time saved?</p>",
        "id": 134652604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947768
    },
    {
        "content": "<p>of course</p>",
        "id": 134652606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947776
    },
    {
        "content": "<p>what method are you using?</p>",
        "id": 134652621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947806
    },
    {
        "content": "<p><code>set_option profiler true</code></p>",
        "id": 134652623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947815
    },
    {
        "content": "<p>You should focus on proofs that take &gt;1s to compile</p>",
        "id": 134652671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947857
    },
    {
        "content": "<p>every <code>simp</code> proof takes &gt;1s to compile</p>",
        "id": 134652679,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537947866
    },
    {
        "content": "<p>this is not my experience</p>",
        "id": 134652720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537947950
    },
    {
        "content": "<p>Maybe Kenny has a slower machine, which I guess in this context is in some weird sense quite helpful</p>",
        "id": 134652779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537947995
    },
    {
        "content": "<p>I remember Kenny complaining that some proof took 7 seconds to compile, and I tried it on my 1 year old laptop and it took 3 seconds</p>",
        "id": 134652792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537948031
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/OtOLeoaVolATyey-qF9KFNpx/2018-09-26-5.png\" target=\"_blank\" title=\"2018-09-26-5.png\">2018-09-26-5.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OtOLeoaVolATyey-qF9KFNpx/2018-09-26-5.png\" target=\"_blank\" title=\"2018-09-26-5.png\"><img src=\"/user_uploads/3121/OtOLeoaVolATyey-qF9KFNpx/2018-09-26-5.png\"></a></div>",
        "id": 134652810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948065
    },
    {
        "content": "<p>Kenny -- Mario is right. Attack the stuff which takes &gt; 1 second for you. Don't worry about div_neg being 0.04 or 0.03</p>",
        "id": 134652815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537948078
    },
    {
        "content": "<p>Your screenshot is eye-opening by the way</p>",
        "id": 134652876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537948131
    },
    {
        "content": "<p>it's also not good news at all</p>",
        "id": 134652908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948170
    },
    {
        "content": "<p>we may need to rewrite simp</p>",
        "id": 134652913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948177
    },
    {
        "content": "<p>so do I have the green light?</p>",
        "id": 134652921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948189
    },
    {
        "content": "<p>I am still a bit uncomfortable about this, like we should retain the original proofs</p>",
        "id": 134652999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948244
    },
    {
        "content": "<p>this is of course the same story as with <code>tidy</code></p>",
        "id": 134653015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948266
    },
    {
        "content": "<blockquote>\n<p>I expect that the core theorem will disappear shortly, and I don't want to forget that it's already been minimized</p>\n</blockquote>\n<p>are you referring to Lean 4?</p>",
        "id": 134653018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948271
    },
    {
        "content": "<p>yes, basically</p>",
        "id": 134653024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948283
    },
    {
        "content": "<p>but you can't copy the files to Lean 4 anyway</p>",
        "id": 134653030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948292
    },
    {
        "content": "<p>why bother that this particular proof can't be copied to Lean 4</p>",
        "id": 134653035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948299
    },
    {
        "content": "<p>kenny, focus</p>",
        "id": 134653047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948318
    },
    {
        "content": "<p>ok ok</p>",
        "id": 134653097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948365
    },
    {
        "content": "<p>suffice it to say that you have the green light to do changes expressly for the purpose of improving compile times by e.g. replacing <code>simp</code> with <code>simp only</code> or <code>rw</code></p>",
        "id": 134653107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948397
    },
    {
        "content": "<p>If you want to do something else, put it in a different PR</p>",
        "id": 134653111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948408
    },
    {
        "content": "<p>If you want to do two different things Kenny then you could do them in two different branches</p>",
        "id": 134653113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537948412
    },
    {
        "content": "<p>ok</p>",
        "id": 134653114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948416
    },
    {
        "content": "<p>so I don't have the green light to change:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_singleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_singleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 134653168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948449
    },
    {
        "content": "<p>just to confirm</p>",
        "id": 134653179,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948495
    },
    {
        "content": "<p>I would accept that if it's actually much faster</p>",
        "id": 134653180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948497
    },
    {
        "content": "<p>of course it's much faster</p>",
        "id": 134653190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948511
    },
    {
        "content": "<p><code>refl</code> is also among the things you can replace <code>simp</code> with</p>",
        "id": 134653193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948514
    },
    {
        "content": "<p>definitional unfolding is not always fast</p>",
        "id": 134653195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948524
    },
    {
        "content": "<p>hint: <code>10 + 10 = 20 := rfl</code></p>",
        "id": 134653199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948542
    },
    {
        "content": "<p>alright</p>",
        "id": 134653202,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948551
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/12xknWSPMLmfvRnGOp0UDVj4/2018-09-26-6.png\" target=\"_blank\" title=\"2018-09-26-6.png\">2018-09-26-6.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/12xknWSPMLmfvRnGOp0UDVj4/2018-09-26-6.png\" target=\"_blank\" title=\"2018-09-26-6.png\"><img src=\"/user_uploads/3121/12xknWSPMLmfvRnGOp0UDVj4/2018-09-26-6.png\"></a></div>",
        "id": 134653257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948597
    },
    {
        "content": "<p>I would still prefer <code>simp</code> over <code>simp only</code> if it is not a significant improvement</p>",
        "id": 134653280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948635
    },
    {
        "content": "<p>is 3 orders of magnitude significant enough?</p>",
        "id": 134653292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948657
    },
    {
        "content": "<p>I wonder if it is worth writing a hole command for generating <code>simp only</code> tactics.</p>",
        "id": 134653294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537948659
    },
    {
        "content": "<p>like if you can't improve by more than .1s then leave it</p>",
        "id": 134653298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948666
    },
    {
        "content": "<p>a hole command sounds like a great idea</p>",
        "id": 134653303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948677
    },
    {
        "content": "<p>maybe you missed the unit</p>",
        "id": 134653304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948678
    },
    {
        "content": "<p>no, I saw, that's a phenomenal improvement and I don't doubt that you will find many such things</p>",
        "id": 134653356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948704
    },
    {
        "content": "<p>or even just a wrapper for simp, that calls <code>simp</code>, looks at the result, and works out automatically a <code>simp only</code> command that will work, and outputs that as a trace message.</p>",
        "id": 134653378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537948729
    },
    {
        "content": "<blockquote>\n<p>or even just a wrapper for simp, that calls <code>simp</code>, looks at the result, and works out automatically a <code>simp only</code> command that will work, and outputs that as a trace message.</p>\n</blockquote>\n<p>that's exaclty what's in my mind</p>",
        "id": 134653386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948741
    },
    {
        "content": "<p>... and this all emphasises how much we need multiple levels of caching.</p>",
        "id": 134653392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537948746
    },
    {
        "content": "<p>I think caching is a bad idea</p>",
        "id": 134653410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948763
    },
    {
        "content": "<p>I think caching of the sort scott is talking about is a very good idea</p>",
        "id": 134653420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948779
    },
    {
        "content": "<p>in terms of the trust of the correctness</p>",
        "id": 134653438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948795
    },
    {
        "content": "<p>?</p>",
        "id": 134653484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948804
    },
    {
        "content": "<p>a proof is a proof</p>",
        "id": 134653503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948820
    },
    {
        "content": "<p>never mind</p>",
        "id": 134653515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948827
    },
    {
        "content": "<p>also what Scott said is what I'm doing manually</p>",
        "id": 134653525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948835
    },
    {
        "content": "<p>look at the output for <code>trace.simplify.rewrite</code> and write a correspondingly <code>simp only</code> or <code>rw</code></p>",
        "id": 134653537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948850
    },
    {
        "content": "<p>(or term mode proof)</p>",
        "id": 134653539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948854
    },
    {
        "content": "<p>Unfortunately I don't know if tactics can capture trace output</p>",
        "id": 134653561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537948879
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>or even just a wrapper for simp, that calls <code>simp</code>, looks at the result, and works out automatically a <code>simp only</code> command that will work, and outputs that as a trace message.</p>\n</blockquote>\n<p>that's exaclty what's in my mind</p>\n</blockquote>\n<p>Kenny why don't you look at how Scott got <code>tidy</code> to print out its proofs, and then write code which does what you're doing, or at least does part of it? It will make you a more powerful Lean programmer. Chris might be able to help you with this when you're back in London -- he knows some tactic stuff now.</p>",
        "id": 134653630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537948929
    },
    {
        "content": "<p>or you all can help me with my project so we can have a faster build sooner</p>",
        "id": 134653667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537948981
    },
    {
        "content": "<p>maybe we can look at the proof term that is generated by <code>simp</code> to work out those lemmas</p>",
        "id": 134653688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949002
    },
    {
        "content": "<p>I am not motivated to have a faster build because things build fast for me already :-/</p>",
        "id": 134653699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537949014
    },
    {
        "content": "<p>do holes work inside interactive tactic mode?</p>",
        "id": 134653799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949104
    },
    {
        "content": "<p>like <code>begin {! !} end</code></p>",
        "id": 134653810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949114
    },
    {
        "content": "<blockquote>\n<p>I am not motivated to have a faster build because things build fast for me already :-/</p>\n</blockquote>\n<p>remember the problems with mathlib that we talked about?</p>",
        "id": 134653817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537949124
    },
    {
        "content": "<blockquote>\n<p>do holes work inside interactive tactic mode?</p>\n</blockquote>\n<p>It seems that they do.</p>",
        "id": 134653910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537949192
    },
    {
        "content": "<p>there is a reason I recommended you focus on the worst offenders - not only is it a huge project to change every proof, but I'm not even sure that's a good idea</p>",
        "id": 134653928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949218
    },
    {
        "content": "<p>you will get most of the benefits with just working on 2 or 3 files in mathlib</p>",
        "id": 134653953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949244
    },
    {
        "content": "<p>I understand</p>",
        "id": 134653956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537949253
    },
    {
        "content": "<p>do you know which 3 files those are?</p>",
        "id": 134653973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537949279
    },
    {
        "content": "<p>no</p>",
        "id": 134654013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949286
    },
    {
        "content": "<p>do you know how I can find out?</p>",
        "id": 134654023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537949303
    },
    {
        "content": "<p>I'm hoping that you will find a way to use the profiler for this</p>",
        "id": 134654028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949309
    },
    {
        "content": "<p>and let me know what you do</p>",
        "id": 134654033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949323
    },
    {
        "content": "<p>ok</p>",
        "id": 134654071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537949379
    },
    {
        "content": "<p>kenny, have you found that <code>simp only</code> is faster or slower than <code>rw</code> when you have to give a list of rewrites?</p>",
        "id": 134654378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949703
    },
    {
        "content": "<p>I think they're roughly the same</p>",
        "id": 134654429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537949753
    },
    {
        "content": "<p>Also, if you come up with proof shortenings while you are doing this (and I expect you will), you should hold on to them and PR them separately. I'm not opposed to this, but the review is different</p>",
        "id": 134654607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537949915
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/.22div_neg.22/near/134653199\" title=\"#narrow/stream/113488-general/subject/.22div_neg.22/near/134653199\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/.22div_neg.22/near/134653199</a></p>\n<blockquote>\n<p>Mario Carneiro: definitional unfolding is not always fast<br>\nMario Carneiro: hint: <code>10 + 10 = 20 := rfl</code></p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/A-LPlvuMKGXmQM8fHPvu_LW8/2018-10-02.png\" target=\"_blank\" title=\"2018-10-02.png\">10+10=20</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/A-LPlvuMKGXmQM8fHPvu_LW8/2018-10-02.png\" target=\"_blank\" title=\"10+10=20\"><img src=\"/user_uploads/3121/A-LPlvuMKGXmQM8fHPvu_LW8/2018-10-02.png\"></a></div>",
        "id": 135019586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538466440
    },
    {
        "content": "<p>it was a hint, not an answer</p>",
        "id": 135019643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538466487
    },
    {
        "content": "<p>I see</p>",
        "id": 135019644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538466495
    },
    {
        "content": "<p>Try <code>10000 * 10000</code></p>",
        "id": 135019654,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538466514
    },
    {
        "content": "<p>obviously you should put a silly number of zeroes in random places, maybe a <code>^</code> for good measure</p>",
        "id": 135019656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538466517
    },
    {
        "content": "<p>I don't really think that's a good argument though. <code>10000 * 10000</code> would be a lot of layers of definitional unfolding, so what you really mean is that if you have a lot of layers of definitional unfolding then it would be slow. Of course, any fast process repeated 100000000 times will take a long time. That doesn't mean definitional unfolding itself is slow.</p>",
        "id": 135020222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538467361
    },
    {
        "content": "<p>Okay, how about <code>nat.prime 5 := dec_trivial</code>?</p>",
        "id": 135020288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538467488
    },
    {
        "content": "<p>what do I need to import?</p>",
        "id": 135020346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538467587
    },
    {
        "content": "<p><code>data.nat.prime</code></p>",
        "id": 135020415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538467697
    },
    {
        "content": "<p>and I also need an instance?</p>",
        "id": 135020432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538467764
    },
    {
        "content": "<p>the default one</p>",
        "id": 135020435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538467783
    },
    {
        "content": "<p>well there are two of them</p>",
        "id": 135020495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538467875
    },
    {
        "content": "<p>Actually the most convincing example is probably <code>ring2</code>. I wrote the same tactic twice, once via computational reflection, aka kernel evaluation, and once using the VM to produce proof terms. It wasn't significantly slower, but it was measurable, like 50% worse</p>",
        "id": 135020524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538467922
    },
    {
        "content": "<p>which one was worse?</p>",
        "id": 135020551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538467983
    },
    {
        "content": "<p><code>ring2</code> of course</p>",
        "id": 135020563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468022
    },
    {
        "content": "<p>Otherwise it would be called <code>ring</code> now</p>",
        "id": 135020570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538468035
    },
    {
        "content": "<p>not every term mode proof is fast</p>",
        "id": 135048800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538499450
    },
    {
        "content": "<p>but every fast proof is in term mode</p>",
        "id": 135048803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538499454
    },
    {
        "content": "<p>every proof that gets below 10 ms is done in term mode</p>",
        "id": 135048809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538499465
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/zqTn_dKHUTIKI1ujiLPrhKOR/2018-10-02-1.png\" target=\"_blank\" title=\"2018-10-02-1.png\">case in point:</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zqTn_dKHUTIKI1ujiLPrhKOR/2018-10-02-1.png\" target=\"_blank\" title=\"case in point:\"><img src=\"/user_uploads/3121/zqTn_dKHUTIKI1ujiLPrhKOR/2018-10-02-1.png\"></a></div>",
        "id": 135049451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538500086
    },
    {
        "content": "<p>ok bad example, <code>rfl</code> is a special term</p>",
        "id": 135049466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538500114
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8XdY6dp5U5mlaOPN-YFCkls_/2018-10-02-4.png\" target=\"_blank\" title=\"2018-10-02-4.png\">case in point:</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8XdY6dp5U5mlaOPN-YFCkls_/2018-10-02-4.png\" target=\"_blank\" title=\"case in point:\"><img src=\"/user_uploads/3121/8XdY6dp5U5mlaOPN-YFCkls_/2018-10-02-4.png\"></a></div>",
        "id": 135049507,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538500188
    },
    {
        "content": "<p>\"All fast proofs are alike; each slow proof is slow in its own way\" — Λeo Tolstoy</p>",
        "id": 135049582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538500235
    },
    {
        "content": "<p>is that a lambda?</p>",
        "id": 135049634,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538500310
    },
    {
        "content": "<p>Do you get big speed-up if you tell Lean what the missing terms are instead of making it guess them?</p>",
        "id": 135049689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538500338
    },
    {
        "content": "<p>depends on the term</p>",
        "id": 135049731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538500423
    },
    {
        "content": "<p>mostly no.</p>",
        "id": 135049733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538500425
    },
    {
        "content": "<p>You get a really big speedup if you just write olean files by hand</p>",
        "id": 135050403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538501271
    },
    {
        "content": "<p>It's not really a long term solution. The long term solution is to have an option to import files without proof checking, so that editing is easier. I've been using a ton of <code>linarith</code> when writing my stuff on exp, and it's great that when you have a goal like this, you don't have to think about it, and that's the way it should be, and I think it's hard to sell Lean if you say using these tactics is discouraged because they're slow.</p>",
        "id": 135050694,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538501601
    },
    {
        "content": "<p>Right, so we are back to the caching that we have been talking about.</p>",
        "id": 135050710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538501642
    },
    {
        "content": "<p>We need readable (editable?) proofs. But we also need speed.</p>",
        "id": 135050762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538501655
    },
    {
        "content": "<p>So we need several layers of caches, I think.</p>",
        "id": 135050772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538501667
    },
    {
        "content": "<p>This is one of the reasons I like metamath - there was a very clear middle layer that is easy to verify quickly and compiled-to by higher level IDEs</p>",
        "id": 135050838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538501740
    },
    {
        "content": "<p>storing only proof scripts forces their reevaluation on a regular basis</p>",
        "id": 135050849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538501761
    },
    {
        "content": "<p>In principle this should be the olean file, but the current design has these being far too ephemeral</p>",
        "id": 135050909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538501809
    },
    {
        "content": "<p>Does anyone know how many definitions there are in mathlib? If we were to aim for 5 minutes compilation, how much time does that give each definition on average?</p>",
        "id": 135051025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538501929
    },
    {
        "content": "<p>(this ignores multithreading, but I'm not sure if travis is even multithreaded)</p>",
        "id": 135051061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538501985
    },
    {
        "content": "<p>I don't really care about the Travis compile time. I care about the compile time on my laptop, and that of Chris, and yours.</p>",
        "id": 135051179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502080
    },
    {
        "content": "<p>For me it currently takes more than an hour...</p>",
        "id": 135051188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502099
    },
    {
        "content": "<p>Concerning number of statements: I think this was somewhere in the statistics of Patrick.</p>",
        "id": 135051239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502125
    },
    {
        "content": "<p>I don't even care about that. I care about the 10 minute - 1 hour wait for the yellow bar to move whenever I change some library file with quite a few dependencies.</p>",
        "id": 135051275,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538502174
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>for i in def lemma theorem; do git grep &quot;^$i&quot; | wc -l; done\n1301\n2511\n3942\n</pre></div>",
        "id": 135051385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502274
    },
    {
        "content": "<p>That's a rough approximation, because it doesn't match simp-lemmas etc</p>",
        "id": 135051432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502330
    },
    {
        "content": "<p>that is 40ms each, sounds tough</p>",
        "id": 135051491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538502370
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>for i in def lemma theorem &quot;\\\\@\\\\[&quot;; do git grep &quot;^$i&quot; | wc -l; done\n1301\n2511\n3942\n3457\n</pre></div>",
        "id": 135051527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502425
    },
    {
        "content": "<p>There could be some overcounting there though</p>",
        "id": 135051565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538502463
    },
    {
        "content": "<p>Right. To do this properly one should use one of the statistics tools</p>",
        "id": 135051615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502495
    },
    {
        "content": "<p>But I don't care if I have to compile for 8 hours, once a month.</p>",
        "id": 135051628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502537
    },
    {
        "content": "<p>I'll just leave my laptop running overnight.</p>",
        "id": 135051634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502548
    },
    {
        "content": "<p>The rest of the month, some sort of intermediate layer should be sufficient.</p>",
        "id": 135051641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502572
    },
    {
        "content": "<p>But I guess it doesn't make sense to discuss this all over again. I hope Lean 4 will bring some nice features. The issue about memoisation of tactic blocks sounded good. I hope something like that will be realised.</p>",
        "id": 135051718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502628
    },
    {
        "content": "<p>What about \"unsafe caching\"? In the sense, if A changes and you are modifying C and B is in the dependency path, then A is updated and rechecked, B remains untouched and all its theorems continue to hold in the old A environment, and C uses both, with conflicts resolved in favor of the new A environment</p>",
        "id": 135051826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538502754
    },
    {
        "content": "<p>This is not sound, but it would be pretty hard to notice the inconsistency unless you are specifically trying to foil it</p>",
        "id": 135051870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538502836
    },
    {
        "content": "<p>And it would only be for editor interaction anyway</p>",
        "id": 135051923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538502856
    },
    {
        "content": "<p>Right... it is completely fine if the stuff is opportunistic</p>",
        "id": 135051971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502903
    },
    {
        "content": "<p>If it trips on some edge case you just flag it to rebuild some caches</p>",
        "id": 135052005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502928
    },
    {
        "content": "<p>But again... this is not something we can currently do, right?</p>",
        "id": 135052022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538502951
    },
    {
        "content": "<p>no, this requires lean support as does any caching modification</p>",
        "id": 135052070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538502968
    },
    {
        "content": "<p>I should say that even \"readable term-mode proofs\" (what most people here would call readable) are really bad for showing to newcomers. There was a PhD student who showed quite a bit of interest over lunch. He asked me if I could show him some files on ring theory. So we browsed mathlib a bit. He really liked the interactive proofs. But as soon as a term-mode proof was more than a simple lambda-expression he was completely lost and disappointed.</p>",
        "id": 135052336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503213
    },
    {
        "content": "<p>Especially some 15-line term-mode proofs that were impossible to explain</p>",
        "id": 135052346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503232
    },
    {
        "content": "<p>What do you think of TPIL's term mode style?</p>",
        "id": 135052510,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538503390
    },
    {
        "content": "<p>Can you point me to a specific page?</p>",
        "id": 135052669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> Do you mean something like p34?</p>",
        "id": 135052770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503646
    },
    {
        "content": "<p>I would say that is readable, but it is also extremely long-winded for a really simple goal.</p>",
        "id": 135052778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503666
    },
    {
        "content": "<p>It helps that the write a lot of types and <code>show</code> that are not strictly necessary.</p>",
        "id": 135052886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503771
    },
    {
        "content": "<p>yes, in general, TPIL's style of using lots of explicit <code>show</code>, <code>have</code>, and <code>calc</code> mode</p>",
        "id": 135052918,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538503803
    },
    {
        "content": "<p>But what is the benefit over tactic mode?</p>",
        "id": 135052991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503836
    },
    {
        "content": "<p>Those proofs have a pretty straight forward analogue in tactic mode. With the benefit that you get interaction, and you can see how the proof state changes.</p>",
        "id": 135053034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503893
    },
    {
        "content": "<p>hmm, well, 1) you may read it without using the Lean editor, 2) organizing proofs around key <code>have</code> statements instead of long chains of <code>apply</code> or <code>rewrite</code> is good practice</p>",
        "id": 135053048,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538503913
    },
    {
        "content": "<p>But both of those can be done in tactic mode</p>",
        "id": 135053097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538503935
    },
    {
        "content": "<p>sure! and that's great for tactic mode. also I don't want to deny using tactics and advocate for 100% terms</p>",
        "id": 135053159,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504005
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>git grep &quot;^begin&quot; | wc -l\n800\n</pre></div>",
        "id": 135053221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504046
    },
    {
        "content": "<p>It is clear that tactic mode proofs are a minority in mathlib</p>",
        "id": 135053238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504061
    },
    {
        "content": "<p>And it is not clear to me why.</p>",
        "id": 135053247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504077
    },
    {
        "content": "<p>Just like in Coq most people write tactic mode proofs, but they could also write them in C-Zar style</p>",
        "id": 135053264,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504098
    },
    {
        "content": "<p><a href=\"https://www-verimag.imag.fr/~corbinea/ftp/programs/sqrt2.v\" target=\"_blank\" title=\"https://www-verimag.imag.fr/~corbinea/ftp/programs/sqrt2.v\">https://www-verimag.imag.fr/~corbinea/ftp/programs/sqrt2.v</a></p>",
        "id": 135053266,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504099
    },
    {
        "content": "<p>and I prefer to read those kinds of proofs</p>",
        "id": 135053275,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504105
    },
    {
        "content": "<p>Sure, there are expensive tactics... we can try to use those for proof discovery, and remove them later (or have good caching <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>). But just a bunch of <code>have</code> and <code>show</code>, <code>convert</code>, <code>cases</code>, <code>split</code>, etc...</p>",
        "id": 135053306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504140
    },
    {
        "content": "<p>That shouldn't be much more expensive then term mode, I hope.</p>",
        "id": 135053323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504155
    },
    {
        "content": "<p>it's really not about tactics, I think, just that tactics encourage what I think is a kind of sloppy proof writing</p>",
        "id": 135053366,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504167
    },
    {
        "content": "<p>with not much care about reading and understanding the proof later</p>",
        "id": 135053378,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504187
    },
    {
        "content": "<p>of course you can do the same thing in term mode</p>",
        "id": 135053380,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504190
    },
    {
        "content": "<p>Huh?</p>",
        "id": 135053383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504195
    },
    {
        "content": "<p>With every term mode proof I have trouble \"reading and understanding the proof later\"</p>",
        "id": 135053397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504214
    },
    {
        "content": "<p>I think I jokingly complained about this many months ago to Mario when I was going through Mathlib's analysis section</p>",
        "id": 135053398,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504217
    },
    {
        "content": "<p>It is the tactic proofs that I find easy to follow</p>",
        "id": 135053404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504224
    },
    {
        "content": "<p>Btw, link is broken over here.</p>",
        "id": 135053415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504233
    },
    {
        "content": "<p><a href=\"https://gist.github.com/alashworth/0f1446b5b322427cfd42a6ccb5a9df83\" target=\"_blank\" title=\"https://gist.github.com/alashworth/0f1446b5b322427cfd42a6ccb5a9df83\">https://gist.github.com/alashworth/0f1446b5b322427cfd42a6ccb5a9df83</a></p>",
        "id": 135053511,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504289
    },
    {
        "content": "<p>Maybe tactic mode makes me sloppy. But I'm sure that I can come back and pretty quickly edit some proof or make little changes. With term mode I just have to start all over again.</p>",
        "id": 135053534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504309
    },
    {
        "content": "<p>Those proofs in that link are very readable!</p>",
        "id": 135053588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504385
    },
    {
        "content": "<p>yes, I imagine anybody could understand them, even if they don't know any Coq</p>",
        "id": 135053659,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504427
    },
    {
        "content": "<p>In Orsay we spoke about a VScode button that would transform a term-mode proof into a tactic block. Just by silly regex transformations you could get pretty far...</p>",
        "id": 135053773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504531
    },
    {
        "content": "<p>I haven't figured out how to contribute to the VScode extensions, but I think it would be really helpful for me...</p>",
        "id": 135053807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504572
    },
    {
        "content": "<p>if people wrote their term mode proofs with care, in the style of TPIL or the gist I linked, then you wouldn't need to step through it with Lean :) I guess that's the point I wanted to make</p>",
        "id": 135053919,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504659
    },
    {
        "content": "<p>I agree with your friend that most proofs in mathlib, term mode or tactic mode, are impossible to understand without taking them apart by hand...</p>",
        "id": 135053942,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504680
    },
    {
        "content": "<p>but as it turns out the concise style seems to be popular no matter the language. In Coq nobody uses C-Zar, but instead SSReflect, which is famously terse</p>",
        "id": 135054129,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504852
    },
    {
        "content": "<p>(for math anyway)</p>",
        "id": 135054137,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538504859
    },
    {
        "content": "<p>hmmm... is it also faster?</p>",
        "id": 135054197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538504892
    },
    {
        "content": "<p>I don't know enough about SSReflect to compare the two</p>",
        "id": 135054335,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538505011
    },
    {
        "content": "<p>Actually I found out about Lean after struggling with SSReflect in an IRC chatroom... and then I switched</p>",
        "id": 135054356,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538505037
    },
    {
        "content": "<p>Lol</p>",
        "id": 135054371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538505058
    },
    {
        "content": "<blockquote>\n<p>It is clear that tactic mode proofs are a minority in mathlib</p>\n</blockquote>\n<p>maybe you forgot <code>by</code></p>",
        "id": 135055543,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538506168
    },
    {
        "content": "<blockquote>\n<p>that is 40ms each, sounds tough</p>\n</blockquote>\n<p>20% of the theorems take 80% of the time to compile (Pareto principle)</p>",
        "id": 135055706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538506296
    },
    {
        "content": "<p>many theorems take less than 40ms to compile</p>",
        "id": 135055715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538506307
    },
    {
        "content": "<p>Everyone seems to have different opinions about readability. People like Larry Paulson in Cambridge seem to believe it is a fundamental principle which should be adhered to at all costs. I had always assumed that Mario's attitude was \"hang readability, just get it done in as few characters as possible\" -- but then later on I realised that Mario was writing code which he could actually read, it was just that I couldn't read it. No doubt this will come with practice.</p>\n<p>My opinion is that actually I don't think anyone reads Bourbaki, people read books which are written to be read so that people could learn the material, and Bourbaki was written to be foundational. There is one Bourbaki that people read -- the stuff on algebraic groups -- because it's a really good refrence for e.g. all the facts and figures for the exceptional groups like E_8, G_2 etc -- but in general my experience is that people only read Bourbaki if they're desperate or if they for some reason want to see the theory built up from scratch (and most mathematicians don't). I've come to the conclusion that when it comes to mathlib I don't care whether the proofs are readable or not, because that is not the point of mathlib. I have occasionally in the past written instructive proofs, and actually this term I will be writing a whole bunch of instructive proofs of basic mathematics, with Lean tactic proofs littered with comments. But that's because I'm concentrating on teaching. In my mind the main criteria for a mathlib proof should be \"is it easily maintainable?\". I am hoping that compilation times are something which can be solved by technology (code to make it so I only have to compile once a month, speed-ups, better hardware) in the long term.</p>",
        "id": 135086345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538551689
    }
]