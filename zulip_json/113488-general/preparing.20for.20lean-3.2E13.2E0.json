[
    {
        "content": "<p>If you look at <a href=\"https://github.com/leanprover-community/lean/commits/master\">https://github.com/leanprover-community/lean/commits/master</a>, which of yesterdays commits is most likely to cause breakage in <code>category_theory/whiskering</code>?</p>",
        "id": 197798649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640073
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">whisker_left</span> <span class=\"n\">F</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"err\">≫</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">whisker_left</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">whiskering_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"err\">⋙</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">whisker_left</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">τ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n      <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"kn\">end</span> <span class=\"o\">},</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">]</span> <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- error under the final `rw`</span>\n</code></pre></div>",
        "id": 197798716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640153
    },
    {
        "content": "<p>Probably the congr_lemma/simp_lemma stuff, but partly because I don't know what those are</p>",
        "id": 197798795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589640275
    },
    {
        "content": "<p>I can replace the <code>rw</code> with <code>erw</code>, and after that <code>refl</code> closes the goal. But I'd rather understand what went wrong...</p>",
        "id": 197798797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640277
    },
    {
        "content": "<p>My guess would be that the goal after <code>dsimp</code> changed somehow</p>",
        "id": 197798814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589640300
    },
    {
        "content": "<p>Probably, yes</p>",
        "id": 197798835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640311
    },
    {
        "content": "<p>Can you check what the goal looks like in current mathlib?</p>",
        "id": 197798843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640323
    },
    {
        "content": "<p>Not easily at the moment</p>",
        "id": 197798904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589640380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(I found a second copy of mathlib on my disk.)</p>",
        "id": 197798913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640407
    },
    {
        "content": "<p>I strongly suggest keeping a build of the last working version available when doing upgrades for things like this</p>",
        "id": 197798915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589640412
    },
    {
        "content": "<p>So yes, <code>dsimp</code> changed.</p>",
        "id": 197798916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Is this expected behaviour? Is <code>dsimp</code> supposed to behave differently?</p>",
        "id": 197798949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640480
    },
    {
        "content": "<p>I'll type this out so you can just paste it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 197799068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589640610
    },
    {
        "content": "<p>It could also be that the lemma that's supposed to be used changed in some way</p>",
        "id": 197799075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589640637
    },
    {
        "content": "<p><a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23229/near/197722657\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23229/near/197722657</a></p>",
        "id": 197799946,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589641718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thanks for the pointer. I'll see how much I can fix.</p>",
        "id": 197807368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589652188
    },
    {
        "content": "<p>That's the only change I needed for mathlib to compile after the <code>simp_cache</code> PR.</p>",
        "id": 197807380,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589652227
    },
    {
        "content": "<p>I'm surprised that I didn't have any trouble with this \"breaking change\" in simp for the entire dependency tree of <code>number_theory/quadratic_reciprocity</code>. (Ok, I had to add <code>mul_assoc</code> to a <code>simp only</code> exactly once.)</p>",
        "id": 197807426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589652245
    },
    {
        "content": "<p>Aah, you're saying I should apply that patch, and hopefully be done with it?</p>",
        "id": 197807447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589652289
    },
    {
        "content": "<p>Yes!</p>",
        "id": 197807473,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589652322
    },
    {
        "content": "<p>I've applied the patch. Trying to compile now.</p>",
        "id": 197807949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589653081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> If this all compiles, would you consider releasing 3.13?</p>",
        "id": 197808009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589653102
    },
    {
        "content": "<p>It's the <em>weekend</em>.  But you can release 3.13 yourself if you want.  Just submit a PR like <a href=\"https://github.com/leanprover-community/lean/issues/235\">lean#235</a>, let bors merge it, and then tag the merged commit with <code>v3.13.0</code>.</p>",
        "id": 197808194,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589653420
    },
    {
        "content": "<p>If you're fine with me releasing it, then I'll try to do that.</p>",
        "id": 197808405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589653726
    },
    {
        "content": "<p>Hooray! This branch compiles <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 197808897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589654625
    },
    {
        "content": "<p>What's left is sorting out the copyright stuff.</p>",
        "id": 197809535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589655576
    },
    {
        "content": "<p>I'll leave that to others</p>",
        "id": 197809536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589655580
    },
    {
        "content": "<p>I emailed Leo but didn't hear back yet</p>",
        "id": 197810011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589656146
    },
    {
        "content": "<p>I put <a href=\"https://github.com/leanprover-community/lean/issues/243\">lean#243</a> on the queue and I'll tag it when the build finishes.</p>",
        "id": 197810588,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589656840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Thanks!</p>",
        "id": 197811258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589657917
    },
    {
        "content": "<p>Linting failed, not too surprisingly. I'm guessing we should just add a bunch of stuff to nolints.txt and fix it later?</p>\n<p>Also, <a href=\"https://github.com/leanprover-community/mathlib/runs/681449690#step:16:10\">some tests failed</a>.</p>",
        "id": 197817352,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589666561
    },
    {
        "content": "<p><code>int.int.sub_self</code>?</p>",
        "id": 197817609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589667002
    },
    {
        "content": "<p>also <code>int.int.eq_zero_or_eq_zero_of_mul_eq_zero</code></p>",
        "id": 197817625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589667024
    },
    {
        "content": "<p>why are we setting a bunch of lemmas as protected in mathlib rather than in core?</p>",
        "id": 197817632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589667046
    },
    {
        "content": "<p>There is obviously going to be a second \"cleanup phase\" to remove <code>init_</code> from mathlib, but I guess the intent is to delay that until after the initial version bump PR</p>",
        "id": 197817798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589667289
    },
    {
        "content": "<p>and probably lint cleanups should be delayed until then</p>",
        "id": 197817810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589667316
    },
    {
        "content": "<p>Where's <code>int.int.sub_self</code>? The linter didn't seem to catch that one: <a href=\"https://github.com/leanprover-community/mathlib/runs/681449690#step:14:121\">https://github.com/leanprover-community/mathlib/runs/681449690#step:14:121</a></p>",
        "id": 197817820,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589667358
    },
    {
        "content": "<p>It's mentioned by name in the <code>mk_protected</code> call</p>",
        "id": 197817861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589667380
    },
    {
        "content": "<p>it's in core</p>",
        "id": 197817864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589667393
    },
    {
        "content": "<p>Ah, yeah. Looks like they're both in <a href=\"https://github.com/leanprover-community/lean/blob/194cc8e2416b5969cfdab4006bb9e20cb75e5adc/library/init/data/int/order.lean#L941\"><code>int.dat.int.order</code></a>.</p>",
        "id": 197817943,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589667585
    },
    {
        "content": "<p>Should I release 3.13.1 with those fixed?</p>",
        "id": 197818069,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589667730
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/leanprover-community/lean/issues/245\">lean#245</a></p>",
        "id": 197818221,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589668058
    },
    {
        "content": "<p>what about the protected definitions?</p>",
        "id": 197818224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589668062
    },
    {
        "content": "<p>I could add that too if you think it's a good idea.</p>",
        "id": 197818270,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589668118
    },
    {
        "content": "<p>I do</p>",
        "id": 197818279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589668160
    },
    {
        "content": "<p>Johan has conveniently already made a list</p>",
        "id": 197818281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589668169
    },
    {
        "content": "<p>OK, I'll add it to this PR after dinner.</p>",
        "id": 197818286,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589668192
    },
    {
        "content": "<p>(I should have <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>'d it when he was asking about <code>mk_protected</code>)</p>",
        "id": 197818331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589668216
    },
    {
        "content": "<p>I wonder why <a href=\"https://github.com/leanprover-community/mathlib/pull/2697/commits/85ce04a7eb7705c98500d267d0baa3fc229e02ec#diff-0d60b2b0cf0a3c5c56123cb7124a73e3R3\">these int lemmas are in a list called \"nat_lemmas\"</a>...</p>",
        "id": 197822334,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589675447
    },
    {
        "content": "<p>Ah, I figured it out. <code>int.mul_pos</code> is already protected in core and <code>int.mul_le_mul</code> is in the second list, so those are supposed to be <code>nat.</code>.</p>",
        "id": 197822847,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589676518
    },
    {
        "content": "<p>What's the purpose of <code>int.mul_sub</code> and <code>int.sub_mul</code>? Can I delete them?</p>",
        "id": 197823442,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589677773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 197823445,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589677784
    },
    {
        "content": "<p>they are aliases</p>",
        "id": 197823496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589677879
    },
    {
        "content": "<p>I think <code>int.mul_sub_left_distrib</code> should just be renamed to <code>int.mul_sub</code></p>",
        "id": 197823510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589677908
    },
    {
        "content": "<p>we don't need aliases for specialized lemmas that will be superceded later</p>",
        "id": 197823549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589677926
    },
    {
        "content": "<p>OK, I'll just rename them. It's weird that they were made <code>def</code>s.</p>",
        "id": 197823570,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589677997
    },
    {
        "content": "<p>Lean is already <em>being</em> bumped to 3.13.0 on Nix unstable :'D, <a href=\"https://github.com/NixOS/nixpkgs/pull/88002/files\">https://github.com/NixOS/nixpkgs/pull/88002/files</a></p>",
        "id": 197824205,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589679129
    },
    {
        "content": "<p>I just added a comment there.</p>",
        "id": 197824625,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589679988
    },
    {
        "content": "<p>they are <code>def</code>s because you can skip the type if you do that</p>",
        "id": 197825797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589682002
    },
    {
        "content": "<p>mathlib has <code>alias</code> for this sort of thing</p>",
        "id": 197825826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589682019
    },
    {
        "content": "<p>Oh, OK. Makes sense. </p>\n<p><a href=\"https://github.com/leanprover-community/lean/issues/245\">lean#245</a> looks ready, by the way. Should I merge it and release 3.13.1, or do you think I should wait for Gabriel (even though it's the weekend)?</p>",
        "id": 197825885,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589682149
    },
    {
        "content": "<p>I think it should be okay to move forward with it. I'm working on the mathlib 3.13 cleanup and this will make things easier</p>",
        "id": 197827348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589684765
    },
    {
        "content": "<p>Great, I'll move forward then.</p>",
        "id": 197827358,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589684819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 3.13.1 has been released and the binaries are ready.</p>",
        "id": 197829402,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589688948
    },
    {
        "content": "<p>Thanks! Sorry for the double namespace issue.</p>",
        "id": 197831546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589692965
    },
    {
        "content": "<p>No problem! I'm preparing a nolints.txt locally and I'll push again when that's done.</p>",
        "id": 197831644,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589693171
    },
    {
        "content": "<p>I'm getting a simp loop:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_fn_coe_base</span><span class=\"o\">]:</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_add_monoid_hom</span><span class=\"o\">]:</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_fn_coe_base</span><span class=\"o\">]:</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_add_monoid_hom</span><span class=\"o\">]:</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_fn_coe_base</span><span class=\"o\">]:</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_add_monoid_hom</span><span class=\"o\">]:</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_fn_coe_base</span><span class=\"o\">]:</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">coe_add_monoid_hom</span><span class=\"o\">]:</span> <span class=\"err\">⇑↑</span><span class=\"n\">hnp</span> <span class=\"bp\">==&gt;</span> <span class=\"err\">⇑</span><span class=\"n\">hnp</span>\n</code></pre></div>\n\n\n<p>is this my fault, or was this present before 3.13?</p>",
        "id": 197832329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589694463
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 197832381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589694599
    },
    {
        "content": "<p>Why does it pick the wrong instance for coercion of <code>ring_hom</code> to function?</p>",
        "id": 197832427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589694652
    },
    {
        "content": "<p>Somehow it prefers the transitive instance to the explicit <code>has_coe_to_fun</code>.</p>",
        "id": 197832433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589694694
    },
    {
        "content": "<p>I'm rearranging theorems, so that might be my fault</p>",
        "id": 197832434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589694694
    },
    {
        "content": "<p>are you getting the transitive instance?</p>",
        "id": 197832438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589694714
    },
    {
        "content": "<p>Works for me in mathlib from 5 days ago</p>",
        "id": 197832480,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589694729
    },
    {
        "content": "<p>In current <code>master</code>: no</p>",
        "id": 197832484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589694741
    },
    {
        "content": "<p>where is the has_coe_to_fun instance?</p>",
        "id": 197832515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589694800
    },
    {
        "content": "<p>In <code>algebra.ring</code></p>",
        "id": 197832522,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589694814
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring.lean#L351\">here</a></p>",
        "id": 197832571,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589694870
    },
    {
        "content": "<p>Your MWE works for me in the 3.13 branch</p>",
        "id": 197832597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589694956
    },
    {
        "content": "<p>Hm, that is still there in the right order with other things</p>",
        "id": 197832598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589694957
    },
    {
        "content": "<p>well, it's broken on my current open-heart-surgery version of the file</p>",
        "id": 197832642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589695000
    },
    {
        "content": "<p>Here's a MWE that should work on the latest version of <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">is_unit</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_cast</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">split_ifs</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">units</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span> <span class=\"c1\">-- see Note [default priority]</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ancestor</span> <span class=\"n\">has_mul</span> <span class=\"n\">has_add</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">distrib</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ancestor</span> <span class=\"n\">has_mul</span> <span class=\"n\">has_zero</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">mul_zero_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ancestor</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">monoid</span> <span class=\"n\">distrib</span> <span class=\"n\">mul_zero_class</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">distrib</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul_zero_class</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ring_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→+*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rβ</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rβ</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_add_monoid_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rβ</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 197832781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589695274
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a> build fails somewhere in <code>_init</code>.</p>",
        "id": 197832928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589695553
    },
    {
        "content": "<p>I think that <code>has_coe_to_fun</code> instance in <code>master</code> has default priority, not 100.</p>",
        "id": 197832978,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589695606
    },
    {
        "content": "<p>BTW, it would be nice if Lean generated the <code>ancestor</code> information for <code>old_structure_cmd</code> classes.</p>",
        "id": 197833010,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589695677
    },
    {
        "content": "<p>I know <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a> is not done yet, but the files that are imported here should be working</p>",
        "id": 197833101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589695834
    },
    {
        "content": "<blockquote>\n<p>I think that <code>has_coe_to_fun</code> instance in master has default priority, not 100.</p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 197833265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589696209
    },
    {
        "content": "<p>brilliant, that did it</p>",
        "id": 197833479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589696599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/preparing.20for.20lean-3.2E13.2E0/near/197833010\">said</a>:</p>\n<blockquote>\n<p>BTW, it would be nice if Lean generated the <code>ancestor</code> information for <code>old_structure_cmd</code> classes.</p>\n</blockquote>\n<p>Indeed, it wasn't until I did the refactor that I even realized we are doing all this duplicate work</p>",
        "id": 197833528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589696650
    },
    {
        "content": "<p>it's very confusing having important attributes declared in completely different files from the declaration</p>",
        "id": 197833538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589696689
    },
    {
        "content": "<p>Currently <code>@[ancestor]</code> attributes are used, e.g., by <code>to_additive</code> to map functions like <code>group.to_monoid</code>.</p>",
        "id": 197833552,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589696753
    },
    {
        "content": "<p>What's the point of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/test/doc_commands.lean#L6\">this part of <code>test/doc_commands.lean</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- ok -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">division_ring</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n<span class=\"n\">ds</span> <span class=\"err\">←</span> <span class=\"n\">doc_string</span> <span class=\"bp\">``</span><span class=\"n\">division_ring</span><span class=\"o\">,</span>\n<span class=\"n\">guard</span> <span class=\"err\">$</span> <span class=\"n\">ds</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;ok&quot;</span>\n</code></pre></div>\n\n\n<p>The test is failing because <code>division_ring</code> is no longer automatically imported. </p>\n<p>Should I search for another random undocumented declaration from core to use or can I just delete this? The next part of the file adds a random <code>def foo</code> with no docstring and tests that, so I think we're not losing anything, unless the behavior is somehow really different for imported declarations.</p>",
        "id": 197833818,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589697252
    },
    {
        "content": "<p>I think that the test should not rely on a declaration being undocumented.</p>",
        "id": 197833871,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589697395
    },
    {
        "content": "<p>I mean, we should try to avoid assumptions like this.</p>",
        "id": 197833873,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589697415
    },
    {
        "content": "<p>Recently I had to fix a test in core because it assumed that no file in core has a module docstring.</p>",
        "id": 197833883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589697446
    },
    {
        "content": "<p>(and I added one module docstring)</p>",
        "id": 197833885,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589697466
    },
    {
        "content": "<p>OK, I agree. I'll just delete that part of the test.</p>",
        "id": 197833950,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589697537
    },
    {
        "content": "<p>Another test question, this time for <a href=\"https://github.com/leanprover-community/mathlib/blob/master/test/monotonicity.lean#L19\"><code>test/monotonicity.lean</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">monotonicity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ac_mono</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">monotonic context not found</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">h : 3 ≤ 4,</span>\n<span class=\"cm\">h&#39; : 5 ≤ 6</span>\n<span class=\"cm\">⊢ (1 + 3 + 2).sub 6 ≤ (4 + 2 + 1).sub 5</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>I think the fix is probably to add some more lemmas to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/basic.lean#L159\">the end of <code>tactic.monotonicity.basic</code></a>. Does anyone know off the top of their heads what I should add there?</p>",
        "id": 197834058,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589697759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ?</p>",
        "id": 197834066,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589697825
    },
    {
        "content": "<p>I wonder why it shows <code>-</code> as <code>a.sub b</code>. Is it possible that <code>mono</code> fails to understand that <code>int.sub</code> is the same as <code>add_group.sub</code>?</p>",
        "id": 197834178,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589697978
    },
    {
        "content": "<p>If yes, then it needs versions of <code>sub</code> lemmas for <code>int</code>.</p>",
        "id": 197834187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589698019
    },
    {
        "content": "<p>Adding <code>attribute [mono] int.sub_le_sub</code> didn't help, unfortunately.</p>",
        "id": 197834267,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589698152
    },
    {
        "content": "<p>Ah, you were on the right track. I added <code>int.sub</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/interactive.lean#L552\">here</a> and it fixed it. I wonder if that's enough.</p>",
        "id": 197834597,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589698749
    },
    {
        "content": "<p>Specifically: should I also add <code>nat.sub</code>?</p>",
        "id": 197834779,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589699050
    },
    {
        "content": "<p>I think that the answer is no because <code>int.sub</code> is <code>a + -b</code> while <code>nat.sub</code> is an inductive definition.</p>",
        "id": 197834909,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589699310
    },
    {
        "content": "<p>Ah, right. Looks like this example with nat subtraction doesn't work in my 3.11.0 playground, so I won't try to make it work with 3.13.1:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ac_mono</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">monotonic context not found</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">h : 3 + 6 ≤ 4 + 5</span>\n<span class=\"cm\">⊢ nat.sub (1 + 3 + 2) 6 ≤ nat.sub (4 + 2) 1 + 5</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 197835024,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589699524
    },
    {
        "content": "<p>I think that unfold directive should first make sure it's unfolding to <code>a + -b</code></p>",
        "id": 197835101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589699726
    },
    {
        "content": "<p>that is, it should not <code>unfold has_sub.sub</code> but rather <code>simp only [sub_eq_add_neg]</code></p>",
        "id": 197835109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589699756
    },
    {
        "content": "<p>When I replace that <code>dunfold ...</code> with <code>simp only [sub_eq_add_neg]</code>, the first example I posted (with ints) fails with</p>\n<div class=\"codehilite\"><pre><span></span><code>tactic failed, there are no goals to be solved\nstate:\nno goals\n</code></pre></div>",
        "id": 197835295,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589700040
    },
    {
        "content": "<p>It also doesn't help with the nat subtraction example.</p>",
        "id": 197835305,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589700088
    },
    {
        "content": "<p>Anyways, I'm done with <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a> for now. I think it should have a green check mark... <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 197835421,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589700253
    },
    {
        "content": "<p>In the first case I think that <code>simp only</code> performs some computations even if you don't ask it for this.</p>",
        "id": 197835441,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589700347
    },
    {
        "content": "<p>So this <code>simp only [sub_eq_add_neg]</code> solves the goal.</p>",
        "id": 197835480,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589700371
    },
    {
        "content": "<p><code>simp</code> will try <code>refl</code> and <code>trivial</code> afterwards, this might be the case here.</p>",
        "id": 197842599,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589712155
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a> indeed builds, should we try and merge it?</p>",
        "id": 197854388,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589729355
    },
    {
        "content": "<p>How does it interact with <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a>? I mean, isn't <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a> suppose to supercede <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a>?</p>",
        "id": 197855019,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589730276
    },
    {
        "content": "<p>And will merging <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a> break <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a>?</p>",
        "id": 197855033,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589730311
    },
    {
        "content": "<p>In fact, all the commits of <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a> are already integrated into <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a>, so there shouldn't be any problem. I say go ahead!</p>",
        "id": 197855112,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589730399
    },
    {
        "content": "<p>OK, let's go then.</p>",
        "id": 197855180,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589730506
    },
    {
        "content": "<p>Oh, I just realized that one of the areas I was most looking forward to refactoring as a result of the move, the stuff on order structures, was not included as part of the big move. Have we looked at giving the same treatment to the <code>preorder</code>, <code>partial_order</code>, <code>linear_order</code> classes in core?</p>",
        "id": 197866838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589746386
    },
    {
        "content": "<p>It was decided to postpone this to the next big refactor, to keep things vaguely under control.</p>",
        "id": 197867043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589746722
    },
    {
        "content": "<p>Presumably it's much easier than removing algebra because we don't have to worry about <code>norm_num</code>, right?</p>",
        "id": 197867048,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589746731
    },
    {
        "content": "<p>But you're very welcome to take the next step, at least assume we sorted out this copyright line question</p>",
        "id": 197867054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589746754
    },
    {
        "content": "<p>I haven't done much with the copyright line in <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a>, I'm just merging the author lists</p>",
        "id": 197867122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589746822
    },
    {
        "content": "<p>I didn't hear back from Leo</p>",
        "id": 197867432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589747376
    },
    {
        "content": "<p>The license says that what we're doing is ok though, as far as I can see</p>",
        "id": 197867443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589747395
    },
    {
        "content": "<p>There is no license issue, this is a politeness issue</p>",
        "id": 197867511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589747422
    },
    {
        "content": "<p>what is the politeness issue? The author lists are being preserved</p>",
        "id": 197867651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589747719
    },
    {
        "content": "<p>plus lean 3 is still there on <code>leanprover/lean</code> where it has always been</p>",
        "id": 197867656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589747747
    },
    {
        "content": "<p>Did the module doc change in 3.13.0 (<a href=\"https://github.com/leanprover-community/lean/issues/241\">lean#241</a>) cause module docs to stop showing up in the mathlib docs? Compare <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero.html\">https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero.html</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/f23c361/src/algebra/group_with_zero.lean\">https://github.com/leanprover-community/mathlib/blob/f23c361/src/algebra/group_with_zero.lean</a></p>",
        "id": 197870190,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589751496
    },
    {
        "content": "<p>Are there no tests in core for the module doc retrieval functions?</p>",
        "id": 197870227,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589751601
    },
    {
        "content": "<p>For reference, <a href=\"https://github.com/leanprover-community/mathlib_docs/commit/a0df3535d8110d6fe22e0d72634454cdf2318b4c#diff-388727afe2b8490b8049889aa610663dR228\">here's the diff</a> where module docs were removed (the commit corresponding to <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a>).</p>\n<p>There are two tests that mention <code>module_doc_strings</code> <a href=\"https://github.com/leanprover-community/lean/blob/master/tests/lean/doc_strings.lean\">1</a> <a href=\"https://github.com/leanprover-community/lean/blob/master/tests/lean/run/doc_string3.lean\">2</a> and they both passed. Is there something else to check?</p>",
        "id": 197872320,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589754640
    },
    {
        "content": "<p>Neither of those test that docs from earlier modules stick around. They're both assuming that no earlier imports have module docs (which makes them fragile tests).</p>",
        "id": 197872466,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589754891
    },
    {
        "content": "<p>Oh, I was looking at the wrong function. <code>module_doc_strings</code> only looks in the current file. </p>\n<p>Yes, <code>olean_doc_strings</code> isn't tested and seems to behave strangely now. </p>\n<p>Compare:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">olean_doc_strings</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">empty.lean:4:0: information trace output</span>\n<span class=\"cm\">[((some /Users/chb/.elan/toolchains/leanprover-community-lean-3.13.1/lib/lean/library/init/meta/case_tag.lean),</span>\n<span class=\"cm\">  [(⟨8, 0⟩, # General operations on functions),</span>\n<span class=\"cm\">   (⟨9, 0⟩,</span>\n<span class=\"cm\">    # Case tags</span>\n\n<span class=\"cm\">Case tags are an internal mechanism used by certain tactics to communicate with</span>\n<span class=\"cm\">each other. They are generated by the tactics `cases`, `induction` and</span>\n<span class=\"cm\">`with_cases` (&#39;cases-like tactics&#39;), which generate goals corresponding to the</span>\n<span class=\"cm\">&#39;cases&#39; of an inductive hypothesis. Each of these goals carries a case tag. They</span>\n<span class=\"cm\">are consumed by the `case` tactic, which focuses on one of these cases. Their</span>\n<span class=\"cm\">purpose is twofold:</span>\n\n<span class=\"cm\">1. Give intuitive names to case goals. For example, when performing induction on</span>\n<span class=\"cm\">   a natural number, two cases are generated: one tagged with `nat.zero` and</span>\n<span class=\"cm\">   one tagged with `nat.succ`. Users can then focus on e.g. the second goal with</span>\n<span class=\"cm\">   `case succ {...}`.</span>\n<span class=\"cm\">2. Communicate which new hypotheses were introduced by the cases-like tactic</span>\n<span class=\"cm\">   that generated the goal. For example, when performing induction on a</span>\n<span class=\"cm\">   `list α`, the `cons` case introduces two hypotheses corresponding to the two</span>\n<span class=\"cm\">   arguments of the `cons` constructor. `case` allows users to name these with</span>\n<span class=\"cm\">   `case cons : x xs {...}`. To perform this renaming, `case` needs to know</span>\n<span class=\"cm\">   which hypotheses to rename; this information is contained in the case tag for</span>\n<span class=\"cm\">   the `cons` goal.</span>\n\n<span class=\"cm\">## Module contents</span>\n\n<span class=\"cm\">This module defines</span>\n\n<span class=\"cm\">1. what a case tag is (see `case_tag`);</span>\n<span class=\"cm\">2. how to render a `case_tag` as a list of names (see `render`);</span>\n<span class=\"cm\">3. how to parse  a `case_tag` from a list of names (see `parse`);</span>\n<span class=\"cm\">4. how to match a `case_tag` with a sequence of names given by the user</span>\n<span class=\"cm\">   (see `match_tag`).)]),</span>\n<span class=\"cm\"> (none, [])]</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>If I add <code>import doc</code> where <code>doc.lean</code> contains just <code>/-! hi -/</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">doc</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">olean_doc_strings</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">empty.lean:4:0: information trace output</span>\n<span class=\"cm\">[((some /Users/chb/Documents/lean/my_project_2/src/doc.lean),</span>\n<span class=\"cm\">  [(⟨8, 0⟩, # General operations on functions),</span>\n<span class=\"cm\">   (⟨9, 0⟩,</span>\n<span class=\"cm\">    # Case tags</span>\n\n<span class=\"cm\">Case tags are an internal mechanism used by certain tactics to communicate with</span>\n<span class=\"cm\">each other. They are generated by the tactics `cases`, `induction` and</span>\n<span class=\"cm\">`with_cases` (&#39;cases-like tactics&#39;), which generate goals corresponding to the</span>\n<span class=\"cm\">&#39;cases&#39; of an inductive hypothesis. Each of these goals carries a case tag. They</span>\n<span class=\"cm\">are consumed by the `case` tactic, which focuses on one of these cases. Their</span>\n<span class=\"cm\">purpose is twofold:</span>\n\n<span class=\"cm\">1. Give intuitive names to case goals. For example, when performing induction on</span>\n<span class=\"cm\">   a natural number, two cases are generated: one tagged with `nat.zero` and</span>\n<span class=\"cm\">   one tagged with `nat.succ`. Users can then focus on e.g. the second goal with</span>\n<span class=\"cm\">   `case succ {...}`.</span>\n<span class=\"cm\">2. Communicate which new hypotheses were introduced by the cases-like tactic</span>\n<span class=\"cm\">   that generated the goal. For example, when performing induction on a</span>\n<span class=\"cm\">   `list α`, the `cons` case introduces two hypotheses corresponding to the two</span>\n<span class=\"cm\">   arguments of the `cons` constructor. `case` allows users to name these with</span>\n<span class=\"cm\">   `case cons : x xs {...}`. To perform this renaming, `case` needs to know</span>\n<span class=\"cm\">   which hypotheses to rename; this information is contained in the case tag for</span>\n<span class=\"cm\">   the `cons` goal.</span>\n\n<span class=\"cm\">## Module contents</span>\n\n<span class=\"cm\">This module defines</span>\n\n<span class=\"cm\">1. what a case tag is (see `case_tag`);</span>\n<span class=\"cm\">2. how to render a `case_tag` as a list of names (see `render`);</span>\n<span class=\"cm\">3. how to parse  a `case_tag` from a list of names (see `parse`);</span>\n<span class=\"cm\">4. how to match a `case_tag` with a sequence of names given by the user</span>\n<span class=\"cm\">   (see `match_tag`).),</span>\n<span class=\"cm\">   (⟨1, 0⟩, hey!)]),</span>\n<span class=\"cm\"> (none, [])]</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 197872929,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589755617
    },
    {
        "content": "<p><code>olean_doc_strings</code> was formerly tested, but <a href=\"https://github.com/leanprover-community/lean/commit/7a1c469847e41f4f7db98da1df522935081a321e#diff-7c31b477dab65b1070571727ca6b0dfe\">the test was removed</a> in <a href=\"https://github.com/leanprover-community/lean/issues/216\">lean#216</a>. </p>\n<p>Oh, this is the test that <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> mentioned <a href=\"#narrow/stream/113488-general/topic/preparing.20for.20lean-3.2E13.2E0/near/197833883\">earlier</a>. Not sure what the best solution would have been.</p>",
        "id": 197873309,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589756064
    },
    {
        "content": "<p>I guess a good test would be to read the output of <code>olean_doc_strings</code> and then check each of the files / locations that appear to see if the doc strings actually exist there. This is beyond my capabilities though.</p>\n<p>The issue as I understand it from my example above is that the module doc strings aren't being associated to the correct files. I'm not sure where to start with fixing <code>olean_doc_strings</code>.</p>",
        "id": 197873777,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589756503
    },
    {
        "content": "<p>How do I silence the <code>simp_nf</code> linter warning in <a href=\"https://github.com/leanprover-community/mathlib/runs/683541688\">https://github.com/leanprover-community/mathlib/runs/683541688</a> ? The message doesn't give any hints as to which lemma is bad</p>",
        "id": 197876171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589760036
    },
    {
        "content": "<p>This idiom is broken in 3.13:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_mul_iff_one_le_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">w</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">le_mul_iff_one_le_left</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>\n\n\n<p>Which is too bad, because I use this <em>a lot</em>. If you use <code>iff.mpr</code> instead of <code>(...).mpr</code> or <code>(...).2</code> then it works</p>",
        "id": 197876871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589760752
    },
    {
        "content": "<p>If you provide the type as in <code>@le_mul_iff_one_le_left nat _ _ _ h</code> then it works</p>",
        "id": 197876925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589760824
    },
    {
        "content": "<p>the fact that the theorem is stated with <code>&gt;</code> is a red herring, it does the same thing with <code>&lt;</code></p>",
        "id": 197876970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589760850
    },
    {
        "content": "<p>I manually fixed a couple of instances of this in <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a>, but the one above is apparently also causing <code>library_search</code> to fail to find this proof, which breaks one of the tests</p>",
        "id": 197877005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589760932
    },
    {
        "content": "<p>Do you know which commit broke this?</p>",
        "id": 197877193,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589761209
    },
    {
        "content": "<p>I imagine it was the speed up release (3.12?)</p>",
        "id": 197877206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589761258
    },
    {
        "content": "<p>I can make a test that works without any imports if you like</p>",
        "id": 197877217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589761299
    },
    {
        "content": "<p><code>test/lint.lean</code> is also failing, and I don't understand the test enough to fix it. Something to do with detecting typeclass inference loops</p>",
        "id": 197877277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589761389
    },
    {
        "content": "<p>Hmm, your example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_mul_iff_one_le_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">w</span>\n</code></pre></div>\n\n\n<p>works with current mathlib master for me.</p>",
        "id": 197877352,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589761494
    },
    {
        "content": "<p>Ah... nat isn't imported</p>",
        "id": 197877428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589761624
    },
    {
        "content": "<p>I'm pretty sure this is coming up in a real situation, but the library search test is broken for a more stupid reason</p>",
        "id": 197877440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589761678
    },
    {
        "content": "<p>Ok, try this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_field</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">mul_self_inj_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_self_inj_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"c1\">-- not ok</span>\n</code></pre></div>",
        "id": 197877627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589761938
    },
    {
        "content": "<p>Hmm, I'm getting errors at all of the underscores in both:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n<span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">45</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n<span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n<span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n<span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n<span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n<span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">46</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197877785,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589762230
    },
    {
        "content": "<p>hm, maybe it's another instance priority mixup</p>",
        "id": 197878022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589762680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/preparing.20for.20lean-3.2E13.2E0/near/197876171\">said</a>:</p>\n<blockquote>\n<p>How do I silence the <code>simp_nf</code> linter warning in <a href=\"https://github.com/leanprover-community/mathlib/runs/683541688\">https://github.com/leanprover-community/mathlib/runs/683541688</a> ? The message doesn't give any hints as to which lemma is bad</p>\n</blockquote>\n<p>I'm not really sure, but do we need to have the <code>division_field</code> versions of these lemmas if they are provable using their <code>group_with_zero</code> counterparts?</p>",
        "id": 197878069,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589762752
    },
    {
        "content": "<p>Does <code>have := (mul_self_inj_of_nonneg _ (mul_nonneg _ _)),</code> work for you?</p>",
        "id": 197878109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589762774
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_field</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_self_inj_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">empty.lean:7:0: error</span>\n<span class=\"cm\">tactic failed, there are unsolved goals</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">9 goals</span>\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α,</span>\n<span class=\"cm\">this : ?m_3 * ?m_3 = ?m_4 * ?m_5 * (?m_4 * ?m_5) ↔ ?m_3 = ?m_4 * ?m_5</span>\n<span class=\"cm\">⊢ c = a * b</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ Type ?</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ linear_ordered_field ?m_1</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_1</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_1</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_1</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ 0 ≤ ?m_3</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_3 ≥ 0</span>\n\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_3 ≥ 0</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197878121,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589762854
    },
    {
        "content": "<p>We should just delete the <code>division_ring</code> versions of the lemmas, but I was hoping to leave that until the next PR</p>",
        "id": 197878123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589762867
    },
    {
        "content": "<p>You could just remove the <code>@[simp]</code> from them then.</p>",
        "id": 197878164,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589762884
    },
    {
        "content": "<p>I get</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_self_inj_of_nonneg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_nonneg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_8</span> <span class=\"err\">?</span><span class=\"n\">m_9</span> <span class=\"err\">?</span><span class=\"n\">m_10</span> <span class=\"err\">?</span><span class=\"n\">m_11</span> <span class=\"err\">?</span><span class=\"n\">m_12</span> <span class=\"err\">?</span><span class=\"n\">m_13</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_nonneg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"err\">?</span><span class=\"n\">m_7</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ge</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_cancel_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)))</span>\n       <span class=\"err\">?</span><span class=\"n\">m_4</span>\n       <span class=\"err\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">))))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">no_zero_divisors</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_no_zero_divisors</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)))))</span>\n    <span class=\"err\">?</span><span class=\"n\">m_4</span>\n</code></pre></div>",
        "id": 197878174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589762907
    },
    {
        "content": "<p>Prepare for <code>pp.all</code> spam:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_field</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_self_inj_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">empty.lean:8:0: error</span>\n<span class=\"cm\">tactic failed, there are unsolved goals</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">9 goals</span>\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α,</span>\n<span class=\"cm\">this :</span>\n<span class=\"cm\">  iff</span>\n<span class=\"cm\">    (@eq.{?l_2+1} ?m_3</span>\n<span class=\"cm\">       (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@no_zero_divisors.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@domain.to_no_zero_divisors.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@division_ring.to_domain.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@field.to_division_ring.{?l_2} ?m_3 (@linear_ordered_field.to_field.{?l_2} ?m_3 ?m_4)))))</span>\n<span class=\"cm\">          ?m_5</span>\n<span class=\"cm\">          ?m_5)</span>\n<span class=\"cm\">       (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@no_zero_divisors.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@domain.to_no_zero_divisors.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@division_ring.to_domain.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@field.to_division_ring.{?l_2} ?m_3 (@linear_ordered_field.to_field.{?l_2} ?m_3 ?m_4)))))</span>\n<span class=\"cm\">          (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@mul_zero_class.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@semiring.to_mul_zero_class.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@ordered_semiring.to_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                         (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                            (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4))))))</span>\n<span class=\"cm\">             ?m_6</span>\n<span class=\"cm\">             ?m_7)</span>\n<span class=\"cm\">          (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@mul_zero_class.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@semiring.to_mul_zero_class.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@ordered_semiring.to_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                         (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                            (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4))))))</span>\n<span class=\"cm\">             ?m_6</span>\n<span class=\"cm\">             ?m_7)))</span>\n<span class=\"cm\">    (@eq.{?l_2+1} ?m_3 ?m_5</span>\n<span class=\"cm\">       (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@mul_zero_class.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@semiring.to_mul_zero_class.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@ordered_semiring.to_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                         (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4))))))</span>\n<span class=\"cm\">          ?m_6</span>\n<span class=\"cm\">          ?m_7))</span>\n<span class=\"cm\">⊢ @eq.{?l_1+1} α c</span>\n<span class=\"cm\">    (@has_mul.mul.{?l_1} α</span>\n<span class=\"cm\">       (@no_zero_divisors.to_has_mul.{?l_1} α</span>\n<span class=\"cm\">          (@domain.to_no_zero_divisors.{?l_1} α</span>\n<span class=\"cm\">             (@division_ring.to_domain.{?l_1} α</span>\n<span class=\"cm\">                (@field.to_division_ring.{?l_1} α (@linear_ordered_field.to_field.{?l_1} α _inst_1)))))</span>\n<span class=\"cm\">       a</span>\n<span class=\"cm\">       b)</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ Type ?l_2</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ linear_ordered_field.{?l_2} ?m_3</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_2</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_2</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_2</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ @has_le.le.{?l_2} ?m_3</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@ordered_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                         (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4))))))))</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@no_zero_divisors.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@domain.to_no_zero_divisors.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@division_ring.to_domain.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@field.to_division_ring.{?l_2} ?m_3 (@linear_ordered_field.to_field.{?l_2} ?m_3 ?m_4))))))</span>\n<span class=\"cm\">    ?m_5</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ @ge.{?l_2} ?m_3</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@ordered_cancel_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4)))))))</span>\n<span class=\"cm\">    ?m_5</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4)))))))</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ @ge.{?l_2} ?m_3</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@ordered_cancel_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4)))))))</span>\n<span class=\"cm\">    ?m_5</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                (@ordered_ring.to_ordered_semiring.{?l_2} ?m_3</span>\n<span class=\"cm\">                   (@linear_ordered_ring.to_ordered_ring.{?l_2} ?m_3</span>\n<span class=\"cm\">                      (@linear_ordered_field.to_linear_ordered_ring.{?l_2} ?m_3 ?m_4)))))))</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197878241,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589763026
    },
    {
        "content": "<p>hm, could you send me one more test:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_self_inj_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{}),</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- solve1 tactic failed, focused goal has not been solved</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"c1\">-- α : Type ?l_1,</span>\n<span class=\"c1\">-- _inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"c1\">-- a b c : α,</span>\n<span class=\"c1\">-- this :</span>\n<span class=\"c1\">--   @ge.{?l_2} ?m_3</span>\n<span class=\"c1\">--     (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"c1\">--        (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"c1\">--           (@ordered_cancel_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"c1\">--              (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"c1\">--     (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"c1\">--        (@mul_zero_class.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"c1\">--           (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4)))</span>\n<span class=\"c1\">--        ?m_5</span>\n<span class=\"c1\">--        ?m_6)</span>\n<span class=\"c1\">--     (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"c1\">--        (@mul_zero_class.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"c1\">--           (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"c1\">-- ⊢ @has_le.le.{?l_7} ?m_8</span>\n<span class=\"c1\">--     (@preorder.to_has_le.{?l_7} ?m_8</span>\n<span class=\"c1\">--        (@partial_order.to_preorder.{?l_7} ?m_8</span>\n<span class=\"c1\">--           (@ordered_add_comm_group.to_partial_order.{?l_7} ?m_8</span>\n<span class=\"c1\">--              (@ordered_ring.to_ordered_add_comm_group.{?l_7} ?m_8</span>\n<span class=\"c1\">--                 (@linear_ordered_ring.to_ordered_ring.{?l_7} ?m_8</span>\n<span class=\"c1\">--                    (@linear_ordered_field.to_linear_ordered_ring.{?l_7} ?m_8 ?m_9))))))</span>\n<span class=\"c1\">--     (@has_zero.zero.{?l_7} ?m_8</span>\n<span class=\"c1\">--        (@no_zero_divisors.to_has_zero.{?l_7} ?m_8</span>\n<span class=\"c1\">--           (@integral_domain.to_no_zero_divisors.{?l_7} ?m_8</span>\n<span class=\"c1\">--              (@field.to_integral_domain.{?l_7} ?m_8 (@linear_ordered_field.to_field.{?l_7} ?m_8 ?m_9)))))</span>\n<span class=\"c1\">--     ?m_10</span>\n</code></pre></div>",
        "id": 197878536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589763346
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_field</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_self_inj_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{}),</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">empty.lean:7:40: error</span>\n<span class=\"cm\">solve1 tactic failed, focused goal has not been solved</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α,</span>\n<span class=\"cm\">this :</span>\n<span class=\"cm\">  @ge.{?l_2} ?m_3</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@ordered_cancel_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"cm\">    (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4)))</span>\n<span class=\"cm\">       ?m_5</span>\n<span class=\"cm\">       ?m_6)</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"cm\">⊢ @has_le.le.{?l_7} ?m_8</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_7} ?m_8</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_7} ?m_8</span>\n<span class=\"cm\">          (@ordered_add_comm_monoid.to_partial_order.{?l_7} ?m_8</span>\n<span class=\"cm\">             (@ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid.{?l_7} ?m_8</span>\n<span class=\"cm\">                (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_7} ?m_8</span>\n<span class=\"cm\">                   (@ordered_ring.to_ordered_semiring.{?l_7} ?m_8</span>\n<span class=\"cm\">                      (@linear_ordered_ring.to_ordered_ring.{?l_7} ?m_8</span>\n<span class=\"cm\">                         (@linear_ordered_field.to_linear_ordered_ring.{?l_7} ?m_8 ?m_9))))))))</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_7} ?m_8</span>\n<span class=\"cm\">       (@no_zero_divisors.to_has_zero.{?l_7} ?m_8</span>\n<span class=\"cm\">          (@domain.to_no_zero_divisors.{?l_7} ?m_8</span>\n<span class=\"cm\">             (@division_ring.to_domain.{?l_7} ?m_8</span>\n<span class=\"cm\">                (@field.to_division_ring.{?l_7} ?m_8 (@linear_ordered_field.to_field.{?l_7} ?m_8 ?m_9))))))</span>\n<span class=\"cm\">    ?m_10</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">7 goals</span>\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α,</span>\n<span class=\"cm\">this :</span>\n<span class=\"cm\">  @ge.{?l_2} ?m_3</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@ordered_cancel_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"cm\">    (@has_mul.mul.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_mul.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4)))</span>\n<span class=\"cm\">       ?m_5</span>\n<span class=\"cm\">       ?m_6)</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"cm\">⊢ @eq.{?l_1+1} α c</span>\n<span class=\"cm\">    (@has_mul.mul.{?l_1} α</span>\n<span class=\"cm\">       (@no_zero_divisors.to_has_mul.{?l_1} α</span>\n<span class=\"cm\">          (@domain.to_no_zero_divisors.{?l_1} α</span>\n<span class=\"cm\">             (@division_ring.to_domain.{?l_1} α</span>\n<span class=\"cm\">                (@field.to_division_ring.{?l_1} α (@linear_ordered_field.to_field.{?l_1} α _inst_1)))))</span>\n<span class=\"cm\">       a</span>\n<span class=\"cm\">       b)</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ Type ?l_2</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ordered_semiring.{?l_2} ?m_3</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_2</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ ?m_2</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ @ge.{?l_2} ?m_3</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@ordered_cancel_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"cm\">    ?m_5</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4))))</span>\n\n<span class=\"cm\">α : Type ?l_1,</span>\n<span class=\"cm\">_inst_1 : linear_ordered_field.{?l_1} α,</span>\n<span class=\"cm\">a b c : α</span>\n<span class=\"cm\">⊢ @ge.{?l_2} ?m_3</span>\n<span class=\"cm\">    (@preorder.to_has_le.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@partial_order.to_preorder.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@ordered_cancel_add_comm_monoid.to_partial_order.{?l_2} ?m_3</span>\n<span class=\"cm\">             (@ordered_semiring.to_ordered_cancel_add_comm_monoid.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"cm\">    ?m_5</span>\n<span class=\"cm\">    (@has_zero.zero.{?l_2} ?m_3</span>\n<span class=\"cm\">       (@mul_zero_class.to_has_zero.{?l_2} ?m_3</span>\n<span class=\"cm\">          (@semiring.to_mul_zero_class.{?l_2} ?m_3 (@ordered_semiring.to_semiring.{?l_2} ?m_3 ?m_4))))</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197879012,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589763796
    },
    {
        "content": "<p>Hm, it appears that the typeclass solutions have indeed changed, but it's not clear to me how this unification problem is supposed to succeed in the first place</p>",
        "id": 197879429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589764298
    },
    {
        "content": "<p>I get it now. Here is the unification problem on master:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">)))))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_add_comm_monoid</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_semiring</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_ring</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">)))))))))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n\n\n<p>and here is the new version</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">)))))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_add_comm_group</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ordered_ring</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">)))))))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n\n\n<p>The original one works because <code>ordered_semiring</code> is in the chain of instances from <code>linear_ordered_field</code> to <code>has_le</code>. In the new path it goes via <code>ordered_ring -&gt; ordered_add_comm_group -&gt; ...</code> and skips <code>ordered_semiring</code>. It's a bit disturbing that elaboration depends on which of many defeq paths is found by typeclass inference, and while I think it would be possible to recover the original path I think there are other examples that would break on master and don't break with the new ordering</p>",
        "id": 197880033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589765049
    },
    {
        "content": "<p>Will things get better in Lean 4?</p>",
        "id": 197880110,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589765188
    },
    {
        "content": "<p>this seems like a pretty messy elaboration order problem, so I wouldn't be surprised if the answer is no</p>",
        "id": 197880131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589765250
    },
    {
        "content": "<p>The fact that everything in sight is an <code>old_structure_cmd</code> is also a contributing factor, I think</p>",
        "id": 197880180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589765287
    },
    {
        "content": "<p>If these structures were neatly nested you would be guaranteed to have one fit in the other</p>",
        "id": 197880197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589765326
    },
    {
        "content": "<p>but on the other hand that doesn't reflect the reality of the situation - algebraic classes do not form a tree, there are diamonds and so instances that work by deconstructing the input into pieces and rebuilding a new structure are necessary</p>",
        "id": 197880216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589765401
    },
    {
        "content": "<p>I removed the test because <a href=\"https://github.com/leanprover-community/lean/pull/216#issuecomment-625093651\">it tested that no files in core have module docstrings</a>. Possibly a better approach would be to create another file, <code>import</code> it, and filter docstrings from this file only.</p>",
        "id": 197880270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589765429
    },
    {
        "content": "<p>So... 3.13 created a big mess? But is everything cleaned up now?</p>",
        "id": 197890772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589779902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do classify the problematic behaviour as a regression?</p>",
        "id": 197890819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589779952
    },
    {
        "content": "<p>I think it's revealing a dependence on the order of instances. The new order isn't better or worse, but it is different and that breaks some existing proofs</p>",
        "id": 197891284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589780723
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a> is ready now</p>",
        "id": 197891337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589780792
    },
    {
        "content": "<p>I removed some unneeded <code>[to_additive]</code> attributes.</p>",
        "id": 197893372,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589783165
    },
    {
        "content": "<p><code>to_additive</code> automatically maps structure fields and projections. It needs <code>ancestor</code> attrs to deal with <code>old_structure_cmd</code> projections.</p>",
        "id": 197893420,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589783244
    },
    {
        "content": "<p>And it doesn't need to map <code>has_mul.mk</code> to <code>has_add.mk</code> because it maps prefixes, not full names.</p>",
        "id": 197893445,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589783271
    },
    {
        "content": "<p>That's great. I don't recall when <code>ancestor</code> was added and exactly what its scope is.</p>",
        "id": 197893590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589783378
    },
    {
        "content": "<p>I think lean now has hooks for adding <code>structure</code>s, so perhaps it might even be possible to create <code>add_group</code> itself using <code>to_additive</code></p>",
        "id": 197893653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589783427
    },
    {
        "content": "<p>When I was rewriting <code>to_additive</code>, <code>ancestor</code> was already here.</p>",
        "id": 197893655,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589783432
    },
    {
        "content": "<p>You mean adding <code>structure</code>s with all <code>mk</code>/<code>rec</code>/whatever?</p>",
        "id": 197893666,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589783460
    },
    {
        "content": "<p>I mean creating the <code>structure</code> input data, letting lean do the hard work of creating projections and all that</p>",
        "id": 197893684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589783496
    },
    {
        "content": "<p>I could be mistaken though. I know we added it for <code>inductive</code> but I forget if a hook for <code>structure</code> was also added</p>",
        "id": 197893748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589783566
    },
    {
        "content": "<p>I think <code>ancestor</code> was introduced for the purpose of <code>subtype_instance</code></p>",
        "id": 197900187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589787913
    },
    {
        "content": "<p>Skimming over this thread:</p>\n<ul>\n<li>The doc string bug is still open, right?  I'll get to it now.</li>\n<li>There was a simp_nf linter bug, a type class inference bug, and something else?  If these are still issues, please file bugs / <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> here.</li>\n</ul>",
        "id": 197903863,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589790373
    },
    {
        "content": "<p>I think the only bug is the doc string bug. The other things mentioned are just issues that came up with merging algebra together in <a href=\"https://github.com/leanprover-community/mathlib/issues/2707\">#2707</a>.</p>",
        "id": 197904017,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589790473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> One more quesion: how do I copy an attribute like <code>no_rsimp</code> or <code>ematch</code>? <code>tactic.copy_attribute</code> doesn't work.</p>",
        "id": 197904414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589790675
    },
    {
        "content": "<p>I think you need to use <code>user_attribute</code> for this.  Look at <code>mk_hinst_lemma_attr_set</code> how the ematch attribute is defined.</p>",
        "id": 197904843,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589790951
    },
    {
        "content": "<p>I also found an issue with typeclass inference, unrelated to the move to 3.13 though. Issue filed at <a href=\"https://github.com/leanprover-community/lean/issues/244\">https://github.com/leanprover-community/lean/issues/244</a></p>",
        "id": 197905543,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589791450
    },
    {
        "content": "<p>Discussion at <a href=\"#narrow/stream/116395-maths/topic/Normed.20spaces/near/197786186\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Normed.20spaces/near/197786186</a></p>",
        "id": 197905767,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589791620
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/249\">lean#249</a>, are there any other high priority fixes we should include in 3.13.2?</p>",
        "id": 197910230,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589794323
    },
    {
        "content": "<p>I'm not aware of any</p>",
        "id": 197911151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589794934
    },
    {
        "content": "<p>Neither am I.</p>",
        "id": 197911669,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589795306
    },
    {
        "content": "<p>Thanks for the quick fix, Gabriel!</p>",
        "id": 197943144,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589812461
    },
    {
        "content": "<p>The docs should hopefully be fixed in 15-20 minutes.</p>\n<p><strong>Edit</strong>: The module doc strings are back! <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero.html\">https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero.html</a></p>",
        "id": 197943322,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589812547
    },
    {
        "content": "<p>Leo said:</p>\n<blockquote>\n<p>Yes, the Apache license used in Lean allows anybody to copy files from Lean to other projects if they keep the copyright notice. I am not unhappy or happy with the idea of moving Lean3 files to mathlib.</p>\n</blockquote>",
        "id": 197945840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589813604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/preparing.20for.20lean-3.2E13.2E0/near/197866838\">said</a>:</p>\n<blockquote>\n<p>Oh, I just realized that one of the areas I was most looking forward to refactoring as a result of the move, the stuff on order structures, was not included as part of the big move. Have we looked at giving the same treatment to the <code>preorder</code>, <code>partial_order</code>, <code>linear_order</code> classes in core?</p>\n</blockquote>\n<p>Is this just a matter of removing <code>init.algebra.order</code>? Should <code>init.algebra.classes</code> be cleaned up somehow too?</p>",
        "id": 198572787,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590308553
    },
    {
        "content": "<p>If nothing in core breaks, yes</p>",
        "id": 198573966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590310714
    },
    {
        "content": "<p>It is likely though that some order theorems will be used over nat and int, and these need specialized versions or alternate proofs</p>",
        "id": 198573976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590310744
    }
]