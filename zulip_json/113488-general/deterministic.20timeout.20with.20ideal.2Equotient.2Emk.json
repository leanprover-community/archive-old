[
    {
        "content": "<p>I am getting a deterministic timeout when I try to state <code>ideal.quotient.mk (ideal.span (singleton (C r))) p = 0</code> in the context of an integral domain. <br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has constructed a minimal example here : <a href=\"https://github.com/chocolatier/theoremproving/blob/master/src/timeout-mwe.lean\" target=\"_blank\" title=\"https://github.com/chocolatier/theoremproving/blob/master/src/timeout-mwe.lean\">https://github.com/chocolatier/theoremproving/blob/master/src/timeout-mwe.lean</a> , And done some debugging work. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">timeout</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)))</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>times out, but  replacing <code>integral_domain α</code>with <code>comm_ring α</code>makes it work. Setting <code>trace.class_instances true</code> shows that the type class resolution is going crazy in the integral domain case.</p>\n<p>Specifically, it is trying to find an instance of <code>has_zero</code> but it gets stuck in the path that searches for <code>@no_zero_divisors.to_has_zero</code>, and never tries any other branch. </p>\n<p>I'm not sure why this is happening or how to fix it.</p>",
        "id": 159684489,
        "sender_full_name": "Aditya Agarwal",
        "timestamp": 1551424846
    },
    {
        "content": "<p>did you try increasing the instance depth?</p>",
        "id": 159684512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551424895
    },
    {
        "content": "<p>I've tried </p>\n<div class=\"codehilite\"><pre><span></span>set_option class.instance_max_depth 1000000\n</pre></div>\n\n\n<p>but it still times out.</p>",
        "id": 159684740,
        "sender_full_name": "Aditya Agarwal",
        "timestamp": 1551425219
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, do you know what could be going on here?</p>",
        "id": 159970925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551752844
    },
    {
        "content": "<p>does <code>ideal.span</code> take two arguments?</p>",
        "id": 159970934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551752875
    },
    {
        "content": "<p>what is <code>singleton</code>?</p>",
        "id": 159970950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551752882
    },
    {
        "content": "<p>There's a gist of the typeclass resolution for <code>0</code> on the rhs going nuts here: <a href=\"https://gist.githubusercontent.com/semorrison/fc7fd83ee0da4a875db083c01ef7a0fc/raw/80e4adb669a5be6a9b4e602972e48d0d054bae1d/gistfile1.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/semorrison/fc7fd83ee0da4a875db083c01ef7a0fc/raw/80e4adb669a5be6a9b4e602972e48d0d054bae1d/gistfile1.txt\">https://gist.githubusercontent.com/semorrison/fc7fd83ee0da4a875db083c01ef7a0fc/raw/80e4adb669a5be6a9b4e602972e48d0d054bae1d/gistfile1.txt</a></p>",
        "id": 159971005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551752957
    },
    {
        "content": "<p>I'm half convinced that ideal isn't the problem, polynomial is</p>",
        "id": 159971012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551752987
    },
    {
        "content": "<p>I have no idea why it doesn't work</p>",
        "id": 159971250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551753283
    }
]