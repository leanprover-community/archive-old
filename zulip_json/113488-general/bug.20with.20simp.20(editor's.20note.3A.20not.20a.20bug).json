[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import algebra.linear_algebra.basic\n\nvariables (α β : Type) [ring α] [module α β]\n\nexample (v : lc α β) (h : v 0 = 0) : sorry :=\nbegin\n  simp [lc] at v,\nend\n</pre></div>",
        "id": 123327630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1520299278
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>α β : Type,\n_inst_1 : ring α,\n_inst_2 : module α β,\nv : lc α β,\nh : ⇑v 0 = 0,\nv : β →₀ α\n⊢ sorry\n</pre></div>",
        "id": 123327634,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1520299292
    },
    {
        "content": "<p>the bug is that it creates another <code>v</code></p>",
        "id": 123327637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1520299298
    },
    {
        "content": "<p>I think it has to do with the fact that the hypothesis <code>h</code> depends on <code>v</code>, but I'm not sure what you're supposed to do about that</p>",
        "id": 123328368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1520300818
    },
    {
        "content": "<p><code>dsimp</code> works</p>",
        "id": 123328469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1520301003
    },
    {
        "content": "<p>Yeah, this is not a bug. The new <code>v</code> cannot necessarily take the place of the old <code>v</code> in <code>h</code></p>",
        "id": 123330492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520304884
    },
    {
        "content": "<p><code>dsimp</code> allows this because the rewrite is definitional, so the new <code>v</code> has the same type as the old one, but if it's merely a propositionally equal type, then you may have to replace <code>v</code> with <code>cast v &lt;ugly proof&gt;</code> in uses of <code>v</code></p>",
        "id": 123330505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520304943
    },
    {
        "content": "<p>It would be nice if there was either a mode for simp, or just a cousin, that was much more aggressive about replacing later appearances of the simplified hypothesis, even if it required casts. I run into this fairly often.</p>",
        "id": 123335508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520313938
    },
    {
        "content": "<p>Very often a step or two later the cast itself becomes easy to simplify, and you're back on safe ground.</p>",
        "id": 123335548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520313972
    },
    {
        "content": "<p>I think you can achieve this effect by reverting the dependent hypotheses</p>",
        "id": 123335626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520314179
    },
    {
        "content": "<p>But in my experience <code>cast</code>s are a pain to get rid of. What kind of proof strategy causes them to be \"easy to simplify\"?</p>",
        "id": 123337049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520317193
    },
    {
        "content": "<p>At some point I'll try to come up with a full example. But I've certainly found situations where \"almost trivial\" lemmas such as </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">parallel_transport_for_trivial_bundles</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>cause <code>@eq.rec</code>s to vanish away again. Right now I have to deal with some jet lag.</p>",
        "id": 123337471,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520318033
    }
]