[
    {
        "content": "<p>Recently, we discussed that we should move from using <code>[setoid α]</code> to <code>{s : setoid α}</code> or <code>{r : α → α → Prop} [is_equiv r]</code>. Another idea was to allow reusing the notation <code>⟦x⟧</code> for other functions. What do you think about this typeclass?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_quotient_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">surjective_mk</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">mk</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⟦`</span> <span class=\"n\">x</span> <span class=\"bp\">`⟧`</span> <span class=\"o\">:=</span> <span class=\"n\">has_quotient_map.mk</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Note that <code>α</code> is an <code>out_param</code>, so Lean will find out the type of <code>x</code> from the type of <code>⟦x⟧</code> but not vice versa (which makes sense).</p>",
        "id": 271927171,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644900931
    },
    {
        "content": "<p>Will this fit well with the port to lean 4?</p>\n<p>I've just spent a few days trying to teach quotients (anyone interested can check out the last four videos I uploaded to YouTube and my course repo) and this whole setoid class thing makes it quite complicated. Two examples which work really well are making Z mod 37 from Z and making Z from N x N. But the moment you try and do something like quotient groups (which depend on a parameter) then type class inference can't pick up the setoid because it depends on a parameter and you end up in this weird situation where sometimes the tactic state says your equivalence relation is R N (the definition you wrote which depends on the parameter N), sometimes it's setoid.r and sometimes it's ≈ (and writing helper lemmas involves @ everywhere). I was trying to make a worksheet for the students on quotient groups (something which they might definitely want to attempt as part of a project) and (for the first time in my course) I actually just gave up. It's such a mess. Any change which makes notation more likely to work in the situation where we can't have a setoid instance would get a big thumbs up from me</p>",
        "id": 271934162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644908827
    },
    {
        "content": "<p>If you like you could regard quotient groups as some kind of test -- can you make them from first principles using simple tactic proofs and make the result comprehensible to someone who's read the relevant chapter of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> (because I couldn't)</p>",
        "id": 271934420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644909107
    },
    {
        "content": "<blockquote>\n<p>Another idea was to allow reusing the notation ⟦x⟧ for other functions. What do you think about this typeclass?</p>\n</blockquote>\n<p>First of all, note that Lean 4 no longer includes this global notation.  We could remove it in Lean 3 core as well.  Same goes for backporting the <code>{s : Setoid α}</code> change.</p>\n<p>If we add a type class for <code>⟦⟧</code>, it might be worth it to also use it for <code>free_group.of</code> and co.</p>",
        "id": 271947857,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644917707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/quotient.20refactor/near/271947857\">said</a>:</p>\n<blockquote>\n<p>If we add a type class for <code>⟦⟧</code>, it might be worth it to also use it for <code>free_group.of</code> and co.</p>\n</blockquote>\n<p>So, the surjectivity assumption should be in a separate typeclass. BTW, why <code>⟦⟧</code>, not <code>coe</code>, for <code>free_group.of</code>?</p>",
        "id": 271970564,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644930331
    },
    {
        "content": "<p>That would create a diamond for a free group over nat</p>",
        "id": 271971843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644931015
    },
    {
        "content": "<p>Indeed</p>",
        "id": 271975463,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644932905
    },
    {
        "content": "<p>Then we can't use \"quotient\" in the name.  Any suggestions?</p>",
        "id": 271978452,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644934175
    },
    {
        "content": "<p><code>has_mk</code>? Not sure if serious</p>",
        "id": 271978844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644934327
    },
    {
        "content": "<p>I was about to say <code>has_canonical_mk</code> but that’s not better x)</p>",
        "id": 271979029,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1644934403
    },
    {
        "content": "<p>Would <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_algebra\">docs#free_algebra</a>.ι and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_algebra\">docs#tensor_algebra</a>.ι etc be change to use that typeclass too? Or do we reserve <code>⟦⟧</code> for surjective maps? (edit: linkifier doesn't like those)</p>",
        "id": 271985884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644937112
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.of\">docs#free_group.of</a> is definitely not surjective</p>",
        "id": 271986398,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644937300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/quotient.20refactor/near/271978844\">said</a>:</p>\n<blockquote>\n<p><code>has_mk</code>? Not sure if serious</p>\n</blockquote>\n<p>I like this..</p>",
        "id": 271987573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644937794
    },
    {
        "content": "<p>And I would also be very much in favor of using the <code>mk</code> notation for all examples of applying the unit of some adjunction in algebraic contexts (the free group, free algebra, tensor algebra are all examples)</p>",
        "id": 271988028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644938010
    },
    {
        "content": "<p>Conceptually it makes sense to group together all the examples mentioned so far (they are colimit/left adjoint-type constructions, that receive a map <code>mk</code> from the original data). <span aria-label=\"snail\" class=\"emoji emoji-1f40c\" role=\"img\" title=\"snail\">:snail:</span></p>",
        "id": 271988063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644938025
    },
    {
        "content": "<p>And often <code>⟦⟧</code> will imitate the normal math notation, e.g. if you consider the free group on the elements of a group, then one writes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>g</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[g]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> for the generator of the free group to distinguish <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>g</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>h</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[g][h]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">]</span></span></span></span> from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>g</mi><mi>h</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[gh]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 271988212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644938063
    },
    {
        "content": "<p>I suggest the following migration path:</p>\n<ol>\n<li>Drop <code>⟦⟧</code> notation in the core, replace it with something else (e.g., <code>⟬ ⟭</code>). The new notation is to be removed once migration is done.</li>\n<li>Add <code>has_mk</code> as described above. Build a theory around this notation in mathlib.</li>\n<li>Gradually migrate from <code>quotient.mk'</code> to <code>has_mk</code> with new API. Possibly, replace some invisible coercions with visible <code>has_mk.mk</code>. E.g., I think that <code>⟦x⟧</code> looks better than an arrow for the quotient group but we can discuss this later.</li>\n<li>Drop notation for <code>quotient.mk</code>.</li>\n</ol>",
        "id": 272117293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645019274
    },
    {
        "content": "<blockquote>\n<p>replace it with something else (e.g., ⟬ ⟭).</p>\n</blockquote>\n<p>Just <code>mk</code> should be enough.  I don't think it's worth introducing a new notation for it.  Lean 4 doesn't have it either.</p>",
        "id": 272117677,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645019464
    },
    {
        "content": "<p>We use it at least 500 times in mathlib.</p>",
        "id": 272118111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645019698
    },
    {
        "content": "<p>But in mathlib we have <code>has_mk</code>, right?</p>",
        "id": 272118213,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645019753
    },
    {
        "content": "<p>We will but I want the first PR to be very simple.</p>",
        "id": 272118328,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645019804
    },
    {
        "content": "<p>Another option is to use a local notation for <code>quotient.mk</code> while we do the migration.</p>",
        "id": 272118450,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645019861
    }
]