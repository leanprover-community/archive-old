[
    {
        "content": "<p>I have a proof which finishes with <code>simp, exact h</code>, which is not ideal. The goal is the equality of two structures, and one of the fields is another structure; everything is a prop other than two non-defeq terms, which are equal because of <code>h</code>. I never quite know how to prove these things (I'm proving an <code>ext</code> lemma for G-module homomorphisms) so I tried <code>squeeze_simp</code> and it told me to use <code>simp only []</code>. And lo and behold, <code>simp only []</code> does work. What does it do?</p>",
        "id": 189994671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583631964
    },
    {
        "content": "<p>You can have a look at the proof term by replacing <code>simp</code> with this:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">main_goal</span><span class=\"o\">,</span>\n       <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]],</span>\n       <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>It will tell you what rules it uses without being asked to.</p>",
        "id": 189995190,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583633181
    },
    {
        "content": "<blockquote>\n<p>I have a proof which finishes with <code>simp, exact h</code></p>\n</blockquote>\n<p>Doesn't <code>simpa</code> work here?</p>",
        "id": 190006632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583658439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/simp.20only.20.5B.5D/near/189995190\" title=\"#narrow/stream/113488-general/topic/simp.20only.20.5B.5D/near/189995190\">said</a>:</p>\n<blockquote>\n<p>You can have a look at the proof term by replacing <code>simp</code> with this:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">main_goal</span><span class=\"o\">,</span>\n       <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]],</span>\n       <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>It will tell you what rules it uses without being asked to.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>eq.mpr (id (eq.trans mk.inj_eq add_monoid_hom.mk.inj_eq)) ?m_1\n</pre></div>\n\n\n<p>That function is not in <code>[]</code>!</p>",
        "id": 190007547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583660427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/simp.20only.20.5B.5D/near/190006632\" title=\"#narrow/stream/113488-general/topic/simp.20only.20.5B.5D/near/190006632\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I have a proof which finishes with <code>simp, exact h</code></p>\n</blockquote>\n<p>Doesn't <code>simpa</code> work here?</p>\n</blockquote>\n<p>It does -- thanks. <code>simp [h]</code> didn't.</p>",
        "id": 190007557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583660485
    },
    {
        "content": "<p>The simplifier has built-in support to simplify constructor equalities, which <em>should</em> work for arbitrary inductive types (but in practice it sometimes fails so we have extra simp lemmas in mathlib):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 190011920,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583669774
    }
]