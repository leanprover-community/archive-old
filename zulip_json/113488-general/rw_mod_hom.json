[
    {
        "content": "<p>If I have a ring hom <code>f : R →+* S</code>, and a hypothesis <code>h : f x = f y</code>, and somewhere in my goal I have <code>f (a + x + b)</code>, then I would love to be able to write <code>rw_mod_hom h</code>, and get <code>f (a + y + b)</code> as a result.</p>",
        "id": 196999656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589041662
    },
    {
        "content": "<p>Bonus points if <code>h : f x = f y + f z</code> and <code>rw_mod_hom h</code> would generate <code>f (a + (y + z) + b)</code>.</p>",
        "id": 196999701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589041696
    },
    {
        "content": "<p><code>simp only [ring_hom.map_add, etc]; simp only *; simp only [(ring_hom.map_add _ _).symm, etc]</code></p>",
        "id": 196999743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589041755
    },
    {
        "content": "<p>Right, which is really ugly in</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">LHS</span> <span class=\"bp\">=</span> <span class=\"n\">RHS1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">short_tactic_argument</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">RHS2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">another_short_tac</span>\n</code></pre></div>",
        "id": 196999837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589041815
    },
    {
        "content": "<p>So I would like an abbreviating tactic (-;</p>",
        "id": 196999853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589041835
    },
    {
        "content": "<p>as in,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rw_mod_hom</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">what</span> <span class=\"n\">i</span> <span class=\"n\">wrote</span> <span class=\"n\">above</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 196999856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589041838
    },
    {
        "content": "<p>Probably yes. Plus support for rewriting at hypothesis etc etc...</p>",
        "id": 196999886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589041864
    },
    {
        "content": "<p>Not saying this is hard. Just that it's nice to have (-;</p>",
        "id": 196999909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589041889
    },
    {
        "content": "<p>Something that is (probably very) nontrivial would be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">calc_mod_hom</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">more</span>        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">tac</span>\n</code></pre></div>",
        "id": 196999987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589042011
    },
    {
        "content": "<p>Can we extend <code>norm_cast</code> to other homs?</p>",
        "id": 197004341,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589047825
    },
    {
        "content": "<p>I think some basic support for other kinds of \"coercions\" would be straightforward.  We already support three coercions: <code>coe_fn</code>, <code>coe_sort</code>, and <code>coe</code>.  We could add an attribute that allows you to register other functions as coercions.  However the heuristic for <code>↑x = ↑y</code> which first tries to rewrite it to <code>↑↑x = ↑y</code> is probably hard to generalize to other coercions.</p>",
        "id": 197004502,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589048000
    },
    {
        "content": "<p>In case of homomorphisms it's one of several <code>coe_fn</code>'s.</p>",
        "id": 197026251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589075510
    }
]