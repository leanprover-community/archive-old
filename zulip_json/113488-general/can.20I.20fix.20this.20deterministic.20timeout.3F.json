[
    {
        "content": "<p>I am in the middle of a long proof and finding it hard to shorten. I have a hypothesis H3 in my local context. I have a killer theorem which I want to apply, which takes 11 inputs (it's one of these obvious-to-a-mathematician statements of the form \"if something happens, then when you replace everything by something equiv to it then it still happens). I want one of the inputs to be H3, but if I put H3 into it then I get a deterministic timeout. Instead I write (_ : [type of H3]) as an input and then I get an extra goal, which I can clear with <code>exact H3</code>.</p>",
        "id": 126334659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899592
    },
    {
        "content": "<p>Am I missing a trick here? Am I likely to have made an error? I am not sure I can minimise.</p>",
        "id": 126334716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899610
    },
    {
        "content": "<p>that's a bit vague. does <code>by exact H3</code> work?</p>",
        "id": 126334730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525899646
    },
    {
        "content": "<p>I know it's vague, but deterministic timeouts are a big vague too :-/</p>",
        "id": 126334745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899672
    },
    {
        "content": "<p>is the type of H3 exactly the same as the expected type?</p>",
        "id": 126334754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525899691
    },
    {
        "content": "<p>I believe so</p>",
        "id": 126334808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899726
    },
    {
        "content": "<p><code>by exact H3</code> doesn't work</p>",
        "id": 126334811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899734
    },
    {
        "content": "<p>in the sense that I still get the timeout</p>",
        "id": 126334814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899741
    },
    {
        "content": "<p><code>  have H3 : (Π (i : γ), loc Rr (powers (f i))) ≃ Π (i : γ), loc R (non_zero_on_U (Ui i)) := equiv.prod H2,</code></p>",
        "id": 126334827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899760
    },
    {
        "content": "<p>[is equiv.prod already there, by the way? If X i equiv Y i for all i then prod_i X i = prod_i Y i]</p>",
        "id": 126334848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899793
    },
    {
        "content": "<p><code>Pi_congr_right</code></p>",
        "id": 126334861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525899818
    },
    {
        "content": "<p>and <code> (H3 : ((Π (i : γ), loc Rr (powers (f i))) ≃ (Π (i : γ), loc R (non_zero_on_U (Ui i))))) </code> as my input gives me a timeout</p>",
        "id": 126334873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899841
    },
    {
        "content": "<p><code>prod</code> is the binary product</p>",
        "id": 126334919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525899858
    },
    {
        "content": "<p>thanks</p>",
        "id": 126334923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899874
    },
    {
        "content": "<p>that would be why I couldn't find it ;-)</p>",
        "id": 126334927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899883
    },
    {
        "content": "<p>I should say that one can't determine the type of H3 immediately, type class inference is doing a lot of work here</p>",
        "id": 126334945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899928
    },
    {
        "content": "<p>I'm afraid this is a little too restricted to get the full picture</p>",
        "id": 126334953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525899949
    },
    {
        "content": "<p>I have about 15 implicit inputs as well as about 10 explicit ones</p>",
        "id": 126334954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525899951
    },
    {
        "content": "<p>I suggest leaving this for later then, <code>refine</code> with a <code>_</code> and then insert it after the unification works</p>",
        "id": 126335008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525899993
    },
    {
        "content": "<p>yes this works fine</p>",
        "id": 126335023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900018
    },
    {
        "content": "<p>Here's the function I'm trying to apply</p>",
        "id": 126335029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900029
    },
    {
        "content": "<p><code>fourexact_from_iso_to_fourexact :\n  ∀ {A B C A' B' C' : Type u_1} [_inst_1 : add_comm_group A] [_inst_2 : add_comm_group A']\n  [_inst_3 : add_comm_group B] [_inst_4 : add_comm_group B'] [_inst_5 : add_comm_group C] [_inst_6 : add_comm_group C']\n  (ab : A → B) [_inst_7 : is_add_group_hom ab] (bc : B → C) [_inst_8 : is_add_group_hom bc],\n    (∀ (b : B), bc b = 0 → (∃! (a : A), ab a = b)) →\n    ∀ (fa : A ≃ A') [_inst_9 : is_add_group_hom ⇑fa] (fb : B ≃ B') [_inst_10 : is_add_group_hom ⇑fb]\n    (fc : C ≃ C') [_inst_11 : is_add_group_hom ⇑fc] (ab' : A' → B') [_inst_12 : is_add_group_hom ab']\n    (bc' : B' → C') [_inst_13 : is_add_group_hom bc'],\n      (∀ (a : A), ⇑fb (ab a) = ab' (⇑fa a)) →\n      (∀ (b : B), ⇑fc (bc b) = bc' (⇑fb b)) → ∀ (b' : B'), bc' b' = 0 → (∃! (a' : A'), ab' a' = b')</code></p>",
        "id": 126335030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900033
    },
    {
        "content": "<p>I have 13 things which need to be inferred by type class inference because someone somewhere decided that <code>add_comm_group</code> and <code>is_add_group_hom</code> were type classes</p>",
        "id": 126335088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900103
    },
    {
        "content": "<p>and I have six add_comm_groups</p>",
        "id": 126335099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900124
    },
    {
        "content": "<p>I assume all those searches are trivial though, right?</p>",
        "id": 126335108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900153
    },
    {
        "content": "<p>and I want Lean to infer them from things like <code>ab</code> and <code>fb</code> etc</p>",
        "id": 126335109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900155
    },
    {
        "content": "<p>yes everything should be trivial</p>",
        "id": 126335116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900165
    },
    {
        "content": "<p>oh</p>",
        "id": 126335117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900169
    },
    {
        "content": "<p>let me rephrase</p>",
        "id": 126335119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900173
    },
    {
        "content": "<p>that</p>",
        "id": 126335120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900174
    },
    {
        "content": "<p>like they are in the context</p>",
        "id": 126335124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900179
    },
    {
        "content": "<p>I have no idea whether these searches are trivial</p>",
        "id": 126335126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900181
    },
    {
        "content": "<p>I doubt they're in the context</p>",
        "id": 126335129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900193
    },
    {
        "content": "<p>I could easily put them in with <code>by apply_instance</code></p>",
        "id": 126335179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900213
    },
    {
        "content": "<p>If I put them in the context, will type class inference pick them up? I thought not</p>",
        "id": 126335183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900230
    },
    {
        "content": "<p>I suggest you have a type for group isos instead of <code>(fa : A ≃ A') [_inst_9 : is_add_group_hom ⇑fa] </code></p>",
        "id": 126335185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900233
    },
    {
        "content": "<p>I have a type for R-algebra isos ;-)</p>",
        "id": 126335190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900263
    },
    {
        "content": "<p>and instances which give me the equiv and the add_group_hom</p>",
        "id": 126335208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900295
    },
    {
        "content": "<p>but I'm letting type class inference do all of this</p>",
        "id": 126335210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900305
    },
    {
        "content": "<p>This whole experience has been extremely hard going, by the way.</p>",
        "id": 126335264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900355
    },
    {
        "content": "<p>I've had to set that other parameter which causes me trouble up to 100</p>",
        "id": 126335267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900364
    },
    {
        "content": "<p>I suggest you apply this theorem by writing <code>apply fourexact_from_iso_to_fourexact ... bc'</code> giving all the function arguments, and then prove the remaining goals</p>",
        "id": 126335269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900365
    },
    {
        "content": "<p>yes that's exactly what I'm doing</p>",
        "id": 126335271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900380
    },
    {
        "content": "<p>it avoids the time out</p>",
        "id": 126335276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900384
    },
    {
        "content": "<p>It does mean that all of a sudden I go from 1 goal to 11</p>",
        "id": 126335279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900394
    },
    {
        "content": "<p>I have <code>set_option class.instance_max_depth 100</code> too</p>",
        "id": 126335287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900422
    },
    {
        "content": "<p>and all I am doing is proving something which is so trivial that it is not even explicitly mentioned in the stacks project</p>",
        "id": 126335317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900443
    },
    {
        "content": "<p>An alternative is <code>have := fourexact_from_iso_to_fourexact ... bc' </code> then <code>refine this ...</code> with the remaining args</p>",
        "id": 126335330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900444
    },
    {
        "content": "<p>I have a workaround</p>",
        "id": 126335333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900460
    },
    {
        "content": "<p>I was just wondering what was happening</p>",
        "id": 126335336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900466
    },
    {
        "content": "<p>I was going to take the 11 goals</p>",
        "id": 126335342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900482
    },
    {
        "content": "<p>and then solve them all in squiggly brackets with \"show\" at the top of each one</p>",
        "id": 126335353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900504
    },
    {
        "content": "<p>This theorem is more complicated than it needs to be btw</p>",
        "id": 126335355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900506
    },
    {
        "content": "<p>I know full well</p>",
        "id": 126335359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900513
    },
    {
        "content": "<p>you don't need any groups at all</p>",
        "id": 126335360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900515
    },
    {
        "content": "<p>because it's all trivial</p>",
        "id": 126335362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900516
    },
    {
        "content": "<p>and your silly system doesn't know this</p>",
        "id": 126335366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900526
    },
    {
        "content": "<p>the statement is just about functions</p>",
        "id": 126335368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900530
    },
    {
        "content": "<p>so all the TC args can go away</p>",
        "id": 126335369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900549
    },
    {
        "content": "<p>TC?</p>",
        "id": 126335370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900553
    },
    {
        "content": "<p>typeclass</p>",
        "id": 126335372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900556
    },
    {
        "content": "<p>yes you're right</p>",
        "id": 126335416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900572
    },
    {
        "content": "<p>It's a statement about pointed sets</p>",
        "id": 126335419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900587
    },
    {
        "content": "<p>Are there pointed sets in Lean?</p>",
        "id": 126335421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900592
    },
    {
        "content": "<p>I've been carrying the group homs around because in practice one uses some algebra to prove the diagram commutes -- \"both maps are the unique group hom with some property\" etc.</p>",
        "id": 126335433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900652
    },
    {
        "content": "<p>You need a zero though, to define kernel</p>",
        "id": 126335436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900658
    },
    {
        "content": "<p>Floris knows a lot about pointed sets in lean</p>",
        "id": 126335437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900661
    },
    {
        "content": "<p>But you don't need anything else</p>",
        "id": 126335438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900663
    },
    {
        "content": "<p>I'll rephrase it in terms of pointed sets</p>",
        "id": 126335440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900681
    },
    {
        "content": "<p>and then someone will make [is_pointed_set_hom] a typeclass</p>",
        "id": 126335480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900689
    },
    {
        "content": "<p>and I'll be back to square one ;-)</p>",
        "id": 126335482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900693
    },
    {
        "content": "<p>So it's not just about functions in fact</p>",
        "id": 126335483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900713
    },
    {
        "content": "<p>I need that a kernel maps to a kernel</p>",
        "id": 126335485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900718
    },
    {
        "content": "<p>For your purposes I would just take the pointedness assumption as an argument</p>",
        "id": 126335486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900722
    },
    {
        "content": "<p>so I need that 0 maps to 0</p>",
        "id": 126335488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900730
    },
    {
        "content": "<p>I need that my equivs are equivs of pointed sets</p>",
        "id": 126335501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525900764
    },
    {
        "content": "<p>You should study how the <code>transfer</code> tactic works, even if you don't use the tactic the supporting theorems may be of use to you</p>",
        "id": 126335571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525900854
    },
    {
        "content": "<p>I am solving my 11 goals and I think I located the reason for the time-out. If I put <code>H3</code> explicitly into the system then type class inference tries to prove it's a group hom and type class inference isn't very good at this sort of thing in my experience.</p>",
        "id": 126335843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901320
    },
    {
        "content": "<p>Ever since I've been trying to use type class inference to prove things are group homs / ring homs etc, I've been having trouble.</p>",
        "id": 126335852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901353
    },
    {
        "content": "<p>I've now realised that this is just another one of my type class woes</p>",
        "id": 126335860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901363
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">show</span> <span class=\"n\">is_add_group_hom</span> <span class=\"n\">H3&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 126335920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901408
    },
    {
        "content": "<p>There's the time-out. So your instinct was right</p>",
        "id": 126335929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901419
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 126335931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901425
    },
    {
        "content": "<p>It's a product of group homs</p>",
        "id": 126335940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901464
    },
    {
        "content": "<p>and maybe there's no instance that if X i -&gt; Y i is a group hom for all i then Pi i, X i -&gt; Pi i, Y i is a group hom</p>",
        "id": 126335954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525901507
    },
    {
        "content": "<p>that one is up to you, I don't think <code>is_add_group_hom</code> even exists in mathlib</p>",
        "id": 126336362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525902095
    },
    {
        "content": "<p>but you have to show that <code>Pi_congr_right</code> as defined respects the Pi group structure</p>",
        "id": 126336409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525902123
    },
    {
        "content": "<p>I have type class inference issues :-(</p>",
        "id": 126337259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903346
    },
    {
        "content": "<p>How do I say \"for all i, the proof (e i) of equiv (X i) (Y i) is a ring hom\" (say)</p>",
        "id": 126337281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903397
    },
    {
        "content": "<p>in the sense that I want that to be the assumption, inferred by type class inference</p>",
        "id": 126337291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903422
    },
    {
        "content": "<p>This has nothing to do with equiv.</p>",
        "id": 126337294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903437
    },
    {
        "content": "<p>Let me formulate something easier, and in the correct thread.</p>",
        "id": 126337333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903444
    },
    {
        "content": "<p>It's just <code>\\forall i, is_ring_hom (e i)</code></p>",
        "id": 126337602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525903861
    },
    {
        "content": "<p>It was getting it in the brackets I was worried about</p>",
        "id": 126337667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903926
    },
    {
        "content": "<p>But <code>[∀ (i : γ), ring (F i)]</code> works fine</p>",
        "id": 126337670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903932
    },
    {
        "content": "<p>I've never seen that construction before</p>",
        "id": 126337671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903932
    },
    {
        "content": "<p>Thanks as ever. I'm back on track!</p>",
        "id": 126337681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525903955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You should start reading from <a href=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L61\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L61\">https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L61</a></p>",
        "id": 126353221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525936980
    },
    {
        "content": "<p>and add things if needed</p>",
        "id": 126353227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525937012
    },
    {
        "content": "<p>We use this stuff in the schemes work.</p>",
        "id": 126353552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525937716
    },
    {
        "content": "<p>But it's only objects.</p>",
        "id": 126353555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525937723
    },
    {
        "content": "<p>I now realise we need the morphisms too.</p>",
        "id": 126353556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525937728
    },
    {
        "content": "<p>Currently my impression is that the morphisms which are classes are kind of random, and not all are classes.</p>",
        "id": 126353562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525937754
    },
    {
        "content": "<p>For morphisms, I find myself needing both \"if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>→</mo><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X \\to Y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> are group homs, then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>→</mo><msub><mi mathvariant=\"normal\">Π</mi><mi>i</mi></msub><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X \\to \\Pi_i Y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is\"</p>",
        "id": 126353613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525937833
    },
    {
        "content": "<p>and \"if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub><mo>→</mo><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i\\to Y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> are group homs, then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">Π</mi><mi>i</mi></msub><msub><mi>X</mi><mi>i</mi></msub><mo>→</mo><msub><mi mathvariant=\"normal\">Π</mi><mi>i</mi></msub><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Pi_i X_i \\to \\Pi_i Y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is too\"</p>",
        "id": 126353619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525937858
    },
    {
        "content": "<p>It was these instances that caused the time-out :-)</p>",
        "id": 126353780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525938123
    },
    {
        "content": "<p>It knew that the product of groups was a group and then timed out trying to prove using type class inference only that the product of the morphisms was a morphism</p>",
        "id": 126353781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525938123
    },
    {
        "content": "<p>how are those functions being specified?</p>",
        "id": 126353850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525938272
    },
    {
        "content": "<p>you wrote the type but not the term there</p>",
        "id": 126353853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525938285
    },
    {
        "content": "<p>Then I'm confused. How could you write: \"<code>[∀ (i : γ), ring (F i)]</code> I've never seen that construction before\"</p>",
        "id": 126353929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525938433
    },
    {
        "content": "<p>Anyway, I think having Lean figuring out by itself that composition and products of morphisms are morphisms is a good reason to try to use type class here.  But you need to add instances to that <code>pi_instance</code> file, which was written at a time were morphisms were defs</p>",
        "id": 126353979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525938504
    },
    {
        "content": "<p>That may require improving Simon's <code>pi_instance</code> tactic</p>",
        "id": 126353984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525938527
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 126353986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525938532
    },
    {
        "content": "<blockquote>\n<p>how are those functions being specified?</p>\n</blockquote>\n<p>There's only one sensible specification in each case. I just noticed that the Android Zulip app doesn't do maths mode.</p>",
        "id": 126354452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525939522
    },
    {
        "content": "<blockquote>\n<p>Then I'm confused. How could you write: \"<code>[∀ (i : γ), ring (F i)]</code> I've never seen that construction before\"</p>\n</blockquote>\n<p>I glanced at the Pi file at the time, realised I understood what it did, forgot how it did it, then had to do it myself. Patrick I'm nearly 50. It's completely consistent that I have to write <code>[∀ (i : γ), ring (F i)]</code> again in two months' time and again claim that I've never seen it before.</p>",
        "id": 126354495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525939597
    },
    {
        "content": "<p>I mean \"...according to my memory banks\" :-)</p>",
        "id": 126354504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525939642
    },
    {
        "content": "<p>It's pretty depressing. Sometimes I want to know something about some technical number theory question so I google, find a good mathoverflow answer, read it, learn a lot, and then discover to my surprise that I had written the answer myself 5 years ago. The first time that happened to me was a genuine shock. Now I just consider it normal.</p>",
        "id": 126354551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525939707
    },
    {
        "content": "<p>It's not depressing at all -- it's pretty funny :-)</p>",
        "id": 126354556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525939727
    },
    {
        "content": "<blockquote>\n<p>There's only one sensible specification in each case.</p>\n</blockquote>\n<p>Not quite: are you giving an explicit lambda term or a definition?</p>",
        "id": 126354687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525939963
    },
    {
        "content": "<p>I don't understand the subtlety you've found, but what I am saying is that I need the following two facts:</p>",
        "id": 126354747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940046
    },
    {
        "content": "<p>I'm just asking what you wrote</p>",
        "id": 126354750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940064
    },
    {
        "content": "<p>the typeclass system is trying to solve <code>is_add_group_hom ...</code>; what is in the place of the <code>...</code>?</p>",
        "id": 126354769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940108
    },
    {
        "content": "<p>the typeclass system is very sensitive to the way you write things</p>",
        "id": 126354775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940138
    },
    {
        "content": "<p>(1) If gamma is a type and for all i in gamma I have (f i : X -&gt; Y i), which type class inference knows is a group hom (actually in my case this one was a ring hom) then the induced map from X to Pi i, Y i sending x i to f i (x) is a group hom</p>",
        "id": 126354778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940143
    },
    {
        "content": "<blockquote>\n<p>the induced map from X to Pi i, Y i sending x i to f i (x)</p>\n</blockquote>\n<p>and how did you write that</p>",
        "id": 126354787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940162
    },
    {
        "content": "<p><code>\\lam x i,f i x</code> I guess</p>",
        "id": 126354850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940200
    },
    {
        "content": "<p>did you prove that in a lemma?</p>",
        "id": 126354851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940204
    },
    {
        "content": "<p>I proved it in an instance</p>",
        "id": 126354854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940218
    },
    {
        "content": "<p>show me</p>",
        "id": 126354856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940222
    },
    {
        "content": "<p>well I didn't yet</p>",
        "id": 126354862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940232
    },
    {
        "content": "<p>are you saying I'm going to run into trouble?</p>",
        "id": 126354863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940237
    },
    {
        "content": "<p>I proved the other one</p>",
        "id": 126354864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940241
    },
    {
        "content": "<p>well if the instance isn't there of course it will fail</p>",
        "id": 126354866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940248
    },
    {
        "content": "<p>but yes, that instance is trouble</p>",
        "id": 126354868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940256
    },
    {
        "content": "<p>you want to wrap that function in a definition</p>",
        "id": 126354870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940270
    },
    {
        "content": "<p>Oh</p>",
        "id": 126354872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940275
    },
    {
        "content": "<p>Here's the one I did</p>",
        "id": 126354873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940278
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">Prod</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126354894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940283
    },
    {
        "content": "<p>You don't know the type class I'm using here</p>",
        "id": 126354915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940291
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span>\n</pre></div>",
        "id": 126354919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940308
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 126354924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940324
    },
    {
        "content": "<p>Are there problems with this?</p>",
        "id": 126354926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940328
    },
    {
        "content": "<p>this is bad: <code>is_add_group_hom (λ Fi i, H i (Fi i))</code></p>",
        "id": 126354934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940346
    },
    {
        "content": "<p>Hmm</p>",
        "id": 126354935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940358
    },
    {
        "content": "<p>Well thanks for spotting this</p>",
        "id": 126354936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940362
    },
    {
        "content": "<p>it's okay as a def but as an instance it requires higher order unification</p>",
        "id": 126354937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940364
    },
    {
        "content": "<p>On the other hand</p>",
        "id": 126354938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940384
    },
    {
        "content": "<p>these morphisms between mathematical objects are being defined to be type classes</p>",
        "id": 126354982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940406
    },
    {
        "content": "<p>so I am being pushed to use the type class inference system</p>",
        "id": 126354990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940423
    },
    {
        "content": "<p>you just need to define <code>Pi_lift H := λ Fi i, H i (Fi i</code> and give that the instance</p>",
        "id": 126354991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940445
    },
    {
        "content": "<p>Oh so I can still use type class inference</p>",
        "id": 126354993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940461
    },
    {
        "content": "<p>the typeclass system needs a constant to key on</p>",
        "id": 126355001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940475
    },
    {
        "content": "<p>This is of course the problem with me using things I don't understand completely</p>",
        "id": 126355005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940491
    },
    {
        "content": "<p>It's exactly what I tell my graduate students not to do</p>",
        "id": 126355008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940505
    },
    {
        "content": "<p>I don't know what \"constant\" or \"key on\" mean in your last post</p>",
        "id": 126355045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940525
    },
    {
        "content": "<p>for example if you want to show <code>is_group_hom (f o g)</code> it's no problem but <code>is_group_hom (\\lam x, f (g x))</code> is not likely to work</p>",
        "id": 126355051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940552
    },
    {
        "content": "<p><em>boggle</em></p>",
        "id": 126355055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940564
    },
    {
        "content": "<p>Mario probably means a unique definition name.</p>",
        "id": 126355056,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525940572
    },
    {
        "content": "<p><code>function.compose</code> in that case.</p>",
        "id": 126355059,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525940583
    },
    {
        "content": "<p>I just spent some time changing f circ g's to lam x, f (g x) because Kenny told me that things were better that way</p>",
        "id": 126355062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940592
    },
    {
        "content": "<p>in the sense that they were easier to work with</p>",
        "id": 126355069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940607
    },
    {
        "content": "<blockquote>\n<p>I just spent some time changing f circ g's to lam x, f (g x) because Kenny told me that things were better that way</p>\n</blockquote>\n<p>you see, things have a context</p>",
        "id": 126355070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525940618
    },
    {
        "content": "<p>That's true for the most part, but if it shows up as the target of a typeclass problem you want it to be \"obviously a morphism\"</p>",
        "id": 126355071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940641
    },
    {
        "content": "<blockquote>\n<p>for example if you want to show <code>is_group_hom (f o g)</code> it's no problem but <code>is_group_hom (\\lam x, f (g x))</code> is not likely to work</p>\n</blockquote>\n<p>but aren't they definitionally equivalent?</p>",
        "id": 126355112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525940650
    },
    {
        "content": "<p>and that means writing things functorially</p>",
        "id": 126355113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940650
    },
    {
        "content": "<p>they are, but typeclass inference doesn't work up to definitional equivalence</p>",
        "id": 126355116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940682
    },
    {
        "content": "<p>I wonder if this has anything to do with the fact that three times now I've had to <code>set_option class.instance_max_depth 100</code></p>",
        "id": 126355122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940704
    },
    {
        "content": "<p>it's doing a big search through the whole library. It doesn't have time to unify everything properly</p>",
        "id": 126355123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940706
    },
    {
        "content": "<p>what do they work up to?</p>",
        "id": 126355124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525940706
    },
    {
        "content": "<p>unification of metavariables unfolding reducibles only</p>",
        "id": 126355136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940728
    },
    {
        "content": "<p>I want to give hints to the system</p>",
        "id": 126355141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940746
    },
    {
        "content": "<p>is that another type of equivalence?</p>",
        "id": 126355142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525940752
    },
    {
        "content": "<p>because in every case I know exactly what I want it to do</p>",
        "id": 126355145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940756
    },
    {
        "content": "<p>it's almost syntactic equality, except that reducible definitions are eagerly expanded</p>",
        "id": 126355189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940784
    },
    {
        "content": "<p>In some cases it's even \"I want you to use precisely the instance which I just defined in another file precisely so that this next line will work\"</p>",
        "id": 126355191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940798
    },
    {
        "content": "<p>the key is to write the typeclass problem so that it's obvious to the system</p>",
        "id": 126355201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940837
    },
    {
        "content": "<p>that basically means that all your typeclass instances should have the form <code>my_class (my_operation A B C)</code></p>",
        "id": 126355208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940871
    },
    {
        "content": "<p>To put this into some context, the fact that the product of group homs is a group hom is the sort of thing which is explained in an undergraduate maths lecture in the 15 minute period just after the definition of a group hom has been given, and is then never mentioned again and everyone thinks it's obvious</p>",
        "id": 126355209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940873
    },
    {
        "content": "<p>with some assumptions like <code>my_class A</code> <code>my_class2 B</code></p>",
        "id": 126355248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940887
    },
    {
        "content": "<p>and your typeclass problems should look like <code>my_class (my_op (my_other_op A) B)</code></p>",
        "id": 126355249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940912
    },
    {
        "content": "<p>no lambdas</p>",
        "id": 126355250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525940920
    },
    {
        "content": "<p>Well this is very helpful. Whereabouts is all this documented? ;-)</p>",
        "id": 126355259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525940954
    },
    {
        "content": "<p>Look up. <span class=\"emoji emoji-2b06\" title=\"arrow up\">:arrow_up:</span> <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 126355260,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525940989
    },
    {
        "content": "<p>I don't know why I'm bothering writing docs, I could just refer people to <a href=\"\" target=\"_blank\" title=\"\">https://leanprover.zulipchat.com/</a></p>",
        "id": 126355303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941034
    },
    {
        "content": "<p>TBD: The <a href=\"https://leanprover.github.io/reference/declarations.html#type-classes\" target=\"_blank\" title=\"https://leanprover.github.io/reference/declarations.html#type-classes\">type class reference section</a> is currently empty.</p>",
        "id": 126355314,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525941091
    },
    {
        "content": "<p>Oh, on a related topic, why <code>Pi_congr_right</code>?</p>",
        "id": 126355316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941099
    },
    {
        "content": "<p>I mean, why the name?</p>",
        "id": 126355356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941138
    },
    {
        "content": "<p><code>equiv.Pi_congr_right :\n  Π {α : Sort u_3} {β₁ : α → Sort u_4} {β₂ : α → Sort u_5},\n    (Π (a : α), β₁ a ≃ β₂ a) → ((Π (a : α), β₁ a) ≃ Π (a : α), β₂ a)</code></p>",
        "id": 126355357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941141
    },
    {
        "content": "<p>That looks like <code>equiv.Pi</code> to me</p>",
        "id": 126355359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941154
    },
    {
        "content": "<p>modulo the fact that that name is probably illegal</p>",
        "id": 126355360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941163
    },
    {
        "content": "<p>but I don't see anything <code>right</code> about it, other than the fact that it's right</p>",
        "id": 126355407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941290
    },
    {
        "content": "<p>Are these fundamental constructions already in Lean:</p>",
        "id": 126355562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941604
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">Pi_lift₁</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">Pi_lift₂</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 126355566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941609
    },
    {
        "content": "<p>Pi takes two arguments</p>",
        "id": 126355579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525941714
    },
    {
        "content": "<p>a domain and a family</p>",
        "id": 126355606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525941722
    },
    {
        "content": "<p>Pi_congr_left is likely to be much messier though so I left it out</p>",
        "id": 126355620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525941744
    },
    {
        "content": "<p>So is the following now OK:</p>",
        "id": 126355632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941841
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">Pi_lift</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">Pi_lift_map₁</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126355671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941853
    },
    {
        "content": "<p>yep that's ok</p>",
        "id": 126355673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525941866
    },
    {
        "content": "<p>Can you appreciate that this is a subtlety that people are unlikely to guess, and it's up to the very few people who appreciate the subtlety to somehow get the news around? :-/</p>",
        "id": 126355683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941923
    },
    {
        "content": "<p>certainly</p>",
        "id": 126355684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525941935
    },
    {
        "content": "<p>I don't recall this being mentioned in TPIL</p>",
        "id": 126355685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941938
    },
    {
        "content": "<p>although as we've seen earlier in this thread, that's not saying much</p>",
        "id": 126355686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941946
    },
    {
        "content": "<p>I guess I felt the same way about <code>simp</code> earlier on.</p>",
        "id": 126355727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941970
    },
    {
        "content": "<p>In a way, it's \"your fault\" in generalizing from \"typeclasses can do X\" to \"typeclasses can do Y\"</p>",
        "id": 126355728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525941981
    },
    {
        "content": "<p>I would tag arbitrary things with simp and then had to be rolled back by people that actually knew what simp did</p>",
        "id": 126355729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525941990
    },
    {
        "content": "<p>I mean, by people who knew _how simp actually worked_</p>",
        "id": 126355730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942005
    },
    {
        "content": "<p>and I guess the same is happening here.</p>",
        "id": 126355731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942014
    },
    {
        "content": "<p>everything has limitations, and most of the existing documentation is vague about where the limitations are</p>",
        "id": 126355734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525942023
    },
    {
        "content": "<p>In maths, generalizing like that is a _really_ important skill</p>",
        "id": 126355738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942028
    },
    {
        "content": "<p>It's not so clear that such limitations exist in maths</p>",
        "id": 126355739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942041
    },
    {
        "content": "<p>If you understand the idea behind a proof</p>",
        "id": 126355741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942051
    },
    {
        "content": "<p>then you can see the same idea working in many other situations</p>",
        "id": 126355742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942065
    },
    {
        "content": "<p>on the one hand, you can assume Leo is magic and made everything work (which is not an unreasonable rule of thumb)</p>",
        "id": 126355743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525942070
    },
    {
        "content": "<p>I feel like I need you a huge amount less than I needed you last October</p>",
        "id": 126355786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942103
    },
    {
        "content": "<p>but I still need you from time to time :-)</p>",
        "id": 126355787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942111
    },
    {
        "content": "<p>Many thanks as ever</p>",
        "id": 126355788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942115
    },
    {
        "content": "<p>but sometimes if you don't know you should stick to areas that you know how to use already... it's a balancing act</p>",
        "id": 126355789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525942125
    },
    {
        "content": "<p>I don't use <code>finish</code> or <code>cc</code> because I don't understand them well</p>",
        "id": 126355800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525942151
    },
    {
        "content": "<p>Don't say that in front of your advisor</p>",
        "id": 126355804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942179
    },
    {
        "content": "<p>didn't he write at least one of them?</p>",
        "id": 126355805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942185
    },
    {
        "content": "<p>yes, Jeremy wrote <code>finish</code></p>",
        "id": 126355808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525942198
    },
    {
        "content": "<p>I'm not sure he understands it either, since it's a complicated set of heuristics calling in to less understood things like e-matching</p>",
        "id": 126355855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525942239
    },
    {
        "content": "<p>My impression is that computer scientists are much better at generating work that they \"don't understand\"</p>",
        "id": 126355863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942271
    },
    {
        "content": "<p>much better than mathematicians, I mean</p>",
        "id": 126355865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942277
    },
    {
        "content": "<p>If I use theorem X whose proof I've not read, in my proof, then I can just argue that I have a complete understanding of \"theorem X implies the result I proved\"</p>",
        "id": 126355869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942305
    },
    {
        "content": "<p>and all proofs are irrelevant</p>",
        "id": 126355870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942313
    },
    {
        "content": "<p>says the man who is rediscovering his own proofs every five years :)</p>",
        "id": 126355910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525942327
    },
    {
        "content": "<p>:-)</p>",
        "id": 126355911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942332
    },
    {
        "content": "<p>That's how irrelevant they are :-)</p>",
        "id": 126355913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942338
    },
    {
        "content": "<p>I don't rediscover the proofs I created in my 20s and 30s, those are pretty much hard wired</p>",
        "id": 126355915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942369
    },
    {
        "content": "<p>It's the stuff I do in my 40s that I occasionally do again</p>",
        "id": 126355920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942384
    },
    {
        "content": "<p>This schemes code is getting quite unwieldy, and occasionally I prove some lemma and in the middle of the proof I think \"I ran into this issue before, I think I already proved this lemma\"</p>",
        "id": 126355923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942423
    },
    {
        "content": "<p>With the tag system I can really control well this sort of thing, most of the time</p>",
        "id": 126355925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942437
    },
    {
        "content": "<p>but when I go \"off piste\" because the tag says \"this is now clear, as every mathematican knows\" and Lean is saying \"but the diagrams! You have to check they commute!\" and I end up with 1000 lines of code checking a triviality, that's when I duplicate</p>",
        "id": 126355969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942480
    },
    {
        "content": "<p>My esteemed co-author writes</p>",
        "id": 126356137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942858
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">deus</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"bp\">/</span><span class=\"err\">ᵣ</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">⁻¹</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">salva</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"bp\">/</span><span class=\"err\">ᵣ</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">⁻¹</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"bp\">/</span><span class=\"err\">ᵣ</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">⁻¹</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_module</span>\n<span class=\"kn\">instance</span> <span class=\"n\">me</span> <span class=\"o\">:</span> <span class=\"n\">is_submodule</span> <span class=\"o\">(</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">to_be_named_aux3</span> <span class=\"n\">S</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"bp\">.</span><span class=\"n\">is_submodule</span> <span class=\"o\">(</span><span class=\"n\">to_be_named_aux3</span> <span class=\"n\">S</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126356138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942862
    },
    {
        "content": "<p>Are these OK (modulo the names)</p>",
        "id": 126356147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525942881
    },
    {
        "content": "<blockquote>\n<p>My esteemed co-author writes</p>\n</blockquote>\n<p>right</p>",
        "id": 126356199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525942982
    },
    {
        "content": "<p>I would hope that <code>is_submodule (is_ring_hom.ker f)</code> always works</p>",
        "id": 126357426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525945545
    },
    {
        "content": "<p>Kenny look how stupid type class inference is:</p>",
        "id": 126357465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945565
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">definition</span> <span class=\"n\">Pi_lift_map₁</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">foomap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_structure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Pi_foomap_is_foomap</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">Pi_lift_map₁</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">Pi_lift_map₁</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 126357470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945570
    },
    {
        "content": "<p>the <code>salva</code> instance is trouble</p>",
        "id": 126357471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525945572
    },
    {
        "content": "<p>even though they're defeq</p>",
        "id": 126357473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945575
    },
    {
        "content": "<p>the last example fails</p>",
        "id": 126357481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945614
    },
    {
        "content": "<p>It can be a local instance, but you don't necessarily want to always have that ring be a module over itself</p>",
        "id": 126357486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525945622
    },
    {
        "content": "<p>I think this is because type class inference doesn't have a constant to key on</p>",
        "id": 126357493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945628
    },
    {
        "content": "<blockquote>\n<p>It can be a local instance, but you don't necessarily want to always have that ring be a module over itself</p>\n</blockquote>\n<p>That ring _is_ always a module over itself, so what do you actually mean?</p>",
        "id": 126357497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">Pi_lift_map₁</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Pi_lift_map₁</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">foomap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 126357615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945848
    },
    {
        "content": "<p>well I've learnt something today</p>",
        "id": 126357617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525945857
    },
    {
        "content": "<p>I mean that when you make it an instance you are saying \"this is the only ring I want to consider this as a module over\"</p>",
        "id": 126357680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946000
    },
    {
        "content": "<p>because modules infer their ring argument from typeclass inference</p>",
        "id": 126357686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946029
    },
    {
        "content": "<p>Any ring is a module over itself, but that doesn't mean that's the only ring you want to consider, for example R as a Q-module</p>",
        "id": 126357727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946064
    },
    {
        "content": "<p>But if you consider R as an R-module, and later you need it as Q-module, then this could be inferred by some statement about forgetting scalars, right?</p>",
        "id": 126357733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946123
    },
    {
        "content": "<p>Except that we might get a diamond...</p>",
        "id": 126357734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946131
    },
    {
        "content": "<p>forgetting scalars?</p>",
        "id": 126357735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946139
    },
    {
        "content": "<p>From R to Q</p>",
        "id": 126357736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946145
    },
    {
        "content": "<p>as in you want to compose with a ring hom?</p>",
        "id": 126357778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946167
    },
    {
        "content": "<p>Every R-module is a Q-module</p>",
        "id": 126357781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946178
    },
    {
        "content": "<p>That is what I mean</p>",
        "id": 126357783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946184
    },
    {
        "content": "<p>I can envisage your implied assertion that each abelian group can only be a module over one ring as being problematic</p>",
        "id": 126357785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946201
    },
    {
        "content": "<p>And somehow <em>newbie me</em> would wish that typeclass inference can do that for me</p>",
        "id": 126357786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946206
    },
    {
        "content": "<p>I just found something else problematic too</p>",
        "id": 126357787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946208
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Pi_congr_right</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β₁</span> <span class=\"n\">a</span> <span class=\"err\">≃</span> <span class=\"n\">β₂</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β₁</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β₂</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">H</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126357792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946227
    },
    {
        "content": "<p>That's your(?) definition of Pi_congr_right</p>",
        "id": 126357793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946235
    },
    {
        "content": "<p>but you did not use <code>definition Pi_lift_map₁ {γ : Type u} {F : γ → Type u} {G : γ → Type u} \n  (H : ∀ i : γ, F i → G i) : (Π i, F i) → Π i, G i := λ Fi i, H i (Fi i)</code></p>",
        "id": 126357802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946268
    },
    {
        "content": "<p>Ok, I guess I don't understand typeclass inference... and what I mean is that I would like every R-module to automatically coerce to a Q-module when that's necessary</p>",
        "id": 126357804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946272
    },
    {
        "content": "<p>of course not, you just wrote it</p>",
        "id": 126357808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946280
    },
    {
        "content": "<p>but I am using <code>Pi_congr_right</code> to construct my product instances</p>",
        "id": 126357853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946293
    },
    {
        "content": "<p>so now I can't use type class inference on them</p>",
        "id": 126357855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946298
    },
    {
        "content": "<p>You will need a theorem saying that <code>\\u Pi_congr_right </code> is a group hom</p>",
        "id": 126357858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946313
    },
    {
        "content": "<p>it's defeq to your other one about Pi_lift</p>",
        "id": 126357860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946327
    },
    {
        "content": "<p>I see, so I don't try and get you to rewrite Pi_congr_right</p>",
        "id": 126357865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946345
    },
    {
        "content": "<p>right, that's too much for TC inference</p>",
        "id": 126357871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946362
    },
    {
        "content": "<p>even if it was rewritten it wouldn't help</p>",
        "id": 126357879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946379
    },
    {
        "content": "<p>But am I safe making this an instance?</p>",
        "id": 126357881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946384
    },
    {
        "content": "<p>yes</p>",
        "id": 126357883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525946388
    },
    {
        "content": "<p>I mean the proof that \\u= Pi_congr_right is a group</p>",
        "id": 126357887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946399
    },
    {
        "content": "<p>hom</p>",
        "id": 126357927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946407
    },
    {
        "content": "<p>OK I see.</p>",
        "id": 126357934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I didn't think too hard about the module ring thing yet</p>",
        "id": 126357942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946456
    },
    {
        "content": "<p>but one funny thing about type classes is that if the devs deem a structure to be worthy of being called a class</p>",
        "id": 126357952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946481
    },
    {
        "content": "<p>then you are only supposed to ever have one instance of that class</p>",
        "id": 126357956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946513
    },
    {
        "content": "<p>I am not being very precise</p>",
        "id": 126357957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946522
    },
    {
        "content": "<p>I mean that if <code>group</code> is a class, and <code>G</code> is a type, then <code>H1 : group G</code> and <code>H2 : group G</code> are supposed to be equal</p>",
        "id": 126357997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946552
    },
    {
        "content": "<p>because otherwise how can type class inference decide whether you want to use <code>H1</code> or <code>H2</code></p>",
        "id": 126357998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946567
    },
    {
        "content": "<p>So if you want more than one group structure on your type <code>G</code>, you have to jettison type classes</p>",
        "id": 126358003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946589
    },
    {
        "content": "<p>This happens in the topological space stuff in Lean -- a topological space is a structure</p>",
        "id": 126358006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946610
    },
    {
        "content": "<p>because Johannes wanted to put more than one topological space on a set so he could partially order them for some reason</p>",
        "id": 126358009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946627
    },
    {
        "content": "<p>But you can't edit the source, so a group is a class, so if there's more than one group structure on G then you have to go it alone</p>",
        "id": 126358049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946649
    },
    {
        "content": "<p>But there is only one instance of <code>module R R</code> right? So that shouldn't be the problem that Mario was talking about...</p>",
        "id": 126358050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946662
    },
    {
        "content": "<p>At the same time there could be an instance of <code>module Q R</code></p>",
        "id": 126358055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946693
    },
    {
        "content": "<p>Or is that giving a conflict somewhere?</p>",
        "id": 126358056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946701
    },
    {
        "content": "<p>In semilinear algebra I've seen plenty of other ways of making R an R-module, but that's not the point right now ;-)</p>",
        "id": 126358057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946703
    },
    {
        "content": "<p>Right (-;</p>",
        "id": 126358064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946721
    },
    {
        "content": "<p>Let's have a look at <code>module</code></p>",
        "id": 126358065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946727
    },
    {
        "content": "<p>Those shouldn't be instances... for a reason</p>",
        "id": 126358068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946737
    },
    {
        "content": "<p>I can't find it :-)</p>",
        "id": 126358073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946762
    },
    {
        "content": "<p>got it</p>",
        "id": 126358109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946791
    },
    {
        "content": "<p>yes module takes both the ring and the module as parameters</p>",
        "id": 126358123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946867
    },
    {
        "content": "<p>so I don't understand Mario's comment</p>",
        "id": 126358124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946871
    },
    {
        "content": "<blockquote>\n<p>because modules infer their ring argument from typeclass inference</p>\n</blockquote>\n<p>It's this though</p>",
        "id": 126358165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946906
    },
    {
        "content": "<p>I'm still confused...</p>",
        "id": 126358176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525946969
    },
    {
        "content": "<p>In the definition of <code>module</code> do you see <code>out_param</code>?</p>",
        "id": 126358179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525946998
    },
    {
        "content": "<p>Yes</p>",
        "id": 126358217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947003
    },
    {
        "content": "<p><code>out_param</code> is a great function, it is the identity function</p>",
        "id": 126358227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947010
    },
    {
        "content": "<p>but behind the scenes in the C++ code, type class inference is affected by <code>out_param</code></p>",
        "id": 126358230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947033
    },
    {
        "content": "<p>Ouch... I'm being cheated again</p>",
        "id": 126358234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947052
    },
    {
        "content": "<p>That <code>out_param</code> mean in practice \"if you give me a module, I'm going to try and guess the ring\"</p>",
        "id": 126358250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947102
    },
    {
        "content": "<p>My guess is that this was written by people with some specific usage in mind, who did not talk to a professional ring theorist beforehand</p>",
        "id": 126358294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947127
    },
    {
        "content": "<p>So we might get rid of the <code>out_param</code> and hopefully stuff would be better?</p>",
        "id": 126358304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947160
    },
    {
        "content": "<p>Or will mathlib break?</p>",
        "id": 126358307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947168
    },
    {
        "content": "<p>As you know from the docs</p>",
        "id": 126358315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947191
    },
    {
        "content": "<p>(i.e the chat)</p>",
        "id": 126358318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947197
    },
    {
        "content": "<p>Haha: <code>docs = logs</code> is now an <code>axiom</code>?</p>",
        "id": 126358320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947201
    },
    {
        "content": "<p>there was some discussion about this at some point</p>",
        "id": 126358322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947202
    },
    {
        "content": "<p>Jan 19th on gitter between Mario and Sebastian</p>",
        "id": 126358326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947224
    },
    {
        "content": "<p>according to my logs</p>",
        "id": 126358328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947231
    },
    {
        "content": "<p>Ok, gitter is from before my time</p>",
        "id": 126358370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947263
    },
    {
        "content": "<p>I'll quote it</p>",
        "id": 126358372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>To review, the problem is that the definition:\n\nclass module (α : out_param $ Type u) (β : Type v) [out_param $ ring α]\n  extends has_scalar α β, add_comm_group β :=\n...\n\nleads to a search problem in which ring ?M1 is solved before module ?M1 β, which leads to a loop when there is an instance like [ring A] [ring B] : ring (A x B)\nI would like to make lean search for module ?M1 β only, obtaining α and the ring instance by unification\nJohannes suggested using {out_param $ ring α} instead of [out_param $ ring α], but then it doesn&#39;t work as a typeclass, and all the multiplications etc in the theorem statements break\nA possible solution is to skip out_param typeclass search problems until after all the others are solved\n\n***\n\nSo the real issue is: You want the elaborator to handle applying a function {A B} [ring A] [module A B] (x : B) : ..., yes...?\nMario Carneiro\n@digama0\nJan 19 10:10\nyes\nSebastian Ullrich\n@Kha\nJan 19 10:10\nWhere you want it to solve the second instance first, which fixes A and the first instance\n</pre></div>",
        "id": 126358377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947301
    },
    {
        "content": "<p>Every now and again stuff like this happens and I become convinced that type class inference is too stupid to handle non-trivial maths stuff</p>",
        "id": 126358390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947356
    },
    {
        "content": "<p>There is this diamond catastrophe, today we learn that it doesn't work for things defeq to stuff that works etc etc</p>",
        "id": 126358436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947405
    },
    {
        "content": "<p>It is extremely delicate to get right</p>",
        "id": 126358441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947429
    },
    {
        "content": "<p>Yeah, I see that (-;</p>",
        "id": 126358442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947437
    },
    {
        "content": "<p>Anyway, lunch time over here... see you later!</p>",
        "id": 126358445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525947449
    },
    {
        "content": "<p>but on the plus side, every time I run into an explicit problem Mario has some workaround</p>",
        "id": 126358446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947459
    },
    {
        "content": "<p>One instance for maps, one for equivs:</p>",
        "id": 126358605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">Pi_lift</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">Pi_lift_map₁</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_right</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"err\">≃</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_right</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n <span class=\"k\">show</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126358606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947813
    },
    {
        "content": "<p>same proof</p>",
        "id": 126358607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947816
    },
    {
        "content": "<p>unsurprising because equivs are maps</p>",
        "id": 126358608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947825
    },
    {
        "content": "<p>[I'm in namespace is_add_group_hom]</p>",
        "id": 126358658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947863
    },
    {
        "content": "<p>but apparently I need both instances</p>",
        "id": 126358672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525947920
    },
    {
        "content": "<p>I guess one thing I am unclear about is what is wrong with the following fix : I create a mathlib PR which adds the function <code>Pi_lift_map₁ H</code> which sends a product of maps to a map on the product and rewrites <code>equiv.Pi_congr_right</code> to use this function. I then delete my second instance and observe that type class inference should spot it. But Mario, I think, suggested that this would not work either.</p>",
        "id": 126358778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948128
    },
    {
        "content": "<p>and oh wow I now have my type class inference working, my time-out was indeed caused by type class inference failing, it now doesn't fail, and I can feed my parameters into my functions :-) So finally my initial problem is solved in the best possible way!</p>",
        "id": 126358886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948345
    },
    {
        "content": "<p>I want to argue that this is all about transport of structure. I'm switching to the canonical thread.</p>",
        "id": 126358942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948485
    },
    {
        "content": "<p>You don't need to reprove the theorem</p>",
        "id": 126359245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949079
    },
    {
        "content": "<p>why is everyone using \"reprove\" to mean \"prove again\" lol</p>",
        "id": 126359246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525949091
    },
    {
        "content": "<p>just define the <code>equiv.Pi_congr_right</code> instance to equal <code>Pi_lift</code></p>",
        "id": 126359259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949132
    },
    {
        "content": "<blockquote>\n<p>and oh wow I now have my type class inference working, my time-out was indeed caused by type class inference failing, it now doesn't fail, and I can feed my parameters into my functions :-) So finally my initial problem is solved in the best possible way!</p>\n</blockquote>\n<p>Does it also solve your <code>max_depth</code> problem?</p>",
        "id": 126359452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525949455
    },
    {
        "content": "<p>unfortunately not, but I don't know what other terrible type class sins I have committed.</p>",
        "id": 126365201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525959584
    }
]