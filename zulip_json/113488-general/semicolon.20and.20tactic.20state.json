[
    {
        "content": "<p><a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F/near/188296878\" title=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F/near/188296878\">Jason's post in the \"ML for Lean\" topic</a> reminded me of this. It's really too bad that we can't see how the goals change before / after semicolons. </p>\n<p>I made a half-hearted attempt to see whether there was any way to implement this for 3.5.x, but I didn't get very far. I did manage to figure out that the relevant code is around <a href=\"https://github.com/leanprover-community/lean/blob/0d2b2697d163416d759f52e417d5579685e01d9e/library/init/meta/tactic.lean#L1029\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/0d2b2697d163416d759f52e417d5579685e01d9e/library/init/meta/tactic.lean#L1029\">here</a>, but I think I got stuck when I couldn't figure out how to get the cursor position to change the tactic state display using <code>save_info</code> (?).</p>\n<p>Does anyone have any suggestions for this?</p>",
        "id": 188297575,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1581798871
    },
    {
        "content": "<p>I would actually be curious to see how the tactic state reporting after <code>,</code> in <code>rw [a, b]</code> works, since that's unlike any other tactic; maybe we can generalize that to other contexts</p>",
        "id": 188297631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581798988
    },
    {
        "content": "<p>Yeah, I remember trying to understand that as well, I think it's around <a href=\"https://github.com/leanprover-community/lean/blob/dacb70b83853b23b2fc20afdc4d5888cee0d4363/library/init/meta/interactive.lean#L358\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/dacb70b83853b23b2fc20afdc4d5888cee0d4363/library/init/meta/interactive.lean#L358\">here</a>. I guess I should study <code>parser</code>.</p>",
        "id": 188297690,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1581799160
    },
    {
        "content": "<p>I think the way it works it that when an info request is sent from a certain position, <code>set_goal_info_pos</code> brackets a parser such that while that parser is running, request positions are edited to the beginning position, and then <code>save_info</code> is used to annotate these specific target positions in the text with the current goal state.</p>",
        "id": 188298655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581800825
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">have_many</span>\n  <span class=\"o\">(</span><span class=\"n\">es</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">list_of</span> <span class=\"err\">$</span> <span class=\"n\">set_goal_info_pos</span> <span class=\"err\">$</span>\n    <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">cur_pos</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">es</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n  <span class=\"n\">save_info</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">assertv</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"n\">t</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">have_many</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n    <span class=\"n\">zero_lt_one</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188299035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581801446
    },
    {
        "content": "<p>However, this won't work for making <code>;</code> display the goal state, because the <code>;</code> is parsed by the global parser, not a custom tactic parser</p>",
        "id": 188299157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581801640
    },
    {
        "content": "<p>you would have to change lean to support this</p>",
        "id": 188299160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581801653
    },
    {
        "content": "<p>Thanks! That definitely helps.</p>",
        "id": 188300359,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1581803924
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 188302130,
        "sender_full_name": "Tim Daly",
        "timestamp": 1581807236
    },
    {
        "content": "<p>Another related issue is that you need to type a comma to see the next proof state. It's very confusing for beginners. Is this something that could be easily changed?</p>",
        "id": 188773609,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1582318694
    },
    {
        "content": "<p>As a teacher I would love to see that changing. Students keep calling me to complain Lean is not happy since they don't see \"goals accomplished\", but they only miss one comma at the end.</p>",
        "id": 188778190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582321911
    },
    {
        "content": "<p>Another thing along these lines that I just discovered is that if one puts the curser right after a left curly brace <code>{</code>, it shows the goal state before the curly brace which could have multiple goals.  Just in case this behavior isn't universal, using Lean 3.4.2 and looking at line line 40 in <code>.../3.4.2/lean/library/init/data/fin/ops.lean</code> if one places the curser before and after the<code>{</code>, one gets</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>However, inside the <code>{...}</code> block it should just be the first goal.</p>",
        "id": 189214364,
        "sender_full_name": "Jason Rute",
        "timestamp": 1582810953
    },
    {
        "content": "<p>Oh, it is because there isn't a space after <code>{</code>.  In my example, the line 40 is <code>{simp [mod_zero], assumption},</code>.  If I add a space after the <code>{</code>, then the when I place the curser after the space, I do get the correct state: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 189215194,
        "sender_full_name": "Jason Rute",
        "timestamp": 1582811649
    }
]