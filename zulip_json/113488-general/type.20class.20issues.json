[
    {
        "content": "<p>This is amazing: <a href=\"https://gist.githubusercontent.com/jcommelin/8736c28a8e74f3d478b1c2b7737fa513/raw/d655018af064ef75572afb17d2ffb7d051c500c0/crazy_type_class_error.lean\" target=\"_blank\" title=\"https://gist.githubusercontent.com/jcommelin/8736c28a8e74f3d478b1c2b7737fa513/raw/d655018af064ef75572afb17d2ffb7d051c500c0/crazy_type_class_error.lean\">https://gist.githubusercontent.com/jcommelin/8736c28a8e74f3d478b1c2b7737fa513/raw/d655018af064ef75572afb17d2ffb7d051c500c0/crazy_type_class_error.lean</a><br>\nI feel like the algorithm could be a lot smarter here. For example, search for <code>x_52</code> on that page, and go to the first match. You will be on the last line of this chunk of code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_32</span> <span class=\"o\">:</span> <span class=\"n\">category</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comma</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">B</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">site</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n     <span class=\"n\">punit</span>\n     <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">punit_category</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">site</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">site</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n        <span class=\"n\">B</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">site</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma_category</span> <span class=\"err\">?</span><span class=\"n\">x_51</span> <span class=\"err\">?</span><span class=\"n\">x_52</span> <span class=\"err\">?</span><span class=\"n\">x_53</span> <span class=\"err\">?</span><span class=\"n\">x_54</span> <span class=\"err\">?</span><span class=\"n\">x_55</span> <span class=\"err\">?</span><span class=\"n\">x_56</span> <span class=\"err\">?</span><span class=\"n\">x_57</span> <span class=\"err\">?</span><span class=\"n\">x_58</span>\n</pre></div>\n\n\n<p>So basically it has already figured out all these type class instances, and it should immediately be able to fill in <code>?x_52</code> and friends. But it doesn't... and then it hits the search limit.</p>",
        "id": 147694692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542225258
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_238</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">small_category</span> <span class=\"err\">?</span><span class=\"n\">x_422</span> <span class=\"err\">?</span><span class=\"n\">x_423</span>\n</pre></div>\n\n\n<p>goes all the way down to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_460</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_field</span> <span class=\"err\">?</span><span class=\"n\">x_461</span> <span class=\"err\">?</span><span class=\"n\">x_462</span>\n</pre></div>\n\n\n<p>I guess it might be a good idea to insert a shortcut somewhere?</p>",
        "id": 147695687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542226250
    },
    {
        "content": "<p>looks like the actual solution is <code>category punit := category_theory.punit_category</code></p>",
        "id": 147695787,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542226379
    },
    {
        "content": "<p>can we use instance priority to guide the search here?</p>",
        "id": 147695801,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542226392
    },
    {
        "content": "<p>the funny thing is that <code>punit</code>actually has a unique structure of all those classes it looks for</p>",
        "id": 147695900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542226465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm really confused, because a lot of the time it is finding that instance. But that sometimes it goes astray...</p>",
        "id": 147695970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542226519
    },
    {
        "content": "<p>Well, it did find it here, eventually</p>",
        "id": 147696000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542226547
    },
    {
        "content": "<p>Everything looks more or less fine until the max depth error</p>",
        "id": 147696077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542226569
    },
    {
        "content": "<p>Hmmm, would it be good strategy if Lean is searching for an instance of <code>foo bar</code> to first check if maybe <code>bar.foo</code> exists?</p>",
        "id": 147696157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542226682
    },
    {
        "content": "<p>Because that would find <code>punit.category</code> instantly...</p>",
        "id": 147696190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542226697
    },
    {
        "content": "<p>Ahrg, this is so annoying. So now I can start writing lots of <code>@</code> signs, and insert the typeclass instances manually, and the code becomes unreadable...</p>",
        "id": 147696563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542227075
    },
    {
        "content": "<p>I really doubt how this will scale</p>",
        "id": 147696720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227265
    },
    {
        "content": "<p>as we get more things into mathlib</p>",
        "id": 147696724,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227271
    },
    {
        "content": "<p>I think <code>category_theory.small_category</code> is misnamed...</p>",
        "id": 147696835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542227354
    },
    {
        "content": "<p>Either <span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span> will have to improve the instance search algorithm, or we will have to start being more careful about how we write instances, with other tradeoffs</p>",
        "id": 147697038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542227537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can you elaborate?</p>",
        "id": 147697069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542227594
    },
    {
        "content": "<p>I now have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">limit</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span> <span class=\"bp\">_</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma_category</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">punit_category</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"o\">((</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">â</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>and I get red squiggles under the <code>â</code> at the end.</p>",
        "id": 147697085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542227631
    },
    {
        "content": "<p>Errors:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">ð</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span> <span class=\"err\">â¥</span><span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"err\">áµáµ</span>\n<span class=\"err\">â¢</span> <span class=\"n\">category</span> <span class=\"n\">comma</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"err\">áµáµ</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"err\">â</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">ð</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span> <span class=\"err\">â¥</span><span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"err\">áµáµ</span>\n<span class=\"err\">â¢</span> <span class=\"n\">category</span> <span class=\"n\">comma</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"err\">áµáµ</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"err\">â</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"err\">ð</span>\n<span class=\"n\">inferred</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"err\">ð</span>\n<span class=\"n\">inferred</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jmc</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">math</span><span class=\"bp\">/</span><span class=\"n\">community</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">415</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"err\">?</span><span class=\"n\">m_7</span> <span class=\"err\">?</span><span class=\"n\">m_9</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">â¶</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_9</span> <span class=\"err\">â</span> <span class=\"err\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"err\">â</span> <span class=\"n\">Uâ</span> <span class=\"err\">â¶</span> <span class=\"err\">â</span> <span class=\"n\">Uâ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"err\">ð</span>\n<span class=\"n\">inferred</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"err\">ð</span>\n<span class=\"n\">inferred</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">414</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"err\">ð</span>\n<span class=\"n\">inferred</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</pre></div>",
        "id": 147697150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542227680
    },
    {
        "content": "<p><code>instance [preorder Î±] : small_category Î± := ...</code> got the name <code>category_theory.small_category</code></p>",
        "id": 147697169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542227687
    },
    {
        "content": "<p>Aaah, that's not so nice. That should be in the <code>preorder</code> namespace.</p>",
        "id": 147697217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542227729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> talk about <code>is_ring_hom.is_ring_hom</code></p>",
        "id": 147697224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227753
    },
    {
        "content": "<p>what is that even?</p>",
        "id": 147697277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542227773
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/ring_theory/subring.lean#L28\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/ring_theory/subring.lean#L28\">https://github.com/leanprover/mathlib/blob/master/ring_theory/subring.lean#L28</a></p>",
        "id": 147697318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227838
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">is_ring_hom</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">is_ring_hom</span>\n</pre></div>",
        "id": 147697322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227846
    },
    {
        "content": "<p>guess how this would be called</p>",
        "id": 147697323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227849
    },
    {
        "content": "<p>also what on earth is it with the <code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 147697386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227892
    },
    {
        "content": "<p>There's also some bug where Lean's normal naming strategy for an instance is not used under certain circumstances (I'm not sure exactly which)</p>",
        "id": 147697389,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542227898
    },
    {
        "content": "<p><code>classical.prop_decidable</code> existed long before <code>classical.dec</code>, I think it's in the style guide and TPIL</p>",
        "id": 147697402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542227942
    },
    {
        "content": "<p>I mean, who on earth put it there</p>",
        "id": 147697419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227954
    },
    {
        "content": "<p>you don't need any classical stuff for subrings</p>",
        "id": 147697433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542227969
    },
    {
        "content": "<p>We could have a strategy where we don't write instances like <code>instance [preorder Î±] : small_category Î±</code>, but rather <code>instance [preorder Î±] : small_category (preorder Î±)</code>, where <code>def preorder Î± := Î±</code></p>",
        "id": 147697448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542227992
    },
    {
        "content": "<p>maybe it was needed once, or a mathematician wrote the file</p>",
        "id": 147697501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228005
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Authors: Johan Commelin\n</pre></div>",
        "id": 147697510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228022
    },
    {
        "content": "<p>but curiously he was never part of the file's history</p>",
        "id": 147697534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228060
    },
    {
        "content": "<p>That would cut out all the silly search starting <code>preorder punit</code> (actually it is not really silly, since <code>punit</code> could very well be a <code>preorder</code>, but anyways we want a different instance)</p>",
        "id": 147697546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542228080
    },
    {
        "content": "<p>I think we need to think about a more principled approach to instance priorities</p>",
        "id": 147697571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228121
    },
    {
        "content": "<p>for preorder categories, I guess it depends on whether you view it as \"a preorder is a special kind of category\" or \"any preorder can be equipped with a canonical category structure\"</p>",
        "id": 147697726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228252
    },
    {
        "content": "<p>I think we need to refactor the typeclass search system</p>",
        "id": 147697751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228294
    },
    {
        "content": "<p>but I don't know how any of those things work</p>",
        "id": 147697754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228299
    },
    {
        "content": "<p>so I might have said nothing in the first place</p>",
        "id": 147697761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228304
    },
    {
        "content": "<p>Well I'm not necessarily thinking about anything as anything, I just want to avoid these 20 pages of failed instance searches whenever I try to look for a category instance which is after the preorder one.</p>",
        "id": 147697770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542228315
    },
    {
        "content": "<p><span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 147697771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228317
    },
    {
        "content": "<p>I think the instance search is as stupid as <code>simp</code></p>",
        "id": 147697786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228335
    },
    {
        "content": "<p>it's much worse than <code>simp</code></p>",
        "id": 147697792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228343
    },
    {
        "content": "<p>and we still haven't fixed the problem with <code>simp</code></p>",
        "id": 147697793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228345
    },
    {
        "content": "<p>for the love of god</p>",
        "id": 147697796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228350
    },
    {
        "content": "<p>who thought depth first search is a good idea (instance) and who thought breadth first search is a good idea (simp)</p>",
        "id": 147697859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228389
    },
    {
        "content": "<p>but I don't study CS</p>",
        "id": 147697865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228398
    },
    {
        "content": "<p>But it's not a tactic, it's built into lean, so there is very little customization or alternatives we can try in lean 3</p>",
        "id": 147697892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228431
    },
    {
        "content": "<p>at least not without forking lean</p>",
        "id": 147697903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228453
    },
    {
        "content": "<p>OK here is a thought. What if we by convention give each instance which doesn't match against the head a lower priority</p>",
        "id": 147697923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542228480
    },
    {
        "content": "<p>i.e. each instance of the form \\Pi a, ... : C a</p>",
        "id": 147697982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542228500
    },
    {
        "content": "<p>Because of course we want to match against things like ... : C (T a) first, if we're trying to find an instance C (T ...)</p>",
        "id": 147698031,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542228544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but from your CS experience, what is the best search method?</p>",
        "id": 147698041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228550
    },
    {
        "content": "<p>There are two essentially different kinds of instances: \"parent coercions\" that change the head, and things that change the type to something smaller and leave the head alone</p>",
        "id": 147698061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228573
    },
    {
        "content": "<p>we know the search terminates in the second case because it's well founded on the structure construction, and in the first case because our tree of classes is finite</p>",
        "id": 147698151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228618
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>git grep &quot;^instance&quot; | wc -l\n1515\n</pre></div>",
        "id": 147698155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542228624
    },
    {
        "content": "<p>that last one is obviously problematic</p>",
        "id": 147698156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228626
    },
    {
        "content": "<p>because it gets worse as you add more things anywhere in mathlib</p>",
        "id": 147698176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228659
    },
    {
        "content": "<p>I think TREE(3) is also finite so I don't really get your point</p>",
        "id": 147698179,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228661
    },
    {
        "content": "<p>are we satisfied with \"it will eventually terminate\"?</p>",
        "id": 147698220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228708
    },
    {
        "content": "<p>it's an important first step</p>",
        "id": 147698273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228730
    },
    {
        "content": "<p>the next question is \"how finite\" of course</p>",
        "id": 147698287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228740
    },
    {
        "content": "<p>and this depends on how much typeclass caching lean does</p>",
        "id": 147698316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228763
    },
    {
        "content": "<p>so I'm not sure on the details</p>",
        "id": 147698326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228771
    },
    {
        "content": "<p>We want it to be mostly linear</p>",
        "id": 147698353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228796
    },
    {
        "content": "<p>How about prioritizing type 1? Like Reid suggested?</p>",
        "id": 147698380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542228818
    },
    {
        "content": "<p>Parent coercions have a fixed priority, I don't think we can change it</p>",
        "id": 147698457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228857
    },
    {
        "content": "<p>This is one place where I think lean is using the wrong search strategy btw</p>",
        "id": 147698471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228882
    },
    {
        "content": "<p>Oh I forgot about parent coercions.</p>",
        "id": 147698489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542228901
    },
    {
        "content": "<p>we don't we ask the big guys about the typeclass system  in lean 4?</p>",
        "id": 147698509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542228928
    },
    {
        "content": "<p>If we call type coercions type 1 and parent / \"head changing\" coercions type 2, then I think we should use backward chaining for type 1 and forward chaining for type 2</p>",
        "id": 147698568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542228964
    },
    {
        "content": "<p>For example, if you prove that <code>ordered_field real</code> then lean will pre-calculate proofs of <code>preorder real</code> and a bunch of other stuff</p>",
        "id": 147698636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229030
    },
    {
        "content": "<p>Are we talking about actual parent coercions like from <code>group</code> to <code>monoid</code>?</p>",
        "id": 147698639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229034
    },
    {
        "content": "<p>yes</p>",
        "id": 147698640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229039
    },
    {
        "content": "<p>So then there are also things like <code>preorder</code> to <code>category</code></p>",
        "id": 147698651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229062
    },
    {
        "content": "<p>yes</p>",
        "id": 147698657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229073
    },
    {
        "content": "<p>And I guess both of those fall under type 2</p>",
        "id": 147698711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229094
    },
    {
        "content": "<p>and if you have <code>ordered_field A</code> in the context then it calculates <code>preorder A</code> when solving typeclass problems</p>",
        "id": 147698721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how does this work in metamath?</p>",
        "id": 147698730,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542229131
    },
    {
        "content": "<p>You get to do this stuff yourself, but there is a smallish spine so it's at most two or three theorem applications to get from anything to anything else</p>",
        "id": 147698822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229209
    },
    {
        "content": "<p>the backward chaining stuff might be done automatically in later versions?</p>",
        "id": 147698838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229233
    },
    {
        "content": "<p>It's all third party stuff though</p>",
        "id": 147698844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229261
    },
    {
        "content": "<p>So is there any hope we can improve the system in Lean 3?</p>",
        "id": 147698856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542229266
    },
    {
        "content": "<p>this is emphatically not part of \"metamath core\"</p>",
        "id": 147698861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229268
    },
    {
        "content": "<p>priorities seem like the best option, but we need a good rule</p>",
        "id": 147698889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229305
    },
    {
        "content": "<p>I have hope for reid's proposal</p>",
        "id": 147698960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229344
    },
    {
        "content": "<p>The obvious, but more annoying variant is to raise the priority of every \"type 1\" instance</p>",
        "id": 147699006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229396
    },
    {
        "content": "<p>I think Mario said that those were fixed... but maybe I misunderstood which type he referred to...</p>",
        "id": 147699081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542229468
    },
    {
        "content": "<p>I'm also a little confused about Mario's description of the two types</p>",
        "id": 147699099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229488
    },
    {
        "content": "<p>In Haskell, if we have an instance C (T a b), we call T the instance head</p>",
        "id": 147699106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229499
    },
    {
        "content": "<p>C is the class</p>",
        "id": 147699112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229502
    },
    {
        "content": "<p>I'm not sure whether Mario is using the same terminology, or switched the classes or what</p>",
        "id": 147699143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229519
    },
    {
        "content": "<p>I called <code>C</code> the head there</p>",
        "id": 147699181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229545
    },
    {
        "content": "<p>so parent coercions change the head, i.e. C a =&gt; D a</p>",
        "id": 147699257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229569
    },
    {
        "content": "<p>and type coercions are like C a , C b =&gt; C (T a b)</p>",
        "id": 147699274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229584
    },
    {
        "content": "<p>I might be wrong in assuming instances like C a, C b =&gt; C (T a b) are more common in mathlib--in standard Haskell they're the only kind of instances you are allowed to write</p>",
        "id": 147699409,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229713
    },
    {
        "content": "<p>(instance C a =&gt; D a is illegal)</p>",
        "id": 147699421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229735
    },
    {
        "content": "<p>That's not true, I think you can do parent coercions in Haskell too</p>",
        "id": 147699422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229739
    },
    {
        "content": "<p>With GHC extensions</p>",
        "id": 147699436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229757
    },
    {
        "content": "<p>But the effect is probably like 99% of all instances are of the C (T a b) form</p>",
        "id": 147699460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229777
    },
    {
        "content": "<p>oh, I see, there are parent coercions but no user defined parent coercions</p>",
        "id": 147699675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229928
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class Test a where\n  test :: a -&gt; a\nclass Test a =&gt; Test2 a where\n  test2 :: a -&gt; a\n</pre></div>",
        "id": 147699698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229954
    },
    {
        "content": "<p>this is okay</p>",
        "id": 147699702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542229960
    },
    {
        "content": "<p>There isn't even a coercion in the same sense as in Lean</p>",
        "id": 147699713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229970
    },
    {
        "content": "<p>There, to write a <code>Test2</code> instance, you must first write a <code>Test</code> instance</p>",
        "id": 147699716,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542229982
    },
    {
        "content": "<p>The purpose of <code>Test a =&gt; Test2 a</code> is instead to avoid writing contexts like <code>(Test a, Test2 a) =&gt; t</code></p>",
        "id": 147699746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542230014
    },
    {
        "content": "<p>that's the same as in lean</p>",
        "id": 147699751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542230021
    },
    {
        "content": "<p>Oh, well... I guess Lean hides the need to write the <code>Test</code> instance separately</p>",
        "id": 147699839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542230071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class Test (a : Type) := (test : a â a)\nclass Test2 (a : Type) extends Test a := (test2 : a â a)\n\ninstance : Test nat := {test := id}\ninstance : Test2 nat := {test2 := id} --requires the first instance\n</pre></div>",
        "id": 147699854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542230094
    },
    {
        "content": "<p>But you can also write <code>instance : Test2 nat := {test := id, test2 := id}</code> without the first instance, which has no equivalent in Haskell</p>",
        "id": 147699882,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542230142
    },
    {
        "content": "<p>Maybe lean should do that too</p>",
        "id": 147699933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542230167
    },
    {
        "content": "<p>that is essentially requiring the user to do the forward chaining thing I said</p>",
        "id": 147699943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542230188
    },
    {
        "content": "<p>I actually don't know off-hand how GHC solves a <code>Test a</code> constraint if you only have <code>Test2</code> in the context</p>",
        "id": 147699966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542230219
    },
    {
        "content": "<p>I wouldn't be surprised if it does forward chaining in that situation</p>",
        "id": 147699996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542230253
    },
    {
        "content": "<p>you mean when you have <code>test :: Test2 a =&gt; a -&gt; a</code>?</p>",
        "id": 147700076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542230324
    },
    {
        "content": "<p>Basically, yeah.</p>",
        "id": 147700092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542230339
    },
    {
        "content": "<p>I think it is complete in Haskell's case to always saturate downwards (derive all superclasses of all the things in the context) and then backward chain from uses (without using any parent coercions)</p>",
        "id": 147700424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542230679
    },
    {
        "content": "<p>Aahrg, Lean is just becoming completely unresponsive when I try to fill in the instances by hand.</p>",
        "id": 147731225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542275326
    },
    {
        "content": "<p>Look at the code that I have now: this is getting pretty crazy...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">_</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">_</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">punit_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"n\">to_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"o\">((</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">â</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limit_of_has_limits_of_shape</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 147731254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542275384
    },
    {
        "content": "<p>welcome to the club :P</p>",
        "id": 147731470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542275680
    },
    {
        "content": "<p>Ok, I need to confess. I'm making a big fool out of myself. There was actually a missing assumption... so no wonder Lean couldn't find the instance. The code is now back to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">â</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>However</strong> it is still taking &gt;10s to typecheck this stuff. Before I removed all the explicit instances, it also took &gt;10s.</p>",
        "id": 147731810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542276218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<blockquote>\n<p>Johan Commelin: So is there any hope we can improve the system in Lean 3?</p>\n</blockquote>\n<p>To improve Lean 3, you need to fork it, and improve it yourself. The development is frozen in the main repo, and all efforts are focused on Lean 4. That being said, nobody should expect Lean 4 will solve all problems and everybody will be happy.</p>",
        "id": 147797050,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1542345794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </p>\n<blockquote>\n<p>Kenny Lau: we don't we ask the big guys about the typeclass system in lean 4?</p>\n</blockquote>\n<p>We didn't get there yet. We have only random ideas on how to improve the typeclass system in lean 4.</p>",
        "id": 147797116,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1542345947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </p>\n<blockquote>\n<p>Kenny Lau: I think we need to refactor the typeclass search system</p>\n</blockquote>\n<p>If you want a better typeclass system in the next few months, you should fork the current system, and refactor the typeclass search system yourself.</p>",
        "id": 147797179,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1542346055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Ok, I was hoping that maybe we could use priorities to guide the type class system. Anyway, thanks for the input! And thanks for all you're doing for Lean (3 and 4).</p>",
        "id": 147797342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542346418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes, priorities will help. Shortcuts will help too. Example: <a href=\"https://github.com/leanprover/lean/blob/master/library/init/data/int/basic.lean#L418-L429\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/data/int/basic.lean#L418-L429\">https://github.com/leanprover/lean/blob/master/library/init/data/int/basic.lean#L418-L429</a></p>",
        "id": 147797450,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1542346605
    },
    {
        "content": "<p>These are just workarounds.</p>",
        "id": 147797467,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1542346676
    },
    {
        "content": "<p>It's not clear to me how much shortcuts actually help, though, because they make the typeclass graph even larger</p>",
        "id": 147800392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542352026
    },
    {
        "content": "<p>if you have instances from A -&gt; B -&gt; C and add a shortcut A -&gt; C, then a typeclass search for some unrelated F will traverse both paths to C (and possibly the entire subtree rooted at C)</p>",
        "id": 147800445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542352084
    },
    {
        "content": "<p>Are there any plans for lean 4 to do anything with the typeclass system?</p>",
        "id": 147800469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542352187
    },
    {
        "content": "<p>You can add the shortcuts using local attributes. In this way, you can add shortcuts to a file without affecting other files.</p>",
        "id": 147800852,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1542352803
    },
    {
        "content": "<p>Sebastian and I discussed a few improvements (e.g., better indexing and caching), but as I said above these are just ideas on the whiteboard. We didnât get there yet.</p>",
        "id": 147800886,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1542352915
    }
]