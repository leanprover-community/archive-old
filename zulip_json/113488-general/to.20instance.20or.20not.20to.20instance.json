[
    {
        "content": "<p>Clearly, the following instances form a loop together. Do we have design principles that dictate which should be instance and which should be lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">ff.left</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">ff.right</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_iso</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">inv</span> <span class=\"n\">ff.left</span><span class=\"o\">,</span> <span class=\"n\">inv</span> <span class=\"n\">ff.right</span><span class=\"o\">⟩,</span>\n          <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_iso.hom_inv_id</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n          <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_iso.inv_hom_id</span><span class=\"o\">]</span> <span class=\"o\">}⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">left_is_iso</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">sq</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"n\">sq.left</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">inv</span> <span class=\"n\">sq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comma.comp_left</span><span class=\"o\">,</span> <span class=\"n\">is_iso.hom_inv_id</span><span class=\"o\">,</span> <span class=\"n\">is_iso.inv_hom_id</span><span class=\"o\">,</span>\n    <span class=\"n\">arrow.id_left</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">right_is_iso</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">sq</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"n\">sq.right</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">inv</span> <span class=\"n\">sq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comma.comp_right</span><span class=\"o\">,</span> <span class=\"n\">is_iso.hom_inv_id</span><span class=\"o\">,</span> <span class=\"n\">is_iso.inv_hom_id</span><span class=\"o\">,</span>\n    <span class=\"n\">arrow.id_right</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 259087752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635251067
    },
    {
        "content": "<p>The first one should not be an instance because it loops (at least as far as I can see the types).</p>",
        "id": 259088059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635251276
    },
    {
        "content": "<p>The first one alone doesn't loop, right?</p>",
        "id": 259088171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635251330
    },
    {
        "content": "<p>But it's somehow an \"extensionality instance\" if that makes sense. Maybe those are \"bad\"? Can/should we lint against those?</p>",
        "id": 259088278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635251396
    },
    {
        "content": "<p>Ah, because <code>ff.left</code> is no longer a morphism between objects in an arrow.</p>",
        "id": 259088741,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635251637
    },
    {
        "content": "<p>Or at least, if it is, then in a different category. (If you start with <code>f g : arrow (arrow T)</code>)</p>",
        "id": 259089050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635251779
    },
    {
        "content": "<p>Ideally <code>is_iso</code> would not exist as a class at all (there are a lot of ways to prove that a map is an isomorphism and many of them are not \"syntactic\"). However, the loop-breaking rule is generally that the instance head(s) should get smaller when you apply an instance.</p>",
        "id": 259090608,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635252577
    },
    {
        "content": "<p>Which in thise case means that nr1 should not be an instance, and the other two are fine, right?</p>",
        "id": 259091798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635253165
    }
]