[
    {
        "content": "<p>I am assuming that the following should be easy, or at least possible.</p>",
        "id": 123177763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985835
    },
    {
        "content": "<p>I have a \"definition\" of an affine scheme in Lean</p>",
        "id": 123177765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985847
    },
    {
        "content": "<p>but it's not yet complete because it relies on a definition</p>",
        "id": 123177766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985860
    },
    {
        "content": "<p>which uses another definition</p>",
        "id": 123177768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985874
    },
    {
        "content": "<p>which uses another definition</p>",
        "id": 123177810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985891
    },
    {
        "content": "<p>which uses sorry</p>",
        "id": 123177811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985897
    },
    {
        "content": "<p><code>leanpkg build</code> will tell you about this</p>",
        "id": 123177812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519985929
    },
    {
        "content": "<p>I was expecting to be able to spot this in VS Code (or emacs)</p>",
        "id": 123177814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985940
    },
    {
        "content": "<p>but <code>#print affine_scheme</code> and <code>#check affine_scheme</code> don't seem to mention this</p>",
        "id": 123177821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519985957
    },
    {
        "content": "<p><code>#print axioms affine_scheme</code> should do the trick</p>",
        "id": 123177962,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1519986207
    },
    {
        "content": "<p>Aah yes, thanks</p>",
        "id": 123177968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519986222
    },
    {
        "content": "<p>I knew there was a way.</p>",
        "id": 123177969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519986225
    },
    {
        "content": "<p>I used the powerful <code>sorry</code> axiom.</p>",
        "id": 123177972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519986234
    },
    {
        "content": "<p>I wonder why they didn't make this part of ZFC.</p>",
        "id": 123178001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519986243
    },
    {
        "content": "<p>&lt;close topic&gt;</p>",
        "id": 123178022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519986256
    },
    {
        "content": "<p>IIRC it's a very well known large cardinal axiom.</p>",
        "id": 123178029,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1519986285
    },
    {
        "content": "<p>Oh wait there's still something I don't understand</p>",
        "id": 123321180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520288122
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition foo : ℕ → ℕ := sorry\n\nstructure bar :=\n(baz : ℕ → ℕ)\n(H : baz = foo)\n\n#print axioms bar\n</pre></div>",
        "id": 123321186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520288138
    },
    {
        "content": "<p>Claims no axioms</p>",
        "id": 123321193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520288151
    },
    {
        "content": "<p>What I am hoping to find is either a method for detecting when my definition is finished</p>",
        "id": 123321247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520288190
    },
    {
        "content": "<p>or a proof that this can't be done</p>",
        "id": 123321248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520288196
    },
    {
        "content": "<p>but in my mind bar is not yet finished because it relies on unfinished foo</p>",
        "id": 123321253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520288209
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#print axioms bar.mk\n</pre></div>\n\n\n<p>seems to work</p>",
        "id": 123330439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520304797
    }
]