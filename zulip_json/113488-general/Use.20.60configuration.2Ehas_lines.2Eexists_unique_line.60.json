[
    {
        "content": "<p>How do I use <code>configuration.has_lines.exists_unique_line</code> to complete <code>  have hll₂ : l = l₂, from</code>... below ? I tried a few things, most of them similar to <code>have g: ∃! m : L, p₂ ∈ m ∧ p₃ ∈ m, apply configuration.has_lines.exists_unique_line p₂ p₃ hp₂p₃</code>, which gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">configuration.has_lines.exists_unique_line</span> <span class=\"n\">p₂</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p₂</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And do I need the two lemmas <code>distinct_lines</code> and <code>distinct_points</code>? My gut says I'm likely reinventing the wheel.</p>\n<p>Any other comments, criticisms, etc. about my proof so far would be most appreciated.  Having fun learning Lean! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Here's teh code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">distinct_lines</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∉</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">≠</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">distinct_points</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">axiom_3_alternative</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"n\">p₄</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span>\n  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₄</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₄</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span>  <span class=\"n\">p₄</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span>\n      <span class=\"n\">p₁</span> <span class=\"bp\">∉</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∉</span> <span class=\"n\">l₃</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∉</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span>\n        <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₃</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∉</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∉</span> <span class=\"n\">l₃</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">exists_config</span><span class=\"o\">,</span>\n\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p₁</span><span class=\"o\">,</span> <span class=\"n\">p₂</span><span class=\"o\">,</span> <span class=\"n\">p₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h₁₂</span><span class=\"o\">,</span> <span class=\"n\">h₁₃</span><span class=\"o\">,</span> <span class=\"n\">h₂₁</span><span class=\"o\">,</span> <span class=\"n\">h₂₂</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"o\">,</span> <span class=\"n\">h₃₁</span><span class=\"o\">,</span> <span class=\"n\">h₃₂</span><span class=\"o\">,</span> <span class=\"n\">h₃₃</span><span class=\"o\">⟩,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">hl₃l₁</span><span class=\"o\">:</span> <span class=\"n\">l₃</span> <span class=\"bp\">≠</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span>  <span class=\"n\">distinct_lines</span> <span class=\"n\">h₂₃</span> <span class=\"n\">h₂₁</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">hp₂p₃</span><span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">≠</span> <span class=\"n\">p₃</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span>  <span class=\"o\">(</span><span class=\"n\">distinct_points</span> <span class=\"n\">h₂₃</span> <span class=\"n\">h₃₃</span><span class=\"o\">),</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">mk_point</span> <span class=\"n\">hl₃l₁</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">p₁</span><span class=\"o\">,</span> <span class=\"n\">p₂</span><span class=\"o\">,</span> <span class=\"n\">p₃</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">],</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">L</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l₃</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_point_ax</span> <span class=\"n\">hl₃l₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁₂₃</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁l</span> <span class=\"n\">h_right</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h_right</span> <span class=\"k\">with</span> <span class=\"n\">h₂l</span> <span class=\"n\">h₃l</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hll₂</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n        <span class=\"kd\">begin</span>\n          <span class=\"k\">have</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">configuration.has_lines.exists_unique_line</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"n\">hp₂p₃</span>\n        <span class=\"kd\">end</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h₁₂q</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h₁₃q</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h₂₃q</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁₂₃q</span> <span class=\"o\">:</span>  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n      <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n      <span class=\"k\">from</span>  <span class=\"o\">⟨</span><span class=\"n\">h₁₂₃</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h₁₂q</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h₁₃q</span><span class=\"o\">,</span> <span class=\"n\">h₂₃q</span><span class=\"o\">⟩⟩⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁₂₃q</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 321392172,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1673719266
    },
    {
        "content": "<p>You are just missing some explicit arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">configuration.has_lines.exists_unique_line</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"n\">hp₂p₃</span>\n</code></pre></div>\n<p>Some comments:<br>\n<code>distinct_lines</code> is a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_mem_of_not_mem'\">docs#ne_of_mem_of_not_mem'</a>, and<br>\n<code>distinct_points</code> is a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_mem_of_not_mem\">docs#ne_of_mem_of_not_mem</a>.<br>\n<code>⟨h₁₂₃, ⟨h₁₂q, ⟨h₁₃q, h₂₃q⟩⟩⟩,</code> can be written <code>⟨h₁₂₃, h₁₂q, h₁₃q, h₂₃q⟩,</code></p>",
        "id": 321405662,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673727870
    }
]