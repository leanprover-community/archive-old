[
    {
        "content": "<p>I have 20 Lean projects to mark (manually -- they all do different things). Because in theory Lean can run arbitrary code on my machine, I am grepping for <code>run_cmd</code> before I open anything in VS Code. Should that be OK?</p>",
        "id": 270907907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644176822
    },
    {
        "content": "<p>Do it in a docker container?</p>",
        "id": 270907922,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644176844
    },
    {
        "content": "<p>I'm sure that's what you'd do but I just want to get going marking these things. Basically are you saying \"it is impossible to protect yourself from evil people\"?</p>",
        "id": 270908126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644177072
    },
    {
        "content": "<p>Sandboxing is hard. My approach to sandboxing arbitrary code is usually to do it on someone else's machine. This is from my experience of accidentally bricking my own machine with code I wrote that I though wouldn't.</p>",
        "id": 270908232,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644177173
    },
    {
        "content": "<p>OK maybe I'm simply asking the wrong question here and I should instead be considering how to mark them on another machine. I really just want to have some VS Code window in front of me -- is that going to be difficult? I don't know anything about this sort of stuff. I'm hoping to do the marking on a linux box.</p>",
        "id": 270908595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644177601
    },
    {
        "content": "<p>Agda has a <code>--safe</code> flag that, apart from forbidding axioms, also forbids executing arbitrary code and system calls. Perhaps we want something like that?</p>",
        "id": 270908812,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1644177724
    },
    {
        "content": "<p>Can you install Ubuntu on that laptop in your drawer that you haven't used in 10 years?</p>",
        "id": 270908836,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644177763
    },
    {
        "content": "<p>i can totally see some embedding some <code>system.io</code> code using some tactic wrapper</p>",
        "id": 270908857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644177801
    },
    {
        "content": "<p>Vs code has really good support for using vs code over ssh (into another machine) or exec into a Docker container.  It’s easy to set up.  It is just a plug-in, and it looks and feels like you are on your own machine.</p>",
        "id": 270908861,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644177804
    },
    {
        "content": "<p><a href=\"https://code.visualstudio.com/docs/remote/ssh-tutorial\">https://code.visualstudio.com/docs/remote/ssh-tutorial</a></p>",
        "id": 270908939,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644177881
    },
    {
        "content": "<p><a href=\"https://code.visualstudio.com/docs/remote/containers-tutorial\">https://code.visualstudio.com/docs/remote/containers-tutorial</a></p>",
        "id": 270908950,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644177904
    },
    {
        "content": "<p>A different way to look at this is <code>limiting write access for user X</code>. Then instead of running the code as yourself which typically implies unlimited access, you create a separate user with limited access and then run the code as that user.</p>",
        "id": 270908958,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1644177918
    },
    {
        "content": "<p>Another option is <code>firejail</code>, which I think is based on <code>apparmor</code> hence is built in security from the kernel, but all of these issues probably take much more fiddling than just installing a fresh Ubuntu+lean on an old laptop, and disconnecting it from the internet before running any potentially unsafe thing.</p>",
        "id": 270909076,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644178077
    },
    {
        "content": "<p>(As for my message, when I said it is easy, I mean on the vs code side.  You still need access to a remote machine with lean installed, or a local Docker container with lean installed.)</p>",
        "id": 270909125,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644178106
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">contrib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">build</span><span class=\"bp\">-</span><span class=\"n\">action</span>\n<span class=\"n\">docker</span> <span class=\"n\">build</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">build</span><span class=\"bp\">-</span><span class=\"n\">action</span> <span class=\"bp\">-</span><span class=\"n\">t</span> <span class=\"n\">my</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">container</span>\n</code></pre></div>\n<p>Then install VSCode \"Remote - Containers\" extension.<br>\nI am preparing the instructions of what to do next</p>",
        "id": 270909237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644178292
    },
    {
        "content": "<p>PS. I would be more concerned about some malicious <code>curl</code> command silently stealing your <code>~\\.keys</code> folder as opposed to wiping you HDD.</p>",
        "id": 270909496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644178582
    },
    {
        "content": "<p>Is the Lean Web Editor limited in the right ways? (I have absolutely no idea, but wouldn't be surprised if the answer were \"it's safe\".)</p>",
        "id": 270909671,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1644178871
    },
    {
        "content": "<p>Except that won't handle several files at the same time</p>",
        "id": 270909683,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644178893
    },
    {
        "content": "<p>There is an old lean 3 issue about this. The short answer is \"it's completely unsafe to run lean code, use external sandboxing if you need protection\".</p>",
        "id": 270909784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644179019
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1781\">https://github.com/leanprover/lean/issues/1781</a></p>",
        "id": 270909866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644179137
    },
    {
        "content": "<p>Another option is to use the online version of Lean, right?  [Edit: I checked and it doesn't seem to execute command line code (and I can't imagine how it even could int eh browser).]</p>",
        "id": 270910375,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644179855
    },
    {
        "content": "<p>How big are each of these projects? A few files? Tens of files? A few hundred lines, a few thousand?</p>",
        "id": 270910735,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1644180287
    },
    {
        "content": "<p>On a practical side if you trust your students enough to not be super villains (just ordinary villains), I think if you also grep for <code>system.io</code>, I can’t see a way to do malicious stuff without accessing the io monad.  (I’m not saying there isn’t one, but it would require a really good hacker I think.)</p>",
        "id": 270911856,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644181602
    },
    {
        "content": "<p>The original version of my post said I was checking imports for <a href=\"http://system.io\">system.io</a> but then I discovered that mathlib's tactic/core.lean imports it :-/</p>",
        "id": 270912081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644181887
    },
    {
        "content": "<p>Shoot.  :/</p>",
        "id": 270912105,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644181917
    },
    {
        "content": "<p>If you are doing the grep approach, then I’d look for <code>io.cmd</code> (edit: and <code>io.proc.spawn</code>) and <code>tactic.unsafe_run_io</code>.  If you don’t use <code>lean —run</code> that is the only way I know to respectively run stuff on the command line and get to the io monad from tactic mode.  (But checking for <code>run_cmd</code> isn’t enough since you can make an interactive tactic.). (Edit: you also have to consider that these can be opened so you may not get the full name with periods…)</p>",
        "id": 270912396,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644182255
    },
    {
        "content": "<p>you could ctrl-f to see if they made anything returning <code>tactic</code>, I think that should be also a good false-positive detector</p>",
        "id": 270912543,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644182457
    },
    {
        "content": "<p>(I would vote personally for \"give up quickly, try to run in gitpod or elsewise on a free GCP instance if needed\")</p>",
        "id": 270912604,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644182536
    },
    {
        "content": "<p>Just for kicks, a perfectly normal exploit. (This code will run the <code>sleep</code> command with no arguments; I get an error message from it in the output panel.) This works without importing <code>system.io</code>, referencing anything with <code>io</code> in the name, or using <code>#eval</code> or <code>run_cmd</code>, but some parts of this code are a little peculiar...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">perfectly_normal</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cmd</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">process_stuff</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">spawn</span> <span class=\"o\">:</span> <span class=\"n\">perfectly_normal</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[user_command]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.tk</span> <span class=\"s2\">\"foo_init\"</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lean.parser.with_input</span> <span class=\"n\">lean.parser.command_like</span> <span class=\"bp\">$</span>\n    <span class=\"o\">(</span><span class=\"n\">s.to_list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">char.of_nat</span> <span class=\"o\">(</span><span class=\"n\">c.to_nat</span> <span class=\"bp\">-</span> <span class=\"mi\">256</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">as_string</span> <span class=\"k\">in</span>\n  <span class=\"n\">f</span> <span class=\"s2\">\"ţůŮųŴšŮŴĠŭůŮšŤşũůşŰŲůţťųųşũŭŰŬĠĺĠŢŹĠťŸšţŴĠŰŲůţťųųşųŴŵŦŦ\"</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">f</span> <span class=\"s2\">\"ŭťŴšĠţůŮųŴšŮŴĠŴšţŴũţĮŵŮųšŦťşŲŵŮşũůĠĺĠŵŮũŴĠĭľĠŮšŴĠĭľĠŴšţŴũţĠŵŮũŴ\"</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">f</span> <span class=\"s2\">\"ŮůŴšŴũůŮĠŠŹůşŲŵŮŠĠŸĠĺĽĠŴšţŴũţĮŵŮųšŦťşŲŵŮşũůĠĨĩĠĨŭůŮšŤşũůşŰŲůţťųųşũŭŰŬĮųŰšŷŮĠŸĩ\"</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"bp\">.</span>\n<span class=\"n\">foo_init</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">yo_run</span> <span class=\"o\">{</span><span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"sleep\"</span><span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270915814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644186906
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/lake.20seccomp\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/lake.20seccomp</a> for an idea how we might be able to address this in Lean 4</p>",
        "id": 270916011,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644187213
    },
    {
        "content": "<p>I don't see gitpod mentioned in this thread, but that should provide the \"sandbox on someone else's machine\" option without too much effort</p>",
        "id": 270940881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644218498
    }
]