[
    {
        "content": "<p>This feels almost defeq to me. But I am stumped how to prove this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">val_succ_eq_succ_val</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 126591309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526390682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">val_succ_eq_succ_val</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 126591395,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526390799
    },
    {
        "content": "<p>Aaaahaaa.</p>",
        "id": 126591498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526390948
    },
    {
        "content": "<p>I think we should add this sentence to our bluff toolbox. Instead of saying \"the following is trivial\", as we always do, we could say \"the following is almost defeq\".</p>",
        "id": 126592224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526392052
    },
    {
        "content": "<p>People may think we are a bit weird (at least until proof assistant manage to take over the world).</p>",
        "id": 126592283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526392105
    },
    {
        "content": "<p>But it won't be worse than all those students who took Kevin's exam on Monday and will get as their only explanation for poor grade: this doesn't type check.</p>",
        "id": 126592313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526392168
    },
    {
        "content": "<p>Actually I'm reading this because I procrastinate writing a referee report. I should send \"this paper does not type check\" and be done with it</p>",
        "id": 126592377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526392224
    },
    {
        "content": "<p>I have taken off many points for solutions which don't type-check.</p>",
        "id": 126592408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526392290
    },
    {
        "content": "<p>I ask them what <code>P_4(X)</code> is, and many people tell me that it is <code>8cos(theta)^4-8cos(theta)^2+1</code></p>",
        "id": 126592466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526392326
    },
    {
        "content": "<p>[P_n(X) satisfies P_n(cos(theta))=cos(n.theta)]</p>",
        "id": 126592475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526392352
    },
    {
        "content": "<p>Right now I'm staring at some <code>wlog</code> without filling in the proof obligation in that paper I need to referee</p>",
        "id": 126592507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526392393
    },
    {
        "content": "<p>One student wrote down the answer and said it was true \"by symmetry\"</p>",
        "id": 126592537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526392438
    },
    {
        "content": "<p>and I thought \"hmm, I don't think that will work in Lean\"</p>",
        "id": 126592577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526392446
    },
    {
        "content": "<p>but at least it typechecks</p>",
        "id": 126592579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526392451
    },
    {
        "content": "<p>Replying to the original question; alternatively</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>which shows how almost-defeq it really is</p>",
        "id": 126599292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526400822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Should this be in mathlib?</p>",
        "id": 126601422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526403964
    },
    {
        "content": "<p>And the analogue for <code>pred</code>.</p>",
        "id": 126601623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526404252
    },
    {
        "content": "<p>More generally: should I just create PR's for such small additions, or is it too trivial for that?</p>",
        "id": 126601692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526404359
    },
    {
        "content": "<p>Small additions are fine, since they are focused and usually don't have dependency problems they are easy to review. I think it is not a good idea to have a lower bound on \"too trivial\" because then you have to find other things to do in the PR or forget about your little fix. It's rules like that that make typos like <code>αdditive</code> persist in lean core for so long</p>",
        "id": 126610125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526415406
    },
    {
        "content": "<p>I would call the theorem <code>succ_val</code> though</p>",
        "id": 126610143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526415441
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/leanprover/mathlib/pull/138\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/138\">https://github.com/leanprover/mathlib/pull/138</a></p>",
        "id": 126660987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526499114
    }
]