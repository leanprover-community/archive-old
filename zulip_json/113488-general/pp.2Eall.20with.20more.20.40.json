[
    {
        "content": "<p>I don't suppose there is a pretty printer that is even more ambitious with @'s, is there?  For example, consider the <code>pp.all</code> version of theorem <code>or.symm.equations._eqn_1</code>: </p>\n<div class=\"codehilite\"><pre><span></span>@eq.{0} (∀ {a b : Prop}, or a b → or b a) or.symm or.swap\n</pre></div>\n\n\n<p>If you enter this into Lean it will give a \"type mismatch\" error.  The trick is to enter it as follows:</p>\n<div class=\"codehilite\"><pre><span></span>@eq.{0} (∀ {a b : Prop}, or a b → or b a) @or.symm @or.swap\n</pre></div>\n\n\n<p>This is because <code>or.symm</code> has type <code>or.symm : ∀ {a b : Prop}, a ∨ b → b ∨ a</code>.  Now, I think this is a minor bug and I if others agree can make an issue about it, but I also wonder if there is already a pretty printer that is more ambitious with the <code>@</code> symbol.  For example, it is ok to enter this as follows:</p>\n<div class=\"codehilite\"><pre><span></span>@eq.{0} (∀ {a b : Prop}, @or @a @b → @or @b @a) @or.symm @or.swap\n</pre></div>\n\n\n<p>(If you can't tell, I'm trying to take the <code>pp.all</code> output of Lean and plug it back in to Lean.  Exceptions like this make it less than 100% robust.)</p>",
        "id": 187978354,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581477412
    },
    {
        "content": "<p>I know the one I wrote for nanoda/nanoda_lib will do this if you send <code>Local</code> items through the <code>Const</code> formatter instead of just printing them directly. I disabled it because I thought it was ugly but it's an option. I think Trepplein's pretty printer does this with implicits enabled as well. I'll check when I'm back at my desktop.</p>",
        "id": 187980910,
        "sender_full_name": "Chris B",
        "timestamp": 1581481949
    },
    {
        "content": "<p>As for plugging pretty-printed terms back into Lean I think mine has an ~85% success rate but there are still some rough spots to grind down. I haven't spent much time on it but it's an interesting goal.</p>",
        "id": 187980977,
        "sender_full_name": "Chris B",
        "timestamp": 1581482064
    },
    {
        "content": "<p>Another related, but opposite issue is that sometimes <code>pp.all</code> adds @ where it shouldn't go.  Here is an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">id_defn</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">congr_fun</span> <span class=\"n\">id_defn</span> <span class=\"n\">bool</span> <span class=\"c1\">-- @eq.{1} ((λ (x : Type), x → x) bool) (@id.{1} bool) (@(λ {α : Type} (x : α), x) bool)</span>\n</pre></div>\n\n\n<p>If you try to plug the following into Lean</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>it will complain about an \"invalid @\" (the one before the lambda expression).  Actually, I don't think it is possible to directly type this theorem into Lean, although you can type the definitionally equivalent theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>where one replaces the braces in the lambda expression with parentheses.</p>",
        "id": 187981070,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581482276
    },
    {
        "content": "<p>That one might be a bug. I just tested it with the nanoda one and got :</p>\n<div class=\"codehilite\"><pre><span></span>theorem id_defn : @id = (λ {α : Type} (x: α), x) := by refl\ndef jasons_def : _ :=congr_fun id_defn bool\n\n-- pp output\nlemma jasons_def : @eq (Π (a : @bool), @bool) (@id @bool)\n    (λ (x : @bool), @x) :=\n@congr_fun (Type 0) (λ (x : Type 0), Π (a : @x), @x) @id\n  (λ {α : Type 0} (x : @α), @x) @id_defn @bool\n</pre></div>",
        "id": 187981543,
        "sender_full_name": "Chris B",
        "timestamp": 1581483164
    },
    {
        "content": "<p>It did come out without parens around the first (Type 0) though.</p>",
        "id": 187981551,
        "sender_full_name": "Chris B",
        "timestamp": 1581483227
    },
    {
        "content": "<p>Yep, <code>@(λ ...)</code> is an issue with the parser. There is no concrete syntax for this, and the pretty printer is using a reasonable choice for what that syntax should be but the parser doesn't like it. Maybe we can fix this in lean 3.5.1?</p>",
        "id": 187981715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581483593
    },
    {
        "content": "<p>Ah that makes sense.</p>",
        "id": 187982192,
        "sender_full_name": "Chris B",
        "timestamp": 1581484364
    },
    {
        "content": "<p>Since this is becoming \"issues with the pretty printer\", here is another:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">random</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">rand_nat_aux</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">pack</span><span class=\"bp\">._</span><span class=\"n\">wf_rec_mk_dec_tactic</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span>\n</pre></div>\n\n\n<p>The resulting Prop has near the end, the bad names <code> .nat</code>, <code> .nat.has_add</code>, and <code> .nat.has_one</code>.  Oddly enough, if one copies the theorem fixes the extra <code>.</code>s and puts it back into Lean, then it will pretty print it correctly.  Maybe the issue is with the underlying expression.</p>",
        "id": 188005600,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581510902
    }
]