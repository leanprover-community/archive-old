[
    {
        "content": "<p>Hello, I'm trying to define proper maps but am running into a universe error. I don't know much about universes, can anyone help me decipher it?</p>",
        "id": 297515975,
        "sender_full_name": "Chase Fleming",
        "timestamp": 1662519836
    },
    {
        "content": "<p>could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 297517548,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1662521746
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">proper_map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">is_univ</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">is_closed_map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">is_cont</span>  <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The following lemma highlights the issue </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comp_proper</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">proper_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">proper_map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">proper_map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">is_closed_map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">prod.map_comp_map</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">hf.1</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">continuous.comp</span> <span class=\"n\">hg.is_cont</span> <span class=\"n\">hf.is_cont</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>We see that the error comes with obtain h' line as we get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">hf.is_univ</span> <span class=\"n\">z</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">z</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_6</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_6</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_4</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I do not know enough about universes to make sense of this.</p>",
        "id": 297517843,
        "sender_full_name": "Chase Fleming",
        "timestamp": 1662522102
    },
    {
        "content": "<p>and sorry, I forgot my imports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.maps</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 297517907,
        "sender_full_name": "Chase Fleming",
        "timestamp": 1662522156
    },
    {
        "content": "<p>this probably won't do it, but I wonder if changing the <code>Type*</code>s to <code>Type u</code> might help, or at least lead to a clearer error message</p>",
        "id": 297518495,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1662522904
    },
    {
        "content": "<p>actually, if you do that (changing the types to use the universe variable <code>u</code>) and then change the type of <code>is_univ</code> to <code>∀ (z : Type u), topological_space z → is_closed_map (prod.map (@id z) f)</code>, that seems to fix the universe error</p>",
        "id": 297518788,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1662523244
    },
    {
        "content": "<p>it works because it explicitly specifies the universe level of the <code>z</code> argument</p>",
        "id": 297518822,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1662523302
    },
    {
        "content": "<p>So, that's what I did, and I'm not getting anything bad yet except i'm getting a goal of <code>topological_space (z × α)</code> when I attempt the final exact even though we have both \\a and z being topological_spaces.</p>",
        "id": 297518947,
        "sender_full_name": "Chase Fleming",
        "timestamp": 1662523382
    },
    {
        "content": "<p>I see... I don't think I can really help you with that part, but I'm sure someone more knowledgeable will come along</p>",
        "id": 297519119,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1662523624
    },
    {
        "content": "<p>If you do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">proper_map</span>\n</code></pre></div>\n<p>you'll see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">proper_map.</span><span class=\"o\">{</span><span class=\"n\">u_4</span> <span class=\"n\">u_5</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">topological_space.</span><span class=\"o\">{</span><span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">],</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>where u_6 is the universe variable of <code>z</code> in <code>is_univ</code>. Since this is a free variable, it becomes three independent free variables in <code>hf</code>, <code>hg</code> and the conclusion, as you can see from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">proper_map.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"n\">f</span>\n<span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">proper_map.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"n\">u_3</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"n\">g</span>\n<span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span>\n</code></pre></div>\n<p>The way to solve this is indeed to specify variables explicitly: setting the universes of α, β and z to be the same as suggested by <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> is definitely reasonable. I'm not sure what you should set <code>z</code> to if <code>{α : Type u} {β : Type v}</code> what should be the type of <code>z</code>; I think <code>z : Type (max u v)</code> would probably allow you to derive <code>is_closed_map</code> in all universes, or maybe even <code>z : Type 0</code> suffices?</p>\n<p>In general it's not recommended to quantify over (all types in) a universe in a definition, and for proper maps there are <a href=\"https://en.wikipedia.org/wiki/Proper_map#Definition\">two other definitions</a> that doesn't use such quantification; however they're only equivalent to your definition under certain conditions, so your definition is still worth having.</p>",
        "id": 297519134,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662523654
    },
    {
        "content": "<p>I think you can solve the <code>topological_space (z × α)</code> goal using <code>apply_instance</code></p>",
        "id": 297519143,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662523675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> You are fantastic. Allow me to read over this and apply it.</p>",
        "id": 297519230,
        "sender_full_name": "Chase Fleming",
        "timestamp": 1662523778
    },
    {
        "content": "<p>This works for me, no need of apply_instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">proper_map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_univ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">is_closed_map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"> (is_univ : ∀ (z : Type u) [topological_space z], is_closed_map (prod.map (@id z) f)) seems</span>\n<span class=\"cm\">  better; would allow you to write (hg.is_univ z).comp ... below without the underscore. -/</span>\n<span class=\"o\">(</span><span class=\"n\">is_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_proper</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">proper_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">proper_map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">proper_map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">introsI</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> introsI puts `hz` inside the instance cache, so the `topological_space (z × α)` can</span>\n<span class=\"cm\">      be automatically inferred. -/</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hg.is_univ</span> <span class=\"n\">z</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hf.is_univ</span> <span class=\"n\">z</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">continuous.comp</span> <span class=\"n\">hg.is_cont</span> <span class=\"n\">hf.is_cont</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297519769,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662524433
    },
    {
        "content": "<p>Aha, I was just coming back to ask something about the error. Thank you so much for that explanation of why you use introsI</p>",
        "id": 297520133,
        "sender_full_name": "Chase Fleming",
        "timestamp": 1662524820
    },
    {
        "content": "<p>Chase, when you get around to it, could you please provide results connecting proper maps to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cocompact_map\">docs#cocompact_map</a> under the appropriate conditions?</p>",
        "id": 297664000,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662580855
    }
]