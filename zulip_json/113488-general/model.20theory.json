[
    {
        "content": "<p>Model theory is a field of mathematics that I know very little about but that can sometimes have very surprising applications. I'm now actually learning some of this stuff because there are applications in Hodge theory.</p>\n<p>If I understand things correctly, the Flyspeck project must have formalised quite a bit of the basics of formal logic. On the other hand, we have <code>omega</code> which must also deal with first order formulas etc...</p>\n<p>Would it be worth it to generalise a bunch of stuff? If I understand things correctly, model theory can be used as a way to crank out a bunch of tactics that will help us prove stuff.</p>",
        "id": 169247979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561745047
    },
    {
        "content": "<p>what sort of tactics do you have in mind?</p>\n<p>maybe a <code>first_order_transfer</code> sort of thing, e.g. proving something in the hyperreals, automatically constructing a reification of the proven theorem as a first-order sentence, and then re-interpreting it in the reals?</p>",
        "id": 169248327,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561745338
    },
    {
        "content": "<p>To give a concrete example: when developing the theory of Witt vectors you have a commutative ring <code>R</code> and a thing <code>W(R)</code> called \"the Witt vectors of <code>R</code>\", depending on a prime number <code>p</code>. Now there are a whole bunch of lemmas that you want to prove about <code>W(R)</code> that are usually proven as follows in math texts:<br>\n\"It suffices to check this when <code>p</code> is invertible in the ring <code>R</code>, and then the statement is obvious.\"<br>\n(Whether or not the statement becomes obvious if <code>p</code> is invertible is not important. I'm interested in the first step of that proof.)<br>\nOne example of such a lemma is \"<code>W(R)</code> is a commutative ring\". Most authors never explain why this strategy works, but I think that in almost all examples the claim in the lemma is a universal formula in the language of rings. Now <code>W(mv_polynomial int R)</code> surjects onto <code>W(R)</code> and <code>W(mv_polynomial int R)</code> injects into <code>W(mv_polynomial rat R)</code>. And <code>mv_polynomial rat R</code> is a ring where <code>p</code> is invertible. So model theory says that it suffices to check universal formulas for that special case (because of substructures and homomorphic maps and blah...)</p>\n<p>I would be very interested in knowing if it is conceivable that we could set up generic model theory so that it becomes easy to crank out little mini helper tactics that make the beginning of these proofs (\"It suffices to check the statement when <code>p</code> is invertible in <code>R</code>\") into one line steps in the Lean proofs.</p>",
        "id": 169248563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561745524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> Yes, that sounds like a similar thing.</p>",
        "id": 169248589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561745544
    },
    {
        "content": "<p>And instead of all such tactics requiring to set up a whole bunch of framework, I would want there to be some <code>lemma real_closed_fields_complete</code> or something like that. This lemma should not be <code>meta</code>, and then a generic tactic that turns this lemma into a mini-helper tactic that you can apply.</p>",
        "id": 169248738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561745666
    },
    {
        "content": "<p>Of course if you have <code>lemma Presburger_complete</code> then this does not mean that you some can crank out <code>omega</code>. Because I guess <code>omega</code> does lots of smart things under the hood. (Instead of just enumerating sentences and checking if it produced a proof by chance.)</p>",
        "id": 169248812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561745738
    },
    {
        "content": "<p>But there might still be room for a lot of shared framework.</p>",
        "id": 169248838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561745749
    },
    {
        "content": "<blockquote>\n<p>So model theory says that it suffices to check universal formulas for that special case (because of substructures and homomorphic maps and blah...)</p>\n</blockquote>\n<p>this also gives a cute proof that to check non-singularity of a matrix one can compute its determinant in a larger ring of coefficients</p>",
        "id": 169249350,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561746120
    },
    {
        "content": "<p>The lemma <code>real_closed_fields_complete</code> is called the Tarski-Seidenberg Theorem. </p>\n<p><a href=\"https://en.wikipedia.org/wiki/Tarski%E2%80%93Seidenberg_theorem\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Tarski%E2%80%93Seidenberg_theorem\">https://en.wikipedia.org/wiki/Tarski%E2%80%93Seidenberg_theorem</a></p>\n<p>The details of the decision algorithm are in Jacobson's Basic Algebra, for example.</p>",
        "id": 169249653,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1561746312
    },
    {
        "content": "<blockquote>\n<p>Of course if you have lemma Presburger_complete then this does not mean that you some can crank out omega.</p>\n</blockquote>\n<p>in principle, such a <code>lemma</code> would use a computable <code>def</code> where one describes the decision procedure, and one could conceive of a horrifyingly slow tactic where things in the scope of <code>omega</code> are reified to Presburger formulas and then processed by the decision procedure</p>",
        "id": 169249701,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561746362
    },
    {
        "content": "<p>Exactly... so for something like <code>omega</code> you still need other optimizations. But for the other applications you need a tactic that takes a language <code>L</code> and checks that the goal is a first order formula in <code>L</code> and then applies some lemma <code>model_theory.cool_lemma</code>.</p>",
        "id": 169249912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746505
    },
    {
        "content": "<p>There is necessarily some <code>meta</code> involved at some point. But I think it can be very little. Mostly the phase of \"inspecting the goal to check that it is a first order formula\". I don't think that you can avoid <code>meta</code> there.</p>",
        "id": 169249979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746563
    },
    {
        "content": "<blockquote>\n<p>The lemma <code>real_closed_fields_complete</code> is called the Tarski-Seidenberg Theorem. </p>\n<p><a href=\"https://en.wikipedia.org/wiki/Tarski%E2%80%93Seidenberg_theorem\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Tarski%E2%80%93Seidenberg_theorem\">https://en.wikipedia.org/wiki/Tarski%E2%80%93Seidenberg_theorem</a></p>\n<p>The details of the decision algorithm are in Jacobson's Basic Algebra, for example.</p>\n</blockquote>\n<p>Right. So I wouldn't want to autogenerate a tactic that applies quantifier elimination. But I would like a tactic that allows me to transform <a href=\"https://en.wikipedia.org/wiki/Hilbert%27s_seventeenth_problem\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hilbert%27s_seventeenth_problem\">https://en.wikipedia.org/wiki/Hilbert%27s_seventeenth_problem</a> for a certain non-negative polynomial <code>f</code> into the analogous claim over the real closed field that has a bunch of indeterminates adjoined. \"And then the statement is obvious\".</p>",
        "id": 169250315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746744
    },
    {
        "content": "<p>And I feel like such a tactic can be autogenerated from <code>Tarski_Seidenberg</code> + <code>model_theory.structural_lemma_1</code> and <code>model_theory.structural_theorem_2</code> or something like that.</p>",
        "id": 169250355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746800
    },
    {
        "content": "<p>But like I said... I actually know very little about model theory, and I would be very happy to hear opinions from some experts.</p>",
        "id": 169250388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746831
    },
    {
        "content": "<blockquote>\n<p>Mostly the phase of \"inspecting the goal to check that it is a first order formula\".</p>\n</blockquote>\n<p>the \"inspection\" hides a bunch of computation, as usual: one would probably use typeclass resolution to infer a first-order structure on the type being quantified over and also on the type one wants to work in instead, and also construct the formula, re-interpret it in the other type, remove the syntactic clutter from the reinterpretation, and prompt the user for a proof of the transferred statement</p>",
        "id": 169250522,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561746921
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 169250624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561746985
    },
    {
        "content": "<p>But that sounds like a very generic thing to do. In my formalization of Witt vectors, I hand-rolled the statements that I need for rings. But I'dd rather just do it for all theories in one go and apply a meta-<code>meta</code> theorem wherever needed.</p>",
        "id": 169250682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561747043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> formalised the hyperreals in Lean recently, and I know that he was thinking about this transfer principle but I'm pretty sure he wasn't thinking about it in <code>meta</code> land. I see now that this is somehow what he could do next.</p>",
        "id": 169250774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561747096
    },
    {
        "content": "<p>i was playing around with something like this in Flypitch a while ago; see <code>parse_formula.lean</code> (<a href=\"https://github.com/flypitch/flypitch/blob/master/src/parse_formula.lean\" target=\"_blank\" title=\"https://github.com/flypitch/flypitch/blob/master/src/parse_formula.lean\">link</a>), where toy examples of Lean expressions are parsed into deeply-embedded FOL formulas</p>",
        "id": 169250966,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561747240
    },
    {
        "content": "<p>there's also a toy example of \"reflection\" for abelian groups worked out by hand <a href=\"https://github.com/flypitch/flypitch/blob/master/old/reflection.lean\" target=\"_blank\" title=\"https://github.com/flypitch/flypitch/blob/master/old/reflection.lean\">here</a>. (this example is kind of stupid because the proof which i'm reflecting was generated by using the completeness theorem to turn a Lean proof into a FOL proof, so that I could turn it back into the same Lean proof, but in principle the starting Lean proof could be different from the ending Lean proof, as envisioned by Johan)</p>",
        "id": 169251498,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561747610
    },
    {
        "content": "<p>My general impression is that the optimal semantics to formalize varies significantly depending on the objective, so there isn't much mileage you'd get out of having a universal framework. For instance, the definition of models for the Vampire interface (<a href=\"https://github.com/skbaek/mathlib/blob/vampire/src/tactic/vampire/model.lean\" target=\"_blank\" title=\"https://github.com/skbaek/mathlib/blob/vampire/src/tactic/vampire/model.lean\">https://github.com/skbaek/mathlib/blob/vampire/src/tactic/vampire/model.lean</a>) makes no distinction between functions/relations and assigns no fixed arities, which is probably not the best choice for formalizing model theory for its own sake.</p>",
        "id": 169293497,
        "sender_full_name": "Seul Baek",
        "timestamp": 1561807839
    },
    {
        "content": "<p>Johan's initial application is just an instance of transfer, and there the model theory doesn't help much. If I understand correctly, there is a function <code>f</code> from <code>W(R)</code> to <code>W(whatever)</code> that preserves the meaning of atomic formulas, and hence the quantifier-free ones. So, from <code>all x, P x</code> on <code>W(whatever)</code>, we get <code>all y, P (f y)</code>, where <code>y</code> ranges over <code>W(R)</code>, and then transfer should tell us that <code>P(f y)</code> is equivalent to <code>P y</code>. Many model-theoretic arguments translate to syntactic arguments of this kind, and, conversely, lots of syntactic procedures (like decision procedures) are understood in model-theoretic terms.</p>\n<p>Given a first-order statement in the language of ordered rings that is true  of the reals, a more serious (and noneliminable) use of model theory could conclude, for free, that the statement is true of every real-closed field -- and, hence, even provable from the axioms for a real-closed field (without explicitly exhibiting such a proof!). I don't know of we have any pressing application of that.</p>\n<p>Of course, model theory is an interesting branch of mathematics in its own right, and well worth formalizing. </p>\n<p>So, I guess my answer to Johann is that, well... it depends on what you want to do.</p>",
        "id": 169311819,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1561841676
    }
]