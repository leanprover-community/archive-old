[
    {
        "content": "<p>Is it possible to define infix functions in a structure that act on other fields.</p>\n<p>For example, if I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">l</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Preorder</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>can I somehow define <code>~&gt;</code> as a synonym for Arr, such that I can have <code>forall {A : Preorder} {a b : A.Obj}, a ~&gt; b</code>? The issue with adding an infix declaration in the namespace is that Lean wants it to be accessed on a Preorder like <code>A</code>, rather than on an element of its object set (like <code>a</code>)</p>",
        "id": 223420930,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611170095
    },
    {
        "content": "<p>How would <code>~&gt;</code> infer which <code>A : Preorder</code> you're talking about?</p>",
        "id": 223421197,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611170209
    },
    {
        "content": "<p>This is legal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">l</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Preorder</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">infixr</span> <span class=\"bp\">`~&gt;`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">Arr</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Some_prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 223421307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611170258
    },
    {
        "content": "<p>Ah, it sounds like you're not actually asking how to define notation to use within the structure definition though</p>",
        "id": 223421531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611170373
    },
    {
        "content": "<p>Good point, Yakov. Is there a way to get something like <code>a A.~&gt; b</code>? As you say, Eric, I'm trying to reference it not only in futher field definitions</p>",
        "id": 223422021,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611170604
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">l</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Preorder</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Obj</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`~&gt;</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">A.Arr</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A.Obj</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">~&gt;</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 223422497,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611170797
    },
    {
        "content": "<p>I edited to make it a little cleaner</p>",
        "id": 223422848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611170993
    },
    {
        "content": "<p>Thanks! One thing I'd hope to be able to get is an arrow on many structures (Preorder, Category, 2-category ...). Can I get a notation that overloads based on the type of <code>A</code>?</p>",
        "id": 223422878,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611171003
    },
    {
        "content": "<p>yes, use typeclasses... see how <code>+</code> works on natural numbers, integers, and reals, etc...</p>",
        "id": 223422987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611171054
    },
    {
        "content": "<p>I think you can just write something like <code>local notation a `~&gt;` b := Preorder.Arr  _ a b</code></p>",
        "id": 223423041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611171091
    },
    {
        "content": "<p>it will work as long as <code>a</code> and <code>b</code> have types already of the form <code>Preorder.Obj _</code></p>",
        "id": 223423112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611171124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Infix.20operators.20in.20structure/near/223423041\">said</a>:</p>\n<blockquote>\n<p>I think you can just write something like <code>local notation a `~&gt;` b := Preorder.Arr  _ a b</code></p>\n</blockquote>\n<p>Do you think it is better to make the notation \"fully applied\" as opposed to <code>local notation a `~&gt;` := Preorder.Arr _ a</code>?</p>",
        "id": 223423331,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611171232
    },
    {
        "content": "<p>I don't know, it just seems like a normal human way to write it</p>",
        "id": 223423549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611171274
    },
    {
        "content": "<p>in one project, I used the precedence values <code>notation a ` ⟶ `:10 b:10 := Graph.hom _ a b</code></p>",
        "id": 223423668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611171344
    },
    {
        "content": "<p>Wow, excellent!</p>",
        "id": 223423694,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611171354
    },
    {
        "content": "<p>Thanks for the help. The final thing I'm trying to figure out is if I can also overload <code>~&gt;</code> to be a synonym for Preorder homomorphisms (still trying to get my parameterised records working to give an example here)</p>",
        "id": 223423882,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611171434
    },
    {
        "content": "<p>Seems to work! Thanks all. Really happy I was able to get the notation I wanted</p>",
        "id": 223424104,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611171559
    },
    {
        "content": "<p>Well preorders don't form a preorder, and overloading notation doesn't really work</p>",
        "id": 223424277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611171638
    },
    {
        "content": "<p>Could you say more about how overloading notation doesn't work?</p>",
        "id": 223424628,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611171817
    },
    {
        "content": "<p>I actually don't know much about how it doesn't work</p>",
        "id": 223425095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611172023
    },
    {
        "content": "<p>Cool. I'll remain vigilant</p>",
        "id": 223425310,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611172126
    },
    {
        "content": "<p>I've never tried it myself since ... my understanding is it doesn't really work <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 223425530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611172224
    },
    {
        "content": "<p>It's working so far!</p>",
        "id": 223425765,
        "sender_full_name": "Lime Sublime",
        "timestamp": 1611172338
    }
]