[
    {
        "content": "<p>One the website we have a <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">mathlib overview</a>. Among the problems of this list are:</p>\n<ul>\n<li>It is outdated and needs constant maintaince (spoiler:  I won't propose a magic fix, we only need to care more about this list)</li>\n<li>It doesn't tell where are all those things, and we all know that navigating mathlib is difficult</li>\n<li>It doesn't point out missing things, and we have many people who want to start contributing, preferably easy things</li>\n</ul>\n<p>Of course the list of missing things is open-ended. But we have a well-known half-specified milestone: covering all of undergraduate mathematics. So we could list missing undergraduate stuff, either in the main list (printed in red) or in a separate list.</p>",
        "id": 197327879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589312476
    },
    {
        "content": "<p>In France we have a standard formatted list of undergraduate topics: the topics that are required for the agr√©gation, the French national exam for would be high school teachers. It changes slightly from year to year, but here is the <a href=\"http://media.devenirenseignant.gouv.fr/file/agreg_externe/59/7/p2020_agreg_ext_maths_1107597.pdf\">2020 version</a>.  It would be a very convenient first approximation, and we could modify it of course. I translated the first section (groups) and formatted it into the yaml file below. Turning that file into a webpage that looks like the mathlib overview but with links and separating missing stuff is a trivial programming exercise. My questions are: should I keep translating this list? Will there be people helping me by filling in links that I missed and editing the YaML file?</p>",
        "id": 197327955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589312518
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">group</span><span class=\"p\">:</span>\n  <span class=\"nt\">basic definitions</span><span class=\"p\">:</span>\n    <span class=\"nt\">group</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://github.com/leanprover-community/lean/blob/master/library/init/algebra/group.lean#L35&#39;</span>\n    <span class=\"nt\">group morphism</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/algebra/group/hom.html&#39;</span>\n    <span class=\"nt\">direct product of groups</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/algebra/group/prod.html&#39;</span>\n    <span class=\"nt\">subgroup</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/subgroup.html&#39;</span>\n    <span class=\"nt\">subgroup generated by a subset</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/subgroup.html#group.closure&#39;</span>\n    <span class=\"nt\">order of an element</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/order_of_element.html&#39;</span>\n    <span class=\"nt\">normal subgroup</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/subgroup.html#normal_subgroup&#39;</span>\n    <span class=\"nt\">quotient group</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/quotient_group.html#quotient_group.group&#39;</span>\n    <span class=\"nt\">group action</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/group_action.html#mul_action&#39;</span>\n    <span class=\"nt\">stabilizer of a point</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/group_action.html#mul_action.stabilizer&#39;</span>\n    <span class=\"nt\">orbit</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/group_action.html#mul_action.orbit&#39;</span>\n    <span class=\"nt\">quotient space</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/group_action.html#mul_action.orbit_equiv_quotient_stabilizer&#39;</span>\n    <span class=\"nt\">class formula</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">conjugacy classes</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">abelian group</span><span class=\"p\">:</span>\n    <span class=\"nt\">cyclic group</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">finite type abelian groups</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">complex roots of unity</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">primitive complex roots of unity</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">permutation group</span><span class=\"p\">:</span>\n    <span class=\"nt\">permutation group of a type</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/data/equiv/basic.html#equiv.perm&#39;</span>\n    <span class=\"nt\">decomposition into transpositions</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">decomposition into cycles with disjoint support</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">signature</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/group_theory/perm/sign.html#equiv.perm.sign&#39;</span>\n    <span class=\"nt\">alternating group</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">classical automorphim groups</span><span class=\"p\">:</span>\n    <span class=\"nt\">general linear group</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/linear_algebra/basic.html#linear_map.general_linear_group&#39;</span>\n    <span class=\"nt\">special linear group</span><span class=\"p\">:</span> <span class=\"s\">&#39;https://leanprover-community.github.io/mathlib_docs/linear_algebra/special_linear_group.html&#39;</span>\n    <span class=\"nt\">orthogonal group</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">special orthogonal group</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">unitary group</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">special unitary group</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">representation theory for finite groups</span><span class=\"p\">:</span>\n    <span class=\"nt\">representations of abelian groups</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">Maschke theorem</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">orthogonality of irreducible characters</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">Fourier transform for finite abelian groups</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">convolution</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">examples for groups with a small cardinal</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n</code></pre></div>",
        "id": 197328007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589312528
    },
    {
        "content": "<p>I've always kind of hated the mathlib overview page (and the theories pages) because they so trivially go out of date. This looks like a step forward at least. With a fixed list of what should be there, it's  easier to see when it needs to be updated.</p>",
        "id": 197329453,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589313252
    },
    {
        "content": "<p>But really, we need someone to take charge of this list and promise to keep it updated.</p>",
        "id": 197329516,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589313294
    },
    {
        "content": "<p>I think the existence of a fixed list would make it much easier. And people keep asking for projects to work on.</p>",
        "id": 197330816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313896
    },
    {
        "content": "<p>Some links point to the source code, some point to docs website. Is there any specific reason?</p>",
        "id": 197334336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589315340
    },
    {
        "content": "<p>If I didn't mess up, only the core lib stuff points to code, because it has no doc.</p>",
        "id": 197339764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589317748
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/algebra/group.html\">https://leanprover-community.github.io/mathlib_docs/core/init/algebra/group.html</a></p>",
        "id": 197340149,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589317955
    },
    {
        "content": "<p>So you can start fixing my list. I'm sure I've also missed stuff that we already have.</p>",
        "id": 197341468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589318549
    },
    {
        "content": "<p>I pushed my file to <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml</a>. It isn't used for anything yet, but everybody can already fix things there.</p>",
        "id": 197341830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589318740
    },
    {
        "content": "<p>Let's make it a test. We have one obvious suboptimal link, and a least a couple of holes that are either already here or trivial to fill. Let's see if we can get contributions there. If yes then I'll translate all the other sections.</p>",
        "id": 197341954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589318804
    },
    {
        "content": "<p>I should also point out that one advantage of this list with precise pointers to the doc (preferably specific items rather that whole pages when it makes sense) is that we can have CI hunting for broken links at every commit. So that page would become outdated only because of additions to mathlib, not because of refactors.</p>",
        "id": 197342266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589318988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think this is a very good idea. I'll try my best to contribute, and keep contributing.</p>",
        "id": 197371977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589350082
    },
    {
        "content": "<p>Should I push or PR?</p>",
        "id": 197372076,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589350193
    },
    {
        "content": "<p>I'd strip the common prefix from all URLs.</p>",
        "id": 197372342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589350505
    },
    {
        "content": "<p>I'd say push unless there's something you want to discuss or have reviewed.</p>",
        "id": 197372350,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589350521
    },
    {
        "content": "<p>I think the broken link detector is a must btw.</p>",
        "id": 197372653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589350967
    },
    {
        "content": "<p>I fixed some URLs and translated 1.1.</p>",
        "id": 197484762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589408611
    },
    {
        "content": "<p>Should we have space for some notes in the YAML in addition to just URLs, in case mathlib's treatment of those topics deserves additional explanation?</p>",
        "id": 197487987,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589410820
    },
    {
        "content": "<p>Sounds good. And isn't YAML flexible enough to just drop those notes in?<br>\nSo you write</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"s\">&#39;cyclic_group&#39;</span> <span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">blablaURL</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">-- or</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">&#39;cyclic_group&#39;</span><span class=\"p p-Indicator\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">URL</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">blablaURL</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">note</span><span class=\"p\">:</span> <span class=\"s\">&#39;</span><span class=\"se\">&#39;&#39;</span><span class=\"s\">some</span><span class=\"nv\"> </span><span class=\"s\">note</span><span class=\"se\">&#39;&#39;</span><span class=\"s\">&#39;</span>\n</code></pre></div>\n\n\n<p>and the script can just figure out which of the two was used?<br>\n(Me doesn't know yaml too well.)</p>",
        "id": 197504017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589428617
    },
    {
        "content": "<p>BTW, why do we need YAML, and not markdown with predictable structure?</p>",
        "id": 197504107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589428779
    },
    {
        "content": "<p>I guess Patrick is thinking of parsing the YAML in Python and building pages from some templates somehow.</p>",
        "id": 197504249,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589428936
    },
    {
        "content": "<p>OK, let's have a YaML file</p>",
        "id": 197504282,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589429008
    },
    {
        "content": "<p>BTW, do we have an undergraduate student speaking French?</p>",
        "id": 197504336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589429070
    },
    {
        "content": "<p>If yes, I wonder if this student will volunteer to translate the whole document. It's not too much work but I think that Patrick is overqualified for this job.</p>",
        "id": 197504416,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589429165
    },
    {
        "content": "<p>(i.e., he could use this time for something else that an undergraduate can't do)</p>",
        "id": 197504426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589429228
    },
    {
        "content": "<p>Or I can translate in a comment, and let a student turn it into a list with links.</p>",
        "id": 197504433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589429259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197504416\">said</a>:</p>\n<blockquote>\n<p>If yes, I wonder if this student will volunteer to translate the whole document. It's not too much work but I think that Patrick is overqualified for this job.</p>\n</blockquote>\n<p>To be honest I feel I'm overqualified to write <code>format_lean</code>, <code>leancrawler</code> and <code>leanproject</code>, and rewriting the whole website infrastructure. One difference here is an undergrad may actually learn stuff about math and mathlib, so maybe I should dare suggest that <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> would be perfect for this job.</p>",
        "id": 197521625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589443854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197487987\">said</a>:</p>\n<blockquote>\n<p>Should we have space for some notes in the YAML in addition to just URLs, in case mathlib's treatment of those topics deserves additional explanation?</p>\n</blockquote>\n<p>How would you like them to be displayed in the end? Actually I don't like this idea. I think this information should be in either in the module docstrings or in the theories folder if it needs to be really long.</p>",
        "id": 197521760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589443950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197521625\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197504416\">said</a>:</p>\n<blockquote>\n<p>If yes, I wonder if this student will volunteer to translate the whole document. It's not too much work but I think that Patrick is overqualified for this job.</p>\n</blockquote>\n<p>To be honest I feel I'm overqualified to write <code>format_lean</code>, <code>leancrawler</code> and <code>leanproject</code>, and rewriting the whole website infrastructure. One difference here is an undergrad may actually learn stuff about math and mathlib, so maybe I should dare suggest that <span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> would be perfect for this job.</p>\n</blockquote>\n<p>I definitely can</p>",
        "id": 197553751,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589463045
    },
    {
        "content": "<p>Though, I don't really enjoy writing YAML and prefer TOML nowadays but that is a taste matter (and endless nights fighting with Ansible‚Ä¶)</p>",
        "id": 197553908,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589463121
    },
    {
        "content": "<p>I'm happy to help with French-&gt;English translation. You just want 2020 version of the national exam topics linked in the original post right?</p>",
        "id": 197554701,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589463453
    },
    {
        "content": "<p>I don't care at all about YaML vs toml, especially if I'm not the one doing the translation. But I have a hard time thinking how the format could be simpler than what I wrote in <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml</a></p>",
        "id": 197557710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589464668
    },
    {
        "content": "<p>It's great that both of you want to help here. Please coordinate to avoid duplicating efforts. You can either translate without caring about what's in mathlib or do both at the same time (but please don't cheat like Johan <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/10\">was tempted to</a>.</p>",
        "id": 197557953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589464767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197557710\">said</a>:</p>\n<blockquote>\n<p>I don't care at all about YaML vs toml, especially if I'm not the one doing the translation. But I have a hard time thinking how the format could be simpler than what I wrote in <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml</a></p>\n</blockquote>\n<p>Indeed</p>",
        "id": 197558549,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589465097
    },
    {
        "content": "<p>Do we agree that real analysis should be in that overview list?</p>",
        "id": 197558891,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589465269
    },
    {
        "content": "<p>Like \"Heine theorem\", \"continuity\", etc.</p>",
        "id": 197558913,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589465281
    },
    {
        "content": "<p>I think the plan is to put everything from <a href=\"http://media.devenirenseignant.gouv.fr/file/agreg_externe/59/7/p2020_agreg_ext_maths_1107597.pdf\">http://media.devenirenseignant.gouv.fr/file/agreg_externe/59/7/p2020_agreg_ext_maths_1107597.pdf</a> into the YAML file. And then present it as a challenge to mathlib users to make sure that every item has a corresponding entry in mathlib.</p>",
        "id": 197562380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589466141
    },
    {
        "content": "<p>To prevent the cheating, it might be easier to do a \"dumb\" translation first, without adding links to mathlib.</p>",
        "id": 197562559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589466181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197558913\">said</a>:</p>\n<blockquote>\n<p>Like \"Heine theorem\", \"continuity\", etc.</p>\n</blockquote>\n<p>This is all on pages 4 and 5.</p>",
        "id": 197562894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589466451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197562894\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197558913\">said</a>:</p>\n<blockquote>\n<p>Like \"Heine theorem\", \"continuity\", etc.</p>\n</blockquote>\n<p>This is all on pages 4 and 5.</p>\n</blockquote>\n<p>Okay, perfect ; it's clear now in my head</p>",
        "id": 197564621,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589467206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> What we can do is, I can let you backfill the current English version for links (if there's any), while I rewrite the overview_fr.yaml with french text and copy the current links over, and then, I add as much stuff as I can from the France teaching program, then you can translate it to the English version and get the links I found<br>\nWe can do some iterations of this algorithm which is somewhat guaranteed to finish in few PRs</p>",
        "id": 197565000,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589467387
    },
    {
        "content": "<p>Quick question, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> wouldn't we want something like real internationalisation in the future? With something like <a href=\"https://weblate.org/\">https://weblate.org/</a> (they provide free instances for open source) and it's able to do automatic commits for i18n, with various review mechanisms</p>",
        "id": 197568334,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589468674
    },
    {
        "content": "<p>What would you want to translate? Here the goal is not to have both a French and and English version</p>",
        "id": 197568476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589468740
    },
    {
        "content": "<p>I personally wouldn't worry about it too much.</p>",
        "id": 197568483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589468742
    },
    {
        "content": "<p>It's simply that the convenient data set I was able to find happens to be in French</p>",
        "id": 197568571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589468764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197568476\">said</a>:</p>\n<blockquote>\n<p>What would you want to translate? Here the goal is not to have both a French and and English version</p>\n</blockquote>\n<p><em>Ah</em> ‚Äî¬†Okay, it's a French ‚Üí¬†English translation only, I thought there was a goal to have a <code>overview_fr.yaml</code>, my apologies</p>",
        "id": 197568623,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589468783
    },
    {
        "content": "<p>We just want a long list that is a \"certified and stamped\" list of things that appear in an undergrad curriculum. And then pointers to mathlib.</p>",
        "id": 197568627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589468784
    },
    {
        "content": "<p>Sorry for the confusion, okay, I'm writing it now then</p>",
        "id": 197568698,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589468813
    },
    {
        "content": "<p>I can see Ryan totally entered translator mode. He'll have a lot of fun once <a href=\"https://github.com/mpedramfar/Lean-game-maker/pull/12\">https://github.com/mpedramfar/Lean-game-maker/pull/12</a> will be merged. He'll be able to continue the work stated in <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/83\">https://github.com/ImperialCollegeLondon/natural_number_game/pull/83</a></p>",
        "id": 197569779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589469164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197565000\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> We can split the work in:<br>\n‚Äî¬†I give you page 5 and later<br>\n‚Äî¬†I take page &lt; 5</p>\n</blockquote>\n<p>Sounds good! Should we setup a shared doc to have consistent formatting?</p>",
        "id": 197591080,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589477918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> and <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span>, are you making any progress here?</p>",
        "id": 198036164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589877431
    },
    {
        "content": "<p>I have a draft I'll post shortly. Just tidying up some formatting</p>",
        "id": 198085624,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589903112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198036164\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> and <span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span>, are you making any progress here?</p>\n</blockquote>\n<p>I have written some, I planned to get a working part of this today/tonight ; do you prefer small PR/improvements or rather a large PR implementing everything for this kind of changes?</p>",
        "id": 198090973,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589905401
    },
    {
        "content": "<p>the sooner you post any work, the less duplication of effort there will be, and the faster other people can make small contributions</p>",
        "id": 198093883,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589906644
    },
    {
        "content": "<p>Yup, nothing wrong with 37 small PRs!</p>",
        "id": 198095074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589907170
    },
    {
        "content": "<p>Here's my (still somewhat rough) draft<br>\n<a href=\"/user_uploads/3121/lvUObiaIBTIP6sTtCJUTHM-a/Aggregation_2020.pdf\">Aggregation_2020.pdf</a></p>",
        "id": 198108389,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589913254
    },
    {
        "content": "<p>I'm still working on some of the grittier formatting. Let me know if anything is conceptually incorrect, or if you have any other suggestions.</p>",
        "id": 198108533,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589913357
    },
    {
        "content": "<p>? working hard on formatting a pdf seems wrong, since the final goal will be markdown that lives somewhere in the mathlib docs or the leanprover community website<br>\n(more to the point : post source code!)</p>",
        "id": 198108677,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589913431
    },
    {
        "content": "<p>Even better: I suggest opening a PR <a href=\"https://github.com/leanprover-community/leanprover-community.github.io\">at the website repo</a> which makes additions / edits to <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml</a></p>",
        "id": 198109917,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589914017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197327955\">said</a>:</p>\n<blockquote>\n<p>In France we have a standard formatted list of undergraduate topics: the topics that are required for the agr√©gation, the French national exam for would be high school teachers. It changes slightly from year to year, but here is the <a href=\"http://media.devenirenseignant.gouv.fr/file/agreg_externe/59/7/p2020_agreg_ext_maths_1107597.pdf\">2020 version</a>.  It would be a very convenient first approximation, and we could modify it of course. I translated the first section (groups) and formatted it into the yaml file below. Turning that file into a webpage that looks like the mathlib overview but with links and separating missing stuff is a trivial programming exercise. My questions are: should I keep translating this list? Will there be people helping me by filling in links that I missed and editing the YaML file?</p>\n</blockquote>\n<p>See this part of the first message in this thread.</p>",
        "id": 198110037,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589914081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198108677\">said</a>:</p>\n<blockquote>\n<p>? working hard on formatting a pdf seems wrong, since the final goal will be markdown that lives somewhere in the mathlib docs or the leanprover community website<br>\n(more to the point : post source code!)</p>\n</blockquote>\n<p>I guess by \"grittier formatting\" I meant things on the level of \"clarifying that this is an exponent\". I'll post my source code</p>",
        "id": 198110095,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589914089
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/z9JXGJTD6IKaNqPau7kXsgmQ/Aggregation_2020.tex\">Aggregation_2020.tex</a></p>",
        "id": 198110213,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589914164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198110037\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197327955\">said</a>:</p>\n<blockquote>\n<p>In France we have a standard formatted list of undergraduate topics: the topics that are required for the agr√©gation, the French national exam for would be high school teachers. It changes slightly from year to year, but here is the <a href=\"http://media.devenirenseignant.gouv.fr/file/agreg_externe/59/7/p2020_agreg_ext_maths_1107597.pdf\">2020 version</a>.  It would be a very convenient first approximation, and we could modify it of course. I translated the first section (groups) and formatted it into the yaml file below. Turning that file into a webpage that looks like the mathlib overview but with links and separating missing stuff is a trivial programming exercise. My questions are: should I keep translating this list? Will there be people helping me by filling in links that I missed and editing the YaML file?</p>\n</blockquote>\n<p>See this part of the first message in this thread.</p>\n</blockquote>\n<p>Oh I see, don't know how I missed that. I can start putting this into the .yaml file too.</p>",
        "id": 198110422,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589914270
    },
    {
        "content": "<p>Ok I added the definitions from sections 5 and on as a PR. I think there are redundancies, and some definitions that could be organized better, but it's a start.<br>\n<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/compare/newsite...iceplant:patch-1\">https://github.com/leanprover-community/leanprover-community.github.io/compare/newsite...iceplant:patch-1</a></p>",
        "id": 198154368,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589949857
    },
    {
        "content": "<p>Great! Do you mind opening a PR? It will be easier for us to make comments and suggestions on it that way.</p>",
        "id": 198154754,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589950375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198154754\">said</a>:</p>\n<blockquote>\n<p>Great! Do you mind opening a PR? It will be easier for us to make comments and suggestions on it that way.</p>\n</blockquote>\n<p>I thought I opened a PR but apparently I am still a git noob and only branched. I just opened a PR for real.</p>",
        "id": 198515754,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590204653
    },
    {
        "content": "<p>Thank you! Here's the PR link for those who don't happen to be watching the repo: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/26\">https://github.com/leanprover-community/leanprover-community.github.io/pull/26</a></p>",
        "id": 198516234,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590205490
    },
    {
        "content": "<p>I'm trying to expand links to the real analysis section since I just finished @Patrick's tutorial, but I'm noticing many of the definitions are in an auxiliary file he wrote (like the definition of a convergent sequence) and I'm having trouble finding them in mathlib. Is that because they just don't exist there yet, or am I not looking in the right place?</p>",
        "id": 198545505,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590256878
    },
    {
        "content": "<p>if I go to the mathlib docs site and search for \"cauchy sequence\", i get useful results<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 198545609,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590257065
    },
    {
        "content": "<p>probably the biggest barrier for you personally contributing here is in \"know the words a mathematician might say\"</p>",
        "id": 198545679,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590257166
    },
    {
        "content": "<p>Rocky, everything which features in the tutorial is in mathlib except for stuff used in the very last file that I haven't found time to PR. However what is in mathlib can be very hard to recognize if you know only about the elementary theory.  But other people can fill this. Are you done with the translation?</p>",
        "id": 198547061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590259622
    },
    {
        "content": "<p>And there is no point in trying to put links to mathlib before you resolve all the issues at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/26\">https://github.com/leanprover-community/leanprover-community.github.io/pull/26</a></p>",
        "id": 198547132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590259710
    },
    {
        "content": "<p>Many definitions and theorems about limits in <code>mathlib</code> are formulated in a very general form (e.g. using <code>filter</code>s, <code>uniformity</code> structure, or <code>metric_space</code>s).</p>",
        "id": 198547280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590260001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198547280\">said</a>:</p>\n<blockquote>\n<p>Many definitions and theorems about limits in <code>mathlib</code> are formulated in a very general form (e.g. using <code>filter</code>s, <code>uniformity</code> structure, or <code>metric_space</code>s).</p>\n</blockquote>\n<p>That that explains a lot. I'll leave that section to others who understand this better then. Any suggestions on how to better understand these ideas? I'm familiar with filters in Haskell but haven't used them in Lean.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198547061\">said</a>:</p>\n<blockquote>\n<p>Rocky, everything which features in the tutorial is in mathlib except for stuff used in the very last file that I haven't found time to PR. However what is in mathlib can be very hard to recognize if you know only about the elementary theory.  But other people can fill this. Are you done with the translation?</p>\n</blockquote>\n<p>I finished the translation, did a rudimentary formatting sweep, and submitted a PR. Let me know if there's anything else I can do!</p>",
        "id": 198548036,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590261415
    },
    {
        "content": "<p>Filters are defined in order.filter.basic - they're not the same thing as <code>List.filter : (a -&gt; bool) -&gt; List a -&gt; List a</code>. A filter on a set U is a way of defining what it means for a subset of U to be \"large and not small\" in whatever sense you need \"large\" to mean, satisfying by definition certain \"large\" properties. Namely: U is itself large; a superset of a large set is large; and if you intersect two large sets then you still have a large set (that is what I meant by \"not small\"). It turns out to be possible to define analysis using filters on the naturals; this is closely linked to Robinson's rather lovely formulation of nonstandard analysis, but it's all very much not how you're initially taught to think about analysis, so don't expect the path to understanding to be quick. I had a quick skim of <a href=\"https://arxiv.org/pdf/1212.5740.pdf\">https://arxiv.org/pdf/1212.5740.pdf</a> and it seemed reasonable</p>",
        "id": 198548980,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590262943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  has a blogpost on filters <a href=\"https://xenaproject.wordpress.com/2018/08/04/what-is-a-filter-how-some-computer-scientists-think-about-limits/\">here</a>.</p>",
        "id": 198549056,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590263082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> The use of filters in mathlib has <em>nothing</em> to do with non-standard analysis. I think it is very unfortunate that filters can be used in non-standard analysis, since this gives a bad reputation to filters, whereas filters were nice and useful long before this application.</p>",
        "id": 198549338,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590263600
    },
    {
        "content": "<p>Some of my friends said that looking at a proof of tychonoff's theorem with filters and one without filters was the key to getting them onto the filter train</p>",
        "id": 198549649,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590264100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198548036\">said</a>:</p>\n<blockquote>\n<p>I finished the translation, did a rudimentary formatting sweep, and submitted a PR. Let me know if there's anything else I can do!</p>\n</blockquote>\n<p>I think patrick already suggested \"resolve the issues raised at your PR\" as a course of action</p>",
        "id": 198549703,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590264148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198549703\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198548036\">said</a>:</p>\n<blockquote>\n<p>I finished the translation, did a rudimentary formatting sweep, and submitted a PR. Let me know if there's anything else I can do!</p>\n</blockquote>\n<p>I think patrick already suggested \"resolve the issues raised at your PR\" as a course of action</p>\n</blockquote>\n<p>I believe I resolved all the issues that were raised (to the best of my abilities, Ryan brought up some nuance in terminology that I'm not super familiar with). Is that not showing up?</p>",
        "id": 198550115,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590264771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198550115\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198549703\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/198548036\">said</a>:</p>\n<blockquote>\n<p>I finished the translation, did a rudimentary formatting sweep, and submitted a PR. Let me know if there's anything else I can do!</p>\n</blockquote>\n<p>I think patrick already suggested \"resolve the issues raised at your PR\" as a course of action</p>\n</blockquote>\n<p>I believe I resolved all the issues that were raised (to the best of my abilities, Ryan brought up some nuance in terminology that I'm not super familiar with). Is that not showing up?</p>\n</blockquote>\n<p>Let me check</p>",
        "id": 198550325,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590265104
    },
    {
        "content": "<p>AFAIK, our comments are still there</p>",
        "id": 198550338,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590265153
    },
    {
        "content": "<p>Some of them are nuance in terminology, but others are just little typos (Euler for instance)</p>",
        "id": 198550346,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590265169
    },
    {
        "content": "<p>Rocky, if you don't see the \"Outdated\" label in yellow as in <br>\n<a href=\"/user_uploads/3121/2cSF2yqfVjlVXC5KN7I5Z7Ea/image.png\">image.png</a> <br>\nthen you probably didn't fix an issue. Once an issue is fixed, there are two options: if you are sure you fixed it, then click the \"Resolve conversation\" button. Otherwise post a comment saying you tried to fix it but you're not sure</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2cSF2yqfVjlVXC5KN7I5Z7Ea/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2cSF2yqfVjlVXC5KN7I5Z7Ea/image.png\"></a></div>",
        "id": 198550535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590265446
    },
    {
        "content": "<p>The picture shows both the oudated label and the \"Resolve conversation\" button</p>",
        "id": 198550542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590265485
    },
    {
        "content": "<p>I closed most of the issues. <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> I responded to your two comments that I didn't resolve.</p>",
        "id": 198552688,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590269075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> Answered to the 2nd comment, the 1st one can be fixed in the next PR</p>",
        "id": 198553006,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590269583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Let us know if you like the new PR, so that I can start adding stuff on the top of it</p>",
        "id": 198553014,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590269609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> Thanks for all the fixes! <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> I'll merge it now to let you work on it.</p>",
        "id": 198553433,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590270305
    },
    {
        "content": "<p>Appreciate it!</p>",
        "id": 198553492,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590270398
    },
    {
        "content": "<p>So the first thing is this:<br>\n<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/27\">https://github.com/leanprover-community/leanprover-community.github.io/pull/27</a><br>\nI'll do a parallel PR for backfilling links wherever I can</p>",
        "id": 198553704,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590270828
    },
    {
        "content": "<p>Then, maybe we can get feedback from the people in this feed at the same time on capitalization/unicode/should include LaTeX or not/etc of some points.</p>",
        "id": 198553754,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590270869
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/28\">https://github.com/leanprover-community/leanprover-community.github.io/pull/28</a></p>",
        "id": 198557007,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590277049
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/33\">https://github.com/leanprover-community/leanprover-community.github.io/pull/33</a> here's a PR to generate the overview page<br>\n<span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I might be looking for your feedback if you will <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 199223330,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590794071
    },
    {
        "content": "<p>I rebased <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/28\">https://github.com/leanprover-community/leanprover-community.github.io/pull/28</a> and we can merge it if we want, I think getting as much links as possible even in small increments/PRs seems a good strategy</p>",
        "id": 199224902,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590795549
    },
    {
        "content": "<p>At a first glance the overview page PR looks pretty good. It looks like there's still some discussion occurring around the links. I don't want to merge before getting <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>'s opinion though.</p>",
        "id": 199228053,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590798437
    },
    {
        "content": "<p>Looks good to me! Thanks for all the effort!</p>",
        "id": 199240222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590817324
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> . This is not yet what I had in mind, but we are getting closer. I just let a review.</p>",
        "id": 199249280,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590833301
    },
    {
        "content": "<p>PS: Ryan, using <code>/</code> in a git branch name is a <em>really</em> bad idea. It interfere with <code>remote/branch</code> syntax</p>",
        "id": 199249399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590833500
    },
    {
        "content": "<p>I merged this PR anyway because we really need people to be able to contribute to the yaml file, and the layout PR also had yaml syntactic fixes (mixing both in the same PR was also not the greatest idea).</p>",
        "id": 199249517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590833660
    },
    {
        "content": "<p>But now I cannot merge <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/28\">https://github.com/leanprover-community/leanprover-community.github.io/pull/28</a> because of conflicts. <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> could you fix that really soon? I don't want to steal your commit authorship by fixing things on my side.</p>",
        "id": 199249599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590833809
    },
    {
        "content": "<p>I don't remember whether I wrote this publicly. But I would really <em>really</em> like this list to be ready to be seen on Wednesday. The reason is that I've been asked to give a propaganda talk at IAS on Wednesday.</p>",
        "id": 199249673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590833981
    },
    {
        "content": "<p>So it would be really nice for the community if we could have a <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">overview.yaml</a> spring filling as many links as possible. You don't even need to know any git. You can simply hit the edit button (small pen in the top right corner) to propose new links.</p>",
        "id": 199249746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590834079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199249599\">said</a>:</p>\n<blockquote>\n<p>But now I cannot merge <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/28\">https://github.com/leanprover-community/leanprover-community.github.io/pull/28</a> because of conflicts. <span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> could you fix that really soon? I don't want to steal your commit authorship by fixing things on my side.</p>\n</blockquote>\n<p>Yes, I'll do it</p>",
        "id": 199250428,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199249399\">said</a>:</p>\n<blockquote>\n<p>PS: Ryan, using <code>/</code> in a git branch name is a <em>really</em> bad idea. It interfere with <code>remote/branch</code> syntax</p>\n</blockquote>\n<p>AFAIK, it should not, I have been using it for ‚â•¬†5 years, it just works fine to do <code>remote/xxx/yyy</code>, have you a precise example in mind?</p>",
        "id": 199250443,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835394
    },
    {
        "content": "<p>It prevents you to skip the remote part when you want to use the default remote</p>",
        "id": 199250496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590835494
    },
    {
        "content": "<p>Do you mean like <code>git merge xxx/yyy</code>? It'll indeed use local branches rather than origin (or whatever is the default) branches, but I can change it and replace <code>/</code> by <code>-</code></p>",
        "id": 199250570,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835639
    },
    {
        "content": "<p>I answered to some of the comments on the overview generation PR</p>",
        "id": 199250575,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835660
    },
    {
        "content": "<p>As I see it, the overview backfilling links PR is fine, and should not require any further rebasing over newsite (?), so it can be merged</p>",
        "id": 199250618,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835691
    },
    {
        "content": "<p>It's also annoying in general for anyone who wants to do programmatic manipulation of git branches - there's nothing to prevent you naming a branch <code>refs/heads/branchname</code> if you want, but it similarly forces the tool-writer to get their manipulations exactly right. If the user had just not put any slashes in, the problem would be so simple, you could just split on the <code>/</code> character no matter what style of ref you were given</p>",
        "id": 199250624,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590835714
    },
    {
        "content": "<p>(I have strong opinions on this - if <code>/</code> were simply a disallowed character in branch names, the whole system would be so much less complex)</p>",
        "id": 199250634,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590835761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250624\">said</a>:</p>\n<blockquote>\n<p>It's also annoying in general for anyone who wants to do programmatic manipulation of git branches - there's nothing to prevent you naming a branch <code>refs/heads/branchname</code> if you want, but it similarly forces the tool-writer to get their manipulations exactly right. If the user had just not put any slashes in, the problem would be so simple, you could just split on the <code>/</code> character no matter what style of ref you were given</p>\n</blockquote>\n<p>But anyway, as <em>it is possible</em>, that sounds like sane to me for tool authors to not rely on this kind of behavior and perform exact manipulation, as they would have all the \"information\"</p>",
        "id": 199250638,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250634\">said</a>:</p>\n<blockquote>\n<p>(I have strong opinions on this - if <code>/</code> were simply a disallowed character in branch names, the whole system would be so much less complex)</p>\n</blockquote>\n<p>I don't have a good visual image of how complex the system is due to this, I don't know enough git internals</p>",
        "id": 199250646,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835793
    },
    {
        "content": "<p>I'll fix it in my further PRs/branches :)</p>",
        "id": 199250690,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250618\">said</a>:</p>\n<blockquote>\n<p>As I see it, the overview backfilling links PR is fine, and should not require any further rebasing over newsite (?), so it can be merged</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/SBVSkmF4Imk_AA9hXkrw8yxF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SBVSkmF4Imk_AA9hXkrw8yxF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SBVSkmF4Imk_AA9hXkrw8yxF/image.png\"></a></div>",
        "id": 199250698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590835840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250570\">said</a>:</p>\n<blockquote>\n<p>Do you mean like <code>git merge xxx/yyy</code>? It'll indeed use local branches rather than origin (or whatever is the default) branches, but I can change it and replace <code>/</code> by <code>-</code></p>\n</blockquote>\n<p>I mean <code>git fetch</code></p>",
        "id": 199250711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590835859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250698\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250618\">said</a>:</p>\n<blockquote>\n<p>As I see it, the overview backfilling links PR is fine, and should not require any further rebasing over newsite (?), so it can be merged</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/SBVSkmF4Imk_AA9hXkrw8yxF/image.png\">image.png</a></p>\n</blockquote>\n<p>My GitHub UI seems to be outdated/stuck, I'll rebase it again to ensure everything is fine</p>",
        "id": 199250738,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835895
    },
    {
        "content": "<p>Done</p>",
        "id": 199250788,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250711\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199250570\">said</a>:</p>\n<blockquote>\n<p>Do you mean like <code>git merge xxx/yyy</code>? It'll indeed use local branches rather than origin (or whatever is the default) branches, but I can change it and replace <code>/</code> by <code>-</code></p>\n</blockquote>\n<p>I mean <code>git fetch</code></p>\n</blockquote>\n<p>Okay, that's a fair point :-)</p>",
        "id": 199250792,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590835974
    },
    {
        "content": "<p>Thanks for rebasing. I merged it. So now everybody can contribute to filling more links.</p>",
        "id": 199250885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590836142
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> wonder if I could get commit access to the repository (w/o master or newsite for example), that'd make a simpler workflow for some PRs which might be edited on the top (e.g. links backfilling)</p>",
        "id": 199250887,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836145
    },
    {
        "content": "<p>Could you try to use some TeX in this yaml file? Mathjax is loaded on all pages of the website. So if the yaml parser doesn't get confused then it should work. And if it does get confused then maybe enclosing stuff in quote would be good enough to unconfuse it.</p>",
        "id": 199250937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590836214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I was definitely going to try this</p>",
        "id": 199250943,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836226
    },
    {
        "content": "<p>I can replace the Unicode math by some LaTeX</p>",
        "id": 199250949,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836240
    },
    {
        "content": "<p>The result might be ugly though, like if you do inline math in respect to the line height (?), but I'm no expert, we'll see and I'll post about it</p>",
        "id": 199250954,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836277
    },
    {
        "content": "<p>I see that real numbers don't even have a unicode mathbb.</p>",
        "id": 199251004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590836322
    },
    {
        "content": "<p>:-)</p>",
        "id": 199251018,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836355
    },
    {
        "content": "<p>That's an easy fix <code>s/R/$\\mathbb{R}$/g</code></p>",
        "id": 199251023,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836382
    },
    {
        "content": "<p>About the repo access, I'd be happy to give you write access to branches that are not master or newsite, but I'm not sure this wouldn't mess up CI (if I need to protect branches or something), so I'll let Bryan handle that.</p>",
        "id": 199251025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590836393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199251025\">said</a>:</p>\n<blockquote>\n<p>About the repo access, I'd be happy to give you write access to branches that are not master or newsite, but I'm not sure this wouldn't mess up CI (if I need to protect branches or something), so I'll let Bryan handle that.</p>\n</blockquote>\n<p>Sure thing</p>",
        "id": 199251065,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Also, should we just use <code>complex.xxx</code> for the link syntax</p>",
        "id": 199251093,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836467
    },
    {
        "content": "<p>And use <code>mathlib_docs/find/{{ decl }}</code></p>",
        "id": 199251108,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836474
    },
    {
        "content": "<p>Sounds like an easy way to fill links, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exists_root\">https://leanprover-community.github.io/mathlib_docs/find/complex.exists_root</a> for <code>complex.exists_root</code></p>",
        "id": 199251116,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836498
    },
    {
        "content": "<p>(I mean rather the <code>module.statement</code> syntax rather than the <code>folder1/folder2/module.html#statement</code> or whatever)</p>",
        "id": 199251162,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590836534
    },
    {
        "content": "<p>The advantage of the current format is you can fill in items while browsing the doc website and copy-pasting partial links</p>",
        "id": 199251321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590836791
    },
    {
        "content": "<p>And also a dot separated format looks like Lean namespacing and we don't have any convenient way to access the fully qualified name of a declaration while staring at the file containing it.</p>",
        "id": 199251332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590836854
    },
    {
        "content": "<p>isn't it just whatever the statement of a declaration we're looking at?</p>",
        "id": 199251701,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590837271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> ^</p>",
        "id": 199251702,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590837275
    },
    {
        "content": "<p>But alright, I was just finding the process of browsing/copying a bit slow for massive link injection</p>",
        "id": 199251712,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590837293
    },
    {
        "content": "<p>But that's the computer scientist in me who is talking, pay no heed</p>",
        "id": 199251715,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590837303
    },
    {
        "content": "<p>The problem when looking at a declaration is that it can be hard to work out what namespace you're currently in (because so many mathlib files are so long). You can insert a <code>#where</code> to discover the namespace, but this will cause recompilation headaches if you're jumping between many files.</p>",
        "id": 199251823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590837459
    },
    {
        "content": "<p>Okay, that's not very usable for browsing docs ‚Üí injecting them in the YAML file, thanks for the clarification</p>",
        "id": 199251830,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590837481
    },
    {
        "content": "<p>Yes, the <code>/find/</code> page just takes a (complete) identifier. Notice that the docs always print a complete identifier, so if you look at (randomly) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/std.prec.max_plus\">docs#std.prec.max_plus</a> you can copy <code>std.prec.max_plus</code> directly. It's trickier to find this browsing the Lean source, but you can keep a file with <code>import all</code> open and just use tab complete.</p>",
        "id": 199251922,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590837611
    },
    {
        "content": "<p>It's easy enough to expose the declaration name -&gt; location map from the doc generator if this is useful.</p>",
        "id": 199251956,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590837683
    },
    {
        "content": "<p>The benefit to using this over hardcoded links, of course, is that if a declaration is moved to a new file the links won't break. Even more important if you're linking to lines in the source, which are very likely to break. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/std.prec.max_plus/src\">src#std.prec.max_plus</a> will stay up to date.</p>",
        "id": 199252061,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590837829
    },
    {
        "content": "<p>Maybe what we can do now is to use hardcoded links, then we can do an automatic pass to rewrite them properly using the complete identifier, so we can hit the deadline of the IAS for <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 199252212,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590838053
    },
    {
        "content": "<p>But decl name ‚Üí location map would be useful I guess, I don't know if it has to be exposed in the HTML or as a JSON/YAML machine-consumable</p>",
        "id": 199252256,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590838087
    },
    {
        "content": "<p>Your links already contain the complete identifier, right? I see things like <code>algebra/pi_instances.html#prod.module</code>. Everything after the <code>#</code> is the complete identifier.</p>",
        "id": 199252289,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590838187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199252256\">said</a>:</p>\n<blockquote>\n<p>But decl name ‚Üí location map would be useful I guess, I don't know if it has to be exposed in the HTML or as a JSON/YAML machine-consumable</p>\n</blockquote>\n<p>It wouldn't change the HTML at all, would just host a file <a href=\"http://leanprover-community.github.io/mathlib_docs/name_to_loc.json\">leanprover-community.github.io/mathlib_docs/name_to_loc.json</a>.</p>",
        "id": 199252358,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590838285
    },
    {
        "content": "<p>So if the website generator needed this info it could just grab the map there.</p>",
        "id": 199252379,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590838318
    },
    {
        "content": "<p>It could include more info too, e.g. the type of the declaration. I think this would be particularly nice for the 100 theorems list, to print the statement on the main page.</p>",
        "id": 199252428,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590838356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199252289\">said</a>:</p>\n<blockquote>\n<p>Your links already contain the complete identifier, right? I see things like <code>algebra/pi_instances.html#prod.module</code>. Everything after the <code>#</code> is the complete identifier.</p>\n</blockquote>\n<p>Well, this was something I grabbed from the doc link, so I didn't know if it was complete or not</p>",
        "id": 199252946,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590839172
    },
    {
        "content": "<p>Sounds good <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> ‚Äî¬†I'll see what I can do, but maybe after IAS to make it cooler</p>",
        "id": 199252962,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590839203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199251823\">said</a>:</p>\n<blockquote>\n<p>The problem when looking at a declaration is that it can be hard to work out what namespace you're currently in (because so many mathlib files are so long). You can insert a <code>#where</code> to discover the namespace, but this will cause recompilation headaches if you're jumping between many files.</p>\n</blockquote>\n<p>Earlier, someone (Kevin?) suggested that we could have theorem declarations be hoverable same as theorem uses. If the hover contained the full namespaced name, wouldn't that solve the problem?</p>",
        "id": 199253746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590840475
    },
    {
        "content": "<p>Yes</p>",
        "id": 199253868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590840692
    },
    {
        "content": "<p>Can someone (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> ?) tell me how complete the <code>.yaml</code> now is?<br>\nIs it just a matter of filling in the links, or are there also still new sections that need to be added to the .yaml?</p>",
        "id": 199256060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590844067
    },
    {
        "content": "<p>Filling the links would be awesome</p>",
        "id": 199256101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590844112
    },
    {
        "content": "<p>We don't plan to add sections soon. At some point we'll probably want to add more advanced sections, maybe in another file.</p>",
        "id": 199256112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590844150
    },
    {
        "content": "<p>Which years does this cover? Is this like 1st and 2nd year of French math education?</p>",
        "id": 199256118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590844172
    },
    {
        "content": "<p>How should I interpret this file?</p>",
        "id": 199256120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590844180
    },
    {
        "content": "<p>Can we add<br>\n<code>http://media.devenirenseignant.gouv.fr/file/agreg_externe/59/7/p2020_agreg_ext_maths_1107597.pdf</code><br>\nto the top of the file, in a comment?</p>",
        "id": 199256201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590844265
    },
    {
        "content": "<p>Is this file already rendered somewhere on a public facing website?</p>",
        "id": 199256211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590844283
    },
    {
        "content": "<p>There is a semi-hidden temporary rendering at <a href=\"https://leanprover-community.github.io/overview.html\">https://leanprover-community.github.io/overview.html</a>, but really you should ignore that and just fill in</p>",
        "id": 199256275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590844336
    },
    {
        "content": "<p>What is the correct link for complementary subspaces: <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/projection.html\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/projection.html</a> ? Do we have a statement that says that you can choose such a subspace? (<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>)</p>",
        "id": 199256740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590845020
    },
    {
        "content": "<p>Hmm, <a href=\"https://leanprover-community.github.io/mathlib_docs/order/bounded_lattice.html#is_compl\">https://leanprover-community.github.io/mathlib_docs/order/bounded_lattice.html#is_compl</a> might be a bit too abstract...</p>",
        "id": 199256834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590845134
    },
    {
        "content": "<p>Exactly</p>",
        "id": 199256895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590845217
    },
    {
        "content": "<p>It's still useful information that this is how it's said in mathlib. And we can always add more context in <a href=\"https://leanprover-community.github.io/theories/linear_algebra.html\">https://leanprover-community.github.io/theories/linear_algebra.html</a></p>",
        "id": 199256993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590845394
    },
    {
        "content": "<p>Do we allow multiple links per item?</p>",
        "id": 199257120,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590845580
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/basis.html#submodule.exists_is_compl\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/basis.html#submodule.exists_is_compl</a> states that a complementary subspace exists.</p>",
        "id": 199257155,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590845631
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/complemented.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/complemented.html</a> for Banach space version (closed complementary subspaces).</p>",
        "id": 199257200,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590845670
    },
    {
        "content": "<p>There is no issue putting several links per item in the yaml file, but that would be hard to render if we want to keep it compact (where each listed item is a link to something).</p>",
        "id": 199257287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590845833
    },
    {
        "content": "<p>We still don't have Cayley‚ÄìHamilton</p>",
        "id": 199257288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590845840
    },
    {
        "content": "<p>We could link to the first item, and append little link markers for the further links</p>",
        "id": 199257296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590845870
    },
    {
        "content": "<p>Yes, this is one of the goal of this list: highlighting glaring holes (although this is not how I intend to use it on Wednesday...).</p>",
        "id": 199257299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590845878
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/36\">https://github.com/leanprover-community/leanprover-community.github.io/pull/36</a> is what I've found for section 1.</p>",
        "id": 199257354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590845947
    },
    {
        "content": "<p>Should we show formalized and not yet formalized items on different pages?</p>",
        "id": 199257427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590846047
    },
    {
        "content": "<p>Yes, I think they should  be on different pages</p>",
        "id": 199257441,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590846085
    },
    {
        "content": "<p>Maybe just an option at the top</p>",
        "id": 199257443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590846087
    },
    {
        "content": "<p>Where you can toggle what you want to see.</p>",
        "id": 199257446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590846094
    },
    {
        "content": "<p>With a bit of CSS classes that should be trivial</p>",
        "id": 199257449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590846106
    },
    {
        "content": "<p>True, but we also want to browse the TODO list, without seeing what is done</p>",
        "id": 199257489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590846132
    },
    {
        "content": "<p>That's what I'm saying, right?</p>",
        "id": 199257636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590846368
    },
    {
        "content": "<p>Two radio buttons should be able to provide that.</p>",
        "id": 199257638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590846381
    },
    {
        "content": "<p><code>Done: on/off¬†¬†  ¬†¬†TODO: on/off</code></p>",
        "id": 199257646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590846410
    },
    {
        "content": "<p>Oh ok, right. Feel free to implement, or hope Ryan will do it.</p>",
        "id": 199257791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590846648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199257354\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/36\">https://github.com/leanprover-community/leanprover-community.github.io/pull/36</a> is what I've found for section 1.</p>\n</blockquote>\n<p>Merged, thanks!</p>",
        "id": 199258201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590847272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199257646\">said</a>:</p>\n<blockquote>\n<p><code>Done: on/off¬†¬†  ¬†¬†TODO: on/off</code></p>\n</blockquote>\n<p>Sounds good</p>",
        "id": 199258443,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590847721
    },
    {
        "content": "<p>I'm doing it now</p>",
        "id": 199258532,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590847907
    },
    {
        "content": "<p><code>Coprime elements:</code> we have coprime ideals (<code>ideal.is_coprime</code>) but not specifically coprime elements. To do or not to do?</p>",
        "id": 199259135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590848872
    },
    {
        "content": "<p>I guess it's \"alright\"</p>",
        "id": 199259255,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590849003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Does the \"boss\" have an opinion? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 199259698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590849607
    },
    {
        "content": "<p><code>ideal.is_coprime</code> is a definition of coprime <em>elements</em> that uses ideals.</p>",
        "id": 199259945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590849955
    },
    {
        "content": "<p>Ooh, that's an ugly name in that case</p>",
        "id": 199260030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850069
    },
    {
        "content": "<p><code>Divisibility in commutative integral rings</code> what does this mean? What's an <code>integral ring</code>?</p>",
        "id": 199260078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850111
    },
    {
        "content": "<p>I guess for a general ring one can make sense of coprimality of two elements by just asking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">(a)+(b)=R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, but then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> would not be coprime in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[X,Y]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 199260154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590850206
    },
    {
        "content": "<p>What the hack is a <code>Rupture fields:</code>?</p>",
        "id": 199260260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850416
    },
    {
        "content": "<p>splitting field?</p>",
        "id": 199260307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590850463
    },
    {
        "content": "<p>Nope, that's the next item</p>",
        "id": 199260331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850499
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/37\">https://github.com/leanprover-community/leanprover-community.github.io/pull/37</a> here's a bunch of links for section 3 (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>)</p>",
        "id": 199260339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850513
    },
    {
        "content": "<p>It's just the field when you adjoin one root, but not necessarily all of them</p>",
        "id": 199260340,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590850513
    },
    {
        "content": "<p>So we have that, right?</p>",
        "id": 199260343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850525
    },
    {
        "content": "<p>Yes</p>",
        "id": 199260356,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590850530
    },
    {
        "content": "<p><a href=\"https://fr.wikipedia.org/wiki/Corps_de_rupture\">https://fr.wikipedia.org/wiki/Corps_de_rupture</a></p>",
        "id": 199260371,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590850550
    },
    {
        "content": "<p><code>Derived polynomials: # Should this be \"Polynomial derivative\"?</code> <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span></p>",
        "id": 199260381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes, it's really <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>P</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">‚Ä≤</mo></msup></mrow><annotation encoding=\"application/x-tex\">P'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a polynomial IIRC</p>",
        "id": 199260429,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850589
    },
    {
        "content": "<p>as a <em>formal polynomial</em></p>",
        "id": 199260434,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850598
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Rupture_field\">https://en.wikipedia.org/wiki/Rupture_field</a></p>",
        "id": 199260435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590850608
    },
    {
        "content": "<p>I was going to link it :D</p>",
        "id": 199260437,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850618
    },
    {
        "content": "<p>I definitely assumed this was a mistranslation</p>",
        "id": 199260440,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590850623
    },
    {
        "content": "<p>I double checked those because it looked fishy to me but Wikipedia proved me wrong</p>",
        "id": 199260447,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850637
    },
    {
        "content": "<p>TIL</p>",
        "id": 199260455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850663
    },
    {
        "content": "<p>But really, sometimes, in France, there seems to be many structures which are not \"directly\" available in English</p>",
        "id": 199260456,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850664
    },
    {
        "content": "<p>Also, our convergence is not the good one :-¬∞</p>",
        "id": 199260459,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850675
    },
    {
        "content": "<p>We call a limit, something which is rather limit by different values <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi>lim</mi><mo>‚Å°</mo></mo><mfrac linethickness=\"0px\"><mrow><mi>x</mi><mo>‚Üí</mo><mi>a</mi></mrow><mrow><mi>x</mi><mo mathvariant=\"normal\">‚â†</mo><mi>a</mi></mrow></mfrac></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\lim_{x \\to a \\atop x \\neq a} f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2882em;vertical-align:-0.5382em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.54498em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7785428571428572em;\"><span style=\"top:-2.156em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.69444em;\"><span class=\"pstrut\" style=\"height:2.69444em;\"></span><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel mtight\">ÓÄ†</span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathdefault mtight\">a</span></span></span></span><span style=\"top:-2.971em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mathdefault mtight\">a</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.48288571428571425em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5382em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> (for example)</p>",
        "id": 199260541,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850743
    },
    {
        "content": "<p>But it does not matter</p>",
        "id": 199260543,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850751
    },
    {
        "content": "<p>I've pushed those two fixes</p>",
        "id": 199260547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590850761
    },
    {
        "content": "<p>I have the desired feature</p>",
        "id": 199260713,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850963
    },
    {
        "content": "<p>Will push it</p>",
        "id": 199260715,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590850966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199260713\">said</a>:</p>\n<blockquote>\n<p>I have the desired feature</p>\n</blockquote>\n<p>You mean the radio buttons?</p>",
        "id": 199260786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590851056
    },
    {
        "content": "<p>Yes</p>",
        "id": 199260836,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851096
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/38\">https://github.com/leanprover-community/leanprover-community.github.io/pull/38</a></p>",
        "id": 199260837,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851097
    },
    {
        "content": "<p>Awesome PRs <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 199260859,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851138
    },
    {
        "content": "<p>We should try to use LaTeX for titles</p>",
        "id": 199260868,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851147
    },
    {
        "content": "<p>Like \"something something $\\Q[X]$ something\" if we have the macro for, or just $\\mathbb{Q}$</p>",
        "id": 199260910,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851162
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/DoisLII3Zb--Pa_Z5R12Xkwn/Screen-Capture_select-area_20200530170650.png\">Screen-Capture_select-area_20200530170650.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DoisLII3Zb--Pa_Z5R12Xkwn/Screen-Capture_select-area_20200530170650.png\" title=\"Screen-Capture_select-area_20200530170650.png\"><img src=\"/user_uploads/3121/DoisLII3Zb--Pa_Z5R12Xkwn/Screen-Capture_select-area_20200530170650.png\"></a></div>",
        "id": 199260944,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851221
    },
    {
        "content": "<p>LaTeX is working just fine</p>",
        "id": 199260949,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851225
    },
    {
        "content": "<p>Will do a PR to add some examples</p>",
        "id": 199260952,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851230
    },
    {
        "content": "<p>of course, we don't have the macro \\Q</p>",
        "id": 199260974,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851251
    },
    {
        "content": "<p>should we add some macros to our MathJax setup?</p>",
        "id": 199260980,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851263
    },
    {
        "content": "<p>You could add some common macros to the top of the rendered page.</p>",
        "id": 199260983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590851271
    },
    {
        "content": "<p>Alright, I'll do it</p>",
        "id": 199261025,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851282
    },
    {
        "content": "<p>Shouldn't I do this in <code>templates/_base.html</code> ?</p>",
        "id": 199261028,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851293
    },
    {
        "content": "<p>Je ne sais pas</p>",
        "id": 199261030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590851300
    },
    {
        "content": "<p>I'll try locally, if it works fine, I'll let as-is and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> will do the ultimate call</p>",
        "id": 199261040,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851327
    },
    {
        "content": "<p>:D</p>",
        "id": 199261043,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851329
    },
    {
        "content": "<p>Does not work, so I'll put it in the base</p>",
        "id": 199261206,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590851531
    },
    {
        "content": "<p>I'm sorry I was away. Are there still things to discuss, or did you settle everything?</p>",
        "id": 199261598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590852050
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/39\">https://github.com/leanprover-community/leanprover-community.github.io/pull/39</a></p>",
        "id": 199261604,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> You can take a look to 39 &amp; 38 and see if it's okay for you</p>",
        "id": 199261612,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852068
    },
    {
        "content": "<p>I think we can add a couple of LaTeX macros in <code>_base.html</code>.</p>",
        "id": 199261613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590852069
    },
    {
        "content": "<p>39 implements the LaTeX macros in _base</p>",
        "id": 199261617,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852077
    },
    {
        "content": "<p>I didn't go too far, I just added R, Q, Z, C, N</p>",
        "id": 199261622,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852088
    },
    {
        "content": "<p>We could add GL, L, class{n} (continuity classes), S(R^d), etc. Depends.</p>",
        "id": 199261674,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> By now, my PR should be uncontroversial.</p>",
        "id": 199261676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852130
    },
    {
        "content": "<p>I think GL, SL, etc are fine. But I wouldn't go overboard with the macros.</p>",
        "id": 199261707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852184
    },
    {
        "content": "<p>I do mathrm{GL}, etc. for them</p>",
        "id": 199261715,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852199
    },
    {
        "content": "<p>You can see it in 39</p>",
        "id": 199261718,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852205
    },
    {
        "content": "<p>Maybe the rule of three applies? If you need it more then 3 times, a macro should be fine.</p>",
        "id": 199261720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852210
    },
    {
        "content": "<p>GL(n, R), GL(n, C)‚Ä¶</p>",
        "id": 199261721,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852218
    },
    {
        "content": "<p>Are those 3 PRs compatible?</p>",
        "id": 199261723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590852226
    },
    {
        "content": "<p>O(n, 2), O(n, 3)‚Ä¶</p>",
        "id": 199261725,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Please merge Johan's ones first</p>",
        "id": 199261728,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852234
    },
    {
        "content": "<p>Then I'll do the rebase magic for whatever happens</p>",
        "id": 199261742,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852242
    },
    {
        "content": "<p>I'm pretty sure there are no to very few conflicts</p>",
        "id": 199261773,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852262
    },
    {
        "content": "<p>(we're close to have everything in rings, wow!)</p>",
        "id": 199261801,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> One second</p>",
        "id": 199261808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852328
    },
    {
        "content": "<p>Ryan spotted an issue in my PR</p>",
        "id": 199261813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> it's not that important, I'm fixing it in my PR</p>",
        "id": 199261827,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852356
    },
    {
        "content": "<p>If you don't do it, that'll just break newsite temporarily (before merging mine)</p>",
        "id": 199261867,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Ok, you can merge now</p>",
        "id": 199261907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852459
    },
    {
        "content": "<p>I reviewed Johan's PR</p>",
        "id": 199261909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590852463
    },
    {
        "content": "<p>But I could merge it since my comments are only about empty items</p>",
        "id": 199261957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590852489
    },
    {
        "content": "<p>Nevermind my comments</p>",
        "id": 199261959,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852495
    },
    {
        "content": "<p>Yes, I think we can merge it</p>",
        "id": 199261961,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852499
    },
    {
        "content": "<p>Also, I need to go now</p>",
        "id": 199261970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852536
    },
    {
        "content": "<p>Thanks Johan, I merged it.</p>",
        "id": 199262030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590852607
    },
    {
        "content": "<p>Fixing the conflicts</p>",
        "id": 199262037,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852618
    },
    {
        "content": "<p>Conflicts resolved, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 199262126,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852805
    },
    {
        "content": "<p>I'll experiment for the \"show inline elements for the last depth level\"</p>",
        "id": 199262239,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590852942
    },
    {
        "content": "<p>Great!</p>",
        "id": 199262380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> style question, should we do titlecase for every title?</p>",
        "id": 199262387,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853112
    },
    {
        "content": "<p>I merged the switch one and this created conflict in the macro one</p>",
        "id": 199262388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853114
    },
    {
        "content": "<p>I'll fix the macro one</p>",
        "id": 199262395,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853133
    },
    {
        "content": "<p>About titlecase, let's do whatever is convenient in the yaml, and we can add a jinja filter if we want to change it on the website</p>",
        "id": 199262413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853171
    },
    {
        "content": "<p>At the make_site phase, we can just give title.titlecase() if we want, it was really just should we do it or not?</p>",
        "id": 199262427,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853200
    },
    {
        "content": "<p>The title of the page should change too. I think we can use \"Undergraduate mathematics in mathlib\".</p>",
        "id": 199262466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853204
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/40\">https://github.com/leanprover-community/leanprover-community.github.io/pull/40</a> for deepest level</p>",
        "id": 199262468,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> conflicts resolved on the latex one</p>",
        "id": 199262496,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853261
    },
    {
        "content": "<p>\"Done undergraduate mathematics in Lean\"<br>\n:-)</p>\n<p><a href=\"/user_uploads/3121/TOGczTWHzF59xtt9ylweOVAC/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_42_06.png\">screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_42_06.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TOGczTWHzF59xtt9ylweOVAC/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_42_06.png\" title=\"screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_42_06.png\"><img src=\"/user_uploads/3121/TOGczTWHzF59xtt9ylweOVAC/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_42_06.png\"></a></div>",
        "id": 199262571,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853364
    },
    {
        "content": "<p>We try to checkout your PR 40 it doesn't seem to work</p>",
        "id": 199262604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853442
    },
    {
        "content": "<p>Does it work on your end?</p>",
        "id": 199262645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199262604\">said</a>:</p>\n<blockquote>\n<p>We try to checkout your PR 40 it doesn't seem to work</p>\n</blockquote>\n<p>Maybe I misunderstood what do you mean by inline elements, is it like the latest nodes are not accordion, right?</p>",
        "id": 199262649,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853471
    },
    {
        "content": "<p>(Remaining undergrad maths)<br>\n<a href=\"/user_uploads/3121/3F67WRlw-BQbusCJONs2RRjs/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22-2.png\">screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22-2.png</a> <a href=\"/user_uploads/3121/D0Fp8V_qetvhXKGb7jgOlACg/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22.png\">screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3F67WRlw-BQbusCJONs2RRjs/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22-2.png\" title=\"screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22-2.png\"><img src=\"/user_uploads/3121/3F67WRlw-BQbusCJONs2RRjs/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22-2.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D0Fp8V_qetvhXKGb7jgOlACg/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22.png\" title=\"screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22.png\"><img src=\"/user_uploads/3121/D0Fp8V_qetvhXKGb7jgOlACg/screencapture-leanprover-community-github-io-overview-html-2020-05-30-17_43_22.png\"></a></div>",
        "id": 199262663,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853509
    },
    {
        "content": "<p>I want the deepest level to be a single paragraph, with words separated by commas. As in the original document</p>",
        "id": 199262757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853587
    },
    {
        "content": "<p>On your screenshot, everything under \"Bilinear\" would be on the same line</p>",
        "id": 199262772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853617
    },
    {
        "content": "<p>Oh okay, makes sense, and all \"mathematical statements\" would be &lt;a /&gt; to the docs, right?</p>",
        "id": 199262786,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853644
    },
    {
        "content": "<p>And there would be no \"See it in mathlib documentation\" anywhere. Instead of use card containing </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">vector</span> <span class=\"n\">space</span>\n<span class=\"n\">See</span> <span class=\"n\">it</span> <span class=\"k\">in</span> <span class=\"n\">mathlib</span> <span class=\"n\">documentation</span>\n</code></pre></div>\n\n\n<p>and a huge card linear map..., there would be</p>\n<p><a href=\"file:///mathlib_docs/algebra/module.html#vector_space\">vector space</a>, <a href=\"file:///mathlib_docs/algebra/module.html#linear_map\">linear map</a>...</p>",
        "id": 199262843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853716
    },
    {
        "content": "<p>I see</p>",
        "id": 199262846,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853738
    },
    {
        "content": "<p>I'm doing it</p>",
        "id": 199262847,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853740
    },
    {
        "content": "<p>I should have the prototype in minutes</p>",
        "id": 199262852,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853750
    },
    {
        "content": "<p>Thank you very much</p>",
        "id": 199262853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Just a quick question</p>",
        "id": 199262923,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853831
    },
    {
        "content": "<p>Yes?</p>",
        "id": 199262929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853842
    },
    {
        "content": "<p>What do you do about</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">xxx</span><span class=\"p\">:</span>\n    <span class=\"nt\">yyy</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">‚Ä¶</span>\n    <span class=\"nt\">zzz</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">‚Ä¶</span>\n    <span class=\"nt\">ttt</span><span class=\"p\">:</span>\n        <span class=\"nt\">aaa</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">‚Ä¶</span>\n<span class=\" -Error\">   </span><span class=\"nt\">uuu</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">‚Ä¶</span>\n</code></pre></div>",
        "id": 199262940,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853858
    },
    {
        "content": "<p>do you show in the xxx card:<br>\nyyy, zzz<br>\nthen the ttt accordion<br>\nthen uuu?</p>",
        "id": 199262948,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853877
    },
    {
        "content": "<p>We probably need to simplify the nesting. I think there should be only two levels of accordions.</p>",
        "id": 199263001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853924
    },
    {
        "content": "<p>Agreed</p>",
        "id": 199263004,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853932
    },
    {
        "content": "<p>Do you have a specific example?</p>",
        "id": 199263006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590853939
    },
    {
        "content": "<p>Take linear algebra</p>",
        "id": 199263011,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853955
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">Linear algebra</span><span class=\"p\">:</span>\n  <span class=\"nt\">vector space</span><span class=\"p\">:</span> <span class=\"s\">&#39;algebra/module.html#vector_space&#39;</span>\n  <span class=\"nt\">linear map</span><span class=\"p\">:</span> <span class=\"s\">&#39;algebra/module.html#linear_map&#39;</span>\n  <span class=\"nt\">product of vector spaces</span><span class=\"p\">:</span> <span class=\"s\">&#39;algebra/pi_instances.html#prod.module&#39;</span>\n  <span class=\"nt\">vector subspace</span><span class=\"p\">:</span> <span class=\"s\">&#39;algebra/module.html#subspace&#39;</span>\n  <span class=\"nt\">range of a linear map</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basic.html#linear_map.range&#39;</span>\n  <span class=\"nt\">kernel of a linear map</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basic.html#linear_map.ker&#39;</span>\n  <span class=\"nt\">quotient space</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basic.html#submodule.quotient&#39;</span>\n  <span class=\"nt\">sum of subspaces</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basic.html#submodule.complete_lattice&#39;</span>\n  <span class=\"nt\">direct sum</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">complement subspace</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">linear independent</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basis.html#linear_independent&#39;</span>\n  <span class=\"nt\">generating sets</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">bases</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">algebra of endomorphisms of a vector space</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">general linear group</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basic.html#linear_map.general_linear_group&#39;</span>\n  <span class=\"nt\">invariant subspace of an endomorphism</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">eigenvalue</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">eigenvector</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">linear representation</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">irreducible representation</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">finite dimensional representations</span><span class=\"p\">:</span>\n    <span class=\"nt\">examples</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">Schur&#39;s lemma</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">finite-dimensional vector spaces</span><span class=\"p\">:</span>\n    <span class=\"nt\">finite-dimensional vector spaces</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/finite_dimensional.html#finite_dimensional&#39;</span>\n    <span class=\"nt\">existence of bases</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basis.html#exists_is_basis&#39;</span>\n    <span class=\"nt\">canonical isomorphism with K^n</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basis.html#module_equiv_finsupp&#39;</span>\n    <span class=\"nt\">complementary subspaces</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/basis.html#submodule.exists_is_compl&#39;</span>\n    <span class=\"nt\">rank of a linear map</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">rank of a set of vectors</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">dual vector space</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/dual.html#module.dual&#39;</span>\n    <span class=\"nt\">rank of a system of linear equations</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">transpose of a linear map</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">dual basis</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/dual.html#is_basis.dual_basis&#39;</span>\n    <span class=\"nt\">bidual</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/dual.html#vector_space.eval_equiv&#39;</span>\n    <span class=\"nt\">orthogonality</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">multilinear</span><span class=\"p\">:</span>\n    <span class=\"nt\">multilinear map</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/multilinear.html#multilinear_map&#39;</span>\n    <span class=\"nt\">determinant of vectors</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">determinant of endomorphisms</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">special linear group</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">orientation of a R-valued vector space</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">matrices</span><span class=\"p\">:</span>\n    <span class=\"nt\">commutative ring valued matrices</span><span class=\"p\">:</span> <span class=\"s\">&#39;data/matrix/basic.html#matrix&#39;</span>\n    <span class=\"nt\">field valued matrices</span><span class=\"p\">:</span> <span class=\"s\">&#39;data/matrix/basic.html#matrix&#39;</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">elementary operations on matrices&#39; rows</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">elementary operations on matrices&#39; columns</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">determinant</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/determinant.html#matrix.det&#39;</span>\n    <span class=\"nt\">invertibility</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/nonsingular_inverse.html#matrix.nonsing_inv&#39;</span>\n    <span class=\"nt\">rank of a matrix</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">matrix representation of a linear map</span><span class=\"p\">:</span> <span class=\"s\">&#39;linear_algebra/matrix.html#linear_map.to_matrix&#39;</span>\n    <span class=\"nt\">coordinates change</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">Gauss&#39; pivot</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">row-reduced matrices</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">endomorphism invariant subspaces</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">kernel lemma</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">characteristic polynomial</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">endomorphism polynomials</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">cancelling polynomials</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">minimal polynomial</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n  <span class=\"nt\">Cayley-Hamilton theorem</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n</code></pre></div>",
        "id": 199263012,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853966
    },
    {
        "content": "<p>necessarily, I need a way to determine when to stop the inline display for leaves</p>",
        "id": 199263021,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590853993
    },
    {
        "content": "<p>I think I can work out some prototype but just want to warn about the strange result it might give</p>",
        "id": 199263026,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854022
    },
    {
        "content": "<p>Here I think we are actually missing nesting. The issue is that some stuff is dumped at level 2 but should be level 3 (ie leaves).</p>",
        "id": 199263079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590854084
    },
    {
        "content": "<p>I think too, I didn't work on the organization and wanted to get something out ASAP</p>",
        "id": 199263114,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854137
    },
    {
        "content": "<p>The end is clearly missing a heading, something like 'endomorphism polynomials'</p>",
        "id": 199263170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590854185
    },
    {
        "content": "<p>Anyway, I'll implement the following solution:<br>\nWhen I encounter a leaf, I just show it inline with &lt;a /&gt; and add a <code>, </code> if I'm not the last node of the current iterator (doable in Jinja magic)<br>\nWhen I encounter an internal node, I create an accordion<br>\nThat should work</p>",
        "id": 199263171,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199263170\">said</a>:</p>\n<blockquote>\n<p>The end is clearly missing a heading, something like 'endomorphism polynomials'</p>\n</blockquote>\n<p>We already have endomorphism polynomials, but you have this annoying issue<br>\nIf you do a heading<br>\nThen you have to repeat it in order to link to the concept</p>",
        "id": 199263177,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854219
    },
    {
        "content": "<p>Like, endomorphism polynomials have a lot of things around, but are themselves a specific kind of polynomials‚Ä¶ I don't know how to solve \"this\"</p>",
        "id": 199263182,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854244
    },
    {
        "content": "<p>I don't think this is a big issue</p>",
        "id": 199263186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590854248
    },
    {
        "content": "<p>Okay</p>",
        "id": 199263229,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854283
    },
    {
        "content": "<p>You can let people with more math experience going over the yaml file to sort this out</p>",
        "id": 199263240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590854310
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/K-H1UcjXgGoByuPVeyh1ciPT/screencapture-localhost-8000-overview-html-2020-05-30-17_59_00.png\">screencapture-localhost-8000-overview-html-2020-05-30-17_59_00.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K-H1UcjXgGoByuPVeyh1ciPT/screencapture-localhost-8000-overview-html-2020-05-30-17_59_00.png\" title=\"screencapture-localhost-8000-overview-html-2020-05-30-17_59_00.png\"><img src=\"/user_uploads/3121/K-H1UcjXgGoByuPVeyh1ciPT/screencapture-localhost-8000-overview-html-2020-05-30-17_59_00.png\"></a></div>",
        "id": 199263268,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yes, definitely, I don't want to fight this :) ‚Äî I'm still too green</p>",
        "id": 199263275,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854371
    },
    {
        "content": "<p>Here's a prototype</p>",
        "id": 199263276,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854381
    },
    {
        "content": "<p>Do you want I do something before I commit this?</p>",
        "id": 199263331,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854424
    },
    {
        "content": "<p>I think it looks much better. But there is still the issue that inner card should extend horizontally to match outer ones</p>",
        "id": 199263332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590854432
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/kIjeVjFVK7zm-F-jmS_L2bzr/Screen-Capture_select-area_20200530180156.png\">Screen-Capture_select-area_20200530180156.png</a> <br>\ndo you mean something like this ?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kIjeVjFVK7zm-F-jmS_L2bzr/Screen-Capture_select-area_20200530180156.png\" title=\"Screen-Capture_select-area_20200530180156.png\"><img src=\"/user_uploads/3121/kIjeVjFVK7zm-F-jmS_L2bzr/Screen-Capture_select-area_20200530180156.png\"></a></div>",
        "id": 199263420,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854530
    },
    {
        "content": "<p>because all cards applied padding on their stuff, so when I nest them, obviously‚Ä¶</p>",
        "id": 199263432,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854559
    },
    {
        "content": "<p>but I don't think that's a bad thing per se, that gives space and looks not that bad on mobile AFAIK</p>",
        "id": 199263437,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854581
    },
    {
        "content": "<p>we can reduce padding in the inner cards I guess</p>",
        "id": 199263519,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590854693
    },
    {
        "content": "<p>No, I mean no space at all on sides of inner cards.</p>",
        "id": 199263682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590854926
    },
    {
        "content": "<p>Also I'd prefer to keep a white background. It looks weird to have this all grey background only on this webpage of the website</p>",
        "id": 199263699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590854958
    },
    {
        "content": "<p>Okay for bg color</p>",
        "id": 199263863,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855166
    },
    {
        "content": "<p>For the space, I'll try something, you'll let me know, worst case, you can edit the PR or guide me again</p>",
        "id": 199263870,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855191
    },
    {
        "content": "<p>Should have something in 10 minutes hopefully</p>",
        "id": 199263881,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855208
    },
    {
        "content": "<p>Also, I'm not the only one deciding stuff here. If everybody likes those margins I'll have them.</p>",
        "id": 199263934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590855243
    },
    {
        "content": "<p>Then we should ping them for their advice, <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 199263982,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855336
    },
    {
        "content": "<p>You should have waited to get a prototype incorporating everything (including switches and updated page title)</p>",
        "id": 199264146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590855518
    },
    {
        "content": "<p>Why?</p>",
        "id": 199264159,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855565
    },
    {
        "content": "<p>Because this way they don't have to read all messages, they can look at the result</p>",
        "id": 199264162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590855588
    },
    {
        "content": "<p>Those are busy people</p>",
        "id": 199264168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590855598
    },
    {
        "content": "<p>You're right</p>",
        "id": 199264169,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855598
    },
    {
        "content": "<p>Apologies</p>",
        "id": 199264236,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855661
    },
    {
        "content": "<p>Don't worry</p>",
        "id": 199264316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590855781
    },
    {
        "content": "<p>It's now online on the inline branch, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 199264368,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855863
    },
    {
        "content": "<p>It is also rebased over newsite, I'll just verify &amp; repull just in case</p>",
        "id": 199264372,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855871
    },
    {
        "content": "<p>Did somebody call?</p>",
        "id": 199264373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590855881
    },
    {
        "content": "<p>I am just having a break from marking, what should I look at?</p>",
        "id": 199264383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590855905
    },
    {
        "content": "<p>Only 80 algebraic geometry questions to go :D</p>",
        "id": 199264402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590855942
    },
    {
        "content": "<p>I'm getting full page screenshots, if you don't want to do make_site on the branch</p>",
        "id": 199264472,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590855967
    },
    {
        "content": "<p>In the order: complete (todo &amp; done), done, todo<br>\n<a href=\"/user_uploads/3121/k7caCG4PvvE75pRq_-FgN8OA/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_24.png\">screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_24.png</a> <a href=\"/user_uploads/3121/8H2v0YtKdAyWwHTbkUM2PN3K/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_15.png\">screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_15.png</a> <a href=\"/user_uploads/3121/sQWFlaFdyU301u1_reL4bqX9/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_25_46.png\">screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_25_46.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/k7caCG4PvvE75pRq_-FgN8OA/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_24.png\" title=\"screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_24.png\"><img src=\"/user_uploads/3121/k7caCG4PvvE75pRq_-FgN8OA/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_24.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8H2v0YtKdAyWwHTbkUM2PN3K/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_15.png\" title=\"screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_15.png\"><img src=\"/user_uploads/3121/8H2v0YtKdAyWwHTbkUM2PN3K/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_26_15.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sQWFlaFdyU301u1_reL4bqX9/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_25_46.png\" title=\"screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_25_46.png\"><img src=\"/user_uploads/3121/sQWFlaFdyU301u1_reL4bqX9/screencapture-file-home-raito-dev-projects-Lean-leanprover-community-github-io-build-overview-html-2020-05-30-18_25_46.png\"></a></div>",
        "id": 199264498,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856020
    },
    {
        "content": "<p>Let us know what you think of the design and what would you want to see</p>",
        "id": 199264510,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856031
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/40\">https://github.com/leanprover-community/leanprover-community.github.io/pull/40</a></p>",
        "id": 199264577,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856125
    },
    {
        "content": "<p>There is something funny going on with \"Affine and Euclidian Geoemtry (finite dimensional only)\" (besides the typo and the restriction)</p>",
        "id": 199264580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856129
    },
    {
        "content": "<p>The PR is there for the ones who want to try it live</p>",
        "id": 199264581,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> YAML stuff most likely</p>",
        "id": 199264585,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856138
    },
    {
        "content": "<p>Can fix it in a future PR</p>",
        "id": 199264592,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856153
    },
    {
        "content": "<p>I'd like the accordion to be folded when you open the page, so that people can navigate quickly. And also the todo switch should be off by default, so that people first get the information about what is there and where.</p>",
        "id": 199264652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856236
    },
    {
        "content": "<p>And I still don't like the horizontal margins <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 199264673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856263
    },
    {
        "content": "<p>But otherwise it really starts looking like what I dreamed of.</p>",
        "id": 199264688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199264652\">said</a>:</p>\n<blockquote>\n<p>I'd like the accordion to be folded when you open the page, so that people can navigate quickly. And also the todo switch should be off by default, so that people first get the information about what is there and where.</p>\n</blockquote>\n<ul>\n<li>Default switch to off is easy for <em>TODO</em></li>\n<li>Folded accordions is easy too</li>\n</ul>\n<p>Can add them, right now, should I go for it?</p>",
        "id": 199264697,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199264673\">said</a>:</p>\n<blockquote>\n<p>And I still don't like the horizontal margins <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>\n</blockquote>\n<p>I will have to wait the vote from the people</p>",
        "id": 199264703,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856321
    },
    {
        "content": "<p>yes, please</p>",
        "id": 199264704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856321
    },
    {
        "content": "<p>those screenshots are massive and zulip doesn't let me zoom in easily. could you show a representative sample?</p>",
        "id": 199264743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856328
    },
    {
        "content": "<p>You'll have more votes when I'll merge the PR and we'll see it live</p>",
        "id": 199264752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You can load them in your browser or enable pan &amp; zoom to review them easily</p>",
        "id": 199264753,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856345
    },
    {
        "content": "<p>But yes, let's merge the PR <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 199264759,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856355
    },
    {
        "content": "<p>when I click on them it zooms</p>",
        "id": 199264761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856356
    },
    {
        "content": "<p>Let me just get the latest changes you want</p>",
        "id": 199264766,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856362
    },
    {
        "content": "<p>Did you fixed the two defaults?</p>",
        "id": 199264768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856365
    },
    {
        "content": "<p>Yes, let's do that</p>",
        "id": 199264771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856370
    },
    {
        "content": "<p>I'm doing it, only one left</p>",
        "id": 199264779,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856399
    },
    {
        "content": "<p>with pan &amp; zoom the frame doesn't change shape so I'm peering through a very slim vertical window</p>",
        "id": 199264787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856433
    },
    {
        "content": "<p>zulip's implementation really needs work</p>",
        "id": 199264829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856443
    },
    {
        "content": "<p>Mario, you should hold on for 5 minutes</p>",
        "id": 199264836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856453
    },
    {
        "content": "<p>Just open the link in the browser</p>",
        "id": 199264837,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856453
    },
    {
        "content": "<p>what is being reviewed?</p>",
        "id": 199264864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856506
    },
    {
        "content": "<p>the margins?</p>",
        "id": 199264865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the looks mostly</p>",
        "id": 199264874,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856534
    },
    {
        "content": "<p>the spacing is all over the place</p>",
        "id": 199264891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856557
    },
    {
        "content": "<p>there is 0px spacing between cards but significant (20px?) margins on left and right and at the bottom of a group</p>",
        "id": 199264961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856598
    },
    {
        "content": "<p>here we go for the defaults</p>",
        "id": 199264963,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856606
    },
    {
        "content": "<p>also there is no spacing after the text and before the cards</p>",
        "id": 199264968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856619
    },
    {
        "content": "<p>+1 @ spacing pre/post cards</p>",
        "id": 199264975,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856627
    },
    {
        "content": "<p>the indentation \"spacing\" is by default</p>",
        "id": 199264979,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856642
    },
    {
        "content": "<p>What's wrong with a simple bullet list?</p>",
        "id": 199264981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856649
    },
    {
        "content": "<p>it's not an accordion (?)</p>",
        "id": 199264985,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856656
    },
    {
        "content": "<p>you can fold/unfold those cards</p>",
        "id": 199264987,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> wants to remove horizontal space on cards I think (if I understood well, I won't speak in its place)</p>",
        "id": 199264996,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856682
    },
    {
        "content": "<p>I'm not sure why this particular list is getting web-designed</p>",
        "id": 199265045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856697
    },
    {
        "content": "<p>I don't understand why it doesn't look like <a href=\"https://getbootstrap.com/docs/4.4/components/collapse/#accordion-example\">https://getbootstrap.com/docs/4.4/components/collapse/#accordion-example</a></p>",
        "id": 199265050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856707
    },
    {
        "content": "<p>I would have just chucked some markdown on a page</p>",
        "id": 199265053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856719
    },
    {
        "content": "<p>Mario, this list is too big to be unfolded by default</p>",
        "id": 199265054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I can take a look why</p>",
        "id": 199265058,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856732
    },
    {
        "content": "<p>It might be a class missing</p>",
        "id": 199265061,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856735
    },
    {
        "content": "<p>I've seen mile long bullet lists before</p>",
        "id": 199265066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856752
    },
    {
        "content": "<p>Mario didn't need CSS in metamath...</p>",
        "id": 199265068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856771
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/MdzTKDfhQDUJQDMkZF-nxoUw/Screen-Capture_select-area_20200530183933.png\">Screen-Capture_select-area_20200530183933.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MdzTKDfhQDUJQDMkZF-nxoUw/Screen-Capture_select-area_20200530183933.png\" title=\"Screen-Capture_select-area_20200530183933.png\"><img src=\"/user_uploads/3121/MdzTKDfhQDUJQDMkZF-nxoUw/Screen-Capture_select-area_20200530183933.png\"></a></div>",
        "id": 199265069,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856785
    },
    {
        "content": "<p>that was it</p>",
        "id": 199265070,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856787
    },
    {
        "content": "<p>but it broke the toggle button</p>",
        "id": 199265075,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856793
    },
    {
        "content": "<p>I still think the inner list should extend horizontally to fill the container (and there should be no leaf next to them, but this is a yaml content issue)</p>",
        "id": 199265134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590856854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265068\">said</a>:</p>\n<blockquote>\n<p>Mario didn't need CSS in metamath...</p>\n</blockquote>\n<p>Interesting that you mention that, just this week we had a conversation about upgrading our HTML validator and the new one yells at us for using <code>&lt;FONT&gt;</code> tags</p>",
        "id": 199265162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590856903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I pushed the fix for accordions</p>",
        "id": 199265212,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856964
    },
    {
        "content": "<p>The thing now is that due to this kind of styling</p>",
        "id": 199265218,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590856978
    },
    {
        "content": "<p>When I hide todo sections, Bootstrap cannot put the border-bottom, because it's in display: hidden and the selector is like \"apply the bottom border on the last element in the DOM\"</p>",
        "id": 199265226,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857005
    },
    {
        "content": "<p>I'm not sure I see easy workarounds</p>",
        "id": 199265231,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857019
    },
    {
        "content": "<p>I'll have to manually force-style the previous element in the section, I'm not sure</p>",
        "id": 199265295,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857074
    },
    {
        "content": "<p>Anyway, if we can get this PR merged, we can get more improvements later, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> is this okay with you?</p>",
        "id": 199265297,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857086
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 199265315,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857146
    },
    {
        "content": "<p>Yes, I think this will help people discussing it. Everybody will be able to play with it. Hopefully this will also increase motivation for working on the yaml file.</p>",
        "id": 199265402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857197
    },
    {
        "content": "<p>Everybody, we are discussing <a href=\"https://leanprover-community.github.io/overview.html\">https://leanprover-community.github.io/overview.html</a></p>",
        "id": 199265415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857217
    },
    {
        "content": "<p>This is currently live but without any link pointing towards it.</p>",
        "id": 199265422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857232
    },
    {
        "content": "<p>this bottomless stuff is making me crazy</p>",
        "id": 199265425,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857236
    },
    {
        "content": "<p>Oops <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 199265431,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857248
    },
    {
        "content": "<p>I'll fix it‚Ä¶</p>",
        "id": 199265435,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857251
    },
    {
        "content": "<p>No</p>",
        "id": 199265439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857255
    },
    {
        "content": "<p>Don't fix it</p>",
        "id": 199265441,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857259
    },
    {
        "content": "<p>It's not ready for links</p>",
        "id": 199265446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857265
    },
    {
        "content": "<p><a href=\"https://mathlib_docs/algebra/char_p.html#frobenius\">https://mathlib_docs/algebra/char_p.html#frobenius</a> isn't a valid URL</p>",
        "id": 199265450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857268
    },
    {
        "content": "<p>I very carefully checked there was no link to it</p>",
        "id": 199265454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857281
    },
    {
        "content": "<p>Why does Fields have fields as a subthing?</p>",
        "id": 199265495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857292
    },
    {
        "content": "<p>We need at least one pass over the whole yaml file before linking to this webpage</p>",
        "id": 199265496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857294
    },
    {
        "content": "<p>I meant the fact that mathlib_docs are not pointing correctly is a bug</p>",
        "id": 199265497,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857299
    },
    {
        "content": "<p>Does \"todo\" mean \"we need to add a link\" or \"we need to formalise this\"?</p>",
        "id": 199265505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It means both currently</p>",
        "id": 199265510,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857338
    },
    {
        "content": "<p>It currently means either of these</p>",
        "id": 199265511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857338
    },
    {
        "content": "<p>Fields has fields as a subthing because the big one should read \"Field theory\"</p>",
        "id": 199265520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/41\">https://github.com/leanprover-community/leanprover-community.github.io/pull/41</a></p>",
        "id": 199265524,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857379
    },
    {
        "content": "<p>So \"Distributions on Rd\" is not LaTeX'ed up, presumably you know this</p>",
        "id": 199265525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857382
    },
    {
        "content": "<p>It'll fix the mathlib links</p>",
        "id": 199265526,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, LaTeX-ification is open to improvements :-)</p>",
        "id": 199265532,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857398
    },
    {
        "content": "<p>Kevin, it wouldn't take more time to fix it on github than to write it here</p>",
        "id": 199265577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857410
    },
    {
        "content": "<p>but of course in general it's a really nice resource.</p>",
        "id": 199265581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857416
    },
    {
        "content": "<p>Yeah but I need to go</p>",
        "id": 199265583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857421
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml</a></p>",
        "id": 199265585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857425
    },
    {
        "content": "<p>There are commas at the and of the lists. Is that intended?</p>",
        "id": 199265604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857446
    },
    {
        "content": "<p>Unfortunately</p>",
        "id": 199265615,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857463
    },
    {
        "content": "<p>When the next element is hidden</p>",
        "id": 199265622,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857470
    },
    {
        "content": "<p>I don't do adjustements to make the comma disappear</p>",
        "id": 199265628,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857477
    },
    {
        "content": "<p><code>\\\"Usual\\\" functions</code> in single variable real analysis</p>",
        "id": 199265635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857485
    },
    {
        "content": "<p>Ok</p>",
        "id": 199265639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857492
    },
    {
        "content": "<p>If this is all too painful we can still make a different webpage with the todoes</p>",
        "id": 199265641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265635\">said</a>:</p>\n<blockquote>\n<p><code>\\\"Usual\\\" functions</code> in single variable real analysis</p>\n</blockquote>\n<p>That's an easy fix, \\ should be dropped in the YAML, it can be edited online</p>",
        "id": 199265651,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857510
    },
    {
        "content": "<p>I will take a very good look at this on Tues when my deadlines are over</p>",
        "id": 199265692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857524
    },
    {
        "content": "<p>There is of course a lot of overlap with <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a></p>",
        "id": 199265693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265641\">said</a>:</p>\n<blockquote>\n<p>If this is all too painful we can still make a different webpage with the todoes</p>\n</blockquote>\n<p>I don't think that'd be hard, but it just require that I think about the problem seriously and not implement workarounds on the top of workarounds</p>",
        "id": 199265707,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857547
    },
    {
        "content": "<p>We could add \"Expand all / Collapse all\"</p>",
        "id": 199265708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265708\">said</a>:</p>\n<blockquote>\n<p>We could add \"Expand all / Collapse all\"</p>\n</blockquote>\n<p>That's easy to do</p>",
        "id": 199265711,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265693\">said</a>:</p>\n<blockquote>\n<p>There is of course a lot of overlap with <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a></p>\n</blockquote>\n<p>Yup, but that list was ad hoc. This one has an official \"stamp\" from French education...</p>",
        "id": 199265718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857577
    },
    {
        "content": "<p>Can add it but not right now, I'm hungry</p>",
        "id": 199265719,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265718\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265693\">said</a>:</p>\n<blockquote>\n<p>There is of course a lot of overlap with <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a></p>\n</blockquote>\n<p>Yup, but that list was ad hoc. This one has an official \"stamp\" from French education...</p>\n</blockquote>\n<p>And ours has links !</p>",
        "id": 199265724,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857596
    },
    {
        "content": "<p>Is it somehow possible to make that mathlib-overview page have the same format I wonder? Do we even want that though, or is the simpler formatting of the overview page better perhaps?</p>",
        "id": 199265726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857604
    },
    {
        "content": "<p>For the overview page there is no particular \"goal\" -- here we have a very well-defined and, in my opinion, extremely exciting, goal.</p>",
        "id": 199265736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857635
    },
    {
        "content": "<p>I think that eventually the two lists should be merged</p>",
        "id": 199265738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857637
    },
    {
        "content": "<p>And we could generate different pages from the same source <code>.yaml</code> file</p>",
        "id": 199265780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857665
    },
    {
        "content": "<p>Definitely possible</p>",
        "id": 199265782,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857679
    },
    {
        "content": "<p>Is it possible to add (not right now, but at some point) more stuff? For example at Imperial they learn Jordan Canonical Form</p>",
        "id": 199265891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857779
    },
    {
        "content": "<p>It might be already there implicitly as the french name of \"reduction techniques\"</p>",
        "id": 199265912,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857814
    },
    {
        "content": "<p>I don't recall if Jordan is part of agr√©g</p>",
        "id": 199265917,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857821
    },
    {
        "content": "<p>I am 100% sure there will one random thing on our curriculum which is not on this list, that's what I'm saying basically</p>",
        "id": 199265929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857840
    },
    {
        "content": "<p>Sure, all this is possible. We can add a page with more advanced stuff, or add more sections</p>",
        "id": 199265930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857843
    },
    {
        "content": "<p>or on Cambridge's curriculum or whatever</p>",
        "id": 199265933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857848
    },
    {
        "content": "<p>FWIW, <a href=\"https://laurent.claessens-donadello.eu/pdf/lefrido.pdf\">https://laurent.claessens-donadello.eu/pdf/lefrido.pdf</a> should represent a decent part of the agr√©g</p>",
        "id": 199265935,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857856
    },
    {
        "content": "<p>I'm pretty sure Jordan is there somewhere, maybe implicitly</p>",
        "id": 199265942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857862
    },
    {
        "content": "<p>But it's French</p>",
        "id": 199265943,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857863
    },
    {
        "content": "<p>I think the next step would be to add tags in the list:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">Linear Algebra</span><span class=\"p\">:</span>\n  <span class=\"nt\">Matrices</span><span class=\"p\">:</span>\n    <span class=\"nt\">Inverse</span><span class=\"p\">:</span>\n      <span class=\"nt\">link</span><span class=\"p\">:</span> <span class=\"s\">&#39;link/to/docs.html#inverse&#39;</span>\n      <span class=\"nt\">tag</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">agreg</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">icl</span><span class=\"p p-Indicator\">]</span>\n</code></pre></div>",
        "id": 199265951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857873
    },
    {
        "content": "<p>Jordan is 9.13</p>",
        "id": 199265993,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857887
    },
    {
        "content": "<p>OK I'm going back to the treadmill. It looks really nice. I don't really have a feeling for what it will look like on Wednesday when it's complete, but hopefully it looks respectable.</p>",
        "id": 199266006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590857910
    },
    {
        "content": "<p>we have it <a href=\"/user_uploads/3121/u8qvKc-8DS0pdYEwAdKy9onB/Screen-Capture_select-area_20200530185822.png\">Screen-Capture_select-area_20200530185822.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/u8qvKc-8DS0pdYEwAdKy9onB/Screen-Capture_select-area_20200530185822.png\" title=\"Screen-Capture_select-area_20200530185822.png\"><img src=\"/user_uploads/3121/u8qvKc-8DS0pdYEwAdKy9onB/Screen-Capture_select-area_20200530185822.png\"></a></div>",
        "id": 199266008,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199265951\">said</a>:</p>\n<blockquote>\n<p>I think the next step would be to add tags in the list:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">Linear Algebra</span><span class=\"p\">:</span>\n  <span class=\"nt\">Matrices</span><span class=\"p\">:</span>\n    <span class=\"nt\">Inverse</span><span class=\"p\">:</span>\n      <span class=\"nt\">link</span><span class=\"p\">:</span> <span class=\"s\">&#39;link/to/docs.html#inverse&#39;</span>\n      <span class=\"nt\">tag</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">agreg</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">icl</span><span class=\"p p-Indicator\">]</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>it requires just minor adjustement in the Python code, but we can very much support it</p>",
        "id": 199266014,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857938
    },
    {
        "content": "<p>No Johan, the next step is to finish the first pass on the yaml linkifying</p>",
        "id": 199266016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590857941
    },
    {
        "content": "<p>:DDDDDD</p>",
        "id": 199266021,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590857948
    },
    {
        "content": "<p>Ok, sure. I meant the next next step</p>",
        "id": 199266024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857960
    },
    {
        "content": "<p>Like, after your IAS talk</p>",
        "id": 199266026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590857968
    },
    {
        "content": "<p>Ok, I'll have a go at Section 6: Single variable real analysis.</p>",
        "id": 199266162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590858119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> I've given you write access to the repo. Also, the CI now builds all branches (except <code>master</code> and <code>oldsite</code>), and deploys only happen for <code>newsite</code>.</p>",
        "id": 199266286,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590858250
    },
    {
        "content": "<p>Oh crap, the very first item I picked is hard. Topology on R...</p>",
        "id": 199266389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590858427
    },
    {
        "content": "<p>R gets its topology as a uniform space</p>",
        "id": 199266399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590858438
    },
    {
        "content": "<p>Metric space?</p>",
        "id": 199266586,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590858701
    },
    {
        "content": "<p>Yes</p>",
        "id": 199266590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590858720
    },
    {
        "content": "<p>I linked to <code>real.metric_space</code></p>",
        "id": 199266633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590858734
    },
    {
        "content": "<p>Oh we still have underlined links in the API docs <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 199266701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590858844
    },
    {
        "content": "<p>Another tricky one: cluster point of a sequence. Of course we have that as a special case of filter stuff, but do we have a specific definition? If not then I'll let this blank</p>",
        "id": 199266804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590859005
    },
    {
        "content": "<p>The underlined links will hopefully be addressed by <a href=\"https://github.com/leanprover-community/doc-gen/issues/20\">doc-gen#20</a>. <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span>, are you still around? <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 199266893,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590859136
    },
    {
        "content": "<p>I think he's having dinner.</p>",
        "id": 199266952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590859228
    },
    {
        "content": "<p>But I don't understand how a young nerd can have dinner away from his keyboard.</p>",
        "id": 199266959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590859257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199266959\">said</a>:</p>\n<blockquote>\n<p>But I don't understand how a young nerd can have dinner away from his keyboard.</p>\n</blockquote>\n<p>That's because my kitchen is not yet integrated!</p>",
        "id": 199267031,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590859349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199266893\">said</a>:</p>\n<blockquote>\n<p>The underlined links will hopefully be addressed by <a href=\"https://github.com/leanprover-community/doc-gen/issues/20\">doc-gen#20</a>. <span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span>, are you still around? <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>I'm around, I still need to do something which is good for everyone :D</p>",
        "id": 199267036,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590859366
    },
    {
        "content": "<p>I can try to move it forward today</p>",
        "id": 199267039,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590859374
    },
    {
        "content": "<p>By curiosity, do we even have distributions in Lean?</p>",
        "id": 199267198,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590859594
    },
    {
        "content": "<p>Distributions in the sense of Schwartz?</p>",
        "id": 199267303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590859790
    },
    {
        "content": "<p>We don't.</p>",
        "id": 199267349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590859814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> or <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> do you know whether we have the description of connected subsets of R? The closest I can find is <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#is_preconnected_iff_forall_Icc_subset\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#is_preconnected_iff_forall_Icc_subset</a></p>",
        "id": 199267453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590859946
    },
    {
        "content": "<p>We don't. We have <code>is_preconnected_iff_forall_Icc_subset</code> and <code>is_preconnected_I??</code>.</p>",
        "id": 199267478,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590860016
    },
    {
        "content": "<p>How would you formulate <code>real.is_(pre)connected_iff</code> to make it useful?</p>",
        "id": 199267563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590860123
    },
    {
        "content": "<p>I think we could at least say connected iff convex</p>",
        "id": 199267713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590860289
    },
    {
        "content": "<p>Do you know whether we have convergent numerical series. I know about <code>has_sum</code>, but this is a stronger notion. I know we can state \"partial sums converge\", but do we actually have a <code>def</code>?</p>",
        "id": 199267726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590860354
    },
    {
        "content": "<p>It's dinner time. See you later</p>",
        "id": 199267780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590860443
    },
    {
        "content": "<p><code>has_sum</code> uses <code>tendsto (Œª n, ‚àë i in range n, a i) at_top (nhds s)</code>.</p>",
        "id": 199267864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590860560
    },
    {
        "content": "<p><code>is_preconnected_iff_convex</code> is <code>is_preconnected_iff_forall_Icc_subset.trans convex_real_iff.symm</code> (no, one of them has <code>x‚â§y</code>)</p>",
        "id": 199268023,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590860794
    },
    {
        "content": "<p>There are two different has_sum then</p>",
        "id": 199268417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590861491
    },
    {
        "content": "<p>Where is yours?</p>",
        "id": 199268419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590861495
    },
    {
        "content": "<p>Sorry, I meant that the file about <code>has_sum</code> uses this <code>tendsto</code> when talking about normal series convergence.</p>",
        "id": 199268491,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590861642
    },
    {
        "content": "<p>I should read my messages before sending them.</p>",
        "id": 199268497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590861658
    },
    {
        "content": "<p>Yes there are things like <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum.html#has_sum_iff_tendsto_nat_of_summable\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum.html#has_sum_iff_tendsto_nat_of_summable</a></p>",
        "id": 199268557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590861742
    },
    {
        "content": "<p>But we still miss a def here</p>",
        "id": 199268561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590861751
    },
    {
        "content": "<p>How do I help edit this on github? (without submitting a PR from a fork?)</p>",
        "id": 199269758,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590863334
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml</a></p>",
        "id": 199269993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590863753
    },
    {
        "content": "<p>Do you see the little pen button on the top-right corner?</p>",
        "id": 199270037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590863777
    },
    {
        "content": "<p>(I'm asking because I admin rights on this repo, so I'm not 100% sure what is visible by everybody)</p>",
        "id": 199270042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590863808
    },
    {
        "content": "<p>Please don't edit Section 6 before I say I'm done with it, otherwise we may duplicate efforts.</p>",
        "id": 199270051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590863832
    },
    {
        "content": "<p>I see the pen, but because I don't have write permissions it will still create a fork, But I guess that is fine. Can I help with just the styling and some of the English? Top level titles should be all capitals (except for articles and short conjuctions). Next level should at least start with a capital. Others all lower case?</p>",
        "id": 199270263,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590864162
    },
    {
        "content": "<p>I don't see where to edit this, but want to mention: \"This page tracks usual mathematical theories that are or not are in mathlib currently\" should be \"This page tracks usual mathematical theories that are or <strong>are not</strong> in mathlib currently\"</p>",
        "id": 199270324,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590864263
    },
    {
        "content": "<p>Sorry I misunderstood. Technically it does create a fork, but nothing happens on your hard-drive.</p>",
        "id": 199270410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590864414
    },
    {
        "content": "<p>The answer to your second question is: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/templates/overview.html\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/templates/overview.html</a></p>",
        "id": 199270421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590864459
    },
    {
        "content": "<p>Fixes to the English and styling are welcome of course</p>",
        "id": 199270422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590864475
    },
    {
        "content": "<p>Did a VERY small PR just to see how it works...</p>",
        "id": 199270690,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590864896
    },
    {
        "content": "<p>Merged!</p>",
        "id": 199270948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590865355
    },
    {
        "content": "<p>I need reviewers for <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/44\">https://github.com/leanprover-community/leanprover-community.github.io/pull/44</a>, especially <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> In this PR I also discuss my general ideas about how to work on these links.</p>",
        "id": 199271227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590865775
    },
    {
        "content": "<p>I should add that this PR took me a lot more time that I anticipated, but I also learned stuff about mathlib (some items were good surprises whose existence in mathlib was unknown to me).</p>",
        "id": 199271719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590866234
    },
    {
        "content": "<p>I am not sure I can see where the threshold is to say we have something. For instance, we don't have a definition of absolutely converging series, but we have the theorem</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">summable_of_summable_norm</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"err\">‚à•</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">summable_of_norm_bounded</span> <span class=\"bp\">_</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>And I don't think we should (ever) define absolutely converging series, since it is just <code>summable (Œªa, ‚à•f a‚à•)</code>, and the interesting bit is the above theorem. Does this mean that we will never consider this item as done in mathlib?</p>",
        "id": 199272559,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590867181
    },
    {
        "content": "<p>As I wrote in the PR, there will always be borderline case. If we think something will never be added then it's a good indication something is wrong. We should then either reformulate the line (or even remove it in extreme cases) or link to something close. In this case, I would agree with you if we had converging series instead of summable families.</p>",
        "id": 199272884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590867643
    },
    {
        "content": "<p>I mean I would fill this item with a version of this lemma involving converging series</p>",
        "id": 199272893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590867672
    },
    {
        "content": "<p>But this lemma is stronger than the version for converging series, with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">has_sum</span><span class=\"bp\">.</span><span class=\"n\">tendsto_sum_nat</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"err\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(in <code>infinite_sum.lean</code>). To me, it only highlights the fact that this curriculum is not optimized for higher-level applications, not a deficiency in mathlib.</p>",
        "id": 199273011,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590867880
    },
    {
        "content": "<p>Don't you think we should still have a predicate saying that a series converge? And then people will look for the weaker statement (although its proof will use the stronger one)</p>",
        "id": 199273118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590868059
    },
    {
        "content": "<p>You mean, give a name to the fact that the partial sums tend to to some limit? I don't really have an opinion on this: it wouldn't hurt but it wouldn't be very useful either, except to say that we have all undergrad maths.</p>",
        "id": 199273257,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590868294
    },
    {
        "content": "<p>Alternatively we could just not fuss and point to something like <code>summable_of_summable_norm</code> and leave it to people to figure out what we mean.</p>",
        "id": 199273333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590868431
    },
    {
        "content": "<p>One could similarly argue that we'll never have group homomorphisms because we only have monoid homomorphisms</p>",
        "id": 199273373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590868452
    },
    {
        "content": "<p>Sure, we can use this link, but the question of converging series still stansd</p>",
        "id": 199273374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590868461
    },
    {
        "content": "<p>Same question for positive series. We have a good deal on <code>ennreal</code> and <code>nnreal</code>-valued series in <code>topology/instances/ennreal.lean</code> (notably that an <code>ennreal</code>-valued series always has a sum, that an <code>nnreal</code>-valued one converges if and only if the sum of the <code>ennreal</code>-valued coe is not infinite, and consequences for real-valued series whose terms are all nonnegative. What more could you add?</p>",
        "id": 199273490,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590868673
    },
    {
        "content": "<p>Of course for positive series there is nothing to add, they converge only when they are summable</p>",
        "id": 199273695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590868967
    },
    {
        "content": "<p>Does anyone know the English translation of \"R√©duction des endomorphismes\"?</p>",
        "id": 199273714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869010
    },
    {
        "content": "<p>Context? Analysis?</p>",
        "id": 199273763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590869047
    },
    {
        "content": "<p>It's the grab bag where you put the study of eigenvalues, eigenvectors, trigonalization, Jordan normal form etc.</p>",
        "id": 199273937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869339
    },
    {
        "content": "<p>Also, given a matrix A, how would you call a polynomial P such that P(A) = 0?</p>",
        "id": 199273950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869369
    },
    {
        "content": "<p>The yaml file calls it a cancelling polynomial but it sounds fishy to me</p>",
        "id": 199273960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869395
    },
    {
        "content": "<p>I learned it as the <a href=\"https://en.wikipedia.org/wiki/Characteristic_polynomial\">characteristic polynomial</a>.</p>",
        "id": 199274007,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590869432
    },
    {
        "content": "<p>I don't know of a name for such polynomials... but knowing that the minimal polynomial divides them is the only interesting property that they have, right?</p>",
        "id": 199274073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590869535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199273950\">said</a>:</p>\n<blockquote>\n<p>Also, given a matrix A, how would you call a polynomial P such that P(A) = 0?</p>\n</blockquote>\n<p>You mean any polynomial with that property? We have minimal polynomial for the smallest one and characteristic for det(x-A) but otherwise no name for this.</p>",
        "id": 199274074,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590869552
    },
    {
        "content": "<p>Yes any polynomial</p>",
        "id": 199274081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869567
    },
    {
        "content": "<p>Right, I misread. I agree with Alex.</p>",
        "id": 199274094,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590869598
    },
    {
        "content": "<p>It feels completely crazy that you don't have a name for this. I need to rethink everything I know about linear algebra to try to express it without this word.</p>",
        "id": 199274097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869620
    },
    {
        "content": "<p>What about \"R√©duction des endomorphismes\"?</p>",
        "id": 199274147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869659
    },
    {
        "content": "<p>Does anyone has a translation?</p>",
        "id": 199274151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869666
    },
    {
        "content": "<p>I need a header for the following list:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"nt\">eigenvalue</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">eigenvector</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">diagonalization</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">trigonalization</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">endomorphism invariant subspaces</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">characteristic subspaces</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">kernel lemma</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">Dunford decomposition</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n    <span class=\"nt\">Jordan normal form</span><span class=\"p\">:</span> <span class=\"s\">&#39;&#39;</span>\n</code></pre></div>",
        "id": 199274157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199274147\">said</a>:</p>\n<blockquote>\n<p>What about \"R√©duction des endomorphismes\"?</p>\n</blockquote>\n<p>Finite-dimensional spectral theory?</p>",
        "id": 199274165,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590869716
    },
    {
        "content": "<p>By the way, the translation \"kernel lemma\" also sounds fishy</p>",
        "id": 199274173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199274097\">said</a>:</p>\n<blockquote>\n<p>It feels completely crazy that you don't have a name for this. I need to rethink everything I know about linear algebra to try to express it without this word.</p>\n</blockquote>\n<p>If I had to make one up annihilating polynomial sounds more natural.</p>",
        "id": 199274178,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590869756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199274173\">said</a>:</p>\n<blockquote>\n<p>By the way, the translation \"kernel lemma\" also sounds fishy</p>\n</blockquote>\n<p>What does it mean?</p>",
        "id": 199274223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590869772
    },
    {
        "content": "<p>Hmm it seems this term is used <a href=\"https://www.maths.ed.ac.uk/~tl/minimal.pdf\">https://www.maths.ed.ac.uk/~tl/minimal.pdf</a></p>",
        "id": 199274225,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590869778
    },
    {
        "content": "<p><a href=\"https://fr.wikipedia.org/wiki/Lemme_des_noyaux\">https://fr.wikipedia.org/wiki/Lemme_des_noyaux</a></p>",
        "id": 199274230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869794
    },
    {
        "content": "<p>Nope... the only other place on earth where such a lemma exists is in Catalan...</p>",
        "id": 199274236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590869831
    },
    {
        "content": "<p>annihilating polynomial is the direct translation of the French name, I like it</p>",
        "id": 199274237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869835
    },
    {
        "content": "<p>Seriously, Johan, didn't you study linear algebra?</p>",
        "id": 199274252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590869874
    },
    {
        "content": "<p>Not really... actually. I skipped all the lectures.</p>",
        "id": 199274301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590869910
    },
    {
        "content": "<p>Hmm, a comment on this math stackexchange page suggests \"primary decomposition\": <a href=\"https://math.stackexchange.com/questions/3077162/name-for-the-kernel-lemma\">https://math.stackexchange.com/questions/3077162/name-for-the-kernel-lemma</a></p>",
        "id": 199274308,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590869931
    },
    {
        "content": "<p>So we need to prove this in mathlib. Then people will see this strange name \"kernels lemma\" and click the link to start learning linear algebra properly.</p>",
        "id": 199274391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870074
    },
    {
        "content": "<p>I see there is a \"unitary ring\" line. Do we plan to have non-unital rings in mathib at some point?</p>",
        "id": 199274466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870237
    },
    {
        "content": "<p>I wouldn't know the axioms... <code>mul_assoc</code>? But not <code>has_one</code>?</p>",
        "id": 199274528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590870352
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Ring_(mathematics)#Multiplicative_identity:_mandatory_vs._optional\">https://en.wikipedia.org/wiki/Ring_(mathematics)#Multiplicative_identity:_mandatory_vs._optional</a></p>",
        "id": 199274567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870383
    },
    {
        "content": "<p>I guess the answer to your question is no.</p>",
        "id": 199274570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590870387
    },
    {
        "content": "<p>I submitted another PR</p>",
        "id": 199274580,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590870426
    },
    {
        "content": "<p>We have noncommutative rings in mathlib... isn't that good enough?</p>",
        "id": 199274633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590870509
    },
    {
        "content": "<p>Crap, this PR is super conflicting what I was doing</p>",
        "id": 199274650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870557
    },
    {
        "content": "<p>I can try and \"hand merge\" it... Gimme a sec.</p>",
        "id": 199274711,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590870663
    },
    {
        "content": "<p>There is no conflict on GitHub. It conflicts my open PR and my local modifications. But it's ok, I'll handle it.</p>",
        "id": 199274768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870726
    },
    {
        "content": "<p>Let's do both actually: I'll my merge my PR and you'll fix yours</p>",
        "id": 199274796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870777
    },
    {
        "content": "<p>And then I'll fix conflicts with my local changes</p>",
        "id": 199274799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870787
    },
    {
        "content": "<p>Done. <em>Now</em> you have conflicts</p>",
        "id": 199274809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870823
    },
    {
        "content": "<p><a href=\"https://fr.wikipedia.org/wiki/D%C3%A9composition_de_Dunford\">https://fr.wikipedia.org/wiki/D%C3%A9composition_de_Dunford</a> -- this is the first time I've seen the French choose to name some lemma after someone who isn't French, when there was a perfectly good French option (d√©composition de Jordan-Chevalley)</p>",
        "id": 199275022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590871169
    },
    {
        "content": "<p>And how do you say \"r√©duction des endomorphismes\"?</p>",
        "id": 199275068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590871208
    },
    {
        "content": "<p>Is this \"structure theory of endomorphisms\"?</p>",
        "id": 199275083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590871294
    },
    {
        "content": "<p>I guess that's kind of a mixed metaphor</p>",
        "id": 199275088,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590871315
    },
    {
        "content": "<p>I think I cleared the conflicts</p>",
        "id": 199275247,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590871552
    },
    {
        "content": "<p>Awesome.</p>",
        "id": 199275303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590871653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199274097\">said</a>:</p>\n<blockquote>\n<p>It feels completely crazy that you don't have a name for this. I need to rethink everything I know about linear algebra to try to express it without this word.</p>\n</blockquote>\n<p>My whole problem, I even warned about it before :D</p>",
        "id": 199275517,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590872033
    },
    {
        "content": "<p>Hahahaha, this thread has really turned into how does you say X in english :'D</p>",
        "id": 199275566,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590872097
    },
    {
        "content": "<p>what a surprise, a second language is not just the first language plus a dictionary</p>",
        "id": 199275579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590872135
    },
    {
        "content": "<p>I think we'll eventually want non-unital rings, sadly. For example you might want continuous functions vanishing at infinity on a locally compact space as a non-unital algebra, to state the version of Stone-Weierstrass for locally compact spaces.</p>",
        "id": 199275654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590872228
    },
    {
        "content": "<p>I just pushed some beginning of structure cleanup, but I need to go. Everybody should feel free to work on this file, I won't touch it in the next 10 hours.</p>",
        "id": 199275708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590872292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199275579\">said</a>:</p>\n<blockquote>\n<p>what a surprise, a second language is not just the first language plus a dictionary</p>\n</blockquote>\n<p>But it's surprising for cancelling/annihilating polynomials to not have any equivalent, like while I was learning linear algebra, this term was pronounced like 30 times per day during exercises</p>",
        "id": 199275875,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590872554
    },
    {
        "content": "<p>And same goes for many terms I guess</p>",
        "id": 199275879,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590872563
    },
    {
        "content": "<p>I think we just got away with let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> be a polynomial s.t. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">P(M) = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, as its not really longer to say the full definition in this case!</p>",
        "id": 199276003,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590872786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199276003\">said</a>:</p>\n<blockquote>\n<p>I think we just got away with let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> be a polynomial s.t. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">P(M) = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, as its not really longer to say the full definition in this case!</p>\n</blockquote>\n<p>Yes but sometimes you want to say things like<br>\n\"Method to compute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\exp(M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> when you have a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">P(M) = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>\"<br>\nvs<br>\n\"Method to compute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\exp(M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> using an annhilating polynomial\"</p>",
        "id": 199276250,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590873244
    },
    {
        "content": "<p>Anyway, I'm getting sidetracked‚Ä¶ :D</p>",
        "id": 199276267,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590873302
    },
    {
        "content": "<p>Hecke algebras are something which will be within reach soon, and they're rings without 1</p>",
        "id": 199276645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590873989
    },
    {
        "content": "<p><code>#5</code> is about affine spaces. I'm kicking <a href=\"https://github.com/leanprover-community/mathlib/issues/2816\">#2816</a> on the merge queue. Once it lands, we can fill out this section. <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> please let us know if you would like to contribute.</p>",
        "id": 199348804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591002105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> and/or <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  Would you mind filling out <code>#4</code> on bilinear and quadratic forms?</p>",
        "id": 199348893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591002167
    },
    {
        "content": "<p>If any of you doesn't have time/energy/interest in contributing, just say so. No hard feelings.</p>",
        "id": 199348922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591002198
    },
    {
        "content": "<p><code>#7</code> is on single variable complex analysis, and it's going to make us look ridiculous...</p>",
        "id": 199349155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591002399
    },
    {
        "content": "<p>I'll start on <code>#8. Topology</code> now.</p>",
        "id": 199349266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591002504
    },
    {
        "content": "<p>Maybe it would make more sense to work on an algebraic section since I would have an easier time doing topology than algebra</p>",
        "id": 199349281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591002545
    },
    {
        "content": "<p>The first item is interesting. We don't have <code>metric_space.to_topological_space</code> I guess. So what do we do? <code>metric_space.to_uniform_space</code>?</p>",
        "id": 199349484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591002753
    },
    {
        "content": "<p>I found rather link a lemma saying something is open if it contains an open ball around each point, or something like that</p>",
        "id": 199349619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591002913
    },
    {
        "content": "<p>Aha, makes sense</p>",
        "id": 199349693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591002977
    },
    {
        "content": "<p>The remaining sections are:</p>\n<div class=\"codehilite\"><pre><span></span><code>#09. Differential Calculus\n#10. Integral Calculus\n#11. Probability Theory\n#12. Distribution calculus\n#13. Numerical Analysis\n</code></pre></div>\n\n\n<p>I fear that the last 3 will stay empty.</p>",
        "id": 199349763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591003073
    },
    {
        "content": "<p>Don't we have at least the definition of a probability measure?</p>",
        "id": 199349839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591003135
    },
    {
        "content": "<p><code>pmf</code> ¬≠‚Äì Probability mass function</p>",
        "id": 199349852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591003169
    },
    {
        "content": "<p>But otherwise, not much, I think</p>",
        "id": 199349858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591003181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199348893\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> and/or <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>  Would you mind filling out <code>#4</code> on bilinear and quadratic forms?</p>\n</blockquote>\n<p>I would be delighted to fill this out. I'll try and find time this evening though it might not happen till tomorrow.</p>",
        "id": 199350100,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1591003447
    },
    {
        "content": "<p>Don't hesitate to reorder and slightly reword stuff if it makes more sense.</p>",
        "id": 199350112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591003465
    },
    {
        "content": "<p>Thanks, will do. Needless to say I'm happy for <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> to do this too / instead.</p>",
        "id": 199350131,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1591003499
    },
    {
        "content": "<p>Also keep in mind the structure is not yet fully compliant. We want to have exactly three levels: main heading, sub heading, leaf containing a link.</p>",
        "id": 199350158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591003518
    },
    {
        "content": "<p>Understood, I will stick to a three-level structure.</p>",
        "id": 199350181,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1591003549
    },
    {
        "content": "<p>Thanks for helping!</p>",
        "id": 199350239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591003586
    },
    {
        "content": "<p>My pleasure!</p>",
        "id": 199350251,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1591003599
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/48\">https://github.com/leanprover-community/leanprover-community.github.io/pull/48</a> fills links in basic topology (there's a lot left for the experts <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 199350716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591004036
    },
    {
        "content": "<p>Note: affine spaces have been merged</p>",
        "id": 199350820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591004116
    },
    {
        "content": "<p>Ok, I merged but indeed we have several more links to add to this section. I'll do it right now</p>",
        "id": 199350894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591004184
    },
    {
        "content": "<p>Each time I type <code>leanproject up</code> in mathlib, <code>elan</code> downloads something... <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 199351017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591004323
    },
    {
        "content": "<p>Why can't I find that a real normed space is finite-dimensional iff the unit ball is compact? Is it really missing?</p>",
        "id": 199353014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591006185
    },
    {
        "content": "<p>I've updated the metric topology section.</p>",
        "id": 199353462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591006548
    },
    {
        "content": "<p>The useful implication is there (<code>finite_dimensional.proper</code>). The useless implication has been done by a student of Kevin, if I recall correctly, but it never made it into mathlib.</p>",
        "id": 199354014,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591007082
    },
    {
        "content": "<p><a href=\"https://github.com/LAC1213/compact_unit_ball\">https://github.com/LAC1213/compact_unit_ball</a></p>",
        "id": 199354078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591007153
    },
    {
        "content": "<p>Ok, so I can't really tick that one off. Too bad this project never went to mathlib...</p>",
        "id": 199354248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591007283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199354248\">said</a>:</p>\n<blockquote>\n<p>Ok, so I can't really tick that one off. Too bad this project never went to mathlib...</p>\n</blockquote>\n<p>If there was a license, this could be salvaged</p>",
        "id": 199354661,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591007662
    },
    {
        "content": "<p>I'm pretty sure you can discuss this with the author. That would be a nice little project.</p>",
        "id": 199354694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591007695
    },
    {
        "content": "<p>Of course turning this into something PRable means work.</p>",
        "id": 199354713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591007712
    },
    {
        "content": "<p>But it would be a nice way to get familiar with both linear algebra and topology in mathlib.</p>",
        "id": 199354732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591007742
    },
    {
        "content": "<p>If I remember correctly, there is the useless assumption that the field is complete in this project, but this is not crazy to have this assumption.</p>",
        "id": 199355030,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591008039
    },
    {
        "content": "<p>Shouldn't this argument be phrased using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/riesz_lemma\">docs#riesz_lemma</a> ?</p>",
        "id": 199356031,
        "sender_full_name": "David W√§rn",
        "timestamp": 1591009028
    },
    {
        "content": "<p>Indeed it looks like someone started this road but gave up.</p>",
        "id": 199356779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591009765
    },
    {
        "content": "<p>It seems to be Jean. <span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> what is the status of this?</p>",
        "id": 199356848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591009806
    },
    {
        "content": "<p>What I defined for affine spaces is very minimal at present, so there won't be much from that list (on the Euclidean side, I suppose <a href=\"https://github.com/leanprover-community/mathlib/issues/2865\">#2865</a> provides at least \"Angles of vectors\"). It's not yet PRed, but I do have the result that (not necessarily bijective) isometries between Euclidean affine spaces are affine maps that preserve the inner product (the list wants rather more about isometries than that, however).</p>",
        "id": 199359295,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591012059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> Sure... but all small bits help.</p>",
        "id": 199360059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591012687
    },
    {
        "content": "<p>Joseph, did you coordinate with <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/mazur_ulam.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/mazur_ulam.html</a>?</p>",
        "id": 199361412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591013624
    },
    {
        "content": "<p>Is \"C is algebraically closed\" somewhere on the agreg list?</p>",
        "id": 199362322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591014329
    },
    {
        "content": "<p>I hope so</p>",
        "id": 199371671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591019557
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml#L183\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml#L183</a></p>",
        "id": 199371737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591019592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> No, I just wrote a separate proof (for Euclidean spaces, the (easy) result isn't limited to bijective isometries, and the \"preserves inner product\" part is something useful for describing the effect of an isometry (from a finite-dimensional space to itself) on coordinates, once a frame has been chosen, as the combination of an orthogonal matrix and a translation).</p>",
        "id": 199380738,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591024383
    },
    {
        "content": "<p>Actually, you don't need a Euclidean space here. Only a <code>normed_add_torsor</code> over a <code>normed_vector_space</code> with strictly convex balls.</p>",
        "id": 199380985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591024500
    },
    {
        "content": "<p>Actually you can prove the following fact. Let <code>f</code> be an <code>isometry</code>, and its codomain is a <code>normed_add_torsor R E</code> such that <code>0 &lt; r ‚Üí dist x y = r ‚Üí dist x z = r ‚Üí r &lt; dist x (2 * y - z)</code>. Then <code>f</code> is affine.</p>",
        "id": 199381903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591024824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199371737\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml#L183\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml#L183</a></p>\n</blockquote>\n<p>I've never heard of this name before...</p>",
        "id": 199382142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591024951
    },
    {
        "content": "<p>Feel free to add these more general results! I think for isometries of Euclidean spaces there should be a function mapping <code>f</code> (such that <code>isometry f</code>) to an <code>affine_map</code> (for whatever type classes that include the case of Euclidean spaces), and a proof that the corresponding <code>linear_map</code> preserves the inner product, but I'm not particularly concerned with how we get there.</p>",
        "id": 199382374,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591025074
    },
    {
        "content": "<p>BTW, do you prove that for an affine <code>isometry</code> the corresponding <code>linear_map</code> is an <code>isometry</code> as well?</p>",
        "id": 199382777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591025262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199382142\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199371737\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml#L183\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml#L183</a></p>\n</blockquote>\n<p>I've never heard of this name before...</p>\n</blockquote>\n<p><a href=\"https://fr.wikipedia.org/wiki/Th%C3%A9or%C3%A8me_fondamental_de_l%27alg%C3%A8bre\">https://fr.wikipedia.org/wiki/Th%C3%A9or%C3%A8me_fondamental_de_l%27alg%C3%A8bre</a><br>\nThat's the name we give it, maybe we love too much to give names to theorem.<br>\nI even heard that the fact that the continuous image of a compact is a compact is called Weierstrass' theorem :D in France‚Ä¶</p>",
        "id": 199382856,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591025289
    },
    {
        "content": "<p>English Wikipedia never mentions this name, just \"Fundamental theorem of algebra\"</p>",
        "id": 199383007,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591025373
    },
    {
        "content": "<p>That's an invitation to change the name into \"fundamental theorem of algebra\" I believe</p>",
        "id": 199383187,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591025446
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/commit/bebb1e9cafaee64414639bc9714f09d9b124ca0f\">https://github.com/leanprover-community/leanprover-community.github.io/commit/bebb1e9cafaee64414639bc9714f09d9b124ca0f</a></p>",
        "id": 199387999,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591027726
    },
    {
        "content": "<p>Some algebraists will hate you Yury. I know more than one that is really pissed off when an analysis theorem is called the \"fundamental theorem of algebra\".</p>",
        "id": 199390135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591028747
    },
    {
        "content": "<p>It's because algebra := polynomials and matrices in 1800 or something, right?</p>",
        "id": 199390381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591028869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Is there a title that is both widely recognizable (in English) and won't make algebraists hate me?</p>",
        "id": 199394442,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591030840
    },
    {
        "content": "<p>The algebraists should be happy that they have opportunity to invade the territory of the analysts!<br>\nGeometers don't even have a \"fundamental theorem\".... look at them <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 199394777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591030973
    },
    {
        "content": "<p>The title could be \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is algebraically closed\"...</p>",
        "id": 199401345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591034146
    },
    {
        "content": "<p>Such a boring theorem name... you've been influenced too much by mathlib naming conventions.</p>",
        "id": 199401446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591034197
    },
    {
        "content": "<p>I can see you don't know what this theorem is called in mathlib...</p>",
        "id": 199401592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591034280
    },
    {
        "content": "<p><code>polynomial.complex_exists_root</code>?</p>",
        "id": 199401664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591034301
    },
    {
        "content": "<p>That's just because we don't have <code>class algebraically_closed (K : Type*) [field K]</code> yet.</p>",
        "id": 199401708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591034334
    },
    {
        "content": "<p>Otherwise it would be <code>complex.algebraically_closed</code>.</p>",
        "id": 199401735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591034348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I didn't prove that particular result that the corresponding <code>linear_map</code> is an <code>isometry</code>, but it's a straightforward consequence of the other facts in this area.</p>",
        "id": 199415523,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591041669
    },
    {
        "content": "<p>E.g., from <a href=\"https://github.com/leanprover-community/mathlib/issues/2907\">#2907</a></p>",
        "id": 199426827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591047212
    },
    {
        "content": "<p>Actually it's true more generally than that, for the map (at a particular base point) on vectors induced by any isometry between two <code>normed_add_torsor</code>s. Does this belong in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">add_torsor</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">isometry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">V1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V1</span> <span class=\"n\">P1</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">V2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V2</span> <span class=\"n\">P2</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The map on vectors corresponding to a map from P1 to P2, at a base</span>\n<span class=\"cm\">point p. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">vector_map_of_point_map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V2</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span><span class=\"err\">·µ•</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"err\">·µ•</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The map described by `vector_map_of_point_map` is an isometry if</span>\n<span class=\"cm\">the original map is one. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">isometry_vector_map_of_point_map</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">isometry</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">isometry</span> <span class=\"o\">(</span><span class=\"n\">vector_map_of_point_map</span> <span class=\"n\">V1</span> <span class=\"n\">V2</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">isometry_emetric_iff_metric</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">vector_map_of_point_map</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">,</span> <span class=\"n\">dist_eq_norm</span><span class=\"o\">,</span> <span class=\"n\">add_torsor</span><span class=\"bp\">.</span><span class=\"n\">vsub_sub_vsub_right_cancel</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span><span class=\"err\">·µ•</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span><span class=\"err\">·µ•</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_torsor</span><span class=\"bp\">.</span><span class=\"n\">dist_eq_norm</span> <span class=\"n\">V2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_torsor</span><span class=\"bp\">.</span><span class=\"n\">dist_eq_norm</span> <span class=\"n\">V1</span><span class=\"o\">,</span> <span class=\"n\">add_torsor</span><span class=\"bp\">.</span><span class=\"n\">vsub_vadd_eq_vsub_sub</span><span class=\"o\">,</span> <span class=\"n\">add_torsor</span><span class=\"bp\">.</span><span class=\"n\">vadd_vsub</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199441129,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591060157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> I think it does, but I wouldn't make a new definition. (Or at least, don't use the definition in the lemma. Rather, take any random map <code>g : V1 ‚Üí V2</code> and the hypothesis <code>hg : \\forall v, g v = f (v +·µ• p) -·µ• f p</code>. In this way, the lemma will also be applicable to maps that aren't definitionally a <code>vector_map_of_point_map</code>. My intuition says that is what will happen in practice.</p>",
        "id": 199450039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591072928
    },
    {
        "content": "<p>Note that with <a href=\"https://github.com/leanprover-community/mathlib/issues/2907\">#2907</a> you can represent  your map as a composition of known isometries, and get the proof from <code>isometry.comp</code>.</p>",
        "id": 199450911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591074264
    },
    {
        "content": "<p>Probably we should stop hijacking Patrick's thread.</p>",
        "id": 199450925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591074315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> There's something wrong with the <code>statement-todo</code> and <code>statement-done</code> classes. Currently cards are also getting these classes, but not in an intuitive way.</p>",
        "id": 199464731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591088048
    },
    {
        "content": "<p>I think a card should only be marked <code>statement-done</code> if <em>all</em> of its children are completely done.</p>",
        "id": 199464757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591088071
    },
    {
        "content": "<p>Otherwise our todo-list is much too optimistic.</p>",
        "id": 199464780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591088090
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/42jZQxUltsH9rx5WcwRDs6Gz/image.png\">image.png</a> <br>\nThis doesn't really look as I would expect. The todo toggle seems to be inverted...</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/42jZQxUltsH9rx5WcwRDs6Gz/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/42jZQxUltsH9rx5WcwRDs6Gz/image.png\"></a></div>",
        "id": 199464972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591088245
    },
    {
        "content": "<p>I'm seeing todo's but the toggle is off, and when I switch it on, the items that are not links go away</p>",
        "id": 199465007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591088272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199464731\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> There's something wrong with the <code>statement-todo</code> and <code>statement-done</code> classes. Currently cards are also getting these classes, but not in an intuitive way.</p>\n</blockquote>\n<p>There might be a bug</p>",
        "id": 199467055,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591089616
    },
    {
        "content": "<p>I'll look into it</p>",
        "id": 199467115,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591089666
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199467152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591089699
    },
    {
        "content": "<p>Alternative: strip out the classes and generate two files...</p>",
        "id": 199467163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591089714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199465007\">said</a>:</p>\n<blockquote>\n<p>I'm seeing todo's but the toggle is off, and when I switch it on, the items that are not links go away</p>\n</blockquote>\n<p>I think it's also due to the fact you don't want to show parts when they are empty (e.g. all children are todos), but I'm not sure, I'll look at it again</p>",
        "id": 199467167,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591089717
    },
    {
        "content": "<p>Hahahaha</p>",
        "id": 199467170,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591089720
    },
    {
        "content": "<p>Let's just make sure that the list works for the IAS talk, and then we can add the fancy buttons afterwards.</p>",
        "id": 199467237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591089749
    },
    {
        "content": "<p>Agreed ; if I don't find a trivial solution quickly enough, I'll send directly a PR to produce two files, sounds good?</p>",
        "id": 199467276,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591089786
    },
    {
        "content": "<p>So I'm having a look at the current state of this (<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">the yaml file</a>). For \"direct sum\" (line 12) we have the unnamed <a href=\"https://github.com/leanprover-community/mathlib/blob/1a4de99ede8382f9040230ec0767e3bc308ad913/src/linear_algebra/direct_sum_module.lean#L22\">instance</a> <code>direct_sum.semimodule</code>. This is an \"external direct sum\". From the context of the list it looks like an internal direct sum though, i.e. a sum of two submodules within a big module, where the submodules happen to have trivial intersection. Should we just not care and link to the external direct sum? And can one link to an unnamed instance name?</p>",
        "id": 199469245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591091275
    },
    {
        "content": "<p>Internal direct sum = sup in the lattice <code>semimodule _ _</code>??</p>",
        "id": 199469313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591091317
    },
    {
        "content": "<p>It's no different to internal sum though</p>",
        "id": 199469328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591091334
    },
    {
        "content": "<p>internal direct sum is an awkard notion, where you want to know that things are orthogonal, and then take a sup.</p>",
        "id": 199469498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591091456
    },
    {
        "content": "<p>I remember learning this as an UG too. I think the idea is that abstract direct sum of two vector spaces is supposed to be too difficuilt, and this internal direct sum -- if V and W are subspaces of some large vector space X and V and W intersect trivially, then the space spanned by V and W satisfies the universal property of the abstact direct sum -- was taught first.</p>",
        "id": 199469510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591091466
    },
    {
        "content": "<p>We just totalise the function...</p>",
        "id": 199469517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591091472
    },
    {
        "content": "<p>And define it for non-othogonal submodules as well</p>",
        "id": 199469534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591091481
    },
    {
        "content": "<p>The idea is to find a good entry point for people that may not know much about formalization, but want to use this notion. Sometimes the best entry point for a definition is actually a lemma saying that some funny mathliby way of doing stuff is giving you the expected behavior.</p>",
        "id": 199470207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591091931
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/50\">https://github.com/leanprover-community/leanprover-community.github.io/pull/50</a> bilinear and quadratic forms</p>",
        "id": 199471881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093008
    },
    {
        "content": "<p>Merged!</p>",
        "id": 199472027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093100
    },
    {
        "content": "<p>But I'll probably need to fix structure</p>",
        "id": 199472048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093127
    },
    {
        "content": "<p>Did I do something wrong? Let me know now because I'm about to start on affine spaces</p>",
        "id": 199472057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093142
    },
    {
        "content": "<p>And I didn't know how to check if the links work.</p>",
        "id": 199472072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093156
    },
    {
        "content": "<p>(e.g. I might have missed a namespace)</p>",
        "id": 199472083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199350158\">said</a>:</p>\n<blockquote>\n<p>Don't hesitate to reorder and slightly reword stuff if it makes more sense.</p>\n<p>Also keep in mind the structure is not yet fully compliant. We want to have exactly three levels: main heading, sub heading, leaf containing a link.</p>\n</blockquote>",
        "id": 199472331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093357
    },
    {
        "content": "<p>Hold on for two minutes</p>",
        "id": 199472355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093375
    },
    {
        "content": "<p>You can have a look at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/commit/90a877595a2bc219ac0642d1f9d6fae477f15972\">https://github.com/leanprover-community/leanprover-community.github.io/commit/90a877595a2bc219ac0642d1f9d6fae477f15972</a></p>",
        "id": 199472689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093617
    },
    {
        "content": "<p>That's what I call \"fixing structure\", following the guidelines quoted above.</p>",
        "id": 199472715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093637
    },
    {
        "content": "<p>I see, so actually changing the structure of the yaml to be a bit more sane</p>",
        "id": 199472735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093656
    },
    {
        "content": "<p>keep precisely the same leaves but we can move them around a bit</p>",
        "id": 199472839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093711
    },
    {
        "content": "<p>Yes. Actually I'm pretty disappointed by the source document. I thought it was more structured.</p>",
        "id": 199472848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093715
    },
    {
        "content": "<p>it probably wasn't written by a computer scientist!</p>",
        "id": 199472861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093731
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/commit/90a877595a2bc219ac0642d1f9d6fae477f15972#diff-25c153ec778dc59bca8f669ad98bcad4R241\">https://github.com/leanprover-community/leanprover-community.github.io/commit/90a877595a2bc219ac0642d1f9d6fae477f15972#diff-25c153ec778dc59bca8f669ad98bcad4R241</a><br>\nShould that be <code>cross product</code>?</p>",
        "id": 199472865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591093733
    },
    {
        "content": "<p>Sometimes I even change leaves a bit (and I added Jordan normal form). But the main point is that leaves should be at level 3.</p>",
        "id": 199472890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093754
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Triple_product\">https://en.wikipedia.org/wiki/Triple_product</a></p>",
        "id": 199472916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093774
    },
    {
        "content": "<p>Oh, the preceding line is a wrong translation</p>",
        "id": 199472931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093790
    },
    {
        "content": "<p>\"vector product\" means cross product</p>",
        "id": 199472939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093800
    },
    {
        "content": "<p>I'm learning new stuff everyday...</p>",
        "id": 199472987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591093807
    },
    {
        "content": "<p>But we call it \"produit vectoriel\" in French.</p>",
        "id": 199473005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093818
    },
    {
        "content": "<p>We don't have any of these crazy things which assume finite-dimensionality (or in this case 3-dimensionality)</p>",
        "id": 199473026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093839
    },
    {
        "content": "<p>The triple product thins is about computing determinants using the Euclidean structure</p>",
        "id": 199473034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093846
    },
    {
        "content": "<p>3 is overrated</p>",
        "id": 199473037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093850
    },
    {
        "content": "<p>That's why I named this section \"low dimensions\"</p>",
        "id": 199473069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093871
    },
    {
        "content": "<p>why not just call it n-ary product and link to det :-)</p>",
        "id": 199473076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591093875
    },
    {
        "content": "<p>The fact that you can compute determinants using the Euclidean structure has some content</p>",
        "id": 199473096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093896
    },
    {
        "content": "<p>But I wouldn't say this has super high priority, unless you specifically work towards low-hanging fruits in this list</p>",
        "id": 199473168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591093927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199473026\">said</a>:</p>\n<blockquote>\n<p>We don't have any of these crazy things which assume finite-dimensionality (or in this case 3-dimensionality)</p>\n</blockquote>\n<p>That's for people who does physics</p>",
        "id": 199474268,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591094708
    },
    {
        "content": "<p>I thought physics was all about dimension 4.</p>",
        "id": 199474703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591095099
    },
    {
        "content": "<p>I thought 10?</p>",
        "id": 199474984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591095329
    },
    {
        "content": "<p>Sometimes they forget about time and wrapped dimensions, :-¬∞</p>",
        "id": 199475929,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1591096062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Didn't you do stuff on Gr√∂nwell in mathlib at some point? I can't find it.</p>",
        "id": 199488966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591103736
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/ODE/gronwall.html\">https://leanprover-community.github.io/mathlib_docs/analysis/ODE/gronwall.html</a></p>",
        "id": 199489101,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591103806
    },
    {
        "content": "<p>Aah, I made a typo...</p>",
        "id": 199489207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591103878
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199489227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591103882
    },
    {
        "content": "<p>We don't really have a definition of a sigma algebra <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 199489604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591104083
    },
    {
        "content": "<p>We have <code>[measurable Œ±]</code></p>",
        "id": 199489754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591104155
    },
    {
        "content": "<p>Yup... it's just that the name isn't recognisable</p>",
        "id": 199490052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591104293
    },
    {
        "content": "<p>I've filled in a couple more links in analysis and measure theory. The part on integration I didn't really touch... I've never used that part of the library.</p>",
        "id": 199490754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591104621
    },
    {
        "content": "<p>A sigma algebra is exactly an instance of <code>measurable_space Œ±</code></p>",
        "id": 199491414,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591104941
    },
    {
        "content": "<p>It's just that the list has <code>'measureable spaces'</code> and <code>'sigma algebras'</code> as seperate items <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 199492002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591105215
    },
    {
        "content": "<p>We also have measurable spaces <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/category/Meas.lean#L31\">https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/category/Meas.lean#L31</a> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 199492216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591105330
    },
    {
        "content": "<p>What is the difference between a measurable space and a set with a sigma algebra?</p>",
        "id": 199492313,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591105384
    },
    {
        "content": "<p>Those are the same, the issue is that (by analogy with <code>group</code>, etc.) the structure <code>measurable_space</code> is named after the bundled concept, when it actually is the unbundled one. Same with <code>topological_space</code>.</p>",
        "id": 199492769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591105598
    },
    {
        "content": "<p>We really need this automated \"rename declarations\" bot, that will just go through the entire source to rename things while I sleep.</p>",
        "id": 199493578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591105906
    },
    {
        "content": "<p>Thanks Johan. Some items are wrong and a lot are missing but it still helps. I'll merge it and improve it.</p>",
        "id": 199494096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591106111
    },
    {
        "content": "<p>FWIW I'm not suggesting renaming the mathlib definitions, just explaining why they don't exactly align with the math names: basically because we don't really use the bundled objects so we have just one name for both \"measurable space\" and \"sigma-algebra\".</p>",
        "id": 199494285,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591106180
    },
    {
        "content": "<p>I think the module docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html\">https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html</a> could be easier to read...</p>",
        "id": 199495311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591106578
    },
    {
        "content": "<p>Ah, this is a docstring from the ancient times!</p>",
        "id": 199496342,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591106961
    },
    {
        "content": "<p>S√©bastien, do you know whether counting measures are hidden somewhere?</p>",
        "id": 199496404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591106988
    },
    {
        "content": "<p>And non-discrete probability measures?</p>",
        "id": 199496514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591107020
    },
    {
        "content": "<p>The counting measure is in <code>measure_space.lean</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Counting measure on any measurable space. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">sum</span> <span class=\"n\">dirac</span>\n</code></pre></div>",
        "id": 199501070,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591108410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199494096\">said</a>:</p>\n<blockquote>\n<p>Thanks Johan. Some items are wrong and a lot are missing but it still helps. I'll merge it and improve it.</p>\n</blockquote>\n<p>Sorry for the mistakes</p>",
        "id": 199501795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591108664
    },
    {
        "content": "<p>Oh, I should have checked here before pushing, I missed S√©bastien's message.</p>",
        "id": 199502095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591108798
    },
    {
        "content": "<p>You can push again... it's free.</p>",
        "id": 199502327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591108884
    },
    {
        "content": "<p>Done</p>",
        "id": 199502452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591108924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> would you mind going over <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/c2631dcdfe279ebe5869eb62e6289a6e7d426681/data/overview.yaml#L505-L585\">https://github.com/leanprover-community/leanprover-community.github.io/blob/c2631dcdfe279ebe5869eb62e6289a6e7d426681/data/overview.yaml#L505-L585</a> to tell us if we missed stuff?</p>",
        "id": 199502481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591108939
    },
    {
        "content": "<p>Monotone convergence is <code>lintegral_supr_ae</code> in <code>integration.lean</code>.</p>",
        "id": 199503133,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591109245
    },
    {
        "content": "<p>Fatou is <code>lintegral_liminf_le</code> in <code>integration.lean</code>.</p>",
        "id": 199503234,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591109289
    },
    {
        "content": "<p>By the way, just before Fatou there are the two lines</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- for some reason the next proof fails without changing the priority of this instance</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</code></pre></div>\n\n\n<p>It won't be a surprise to anyone that, with current awesome Lean, they can be safely removed.</p>",
        "id": 199503369,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591109360
    },
    {
        "content": "<p>I just skipped that file because it seems to be all about the mysterious <code>‚à´‚Åª</code>. Isn't there a version for actual integrals?</p>",
        "id": 199503600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591109460
    },
    {
        "content": "<p>The usual textbook versions of these theorems are for nonnegative functions that are allowed to take the value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">‚àû</span></span></span></span>, so they really talk about the <code>‚à´‚Åª</code>. I just checked in Rudin, for instance, and both monotone convergence and Fatou's lemma are just given in this version.</p>",
        "id": 199504468,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591109860
    },
    {
        "content": "<p>Thanks. We really need some md file describing how to navigate that part of mathlib.</p>",
        "id": 199504795,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591109985
    },
    {
        "content": "<p>Well, a yaml file is a good first start (-;</p>",
        "id": 199504890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591110006
    },
    {
        "content": "<p>The YaML file doesn't explain what this crazy <code>‚à´‚Åª</code> symbol means</p>",
        "id": 199505200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591110119
    },
    {
        "content": "<p>S√©bastien, since you're clearly not working on this referee report, would you mind handling Section 9?</p>",
        "id": 199505417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591110183
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/edit/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/edit/newsite/data/overview.yaml</a></p>",
        "id": 199505476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591110208
    },
    {
        "content": "<p>I got through the interesting part of the paper, now it's the boring technical part, so any excuse for procrastination is good. I'll have a look.</p>",
        "id": 199505529,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591110233
    },
    {
        "content": "<p>At this stage you can write to the editor: I think the theorem is interesting and the new ideas are nice, now I'm waiting for the formalization of the technical details.</p>",
        "id": 199505716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591110301
    },
    {
        "content": "<p>People still need to get their paper published in a reasonable amount of time, especially if they're young. I could do this when I refer papers whose authors are all tenured :)</p>",
        "id": 199507095,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591110819
    },
    {
        "content": "<p>If that catches on, you'll find authors scrambling for getting a phd student or postdoc as coauthor</p>",
        "id": 199507216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591110866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> since you didn't fix the bugs quickly enough for my talk, I went ahead and split the display into two files. I also added a link.</p>",
        "id": 199656081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591208061
    },
    {
        "content": "<p>I also cleaned up the remaining sections so that the structure should be consistent now. I'm convinced there are still missing links, but people should now track them by comparing <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">https://leanprover-community.github.io/undergrad_todo.html</a> with what they think is in mathlib.</p>",
        "id": 199656176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591208125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/199656081\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> since you didn't fix the bugs quickly enough for my talk, I went ahead and split the display into two files. I also added a link.</p>\n</blockquote>\n<p>How did the talk go, by the way?</p>",
        "id": 199659552,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591209768
    },
    {
        "content": "<p>It's at 1200 tonight</p>",
        "id": 199659600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591209798
    },
    {
        "content": "<p>So around 1215, Patrick is going to demo Zulip, and we should all be making silly jokes</p>",
        "id": 199659660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591209823
    },
    {
        "content": "<p>I'm sorry the widgets didn't make it in time for the talk, but the vscode extension still has some rough edges and Ed is a bit busy at the moment.</p>",
        "id": 199659681,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591209831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Which timezone?</p>",
        "id": 199659739,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591209843
    },
    {
        "content": "<p>Midnight in Amsterdam, Paris, Berlin</p>",
        "id": 199660007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591209993
    },
    {
        "content": "<p>I think it's 1800 Princeton time</p>",
        "id": 199660037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591210006
    },
    {
        "content": "<p>So in 3 hours, i.e. 24:00?  I was confused by the 12.</p>",
        "id": 199660085,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591210036
    },
    {
        "content": "<p>It's getting dangerously close.</p>",
        "id": 199660090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591210042
    },
    {
        "content": "<p>I see 5:30 pm on the IAS website which I assume is US/Eastern</p>",
        "id": 199660096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591210045
    },
    {
        "content": "<p>Yes, 3 hours</p>",
        "id": 199660098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591210046
    },
    {
        "content": "<p>5:30 is the beginning of discussions, but the talk starts half an hour later.</p>",
        "id": 199660121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591210069
    },
    {
        "content": "<p>It's a crazy format.</p>",
        "id": 199660126,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591210074
    },
    {
        "content": "<p>Interesting idea to discuss the talk before it happens</p>",
        "id": 199660138,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591210081
    },
    {
        "content": "<p>I replaces a very informal seminar featuring wine and cheese.</p>",
        "id": 199660190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591210095
    },
    {
        "content": "<p>Before the talk peoples are randomly distributed in Zoom rooms with 6 participants.</p>",
        "id": 199660252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591210130
    },
    {
        "content": "<p>Then there is the talk and then general discussion.</p>",
        "id": 199660275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591210142
    },
    {
        "content": "<p>We had this with my OWLS talk and it worked really well, but we did it after not before.</p>",
        "id": 199671993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591215839
    },
    {
        "content": "<p>The talk went fine, discussion just stopped (almost two hours after the talk stopped).</p>",
        "id": 199693444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591230086
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2946\">#2946</a> Eisenstein criterion (thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> ) is on the merge queue.</p>",
        "id": 199758732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591282519
    },
    {
        "content": "<p>So we can update this yaml in a moment (-;</p>",
        "id": 199758774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591282539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> What do you think of hosting things like <code>overview.yaml</code> in mathlib? Then PRs that add new stuff can also add it to that file directly.</p>",
        "id": 199764102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591284534
    },
    {
        "content": "<p>(And it makes it easier for a reviewer to say: Hey, please update that file as well.)</p>",
        "id": 199764141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591284553
    },
    {
        "content": "<p>Of course I don't have anything against that. I don't know what would be the best strategy. Maybe the website CI could simply download the file from mathlib before running the site building script.</p>",
        "id": 199765892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591285225
    },
    {
        "content": "<p>I think it's probably a good idea. Moving <code>overview.yaml</code> to mathlib will change an informal dependency (we have to remember to make changes in two repos) to a technical one (rebuilding the website will require <code>wget</code> from mathlib github as Patrick says).</p>",
        "id": 199765976,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591285275
    },
    {
        "content": "<p>Yup, that's the kind of thing I was meaning</p>",
        "id": 199765983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285277
    },
    {
        "content": "<p>Same applies to <code>100.yaml</code></p>",
        "id": 199766042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285303
    },
    {
        "content": "<p>And <code>stacks.yaml</code>, when we ever get there (-;</p>",
        "id": 199766081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285316
    },
    {
        "content": "<p>The case of 100.yaml is slightly different because it also lists stuff from outside mathlib</p>",
        "id": 199766240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591285367
    },
    {
        "content": "<p>But only very little right? Even <code>archive/</code> is in the mathlib repo</p>",
        "id": 199766315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285395
    },
    {
        "content": "<p>So it's only CH that is outside, I think.</p>",
        "id": 199766343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285406
    },
    {
        "content": "<p>We also have more polishing work to be done on this list stuff. We only have the minimal version. We need to get a better idea about interaction between this list and <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a>.</p>",
        "id": 199766562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591285482
    },
    {
        "content": "<p>One option is to rename overview.yaml into undergrad.yaml, create a file advanced_topics.yaml for everything else, and start by porting whatever is list in the overview page but not in the undergrad page to this new file.</p>",
        "id": 199766731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591285551
    },
    {
        "content": "<p>The border between undergrad and the rest is pretty blurry, but I think it's interesting anyway.</p>",
        "id": 199766830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591285580
    },
    {
        "content": "<p>Because it allows to also have <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">https://leanprover-community.github.io/undergrad_todo.html</a> which would not make sense with an open ended scope.</p>",
        "id": 199766906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591285615
    },
    {
        "content": "<p>Also note that I don't have anything against resurrecting the switches gathering stuff and todo stuff on the same page, but they were simply too buggy for now.</p>",
        "id": 199767046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591285676
    },
    {
        "content": "<p>Yup, no worries.</p>",
        "id": 199767283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285769
    },
    {
        "content": "<p>I think the switches are more user friendly (when they work correctly). But separate pages is developer friendly, and that's also worth something <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 199767355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285799
    },
    {
        "content": "<p>Yesterday I also modified Ryan's python code at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/make_site.py#L134\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/make_site.py#L134</a> in a way that would probably make it easier to fix the bugs. In defense of Ryan's code, I need to say that he worked on a badly specified issue. It wasn't clear in the beginning what kind of structure we wanted to support. The idea that we want exactly three levels (topic, subtopic, item) emerged while working on the list. This is now fully enforced in the YaML file (unless I missed something) and this should make everything easier (including CSS styling).</p>",
        "id": 199768041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591286063
    },
    {
        "content": "<p>Another call to contributions: now that the list is visible on the website, it would be nice to write the little piece of CI that checks that urls don't break (and are correct to start with). One needs to be careful since having a successful http request is not enough to guarantee that the anchor is there: requesting <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/basic.html#poincare_conjecture\">https://leanprover-community.github.io/mathlib_docs/topology/basic.html#poincare_conjecture</a> will not give you any http error.</p>",
        "id": 199937623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591393503
    },
    {
        "content": "<p>I think it is time to go through <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">https://leanprover-community.github.io/undergrad_todo.html</a> again, to check if some stuff has been done already. Here's a first set of remarks/questions. I think there is more.</p>\n<h1>Linear algebra</h1>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Didn't you do Gaussian elimination</li>\n<li>Is the matrix exponential now a consequence of some very general exponential in Banach algebras or something?</li>\n<li>The special linear group is done, I think</li>\n</ul>\n<h1>Group theory</h1>\n<ul>\n<li><del> Maschke is done </del> a PR exists for this: <a href=\"https://github.com/leanprover-community/mathlib/issues/9398\">#9398</a></li>\n</ul>\n<h1>Ring theory</h1>\n<ul>\n<li>Algebra over a commutative ring. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> do you mean something that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> doesn't provide?</li>\n<li>rational fraction fields with one indeterminate over a field: <a href=\"https://github.com/leanprover-community/mathlib/issues/9563\">#9563</a></li>\n</ul>\n<h1>Bilinear and Quadratic Forms Over a Vector Space</h1>\n<ul>\n<li>real classification --- is this something else than Sylvester's inertia? Because we have that</li>\n</ul>",
        "id": 256254771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633443993
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9398\">#9398</a> by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> addresses Maschke.</p>",
        "id": 256257089,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1633444769
    },
    {
        "content": "<p>There are many flavors of gaussian elimination. The most classical one is where you are only allowed operations on the rows of a matrix, but where you need sometimes to exchange two rows, if there is a zero at the bad place. I did another version where I don't exchange two rows, but where I do operations on rows and columns. I am not sure it qualifies as gaussian elimination (although it is just as good in practice, and in fact better for what I wanted to do (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.map_linear_map_add_haar_eq_smul_add_haar\">docs#measure_theory.measure.map_linear_map_add_haar_eq_smul_add_haar</a>) since it avoids the discussion of rows exchanges).</p>",
        "id": 256257458,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633444895
    },
    {
        "content": "<p>I agree this list needs cleaning (probably also remove a couple of meaningless items and fix some translations mistakes). The reason why algebra is not crossed out is I guess we waited to have non associative algebras (or even non-unital?). I don't know what is the current status.</p>",
        "id": 256257950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> we have non assoc rings now? How about algebras?</p>",
        "id": 256258075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633445092
    },
    {
        "content": "<p>About Maschke, do we have the usual statement (involving sums of irreducible representations) now?</p>",
        "id": 256258500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445214
    },
    {
        "content": "<p>Yes, though it's not quite as pretty as it might be. E.g., we have  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_assoc_semiring\">docs#non_assoc_semiring</a> but no <code>non_assoc_ring</code>.</p>",
        "id": 256258505,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633445216
    },
    {
        "content": "<p>The question about algebra is: do we have a structure that cover both the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_algebra\">docs#lie_algebra</a>?</p>",
        "id": 256258884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/256258075\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> we have non assoc rings now? How about algebras?</p>\n</blockquote>\n<p>Also since our bundled <code>algebra</code> class is (unfortunately) still stuck in the (unital) associative world, the following is how to declare a non-assoc algebra:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 256259092,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633445400
    },
    {
        "content": "<p>About matrix exponential, I guess we are missing some glue, but maybe I'm wrong. <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> ?</p>",
        "id": 256259170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445414
    },
    {
        "content": "<p>Oliver, this has a unit, right? It doesn't happen so often for Lie algebras.</p>",
        "id": 256259323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445465
    },
    {
        "content": "<p>Yes, that has a unit. There is a flavour without a unit. You just write <code>non_unital_non_assoc_semiring A</code>.</p>",
        "id": 256259388,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633445481
    },
    {
        "content": "<p>I have a definition of <code>exp</code> that works in any Banach algebra.</p>",
        "id": 256259410,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633445489
    },
    {
        "content": "<p>I mean, in a local branch.</p>",
        "id": 256259437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633445499
    },
    {
        "content": "<p>And defined using analytic functions.</p>",
        "id": 256259481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633445513
    },
    {
        "content": "<p>I think that eventually we should replace <code>complex.exp</code> and <code>real.exp</code> with this definition but it's not PR-ready yet.</p>",
        "id": 256259631,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633445554
    },
    {
        "content": "<p>(and I don't have a migration path yet).</p>",
        "id": 256259679,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633445569
    },
    {
        "content": "<p>Yury, we already have <a href=\"https://github.com/leanprover-community/mathlib/blob/ef139bd08ff414f0f6354461d26274c18a6c405d/src/analysis/normed_space/exponential.lean\">https://github.com/leanprover-community/mathlib/blob/ef139bd08ff414f0f6354461d26274c18a6c405d/src/analysis/normed_space/exponential.lean</a></p>",
        "id": 256259721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445582
    },
    {
        "content": "<p>Indeed. Then just ignore my comments.</p>",
        "id": 256260075,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633445671
    },
    {
        "content": "<p>Actually it probably requires no glue. We should check that type class inference is happy to provide this on real or complex valued matrices and selected one declaration to link.</p>",
        "id": 256260216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445713
    },
    {
        "content": "<p>And I agree it would be nice to replace the elementary versions, but clearly mathlib is going in the opposite direction (removing calculus from proofs about exponential to untangle calculus and measure theory).</p>",
        "id": 256260354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/256258884\">said</a>:</p>\n<blockquote>\n<p>The question about algebra is: do we have a structure that cover both the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_algebra\">docs#lie_algebra</a>?</p>\n</blockquote>\n<p>Sort of. Since Lie algebras use the <code>has_bracket</code> typeclass and rings use the <code>has_mul</code> typeclass, it's not quite so simple. I believe the only place where we connect these two worlds is in the construction of the free Lie algebra as a quotient of the free non-unital, non-associative algebra.</p>\n<p>E.g., here a <code>has_mul</code> is turned into a <code>has_bracket</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/5926f103c66a17a60eafc1aaec387d9db85a21ad/src/algebra/lie/free.lean#L115\">https://github.com/leanprover-community/mathlib/blob/5926f103c66a17a60eafc1aaec387d9db85a21ad/src/algebra/lie/free.lean#L115</a></p>",
        "id": 256260498,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633445796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/256260354\">said</a>:</p>\n<blockquote>\n<p>And I agree it would be nice to replace the elementary versions, but clearly mathlib is going in the opposite direction (removing calculus from proofs about exponential to untangle calculus and measure theory).</p>\n</blockquote>\n<p>Apparently this should still be possible, using the bare definition of analytic functions and of the exponential (which does not require anything on derivatives) to define the power function, prove its basic properties, and then import it into measure theory.</p>",
        "id": 256260702,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633445863
    },
    {
        "content": "<p>And we managed to put several discussions in the same thread, it looks like we're back to the gitter days...</p>",
        "id": 256261010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633445957
    },
    {
        "content": "<p>Ah, but unlike gitter we can move messages between threads if needed :) (edit: done, hope I didn't tread on anyone's toes)</p>",
        "id": 256261075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633445981
    },
    {
        "content": "<p>I have a proof that <code>exp</code> in a normed algebra does not depend on the base field (at least if the base field is a normed algebra over <code>rat</code>).</p>",
        "id": 256271145,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633449310
    },
    {
        "content": "<p>I'm a bit late to the party, but the only thing lacking for matrix exponential is a normed algebra instance on matrices (I remember searching for it and not finding it). <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_eq_exp_of_field_extension\">docs#exp_eq_exp_of_field_extension</a> similar to what you did ?</p>",
        "id": 256632827,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1633633723
    },
    {
        "content": "<p>There's a PR open that adds a norm of some kind to matrices, right?</p>",
        "id": 256633531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633634001
    },
    {
        "content": "<p>Just not the normed_algebra instance</p>",
        "id": 256633554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633634013
    },
    {
        "content": "<p>Why do you need the <code>char_p</code> assumption?</p>",
        "id": 256679511,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633660092
    },
    {
        "content": "<p>I mean, can't you say \"let <code>p</code> be the characteristic of <code>K</code>\" in the proof?</p>",
        "id": 256679557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633660154
    },
    {
        "content": "<p>I assumed that both fields are normed algebras over <code>rat</code>.</p>",
        "id": 256679580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633660188
    },
    {
        "content": "<p>And made no assumptions like <code>is_scalar_tower</code>.</p>",
        "id": 256679641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633660212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/256679557\">said</a>:</p>\n<blockquote>\n<p>I mean, can't you say \"let <code>p</code> be the characteristic of <code>K</code>\" in the proof?</p>\n</blockquote>\n<p>You are right, that is just an artifact of the original version I did. I'll PR a change soon.</p>",
        "id": 256713579,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1633685992
    },
    {
        "content": "<p>Do you think it is possible to completely hide the base field ?</p>",
        "id": 256713710,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1633686058
    },
    {
        "content": "<p>This is my periodic message about the <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">missing undergrad math list</a>. I think there is a lot of cleanup to do. Some people have important propaganda talks to deliver in mid-January and it would be nice to have an undergrad list sprint before then. Today I created two new wiki pages: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets\">trivial targets</a> and <a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-low-hanging-fruits\">low hanging fruits</a>. The border between those categories is a bit fuzzy but I think the first list could be wiped out in one week. And both lists could be handled in one month if we manage to get some community dynamics here. Feel free to edit those wiki pages to claim items. I <em>think</em> that anyone having access to mathlib branches can edit them. You can also post messages here of course.</p>",
        "id": 264924410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639515521
    },
    {
        "content": "<p>Of course if you feel more ambitious, the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Big-missing-undergraduate-theorems\">big targets list</a> still exists.</p>",
        "id": 264924488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639515566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Regarding the classical groups, what we have in mathlib currently is</p>\n<ul>\n<li>matrix and endomorphism GL</li>\n<li>matrix SL (we should correct your wiki which says it's missing) but not endomorphism SL</li>\n<li>matrix O and U but not endomorphism O and U (they will be unlocked soon by <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span>' work on the adjoint)</li>\n<li>neither matrix nor endomorphism SO, SU</li>\n</ul>\n<p>So the currently accessible targets are endomorphism SL and matrix SO, SU.  Do you agree?</p>",
        "id": 264924937,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639515769
    },
    {
        "content": "<p>Those new pages are great <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>!</p>",
        "id": 264924965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639515786
    },
    {
        "content": "<p>As explained in the wiki pages, some of the \"trivial targets\" are simply waiting for declaration names that already exist.</p>",
        "id": 264925003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639515809
    },
    {
        "content": "<p>And indeed some stuff already exist for classical groups. The satisfactory situation would be to have, for each case, the matrix version, the endomorphism version and a group isomorphism when a suitable basis is given.</p>",
        "id": 264925127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639515863
    },
    {
        "content": "<p>My point is that endomorphism O, U, SO and SU are not actually trivial targets.</p>",
        "id": 264925380,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639515994
    },
    {
        "content": "<p>What is non-trivial?</p>",
        "id": 264925503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516049
    },
    {
        "content": "<p>Defining the adjoint endomorphism, that's what <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span> is working on but it needs all the new work on conjugate-linear maps.</p>",
        "id": 264925572,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639516078
    },
    {
        "content": "<p>Is it worth having a dedicated zulip stream for the undergrad math list?</p>",
        "id": 264925575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639516079
    },
    {
        "content": "<p>Oh, I thought we already had adjoints!</p>",
        "id": 264925773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516147
    },
    {
        "content": "<p>Maybe not the undergrad maths list per say, but for short easy projects?</p>",
        "id": 264925805,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1639516167
    },
    {
        "content": "<p>I was tricked by the existence of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_self_adjoint\">docs#is_self_adjoint</a></p>",
        "id": 264925859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516201
    },
    {
        "content": "<p>We have the adjoint (=conjugate-transpose) for matrices, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.star_ring\">docs#matrix.star_ring</a>, but not yet for endomorphisms.</p>",
        "id": 264925960,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639516232
    },
    {
        "content": "<p>But there is a loophole, you can define self-adjoint whithout adjoint.</p>",
        "id": 264925977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516244
    },
    {
        "content": "<p>Note that continuity of convex functions is tackled by someone somewhere already, but I can't find it now... Maybe a branch?</p>",
        "id": 264926010,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1639516261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/264925575\">said</a>:</p>\n<blockquote>\n<p>Is it worth having a dedicated zulip stream for the undergrad math list?</p>\n</blockquote>\n<p>Maybe. We can also create topics in the maths or general stream.</p>",
        "id": 264926081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/264926010\">said</a>:</p>\n<blockquote>\n<p>Note that continuity of convex functions is tackled by someone somewhere already, but I can't find it now... Maybe a branch?</p>\n</blockquote>\n<p>By <span class=\"user-mention\" data-user-id=\"203577\">@Malo Jaffr√©</span> maybe?</p>",
        "id": 264926196,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639516345
    },
    {
        "content": "<p>Continuity of convex functions should be a nice exercise, especially since it's in the one-variable section.</p>",
        "id": 264926239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516371
    },
    {
        "content": "<p>Heather, feel free to edit the wiki page with details about the status of classical groups.</p>",
        "id": 264926528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516511
    },
    {
        "content": "<p>I just did, please check the diff and see if you agree.</p>",
        "id": 264926725,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639516631
    },
    {
        "content": "<p>Couple more points:  I don't think we can define and diagonalize \"normal endomorphisms\" until we have the adjoint.  So I'd like to remove that from \"trivial targets\" also (it's definitely on my to-do list once we have it).  OK?</p>",
        "id": 264926827,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639516687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/264926196\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/264926010\">said</a>:</p>\n<blockquote>\n<p>Note that continuity of convex functions is tackled by someone somewhere already, but I can't find it now... Maybe a branch?</p>\n</blockquote>\n<p>By <span class=\"user-mention silent\" data-user-id=\"203577\">Malo Jaffr√©</span> maybe?</p>\n</blockquote>\n<p>I think so, yeah</p>",
        "id": 264926839,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1639516699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/264926725\">said</a>:</p>\n<blockquote>\n<p>I just did, please check the diff and see if you agree.</p>\n</blockquote>\n<p>It's fine except you modified a section header, making it more difficult to locate the item on the undergrad todo page.</p>",
        "id": 264926934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639516764
    },
    {
        "content": "<blockquote>\n<p>simultaneous diagonalization of two real quadratic forms, with one positive-definite: This should very easily follow from what we already have.</p>\n</blockquote>\n<p>I think the difficulty here is in expressing \"two separate real quadratic forms\" -- this is related to the mess with our various definitions of <code>bilin_form</code>, <code>sesq_form</code>, <code>inner_product_space</code>, etc, which have been causing <span class=\"user-mention\" data-user-id=\"412682\">@Moritz</span> so many headaches.  I think it is only fair to call it a \"trivial target\" if you or another expert will write up a sketch in Lean for the proposed formulation.</p>",
        "id": 264927280,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639516938
    },
    {
        "content": "<blockquote>\n<p>piecewise <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> functions</p>\n</blockquote>\n<p>Wasn't there some subtlety in how to define these (so again, not a \"trivial target\" in the sense that a casual user could knock it off easily)?  I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> had an idea for how this should be done.</p>",
        "id": 264927561,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639517103
    },
    {
        "content": "<p>Feel free to move stuff from the first list to the second one (and add comments).</p>",
        "id": 264927932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639517291
    },
    {
        "content": "<p>Also:  In a sense, we have the classification of elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2, \\mathbb{R})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span>, since we have the classification of real-linear isometries of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.  Does this count?</p>",
        "id": 264928207,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639517430
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry_complex\">docs#linear_isometry_complex</a></p>",
        "id": 264928266,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639517455
    },
    {
        "content": "<p>It would be nicer to deduce from this a result that is explicitly about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 264928460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639517529
    },
    {
        "content": "<p>It would be nice, but I'm not sure about how to formulate it.  Do you want to say that a choice of inner product and of orientation on on a real 2d vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> together determine an almost-complex structure, and then say that an orientation-preserving linear isometry of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is a complex rotation for that almost-complex structure?  Or do you have something more co-ordinate based in mind?</p>",
        "id": 264928898,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639517735
    },
    {
        "content": "<p>Good question. I guess the simplest way to claim that item is a coordinate version.</p>",
        "id": 264929937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518090
    },
    {
        "content": "<p>I expect some form of that statement about orientation-preserving linear isometries corresponding to rotations in the complex numbers to come up as part of defining oriented angles. (We have quite a lot of API for isometries in the complex numbers and for <code>complex.arg</code> that it seems to make sense to reuse as part of defining oriented angles rather than duplicating, provided the resulting API for oriented angles is properly proved independent of choice of basis and can be used without caring about how complex numbers might have been used in its definition. So after <a href=\"https://github.com/leanprover-community/mathlib/pull/10737\">#10737</a> I'm thinking of showing that (in positive dimension) there exist a basis (and an orthonormal basis, in the inner product space case) corresponding to a given orientation, then proving whatever's needed about mapping along <code>basis.isometry_euclidean_of_orthonormal</code> and <code>complex.isometry_euclidean.symm</code> to set up oriented angles and justify the definition.)</p>",
        "id": 264933806,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1639519842
    },
    {
        "content": "<p>This seems like the principled way to do it.</p>",
        "id": 264934124,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639519911
    },
    {
        "content": "<p>About piecewise <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> functions. There are at least two useful notions here: an abstract property of being a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>-smooth function, and a way of defining piecewise functions from some data (intervals and formulas on these intervals).</p>",
        "id": 264945315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639525325
    },
    {
        "content": "<p>If we want to formalize approximation methods for ODEs (Euler, Runge‚ÄìKutta) as approximations to a solution on the whole interval (not a discrete set of pts), then it may be useful to have a way to define piecewise functions from some recursion formulas.</p>",
        "id": 264948287,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639527384
    },
    {
        "content": "<p>I suggest that if you make a PR that deals with item(s) on this list, we should label it with a <code>undergrad</code> label.</p>",
        "id": 264970181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639549404
    },
    {
        "content": "<p>I will try to PR a definition (+ basic API) of <code>matrix.rank</code> later today.</p>",
        "id": 264970310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639549569
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10826\">#10826</a></p>",
        "id": 265059150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639595265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/264926196\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/264926010\">said</a>:</p>\n<blockquote>\n<p>Note that continuity of convex functions is tackled by someone somewhere already, but I can't find it now... Maybe a branch?</p>\n</blockquote>\n<p>By <span class=\"user-mention silent\" data-user-id=\"203577\">Malo Jaffr√©</span> maybe?</p>\n</blockquote>\n<p>Yes, I will try to cleanup and PR the one-dimensional version next week</p>",
        "id": 265129690,
        "sender_full_name": "Malo Jaffr√©",
        "timestamp": 1639646918
    },
    {
        "content": "<p>I was away from home for two days. But rank of a matrix should now be done.</p>",
        "id": 265396618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639809120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> what is the status of matrix exponentials? Doesn't that follow from some abstract generic theory that is already done?</p>",
        "id": 265396693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639809212
    },
    {
        "content": "<p>It does but possibly we need some glue code. <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> is the right person to ask about this file.</p>",
        "id": 265408624,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639820170
    },
    {
        "content": "<p>I've started a thread about the cross product here: <a href=\"#narrow/stream/113488-general/topic/cross.20product\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/cross.20product</a></p>",
        "id": 265410464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639822613
    },
    {
        "content": "<p>Should we add definitions like these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">has_jump_discontinuity</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÉ</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_removable_discontinuity</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological</span><span class=\"bp\">-</span><span class=\"n\">space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÉ</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265437366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639855635
    },
    {
        "content": "<p>(I'm grading a 1st year calculus exam, my problem asks about the type of discontinuity of a function)</p>",
        "id": 265437417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639855696
    },
    {
        "content": "<p>I've started <a href=\"https://github.com/leanprover-community/mathlib/blob/YK-calculus-defs/archive/examples/calculus_defs.lean\">calculus-defs</a> in <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-calculus-defs\">branch#YK-calculus-defs</a>. I don't know whether we want to have it somewhere in <code>mathlib</code>.</p>",
        "id": 265557941,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640004558
    },
    {
        "content": "<p>\"I've got a ton of exams to mark and am in the middle of several projects, so I started another one because I don't want to mark the exams\" ;-)</p>",
        "id": 265561961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640006926
    },
    {
        "content": "<p>Sounds like experience, Kevin!</p>",
        "id": 265562020,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1640006960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/265396693\">said</a>:</p>\n<blockquote>\n<p>what is the status of matrix exponentials? Doesn't that follow from some abstract generic theory that is already done?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> what do you think about <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 265563614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640007708
    },
    {
        "content": "<p>The only missing thing is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_algebra\">docs#normed_algebra</a> instance for matrices. I could work on that but I don't know which norm we want on matrices. To me there are at least two sensible possibilities :</p>\n<ul>\n<li>the operator norm,  which we could get by pulling back along <code>linear_map.to_continuous_linear_map \\comp matrix.to_lin'</code></li>\n<li>the Hilbert-Schmidt norm, induced by the usual inner product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">‚ü®</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">‚ü©</mo><mo>:</mo><mo>=</mo><mrow><mi mathvariant=\"normal\">T</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><msup><mi>A</mi><mo>‚ä∫</mo></msup><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\langle A, B\\rangle := \\mathrm{Tr}(A^\\intercal B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">‚ü®</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">‚ü©</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Tr</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin amsrm mtight\">‚ä∫</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.dot_product\">docs#matrix.dot_product</a>)</li>\n</ul>",
        "id": 265575579,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1640013228
    },
    {
        "content": "<p>So maybe we don't make it an instance, but provide two <code>def</code>s?</p>",
        "id": 265575714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640013276
    },
    {
        "content": "<p>(Note that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.normed_space\">docs#matrix.normed_space</a> as a def, but this isn't an algebra norm)</p>",
        "id": 265575849,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1640013332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/265575714\">said</a>:</p>\n<blockquote>\n<p>So maybe we don't make it an instance, but provide two <code>def</code>s?</p>\n</blockquote>\n<p>That makes sense to me. And then I guess lemmas that are specifically about <em>matrix</em> exponential (there are none yet, but maybe they will come) should just have a <code>normed_algebra</code> assumption so you can use them with whatever norm you made a local instance of ?</p>",
        "id": 265577231,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1640013935
    },
    {
        "content": "<p>Don't we already have a norm on matrices?</p>",
        "id": 265577509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640014057
    },
    {
        "content": "<p><del>I thought that was PR'd a few weeks ago. Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.normed_group\">docs#matrix.normed_group</a>?</del> nevermind, that's mentioned above</p>",
        "id": 265577536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640014074
    },
    {
        "content": "<p>Can we have multiple <code>def</code>s that reuse the same <code>topological_space</code> (or even <code>uniform_space</code>) structure?</p>",
        "id": 265577858,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640014221
    },
    {
        "content": "<p>Then matrix exponent can be defined as <code>tsum</code> that uses <code>pi</code> topological space structure, and proofs can use (localized) <code>normed_group</code> + <code>complete_space</code> instances for proofs.</p>",
        "id": 265577958,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640014270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/265561961\">said</a>:</p>\n<blockquote>\n<p>\"I've got a ton of exams to mark and am in the middle of several projects, so I started another one because I don't want to mark the exams\" ;-)</p>\n</blockquote>\n<p>Exactly!</p>",
        "id": 265578014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640014308
    },
    {
        "content": "<p>Are there algebras where the tsum exponential approach works but the norm exponential approach doesn't, or vice versa?</p>",
        "id": 265578143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640014376
    },
    {
        "content": "<p>I was just discussing this with <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span>. I think it makes sense not to impose a global instance as Johan suggested. There are lots of norms on matrices. And for example, when the entries lie in a C^*-algebra, you can even get a C^*-norm, but it's not exactly a \"standard one\" unless you develop the theory of Hilbert C^*-modules.</p>",
        "id": 265578274,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640014439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> E.g., for matrices the norm approach \"doesn't work\" because we don't want to have a global instance.</p>",
        "id": 265580963,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640015670
    },
    {
        "content": "<p>I ask in the context of an exponential on the exterior and clifford algebras, where usually I see it used as \"well the Taylor expansion obviously converges for this <code>x</code> I care about\" without any real claim as to whether it is a total function</p>",
        "id": 265582505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640016264
    },
    {
        "content": "<p>I'm not following this discussion too closely but I think some basic numerical analysis could be nice undergrad topic. ODE solvers, polynomial approximation, numerical integration, root finding etc. Once mathlib gets ported to Lean 4 I could actually use these theorem to properly formalize numerical library I'm working on.</p>",
        "id": 265588518,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1640019235
    },
    {
        "content": "<p>Tomas, there is indeed some numerical analysis in the <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">full list</a> but I didn't put any of it in my short term targets because we currently don't have anything. So this is not part of what I would encourage people to work one, but everybody is free to work on anything.</p>",
        "id": 265589509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640019696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/265396693\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> what is the status of matrix exponentials? Doesn't that follow from some abstract generic theory that is already done?</p>\n</blockquote>\n<p>I've made a first pass of this in <a href=\"https://github.com/leanprover-community/mathlib/pull/13520\">#13520</a>, which has grown quite a dependency tree</p>",
        "id": 279423454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650381514
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/projects/16\">30 PRs later</a>, the branches of that tree have been pruned; it's ready for review!</p>",
        "id": 281332880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651772108
    },
    {
        "content": "<p>I've left <code>det (exp _ _ A) = exp _ _ (trace A)</code> as an exercise for some poor undergrad to pick up</p>",
        "id": 281333076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651772211
    },
    {
        "content": "<p>By the way, I can kind of understand making the field argument of <code>exp</code> explicit (even though it seems unnecessary with an adjusted definition) but why is the algebra argument explicit? Isn't it just the type of <code>A</code>?</p>",
        "id": 281339490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651775189
    },
    {
        "content": "<p>Yes, I agree we should remove that argument</p>",
        "id": 281339691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651775285
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/pull/13986\">#13986</a></p>",
        "id": 281410585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651826935
    },
    {
        "content": "<p>What exactly is meant by \"endomorphism\" in the \"endomorphism exponential\" entry? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End\">docs#module.End</a> (which has no norm yet)? <code>V ‚ÜíL[K] V</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map\">docs#continuous_linear_map</a>)?</p>",
        "id": 281645298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652079027
    },
    {
        "content": "<p>The latter I would say</p>",
        "id": 281646645,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1652080305
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets#exponential\">https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets#exponential</a> suggests something about finite dimensions, making me suspect the former</p>",
        "id": 281646897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652080483
    },
    {
        "content": "<p>Which would essentially just be a case of inducing a norm via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.continuous_of_finite_dimensional\">docs#linear_map.continuous_of_finite_dimensional</a></p>",
        "id": 281647010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652080571
    },
    {
        "content": "<p>Oh yeah maybe</p>",
        "id": 281647833,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1652081077
    },
    {
        "content": "<p>In the finite dimensional case, shouldn't it already just work, since now we don't need an actual norm, but only the right topology?</p>",
        "id": 281700785,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1652109882
    },
    {
        "content": "<p>(Or do we not have a topology either?)</p>",
        "id": 281700874,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1652109910
    },
    {
        "content": "<p>No topology either</p>",
        "id": 281707221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652112509
    },
    {
        "content": "<p>But even if we had the topology, we wouldn't be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_add\">docs#exp_add</a> without the norm too</p>",
        "id": 281707311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652112545
    },
    {
        "content": "<p>We also don't have the topology on continuous maps when only a topology is available on the (co)domains</p>",
        "id": 281707504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652112627
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> who had some thoughts on discord about that)</p>",
        "id": 281707797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652112753
    },
    {
        "content": "<p>In that case I think we should just declare victory on that undergrad math list bullet point, because it's very likely to just stay that way.</p>",
        "id": 281707947,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1652112838
    },
    {
        "content": "<p>I'm not sure I agree; inducing the operator norm in the way I describe above sounds fairly straightforward</p>",
        "id": 281708129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652112903
    },
    {
        "content": "<p>So I think it's place on the \"trivial targets\" list is justified</p>",
        "id": 281708184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652112926
    },
    {
        "content": "<p>A warmup task for the position in Orsay perhaps ;)</p>",
        "id": 281708329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652112974
    },
    {
        "content": "<p>But do we want to do this? It makes sense to say that we simply don't put a default topology on <code>linear_map</code> because there are too many choices, in which case it's very reasonable to say that \"endomorphism exponential\" refers to continuous linear maps.</p>",
        "id": 281708548,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1652113080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/281707797\">said</a>:</p>\n<blockquote>\n<p>(cc <span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> who had some thoughts on discord about that)</p>\n</blockquote>\n<p>I'll copy what I wrote on discord here (the question is how to generalize the topology on the space of bounded linear operators between normed spaces to TVS. No promise what I've written is at all correct):</p>\n<p>Since the space of operators is also a topological vector space it suffices to give a basis of open sets at 0. I think since this basis for the topology induced by the norm is given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>œµ</mi></msub><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>T</mi><mo stretchy=\"false\">(</mo><msub><mi>B</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>‚â§</mo><mi>œµ</mi><msub><mi>B</mi><mn>1</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">B_\\epsilon(0) = \\{T(B_1) \\le \\epsilon B_1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">œµ</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">œµ</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> we can do the similar for the not norm case. So since bounded is defined in general for all TVS (Yael pointed out this is the von Nuemann boundedness which we have), maybe a compatible basis at 0 is all sets of the form  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo><mo>‚â§</mo><mi>V</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{T(U) \\le V\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">}</span></span></span></span> for bounded open neighborhood <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo separator=\"true\">,</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">U, V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> of 0 in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> resp.</p>",
        "id": 281708724,
        "sender_full_name": "Jason KY.",
        "timestamp": 1652113147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/281708548\">said</a>:</p>\n<blockquote>\n<p>But do we want to do this? It makes sense to say that we simply don't put a default topology on <code>linear_map</code> because there are too many choices, in which case it's very reasonable to say that \"endomorphism exponential\" refers to continuous linear maps.</p>\n</blockquote>\n<p>Are there more choices for the topology on <code>linear_map</code> than there are for <code>continuous_linear_map</code>?</p>",
        "id": 281709415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652113385
    },
    {
        "content": "<p>Jason, I'm going to extract that post and my comments to a new thread since I've probably just confused things here - but thanks for the paste (edit; done)</p>",
        "id": 281709532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652113435
    },
    {
        "content": "<p>In the infinite-dimensional case there's a whole bunch of them; for <code>continuous_linear_map</code> we've picked one.</p>",
        "id": 281709672,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1652113479
    },
    {
        "content": "<p>So I guess what you would want to do is put the operator norm on it in the finite-dimensional case, and have no topology otherwise?</p>",
        "id": 281709744,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1652113528
    },
    {
        "content": "<p>I see, yes that would make sense.</p>",
        "id": 281709931,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1652113593
    },
    {
        "content": "<p>We already have a norm only for the finite case for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.normed_group\">docs#pi.normed_group</a>, so I think \"no instance for infinite things\" is not too weird a situation</p>",
        "id": 281710054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652113663
    },
    {
        "content": "<p>As an undergrad, I once started a course on functional analysis given by Jens Franke (he's famous for work in number theory, but started his career as a functional analyst). In the first lecture, he introduced the <em>seven</em> topologies on the dual space...</p>\n<p>(Shameless advertisement: In condensed math, the space of linear maps between two condensed vector spaces is canonically itself a condensed vector space.)</p>",
        "id": 281719420,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1652117784
    }
]