[
    {
        "content": "<p>I've been thinking about my next big typeclass-based refactor for a bit, and since I don't have much time at the moment, I'll write it out here for anyone interested in picking it up:</p>\n<p>I have been using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> instances with a lot of success to denote that there is a canonical map (inclusion) between two rings. But there are some drawbacks:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a> gives diamonds with algebra instances such as <code>algebra R S → algebra R[X] S[X]</code> or <code>char_zero K → algebra ℚ K</code></li>\n<li>We can use the forgetful inheritance pattern to make the <code>smul</code> field work right, but the <code>to_fun</code> field causes diamonds</li>\n<li>Some of the \"transitivity\" instances like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.algebra'\">docs#subalgebra.algebra'</a> are hard to infer so we need to specialize them like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.algebra\">docs#subalgebra.algebra</a></li>\n<li>The definition works nicely if the map comes out of a <code>comm_semiring</code>, but not for <code>non_unital_non_assoc_semiring</code>s, let alone for denoting monoid homomorphisms.</li>\n</ul>\n<p>There have been some proposals before for defining <code>algebra_map R S x</code> to just be <code>(1 : S) \\bu (x : R)</code>, but that breaks useful defeqs throughout mathlib. So I think we should not drop the canonical map part but instead split that off into its own class.</p>\n<p>Luckily, we have classes for expressing the existence of a canonical map: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_t\">docs#has_coe_t</a> and/or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lift_t\">docs#has_lift_t</a>! So the plan is to make subclasses of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_t\">docs#has_coe_t</a> which state that the map <code>↑</code> is a ring/monoid/etc hom. Now starts a more speculative part:</p>\n<p>I think an unbundled subclass will work best, of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_ring_hom_lift</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lift_t</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe_add</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"c1\">-- etc.</span>\n</code></pre></div>\n<p>This means we don't have to do tricks like declare <code>has_ring_hom_base</code> and <code>has_ring_hom_trans</code> classes to make transitivity work. Hopefully we can just declare one transitivity instance on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_trans\">docs#lift_trans</a> without the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.algebra'\">docs#subalgebra.algebra'</a> style pattern.</p>\n<p>An immediate drawback I see is that we can't use <code>is_scalar_tower</code> to assert that a square of canonical maps commutes. We'll probably have to make a new class that does this instead.</p>\n<p>Another drawback is that this will break like thousands of lines of mathlib, so unless we find someone dedicated enough to keep such a humongous PR up to date we should probably design a backwards-compatible interface.</p>",
        "id": 280858081,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651488555
    },
    {
        "content": "<p>Note that they couldn't use <code>is_scalar_tower</code> to do products of semilinear maps either so just made another typeclass.</p>",
        "id": 280858254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651488677
    },
    {
        "content": "<p>Do we have the <code>algebra R S → algebra R[X] S[X]</code> instance? I think that instance is just bad because it makes nasty things happen for <code>algebra R R[X] → algebra R[X] R[X][X]</code> that acts on the wrong Xs compared to the usual polynomial algebra instance</p>",
        "id": 280859579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651489604
    },
    {
        "content": "<p>Indeed we don't for those reasons.</p>",
        "id": 280862128,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651491401
    },
    {
        "content": "<p>Just to be clear, are you proposing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> be changed to the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">algebra</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lift_t</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_ring_hom_lift</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"c1\">-- as before, but with coe instead of `algebra_map`</span>\n<span class=\"o\">(</span><span class=\"n\">smul_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- as before, but with coe instead of `algebra_map`</span>\n</code></pre></div>\n<p>I would be in favor of that as a first step (and eliminating <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.C\">docs#polynomial.C</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.scalar\">docs#matrix.scalar</a> at the same time)</p>",
        "id": 281661565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652090309
    },
    {
        "content": "<p>(although I would be tempted to extend <code>has_lift_t</code> to prevent argument explosion)</p>",
        "id": 281662003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652090530
    },
    {
        "content": "<p>I was thinking more like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">algebra</span> <span class=\"o\">[</span><span class=\"n\">non_unital_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span>\n\n<span class=\"c1\">-- Probably can't be an instance since we want to supply a `smul` that keeps diagrams commuting.</span>\n<span class=\"kd\">def</span> <span class=\"n\">has_ring_hom_lift.to_algebra</span> <span class=\"o\">[</span><span class=\"n\">has_ring_hom_lift</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">smul_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 281662148,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652090643
    },
    {
        "content": "<p>I feel like the <code>smul_def</code> lemma that links the smul and lift structure needs to be in an instance somewhere</p>",
        "id": 281662267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652090738
    },
    {
        "content": "<p>Since the existence of <code>algebra_map</code> is based on the fact that the rings are unital, we can generalize <code>algebra</code> to the non-unital case only if we don't depend on the <code>algebra_map</code>.</p>",
        "id": 281662270,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652090739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.22has.20canonical.20morphism.22.20class/near/281662267\">said</a>:</p>\n<blockquote>\n<p>I feel like the <code>smul_def</code> lemma that links the smul and lift structure needs to be in an instance somewhere</p>\n</blockquote>\n<p>That's true, we do switch a lot between <code>smul</code> and <code>algebra_map</code> at the moment.</p>",
        "id": 281662378,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652090791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/.22has.20canonical.20morphism.22.20class/near/281662270\">said</a>:</p>\n<blockquote>\n<p>Since the existence of <code>algebra_map</code> is based on the fact that the rings are unital, we can generalize <code>algebra</code> to the non-unital case only if we don't depend on the <code>algebra_map</code>.</p>\n</blockquote>\n<p>My mindset is still \"<code>algebra</code> exists specifically to provide <code>algebra_map</code>\". If we're really annoyed about <code>module R A, smul_comm_class R A A, is_scalar_tower R A A</code> being verbose, then we could introduce a new <code>n_algebra</code> typeclass to act as a shorthand, at the cost of adding about <del>75</del> 96 new instances (one for each <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_comm_class\">docs#smul_comm_class</a> we currently have)</p>",
        "id": 281662443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652090833
    },
    {
        "content": "<p>Whereas canonical ring morphisms let us make a generalization we currently don't have at all</p>",
        "id": 281662498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652090875
    },
    {
        "content": "<p>Not having to mess around between C and algebra_map in polynomials feels like a big win to me</p>",
        "id": 281662561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652090896
    },
    {
        "content": "<p>Mhm, it should be fine to defer the decision on how much to change <code>algebra</code> until canonical ring homs are more stable.</p>",
        "id": 281662863,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652091122
    }
]