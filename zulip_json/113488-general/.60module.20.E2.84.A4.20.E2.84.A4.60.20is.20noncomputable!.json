[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">integers_are_hard</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c1\">-- definition 'integers_are_hard' is noncomputable, it depends on 'int.normed_comm_ring'</span>\n</code></pre></div>",
        "id": 258163252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634634397
    },
    {
        "content": "<p>Should <code>int.comm_ring</code> get a higher priority then <code>int.normed_comm_ring</code>?</p>",
        "id": 258163544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634634560
    },
    {
        "content": "<p>This has the same problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kd\">instance</span> <span class=\"n\">still_hard</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 258163666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634634622
    },
    {
        "content": "<p>I guess we just need to add <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.add_comm_group\">docs#int.add_comm_group</a> rather than having it be found transitively</p>",
        "id": 258163724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634634665
    },
    {
        "content": "<p>Or lean needs to lean to not look for noncomputable instances before trying the computable ones</p>",
        "id": 258163746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634634679
    },
    {
        "content": "<p>I guess that's a clean option, although I don't know if that will blow up running times.</p>",
        "id": 258164073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634634859
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9803\">#9803</a></p>",
        "id": 258164589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634635167
    },
    {
        "content": "<p>Is the <code>coe</code> from <code>int</code> to <code>real</code> computable? Maybe a better definition for <code>norm n</code> would be to take the absolute value in <code>int</code> and then coerce?</p>",
        "id": 258168593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634637349
    },
    {
        "content": "<p>I guess that doesn't really help with anything and might be more awkward for proofs</p>",
        "id": 258168684,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634637384
    },
    {
        "content": "<p>I think that would be a good idea, and shouldn't impact proofs much; just that <code>dsimp</code> might no longer apply <code>int.norm_cast_real</code></p>",
        "id": 258169019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634637583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, I had a go at doing that, but found I needed <a href=\"https://github.com/leanprover-community/mathlib/issues/9806\">#9806</a> first</p>",
        "id": 258181815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634644672
    },
    {
        "content": "<p>Even <code>0 : ennreal</code> is noncomputable</p>",
        "id": 258181828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634644681
    },
    {
        "content": "<p>Yeah I feel like this approach is maybe too fiddly, which is why I suggested using <code>erased</code> on the other topic.</p>",
        "id": 258182977,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634645271
    },
    {
        "content": "<p>The rest of my progress was <a href=\"https://github.com/leanprover-community/mathlib/issues/9946\">#9946</a>. I suspect changing the definition of <code>norm</code> on <code>int</code> to be computable isn't worth losing the definitional equality with the coercion inside the norm, so I didn't quite go that far.</p>",
        "id": 258902027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635114815
    }
]