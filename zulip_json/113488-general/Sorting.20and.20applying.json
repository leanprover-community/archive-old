[
    {
        "content": "<p>I have <code>n</code> naturals <code>a₁, ..., aₙ</code>(not necessarily distinct) and I want to define <code>b₁/1 + ... + bₙ/n</code> where the <code>b</code>s are the <code>a</code>s in ascending order. What's the best way to do that? I don't have strong restrictions on the representation of <code>a₁, ..., aₙ</code>, so it can be <code>list ℕ</code>, <code>vector ℕ n</code>, <code>fin n → ℕ</code>...</p>",
        "id": 244068406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624802444
    },
    {
        "content": "<p>I'm pretty sure there's something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sort\">docs#list.sort</a></p>",
        "id": 244068498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624802595
    },
    {
        "content": "<p>Dammit the community website search doesn't work on my phone</p>",
        "id": 244068562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624802664
    },
    {
        "content": "<p>I think it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sorted\">docs#list.sorted</a> ?</p>",
        "id": 244068722,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624802930
    },
    {
        "content": "<p>Oh no that's the prop. I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.merge_sort\">docs#list.merge_sort</a></p>",
        "id": 244068737,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624802990
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.quick_sort\">docs#list.quick_sort</a> ?</p>",
        "id": 244068783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624803025
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.insertion_sort\">docs#list.insertion_sort</a></p>",
        "id": 244068795,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624803065
    },
    {
        "content": "<p>They're dupes</p>",
        "id": 244068859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624803187
    },
    {
        "content": "<p>Haven't you heard of functional extensionality? ;-)</p>",
        "id": 244068866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624803207
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sort\">docs#finset.sort</a></p>",
        "id": 244069235,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624803858
    },
    {
        "content": "<p>or, since you have not-necessarily distinct nats, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.sort\">docs#multiset.sort</a></p>",
        "id": 244069245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624803891
    },
    {
        "content": "<p>Yeah, or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.merge_sort\">docs#list.merge_sort</a>, but how do I then divide by a different number everytime?</p>",
        "id": 244071132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624806935
    },
    {
        "content": "<p>after you sort, <code>list.zip_with (/) (sorted_list) ((list.range _).map _)</code></p>",
        "id": 244071259,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624807121
    },
    {
        "content": "<p>Is <code>list.zip_with</code> the same as <code>list.map₂</code>?</p>",
        "id": 244071582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624807573
    },
    {
        "content": "<p>Here's what I tried.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">energy</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.sum</span> <span class=\"o\">(</span><span class=\"n\">list.map₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.merge_sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">pos.1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but I wonder whether it will unfold nicely.</p>",
        "id": 244071701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624807720
    },
    {
        "content": "<p>And also, how can I define a constant vector?</p>",
        "id": 244072112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624808315
    }
]