[
    {
        "content": "<p>Do you want such an abomination in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_smul_smul_comm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">β</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_comm</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267639858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641932632
    },
    {
        "content": "<p>Several times now, I've run into things sort of like this (e.g., <code>(a+b)+(c+d)=(a+c)+(b+d)</code>), and wished that mathlib had the lemma.</p>",
        "id": 267640218,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1641932790
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_add_add_comm\">docs#add_add_add_comm</a> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> (I think I added that one?)</p>",
        "id": 267640266,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641932821
    },
    {
        "content": "<p>Ah no, I don't remember which one I added then</p>",
        "id": 267641011,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641933197
    },
    {
        "content": "<p>It's time for a <code>smaug</code> tactic, which is like <code>ring</code>, but for <code>smul</code>. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 267641822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641933654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/smul_smul_smul_comm/near/267641822\">said</a>:</p>\n<blockquote>\n<p>It's time for a <code>smaug</code> tactic, which is like <code>ring</code>, but for <code>smul</code>. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n</blockquote>\n<p>Perhaps <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> might want to write this <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 267641950,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641933723
    },
    {
        "content": "<p>Hah, there's a blast from the past! (Bhavik and I interacted during the National Cipher Challenge a decade ago, where I had the username Smaug.)</p>",
        "id": 267643010,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1641934271
    },
    {
        "content": "<p>You still have on github, don't you?</p>",
        "id": 267643037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641934289
    },
    {
        "content": "<p>Oh I do - I forgot its vestiges were still with me, so in fact no backstory is required</p>",
        "id": 267643073,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1641934311
    },
    {
        "content": "<p>I think we should certainly have this lemma where applicable. If I added it, it will probably have the name <code>add_comm_four</code> or something like it</p>",
        "id": 267814146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642039009
    }
]