[
    {
        "content": "<p>I want to define a prime (order) ideal as an ideal whose complement is an order filter.<br>\nI thought of two ways to do this:</p>\n<ol>\n<li>Defining a predicate on <code>set P</code> called <code>is_pfilter</code>, that just says it is upward directed etc.. This will also mean I would have to add API to it, which might lead to code duplication.</li>\n<li>Saying that there exists a <code>pfilter P</code> whose carrier is <code>I\\^c</code>. I believe this would make the definition pretty unwieldy, and again, a lot more API would be have to be added.</li>\n</ol>\n<p>Is there a \"canonical\" way of doing this?</p>",
        "id": 230180493,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615660384
    },
    {
        "content": "<p>We do have some definitions in mathlib with both <code>foo</code> and <code>is_foo</code> versions (e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/field\">docs#field</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_field\">docs#is_field</a>), but I'm not too familiar with the design reasoning there.</p>",
        "id": 230181288,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615661265
    },
    {
        "content": "<p>An order ideal is prime if its complement is an order filter, and vice versa. Possibly the right notion is a prime pair, consisting of an ideal and a filter which partition the underlying poset? It really is the same data to specify a prime ideal or a prime filter</p>",
        "id": 230182315,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615662328
    },
    {
        "content": "<p>Interesting! Would we want to restrict this to \"proper\" dual pairs (where neither set in the partition is allowed to be empty)?</p>",
        "id": 230182869,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615662857
    },
    {
        "content": "<p>Maybe something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">prime_pair</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">I</span>        <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">F</span>        <span class=\"o\">:</span> <span class=\"n\">pfilter</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cover</span>    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You probably can't have coercions to <code>ideal P</code> and <code>pfilter P</code> though, since they both coerce to <code>set P</code> already.</p>",
        "id": 230182994,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663000
    },
    {
        "content": "<p>I think ideals and filters are already nonempty? So they would be proper by construction</p>",
        "id": 230183010,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663036
    },
    {
        "content": "<p>A possibly useful fact: if you drop the <code>cover</code> condition, and consider disjoint pairs consisting of an ideal and a filter, you basically have the right setup to use Zorn's lemma to prove an existence result</p>",
        "id": 230183162,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663209
    },
    {
        "content": "<p>because in a distributive lattice, any element not covered by the ideal and the filter can be joined to the ideal or the filter and maintain disjointness</p>",
        "id": 230183306,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663345
    },
    {
        "content": "<p>Cool! I think I would still want a <code>is_prime</code> predicate, right?</p>",
        "id": 230183355,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615663429
    },
    {
        "content": "<p>Yes, you probably want <code>ideal.is_prime</code> and <code>pfilter.is_prime</code></p>",
        "id": 230183400,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663453
    },
    {
        "content": "<p>How would that be defined using prime_pair?</p>",
        "id": 230183432,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615663491
    },
    {
        "content": "<p>Hmm, existence of a prime_pair with a specified <code>I</code> or <code>F</code> might be messy, unless we make them parameters of the structure rather than fields</p>",
        "id": 230183538,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663596
    },
    {
        "content": "<p>I thought about it a bit, and I think it is best to define an <code>is_ideal</code> predicate. It doesn't turn out too messy and it fits the mathematician's intuition on an ideal.</p>",
        "id": 230183572,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615663669
    },
    {
        "content": "<p>Possibly your other idea is better: if you have <code>is_ideal</code> and <code>is_pfilter</code> as predicates, then apply them to the underlying set and its complement</p>",
        "id": 230183575,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663678
    },
    {
        "content": "<p>I suspect you can also define something like <code>ideal_of_is_ideal</code> which takes a <code>set P</code>, a proof of <code>is_ideal</code>, and packages it</p>",
        "id": 230183641,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615663731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252278\">Mathieu Guay-Paquet</span> <a href=\"#narrow/stream/113488-general/topic/.22Right.22.20way.20to.20define.20a.20prime.20order.20ideal/near/230183641\">said</a>:</p>\n<blockquote>\n<p>I suspect you can also define something like <code>ideal_of_is_ideal</code> which takes a <code>set P</code>, a proof of <code>is_ideal</code>, and packages it</p>\n</blockquote>\n<p>Yeah, this is what they do in the <code>is_field</code>predicate. I think I'll go for it!</p>",
        "id": 230183720,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615663819
    },
    {
        "content": "<p>I'll define the prime pair structure too as it looks very useful</p>",
        "id": 230183753,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615663857
    },
    {
        "content": "<p>Thanks a lot, Mathieu and Bryan!</p>",
        "id": 230183768,
        "sender_full_name": "Noam Atar",
        "timestamp": 1615663872
    }
]