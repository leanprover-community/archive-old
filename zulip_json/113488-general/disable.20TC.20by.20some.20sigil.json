[
    {
        "content": "<p>I know that Lean 4 is around the corner, so hacking on Lean 3 is of limited use. But I'm wondering, how hard would it be to add the following feature:<br>\nIf <code>foobar</code> is some name, then <code>@foobar</code> makes all arguments explicit, but it still runs TC on the typeclass arguments.<br>\nCan we have something like <code>@!foobar</code> to disable TC (roughly by replacing all the TC arguments with <code>(id _)</code>)?<br>\nThis would be extremely useful when TC is for some reason unhelpful and you want type inference to do the job instead.</p>",
        "id": 234624214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618468684
    },
    {
        "content": "<p>I'm mainly wondering: is this a &lt; 20-line patch to Lean 3. Or more like a 2500-line patch?</p>",
        "id": 234624266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618468709
    },
    {
        "content": "<p>It's about a 100-line change, but spread over several modules.  You need to add the <code>@!</code> token, you need to add macro annotation to store it in the pre-expression, and finally you need to add support to the elaborator.  I would start by searching for <code>@@</code> and using the copy-and-paste development methodology.</p>",
        "id": 234631882,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618472777
    },
    {
        "content": "<p>But why can't you just use <code>id _</code>?</p>",
        "id": 234631905,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618472785
    },
    {
        "content": "<p>Because then I need to figure out whether it's underscore 7 and 12 or 6 and 11</p>",
        "id": 234632038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618472861
    },
    {
        "content": "<p>I've always found that to be the easy part (just move over the underscores and check which one is a type class).  The part that I dread is figuring out whether you need 12 or 13 underscores and if they come before or after the explicit arguments..</p>",
        "id": 234632241,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618472985
    },
    {
        "content": "<p>Right, and it it's all just underscores, then <code>rw [@!foobar]</code> is a lot easier and faster to write.</p>",
        "id": 234632387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618473055
    },
    {
        "content": "<p>Because then you can omit 13 underscores to begin with</p>",
        "id": 234632409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618473067
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/breen_deligne/suitable.lean#L699-L715\">https://github.com/leanprover-community/lean-liquid/blob/master/src/breen_deligne/suitable.lean#L699-L715</a><br>\nIt's more like 7 or 8 underscores, but you get the point.</p>",
        "id": 234632743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618473249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/disable.20TC.20by.20some.20sigil/near/234632387\">said</a>:</p>\n<blockquote>\n<p>Right, and it it's all just underscores, then <code>rw [@!foobar]</code> is a lot easier and faster to write.</p>\n</blockquote>\n<p>Hmm, this doesn't work because <code>@foobar</code> and <code>@!foobar</code> elaborate to the same expression.  (The difference only kicks in for <code>@foobar _ _ _ _ _ _ _</code> and <code>@!foobar _ _ _ _ _ _ _</code>.)</p>",
        "id": 234635525,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618474646
    },
    {
        "content": "<p>Aha, so it would be a 2500-line patch to the elaborator?</p>",
        "id": 234635741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618474747
    },
    {
        "content": "<p>It's more a question of \"I don't know what you want it to do\".</p>",
        "id": 234636338,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618475010
    },
    {
        "content": "<p>Well, I guess the elaborator could notice \"hey, I see <code>@!</code>, let's insert <code>(id _)</code> for all TC arguments\"</p>",
        "id": 234636968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618475309
    },
    {
        "content": "<p>Can you be more concrete?  What should <code>#check @!add_comm</code> output?</p>",
        "id": 234637087,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618475401
    },
    {
        "content": "<p>I believe in Lean 2 there was a sigil which turned all arguments implicit.  Maybe that's what you're after (with disabling TC inference).</p>",
        "id": 234637267,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618475486
    },
    {
        "content": "<p>Aha, I see what you mean. Does the following make sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">add_comm</span>\n<span class=\"c1\">-- add_comm : ∀ {G : Type u_2} [_inst_1 : add_comm_semigroup G] (a b : G), a + b = b + a</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@!</span><span class=\"n\">add_comm</span>\n<span class=\"c1\">-- add_comm : ∀ {G : Type u_2} {_inst_1 : add_comm_semigroup G} (a b : G), a + b = b + a</span>\n</code></pre></div>",
        "id": 234637326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618475524
    },
    {
        "content": "<p>That's hard.  It would have to return something like <code>id (∀ {G : Type u_2} {_inst_1 : add_comm_semigroup G} (a b : G), a+b=b+a) @add_comm</code></p>",
        "id": 234637454,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618475590
    },
    {
        "content": "<p>Hmm, I see.</p>",
        "id": 234637802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618475758
    },
    {
        "content": "<p>Would this be easier with a tactic, <code>by no_tc @lemma_name</code>?</p>",
        "id": 234641025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618477515
    },
    {
        "content": "<p>I just hacked a tactic like this together on the <code>notc</code> branch: <a href=\"https://github.com/leanprover-community/mathlib/blob/notc/src/tactic/no_typeclasses.lean\">https://github.com/leanprover-community/mathlib/blob/notc/src/tactic/no_typeclasses.lean</a></p>\n<p>Johan, would the test case at the bottom of that file work for you?</p>",
        "id": 234655525,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618484827
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 234981086,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618658061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> wow, I somehow missed your previous message. Thanks for the ping!</p>",
        "id": 234981116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618658106
    },
    {
        "content": "<p>Let me look at that file</p>",
        "id": 234981130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618658118
    },
    {
        "content": "<p>No worries, I figured. :)</p>",
        "id": 234981141,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618658129
    },
    {
        "content": "<p>Can I now <code>rw [by no_typeclasses @test]</code>?</p>",
        "id": 234981207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618658185
    },
    {
        "content": "<p>I guess that would just work, right?</p>",
        "id": 234981219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618658195
    },
    {
        "content": "<p>(Assuming <code>test</code> is a bit more interesting)</p>",
        "id": 234981235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618658219
    },
    {
        "content": "<p>I guess this could be combined with the machinery in <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/hacks_and_tricks/by_exactI_hack.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/hacks_and_tricks/by_exactI_hack.lean</a> to turn it into a sigil.</p>",
        "id": 234981337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618658340
    },
    {
        "content": "<p>It seems like the <code>rw</code> works. You get subgoals for <code>α</code>, <code>testclass α</code> and <code>a : α</code> if type inference doesn't figure them out.</p>",
        "id": 234981465,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618658458
    },
    {
        "content": "<p>I can try to make this a <code>user_notation</code> as well (but probably not today).</p>",
        "id": 234981541,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618658532
    }
]