[
    {
        "content": "<p>Why isn't <code>int.induction_on</code> tagged with eliminator?</p>",
        "id": 125301381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524137653
    },
    {
        "content": "<p>it is now</p>",
        "id": 125301398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524137723
    },
    {
        "content": "<p>lol</p>",
        "id": 125301401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524137730
    },
    {
        "content": "<p>I found this a while back and forgot to bring it up: <code>int.induction_on</code> (in <code>data.int.basic</code>) has overtly restrictive hypotheses -- it says <br>\n<code>∀ {p : ℤ → Prop} (i : ℤ), p 0 → (∀ i, p i → p (i + 1)) → (∀ i, p i → p (i - 1)) → p i</code> while <br>\n<code>∀ {p : ℤ → Sort} (i : ℤ), p 0 → (∀ i ≥ 0, p i → p (i + 1)) → (∀ i ≤ 0, p i → p (i - 1)) → p i</code> is sufficient, which can be proven quite easily:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H0</span> <span class=\"n\">Hs</span> <span class=\"n\">Hp</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">z</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">H0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Hs</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">of_nat_ge_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_coe&#39;</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hp</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">H0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_coe&#39;</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">neg_nonpos_of_nonneg</span> <span class=\"err\">$</span> <span class=\"n\">of_nat_ge_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">int</span>\n</pre></div>\n\n\n<p>I guess I should PR this, but there are probably a hundred places where the old theorem is used. Should I make this <code>induction_on'</code> a separate theorem and prove the existing <code>induction_on</code> as a special case?</p>",
        "id": 162212452,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554099587
    },
    {
        "content": "<p>I've wished for your version a couple times</p>",
        "id": 162212579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554099758
    },
    {
        "content": "<p>Never got round to PRing it</p>",
        "id": 162212581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554099776
    },
    {
        "content": "<p>BTW <code>Sort</code> is the same as <code>Prop</code>. I think you mean <code>Sort*</code></p>",
        "id": 162212592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554099787
    },
    {
        "content": "<p>I very much doubt the old version is used in a hundred places. Probably 2 or 3</p>",
        "id": 162212608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554099836
    },
    {
        "content": "<p>There is also the version where you assume <code>\\for i, i &gt; 0 → (p i → p -i)</code></p>",
        "id": 162212675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554099928
    },
    {
        "content": "<p>Hmm, that isn't the optimal form, I guess</p>",
        "id": 162212767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554100081
    },
    {
        "content": "<p>By the way, should I use Pi's instead of foralls? I.e.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bidir_rec_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H0</span> <span class=\"n\">Hs</span> <span class=\"n\">Hp</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">z</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">H0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Hs</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">of_nat_ge_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_coe&#39;</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hp</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">H0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_coe&#39;</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">neg_nonpos_of_nonneg</span> <span class=\"err\">$</span> <span class=\"n\">of_nat_ge_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">int</span>\n</pre></div>\n\n\n<p>Because this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">bidir_rec_on</span> <span class=\"n\">z</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">fk</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">fk</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">fk</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">fk</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">induction_on&#39;</span> <span class=\"n\">z</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">fk</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">fk</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">fk</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">fk</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Gives<br>\n<code>failed to generate bytecode for 'test' code generation failed, VM does not have code for 'int.induction_on''</code></p>",
        "id": 162215119,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554103211
    },
    {
        "content": "<p>Is that because of using <code>Sort</code> instead of <code>Sort*</code>?</p>",
        "id": 162215395,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554103533
    },
    {
        "content": "<p>No, I've changed both to <code>Sort*</code></p>",
        "id": 162215453,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554103568
    },
    {
        "content": "<p>did you use <code>def</code> instead of <code>theorem</code>?</p>",
        "id": 162215471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554103591
    },
    {
        "content": "<p>Ah yes.</p>",
        "id": 162215478,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554103606
    },
    {
        "content": "<p>pi vs forall is purely cosmetic</p>",
        "id": 162215482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554103608
    },
    {
        "content": "<p>So I guess this should always be a <code>def</code>?</p>",
        "id": 162215505,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554103630
    },
    {
        "content": "<p>(so it can generate both proofs and functions)</p>",
        "id": 162215511,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554103641
    },
    {
        "content": "<p>the result lives in <code>Sort*</code>, so it could be data</p>",
        "id": 162215513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554103647
    },
    {
        "content": "<p>?? But making it a <code>theorem</code> has the bytecode generation error. Even with <code>Sort*</code>.</p>",
        "id": 162215704,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554103852
    },
    {
        "content": "<p>You can run <code>reduce</code> on it, but not <code>eval</code>.</p>",
        "id": 162215751,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554103909
    },
    {
        "content": "<p>Lean does not keep the bytecode for theorems.</p>",
        "id": 162215900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554104066
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 162216986,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554105392
    },
    {
        "content": "<p>In your <code>induction'</code>, zero could be replaced by any number.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 162219069,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1554107712
    },
    {
        "content": "<p>Yep,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bidir_rec_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H0</span> <span class=\"n\">Hs</span> <span class=\"n\">Hp</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_add_cancel</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">of_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_nat_succ</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Hs</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_add_of_nonneg_left</span> <span class=\"o\">(</span><span class=\"n\">of_nat_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_eq</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">of_nat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">of_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">neg_add_eq_sub</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">H0</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_succ_of_nat_coe&#39;</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">neg_succ_of_nat_coe</span><span class=\"o\">,</span> <span class=\"n\">sub_add_eq_add_sub</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">add_lt_of_neg_of_le</span> <span class=\"o\">(</span><span class=\"n\">neg_succ_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)))</span> <span class=\"n\">ih</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162225868,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1554114427
    }
]