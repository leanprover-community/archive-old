[
    {
        "content": "<p>I've been trying to get lean+mathlib set up again on my updated work computer now that I'm temporarily un-distracted by exams.</p>\n<p>Having brought mathlib up to date, attempting <code>leanpkg build</code> produces complaints beginning with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jlpaca</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">175</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"err\">&#39;</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_with_index_core</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">meta_aux&#39;</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jlpaca</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">181</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">definition</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">named</span> <span class=\"err\">&#39;</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_with_index&#39;</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jlpaca</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">lexicographic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">infer</span> <span class=\"n\">type</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"kn\">variable</span>\n  <span class=\"n\">α</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jlpaca</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">lexicographic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">rcases</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"kn\">inductive</span> <span class=\"n\">datatype</span>\n</code></pre></div>\n\n\n<p>followed by a bunch more errors in <code>order/lexicographic</code> and eventually a <code>external command exited with status 139</code>. This seems strange to me, since <a href=\"https://github.com/leanprover-community/mathlib/pull/1926\">the same code</a> seems to be building happily on CI.</p>\n<p>It might be worth mentioning that I'm building lean from source with some <a href=\"https://github.com/jlpaca/lean-freebsd\">changes</a> on FreeBSD. The content of the changes are</p>\n<ul>\n<li>for system-dependent things, do whatever would be done on a linux build, and</li>\n<li>excise some code that depends on <code>procfs</code>. (I previously asked for help about this <a href=\"#narrow/stream/113489-new-members/topic/SIGABRT.20while.20building.20Lean\">here</a>. It was/is a temporary fix with the intention that I'd come back and <em>actually</em> implement the BSD version of the functions that report rss.)</li>\n</ul>\n<p>but I don't see how any of those things would result in the errors I'm seeing when I attempt to build mathlib, so I'm not entirely sure what's happening.</p>",
        "id": 198560584,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590284152
    },
    {
        "content": "<p>My guess is that you have some stale <code>.olean</code> files around which are getting loaded</p>",
        "id": 198560672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590284303
    },
    {
        "content": "<p>oh, but it happens even when I attempt to build from a fresh clone of <code>leanprover-community/mathlib</code>?</p>",
        "id": 198560773,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590284532
    },
    {
        "content": "<p>Ohhh, hmm. Is it possible that <a href=\"https://github.com/leanprover/lean/issues/1679\">https://github.com/leanprover/lean/issues/1679</a> is related?</p>",
        "id": 198561186,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590285533
    },
    {
        "content": "<p>A fresh clone doesn't update the oleans, I think</p>",
        "id": 198561579,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590286356
    },
    {
        "content": "<p>Maybe try <code>leanproject get-cache</code> to make sure the oleans are actually updated</p>",
        "id": 198561583,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590286393
    },
    {
        "content": "<p>when you say fresh clone, do you mean just doing <code>git clone &lt;url&gt;</code>? what if you make a new clone via <code>leanproject get mathlib</code>?</p>",
        "id": 198561758,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590286707
    },
    {
        "content": "<p>A way to check for freshness is to just look at the utimes/mtimes of your olean files <span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span></p>",
        "id": 198561838,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590286886
    },
    {
        "content": "<p>If I recall well, those are used to determine staleness</p>",
        "id": 198561841,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590286903
    },
    {
        "content": "<p>ah, frick. so I think this is a straightforward case of <em>me being daft</em>.</p>\n<p>I checked the definition that <code>lean --make</code> was complaining about, and it turns out that it was <a href=\"https://github.com/leanprover-community/lean/commit/a13a2946bc64051fc6b1b3da52bef9c00de3fa14\">added to core</a> after the most recent release of <code>leanprover-community/lean</code> (3.14.0). <code>leanprover-community/mathlib</code>, which just uses 3.14.0, probably doesn't know about that.</p>\n<p>...I'll go make everything the correct versions and try this again. It'll probably work.</p>",
        "id": 198561887,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590286970
    },
    {
        "content": "<p>You got bitten by the algebra/core stuff extraction I guess</p>",
        "id": 198561944,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590287096
    },
    {
        "content": "<p>right, so with <code>lean 3.14.0</code> + BSD patches, the thing with <code>data/list/defs</code> goes away.</p>\n<p>But apparently something else was causing the errors in <code>order/lexicographic</code>. This still defeats me; the offending line is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">lex_preorder</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>about which lean complains it fails to infer the type of the unknown variable <code>α</code>, but also evidently at this point in the code lean recognises <code>α : Type u</code>.</p>",
        "id": 198562966,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590289011
    },
    {
        "content": "<p>Just use <code>leanproject</code></p>",
        "id": 198572939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590308915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60/near/198572939\">said</a>:</p>\n<blockquote>\n<p>Just use <code>leanproject</code></p>\n</blockquote>\n<p>Does it even work with BSD?<br>\nI'm not sure, maybe he needs to patch elan or something :/</p>",
        "id": 198573344,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590309690
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 198573710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590310317
    },
    {
        "content": "<p>(went a fixed another few things that i didn't realise i'd messed up when i edited the lean source. I still don't know what's going on with <code>order/lexicographic</code>, and am going to give up trying to figure it out for now. One day I will probably get an installation of linux or windows for the express purpose of being able to run Lean without having to worry about doing version management by hand.)</p>",
        "id": 198594871,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590346007
    },
    {
        "content": "<p>Are you compiling mathlib with the version of Lean cited in its <code>leanpkg.toml</code>?</p>",
        "id": 198595478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590347097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60/near/198595478\">said</a>:</p>\n<blockquote>\n<p>Are you compiling mathlib with the version of Lean cited in its <code>leanpkg.toml</code>?</p>\n</blockquote>\n<p>yes; 3.14.0 with the exception of the BSD patches. So I guess the most reasonable thing to suspect is that I broke something &amp; getting lean to work on BSD isn't as simple as I thought it was. But also whatever I broke would've had to be subtle enough that it didn't affect three-months-ago mathlib, but comes up in the current version.</p>",
        "id": 198595988,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590347957
    },
    {
        "content": "<p>Please upstream the BSD patches if you want.  The <code>map_with_index</code> error is only if you use Lean master, this function got moved from mathlib to Lean after 3.14.0.  I have no idea what the lexicographic errors are about.</p>",
        "id": 198642094,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590392487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60/near/198642094\">said</a>:</p>\n<blockquote>\n<p>Please upstream the BSD patches if you want.</p>\n</blockquote>\n<p>I'd love to do that if not for the fact that it ... evidently doesn't work yet <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>The patches currently live on the <code>freebsd</code> branch of a fork of <code>lean</code>, and all of the present changes have been squashed into <a href=\"https://github.com/jlpaca/lean-freebsd/commit/d679a73ca8889e79a28dbf5a601ff4ba9c6aef1b\">a single commit that is not very large</a> (—maybe there's hope that someone will take a look at this and find that it's obvious to them what I've done wrong?)</p>\n<blockquote>\n<p>The <code>map_with_index</code> error is only if you use Lean master, this function got moved from mathlib to Lean after 3.14.0.  I have no idea what the lexicographic errors are about.</p>\n</blockquote>\n<p>Yes, I realised my mistake with <code>map_with_index</code> a few hours into this thread. The errors in <code>order/lexicographic</code> persisted even with the correct versions, though, and I haven't since made any progress towards figuring out why they're happening.</p>",
        "id": 198687133,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590425931
    },
    {
        "content": "<p>Maybe you should post the offending code with the explicit error? It's quite rare around here nowadays that someone posts a problem which nobody can answer, but on the other hand conversations involving BSD are also extremely rare</p>",
        "id": 198687225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590426017
    },
    {
        "content": "<p>Yeah, I realise I'm definitely being more trouble than I need to be by, like, not just getting a linux installation up and Just Using Leanproject™, and going there whenever I want to do Lean. But at the same time it'd be nice if this turns out to be something fix-able and I can just have something that works in my usual environment :D</p>\n<p>So the errors produced by <code>leanpkg build</code> start with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">lexicographic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">infer</span> <span class=\"n\">type</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"kn\">variable</span>\n  <span class=\"n\">α</span>\n<span class=\"bp\">~/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">lexicographic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">rcases</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"kn\">inductive</span> <span class=\"n\">datatype</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">),</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>more errors follow, but they're mostly just complaints about <code>preorder.le</code>not being an inductive datatype everywhere it turns up.</p>\n<p>The offending code is near the very beginning of <code>order/lexicographic</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">lex_preorder</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>at which point lean tells me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">infer</span> <span class=\"n\">type</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"kn\">variable</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>as it does when it tried to compile mathlib. I don't understand why that is, since <code>α</code> was declared a variable a few lines earlier and trying <code>#check α</code> on the line immediately preceding the offending code correctly reports <code>α : Type u</code>.</p>",
        "id": 198688249,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590426996
    },
    {
        "content": "<p>The patches don't look obviously wrong.  Does <code>ctest</code> report any errors?</p>",
        "id": 198688879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590427584
    },
    {
        "content": "<p>Hard to imagine what is special about this declaration. Are there any other errors which are not related to <code>lex</code>?</p>",
        "id": 198689652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590428327
    },
    {
        "content": "<p>You could try minimizing: replace the proof fields by <code>sorry</code>, inline the data fields, remove the imports, etc</p>",
        "id": 198689698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590428386
    },
    {
        "content": "<p>Alternatively, does <code>include α</code> help, as a workaround?</p>",
        "id": 198689809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590428517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60/near/198689652\">said</a>:</p>\n<blockquote>\n<p>Hard to imagine what is special about this declaration. Are there any other errors which are not related to <code>lex</code>?</p>\n</blockquote>\n<p>Do we have tools nowadays which can list precisely which files in mathlib do not depend on <code>order.lexicographic</code>, and then list which ones of those are leaves in the subgraph? Jean could then try compiling one of these. It would be good to see some more examples of where the BSD version is failing.</p>",
        "id": 198690454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590429195
    },
    {
        "content": "<p>Or I guess you could pore through the output of <code>lean --make</code> and try and spot errors which are independent. I don't understand Gabriel's no doubt shrewd comment, but Reid's suggestion of trying to fix the proof might be another way of proceeding. Is BSD Lean passing all the unit tests? Is that what Gabriel just asked?</p>",
        "id": 198690546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590429297
    },
    {
        "content": "<p>leanproject will tell you what depends on a given file, but I haven't made a command telling you what doesn't depend on a file. However you can use the mathlib tools library.</p>",
        "id": 198690744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590429480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> My question was whether Jean has already run the Lean built-in test suite.  Maybe the error occurs there as well and we get a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for free.</p>",
        "id": 198690977,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590429678
    },
    {
        "content": "<p>What I mean by \"using the library\" is going into the mathlib folder, launching ipython and having the following conversation with Python</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">mathlibtools.lib</span> <span class=\"kn\">import</span> <span class=\"n\">LeanProject</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">proj</span> <span class=\"o\">=</span> <span class=\"n\">LeanProject</span><span class=\"o\">.</span><span class=\"n\">from_path</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">())</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">proj</span><span class=\"o\">.</span><span class=\"n\">import_graph</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"n\">node</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">nodes</span> <span class=\"k\">if</span> <span class=\"n\">node</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">descendants</span><span class=\"p\">(</span><span class=\"s1\">&#39;order.lexicographic&#39;</span><span class=\"p\">)]</span>\n</code></pre></div>\n\n\n<p>I can paste the answer if you want but it's pretty long. My point is people shouldn't forget that <code>leanproject</code> is actually a command line wrapper of a library designed to manipulate Lean projects that could do many more specialized things.</p>",
        "id": 198691216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590429914
    },
    {
        "content": "<p>oh wow, I have never been so glad to see failed unit tests before:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">98</span><span class=\"err\">%</span> <span class=\"n\">tests</span> <span class=\"n\">passed</span><span class=\"o\">,</span> <span class=\"mi\">23</span> <span class=\"n\">tests</span> <span class=\"n\">failed</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"mi\">1364</span>\n\n<span class=\"n\">Total</span> <span class=\"n\">Test</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">926</span><span class=\"bp\">.</span><span class=\"mi\">47</span> <span class=\"n\">sec</span>\n\n<span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">tests</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n          <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">style_check</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n         <span class=\"mi\">12</span> <span class=\"bp\">-</span> <span class=\"n\">lean_print_notation</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n         <span class=\"mi\">14</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_all</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n         <span class=\"mi\">18</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_123</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n         <span class=\"mi\">57</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_1952</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n         <span class=\"mi\">58</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_1952b</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n         <span class=\"mi\">87</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_aux_decl_zeta</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n         <span class=\"mi\">93</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_bad_error4</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">131</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_coe4</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">132</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_coe5</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">142</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_cyclic_default_fields</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">181</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_elab_error_msgs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">234</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_inaccessible2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">261</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_let1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">293</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_non_exhaustive_error</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">386</span> <span class=\"bp\">-</span> <span class=\"n\">leantest_structure_elab_segfault</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">449</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_all</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">563</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">775</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_loop</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">814</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_even_odd2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">932</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_listex2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1005</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_nested_inductive_code_gen</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1204</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_t5</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198692709,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590431415
    },
    {
        "content": "<p>(so I guess it's a good time for me to try to go through these &amp; see what the wonky patched version of lean complains about in each case.)</p>",
        "id": 198692842,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590431572
    },
    {
        "content": "<p>huh, so it seems like the first few of them produce output that agrees with the expected output up until some point where it then complains <code>'unreachable' code was reached</code>.</p>",
        "id": 198693739,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590432327
    },
    {
        "content": "<p>Typically, unreachable code should not be reached.</p>",
        "id": 198694167,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590432780
    },
    {
        "content": "<p>for <code>123-2</code>, <code>1952</code>, <code>1952b</code>, and <code>bad_error4</code>, the unreachable code thing happens when lean is expected to be complaining instead about a type mismatch at field. Other than that it's not clear to me what the errors have in common — e.g. for <code>non_exhaustive_error</code>, unreachable code is reached when</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 198695103,
        "sender_full_name": "Jean Lo",
        "timestamp": 1590433625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/mystery.20mathlib.20errors.20in.20.60data.2Flist.60/near/198694167\">said</a>:</p>\n<blockquote>\n<p>Typically, unreachable code should not be reached.</p>\n</blockquote>\n<p>Lean is surprisingly good at reaching the unreachable. I think it is used as a synonym for \"off the beaten track\"</p>",
        "id": 198695194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590433711
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ! Don't mean to hijack your thread, but would you know of any examples of C++ or Python wrappers of Lean?<br>\nI am looking to call Lean from Julia, and a Python or C++ wrapper as an example would help. Thanks!</p>",
        "id": 199238417,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1590813812
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> built a python wrapper for ML stuff</p>",
        "id": 199239157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590815236
    },
    {
        "content": "<p>but I don't think there is an actual FFI interface for lean; it's probably just communicating via IO</p>",
        "id": 199239166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590815281
    },
    {
        "content": "<p>(In the future, feel free to start a new thread.)</p>",
        "id": 199252801,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590838998
    },
    {
        "content": "<p>As for \"calling Lean\" from another language, this is a vague ask and with many interpretations and many solutions.  <strong>I'd love to hear more about what you want to do with Lean in Julia.  I think we can work out a better answer.</strong></p>",
        "id": 199252804,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590839002
    },
    {
        "content": "<p>In the mean time, let me tell you a few ways to communicate with Lean.</p>",
        "id": 199252864,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590839061
    },
    {
        "content": "<p>I moved this discussion to <a href=\"#narrow/stream/113488-general/topic/Examples.20of.20communicating.20with.20Lean\">another thread</a>.</p>",
        "id": 199255183,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590842699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> did you ever manage to sort this out? Maybe try <a href=\"https://github.com/leanprover-community/lean/commit/36efb811b4fc435cb8fdf02fad8ba6763e1935fd\">https://github.com/leanprover-community/lean/commit/36efb811b4fc435cb8fdf02fad8ba6763e1935fd</a>?</p>",
        "id": 199609171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591185089
    },
    {
        "content": "<p>My guess is that this patch doesn't actually work (meaning \"produces a working Lean\", as opposed to \"manages to compile Lean\")</p>",
        "id": 199609250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591185135
    },
    {
        "content": "<p>very very late reply to <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  : unfortunately no, I never did manage to get this to work — I eventually decided that trying to figure out the unit tests required an understanding of the internals of lean that I just didn't have. I went and made an attempt to just run the released binary with linux binary compatibility before giving up.</p>\n<p>and your guess was right — the patch does make the guards more sensible, but doesn't address any of the things that were causing lean to die in runtime and/or any of the things that were causing the mystery errors in this thread; 3.17.0 compiles on FreeBSD but segfaults as soon as I try to run it.</p>",
        "id": 203265101,
        "sender_full_name": "Jean Lo",
        "timestamp": 1594214005
    },
    {
        "content": "<p>Doess FreeBSD (or technically the default C ABI or whatever) make any unusual choices regarding the signedness of <code>char</code>, size of <code>int</code>/<code>long</code>, etc? That still seems like the most likely cause to me</p>",
        "id": 203265868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594214458
    },
    {
        "content": "<p>Does Lean segfault when building the core library (as part of the build process) or only after that?</p>",
        "id": 203266496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594214771
    },
    {
        "content": "<p>I don't trust my memory enough to be <em>entirely</em> sure without running the build again  and checking the logs, but iirc it manages to build <code>bin_lean</code>, and then fails when/before building the core library. It was you who pointed out last time that it died because it was trying to <code>readlink</code> from <code>/proc</code>, and I think that's still the case.</p>",
        "id": 203336471,
        "sender_full_name": "Jean Lo",
        "timestamp": 1594251065
    },
    {
        "content": "<p>re-did the build; confirms the above.</p>\n<p>I went and added some of the not-working-yet patches to 3.17.1 just to see what would happen. There've been some changes since the last time I tried; for instance the code in <code>/util/memory.cpp</code> now gives up gracefully when it can't read from <code>/proc/self/statm</code>, where failing to do so used to be fatal. the  build still fails the same tests from last time, and I'm still at a loss re: actually trying to fix any of this, but I'm rerunning the failed tests &amp; will be posting the logs/output here once it finishes, on the chance that they turn out to be enlightening to someone else.</p>",
        "id": 203342756,
        "sender_full_name": "Jean Lo",
        "timestamp": 1594257922
    },
    {
        "content": "<p><a href=\"user_uploads/3121/n1APSvdWKo74n05UMuO-_YAl/LastTest.log\">LastTest.log</a></p>",
        "id": 203346506,
        "sender_full_name": "Jean Lo",
        "timestamp": 1594263027
    },
    {
        "content": "<p>That's a nearly empty file you just uploaded? The full contents seem to be:</p>\n<div class=\"codehilite\"><pre><span></span><code>Start testing: Jul 09 02:02 CST\n----------------------------------------------------------\nEnd testing: Jul 09 02:02 CST\n</code></pre></div>",
        "id": 203346524,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594263082
    },
    {
        "content": "<p>oh no, you caught that before i could edit the mistake out.</p>",
        "id": 203346586,
        "sender_full_name": "Jean Lo",
        "timestamp": 1594263133
    },
    {
        "content": "<p>right, that should be the correct file now <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 203346675,
        "sender_full_name": "Jean Lo",
        "timestamp": 1594263286
    },
    {
        "content": "<p>FWIW, \"Test Failed\" appears 22 times, and \"Segmentation Fault\" appears 5 times. Not bad for 1383 tests, maybe?</p>",
        "id": 203346916,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594263632
    }
]