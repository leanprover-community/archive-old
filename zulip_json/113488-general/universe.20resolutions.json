[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">ulift</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198766248,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590501900
    },
    {
        "content": "<p>error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">ulift</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">ulift</span> <span class=\"n\">β</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">ulift</span> <span class=\"n\">β</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"err\">?</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"err\">?</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198766265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590501907
    },
    {
        "content": "<p>is there a way to get Lean solve this automatically?</p>",
        "id": 198766284,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590501915
    },
    {
        "content": "<p>or is this generally undecidable?</p>",
        "id": 198766290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590501919
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/1b85e3c213f57dc4675a821721f51c6c46c9b65a/src/set_theory/cardinal.lean#L881-L882\">https://github.com/leanprover-community/mathlib/blob/1b85e3c213f57dc4675a821721f51c6c46c9b65a/src/set_theory/cardinal.lean#L881-L882</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mk_range_eq_lift</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 198766636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590502070
    },
    {
        "content": "<p>Is this the solution (introduce an extra universe parameter) you want it to automatically find?</p>",
        "id": 198774267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590505166
    }
]