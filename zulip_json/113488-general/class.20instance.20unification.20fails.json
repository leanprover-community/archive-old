[
    {
        "content": "<p>I tried to use the <code>@... (multiplicative G) ...</code> trick in <code>data/monoid_algebra</code> to get <code>def</code>s/proofs for <code>add_monoid_algebra</code>. Now <code>polynomial.algebra</code> fails, see <a href=\"https://github.com/leanprover-community/mathlib/pull/2492/checks?check_run_id=614475313\" title=\"https://github.com/leanprover-community/mathlib/pull/2492/checks?check_run_id=614475313\">https://github.com/leanprover-community/mathlib/pull/2492/checks?check_run_id=614475313</a></p>",
        "id": 195153531,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587712764
    },
    {
        "content": "<p>Here is the error message with <code>set_option pp.all true</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_5</span><span class=\"o\">))</span>\n    <span class=\"err\">?</span><span class=\"n\">m_5</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span>\n        <span class=\"err\">?</span><span class=\"n\">l_2</span>\n        <span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</pre></div>",
        "id": 195153931,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587713155
    },
    {
        "content": "<p>How can I debug failures like this one?</p>",
        "id": 195154006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587713199
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>helps.</p>",
        "id": 195161432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587718607
    },
    {
        "content": "<p>That then fails with:</p>",
        "id": 195161462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587718626
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_monoid</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195161473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587718630
    },
    {
        "content": "<p>So we're ending up in <code>semiring</code> two different ways.</p>",
        "id": 195161706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587718756
    },
    {
        "content": "<p>And they're not defeq?</p>",
        "id": 195162276,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587719055
    },
    {
        "content": "<p>Definition of <code>comm_semiring</code> is here: <a href=\"https://github.com/leanprover-community/mathlib/blob/polynomial-review/src/data/monoid_algebra.lean#L469\" title=\"https://github.com/leanprover-community/mathlib/blob/polynomial-review/src/data/monoid_algebra.lean#L469\">https://github.com/leanprover-community/mathlib/blob/polynomial-review/src/data/monoid_algebra.lean#L469</a></p>",
        "id": 195164782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587720708
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">semiring</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"bp\">@</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I wonder why they're not defeq.</p>",
        "id": 195164853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587720736
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">semiring</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">ext1</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195165782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587721313
    },
    {
        "content": "<p>If I prove all <code>zero_mul</code> etc as lemmas using the <code>@ ... multiplicative</code> trick, then feed them to <code>instance : semiring (add_monoid_algebra k G)</code>, then <code>polynomial.algebra</code> works without any tricks. If I replace, e.g., <code>one_mul := one_mul</code> with <code>one_mul := @one_mul (monoid_algebra k (multiplicative G)) _</code>, then it doesn't work.</p>",
        "id": 195181739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587732195
    },
    {
        "content": "<p>Adding <code>instance : semiring (polynomial R) := add_monoid_algebra.semiring</code> before <code>instance comm_semiring ...</code> solves the problem.</p>",
        "id": 195241686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587760614
    },
    {
        "content": "<p>I'll try once lean will recompile <code>mathlib</code> (added a <code>simp</code> lemma to <code>algebra/group/hom</code>).</p>",
        "id": 195255012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587769946
    }
]