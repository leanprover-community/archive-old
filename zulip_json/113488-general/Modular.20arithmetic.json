[
    {
        "content": "<p>I'm attempting to define a type (of a given size) which respects modular arithmetic - i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} / n\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>. I assume this is meant to be done via <code>quot</code> (or <code>quotient</code>?), but I can't quite figure it out. Am I on the right track here? (Or is this built in somewhere?)</p>",
        "id": 183588021,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1576528674
    },
    {
        "content": "<p>(We have such a type in mathlib. I don't know if that is what you mean with \"built in\".) <code>quot</code> is one option. The other is to build a type with <code>n</code> elements, and put the algebraic structure on such a type.</p>",
        "id": 183588207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576528784
    },
    {
        "content": "<p>I remember there is a tutorial called Zmod37.lean, which might be what you need.</p>",
        "id": 183588315,
        "sender_full_name": "Joe",
        "timestamp": 1576528843
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\">https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean</a></p>",
        "id": 183589641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576529796
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/lean-web-editor/#url=https%3A%2F%2Fcors-anywhere.herokuapp.com%2Fhttps%3A%2F%2Fraw.githubusercontent.com%2Fleanprover-community%2Fmathlib%2Fmaster%2Fdocs%2Ftutorial%2FZmod37.lean\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/#url=https%3A%2F%2Fcors-anywhere.herokuapp.com%2Fhttps%3A%2F%2Fraw.githubusercontent.com%2Fleanprover-community%2Fmathlib%2Fmaster%2Fdocs%2Ftutorial%2FZmod37.lean\">https://leanprover-community.github.io/lean-web-editor/#url=https%3A%2F%2Fcors-anywhere.herokuapp.com%2Fhttps%3A%2F%2Fraw.githubusercontent.com%2Fleanprover-community%2Fmathlib%2Fmaster%2Fdocs%2Ftutorial%2FZmod37.lean</a> to see it online.</p>",
        "id": 183589784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576529885
    },
    {
        "content": "<p>Note this is a tutorial file, not the actual mathlib version of Z/n</p>",
        "id": 183589795,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576529898
    },
    {
        "content": "<p>Which is at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/basic.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/basic.lean</a></p>",
        "id": 183589838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576529936
    }
]