[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">poly</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">poly</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">g&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">poly</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">f&#39;</span> <span class=\"n\">g&#39;</span>\n\n<span class=\"c1\">-- example (p : poly) : poly.add [] p = p := rfl -- fails</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">poly</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">poly.add.equations._eqn_1 : poly.add list.nil list.nil = list.nil</span>\n<span class=\"cm\">poly.add.equations._eqn_2 : ∀ (hd : ℤ) (tl : list ℤ), poly.add list.nil (hd :: tl) = hd :: tl</span>\n<span class=\"cm\">...</span>\n\n<span class=\"cm\">-- it did unnecessary cases on g.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">poly</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">[]</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span><span class=\"n\">refl</span>\n</pre></div>",
        "id": 127977206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528841482
    },
    {
        "content": "<p>Is this just \"one of those things\" -- is my proof of poly.add using cases something which I should be OK with, or should I now start tweaking things to try and make the example rfl? I am about to make it a simp lemma -- is that \"good enough\"? As you can see, I can prove the result, I am just worried about whether my proof is somehow bad style. It's my fancy recursive definition which is to blame of course, but the definition is recursive (I'm representing a polynomial as a list of its coefficients starting with the constant term)</p>",
        "id": 127977299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528841614
    }
]