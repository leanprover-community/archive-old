[
    {
        "content": "<p>How does one prove <code>1 = n + 1 - n</code>, without getting your hands dirty? Do we have anything that can help with <code>nat.sub</code>?</p>",
        "id": 135084627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538548850
    },
    {
        "content": "<p>Can't <code>linarith</code> do these by now?</p>",
        "id": 135084745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549084
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>git grep &quot;. + . - .&quot;\nalgebra/group.lean:  lemma add_sub_cancel&#39; (a b : α) : a + b - a = b :=\nalgebra/ring.lean:      ... ↔ a * e + c - b * e = d : iff.intro (λ h, begin simp [h] end) (λ h,\ndata/list/basic.lean:  reverse (range&#39; s n) = map (λ i, s + n - 1 - i) (range n)\ndata/multiset.lean:theorem add_sub_cancel_left (s : multiset α) : ∀ t, s + t - s = t :=\ndata/multiset.lean:theorem add_sub_cancel (s t : multiset α) : s + t - t = s :=\ndata/multiset.lean:by simpa [(∪), union, eq_comm] using show s + u - (t + u) = s - t,\ndata/nat/basic.lean:          ...     ≤ n + m - n      : nat.sub_le_sub_right this n\ndata/nat/prime.lean:    sqrt n - k &lt; sqrt n + 2 - k :=\ndata/nat/prime.lean:    λ _ _, `[exact ⟨_, measure_wf (λ k, sqrt n + 2 - k)⟩]}\ndata/nat/prime.lean:    λ _ _, `[exact ⟨_, measure_wf (λ k, sqrt n + 2 - k)⟩]}\ndata/padics/padic_norm.lean:   padic_norm hp q = padic_norm hp (q + r - r) : by congr; ring\ndata/padics/padic_rationals.lean:    show lim_zero (f + g - g), by simpa using hf },\ndata/padics/padic_rationals.lean:    show lim_zero (f + g - f), by  simpa [add_sub_cancel&#39;] using hg },\ndocs/naming.md:pattern. For that, we make do as best we can. For example, `a + b - b = a`\ngroup_theory/subgroup.lean:(normal : ∀ n ∈ s, ∀ g : α, g + n - g ∈ s)\nset_theory/ordinal.lean:theorem add_sub_cancel (a b : ordinal) : a + b - a = b :=\nset_theory/ordinal.lean:theorem add_sub_add_cancel (a b c : ordinal) : a + b - (a + c) = b - c :=\ntests/linarith.lean:        (h4 : a + b - c &lt; 3)  : false :=\ntests/linarith.lean:example (a b c : ℚ) (h2 : (2 : ℚ) &gt; 3)  : a + b - c ≥ 3 :=\ntests/ring.lean:example {α} [comm_ring α] (x y : α) : x + y + y - x = 2 * y := by ring\n</pre></div>",
        "id": 135084815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549252
    },
    {
        "content": "<p>No, linarith doesn't help.</p>",
        "id": 135084854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538549285
    },
    {
        "content": "<p>Or even better:</p>\n<div class=\"codehilite\"><pre><span></span>git grep &quot;. + . - .&quot; | grep nat\ndata/nat/basic.lean:          ...     ≤ n + m - n      : nat.sub_le_sub_right this n\ndata/nat/prime.lean:    sqrt n - k &lt; sqrt n + 2 - k :=\ndata/nat/prime.lean:    λ _ _, `[exact ⟨_, measure_wf (λ k, sqrt n + 2 - k)⟩]}\ndata/nat/prime.lean:    λ _ _, `[exact ⟨_, measure_wf (λ k, sqrt n + 2 - k)⟩]}\n</pre></div>",
        "id": 135084859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549299
    },
    {
        "content": "<p>For it to deal with subtraction on natural numbers it would have to break into cases.</p>",
        "id": 135084861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538549309
    },
    {
        "content": "<p>That first result looks promising</p>",
        "id": 135084866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549330
    },
    {
        "content": "<p><code>nat.add_sub_cancel_left</code></p>",
        "id": 135084876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is <span class=\"emoji emoji-2b06\" title=\"up\">:up:</span> what you need?</p>",
        "id": 135084877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549372
    },
    {
        "content": "<p>Yeah, but even that requires using commutativity of addition first.</p>",
        "id": 135084922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538549406
    },
    {
        "content": "<p>Too gross for me. :-)</p>",
        "id": 135084926,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538549411
    },
    {
        "content": "<p>They don't need that over here:</p>\n<div class=\"codehilite\"><pre><span></span>git grep -A1 &quot;. + . - .&quot; | grep -A1 nat | head -2\ndata/nat/basic.lean:          ...     ≤ n + m - n      : nat.sub_le_sub_right this n\ndata/nat/basic.lean-          ...     = m              : by rw nat.add_sub_cancel_left,\n</pre></div>",
        "id": 135084986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549539
    },
    {
        "content": "<p>Seems like <code>rw</code> will do the job.</p>",
        "id": 135084992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538549559
    },
    {
        "content": "<p>All of these lemmas are in Lean or mathlib I think. I've extensively used subtraction on nats and am not aware of any holes.</p>",
        "id": 135085692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538550723
    }
]