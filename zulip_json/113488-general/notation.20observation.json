[
    {
        "content": "<p>When I was a beginner I used <code>#print notation</code> a lot, to get my head around the absolute basics (e.g. \"what the heck is <code>≃</code>\" or \"I wonder what the actual definition of <code>=</code> is?\"). But there are just a few pieces of notation for which this doesn't work and you have to learn them manually. <code>→</code> and <code>∀</code> give unhelpful outputs (<code>no notation</code>) and I remember being frustrated by <code>⋃</code> and other big operators:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">⋃</span> <span class=\"c1\">-- `⋃`:1024 binders `,`:0 (scoped 0) := #0</span>\n</code></pre></div>\n<p>because that answer is not at all helpful (the correct answer is <code>set.Union</code>). However I just noticed that depending on order of imports you can make the output even less helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span> <span class=\"c1\">-- switch order of inputs to get back to original unhelpful answer</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">⋃</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">`⋃`:1024 :=</span>\n<span class=\"cm\">  | Set.Union</span>\n<span class=\"cm\">  | Class.Union</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(note that <code>Set.Union</code> is not <code>set.Union</code>).</p>\n<p>Can we do any better in Lean 4 for beginners?</p>",
        "id": 274120672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646396851
    },
    {
        "content": "<p>Lean 4 does not have <code>#print notation</code>, but your last example shows that it is better to interact with actual usages of the notation to learn about it. For which Lean 4 provides go-to-definition &amp; docstring hover. <a href=\"/user_uploads/3121/PkPiNQCZMBpAJ2GcrCc7yRj_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PkPiNQCZMBpAJ2GcrCc7yRj_/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PkPiNQCZMBpAJ2GcrCc7yRj_/image.png\"></a></div>",
        "id": 274122594,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646397904
    },
    {
        "content": "<p>I see -- so for example if I see notation on github which I don't understand I should just find the relevant file in a local copy of a repo.</p>",
        "id": 274123189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646398266
    },
    {
        "content": "<p>I'd say so, yeah. You need at least the right imports anyway, after all.</p>",
        "id": 274125461,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646399331
    },
    {
        "content": "<p>Ideally of course you'd jump right there from GitHub using Gitpod/GH Codespaces</p>",
        "id": 274125718,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646399485
    },
    {
        "content": "<p>If Lean 4 doesn't have <code>#print notation</code>, how do you figure out the precedence of an operator?</p>",
        "id": 274126336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646399789
    },
    {
        "content": "<p>you can see it in the screenshot</p>",
        "id": 274126366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646399804
    },
    {
        "content": "<p>Sure, but how do I check a bunch of precedences at once/how do I know which notations are used?</p>",
        "id": 274129675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646401350
    },
    {
        "content": "<p>And how do I know which operators have a given precedence? We will crucially need this soon to fix the precedences of order vs algebraic operators as we talked about a few times already.</p>",
        "id": 274129850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646401436
    },
    {
        "content": "<p>A tool to dump all syntax, or all syntax in a given syntax category like <code>term</code>, sounds doable in lean 4 (this is lean 3 <code>#print notation</code> with no arguments IIRC)</p>",
        "id": 274133966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646403100
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/analogue.20of.20.23print.20notation\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/analogue.20of.20.23print.20notation</a> and <a href=\"https://gist.github.com/pcpthm/b88152daeeb684948d768766a49f2534\">https://gist.github.com/pcpthm/b88152daeeb684948d768766a49f2534</a></p>",
        "id": 274137962,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646404976
    }
]