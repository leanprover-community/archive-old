[
    {
        "content": "<p>Can someone please advise me where the following lemmas should live in mathlib and if the naming/tagging is correct (proofs omitted):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">div_num_denom_eq_div_nat_int</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">floor_eq_num_div_denom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⌊</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mod_eq_sub_mul_floor_rat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"err\">⌊</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"err\">⌋</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">coprime_sub_mul_floor</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_coprime_d</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"err\">⌊</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"err\">⌋</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Thank you :)</p>",
        "id": 171960930,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564417660
    },
    {
        "content": "<p>So let me say first that I have had very little experience of PR'ing to mathlib and you will want to get some more experienced voices before doing anything. But here's my two cents:</p>\n<p>I would instinctively say \"put stuff like this in <code>data.rat.basic</code>\" but that file is already over 1000 lines long. Maybe it's time to split it into more than one file? We have the directory data/rat now. </p>\n<p>Actually, looking at it a bit closer, maybe it should be reformulated a bit. My instinct is that one should prove <code>⌊ q ⌋ = q.num / q.denom</code> (which seems like a cleaner statement, there are no n's and d's involved, and <code>library_search</code> doesn't seem to find this) and then the first lemma follows from this and the second lemma, which makes me wonder whether the first lemma is needed at all. I'm wondering whether it's best to include just the second lemma and this <code>⌊ q ⌋ = q.num / q.denom</code> statement because they are both quite succinct, and I could imagine that they could both go in data.rat.basic or data.rat.basic2 if it gets split.</p>\n<p>The third lemma is an easy consequence of the second lemma and <code>int.mod_add_div</code> I guess, so my instinct is that the natural results are there and the user can put them together if they want the 3rd result. Similarly the 4th result is not really a result about rationals, if you use the second statement then it becomes an assertion about integers which could go in data.int.gcd or something, if it's not already there.</p>\n<p>PS while writing this answer I discovered that <code>data.int.basic</code> imports <code>algebra.field</code>. Not what I would have guessed.</p>",
        "id": 171965537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564421002
    },
    {
        "content": "<p>Hmm, I see that I suggested that some lemmas involving floors could go in data.rat.basic but that's no good because the floor stuff is defined in algebra/archimedean.lean which imports data.rat.basic. So the floor rational stuff would have go to in there I guess.</p>",
        "id": 171965846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564421266
    },
    {
        "content": "<p>Alright, thanks for the pointers. I'll pick my best guess from the mentioned folders then and be prepared for some PR discussion :p </p>\n<p><code>rat.floor</code> is actually defined as <code>q.num / q.denom</code>, so that's pretty simple:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"err\">⌊</span><span class=\"n\">q</span><span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>however, it does not hold that <code>(rat.mk n d).num = n</code> (and similar for <code>.denom</code>) since <code>rat.mk</code> has to create a coprime pair <code>(num : int , denom : nat)</code>. But it still holds that <code>(rat.mk n d).num / (rat.mk n d).denom = n / d</code>, which is my first lemma.</p>",
        "id": 171979719,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564431366
    },
    {
        "content": "<p>You can still simplify the first lemma using Kevin's lemma, to <code>⌊rat.mk n d⌋ = n / d</code></p>",
        "id": 171990931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441017
    },
    {
        "content": "<p>which makes it the same as the second lemma, hence why Kevin says it's not necessary</p>",
        "id": 171991016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441109
    },
    {
        "content": "<p>You should swap the order to <code>q.num / q.denom = ⌊q⌋</code> if you want these to be simp lemmas though</p>",
        "id": 171991040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564441168
    },
    {
        "content": "<blockquote>\n<p>You should swap the order to <code>q.num / q.denom = ⌊q⌋</code> if you want these to be simp lemmas though</p>\n</blockquote>\n<p>Should <code>⌊rat.mk n d⌋ = n / d</code> or <code>n / d = ⌊rat.mk n d⌋</code> or neither be a simp lemma? I would have picked the first one since it seems easier for me to deal with the division rather than <code>rat.mk</code> combined with <code>floor</code></p>",
        "id": 172017375,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564476107
    },
    {
        "content": "<p>I agree. Notice that if <code>⌊rat.mk n d⌋ = n / d</code> and <code>q.num / q.denom = ⌊q⌋</code> are both simp lemmas, then <code>(rat.mk n d).num / (rat.mk n d).denom = n / d</code> is proven by simp</p>",
        "id": 172018665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564477268
    },
    {
        "content": "<blockquote>\n<p>I would instinctively say \"put stuff like this in <code>data.rat.basic</code>\" but that file is already over 1000 lines long. Maybe it's time to split it into more than one file? We have the directory data/rat now. </p>\n</blockquote>\n<p>I think it is time. I made a <a href=\"https://github.com/leanprover-community/mathlib/pull/1284\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1284\">PR to split it</a>.</p>",
        "id": 172028769,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564486567
    },
    {
        "content": "<p>You can use <code>default.lean</code> to export a \"default\" set of files. (Which can then be imported using <code>import data.rat</code>.)</p>",
        "id": 172029199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564487015
    },
    {
        "content": "<p>I guess a next (and tedious) step, is to minimize the <code>import data.rat.*</code> in the rest of the library. But <code>olean-rs</code> might be able to help with that.</p>",
        "id": 172029259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564487053
    },
    {
        "content": "<p>Yeah, I was a bit afraid of changing <code>basic.lean</code> to <code>default.lean</code> since every <code>rat.basic</code> import then needs to be changed. Should I create <code>default.lean</code> that just imports <code>basic.lean</code> for now?</p>",
        "id": 172029322,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564487148
    },
    {
        "content": "<p>I would at least import <code>basic</code> and <code>order</code>.</p>",
        "id": 172029401,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564487201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> I find it hard to say, atm. I think you said there was some sort of (almost) import loop? What was it exactly?</p>",
        "id": 172029654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564487456
    },
    {
        "content": "<p>Because that might help in determining how to structure things.</p>",
        "id": 172029668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564487466
    },
    {
        "content": "<p>Imports where OK; just Kevin B. noticed:</p>\n<blockquote>\n<p>PS while writing this answer I discovered that data.int.basic imports algebra.field. Not what I would have guessed.</p>\n<p>Hmm, I see that I suggested that some lemmas involving floors could go in data.rat.basic but that's no good because the floor stuff is defined in algebra/archimedean.lean which imports data.rat.basic. So the floor rational stuff would have go to in there I guess.</p>\n</blockquote>\n<p>My idea was:<br>\n- <code>data.rat.field</code> defines the field structure<br>\n- <code>data.rat.order</code> defines the order and related functions<br>\n- <code>data.rat.cast</code> defines the casts<br>\n- <code>data.rat.floor_ceil</code> defines floor and ceil functions<br>\n- <code>data.rat.basic</code> imports the previous four.</p>\n<p>If we want to have <code>data.rat.default</code>, my proposal is to just import <code>data.rat.basic</code> from <code>data.rat.default</code> for now and in a different PR update the <code>data.rat.basic</code> and <code>data.rat.*</code> imports.</p>",
        "id": 172029962,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564487716
    },
    {
        "content": "<p>If you don't want to break anything, isn't it best to import all of them from default at the moment, and change imports from <code>data.rat.basic</code> to <code>data.rat.default</code> and then minimise the imports in a separate PR.</p>",
        "id": 172030195,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564487885
    },
    {
        "content": "<p>OK, doing some quick search, I think fixing the imports shouldn't be difficult. Gimme a few mins.</p>",
        "id": 172030423,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564488065
    },
    {
        "content": "<p>Does this help removing <code>algebra.field</code> as import from <code>data.int.basic</code>?</p>",
        "id": 172030536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564488136
    },
    {
        "content": "<p>Nope, that's unrelated to this PR</p>",
        "id": 172031077,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564488537
    },
    {
        "content": "<p>Ok, I see.</p>",
        "id": 172031677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564489034
    },
    {
        "content": "<p>I changed <code>basic</code> to <code>default</code> and <code>floor_ceil</code> to <code>floor</code> now in the new version.</p>",
        "id": 172031806,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564489122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> We're still in the process of figuring out what exactly we want to document. We just had a change in policy. My apologies for confusing questions/remarks on your PR. It's a bit of a playground/testing ground.</p>",
        "id": 172033010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564490157
    },
    {
        "content": "<p>I don't see why we need to remove the <code>algebra.field</code> import. That's basically the definition of <code>field</code> as a structure (or would be if it wasn't in core already)</p>",
        "id": 172034795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564491452
    },
    {
        "content": "<p>and obviously <code>rat</code> is a field and that's pretty integral to the definition. We aren't so bootstrapped that we need to separate the type rat from the field rat</p>",
        "id": 172034894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564491510
    },
    {
        "content": "<p>That's why I suggested <code>data/rat/field</code> should be called <code>data/rat/basic</code>. Just looking, this hasn't actually been done yet.</p>",
        "id": 172035071,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564491617
    },
    {
        "content": "<p>Especially since that file also contains the definition of <code>rat</code></p>",
        "id": 172035167,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564491707
    },
    {
        "content": "<p>So everyone agrees I should rename <code>rat.field</code> to <code>rat.basic</code> - is that right?</p>",
        "id": 172035335,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564491809
    },
    {
        "content": "<p>I think so.</p>",
        "id": 172035366,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564491830
    },
    {
        "content": "<p>I am not sure I see the argument for splitting the file, but the name suggestions seem alright</p>",
        "id": 172035486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564491887
    },
    {
        "content": "<p>I think the argument is that <code>floor</code> will be able to import <code>algebra.archimedean</code></p>",
        "id": 172035560,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564491935
    },
    {
        "content": "<p>Personally I would actually state the lemma <code>@[simp]\nlemma rat.floor_eq_num_div_denom (n : ℤ) (d : ℕ) : ⌊rat.mk n d⌋ = n / d := sorry</code> differently. I would just add a <code>simp</code> lemma turning <code>rat.mk n d</code> into <code>(n : rat) / d</code> and then a lemma turning <code>⌊n / d⌋ = (n : int) / d</code> in any ordered field. I'm not sure why you'd want to use <code>rat.mk</code> instead of division.</p>",
        "id": 172035885,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564492111
    },
    {
        "content": "<blockquote>\n<p>So everyone agrees I should rename <code>rat.field</code> to <code>rat.basic</code> - is that right?</p>\n</blockquote>\n<p>updated the PR with this</p>",
        "id": 172035963,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564492178
    },
    {
        "content": "<blockquote>\n<p>I am not sure I see the argument for splitting the file, but the name suggestions seem alright</p>\n</blockquote>\n<p>I was about to add lemmas to data.rat.basic and the sequence of statements in data.rat.basic made it non-trivial to integrate them. Making smaller, coherent files makes adding changes way easier + it is easier to find and document things.</p>",
        "id": 172036058,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564492232
    },
    {
        "content": "<p>the current file is stated in a logical order, with subheadings. Could you be more specific?</p>",
        "id": 172036275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564492417
    },
    {
        "content": "<p>It predates the new doc requirements though</p>",
        "id": 172036333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564492443
    },
    {
        "content": "<p>My point is mostly that making more files with the same content does not on its own make anything better. It's just trading one organizational scheme for another, and you can be equally convoluted either way</p>",
        "id": 172036451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564492541
    },
    {
        "content": "<p>The biggest thing you lose with moving to mini files is the explicit dependency order. Filesystems just show the files in alphabetical order, and you can't see what comes first anymore</p>",
        "id": 172036607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564492662
    },
    {
        "content": "<p>For example, things like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">num_denom_mk</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">qdf</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>were not stated at the top where <a href=\"http://rat.mk\" target=\"_blank\" title=\"http://rat.mk\">rat.mk</a> is defined, but somewhere at the bottom, sections of coercions, floor functions, etc in-between, making it really difficult to find the lemma.<br>\nAnother example: there was a section about coercions randomly appearing between the <code>ceil</code> and <code>nat_ceil</code> section, obfuscating the connection.</p>",
        "id": 172036910,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564492896
    },
    {
        "content": "<blockquote>\n<p>The biggest thing you lose with moving to mini files is the explicit dependency order. Filesystems just show the files in alphabetical order, and you can't see what comes first anymore</p>\n</blockquote>\n<p>My take is that If that's the main thing you miss, then that should be fixed by, e.g. a tactic outputting dependency graphs rather than giving up on easier maintenance of smaller files.</p>",
        "id": 172037158,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564493055
    },
    {
        "content": "<p>I agree; those last theorems involving num and denom look tacked on, perhaps the author didn't know where to put them</p>",
        "id": 172084136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564527742
    },
    {
        "content": "<p>When I originally wrote the file I didn't say much about <a href=\"http://rat.mk\" target=\"_blank\" title=\"http://rat.mk\">rat.mk</a> beyond the basics because it's supposed to be an implementation detail. I'm not sure why all these lemmas are exposing it</p>",
        "id": 172084171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564527821
    },
    {
        "content": "<p>I finally came back to fix these lemmas and ran into the following rewriting issue:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">floor_div_eq_div</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"err\">⌊</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- rw [rat.floor_def], -- this fails</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"err\">⌊</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">floor_def</span><span class=\"o\">)],</span> <span class=\"c1\">-- this works</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Maybe this is also related to <a href=\"https://github.com/leanprover-community/mathlib/pull/1276/files#diff-69913e770559c1df859d4767801aa0e0R292\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1276/files#diff-69913e770559c1df859d4767801aa0e0R292\">this issue</a> that Patrick and I ran into a few weeks ago. Any idea what's going on here?</p>",
        "id": 173205755,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565791514
    },
    {
        "content": "<p>The problem here is that <code>⌊ ... ⌋</code> means <code>floor_ring.floor</code>, but <code>rat.floor_def</code> is defined using <code>rat.floor</code>. These two functions are definitionally equal, but you will have to unfold some instances (namely, <code>floor_ring ℚ</code>) to figure that out.<br>\n<code>rw</code> will do (almost) no unfolding of definitions, so on the first line, it cannot match <code>rat.floor</code> with <code>floor_ring.floor</code>. On the second line, you proof an equality involving <code>floor_ring.floor</code> (the proof works, since the two definitions are definitionally equal), and then rewrite is happy, because the equality you're rewriting with now only involves <code>floor_ring.floor</code>.</p>\n<p>This issue is avoided in other situations by defining the instance <code>floor_ring.floor</code> as quickly as possible after <code>rat.floor</code>, and from then on only using <code>floor_ring.floor</code> and never <code>rat.floor</code>. An uglier work-around is to reprove <code>rat.floor_def</code> after the instance is declared using <code>floor_ring.floor</code>.</p>",
        "id": 173227734,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565806388
    },
    {
        "content": "<p>Thanks, that does make a lot of sense! :)</p>",
        "id": 173236050,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565812388
    },
    {
        "content": "<p>So now I have these three lemmas:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">inv_def&#39;</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div_lt_div_iff_mul_lt_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_own_denom_eq_num</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>All the proofs are quite simple if one imports <code>data.rat.cast</code>.  Semantically, however, they obviously should not live in <code>data.rat.cast</code>. Are these lemmas good candidates for <code>data.rat.default</code> or should that file stay completely empty besides a list of imports?</p>",
        "id": 173547515,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1566224523
    },
    {
        "content": "<p>I would suggest moving properties about coercions into <code>rat</code> (from <code>int</code> and <code>nat</code>) to <code>rat.basic</code> and then just add these lemmas there. Then <code>rat.cast</code> is only about the cast from the rationals to other types. I would expect these kind of lemmas, which are basic equational rules, to be in <code>rat.basic</code>.</p>",
        "id": 173548865,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566225541
    },
    {
        "content": "<p>That sounds sensible. I'll give it a shot. Cheers :)</p>",
        "id": 173549814,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1566226303
    }
]