[
    {
        "content": "<p>Can someone tell me why this complains that it failed to synthesize the typeclass instance for <code>has_norm (continuous_multilinear_map ℂ (λ (i : fin n), ℂ) A)</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.multilinear</span>\n\n<span class=\"kd\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∥</span><span class=\"n\">p</span><span class=\"bp\">∥</span>\n</code></pre></div>\n<p>because it seems to me that it is defined here <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_multilinear_map.has_op_norm\">docs#continuous_multilinear_map.has_op_norm</a></p>",
        "id": 266226728,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640660910
    },
    {
        "content": "<p>I only have a moment but I agree this looks like it should work and I note that the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">_inst</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">continuous_multilinear_map.has_op_norm</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">∥</span><span class=\"n\">p</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">has_norm.norm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">continuous_multilinear_map.has_op_norm</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 266243592,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640682799
    },
    {
        "content": "<p>I'll have time later this morning and look into it then if it's still pending.</p>",
        "id": 266243651,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640682850
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_multilinear_map.has_op_norm</span>\n</code></pre></div>\n<p>Work?</p>",
        "id": 266244114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640683367
    },
    {
        "content": "<p>Good question, no it does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.multilinear</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Works; cannot drop any of the provided arguments `ℂ`, `fin n`, or `(λ i, ℂ)`. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">continuous_multilinear_map.has_op_norm</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Fails with:</span>\n\n<span class=\"cm\">type mismatch, term</span>\n<span class=\"cm\">  continuous_multilinear_map.has_op_norm</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  has_norm (continuous_multilinear_map ?m_1 ?m_3 ?m_4) : Type (max ? ? ?)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  has_norm (continuous_multilinear_map ℂ (λ (i : fin n), ℂ) A) : Type u_1</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"o\">[</span><span class=\"bp\">×</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_multilinear_map.has_op_norm</span>\n</code></pre></div>",
        "id": 266250487,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640689462
    },
    {
        "content": "<p>I don't understand why this fails.</p>",
        "id": 266250494,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640689470
    },
    {
        "content": "<p>I think this is the standard \"pi types confuse typeclass search\" problem</p>",
        "id": 266251124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640690018
    },
    {
        "content": "<p>I think it gets stuck trying to unify the typeclass arguments while trying to unify the non-typeclass arguments. Ideally it would not attempt to unify the typeclass arguments at all.</p>",
        "id": 266251244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640690114
    },
    {
        "content": "<p>Thanks! I see (sort of). Do we have a note / thread / issue for this?</p>",
        "id": 266252073,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640690956
    },
    {
        "content": "<p>So, if I understand correctly, the problem is that Lean is having trouble constructing the pi type typeclass for the normed group instance associated to <code>complex</code>? Some sort of reference for this problem would be greatly appreciated.</p>",
        "id": 266275513,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640711483
    },
    {
        "content": "<p>I think there was a similar problem for <code>dfinsupp</code> that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> tracked down into a mwe,  and that particular mwe was fixed in Lean 4.</p>",
        "id": 266281291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640716642
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/leanprover/lean4/pull/509\">lean4#509</a> ?</p>",
        "id": 266293812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640726659
    },
    {
        "content": "<p>So there’s a good chance this issue is fixed in Lean 4 and we just work around it till then.</p>",
        "id": 266299027,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640731393
    }
]