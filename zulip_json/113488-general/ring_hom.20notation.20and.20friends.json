[
    {
        "content": "<p>I now have need to discuss non-unital subrings, and so I was going to first define <code>non_unital_ring_hom</code> in <code>algebra.ring.basic</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">non_unital_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>But there is the issue of notation. <code>non_unital_ring_hom</code> is an awfully long name to not have any associated notation, but the natural choice <code>α →+* β</code> is already taken by <code>ring_hom</code>. Of course, this comes up in two other situations, namely, <code>mul_hom</code>, where the natural notation <code>α →* β</code> is taken by <code>monoid_hom</code>, but this is not so bad since <code>mul_hom</code> is short. But then there is also <code>non_unital_alg_hom</code>, where the notation <code>α →ₐ[R] β</code> is usurped by <code>alg_hom</code>.</p>\n<p>So, how would people feel about adding a <code>₁</code> to the notation for the versions with <code>map_one</code>, thereby unlocking the notation for the other homs? To be explicit, I am proposing:</p>\n<ol>\n<li><code>α →*₁ β</code>, <code>α →+*₁ β</code>, <code>α →ₐ₁[R] β</code> for monoid, ring and algebra homs.</li>\n<li><code>α →* β</code>, <code>α →+* β</code>, <code>α →ₐ[R] β</code> for mul_hom, non-unital ring hom (doesn't exist yet), and non-unital algebra hom?</li>\n</ol>",
        "id": 278187427,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649347468
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero_hom\">docs#monoid_with_zero_hom</a>?</p>",
        "id": 278187522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649347508
    },
    {
        "content": "<p>What about <code>→+*\\₁</code> for <code>non_unital_ring_hom</code>? (<span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>)</p>",
        "id": 278187606,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649347543
    },
    {
        "content": "<p>Good point, I guess that should be monoid with zero hom should be <code>α →*₀₁ β</code>?</p>",
        "id": 278187717,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649347580
    },
    {
        "content": "<p>Note that we now have algebraic order homs too: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_monoid_hom\">docs#order_monoid_hom</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_monoid_with_zero_hom\">docs#order_monoid_with_zero_hom</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_ring_hom\">docs#order_ring_hom</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_ring_iso\">docs#order_ring_iso</a>.</p>",
        "id": 278188056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649347729
    },
    {
        "content": "<p>If we <em>don't</em> have the corresponding non-unital versions, I don't mind leaving other stuff as is for now.</p>",
        "id": 278188608,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649347953
    },
    {
        "content": "<p>Speaking of which, it doesn't look like we have <code>semigroup_with_zero_hom</code>, so maybe <code>monoid_with_zero_hom</code> doesn't need to change.</p>",
        "id": 278188870,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649348064
    },
    {
        "content": "<p>Another option would be to rename <code>non_unital_ring</code> to to <code>rng</code>, but (a) I've always hated that, and (b) there's no \"i\" to remove in \"algebra\".</p>",
        "id": 278189477,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649348308
    },
    {
        "content": "<p>You're hitting algebrasts problems.</p>",
        "id": 278189657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649348401
    },
    {
        "content": "<p>you could also use other arrows, like category theorists do. this seems suboptimal, though</p>",
        "id": 278190450,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649348744
    },
    {
        "content": "<p>Are you sure you actually need all these as bundled types?</p>",
        "id": 278194391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649350565
    },
    {
        "content": "<p>It would be a shame not to use the fancy new hom hierarchy, especially now that Jireh understood how it works.</p>",
        "id": 278195031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649350817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Why would we <em>not</em> want it as a bundled type? I think the only reason  it doesn't exist yet is that the algebraists have thus far only been concerned with unital rings (some algebraist please correct me if I'm mistaken). I am only adding <code>non_unital_ring_hom</code> anyway. (edit: I sent this and then realized you were probably talking to Yaël about the order versions.)</p>",
        "id": 278197329,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649351795
    },
    {
        "content": "<p>What's wrong with <code>→'+*</code> (and the analogous notation for the other arrows as well). One has to decide where to put the <code>'</code>:<br>\n<code>→'+*</code> vs. <code>'→+*</code> vs. <code>→+*'</code>. I think <code>→+'*</code> should be avoided.</p>",
        "id": 278197722,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649351976
    },
    {
        "content": "<p>I would prefer the third because searching for <code>→+*</code> will also hit those.</p>",
        "id": 278197849,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649352017
    },
    {
        "content": "<p>I mean any of these; I'd argue we shouldn't aim to have every one of the exponentially many ways to pull legs off the morphism caterpillar (as I think I heard Reid describe it), but should have ideally a use case in mind of something that would consume each new type before we add</p>",
        "id": 278197879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649352031
    },
    {
        "content": "<p>In the past, I've used \"I need it for a universal property\", and Yaël's used \"I need <code>foo_hom</code> so that I can build the category of <code>Foo</code>\". Anything stronger than \"hey, we don't have this combination of legs yet\" is probably a fine reason</p>",
        "id": 278198170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649352203
    },
    {
        "content": "<p>Alright, so here is where it came up for me: I'm looking at <code>C₀(α, R)</code> where <code>α</code> is a topological space and <code>R</code> is a topological ring (non-unital or unital, it doesn't matter, because the function ring is non-unital). Then the point is to show that <code>C₀(α, R)</code> is isomorphic to the subring (actually, its a two-sided ideal, but we don't have those yet either) of <code>C(alexandroff α, R)</code> consisting of the functions <code>f</code> such that <code>f ∞ = 0</code>. Then, use this isomorphism to show that there is an isomorphism between <code>unitization R C₀(α, R)</code> and <code>C(alexandroff α, R)</code>.</p>",
        "id": 278198429,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649352321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/ring_hom.20notation.20and.20friends/near/278197879\">said</a>:</p>\n<blockquote>\n<p>one of the exponentially many ways to pull legs off the morphism caterpillar (as I think I heard Reid describe it),</p>\n</blockquote>\n<p>FYI: <a href=\"https://en.wikipedia.org/wiki/Centipede_mathematics\">https://en.wikipedia.org/wiki/Centipede_mathematics</a></p>",
        "id": 278198644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649352431
    },
    {
        "content": "<p>I agree we shouldn't just go defining arbitrary morphism classes until we need them; at the very least, it seems like there should be better ways to spend our time.</p>",
        "id": 278201924,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649353896
    },
    {
        "content": "<p>/poll New notation for <code>ring_hom R S</code><br>\nR →¹+* S<br>\nR →+*¹ S<br>\nR →₁+* S<br>\nR →+*₁ S<br>\nDon't change my ring hom notation!</p>",
        "id": 278204696,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649355108
    },
    {
        "content": "<p><span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>  General rule: If you rip a leg of a well-functioning morphism caterpillar you have to put that leg back into the piece of notation for the crippled caterpillar. /s</p>",
        "id": 278206671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649356138
    },
    {
        "content": "<p>Well, message <em>clearly</em> received, I won't change anybody's ring hom notation <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  ! Any suggestions for good notation for <code>non_unital_ring_hom</code> then? Maybe <code>R →ₙ+* S</code> with the <code>ₙ</code> being for \"non-unital\"?</p>",
        "id": 278261076,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649398570
    },
    {
        "content": "<p>That seems like a good suggestion to me.</p>",
        "id": 278261137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649398649
    },
    {
        "content": "<p>Alternatively, <code>R →+*₀ S</code> which is the existing <code>R →*₀ S</code> with addition.</p>",
        "id": 278263939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649401336
    },
    {
        "content": "<p>I sort of like <code>→+*'</code> on the basis that the prime is telling you the multiplicative structure is a bit wonky.</p>",
        "id": 278266426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649403391
    },
    {
        "content": "<p>I guess we could then have <code>→*'</code> for mul_hom too</p>",
        "id": 278267879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649404392
    },
    {
        "content": "<p>I'm hesitant about the prime notation. Reason: When Adam originally suggested it above, I didn't even realize it was a prime, I thought it was a one, like I had originally suggested. It wasn't until Scott explicitly said \"prime\" that everything clicked. </p>\n<p>As for <code>→+*₀</code>, this doesn't really have the stated relationship because <code>→*₀</code> is a <em>monoid</em> with zero hom, not a <em>semigroup</em> with zero hom, and what we are talking about here is a <em>non-unital</em> ring hom.</p>",
        "id": 278276348,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649409059
    },
    {
        "content": "<p>Ooh, that's a good point. So <code>→+*₀</code> is indeed sub-optimal. I think your <code>→ₙ+*</code> is maybe the winner.</p>",
        "id": 278276789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649409272
    },
    {
        "content": "<p>I was just looking in the Unicode arrows and found <code>⥅</code>. Could we do <code>⥅*</code>? Or too confusing?</p>",
        "id": 278277605,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649409713
    },
    {
        "content": "<p>We managed to stick to <code>→</code> for morphisms so far, so we would have to justify the difference here.</p>",
        "id": 278277750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649409792
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13430\">#13430</a> introduces non-unital ring homs with the notation <code>R →ₙ+* S</code>. In order to parallel this, in <a href=\"https://github.com/leanprover-community/mathlib/pull/13470\">#13470</a> I introduce <code>A →ₙₐ[R] B</code> for <code>non_unital_alg_hom R A B</code>. Is this good or do we want something else?</p>",
        "id": 279168710,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650116015
    },
    {
        "content": "<p>/poll Notation for <code>non_unital_alg_hom</code><br>\nA →ₙₐ[R] B</p>",
        "id": 279168763,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650116051
    },
    {
        "content": "<p>Probably the options for that poll should be notation for both ring_hom and alg_hom together; obviously they should be consistent, but I don't think we reached a consensus for the ring notation yet.</p>",
        "id": 279169594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650117430
    },
    {
        "content": "<p>(in fact, I'd argue we should pick a notation for <code>mul_hom</code>, aka \"non unital monoid_hom\", at the same time)</p>",
        "id": 279170059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650117975
    },
    {
        "content": "<p>Alright, create a new poll the way you see fit, I don't think I can delete the old one.</p>",
        "id": 279170874,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650119216
    },
    {
        "content": "<p>/poll non-unital hom notations (algebra, ring, semigroup)<br>\nA →ₙₐ[R] B and R →ₙ+* S and M →ₙ* N<br>\nA →ₐ'[R] B and R →+<em>' S and M →</em>' N</p>",
        "id": 279313301,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650304214
    },
    {
        "content": "<p>Per <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s suggestion above, here is a poll for uniform notation for <code>non_unital_alg_hom R A B</code>, <code>non_unital_ring_hom R S</code> (see <a href=\"https://github.com/leanprover-community/mathlib/pull/13430\">#13430</a>), and <code>mul_hom M N</code>. In the above <code>ₙ</code> means \"non-unital\". I'm pinging the following people because they participated in the previous poll about <code>ring_hom</code> notation and so thought they might want input: (<span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> )</p>",
        "id": 279313840,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650304476
    },
    {
        "content": "<p>Given the above, <a href=\"https://github.com/leanprover-community/mathlib/pull/13470\">#13470</a> for <code>non_unital_alg_hom</code> and <a href=\"https://github.com/leanprover-community/mathlib/pull/13526\">#13526</a> for <code>mul_hom</code>. These should not go into the same batch. I'm sure there will be a merge conflict between them that needs resolving.</p>",
        "id": 279448147,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650392095
    },
    {
        "content": "<p>I assume we will want <code>A →ₙ+ B</code> too for <code>add_hom</code>?</p>",
        "id": 279505789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650438281
    },
    {
        "content": "<p>I guess here the <code>ₙ</code> means \"no zero\"?</p>",
        "id": 279550647,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650465034
    },
    {
        "content": "<p>\"non-identital\"?</p>",
        "id": 279564960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650470873
    },
    {
        "content": "<p>I could see having <code>A →ₙ+ B</code> for consistency, but I'm not too attached to assigning notation for it at the moment. The multiplicative versions are nice for me currently because I'm doing a lot of work to get the non-unital ring API up and running (and I'm dealing a lot with semigroups and mul_hom there as a result). I don't expect there will be a parallel use case with add_semigroups and add_hom; although eventually there might be a different use case.</p>",
        "id": 279570595,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650473404
    }
]