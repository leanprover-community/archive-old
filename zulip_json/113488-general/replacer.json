[
    {
        "content": "<p>By the suggestion of Simon, I've extended <code>replacer</code> to support parameters in its type. That is, you can define a replaceable definition <code>foo : A -&gt; tactic B</code> where you have arbitrary input and output, rather than just <code>tactic unit</code>. Incidentally, implementing this required my first attempt at meta-metaprogramming, since the defined tactics are written programmatically.</p>",
        "id": 133700764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536627187
    },
    {
        "content": "<p>Does it accept any number of parameters?</p>",
        "id": 133700886,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536627329
    },
    {
        "content": "<p>yes</p>",
        "id": 133700888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536627332
    },
    {
        "content": "<p>just one output, but we always bundle that anyway</p>",
        "id": 133700895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536627346
    },
    {
        "content": "<p>It doesn't support monads other than <code>tactic</code>, and the prev tactic access does not allow changing parameters</p>",
        "id": 133700963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536627423
    },
    {
        "content": "<p>This supercalifragilisticexpialidocious!</p>",
        "id": 133701331,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536627895
    },
    {
        "content": "<p>To let other people in on the idea, I wanted this so that we can write a tactic at the same as we write a proof, even if the tactic is a core tactic, we can put them in the same file and stop recompiling everything every time we change the tactic</p>",
        "id": 133701427,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536627982
    },
    {
        "content": "<p>This is a bit similar to hot code loading</p>",
        "id": 133701435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536628010
    },
    {
        "content": "<p>you don't mean \"core\" as in \"core lean\" though. Like time travel, you can't go back before the time machine was invented</p>",
        "id": 133701521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536628102
    },
    {
        "content": "<p>That is correct :)</p>",
        "id": 133701529,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536628123
    },
    {
        "content": "<p>You can only replace definitions in files where you can import this replacer tactic.</p>",
        "id": 133701549,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536628169
    },
    {
        "content": "<p>What do you use from <code>tactic.basic</code>?</p>",
        "id": 133701974,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536628704
    },
    {
        "content": "<p>just the <code>has_reflect</code> instance for binder_info</p>",
        "id": 133702266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536629087
    },
    {
        "content": "<p>Cool, I left you a comment on the commit. I think it should be moved to <code>tactic.replacer</code> so that <code>tactic.basic</code> can import <code>tactic.replacer</code> (since it's a tool for writing tactics)</p>",
        "id": 133702353,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536629196
    },
    {
        "content": "<p>I don't think anything in mathlib uses it though</p>",
        "id": 133702529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536629516
    },
    {
        "content": "<p>That's ok. What i intend to do with it when I write tactics for mathlib is to temporarily have <code>tactic.basic</code> import <code>tactic.replacer</code>, make all the routines I use replaceable, go write an example and, next to it, keep a version of the functions and tactics that I modify. When I'm done, I remove the <code>def_replacers</code> and the <code>import tactic.basic</code> statement.</p>",
        "id": 133702652,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536629748
    },
    {
        "content": "<p>Btw, there is a way we could go back in time passed the creation of our machine: using meta programming, we create a <code>dynamic</code> namespace in which we copy all the visible declarations that depend on what we want to replace and and we rewrite their definitions to insert the replacer instead of the original definition.</p>",
        "id": 133703035,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536630419
    },
    {
        "content": "<p>that's more like alternate universe time travel</p>",
        "id": 133703136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536630602
    },
    {
        "content": "<p>I'm happy with multi-universe interpretations</p>",
        "id": 133703163,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536630710
    }
]