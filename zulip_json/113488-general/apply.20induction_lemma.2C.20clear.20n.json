[
    {
        "content": "<p>Reviewing a PR and I see <code>apply nat.strong_induction_on n, clear n,</code>. This reminded me of some code I was writing last week which had the line <code>apply span_induction hx; clear hx x,</code>. This is perhaps quite a common idiom? The reason one wants to clear the variable is because one is about to embark on a proof or proofs of results related to the original goal and ones instinct is to use the same variable names again -- for example I want to prove results about elements of submodules and I want to use x and y for these elements, so it's annoying if I don't clear the original <code>x</code> which is now useless to me. Is this style OK or is it worth modding some induction tactic to make this happen automatically? I'm not entirely sure what I want here, but given that I've now seen this twice in one week it made me wonder.</p>",
        "id": 216390053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605123878
    },
    {
        "content": "<p>I think ssreflect has something for this, a la <code>have {h1} h2 := foo h1</code> which is like <code> have h2 := foo h1, clear h1</code> except it works even if you reuse the variable names</p>",
        "id": 216395061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605126584
    },
    {
        "content": "<p>I don't see how we can offer something better than <code>; clear</code> though</p>",
        "id": 216395445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605126798
    },
    {
        "content": "<p>in the examples, <code>apply span_induction hx clearing hx x</code> would be no better</p>",
        "id": 216395493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605126822
    },
    {
        "content": "<p>fwiw <code>induction n using nat.strong_induction_on with n hn</code> works (does the same as <code>apply nat.strong_induction_on n, clear n, intros n hn</code>)</p>",
        "id": 216396322,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605127318
    },
    {
        "content": "<p>Yes, I realised when I was posting that I couldn't really see a solution which would be saving too many characters!</p>",
        "id": 216402426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605130969
    }
]