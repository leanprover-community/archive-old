[
    {
        "content": "<p>Is it possible to have the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">foo</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">bar</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n<span class=\"kd\">end</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 213891668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603184612
    },
    {
        "content": "<p>I think it is not obvious how exactly that should behave</p>",
        "id": 213891739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603184645
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">foo</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">constant</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"c1\">-- scope: X, A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">bar</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">constant</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"c1\">-- scope: X, Y, A, B</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">constant</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"c1\">-- scope: Y, Z, A, B, C</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">bar</span>\n<span class=\"c1\">-- scope: A, bar.B, bar.C</span>\n</code></pre></div>",
        "id": 213891924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603184790
    },
    {
        "content": "<p>variable-wise, there is no difference between <code>section</code> and <code>namespace</code></p>",
        "id": 213892035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603184858
    },
    {
        "content": "<p>declaration-wise, everything inside a <code>namespace</code> gets a prefix</p>",
        "id": 213892050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603184870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is this natural?</p>",
        "id": 213892180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603184943
    },
    {
        "content": "<p>But what happens if I add <code>variable [group X]</code> between <code>namespace bar</code> and <code>end foo</code>?</p>",
        "id": 213892214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603184962
    },
    {
        "content": "<p>I guess that should also be gone after the <code>end foo</code>, but it will probably make the bookkeeping more complicated.</p>",
        "id": 213892335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603185020
    },
    {
        "content": "<p>that's exactly why I proposed it. I want to change from ring to field without ending the namespace</p>",
        "id": 213892421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603185087
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">field</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">field</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 213892574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603185183
    },
    {
        "content": "<p>hmm, looks like I misunderstood you</p>",
        "id": 213892634,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603185228
    },
    {
        "content": "<p>but this is my intended use-case anyway</p>",
        "id": 213892647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603185237
    },
    {
        "content": "<p>I think this would be a bad idea with the current design, because <code>section ... end</code> and <code>namespace ... end</code> act like matched pairs</p>",
        "id": 213935769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603207623
    },
    {
        "content": "<p>If you want to do tricks like that it should be with another, non-scoping namespace mechanism like <code>set_namespace foo</code>,  <code>set_namespace _root_</code> or the like</p>",
        "id": 213935948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603207698
    }
]