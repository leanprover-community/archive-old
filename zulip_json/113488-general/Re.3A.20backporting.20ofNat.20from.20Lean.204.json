[
    {
        "content": "<p>As many of you will have heard by now, numerals in Lean 4 look quite a bit different than in Lean 3.  In Lean 3, numerals were constructed from 0, 1, and addition.  In Lean 4 there is now a function <code>ofNat : Nat → α</code> which embeds the natural numbers into the desired type.  (Actually it's a tad more complicated than that: the type class is <code>OfNat α n</code>, which means that a type may only have some but not all numerals...)</p>\n<p>Effectively this means that in mathlib4 we now have these type classes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Numeric</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">...</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Numeric</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">...</span> <span class=\"c1\">-- but not `One α` or `Zero α`</span>\n</code></pre></div>\n<p>This works mostly well and doesn't result in any weird diamonds.  The only downside is that Semiring no longer extends Monoid, so you have to type all properties by hand (i.e. Semiring only extends Semigroup and AddSemigroup directly, because they don't reference 0/1).  In mathlib4 that's perfectly workable because the algebraic hierarchy is still very coarse, and we have few theorems.</p>\n<p>After some prodding by <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I've tried to backport this change (i.e. the numeric type class) to mathlib.  Mathlib has a dozen ring-link structures each inheriting from various different subsets of additive/multiplicative structures.  Then there's a corresponding cornucopia of <code>function.injective</code> and <code>function.surjective</code> functions.  Typing the properties by hand is not really scalable.  Some potential solutions I have thought of:</p>\n<p>1) Make a separate hierarchy for the numeric-based classes.  This is what I've tried so far.  It is ugly but potentially automatable in Lean 4.  Doing this by hand in Lean 4 is annoying though (because you have to define monoid, add_monoid, monoid', and add_monoid').  Concretely, create classes like this (where has_zero and has_one are replaced by numeric):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ancestor numeric has_mul, protect_proj]</span>\n<span class=\"kd\">class</span> <span class=\"n\">mul_one_class'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">numeric</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then semiring &amp; co. can extend <code>monoid_with_zero'</code> instead of <code>monoid_with_zero</code>.</p>\n<p>2) Patch Lean 3 and Lean 4 so that <code>class Foo (α) extends Numeric α, Zero α</code> works magically, i.e., Foo only contains ofNat, but not zero.  Bikesheddable syntax (the semantics is similar to default fields, but of course completely different):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Numeric</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"k\">let</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">ofNat</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">ofNat</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>3) Define the algebraic hierarchy in terms of unbundled <code>is_group</code> classes.  Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_nsmul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"kd\">extends</span> <span class=\"n\">is_add_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_add_zero_class</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>  <span class=\"bp\">...</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_nsmul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_add_comm_monoid</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">numeric</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">is_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This allows some degree of reuse because <code>is_add_comm_monoid R</code> is defeq no matter whether you're talking about the underlying additive monoid, or the semiring itself.</p>\n<p>I'm happy for any comments or ideas.  There's probably unclear parts here, I'll gladly elaborate.</p>\n<p>Frequently asked questions:</p>\n<ul>\n<li>Why don't we just make semiring extend both numeric and has_zero and a proof that <code>0 = 0</code>?  Because that's a type class diamond which we want to avoid.</li>\n<li>Why don't we just leave numeric out of semiring? Because then you can't state <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_two.two_eq_zero\">docs#char_two.two_eq_zero</a></li>\n</ul>",
        "id": 269573859,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643291396
    },
    {
        "content": "<p>If we have <code>OfNat α 1</code> then why do we also need a separate <code>One α</code>?</p>",
        "id": 269574563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643291660
    },
    {
        "content": "<p>That's just a technical subtlety.  <code>class MonoidWithZero (α) extends OfNat α 0, OfNat α 1</code> doesn't work by itself (you get two <code>ofNat</code> fields with different types), so we need to add aliases.  Lean 4 can infer <code>OfNat α 0</code> from <code>Zero α</code> and vice versa though.</p>",
        "id": 269574945,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643291843
    },
    {
        "content": "<p>Does (3) lead to the exponential blowup in term sizes that is explained in a famous blogpost that I cannot find right now?</p>",
        "id": 269576288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643292385
    },
    {
        "content": "<p>Oh, here it is: <a href=\"https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html\">https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html</a></p>",
        "id": 269576586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643292497
    },
    {
        "content": "<p>To my naive eye, (2) seems the most promising.</p>",
        "id": 269576675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643292545
    },
    {
        "content": "<p>We can also move only numeric/has_one/has_zero from fields to args</p>",
        "id": 269576869,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643292631
    },
    {
        "content": "<p>I don't really understand what is going on here but my gut reaction is that it is all very confusing.</p>",
        "id": 269577301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643292827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Re.3A.20backporting.20ofNat.20from.20Lean.204/near/269574945\">said</a>:</p>\n<blockquote>\n<p>That's just a technical subtlety.  <code>class MonoidWithZero (α) extends OfNat α 0, OfNat α 1</code> doesn't work by itself (you get two <code>ofNat</code> fields with different types), so we need to add aliases.  Lean 4 can infer <code>OfNat α 0</code> from <code>Zero α</code> and vice versa though.</p>\n</blockquote>\n<p>It seems like this is the natural place to fix things</p>",
        "id": 269577563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643292939
    },
    {
        "content": "<p>Even if you fix this, extending <code>Monoid</code>, <code>AddMonoid</code>, and <code>Numeric</code> without some very special support from the language (see solution 2) will create conflicting projections</p>",
        "id": 269578431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643293305
    },
    {
        "content": "<p>One will say \"we have any numeral\", another will say that we have numeral zero</p>",
        "id": 269578656,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643293371
    },
    {
        "content": "<p>Maybe we should also include option 0: Semiring does not extend Numeric</p>",
        "id": 269578660,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643293372
    },
    {
        "content": "<p>How numerals in semirings should work then?</p>",
        "id": 269578954,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643293466
    },
    {
        "content": "<p>Related to Reid's option 0: Is there an <code>OfInt α (-2)</code>? And will <code>Ring</code> need to extend some int-version of <code>Numeric</code>?<br>\nIf <code>Ring</code> doesn't extend <code>IntNumeric</code>, why should <code>Semiring</code> extend <code>Numeric</code>?</p>",
        "id": 269578994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643293480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Re.3A.20backporting.20ofNat.20from.20Lean.204/near/269578954\">said</a>:</p>\n<blockquote>\n<p>How numerals in semirings should work then?</p>\n</blockquote>\n<p>A general instance recreating the old behavior? It's not great, but sounds better than SemiRing not extending Monoid at least</p>",
        "id": 269579169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643293557
    },
    {
        "content": "<p>The reason that <code>Semiring</code> has to extend <code>Numeric</code> is that we want <code>ofNat : ℕ → ℕ</code> to be defeq to the identity function, right?</p>",
        "id": 269579358,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643293620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Why is it a problem if Semiring doesn't extend Monoid? There will always be an instance, right?</p>",
        "id": 269580752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643294153
    },
    {
        "content": "<p>I guess, <code>-2</code> works as <code>-(ofNat 2)</code>. Am I right?</p>",
        "id": 269581153,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643294285
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>That's just a technical subtlety.  <code>class MonoidWithZero (α) extends OfNat α 0, OfNat α 1</code> doesn't work by itself (you get two <code>ofNat</code> fields with different types), so we need to add aliases.  Lean 4 can infer <code>OfNat α 0</code> from <code>Zero α</code> and vice versa though.</p>\n</blockquote>\n<p>It seems like this is the natural place to fix things</p>\n</blockquote>\n<p>Please ignore this part of the issue.  This is just a distraction.  There's absolutely no problem here.</p>",
        "id": 269582191,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643294730
    },
    {
        "content": "<p>why can't we just have <code>OfNat α 0</code> instead of <code>Zero α</code>?</p>",
        "id": 269582712,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643294921
    },
    {
        "content": "<blockquote>\n<p>Does (3) lead to the exponential blowup in term sizes that is explained in a famous blogpost that I cannot find right now?</p>\n</blockquote>\n<p>Jung describes a different encoding, namely one where we'd have <code>group [div_inv_monoid α] : Prop</code>.  Option 3 should not lead to exponential blowup.</p>",
        "id": 269582871,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643294983
    },
    {
        "content": "<blockquote>\n<p>why can't we just have OfNat α 0 instead of Zero α?</p>\n</blockquote>\n<p>Again, this is absolutely not the issue here.  Please replace <code>Zero α</code> by <code>OfNat α 0</code> in the examples if it helps you.</p>",
        "id": 269583054,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643295038
    },
    {
        "content": "<p>Ok, cool. But we would still need to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">scalar</span> <span class=\"n\">ℕ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>just to say \"<code>A</code> is an additive group\".<br>\nIf some syntax can make that easier/shorter, than (3) seems like a good option to me.</p>",
        "id": 269583175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643295091
    },
    {
        "content": "<p>Option 3 (in my original post) would have two hierarchies, the <code>is_add_group</code> hierarchy and the <code>add_group</code> hierarchy.  And we'd have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">is_add_group</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 269583417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643295194
    },
    {
        "content": "<p>Ah, and because Lean 4 doesn't care about cycles in the TC graph, this just works like a charm?</p>",
        "id": 269583600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643295258
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269583644,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643295277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Re.3A.20backporting.20ofNat.20from.20Lean.204/near/269583175\">said</a>:</p>\n<blockquote>\n<p>Ok, cool. But we would still need to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">scalar</span> <span class=\"n\">ℕ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>just to say \"<code>A</code> is an additive group\".<br>\nIf some syntax can make that easier/shorter, than (3) seems like a good option to me.</p>\n</blockquote>\n<p>I mean, I think something to help alleviate this would still be nice; I remember Anne proposed a <code>[[my_class A B C]]</code>that expands this out into all the required TC arguments</p>",
        "id": 269583724,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643295308
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269583734,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643295315
    },
    {
        "content": "<blockquote>\n<p>Ah, and because Lean 4 doesn't care about cycles in the TC graph, this just works like a charm?</p>\n</blockquote>\n<p>The only instance this declares is <code>add_group A → is_add_group A</code> so there's no cycle.</p>",
        "id": 269583933,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643295397
    },
    {
        "content": "<p>I think why your comments are confusing me is that I would just put <code>OfNat 0</code> in <code>AddGroup</code>, <code>OfNat 1</code> in <code>Monoid</code> and extend both in <code>Ring</code> and call it a day.</p>",
        "id": 269584205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643295507
    },
    {
        "content": "<p>Then you don't have numeric instances for rings, i.e. <code>(42 : R)</code> doesn't work.</p>",
        "id": 269584274,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643295546
    },
    {
        "content": "<p>I wonder if that is a real problem?</p>",
        "id": 269584364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643295581
    },
    {
        "content": "<p>We have enough lemmas that contain numerals &gt; 1.</p>",
        "id": 269584407,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643295598
    },
    {
        "content": "<p>So is it possible to only have <code>OfNat 0</code> and <code>OfNat 1</code> inside <code>Ring</code> and then manually define the instance <code>OfNat n</code>? </p>\n<p>One problem is that <code>ofNat : ℕ → ℕ</code> using this instance is not defeq to the identity function (mentioned by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>). Is that a big issue? A simple simp lemma will mostly fix this.</p>\n<p>Are there other problems?</p>",
        "id": 269586022,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643296149
    },
    {
        "content": "<p>maybe the correct way to do this is to make them arguments, e.g. <code>class Monoid (α) [ofNat α 1] extends ...</code>, <code>class Ring (α) [∀ n, ofNat α n] extends Monoid α, ...</code>, or does this not work for subtle reasons?</p>",
        "id": 269586230,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643296222
    },
    {
        "content": "<p>currently, I guess this means you'd need to type <code>[ofNat α 1] [Monoid α]</code>, but with Anne's proposal that should be pretty painless</p>",
        "id": 269586384,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643296278
    },
    {
        "content": "<p>(I don't want to take too much credit for that, it's just Coq's <code>`{}</code>.)</p>",
        "id": 269586731,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643296419
    },
    {
        "content": "<p>(I'm just excited for it instead of the pages-long <code>variables</code> we have to write sometimes now!)</p>",
        "id": 269586952,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643296509
    },
    {
        "content": "<p>Could you remind me why we didn't go for accepting a <code>Zero α → OfNat α 0</code> and <code>Semiring α → OfNat α 0</code> diamond?</p>",
        "id": 269587065,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643296547
    },
    {
        "content": "<p>If <code>Semiring</code> implies <code>AddMonoid</code> which implies <code>Zero</code>, then there are two definitely not defeq ways to write <code>0</code> in a generic semiring</p>",
        "id": 269587320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643296649
    },
    {
        "content": "<p>we would at least need an equality theorem</p>",
        "id": 269587350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643296663
    },
    {
        "content": "<p>Wouldn't that go away if we replace <code>extends</code> with a custom instance <code>Semiring.ToAddMonoid</code> which sets <code>zero := ofNat 0</code>?</p>",
        "id": 269587547,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643296736
    },
    {
        "content": "<p>Or would disinheriting <code>Semiring → Monoid</code> mess up diamond inheritance so we can't say <code>Ring extends Semiring, Group</code>?</p>",
        "id": 269587896,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643296862
    },
    {
        "content": "<p>It would, but I'm not sure how important that is</p>",
        "id": 269587961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643296894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Re.3A.20backporting.20ofNat.20from.20Lean.204/near/269586022\">said</a>:</p>\n<blockquote>\n<p>One problem is that <code>ofNat : ℕ → ℕ</code> using this instance is not defeq to the identity function (mentioned by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>). Is that a big issue? A simple simp lemma will mostly fix this.</p>\n</blockquote>\n<p>And applied to any specific <code>Nat</code> they should hopefully be defeq after all. Is that not the (only) important use case?</p>",
        "id": 269588735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643297239
    },
    {
        "content": "<p>I think that will not be good, we don't want <code>27 : Nat</code> to have to build it up in binary if we can just inject the literal 27. This could potentially affect LLVM optimizations if it can't work out the value of the constant</p>",
        "id": 269589538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643297573
    },
    {
        "content": "<p>The generic instance should probably have lower priority than the specific one. I would be surprised if you instantiated generic literals to <code>Nat</code> often enough to create noticeable overhead in compile or run time.</p>",
        "id": 269590082,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643297787
    },
    {
        "content": "<p>What are we going to use for coercion from nat?</p>",
        "id": 269598743,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643301219
    },
    {
        "content": "<p>What do you use in Lean 3? If it is not the identity function for Nat there either, I don't see a reason to change it, so it should be distinct from <code>OfNat</code>.</p>",
        "id": 269599155,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643301368
    },
    {
        "content": "<p>I can imagine that some algorithm is written for any semiring (possibly, with extra requirements) and involves coercion from nat. When it is applied to nat, we probably want this coercion to go away</p>",
        "id": 269599171,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643301373
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast\">docs#nat.cast</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bin_cast\">docs#nat.bin_cast</a></p>",
        "id": 269599497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643301488
    },
    {
        "content": "<p><code>nat.cast</code> is pretty dumb indeed</p>",
        "id": 269599537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643301512
    },
    {
        "content": "<p>For the run time use case, this should eventually be covered by compiler rewrite rules. Which are not implemented yet, but their lack should probably not influence how you want to model your algebraic hierarchies too much.</p>",
        "id": 269600096,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643301727
    },
    {
        "content": "<p>Regarding the subtopic of the additive/multiplicative split, I opened a new thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> with a perhaps naive alternative approach making use of new Lean 4 features <a href=\"#narrow/stream/270676-lean4/topic/Additive.2Fmultiplicative.20split.20in.20Lean.204/near/269595572\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Additive.2Fmultiplicative.20split.20in.20Lean.204/near/269595572</a></p>",
        "id": 269600788,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643302019
    },
    {
        "content": "<blockquote>\n<p>The generic instance should probably have lower priority than the specific one. I would be surprised if you instantiated generic literals to Nat often enough to create noticeable overhead in compile or run time.</p>\n</blockquote>\n<p>From what I remember, Joe Hendrix stopped using mathlib because of this computationally problematic <code>nat.cast</code> instance.  So I'd really like to avoid it.</p>",
        "id": 269603980,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643303215
    },
    {
        "content": "<blockquote>\n<p>A simple simp lemma will mostly fix this.</p>\n</blockquote>\n<p>Then some simp lemmas will no longer apply to natural numbers.  For example, <code>2 | a ↔ even a</code> will work for every type, except the natural numbers (and other types that have a custom ofNat function).</p>",
        "id": 269604641,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643303493
    },
    {
        "content": "<blockquote>\n<p>And applied to any specific Nat they should hopefully be defeq after all. Is that not the (only) important use case?</p>\n</blockquote>\n<p>I had hoped we could eventually use the same function for coercions as well to get rid of nat.cast.  For actual numerals alone, a low-priority <code>OfNat</code> instance doing nat.cast could work.</p>",
        "id": 269606055,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643304014
    },
    {
        "content": "<blockquote>\n<p>If it is not the identity function for Nat there either, I don't see a reason to change it, so it should be distinct from OfNat.</p>\n</blockquote>\n<p>The coercion <code>Nat → α</code> is an ongoing minor issue (with associated VM performance issues and diamonds), so there's certainly a good reason to change it.</p>",
        "id": 269606522,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643304209
    },
    {
        "content": "<blockquote>\n<p>so it should be distinct from OfNat.</p>\n</blockquote>\n<p>Okay let's call this option 4).  We have all three of 0, 1, and ofNat.  Numerals are built from 0, 1, +.  And ofNat is only used for coercions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Numeric</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">...</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"c1\">-- constructed from 0, 1, +</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Numeric</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTail</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ofNat</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It's somewhat disappointing that <code>Numeric.ofNat n</code> and <code>OfNat.ofNat n</code> are not defeq, but it's a much smaller issue than 1 or 3.</p>",
        "id": 269607714,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643304688
    },
    {
        "content": "<p>It's not perfect, but a separate class also feels more appropriate because there is no need for the <code>n</code> type parameter for this use case</p>",
        "id": 269608283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643304914
    },
    {
        "content": "<p>Okay, I've implemented option 4) in mathlib4. <a href=\"https://github.com/leanprover-community/mathlib4/pull/177\">https://github.com/leanprover-community/mathlib4/pull/177</a>  The performance issues are real, avoid <code>(123456 : R)</code> for now.</p>",
        "id": 270216274,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643724696
    },
    {
        "content": "<p>I've also removed the coercion <code>ℕ → R</code> for semirings <code>R</code> for performance reasons.  How about adding the following type class to mathlib3, and replacing <code>nat.cast</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">cast_nat</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_nat</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cast_nat_zero</span> <span class=\"o\">:</span> <span class=\"n\">cast_nat</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cast_nat_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cast_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cast_nat</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm also happy about other values of <code>cast_nat 1</code>.</p>",
        "id": 270216995,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643724963
    },
    {
        "content": "<p>And a low prio default instance that uses nat.bin_cast?</p>",
        "id": 270218968,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643725662
    },
    {
        "content": "<p>No, we'd bundle it in semiring and co. so <code>cast_nat</code> would be available anywhere we'd need it.  Having a second non-defeq instance only introduces a diamond.</p>",
        "id": 270219583,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643725893
    },
    {
        "content": "<p>if we're allowing other values of <code>cast_nat 1</code>, should we have <code>cast_nat (n + 1) = cast_nat n + cast_nat 1</code>?</p>",
        "id": 270221564,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643726645
    },
    {
        "content": "<p>I meant that there are two reasonable values we could specify for <code>cast_nat 1</code>, either <code>0 + 1</code> or <code>1</code>.  These are of course not equal in general.</p>",
        "id": 270228121,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643728884
    },
    {
        "content": "<p>And yes, <code>cast_nat (n + 1) = cast n + 1</code> would not be true with <code>cast_nat 1 =  1</code>.  (But it would be true for semirings, and in general we'd have <code>cast_nat (n+2) = cast_nat (n+1) 1</code>.)</p>",
        "id": 270228175,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643728899
    }
]