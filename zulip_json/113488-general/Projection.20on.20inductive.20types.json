[
    {
        "content": "<p>Hello, how does one define projection on inductive types? For eg:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">atom</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">atom</span>\n</code></pre></div>\n<p>Given this piece of code, I want to define a function on <code>atom</code> that will return <code>n</code>.</p>",
        "id": 270458510,
        "sender_full_name": "AdLucem",
        "timestamp": 1643836427
    },
    {
        "content": "<p>How could it? You need to <strong>provide</strong> <code>n</code> to make it a Prop, and once ypou have a Prop you can't expect to retrieve what you put in (except that in that case one of the two <code>n</code> is possible from the type).</p>",
        "id": 270459146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643836701
    },
    {
        "content": "<p>Also, did you mean to have to have two separate <code>n</code>?</p>",
        "id": 270459180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643836717
    },
    {
        "content": "<p>Probably, you actually want some other type. Could you please post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with the way you are going to use this type?</p>",
        "id": 270459554,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643836876
    },
    {
        "content": "<p>Oh no, that was a mistake!<br>\nOkay, so I can't retrieve <code>n</code> from the <code>Prop</code></p>",
        "id": 270459567,
        "sender_full_name": "AdLucem",
        "timestamp": 1643836884
    },
    {
        "content": "<p>(Did you really want to make it a <code>Prop</code>? It seems weird with the name <code>atom</code>)</p>",
        "id": 270459621,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643836910
    },
    {
        "content": "<p>Note that <code>atom</code> parameter <code>n</code> is unrelated to <code>atom.intro</code> parameter <code>n</code>. Which <code>n</code> do you want to extract? You probably want this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">atom</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">atom.n</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">atom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Or maybe this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">atom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">atom.n</span> <span class=\"o\">:</span> <span class=\"n\">atom</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom.intro</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>In general, you cannot extract parameters of proposition constructors (because of proof irrelevance).</p>",
        "id": 270459637,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643836920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I want to define equality over <code>atom</code> -</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">atom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n</code></pre></div>\n<p>So I need to get <code>n</code> for testing equality</p>",
        "id": 270460009,
        "sender_full_name": "AdLucem",
        "timestamp": 1643837051
    },
    {
        "content": "<p>If you make it <code>Type</code> instead of <code>Prop</code> then you can:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">atom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract</span> <span class=\"o\">:</span> <span class=\"n\">atom</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom.intro</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 270460060,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643837077
    },
    {
        "content": "<p>But in this case you can just use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270460135,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643837110
    },
    {
        "content": "<p>Or <code>nat</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 270460319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643837182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> wait you can pattern match that way? that is useful thank you!<br>\n (ref: <code>def atom.n {n : ℕ} (a : atom n) := n</code>)</p>",
        "id": 270460457,
        "sender_full_name": "AdLucem",
        "timestamp": 1643837239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> No, I need to be able to use <code>atom</code> as a constructor for type <code>Prop</code>. i.e: <code>atom &lt;some number&gt; :: Prop</code></p>",
        "id": 270460669,
        "sender_full_name": "AdLucem",
        "timestamp": 1643837318
    },
    {
        "content": "<p>This sounds like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. Can you give us the greater picture?</p>",
        "id": 270460787,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643837364
    },
    {
        "content": "<p>Greater picture is that I'm building propositional logic in lean ( _not_ using lean's existinginfrastructure since this is for a teaching exercise).  I want to be able to build \"atoms\" - propositional variables, essentially- and then build propositions out of them. Can I actually post the entire code that I'm trying? (I posted a simplified version of the problem- essentially that I defined <code>atom</code> as an inductive type and needed to get a struct-type <code>projection</code> for it)</p>",
        "id": 270461186,
        "sender_full_name": "AdLucem",
        "timestamp": 1643837534
    },
    {
        "content": "<p>Yeah sure, go on! Are you one of Kevin's students by any chance?</p>",
        "id": 270461427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643837640
    },
    {
        "content": "<p>You definitely can post the code.</p>",
        "id": 270461790,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643837782
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">var</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Prp</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"kt\">Sort</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">atom</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">var.mk</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">var.mk</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">p3</span> <span class=\"o\">:=</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">var.mk</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">p1</span>\n</code></pre></div>\n<p>The intention is: to define the 'fundamental' of propositional logic as a propositional variable (so as to not go straight to semantics, like lean does with <code>true</code> and <code>false</code>) and then define a Proposition as combinations of type variables- so as you can see, I define the homemade <code>Prp</code> (Proposition) in place of <code>Type</code>.</p>",
        "id": 270461825,
        "sender_full_name": "AdLucem",
        "timestamp": 1643837794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270461427\">said</a>:</p>\n<blockquote>\n<p>Yeah sure, go on! Are you one of Kevin's students by any chance?</p>\n</blockquote>\n<p>ah, no? I'm working with a prof who is introducing propositional logic with lean.</p>",
        "id": 270461921,
        "sender_full_name": "AdLucem",
        "timestamp": 1643837844
    },
    {
        "content": "<p>What is the mathematical meaning of <code>atom v</code>?</p>",
        "id": 270461954,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643837870
    },
    {
        "content": "<p>Oh, who is it? Altenkirch?</p>",
        "id": 270461963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643837874
    },
    {
        "content": "<p>Can you write \"pen and paper\" definitions for <code>atom</code>, <code>var</code>, etc?</p>",
        "id": 270462079,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643837926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270461954\">said</a>:</p>\n<blockquote>\n<p>What is the mathematical meaning of <code>atom v</code>?</p>\n</blockquote>\n<p><code>Atom v</code> - atomic propositional variable <code>v</code></p>",
        "id": 270462104,
        "sender_full_name": "AdLucem",
        "timestamp": 1643837942
    },
    {
        "content": "<p>How is it different from <code>v : var</code>?</p>",
        "id": 270462143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643837959
    },
    {
        "content": "<p>If <code>Prp = Sort 1</code> (equivalently, <code>Type</code>), then you can extract information from inductive structures in <code>Prp</code>.</p>",
        "id": 270462271,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270462079\">said</a>:</p>\n<blockquote>\n<p>Can you write \"pen and paper\" definitions for <code>atom</code>, <code>var</code>, etc?</p>\n</blockquote>\n<p>var : set of variables v1, v2... </p>\n<p>p ∈ Var<br>\n-------  VAR-INTRO<br>\np ∈ Exp</p>",
        "id": 270462348,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838041
    },
    {
        "content": "<p>What are <code>Var</code> and <code>Exp</code> here?</p>",
        "id": 270462572,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270461963\">said</a>:</p>\n<blockquote>\n<p>Oh, who is it? Altenkirch?</p>\n</blockquote>\n<p>Hmm no, I'm in a college called IIIT-H. Although- I think my professor might appreciate course notes/resources from other professors teaching in lean!</p>",
        "id": 270462580,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838132
    },
    {
        "content": "<p>And I meant <strong>actual textbook-style definitions</strong>.</p>",
        "id": 270462629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838162
    },
    {
        "content": "<p>Or at least very readable explanations.</p>",
        "id": 270462705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270462572\">said</a>:</p>\n<blockquote>\n<p>What are <code>Var</code> and <code>Exp</code> here?</p>\n</blockquote>\n<p>Var : set of propositional variables<br>\nExp: set of expressions in the language of propositional logic</p>\n<p>I'm sort of writing an interpreter for a propositional logic language, so like- <code>Var</code> is the (only) atomic value in the language, Exp is the set of all expressions in the language</p>",
        "id": 270462747,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838224
    },
    {
        "content": "<p>Why do you also need <code>atom</code>?</p>",
        "id": 270462854,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270462629\">said</a>:</p>\n<blockquote>\n<p>And I meant <strong>actual textbook-style definitions</strong>.</p>\n</blockquote>\n<p>Ah I'm sorry! Thing is we construct Exp inductively, so a mathematical definition for <code>Exp</code> will be:</p>\n<p><code>Exp := Atom | not Exp | Exp and Exp | Exp or Exp | Exp implies Exp</code> (and, or, not etc. being operators)<br>\nand <code>Atom := Atom var</code></p>",
        "id": 270462974,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838328
    },
    {
        "content": "<p>When <code>and</code>, <code>or</code> etc enter the scene?</p>",
        "id": 270462994,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838337
    },
    {
        "content": "<p>Ah, OK</p>",
        "id": 270463082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270462271\">said</a>:</p>\n<blockquote>\n<p>If <code>Prp = Sort 1</code> (equivalently, <code>Type</code>), then you can extract information from inductive structures in <code>Prp</code>.</p>\n</blockquote>\n<p>what do you mean by extracting information from inductive structures in <code>Prp</code> ?</p>",
        "id": 270463295,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838466
    },
    {
        "content": "<p>So, you actually need something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 270463300,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838469
    },
    {
        "content": "<p>I mean that you can <code>match</code> on them.</p>",
        "id": 270463369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838487
    },
    {
        "content": "<p>Or use equation compiler.</p>",
        "id": 270463389,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838499
    },
    {
        "content": "<p>Any two proofs of the same proposition are definitionally equal in Lean.</p>",
        "id": 270463408,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838515
    },
    {
        "content": "<p>So, once you have <code>(p : Prop) (h : p)</code>, you can't extract information from <code>h</code>.</p>",
        "id": 270463636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643838607
    },
    {
        "content": "<p>I did try defining <code>expr</code> as an inductive type, yes! Since this is for a teaching exercise, I was trying to see if this was an alternate method of doing the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">not</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">and</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">or</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">impl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prp</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">impl</span>\n</code></pre></div>",
        "id": 270463777,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270463408\">said</a>:</p>\n<blockquote>\n<p>Any two proofs of the same proposition are definitionally equal in Lean.</p>\n</blockquote>\n<p>Oh that explains why you can't extract info from things of type <code>Prop</code>- thanks!</p>",
        "id": 270463899,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270463389\">said</a>:</p>\n<blockquote>\n<p>Or use equation compiler.</p>\n</blockquote>\n<p>hmm is there any way to see what equation compiler does? documentation etc..</p>",
        "id": 270464021,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Projection.20on.20inductive.20types/near/270463369\">said</a>:</p>\n<blockquote>\n<p>I mean that you can <code>match</code> on them.</p>\n</blockquote>\n<p>I will try this, thanks</p>",
        "id": 270464070,
        "sender_full_name": "AdLucem",
        "timestamp": 1643838818
    },
    {
        "content": "<p>This is not the same thing</p>",
        "id": 270471755,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643842372
    },
    {
        "content": "<p>Because you can't use two operations in the same formula</p>",
        "id": 270471792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643842403
    },
    {
        "content": "<p>There is potential for confusion here because you are trying to define a type of \"propositions\" while Lean also has a different notion that it calls propositions.</p>",
        "id": 270472823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643842908
    },
    {
        "content": "<p>As far as Lean is concerned, your propositional formulas might as well be any other inductive type such as <code>list</code>.</p>",
        "id": 270472909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643842954
    },
    {
        "content": "<p>If you want to define formulas etc. before you decide what operations are allowed, then you can use this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">operation</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">arity</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">bool</span> <span class=\"n\">arity</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">preexpr</span> <span class=\"o\">(</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">operation</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">preexpr</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">operation</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ho</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">∈</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preexpr</span> <span class=\"n\">o.arity</span>\n<span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">preexpr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">preexpr</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preexpr</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Exercise: fill in the blanks</span>\n<span class=\"kd\">def</span> <span class=\"n\">preexpr.eval</span> <span class=\"o\">{</span><span class=\"n\">ops</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">operation</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">preexpr</span> <span class=\"n\">ops</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">bool</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">preexpr.atom</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">preexpr.op</span> <span class=\"n\">o</span> <span class=\"n\">ho</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">preexpr.apply</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 270476908,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643845217
    },
    {
        "content": "<p>UPD: in the last definition you need to tell Lean that it is decreasing on the second argument, not on the first one. I don't remember how to do it.</p>",
        "id": 270477771,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643845796
    },
    {
        "content": "<blockquote>\n<p>hmm is there any way to see what equation compiler does? documentation etc..</p>\n</blockquote>\n<p>Chapters 7 and 8 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> talk about inductive types and the equation compiler.</p>",
        "id": 270479769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643847000
    }
]