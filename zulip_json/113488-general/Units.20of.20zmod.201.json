[
    {
        "content": "<p>The whole thread on fintypes got started because my computer failed to derive <code>fintype</code> for <code>units (zmod n)</code>. I see why now: it works for <code>units (zmod (n+1))</code> because data.zmod.basic has an instance of <code>fintype</code> only for <code>[fact (0 &lt; n)]</code>, but this doesn't work for <code>units (zmod 0)</code>. </p>\n<p>I'm trying to figure out how/if I can write an case-by-case instantiation for <code>instance : Π (n : ℕ), fintype (units (zmod n))</code>? I'm a bit weirded out by the <code>n=1</code> case. Here, <code>zmod 1</code> is defined as <code>fin 1</code>. But later in <code>data.zmod.basic</code> we have <code>instance comm_ring : Π (n : ℕ), comm_ring (zmod n)</code>. <code>comm_ring</code> extends <code>comm_monoid</code>, which extends <code>monoid</code> which extends <code>mul_one_class</code> which extends <code>has_one</code>. Does this mean <code>zmod 1</code> <code>has_one</code>? Does mathlib consider 1 to be 0 for this ring? Is <code>0</code> then a unit of <code>zmod 1</code>?</p>",
        "id": 250057504,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629412357
    },
    {
        "content": "<p>Yes, zmod 1 has 0 = 1</p>",
        "id": 250057574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629412441
    },
    {
        "content": "<p>So I guess 0 is a unit there</p>",
        "id": 250057630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629412459
    },
    {
        "content": "<p>This means that <code>p.prime ↔ fintype.card (units (zmod p)) = p - 1</code> is technically true, even for <code>p=1</code>, since the right hand side is miraculously false due to  <code>zmod 1</code> having this unit. Do I just write the theorem this way, or do I put an unnecessary <code>(hp : 1 &lt; p)</code> to warn the user?</p>",
        "id": 250057707,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629412558
    },
    {
        "content": "<p><code>zmod 1 \\~- fin 1 \\~- unit</code> are all the trivial ring</p>",
        "id": 250057769,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629412613
    },
    {
        "content": "<p>What do you mean by \"warn the user\"?</p>",
        "id": 250057844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629412692
    },
    {
        "content": "<p><del>And what do you mean by \"unnecessary\"?</del></p>",
        "id": 250057847,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629412702
    },
    {
        "content": "<p><code>fintype.card (units (zmod 1)) = 1</code> because <code>0 = 1</code>.</p>",
        "id": 250057873,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629412746
    },
    {
        "content": "<p>I don't see the issue with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 250057911,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629412796
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is not prime, and <code>fintype.card (units (zmod 1)) = 1</code> which is different from <code>1 - 1</code>.</p>",
        "id": 250057975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629412822
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_zmod.fintype</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">units_int.fintype</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">units.fintype</span>\n</code></pre></div>",
        "id": 250057981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629412828
    },
    {
        "content": "<p>you can do a bit better here and make this a computable instance since being a unit in <code>zmod n</code> is decidable</p>",
        "id": 250058044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629412886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/Units.20of.20zmod.201/near/250057844\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"warn the user\"?</p>\n</blockquote>\n<p>I figured it would save time for someone who is accidentally trying to prove a theorem that is false for n=1, but I guess if that happens you just include <code>1 &lt; p</code> in your own theorem.</p>",
        "id": 250059434,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629414112
    },
    {
        "content": "<p>For example, I sometimes do <code>library_search</code> for a theorem, get no results, waste some time trying to implement the lemma myself, only to realize I was missing an edge case precondition, and with that precondition, <code>library_search</code> works instantly.</p>",
        "id": 250059843,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629414424
    },
    {
        "content": "<p><code>slim_check</code> can be useful for catching edge cases / missing preconditions, but it only works on computable predicates, generally theorems about lists and nat</p>",
        "id": 250060232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629414805
    },
    {
        "content": "<p>it's not likely to be able to show that your group is not actually finite</p>",
        "id": 250060314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629414851
    },
    {
        "content": "<p>For the precondition case, sometimes \"suggest\" is able to suggest partial proofs</p>",
        "id": 250061527,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629415926
    },
    {
        "content": "<p>Using this instance, I hit a snag soon after. Here is the mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_zmod.fintype</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">units_int.fintype</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">units.fintype</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_iff_card_units</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.prime</span> <span class=\"bp\">↔</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">zmod.card_units</span> <span class=\"n\">p</span> <span class=\"o\">({</span><span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">p_prime</span><span class=\"o\">}),</span>\n    <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get a long error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">fintype.card</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.fintype</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">))))</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.fintype</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod.comm_ring</span> <span class=\"n\">p</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"n\">units_zmod.fintype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>With one talking about fields and the other not, it seems to me like this could be an issue with the instance code. What causes this and how can it be fixed?</p>",
        "id": 250319409,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629704152
    },
    {
        "content": "<p>I don't understand the error, but <code>convert</code> can avoid it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">fact.mk</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">zmod.card_units</span> <span class=\"n\">p</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 250320465,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629705048
    },
    {
        "content": "<p>Cool, thank you</p>",
        "id": 250320664,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629705209
    },
    {
        "content": "<p>`cases p_prime would probably work too</p>",
        "id": 250322691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629706831
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 250322772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629706889
    },
    {
        "content": "<p>`cases p_prime would probably work too</p>",
        "id": 250322773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629706889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> did you manage to prove the other direction? I found it surprisingly hard</p>",
        "id": 250327924,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629710492
    },
    {
        "content": "<p>I have made a PR and I am working on it. Currently I am working in the direction of proving that the totient of p is p-1 iff p is prime.</p>",
        "id": 250328068,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629710610
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8820\">#8820</a></p>",
        "id": 250328082,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629710629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> , you may be interested in <a href=\"https://github.com/leanprover-community/mathlib/tree/mul_ind\">branch#mul_ind</a> (not sure what the PR number is)</p>",
        "id": 250330514,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629712464
    },
    {
        "content": "<p>the issue btw is that you have a fintype diamond, and it's using two different instances</p>",
        "id": 250330736,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629712600
    },
    {
        "content": "<p>this'll do your other half:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">fact.mk</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">units.fintype</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">zmod.card_units_eq_totient</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.totient_prime_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 250333386,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629714503
    },
    {
        "content": "<p>My code is here if you want to reuse anything - <a href=\"https://gist.github.com/Ruben-VandeVelde/a9f81b2ec21f21a0b4d7f6ac29fbb023\">https://gist.github.com/Ruben-VandeVelde/a9f81b2ec21f21a0b4d7f6ac29fbb023</a></p>",
        "id": 250334161,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629715129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Units.20of.20zmod.201/near/250333386\">said</a>:</p>\n<blockquote>\n<p>this'll do your other half:</p>\n</blockquote>\n<p>I'm a bit confused by this - if I just plug this in I get unknown identifier <code>h</code>. What is <code>h</code> here?</p>",
        "id": 250426719,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629762373
    },
    {
        "content": "<p>Perhaps <code>h : 0 &lt; p</code>?</p>",
        "id": 250426897,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629762529
    },
    {
        "content": "<p>Yep, this was it.</p>",
        "id": 250433876,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629769373
    },
    {
        "content": "<p>I'm encountering a few more diamonds here: I found I can avoid them by just getting rid of the instance of <code>units_zmod.fintype</code> and simply introducing <code>[fact (0 &lt; p)]</code> at the top of the file.</p>",
        "id": 250883102,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630039863
    },
    {
        "content": "<p>What diamond? <code>fintype</code> is a subsingleton btw.</p>",
        "id": 250884102,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630040832
    },
    {
        "content": "<p>I was told the cause of my issues above was a diamond. Since I was encountering more bugs that manifested in exactly the same way, I assume the cause was the same.<br>\nI'm not sure I understand well enough to say exactly what the diamond is. I understand a diamond is when instances inherit from each other in a diamond shaped pattern, but I don't know why this causes problems. Perhaps <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> can explain to me and all of us what exactly the instances involved in this diamond were.</p>",
        "id": 250885547,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630042419
    },
    {
        "content": "<p>you had two instances; <code>units_zmod.fintype</code> and the default one <code>units.fintype</code> (<code>fintype</code> → <code>fintype</code> on <code>units</code>).  Most <code>fintype</code> card stuff is written with <code>units.fintype</code>, whilst if you don't sprinkle that <code>fact</code> in, you'll be getting <code>units_zmod.fintype</code>; this means you'll have to use <code>convert/congr</code> a lot, even with case analysis</p>",
        "id": 250897775,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630051738
    },
    {
        "content": "<p>(<code>convert</code> + <code>congr</code> work because, as Yakov said, <code>fintype</code> is a subsingleton)</p>",
        "id": 250897806,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630051760
    }
]