[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127451506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911224
    },
    {
        "content": "<p>doesn't work</p>",
        "id": 127451510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911228
    },
    {
        "content": "<p>moans about the let</p>",
        "id": 127451512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911233
    },
    {
        "content": "<p>Am I doomed to write <code>power_bounded_elements R</code> throughout this entire definition?</p>",
        "id": 127451518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911271
    },
    {
        "content": "<p>well, we can make some notation for it, right?</p>",
        "id": 127451561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527911307
    },
    {
        "content": "<p>Isn't double-superscript-circ common for this?</p>",
        "id": 127451618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527911432
    },
    {
        "content": "<p>aah here notation will solve my problem</p>",
        "id": 127451693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911627
    },
    {
        "content": "<p>wait</p>",
        "id": 127451695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911634
    },
    {
        "content": "<p>oh I have to leave the stupid gap</p>",
        "id": 127451697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911639
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mtext> </mtext><msup><mrow></mrow><mo>∘</mo></msup></mrow><annotation encoding=\"application/x-tex\">R\\ {}^\\circ</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"><span class=\"mspace\"> </span><span class=\"mord\"></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∘</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 127451738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911655
    },
    {
        "content": "<p>need the gap because of some fussy tokenizer</p>",
        "id": 127451740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911658
    },
    {
        "content": "<p>It feels a bit like we are back to the typography of SGA etc, doesn't it?</p>",
        "id": 127451804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527911836
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am unsure how to choose between notation and defs when you don't need infix/postfix parsing</p>",
        "id": 127451805,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527911838
    },
    {
        "content": "<p>I assume you're making it into a postfix operator. Why not make the whole thing (<code>R∘</code>) a notation?</p>",
        "id": 127451843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527911886
    },
    {
        "content": "<p>You mean including the R?</p>",
        "id": 127451851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527911911
    },
    {
        "content": "<p>Exactly</p>",
        "id": 127451853,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527911919
    },
    {
        "content": "<p>But that's variable</p>",
        "id": 127451854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527911923
    },
    {
        "content": "<p><code>notation : R `ᵒ` := power_bounded_subring R</code></p>",
        "id": 127451861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911947
    },
    {
        "content": "<p>How does notation work? I never know. I need some notation notes</p>",
        "id": 127451862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911958
    },
    {
        "content": "<p>If you declare it with <code>variable</code>, and make your notation local, that should be ok</p>",
        "id": 127451863,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527911971
    },
    {
        "content": "<p>I know I can search through TPIL</p>",
        "id": 127451864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911971
    },
    {
        "content": "<p>Yay for Zulip's parsing of \"`\".</p>",
        "id": 127451865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527911971
    },
    {
        "content": "<p>Use more ticks until it works</p>",
        "id": 127451866,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527911991
    },
    {
        "content": "<p>right</p>",
        "id": 127451867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527911994
    },
    {
        "content": "<p>I use two outer ticks</p>",
        "id": 127451870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Aah, it's not <code>variable</code> like that. It is really variable in the notation.</p>",
        "id": 127451919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912009
    },
    {
        "content": "<p>Like <code>x</code> and <code>y</code> in <code>x + y</code>.</p>",
        "id": 127451920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912023
    },
    {
        "content": "<p>I can't get the notation to work though</p>",
        "id": 127451923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912055
    },
    {
        "content": "<p>I must have misunderstood. I thought you wanted a local shorthand for the current file.</p>",
        "id": 127451934,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912107
    },
    {
        "content": "<p>Hmm, but now you didn't leave a gap in the ticks.</p>",
        "id": 127451935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912108
    },
    {
        "content": "<p>I think it wants spaces around the <code>\\circ</code></p>",
        "id": 127451980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912146
    },
    {
        "content": "<p>Otherwise, you can use <code>postfix `ᵒ` := power_bounded_subring</code></p>",
        "id": 127451981,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912154
    },
    {
        "content": "<p>oh that looks like a nicer way to do it</p>",
        "id": 127451983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912177
    },
    {
        "content": "<p>it wants a number</p>",
        "id": 127451988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912223
    },
    {
        "content": "<p><code>postfix `ᵒ` : 37 := power_bounded_subring</code></p>",
        "id": 127451990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912231
    },
    {
        "content": "<p>that should do it</p>",
        "id": 127452028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912245
    },
    {
        "content": "<p>I must say, operator precedence is something else I am not sure I have a good feeling about</p>",
        "id": 127452034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912286
    },
    {
        "content": "<p>I guess I want this one to be very sticky</p>",
        "id": 127452035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912292
    },
    {
        "content": "<p>so should it be like 6 or 999999?</p>",
        "id": 127452042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912309
    },
    {
        "content": "<p>To be fair, I'm not fond of putting precedence on a linear scale. I feel like specifying a partial order would be easier</p>",
        "id": 127452044,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912351
    },
    {
        "content": "<p>OK how about this:</p>",
        "id": 127452083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912389
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">perfectoid_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_prime</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">Tate_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_complete</span> <span class=\"o\">:</span> <span class=\"n\">complete</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_uniform</span>  <span class=\"o\">:</span> <span class=\"n\">uniform</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ramified</span>    <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">ᵒ</span><span class=\"o\">,</span>\n                 <span class=\"o\">(</span><span class=\"n\">is_pseudo_uniformizer</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">Frob</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">ᵒ</span><span class=\"o\">,</span>\n                 <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">ᵒ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127452086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912402
    },
    {
        "content": "<p>Think about the operators that are likely to appear in the same formula (including <code>=</code>) and what should take precedence</p>",
        "id": 127452087,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912407
    },
    {
        "content": "<p>I want the circ to take precedence in the sense that I want R circ being evaluated ASAP</p>",
        "id": 127452094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912441
    },
    {
        "content": "<p>i.e. <code>A x B o</code> is definitely <code>A x (B o)</code></p>",
        "id": 127452097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912461
    },
    {
        "content": "<p>precedence and evaluation order are not the same</p>",
        "id": 127452098,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I reckon that looks fairly readable</p>",
        "id": 127452099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912478
    },
    {
        "content": "<p>Simon I don't know anything about this stuff</p>",
        "id": 127452139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912503
    },
    {
        "content": "<p>Yes, this looks very good. I hope you can maintain this throughout the top-down approach.</p>",
        "id": 127452140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912507
    },
    {
        "content": "<p>and I know I can learn it but I'm not that interested in it</p>",
        "id": 127452141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912515
    },
    {
        "content": "<p>I'll leave you guys to it</p>",
        "id": 127452144,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912533
    },
    {
        "content": "<p>do you have a good suggestion for a number?</p>",
        "id": 127452145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912539
    },
    {
        "content": "<p>or else I'll leave it as 37 :-/</p>",
        "id": 127452150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912547
    },
    {
        "content": "<p>same as unary minus?</p>",
        "id": 127452151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912552
    },
    {
        "content": "<p>which is 65</p>",
        "id": 127452157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912575
    },
    {
        "content": "<p>That looks like asking for trouble. Go one over or one below</p>",
        "id": 127452159,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912590
    },
    {
        "content": "<p>Is there anything below <code>50</code> at the moment?</p>",
        "id": 127452198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912606
    },
    {
        "content": "<p>tons</p>",
        "id": 127452201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912611
    },
    {
        "content": "<p>propositional stuff mostly</p>",
        "id": 127452203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912620
    },
    {
        "content": "<p>50 is <code>=</code>, so that's about as low as you get for atomic propositions</p>",
        "id": 127452208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912644
    },
    {
        "content": "<p>ha ha (-Ro) -- is that what you're worried about Simon?</p>",
        "id": 127452209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912650
    },
    {
        "content": "<p>but types go lower than that</p>",
        "id": 127452212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912654
    },
    {
        "content": "<p>can that sort of thing be an issue?</p>",
        "id": 127452213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912659
    },
    {
        "content": "<p>equal isn't really a problem</p>",
        "id": 127452216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912666
    },
    {
        "content": "<p>in fact it's important for having things be at the same level, like <code>a + b - c</code></p>",
        "id": 127452219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912686
    },
    {
        "content": "<p>which is left associated regardless of whether <code>+</code> or <code>-</code> comes first</p>",
        "id": 127452220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> If you want to squeeze out a little bit more readability, then maybe <code>Frob</code> should be phrased as a statement modulo <code>p</code>.</p>",
        "id": 127452267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912828
    },
    {
        "content": "<p>there aren't many postfix operators in standard lean; there is <code>⁻¹</code> which has a crazy high precedence <code>max+10</code></p>",
        "id": 127452268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm not sure what Lean does in that kind of situation and I can't think of reasons why either of (-R)o or -(Ro) would be always the best default</p>",
        "id": 127452307,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527912849
    },
    {
        "content": "<p>I wasn't sure how to do quotient rings in Lean</p>",
        "id": 127452309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912851
    },
    {
        "content": "<p>But I guess, you rather prefer avoiding quotients.</p>",
        "id": 127452310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912855
    },
    {
        "content": "<p>actually I recently learnt how to use quotient types</p>",
        "id": 127452311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912871
    },
    {
        "content": "<p>I was forced to</p>",
        "id": 127452312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912873
    },
    {
        "content": "<p>All notations come with a binding power, whichever is higher wins</p>",
        "id": 127452313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912893
    },
    {
        "content": "<p>I needed direct limits and Kenny's work is still not in mathlib</p>",
        "id": 127452315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527912899
    },
    {
        "content": "<p>that includes mixing pre/postfix</p>",
        "id": 127452321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> In both cases the unary minus doens't make much sense. (At least not in contemporary maths. Maybe someone wants to overload it, but that thought gives me shudders...)</p>",
        "id": 127452322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912943
    },
    {
        "content": "<p>So I guess in practice there won't be a problem.</p>",
        "id": 127452324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527912958
    },
    {
        "content": "<p>Since <code>R o</code> here is a type it really doesn't matter as long as it's higher than 50 or so</p>",
        "id": 127452364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527912982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I told you before that <code>57</code> is a better default value than <code>37</code>! Grothendieck was careful when choosing his prime!</p>",
        "id": 127452372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527913028
    },
    {
        "content": "<p>lol it would be funny if all the notation precedences were primes just because</p>",
        "id": 127452378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913072
    },
    {
        "content": "<p>Ooh, now I have a crazy question. What is the type of <code>65</code> in the notation for unary minus? Does it even have a type?</p>",
        "id": 127452379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527913074
    },
    {
        "content": "<p>It was once <code>num</code>, which was for a long time the only use of <code>num</code>. Now it's <code>nat</code></p>",
        "id": 127452420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913109
    },
    {
        "content": "<p><code>instance p : nat</code></p>",
        "id": 127452423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913120
    },
    {
        "content": "<p>Does this lead me into trouble?</p>",
        "id": 127452424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913126
    },
    {
        "content": "<p>I am sick of this p</p>",
        "id": 127452425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913134
    },
    {
        "content": "<p>I want access to it at all times and yet I never want to carry it around</p>",
        "id": 127452430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913148
    },
    {
        "content": "<p>It's a global variable</p>",
        "id": 127452434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913152
    },
    {
        "content": "<p>see e.g. <code>std.prec.max</code></p>",
        "id": 127452435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913152
    },
    {
        "content": "<p>In actual notation commands though the number is not an expression of type nat, it's a literal number string</p>",
        "id": 127452437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913187
    },
    {
        "content": "<p>although you can use <code>max</code> and other things in that spot too</p>",
        "id": 127452478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913207
    },
    {
        "content": "<p>wait</p>",
        "id": 127452482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913213
    },
    {
        "content": "<p>I have to make nat a class</p>",
        "id": 127452483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913219
    },
    {
        "content": "<p>oh jeez where's that bit in the manual</p>",
        "id": 127452484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913230
    },
    {
        "content": "<p>now I finally want to do it</p>",
        "id": 127452485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913236
    },
    {
        "content": "<p>Do you mean like <code>attribute [class] nat</code>?</p>",
        "id": 127452532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527913367
    },
    {
        "content": "<p>don't make <code>nat</code> a class</p>",
        "id": 127452581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913475
    },
    {
        "content": "<p>make <code>Prime</code> a class</p>",
        "id": 127452590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Can't you have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 127452635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527913600
    },
    {
        "content": "<p>Does that make <code>p</code> and <code>hp</code> available everywhere you want them?</p>",
        "id": 127452638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527913616
    },
    {
        "content": "<p>I'm using type class inference to carry around primality of p</p>",
        "id": 127452689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913717
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.nat.prime algebra.group_power\n\nclass Prime :=\n(p : ℕ) (pp : nat.prime p)\nopen Prime\n\nsection\nvariable [Prime]\n\nexample (R) [ring R] (x : R) : x ^ 2 = x ^ p := sorry\n\nend\n</pre></div>",
        "id": 127452690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913722
    },
    {
        "content": "<p>I thought <code>Prime</code> was supposed to be the subtype</p>",
        "id": 127452737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913839
    },
    {
        "content": "<p>it is</p>",
        "id": 127452738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913852
    },
    {
        "content": "<p>I suppose</p>",
        "id": 127452739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913862
    },
    {
        "content": "<p>this way you get to change the name from <code>val</code> to <code>p</code></p>",
        "id": 127452746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913890
    },
    {
        "content": "<p>Actually I said \"bundled structure\", so this is in some sense more faithful to the convention</p>",
        "id": 127452748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913899
    },
    {
        "content": "<p>Is this sort of stuff mathlib-acceptable?</p>",
        "id": 127452749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527913915
    },
    {
        "content": "<p>only if you use it a lot</p>",
        "id": 127452788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913928
    },
    {
        "content": "<p>I would prefer that you postprocess all your final theorems or whatever to make the prime explicit, but you can do this within the development if it helps</p>",
        "id": 127452791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527913982
    },
    {
        "content": "<p>is <code>p</code> actually <code>default nat</code> in that code snippet?</p>",
        "id": 127452806,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527914025
    },
    {
        "content": "<p>it's like <code>default nat</code> but not the same value</p>",
        "id": 127452846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914048
    },
    {
        "content": "<p>This is one of the important aspects of creating a new <code>class</code> - you get to create your own typeclass graph</p>",
        "id": 127452847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914085
    },
    {
        "content": "<p>in this case, since there are no instances of <code>Prime</code>, it will only ever pick up <code>[Prime]</code> in the context</p>",
        "id": 127452853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914115
    },
    {
        "content": "<p>maybe <code>fixed_prime</code> is a better name for this typeclass</p>",
        "id": 127452895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914195
    },
    {
        "content": "<p>at first glance, this seems kinda hackish to me, but I need to think about it some</p>",
        "id": 127452896,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527914208
    },
    {
        "content": "<p>It very much conveys what's going on</p>",
        "id": 127452897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527914209
    },
    {
        "content": "<p>the whole <code>variable [Prime]</code> has me for a loop</p>",
        "id": 127452901,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527914226
    },
    {
        "content": "<p>I won't be using it a lot for the definition of perfectoid spaces</p>",
        "id": 127452905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527914254
    },
    {
        "content": "<p>Same here. I still don't get how Lean figures out what <code>p</code> means in the line<br>\n<code>example (R) [ring R] (x : R) : x ^ 2 = x ^ p := sorry</code></p>",
        "id": 127452906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914257
    },
    {
        "content": "<p>it's just you'll use it all the time the moment you start proving theorems about them</p>",
        "id": 127452907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527914271
    },
    {
        "content": "<p>Since <code>Prime</code> was opened, that's <code>Prime.p</code></p>",
        "id": 127452908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914278
    },
    {
        "content": "<p>Aah, cool!</p>",
        "id": 127452947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914292
    },
    {
        "content": "<p>which has an implicit typeclass argument <code>[Prime]</code>, which is discovered in the context</p>",
        "id": 127452948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914308
    },
    {
        "content": "<p>So then once we start doing etale cohomology we want another class <code>fixed_coprime_prime</code>, and constructor <code>ℓ</code></p>",
        "id": 127452951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914346
    },
    {
        "content": "<p>And a proof that it is not <code>p</code></p>",
        "id": 127452954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class fixed_prime :=\n(p : ℕ)\n(pp : nat.prime p)\nopen fixed_prime\n\nclass fixed_coprime [fixed_prime] :=\n(q : ℕ)\n(co : nat.coprime p q)\n</pre></div>",
        "id": 127452998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914449
    },
    {
        "content": "<p>Mario, I really like this! I hope that it is not to hackish for Lean. This reflects how <code>p</code> is used in a lot of number theory/alg.geom. You just fix <code>p</code> at the beginning of your paper, and it doesn't change for 50 pages.</p>",
        "id": 127453000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914462
    },
    {
        "content": "<p>Yes, but the <code>ℓ</code> has to be prime as well. As in \"ℓ-adic cohomology\" etc...</p>",
        "id": 127453006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914501
    },
    {
        "content": "<p>I haven't attempted to use this technique before. I'd be interested to see how it goes</p>",
        "id": 127453007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914505
    },
    {
        "content": "<p>it feels like an end run around <code>parameter</code></p>",
        "id": 127453008,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527914508
    },
    {
        "content": "<p>you get the idea</p>",
        "id": 127453047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914528
    },
    {
        "content": "<p>Sure.</p>",
        "id": 127453050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914537
    },
    {
        "content": "<p>I will try to use it in the stuff on p-adic valuations.</p>",
        "id": 127453051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914550
    },
    {
        "content": "<p>Note that actually applying this for real primes, like if you want 57-adic cohomology, is a bit of a pain</p>",
        "id": 127453056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914624
    },
    {
        "content": "<p>Hmm, I see.</p>",
        "id": 127453091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914643
    },
    {
        "content": "<p>well, maybe not so bad, you can use <code>local instance</code>s or <code>haveI</code> to introduce a <code>fixed_prime</code> without doing so globally</p>",
        "id": 127453097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914680
    },
    {
        "content": "<p>That's a bit of a problem, I guess. For example squares in Q_2 behave different from squares in Q_p for p ≠ 2.</p>",
        "id": 127453098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914691
    },
    {
        "content": "<p>I mean, worst case scenario is you have to write <code>@thm</code> whenever you want to apply the theorem in a non <code>p</code> case</p>",
        "id": 127453145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914775
    },
    {
        "content": "<p>Yes, I see. That makes sense.</p>",
        "id": 127453146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914789
    },
    {
        "content": "<p>also you can prove things with the assumption <code>p = 2</code></p>",
        "id": 127453148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914801
    },
    {
        "content": "<p>Right.</p>",
        "id": 127453150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914810
    },
    {
        "content": "<p>Actually the <code>@</code> notation reflects exactly how most mathematicians feel about working with one concrete prime. (Of course not the symbol \"@\", but the fact that all of a sudden you want to be specific about <code>p</code>.)</p>",
        "id": 127453157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914863
    },
    {
        "content": "<p>You only do this in 1% of the time. And it always feels a bit disorienting.</p>",
        "id": 127453194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914885
    },
    {
        "content": "<p>whence the 57 thing</p>",
        "id": 127453198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527914942
    },
    {
        "content": "<p>I really think that we have theorems about <code>Q_p</code>, <code>Q_ℓ</code> and <code>Q_2</code>, and that is about it (-;</p>",
        "id": 127453202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527914946
    },
    {
        "content": "<p>one other messy thing is if you want to use <code>l</code> as your <code>p</code></p>",
        "id": 127453247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527915004
    },
    {
        "content": "<p>So, have to unpack stuff with <code>@</code> is expected behaviour.</p>",
        "id": 127453252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915012
    },
    {
        "content": "<p>Aah, yes, that might get messy...</p>",
        "id": 127453253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915020
    },
    {
        "content": "<p>Also, there is a very delicate theory about what happens when <code>ℓ = p</code>...</p>",
        "id": 127453254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915054
    },
    {
        "content": "<p>Headache ensues</p>",
        "id": 127453255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915059
    },
    {
        "content": "<p>(Note: this is not relevant for defining perfectoid spaces. But it will definitely pop up later.)</p>",
        "id": 127453261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915110
    },
    {
        "content": "<p>Long story short, this technique is useful for fixing a value for a long time, with the downside being it makes unfixing it hard</p>",
        "id": 127453302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527915131
    },
    {
        "content": "<p>parameters are easier to unfix, but then they stay unfixed</p>",
        "id": 127453303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527915160
    },
    {
        "content": "<p>Ok, so maybe we should do the same thing as with multiplicative groups and additive groups. And just develop the theory both for <code>p</code> and for <code>ℓ</code>...</p>",
        "id": 127453347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915247
    },
    {
        "content": "<p>That's not unreasonable; the theorems are defeq so you just have to state them</p>",
        "id": 127453351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527915302
    },
    {
        "content": "<p>Hmm, but sometimes you also want to compare what happens at <code>ℓ_1</code> and <code>ℓ_2</code>... and both are different from <code>p</code>.</p>",
        "id": 127453354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915304
    },
    {
        "content": "<p>maybe <code> ℓ</code> shouldn't be as fixed as <code>p</code></p>",
        "id": 127453360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527915334
    },
    {
        "content": "<p>Or statements like <code>\\forall ℓ : (ℓ ≠ p) blabla</code>.</p>",
        "id": 127453361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915344
    },
    {
        "content": "<p>an argument for using a parameter might be that when you use <code>haveI</code> and friends, you don't get to benefit from type class caching... although I am unsure how much time Lean spends searching the type class graph - it's not something I have a good feel for</p>",
        "id": 127453401,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527915371
    },
    {
        "content": "<p>in practice I've never seen an appreciable difference from using <code>haveI</code></p>",
        "id": 127453402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527915421
    },
    {
        "content": "<p>Ok, maybe <code>ℓ</code> should indeed have less fixiness than <code>p</code>.</p>",
        "id": 127453407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527915427
    },
    {
        "content": "<p>I think it might be a bigger deal for people working in interactive tactic mode... who have very large proofs / definitions</p>",
        "id": 127453505,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527915659
    },
    {
        "content": "<p>again, it ::sounds:: scary to me, also because I don't mind at all being explicit, but that may be because I don't have enough Lean experience</p>",
        "id": 127453512,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527915699
    },
    {
        "content": "<p>would it affect memoization? suppose you had</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">myDef</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">expensive_tac1</span><span class=\"o\">,</span>  <span class=\"c1\">-- uses typeclass inference somewhere</span>\n  <span class=\"n\">expensive_tac2</span>  <span class=\"c1\">-- does this mean we can&#39;t memoize the results of expensive_tac1 if we disable type class cache?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127453756,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527916215
    }
]