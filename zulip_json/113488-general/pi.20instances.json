[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> could you have a look at the wonderful tactics that <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> wrote for me in <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean</a> and tell me whether this is suitable for mathlib? Remember the mathematical goals is to have instances of algebraic structures for Pi products of groups, rings, modules etc. and the Lean goal is to avoids writing tons of lines like <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/f47348abf8515e23bd485683d8b351c7fd89c70f/src/indexed_product.lean#L92\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/f47348abf8515e23bd485683d8b351c7fd89c70f/src/indexed_product.lean#L92\">https://github.com/PatrickMassot/lean-differential-topology/blob/f47348abf8515e23bd485683d8b351c7fd89c70f/src/indexed_product.lean#L92</a></p>",
        "id": 123598593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520841866
    },
    {
        "content": "<p>It seems a bit overkill, but it is clearly effective and I'd hate to throw a nice tactic like that away. Sure, PR away</p>",
        "id": 123598652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520842022
    },
    {
        "content": "<p>(Re: overkill, consider that the tactic + proofs have actually <em>increased</em> the overall size of the file, from 100 to 156 lines, and it looks like you already have covered most of the algebraic hierarchy there, so I think that's nearly its complete applicability.)</p>",
        "id": 123598704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520842163
    },
    {
        "content": "<p>I think the psychological impact will be different when those instances will be spread over five files instead of one</p>",
        "id": 123598754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520842265
    },
    {
        "content": "<p>Would it make more worthwhile if we used the same tactic to prove that <code>vector n α</code> conforms to a given structure if <code>α</code> does and that it is true for other applicative functors than <code>vector n</code>?</p>",
        "id": 123598756,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520842282
    },
    {
        "content": "<p>And also, I think this is really cool tactic. I can't wait for the making of tutorial that Simon promised to write soon.</p>",
        "id": 123598797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520842326
    },
    {
        "content": "<p>:) I'll get right on that. I might procrastinate a bit with the <code>mono</code> tactic, I hope you'll forgive me</p>",
        "id": 123598844,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520842455
    },
    {
        "content": "<p>I can see how this would generalize to all applicative functors, and I agree that would increase the applicability. (Again, I'm not actually rejecting the tactic version, it is always nice to have a new tactic if only as a future example and base for later expermentation. I just probably would have tried to find a more efficient way to write the proofs, say by using <code>refine</code>, rather than automating the entire process.)</p>",
        "id": 123599072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520842998
    },
    {
        "content": "<p>Cool</p>",
        "id": 123599166,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843187
    },
    {
        "content": "<p>I do take your point that it's making more code rather than less. It should withstand a lot of reengineering of the hierarchy though.</p>",
        "id": 123599179,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843246
    },
    {
        "content": "<p>I'm not sure you could do much better than the one-line proofs that were there. For me, I think that was an interesting exercise. I'm especially interested to see how the code can be improved now</p>",
        "id": 123599286,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843461
    },
    {
        "content": "<p>since all the proofs follow the same script, you can abbreviate it with <code>refine {..}; funext; simp</code> or what have you</p>",
        "id": 123599296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520843507
    },
    {
        "content": "<p>but for <code>simp</code> to work, don't you need all the laws of all the involved classes to be labelled <code>simp</code>?</p>",
        "id": 123599342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843566
    },
    {
        "content": "<p>I don't know how I'd implement it but if we could use the same tag system that the <code>case</code> system relies on, when we call <code>refine { .. }</code> we could tag each goal with the field that it responds to.</p>",
        "id": 123599395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843662
    },
    {
        "content": "<p>It would be more generally applicable and would probably shrink those scripts</p>",
        "id": 123599401,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843684
    },
    {
        "content": "<p>I would just add anything that isn't a simp lemma to the bracket list until it works</p>",
        "id": 123599413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520843738
    },
    {
        "content": "<p>Here obviously I'm thinking as a proof writer not a tactic writer</p>",
        "id": 123599458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520843797
    },
    {
        "content": "<p>It's a cool idea to use tags with <code>refine {..}</code>. You would have to ask <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> about that</p>",
        "id": 123599468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520843858
    },
    {
        "content": "<p>That makes sense and that's robust enough</p>",
        "id": 123599469,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843859
    },
    {
        "content": "<p>Glad you like it :) I'll talk to him about it</p>",
        "id": 123599510,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520843887
    },
    {
        "content": "<blockquote>\n<p>(Re: overkill, consider that the tactic + proofs have actually <em>increased</em> the overall size of the file, from 100 to 156 lines, and it looks like you already have covered most of the algebraic hierarchy there, so I think that's nearly its complete applicability.)</p>\n</blockquote>\n<p>Kenny and I had to prove that a slightly complicated structure was a ring, and our current effort looks like this:</p>",
        "id": 123601977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520849135
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/60db6a688861ec7a735e5818eb3d992cf8e2d7a5/src/scheme.lean#L368\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/60db6a688861ec7a735e5818eb3d992cf8e2d7a5/src/scheme.lean#L368\">https://github.com/kbuzzard/lean-stacks-project/blob/60db6a688861ec7a735e5818eb3d992cf8e2d7a5/src/scheme.lean#L368</a></p>",
        "id": 123601978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520849136
    },
    {
        "content": "<p>There's a lot of repeating <code>λ _, structure_presheaf_value.ext _ _ _ _ $ λ _ _, </code> which I felt might have been better dealt with by a general \"maps to a ring with certain properties form a ring\" tactic.</p>",
        "id": 123602037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520849195
    },
    {
        "content": "<p>I can have a look and see if the same tactics could apply</p>",
        "id": 123602167,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520849453
    },
    {
        "content": "<p>I'll have a look tomorrow. Time for bed now</p>",
        "id": 123602301,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520849697
    },
    {
        "content": "<p>Hi, <code>pi.monoid</code> defines <code>one := eq.mpr monoid._proof_2 (λ (_x : I), monoid.one (f _x))</code> where <code>monoid._proof_2</code> is a <code>rfl</code>. I tried to understand which line in <code>pi_instances</code> creates this <code>eq.mpr</code> but failed to understand the code of <code>derive_field</code>. <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  Could you please explain what happens there?</p>",
        "id": 188019557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581521110
    }
]