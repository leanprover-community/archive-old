[
    {
        "content": "<p>Hey, I originally posted the question here (<a href=\"https://github.com/leanprover/lean/issues/1993#issuecomment-462112225\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1993#issuecomment-462112225\">https://github.com/leanprover/lean/issues/1993#issuecomment-462112225</a>) if reading it there wouldn’t be too much trouble. The question basically revolves around why two nearly identical proofs of false are interpreted differently in Lean. One proof shows false and results in a negation, then other results in a double negation. The natural deduction for each are both very similar, however the Lean proofs must vary in where the assumptions are placed for it to be valid, which I don’t understand.</p>",
        "id": 157965656,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549786379
    },
    {
        "content": "<p>This example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"bp\">¬¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</pre></div>\n\n\n<p>is almost correct, but the type of the <code>show</code> is wrong - it should be <code>show false, from h2 h1</code></p>",
        "id": 157965714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549786452
    },
    {
        "content": "<p><code>show</code> will assert the type of the thing you are about to write. I can insert a bunch more shows to see how the <code>assume</code> lines change things:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬¬</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"bp\">¬¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</pre></div>",
        "id": 157965738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549786534
    },
    {
        "content": "<p>This reflects how the first line above an -&gt;I rule is the consequent of the implication, without mentioning the LHS which has gone into an assumption</p>",
        "id": 157965802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549786649
    },
    {
        "content": "<p>Ahh ok so that makes it more clear how it can be broken down. So the only reason we can say show not not B, from assume h2: not B, is because of the line after it then? I think that makes more sense to me now</p>",
        "id": 157966283,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549787634
    },
    {
        "content": "<p><code>show X</code> means \"the goal is X\", not \" I can show X\"</p>",
        "id": 157968842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549792944
    },
    {
        "content": "<p>Sure, but the only reason we can show ¬¬B from ¬B, is if we show false right after, using ¬B (so that we can negate ¬B to get ¬¬B), right? If that is the case, why does it matter where I assume h2 : ¬B? For example, in the following</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</pre></div>\n\n\n<p>I assume the negation of the RHS right away, and I don't have to write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</pre></div>\n\n\n<p>(which is actually invalid which slightly confuses me)</p>",
        "id": 157982327,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549817846
    },
    {
        "content": "<p>You write <code>show false</code> when Lean was expecting a proof of <code>¬B</code></p>",
        "id": 157982394,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549817965
    },
    {
        "content": "<p>What are you trying to explain with that trivial example? You could write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h1</span>\n</pre></div>",
        "id": 157982453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549818060
    },
    {
        "content": "<p>Or, the sober version: <code>example : ¬ B → ¬ B := id</code></p>",
        "id": 157982469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549818085
    },
    {
        "content": "<p>Well, I guess I'm just confused with the positioning of <code>assume</code>, with regards to <code>show</code>. In the first example of my previous message,<code>assume h2: B,\n  show false, from h1 h2</code> is valid, but <code>show false, from assume h2: B, h1 h2</code> is not; in both, I assume <code>h2: B</code>, just in different places</p>",
        "id": 157982530,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549818201
    },
    {
        "content": "<p>Do you know how to use <code>_</code> in order to write proof terms?</p>",
        "id": 157983017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549818995
    },
    {
        "content": "<p>For instance, you can write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>Lean will give an error message describing what was the state and what it was waiting for when you left that <code>_</code> hole</p>",
        "id": 157983039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549819048
    },
    {
        "content": "<p>You could also first try to learn tactic mode where you see everything.</p>",
        "id": 157983092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549819086
    },
    {
        "content": "<p>Sure, but this seems to error out early:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>...not telling me why I can do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</pre></div>\n\n\n<p>...but not:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</pre></div>\n\n\n<p>...I assume the answer is in Mario's statement \"This reflects how the first line above an -&gt;I rule is the consequent of the implication, without mentioning the LHS which has gone into an assumption\", but I'm trying to figure out what exactly it means. Sorry, very new to lean and stuff.</p>",
        "id": 157983754,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549820170
    },
    {
        "content": "<p>Yes, the <code>_</code> trick is really good for working out what Lean is expecting next. There is a well defined logic and syntax for everything here but it takes some getting used to. I found tactic mode much easier when learning Lean, but I have a maths not a CS background</p>",
        "id": 157983758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549820192
    },
    {
        "content": "<p>If you write </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>You'll see that the current goal is <code>¬ B</code>. Writing <code>show false, from ...</code> is telling Lean that what follows is a proof of <code>false</code>. But Lean is expecting a proof of <code>¬ B</code>.</p>",
        "id": 157983842,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549820351
    },
    {
        "content": "<p><code>assume h2: B, h1 h2</code> is not a proof of <code>false</code>. It's a proof of <code>B -&gt; false</code>. That's what the <code>assume</code> is doing.</p>",
        "id": 157983912,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549820416
    },
    {
        "content": "<p>Ok thanks, it makes sense that <code>show false, from ...</code> is of course a proof of <code>false</code>, while lean is looking for <code>¬ B</code>. So I guess this works because if if I assume <code>h2: B</code> directly after <code>h1</code>, and proceed to show <code>false</code>, it becomes a proof of <code>¬ B</code>, which is what I needed originally. Ah the ordering of assumes/shows makes more sense now :) I see how this relates to my earlier double-negation question. Thanks so much!</p>",
        "id": 157985652,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549823673
    },
    {
        "content": "<p>You shouldn't think that \"assume X, ...\" is somehow putting the assumption X into some database for later use and isn't doing anything else. All these things have well-defined semantics and at the end of the day you're just writing a function. At any stage in the process there is a \"goal\". If the goal is \"X -&gt; Y\" then \"assume X, \" assumes X but also changes the goal to Y. If you work in tactic mode then you can see the tactic state at all times, which is all the assumptions <em>and the goal</em>, and this is what makes it so much easier to understand.</p>",
        "id": 157985880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549824104
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html</a> are some notes I wrote on doing basic logic in tactic mode.</p>",
        "id": 157985924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549824149
    },
    {
        "content": "<p>On the other hand, I know that people with a more CS background seem to prefer term mode. The exercise in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving In Lean</a> seem to go down well for those people -- that book does not introduce tactic mode until chapter 5 and it does a bunch of stuff using all this \"assume/show\" technique before that.</p>",
        "id": 157985986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549824270
    },
    {
        "content": "<p>Thank you, that explanation makes sense, it was clear that the placement of <code>assume</code>s was not arbitrary, but I could not quite see what the rationale always was, but that goal-based explanation helps a lot. Will also check out the notes you wrote, seems very helpful I appreciate it!</p>",
        "id": 158002567,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549853290
    },
    {
        "content": "<p>Btw, with regards to the book, is there any known repository of chapter exercise solutions? For ones I'm stuck on, I think it would be helpful to see the right way to frame things sometimes</p>",
        "id": 158002591,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549853377
    },
    {
        "content": "<p>I don't think there is a full solution manual, but if you post individual problems here I'm sure people will solve them before you can say \"no wait\"</p>",
        "id": 158002655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549853468
    },
    {
        "content": "<p>Cool, thanks for the tip, and all of the help</p>",
        "id": 158002656,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1549853498
    }
]