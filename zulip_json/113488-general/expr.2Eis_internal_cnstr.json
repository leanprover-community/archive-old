[
    {
        "content": "<p>What does <code>expr.is_internal_cnstr</code> do?</p>",
        "id": 135479383,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539100368
    },
    {
        "content": "<p>I've fiddled around with it but I can't get it to return anything except <code>none</code>.</p>",
        "id": 135479414,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539100402
    },
    {
        "content": "<p>In the C++ it looks like it's just checking if the expr is a constant and checking that the name of the constant ends with <code>_cnstr</code>. What would be an example of that?</p>",
        "id": 135479658,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539100632
    },
    {
        "content": "<p>Also <code>get_nat_value</code>, extracts a nat from a \"nat value macro\". But I can't see where nat value macros are used.</p>",
        "id": 135480278,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539101230
    },
    {
        "content": "<p>What do I need to do to get rid of the <code>failed to synthesize type class instance for ⊢ reflected e</code> error?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">def</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">e</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_string</span> <span class=\"err\">$</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">collect_univ_params</span> <span class=\"err\">$</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135480811,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539101760
    },
    {
        "content": "<p>I think <code>is_internal_cnstr</code> will rarely give you an answer. When it does, your expression will likely give you a bunch of trouble and that's why I wrote <code>tactic.pis</code> in mathlib to replace <code>expr.pis</code>.</p>",
        "id": 135493468,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539114236
    },
    {
        "content": "<blockquote>\n<p>What do I need to do to get rid of the <code>failed to synthesize type class instance for ⊢ reflected e</code> error?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">def</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">e</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_string</span> <span class=\"err\">$</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">collect_univ_params</span> <span class=\"err\">$</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>I don't know if there is a <code>reflected</code> instance for types in general. You may have to go through <code>to_expr</code></p>",
        "id": 135493562,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539114333
    }
]