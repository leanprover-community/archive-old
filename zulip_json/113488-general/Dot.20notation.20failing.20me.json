[
    {
        "content": "<p>Today, I've been let down by dot notation. And it hurts.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">equiv.set.compl</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span> <span class=\"c1\">-- α ≃ α</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set.compl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid field notation, 'set' is not a valid \"field\" because environment does not contain 'equiv.set'</span>\n<span class=\"cm\">  equiv.refl ?m_1</span>\n<span class=\"cm\">which has type</span>\n<span class=\"cm\">  ?m_1 ≃ ?m_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Any way we can get back along?</p>",
        "id": 249400151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628881562
    },
    {
        "content": "<p>There are two ways out of this; rename <code>set.compl</code> to <code>set_compl</code>, or use the hack I suggested in the <code>ideal.quotient.mk</code> thread</p>",
        "id": 249401890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628882427
    },
    {
        "content": "<p><code>equiv.set.compl</code> works because it's doing plain old namespace lookup, and <code>(equiv.refl _).set.compl</code> doesn't work because the extended dot notation starts with <code>(equiv.refl _).set</code> so tries to look for a thing called <code>equiv.set</code>.  Namespaces aren't \"things\".</p>\n<p>I think there are some runtime complexity reasons not to have it then followup with trying to look for <code>equiv.set.compl</code>, though I'm not sure why namespaces can't be \"things\" for the purpose of dot notation.</p>\n<p>I'm wondering if the following would be a sensible extension to Lean (if a bit hacky) so that it's possible to say how you want the dot notation to be interpreted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.«</span><span class=\"n\">set.compl</span><span class=\"bp\">»</span>\n</code></pre></div>\n<p>The hack is that guillemets are already used for symbol quotations, but the <code>.</code> is being intentionally reinterpreted as a dot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">equiv.set.</span><span class=\"bp\">«</span><span class=\"n\">compl</span><span class=\"bp\">»</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">equiv.</span><span class=\"bp\">«</span><span class=\"n\">set.compl</span><span class=\"bp\">»</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>",
        "id": 249401947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628882451
    },
    {
        "content": "<p>I wouldn't suggest using the guillemets like that; the whole point is so that you can have <code>.</code> as a legitimate character in a name component, so parsing them for dots would defeat the purpose - it would make it impossible to have an actual name component with a dot in it (there are no \"second level guillemets\")</p>",
        "id": 249403087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628882999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I agree it's a questionable idea, but this would only apply to the extended dot notation, so it might be OK.  An alternative is using another symbol for extended dot notation, like <code>(equiv.refl _)!set.compl</code>, but so many symbols already have a use.</p>\n<p>If you really wanted the quoted dot, then you'd still be free to write <code>equiv.«set.compl» (equiv.refl _)</code> for example.</p>",
        "id": 249403555,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628883233
    },
    {
        "content": "<p>Did you know that <code>^.</code> also does dot notation - it was the original syntax before we moved to <code>.</code> which has ambiguity with namespaces</p>",
        "id": 249403955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628883423
    },
    {
        "content": "<p>Oh, nice, so it's already been solved <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">^.</span><span class=\"n\">set.compl</span>\n</code></pre></div>",
        "id": 249404050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628883479
    },
    {
        "content": "<p>Ohohoh! A new trick for me <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 249404155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628883516
    }
]