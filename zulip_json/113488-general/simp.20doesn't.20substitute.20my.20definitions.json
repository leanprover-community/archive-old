[
    {
        "content": "<p>I'm defining a comm_ring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add'</span> <span class=\"n\">n</span>\n<span class=\"c1\">-- ... etc</span>\n</code></pre></div>\n<p>Then I need to prove stuff like add_zero, add_left_neg, etc.</p>\n<p>Here's the error I get:</p>\n<blockquote>\n<p>switched to simple application elaboration procedure because failed to use expected type to elaborate it, error message<br>\n  type mismatch, term<br>\n    add_def'' ?m_3 ?m_4<br>\n  has type<br>\n    ↑(add' ?m_3 ?m_4) = (?m_3.val + ?m_4.val) % ?m_1<br>\n  but is expected to have type<br>\n    ↑(add_semigroup.add na ⟨a, ha⟩) = ↑0</p>\n</blockquote>\n<p>How can I deal with this?</p>",
        "id": 296592368,
        "sender_full_name": "Igor Ernst",
        "timestamp": 1662040931
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be helpful</p>",
        "id": 296592528,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662040976
    },
    {
        "content": "<p>But it might be the case that the left hand sides will match fine. It's just unlikely that those right hand sides will match. It seems that you have to prove that something equals <code>0</code>, and <code>add_def''</code> seems to prove that something is equal to <code>(_ + _) % _</code></p>",
        "id": 296592980,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662041111
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">modular</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n      <span class=\"o\">⟨</span>\n        <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"kd\">begin</span>\n          <span class=\"n\">apply</span> <span class=\"n\">nat.mod_lt</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">nat.lt_of_succ_lt</span> <span class=\"n\">npos</span><span class=\"o\">,</span>\n        <span class=\"kd\">end</span>\n      <span class=\"o\">⟩</span>\n    <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">neg'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_lt_left_iff_lt_add</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hk</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_pos'</span><span class=\"o\">,</span> <span class=\"n\">lt_add_iff_pos_left</span><span class=\"o\">],</span>\n      <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n      <span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">neg'</span> <span class=\"n\">n</span> <span class=\"n\">npos</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">neg'</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span> <span class=\"o\">(</span><span class=\"n\">neg'</span> <span class=\"o\">⟨</span><span class=\"n\">a_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a_n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_def'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">ha</span><span class=\"o\">}</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">hb</span><span class=\"o\">},</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add'</span> <span class=\"n\">n</span> <span class=\"n\">npos</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_def''</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add'</span> <span class=\"n\">n</span> <span class=\"n\">npos</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.1</span> <span class=\"bp\">+</span> <span class=\"n\">b.1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">modN</span> <span class=\"o\">[</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add'</span> <span class=\"n\">n</span> <span class=\"n\">npos</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">}⟩,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_add.add</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_add.add</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">neg'</span> <span class=\"n\">n</span> <span class=\"n\">npos</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_add.add</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">set</span> <span class=\"n\">na</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">neg'</span> <span class=\"n\">n</span> <span class=\"n\">npos</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"k\">with</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">add_def''</span> <span class=\"n\">na</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- problem is here</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_def''</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 296593397,
        "sender_full_name": "Igor Ernst",
        "timestamp": 1662041215
    },
    {
        "content": "<p>I'm getting a bunch of errors in your file. But I think the relevant error can be solved as follows: <code>refine (@add_def'' n npos na ⟨a,ha⟩).trans _,</code></p>",
        "id": 296593958,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662041374
    },
    {
        "content": "<p>Taking a step back, it might be useful (albeit verbose) to state all <code>comm_ring</code> fields as lemmas about <code>add'</code> and then you can write <br>\n<code>add_left_neg := my_add_left_neg</code> where <code>my_add_left_neg</code> will have type <code>∀ (a : {k // k &lt; n}), add' (-a) a = 0</code></p>",
        "id": 296594288,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662041484
    },
    {
        "content": "<p>You can also use <code>change ∀ (a : {k // k &lt; n}), @add' n npos (@neg' n npos a) a = _,</code> as the first tactic in that block to manually unfold.</p>",
        "id": 296594744,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662041616
    },
    {
        "content": "<p>You might also want to start your file with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"kn\">include</span> <span class=\"n\">npos</span>\n</code></pre></div>\n<p>(and then not redeclare <code>n/npos</code> again in lemmas). This means that <code>n</code> and <code>npos</code> will be found my Lean automatically (assuming enough type information is around)</p>",
        "id": 296595249,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662041766
    },
    {
        "content": "<p>Very helpful, thanks a lot</p>",
        "id": 296596496,
        "sender_full_name": "Igor Ernst",
        "timestamp": 1662042199
    }
]