[
    {
        "content": "<p>Is there any way to make the definition of <code>functor</code> more universe polymorphic? If I define</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">topological_space</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Then I think I can use <code>f &lt;*&gt; T</code> only if the source and target of <code>f</code> live in the same universe.</p>",
        "id": 168405231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560867548
    },
    {
        "content": "<p>unfortunately no</p>",
        "id": 168407145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560868791
    },
    {
        "content": "<p>Is it a limitation of the underlying type theory?</p>",
        "id": 168407236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560868825
    },
    {
        "content": "<p>For it to be more universe polymorphic it has to be free-standing functions</p>",
        "id": 168407243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560868828
    },
    {
        "content": "<p>yes</p>",
        "id": 168407244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560868832
    },
    {
        "content": "<p>What is a free-standing function?</p>",
        "id": 168407269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560868847
    },
    {
        "content": "<p>i.e. <code>option.map</code> instead of the map component of <code>functor option</code></p>",
        "id": 168407297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560868869
    },
    {
        "content": "<p><code>s/i.e./e.g./</code></p>",
        "id": 168407334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560868903
    },
    {
        "content": "<p>You can't hold a lemma that says that <code>map</code> is functorial as a hypothesis, because that statement involves quantifying over universes so it would be an existential universe variable if it was a hypothesis. But you can prove that every particular polymorphic map function is functorial polymorphically</p>",
        "id": 168407508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560869008
    },
    {
        "content": "<p>Ok, this is what I observed, but I wanted to make sure. Too bad</p>",
        "id": 168407559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560869040
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 168407600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560869044
    },
    {
        "content": "<p>Footnote: there is a way around this limitation but you need to formulate your functor as a relation between two functors e.g. <code>option.{v}</code> and <code>option.{u}</code></p>",
        "id": 168408737,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1560869738
    },
    {
        "content": "<p>When you need it, it works but you're better off avoiding it if you can</p>",
        "id": 168408772,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1560869756
    },
    {
        "content": "<p>How would that look like in my example?</p>",
        "id": 168408851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560869788
    }
]