[
    {
        "content": "<p>Here's the first thing which broke in a nontrivial way when I made <code>coe_fn_trans</code> and <code>coe_sort_trans</code> no longer instances:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">Union_range_eq_sUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">⋃₀</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 195747861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588183364
    },
    {
        "content": "<p>(By \"nontrivial\", I mean something not directly related to transitive coercions. Obviously the fix for this example is still simple.)</p>",
        "id": 195747954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588183416
    },
    {
        "content": "<p>I recommend explicitly putting in multiple type ascriptions whenever we literally want a transitive coercion</p>",
        "id": 195751341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588185101
    },
    {
        "content": "<p>I got distracted from this project, but a second class of issues are ones where we define a new type and a <code>has_coe</code> instance for it to another type that has a coercion to function/sort, and expect the new type to also have a coercion to function/sort. A prototypical example is <code>subgroup G</code> which has a coercion to <code>set G</code>. These are easily addressed by adding an explicit <code>has_coe_to_sort</code> instance.</p>",
        "id": 195797044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588220117
    },
    {
        "content": "<p>These need to be fixed anyhow.  Transitive coercion instances are not in simp-normal form.</p>",
        "id": 195810897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588235525
    },
    {
        "content": "<p>If we want to make this change, it might be handy to write a little attribute we can put on <code>has_coe</code> instances to automatically generate <code>has_coe_to_sort</code>/<code>has_coe_to_fun</code> instances--though they're quite easy to write by hand also: I've been using things like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">coe_sort_trans</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>and it seems to be working so far...</p>",
        "id": 195833474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588250858
    },
    {
        "content": "<p>In a fancier system, maybe it would be worth thinking of \"an R-submodule of M is a set\" as a different kind of thing from \"a natural number is an integer\"</p>",
        "id": 195833586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588250927
    },
    {
        "content": "<p>Haha, I briefly panicked when a <code>dsimp</code> in the middle of some random proof stopped working, but I just deleted it and all is well <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195833748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251015
    },
    {
        "content": "<p>Whoa, it builds <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\n<code> 20 files changed, 38 insertions(+), 37 deletions(-)</code></p>",
        "id": 195835973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252175
    },
    {
        "content": "<p>That's actually a rather small diff</p>",
        "id": 195836090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588252231
    },
    {
        "content": "<p>and a little bit is commenting out things that should just be deleted, so it actually saves a few lines overall</p>",
        "id": 195836124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252254
    },
    {
        "content": "<p>And speeds up the build, I guess</p>",
        "id": 195836160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588252275
    },
    {
        "content": "<p>But probably not noticable</p>",
        "id": 195836192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588252293
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/8ef91f54a9c689f2560b8670e573bb3a79d15940\" title=\"https://github.com/leanprover-community/mathlib/commit/8ef91f54a9c689f2560b8670e573bb3a79d15940\">Here</a> is the commit if anyone is interested; there are some bits like the <code>has_coe_to_fun_linter</code> which I don't understand yet.</p>",
        "id": 195838136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588253330
    },
    {
        "content": "<p>I assume it doesn't build with the current version of Lean, but I suppose it might</p>",
        "id": 195838160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588253346
    },
    {
        "content": "<p>Ah, the CI build failed immediately because of my change to <code>leanpkg.toml</code>--probably for the best <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195838361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588253447
    },
    {
        "content": "<p>The <code>has_coe_to_fun</code> linter is supposed to check for exactly this kind of problem, where a type has a <code>has_coe</code> instance but no <code>has_coe_to_fun</code>.  If the transitive instances are gone, then the linter is no longer necessary.</p>",
        "id": 195841201,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588254657
    },
    {
        "content": "<p>So here's my proposal (<a href=\"https://github.com/leanprover-community/mathlib/compare/rwbarton-no-trans\" title=\"https://github.com/leanprover-community/mathlib/compare/rwbarton-no-trans\">https://github.com/leanprover-community/mathlib/compare/rwbarton-no-trans</a>):</p>\n<ol>\n<li>Remove <code>coe_fn_trans</code> and <code>coe_sort_trans</code> as instances from core, turning them into <code>@[reducible] def</code>s (so that they can be used as the definitions of instances, and will still be transparent to instance search).</li>\n<li>Remove the related simp lemmas (even though I guess we could keep them, they don't seem to be useful any more), library notes, linter in mathlib.</li>\n<li>Add back instances <code>instance {α : Sort*} [has_coe_to_fun α] (p : α → Prop) : has_coe_to_fun (subtype p)</code>, <code> instance {α : Sort*} [has_coe_to_sort α] (p : α → Prop) : has_coe_to_sort (subtype p)</code> to core. (Currently they are in my mathlib patch rather than core but that is only out of laziness.) These are Haskell 98-style instances so they should not cause any trouble--there's exactly one way to treat <code>x : subtype p</code> as a function/sort, namely by treating <code>x.val</code> as a function/sort.</li>\n<li>Add back <code>has_coe_to_sort</code>/<code>has_coe_to_fun</code> instances for things like <code>lie_subalgebra</code>, <code>M ≃L[R] M₂</code> (whatever this is), etc.--there's a fairly small number of these.</li>\n</ol>",
        "id": 195944511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588325492
    },
    {
        "content": "<p>Actually I guess in 4, all the <code>has_coe_to_fun</code> instances already existed (thanks to the linter) but I had to reimplement some of them to not rely on the transitive instance.</p>",
        "id": 195944601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588325560
    },
    {
        "content": "<p>Or more precisely: not rely on <code>coe_fn_trans</code> being an instance (now they invoke it by name).</p>",
        "id": 195944624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588325582
    },
    {
        "content": "<p>Overall, the change seems like a simplification, besides fixing the strange coercion of <code>nat</code> to <code>nat -&gt; real</code> (though I haven't actually tested this).</p>",
        "id": 195944662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588325640
    },
    {
        "content": "<p>The alternative as I see it is to be a lot more judicious with the choice between <code>has_coe</code> and <code>has_coe_t</code>--in principle this seems better as it generalizes what I did for <code>subtype</code> specifically, but I'm not sure whether we can be trusted to choose wisely. Maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s linter from <a href=\"https://github.com/leanprover-community/mathlib/issues/2573\" title=\"https://github.com/leanprover-community/mathlib/issues/2573\">#2573</a> will help with that though?</p>",
        "id": 195944771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588325722
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2573\" title=\"https://github.com/leanprover-community/mathlib/issues/2573\">#2573</a> moves some coercions (<code>ℕ → α</code>, etc.) to <code>has_coe_t</code>.  These will hence no longer participate in function coercion.  Not sure if this was the problem here.</p>",
        "id": 195944986,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588325932
    },
    {
        "content": "<p>I think it was <code>int → α</code> that was involved here.</p>",
        "id": 195945034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588325994
    },
    {
        "content": "<p>I have mixed feelings about the proposed change here.  I detest transitive coercions as much as everyone here, and would remove them today if it helped.  But I fear that these instances will just come back in a few months.</p>",
        "id": 195945162,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588326086
    },
    {
        "content": "<p>By \"these instances\" do you mean ones like <code>int → α</code>? Or <code>coe_fn_trans</code> as a global instance? Or ones like those I added for <code>subtype</code>?</p>",
        "id": 195945310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588326205
    },
    {
        "content": "<p><code>coe_fn_trans</code></p>",
        "id": 195945379,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588326247
    },
    {
        "content": "<p>The others are in mathlib, we can remove or change them as much as we want.</p>",
        "id": 195945405,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588326278
    },
    {
        "content": "<p>Ohh, you mean in Lean 4.</p>",
        "id": 195945436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588326322
    },
    {
        "content": "<p>I thought you meant the feature creep of people adding more and more instances because they look nice, and then it falls apart.</p>",
        "id": 195945456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588326345
    },
    {
        "content": "<p>I am also happy with your approach in <a href=\"https://github.com/leanprover-community/mathlib/issues/2573\" title=\"https://github.com/leanprover-community/mathlib/issues/2573\">#2573</a> as long as we can communicate clearly how to decide whether to use <code>has_coe</code> or <code>has_coe_t</code> and enforce it.</p>",
        "id": 195945672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588326524
    },
    {
        "content": "<p>Indeed I already thought when writing those <code>subtype</code> instances that they could be part of a more general system, and then realized the general system already existed but we were not using it correctly.</p>",
        "id": 195945729,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588326586
    },
    {
        "content": "<p>We can have linters that see all modules at once, to check for things like cycles, right?</p>",
        "id": 195945903,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588326704
    },
    {
        "content": "<p>The fixes in <a href=\"https://github.com/leanprover-community/mathlib/issues/2573\" title=\"https://github.com/leanprover-community/mathlib/issues/2573\">#2573</a> are necessary irrespective of whether we remove <code>coe_fn_trans</code> and <code>coe_sort_trans</code> or not.  The issues already pop up with regular coercions.  My one-size-fits-all solution for enforcement and communication is of course a linter, which the PR includes.</p>",
        "id": 195945908,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588326711
    },
    {
        "content": "<p>I think it would be a huge mistake to start refactoring mathlib in a way which is guaranteed to make the Lean 4 migration more painful.</p>",
        "id": 195951331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588331561
    },
    {
        "content": "<p>Well, it can't be that huge a mistake because the diff already exists and it is +31 -128 lines of code.</p>",
        "id": 195951421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588331666
    },
    {
        "content": "<p>This is only an abstract comment based on Gabriel's message</p>",
        "id": 195951451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588331708
    },
    {
        "content": "<p>I have no clue about the current discussion</p>",
        "id": 195951461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588331721
    },
    {
        "content": "<p>Sure, I just mean that as it happens we are fortunately not discussing any herculean effort.</p>",
        "id": 195951796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588332021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/transitive.20coercions/near/195951331\" title=\"#narrow/stream/113488-general/topic/transitive.20coercions/near/195951331\">said</a>:</p>\n<blockquote>\n<p>I think it would be a huge mistake to start refactoring mathlib in a way which is guaranteed to make the Lean 4 migration more painful.</p>\n</blockquote>\n<p>I think it would be a huge mistake to take everything in lean 4 as gospel, because that's what lead to the situation where we worked around lean 3 bugs for a year. I think we should try to make the best lean we can, and when lean 4 comes out we will either forward port our changes to lean 4 or fork if necessary. I'm not about to lose progress made in lean 3 on account of the new version.</p>",
        "id": 195952111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588332323
    },
    {
        "content": "<p>This might be obvious, but I don't think we should move to lean 4 until it is better than lean 3.10 or whatever the latest version is at that time. Ideally that would be better in every way (pareto-dominant), but for every thing that we have to sacrifice it should be a conscious decision based on a cost-benefit tradeoff. That means in particular that all the little tweaks and additions that are going into later lean 3 versions should be mimicked appropriately, and of course all the theorems should be carried over. If that sounds like a long and difficult process, I agree, I think we will be on lean 3 for a while yet.</p>",
        "id": 195952619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588332735
    },
    {
        "content": "<p>Well... doesn't the CamelCase allready rule out pareto-dominance? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 195953438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588333660
    },
    {
        "content": "<p>Mario, you know this will not happen. If Lean 4 achieves half of what it promises then it will be much better than Lean 3 and we'll switch. And nobody will have the time, skill and energy to maintain a fork while Lean 4 will continue to change.</p>",
        "id": 195957337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588337194
    },
    {
        "content": "<p>At the very least, I would want roadmaps and open issues for <em>every</em> feature that we leave behind in our anxiety to ride the next wave</p>",
        "id": 195958227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588338023
    },
    {
        "content": "<p>Whether or not a fork is necessary depends on interaction between Leo &amp; co and mathlib &amp; co. So far it's basically nil, and there is some evidence that this is not merely because lean 4 is an separate project from mathlib, so I am not expecting this to change to another governance structure when it matures</p>",
        "id": 195958450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588338183
    },
    {
        "content": "<p>Whether there is interactivity in the future will, I should think, depend a lot on whether our community manages to hold back and let Leo and his team deal with issues which are important to them, or whether we just flood the issues page with complaints that it's not like how it was and could they please fix it.</p>",
        "id": 195958743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588338375
    },
    {
        "content": "<p>It will be a delicate balancing act.</p>",
        "id": 195958929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588338507
    },
    {
        "content": "<p>But one thing we do need to remember is that there were a hell of a lot of issues with Lean 3 which we managed to deal with on the mathlib side</p>",
        "id": 195958958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588338534
    },
    {
        "content": "<p>I wasn't there at the time, but one impression I got was that Leo does not take kindly to being told that what he did was not as good as doing it some other way, especially when he can see subtle problems with the other way which are not apparent to most.</p>",
        "id": 195959161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588338649
    },
    {
        "content": "<p>Since coercions are a hot topic today, let me ask again about the issue of simp and coercions. In the following code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">my_equiv</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_equiv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">my_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_equiv1</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_equiv2</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">one_eq_two</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv1</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">my_equiv2</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">two_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv2</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv1</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n\n\n<p><code>simp</code> fails in the last lemma, because it should simplify in a coercion and it is unable to do this. This is the reason why, in manifolds, I could not use coercions and I used <code>e.to_fun</code> and <code>e.inv_fun</code> all over the place. Is this something that is so deeply buried in C++ that there is no hope to fix it?</p>",
        "id": 195971827,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588346665
    },
    {
        "content": "<p>I don't think this is something we can easily fix in mathlib.  The core problem is that <code>has_coe_to_fun</code> doesn't necessarily coerce to a function.</p>",
        "id": 195973249,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588347416
    },
    {
        "content": "<p>Doesn't not?</p>",
        "id": 195973292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588347437
    },
    {
        "content": "<p>I am confused either way</p>",
        "id": 195973313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588347449
    },
    {
        "content": "<p>It's confusing.</p>",
        "id": 195973771,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588347663
    },
    {
        "content": "<p>I guess the problem is <code>my_equiv1 α x</code> means <code>coe_fn (my_equiv1 α) x</code> but <code>coe_fn</code> has a dependent type: <code>coe_fn (my_equiv1 α)</code> has type <code>has_coe_to_fun.F (my_equiv1 α)</code>. That means rewriting <code>my_equiv1 α</code> to  <code>my_equiv2 α</code> might result in a type-incorrect expression.</p>",
        "id": 195974163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588347902
    },
    {
        "content": "<p>Of course in this case it does not because <code>has_coe_to_fun.F (my_equiv1 α)</code> and <code>has_coe_to_fun.F (my_equiv2 α)</code> are definitionally equal (they are both <code>α -&gt; α</code>).</p>",
        "id": 195974228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588347935
    },
    {
        "content": "<p>I actually never knew about this issue because I would always abandon coercions earlier when <code>α</code> could not be inferred in <code>my_equiv1 α x</code>.</p>",
        "id": 195974349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588348001
    },
    {
        "content": "<p>Do we actually use dependent function coercions?  That is, 1) where <code>coe_fn a : α a → β a</code> depends on <code>a</code>, or 2) where <code>coe_fn a : ∀ x : α, β x</code> is a dependent function?</p>",
        "id": 195974730,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588348232
    },
    {
        "content": "<p>I wouldn't be surprised if <code>dfinsupp</code> is an example of 2</p>",
        "id": 195974810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588348280
    },
    {
        "content": "<p>But 1 would be more surprising I think...</p>",
        "id": 195974824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588348289
    },
    {
        "content": "<p>I would love having two versions of <code>has_coe_to_fun</code>, a non-dependent one where simp would work, and a dependent one <code>has_coe_to_dep_fun</code> where it wouldn't. Because I guess in 99% of the situations we use a non-dependent version...</p>",
        "id": 195981925,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588352112
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/209\" title=\"https://github.com/leanprover-community/lean/issues/209\">lean#209</a></p>",
        "id": 195986031,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588354108
    },
    {
        "content": "<p>Gabriel, do you understand the Lean 4 answer here? I remember Sebastian pointed out a commit \"simplifying coercions to functions\"</p>",
        "id": 195988630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588355327
    },
    {
        "content": "<p>As far as Sébastien's problem is concerned, the <code>coeFun</code> function has essentially the same signature: <a href=\"https://github.com/leanprover/lean4/blob/0c4030137f24f2371db85469de2f627eccbb1703/src/Init/Coe.lean#L59-L60\" title=\"https://github.com/leanprover/lean4/blob/0c4030137f24f2371db85469de2f627eccbb1703/src/Init/Coe.lean#L59-L60\">https://github.com/leanprover/lean4/blob/0c4030137f24f2371db85469de2f627eccbb1703/src/Init/Coe.lean#L59-L60</a>  The only difference is that the function space is now an out param.  I don't think there are congruence lemmas yet in Lean 4.</p>",
        "id": 195991460,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588356817
    },
    {
        "content": "<p>Gabriel, will your fix for <code>simp</code> in <code>has_coe_to_fun</code> also fix the <code>congr</code> behavior? I mean</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">my_equiv</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_equiv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">my_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">my_equiv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Without the <code>unfold_coes</code>, <code>congr</code> does not work. I guess it is because it has to identify <code>has_coe_to_fun.F</code> on the left and on the right, but since it has lost the information on the type it is working with, there is no way it can do this. Even <code>congr' 1</code> fails here. I have learnt to always unfold coercions before applying <code>congr</code>, but this can be a tricky one the first time you encounter it.</p>",
        "id": 196038635,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588404747
    },
    {
        "content": "<p>Works for me both with and without <code>unfold_coes</code>.</p>",
        "id": 196040620,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588408149
    },
    {
        "content": "<p>You mean, on Lean 3.9 or Lean 3.10?</p>",
        "id": 196040637,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588408199
    },
    {
        "content": "<p>Lean 3.10.</p>",
        "id": 196040690,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588408257
    },
    {
        "content": "<p>Great, thanks again!</p>",
        "id": 196040696,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588408277
    }
]