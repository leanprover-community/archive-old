[
    {
        "content": "<p>How do I know the name of an instance I haven't explicitly named? In my case, the instance is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">circular_preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_btw</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_sbtw</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">btw_refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">btw_cyclic_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">btw</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">btw_trans_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">btw</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sbtw</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">btw</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sbtw_iff_btw_not_btw</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sbtw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">btw</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">order_laws_tac</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">circular_preorder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">btw</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">sbtw</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">btw_refl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">btw_cyclic_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">btw_trans_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sbtw_iff_btw_not_btw</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 249036247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628628830
    },
    {
        "content": "<p>you could just stick <code>@[simps?]</code> on it for an easy way</p>",
        "id": 249038156,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628629783
    },
    {
        "content": "<p>the instance naming code isn't too advanced though</p>",
        "id": 249038176,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628629792
    },
    {
        "content": "<p>so it should be pretty predictable</p>",
        "id": 249038188,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628629799
    },
    {
        "content": "<p><code>example (α : Type*) [preorder α] : circular_preorder α := by show_term { apply_instance }</code> would also tell you</p>",
        "id": 249039119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628630228
    },
    {
        "content": "<p>Oh yeah it was really dumb. It tried to call it <code>circular_order</code>. Any way to change the heuristics?</p>",
        "id": 249075516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628666188
    },
    {
        "content": "<p>I think this one is one you should expect to name by hand</p>",
        "id": 249081125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628670557
    },
    {
        "content": "<p><code>preorder.to_circular_order</code> would be a reasonable name.</p>",
        "id": 249081142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628670576
    },
    {
        "content": "<p>if you wanna dig, the relevant code is <a href=\"https://github.com/leanprover-community/lean/blob/cd4973b96eecb4d6ba52e14cd67f6c4ad251b467/src/frontends/lean/decl_util.cpp#L104\">here</a></p>",
        "id": 249083661,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628672389
    }
]