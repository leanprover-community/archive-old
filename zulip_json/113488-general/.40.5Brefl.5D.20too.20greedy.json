[
    {
        "content": "<p><code>@[refl]</code> only works for equalities (am I right?), but some things you can prove by <code>rfl</code> aren't equalities. For example, this yields an error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.bool</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bool.coe_tt</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- not a rfl-lemma, even though marked as rfl</span>\n</code></pre></div>\n<p>That's because something somewhere decided it would be a good idea to forcefully tag that with <code>@[refl]</code>, even though it's not an equality. And I can't see how to remove it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[-refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bool.coe_tt</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- cannot remove attribute globally (solution: use 'local attribute')</span>\n</code></pre></div>",
        "id": 263890665,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638813878
    },
    {
        "content": "<p>The sneaky workaround I found is <code>by convert rfl</code>.</p>",
        "id": 263890880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638813966
    },
    {
        "content": "<p>What about \"by refl\"?</p>",
        "id": 263891377,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638814174
    },
    {
        "content": "<p>This is an interesting error but your analysis is completely wrong.</p>",
        "id": 263891649,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638814287
    },
    {
        "content": "<p>The error is related to the simplifier, namely we need to figure out whether a lemma is a definitional simp lemma (i.e., can be proven by rfl) or not.  Whenever you declare a lemma, the elaborator checks whether the proof is syntactically <code>rfl</code> and then adds the <code>_refl_lemma</code> attribute on the lemma.  We can't check whether the actual proof term is <code>eq.refl ...</code> because proofs are elaborated asynchronously, and the attribute needs to be added now.</p>",
        "id": 263892144,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638814484
    },
    {
        "content": "<p>After the proof is elaborated, Lean checks whether that attribute was correctly added.  That is, if the proof is <code>eq.refl ..</code> and the type <code>eq ..</code>.  But apparently this check does not unfold the type.  <a href=\"https://github.com/leanprover-community/lean/blob/83214949abb8ff3cce390ef2dcea4d3eaf481503/src/library/tactic/simp_lemmas.cpp#L810-L820\">https://github.com/leanprover-community/lean/blob/83214949abb8ff3cce390ef2dcea4d3eaf481503/src/library/tactic/simp_lemmas.cpp#L810-L820</a></p>",
        "id": 263892421,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638814592
    },
    {
        "content": "<p>(Here the type is <code>↑ tt</code>, which reduces to <code>tt = tt</code>.)</p>",
        "id": 263892467,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638814607
    },
    {
        "content": "<p>Potential workarounds:</p>\n<ul>\n<li>Use <code>by refl</code> as proof</li>\n<li>Use <code>by exact rfl</code> as proof</li>\n<li>Use <code>eq.refl _</code> as proof</li>\n<li>Use <code>show _, from rfl</code> as proof</li>\n<li>Change the theorem statement to <code>tt = tt</code> (not sure that's the intention though)</li>\n<li>Submit a PR to reduce the type in <code>is_rfl_lemma</code>.</li>\n</ul>",
        "id": 263892917,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638814758
    },
    {
        "content": "<p><code>@[refl]</code>-tagged lemmas are for letting the <code>refl</code> tactic prove more things -- <code>refl</code>, <code>symmetry</code> and <code>transitivity</code> all can handle relations beyond equality because of their corresponding attributes. It's kind of funny how there are both <code>rfl</code> lemmas and <code>refl</code> lemmas and how different they are.</p>",
        "id": 263893325,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638814920
    },
    {
        "content": "<p>Aaah, that's what I was missing.</p>",
        "id": 263893411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638814939
    },
    {
        "content": "<p>So what's the actual attribute? <code>rfl</code>? <code>is_rfl_lemma</code>?</p>",
        "id": 263893504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638814971
    },
    {
        "content": "<p><code>_refl_lemma</code></p>",
        "id": 263893594,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638815004
    }
]