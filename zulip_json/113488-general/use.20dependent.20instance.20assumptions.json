[
    {
        "content": "<p>I am preparing material for a topology course using lean and I am now trying to prove that a function between a topological space <code>X</code> (with an arbritrary topology) and a space <code>Y</code> with the topology generated by a set  of sets <code>S</code> is continuous, iff the preimages of the elements of <code>S</code>are open.</p>\n<p>I want to do everything in my course from the basics, so i am ignoring the topology part of mathlib (will use stuff about sets and functions though).</p>\n<p>So I have the class <code>topological_space</code>, the definition of <code>continous</code> for functions, which requires both types to be topological space, and <br>\na function <code>generated_topology</code>, which returns something of the type <code>topological space Y</code>from <code>Y</code>a and <code>S</code>.</p>\n<p>Now, if i want to write my theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">continuous_on_generated</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">hTX</span> <span class=\"o\">:</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">hTY</span> <span class=\"o\">:</span> <span class=\"n\">generated_topology</span> <span class=\"n\">Y</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">):</span>\n<span class=\"n\">continua</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I get the error message  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n <span class=\"n\">generated_topology</span> <span class=\"n\">Y</span> <span class=\"n\">S</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">topological_space</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>Is there a way to introduce an assumption that consist on a class instance, but depends on other items of the input (in this case, the fact that Y is not just a generic topological space, but that it has that specific topology).</p>",
        "id": 281990126,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1652285821
    },
    {
        "content": "<p>What you want to do is pass <code>generated_topology Y S</code> into <code>continuous f</code> as the topology on <code>Y</code>.</p>",
        "id": 281991310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652286281
    },
    {
        "content": "<p>So you shouldn't write <code>[hTY : generated_topology Y S]</code>, because that means you are trying to assume a term of type <code>generated_topology Y S</code>, but it isn't a type, it's a term of <code>topological_space Y</code>.</p>",
        "id": 281991430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652286333
    },
    {
        "content": "<p>Instead, write <code>@continuous X Y _ (generated_topology Y S) f</code>.</p>",
        "id": 281991486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652286355
    },
    {
        "content": "<p>Here, I am guess the order of the arguments. Maybe it should be <code>X _ Y</code> instead of <code>X Y _</code>.</p>",
        "id": 281991571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652286376
    },
    {
        "content": "<p>I see, so the <code>@</code> in continuous means \"don't try to infer class instances, but use this explicit ones\".</p>",
        "id": 281992341,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1652286703
    },
    {
        "content": "<p>Roughly, yes. Although the <code>_</code> still causes Lean to infer the topology on <code>X</code> by itself.</p>",
        "id": 281992703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652286847
    }
]