[
    {
        "content": "<p>There seems to be <code>list.mem_diff_of_mem</code>, but I cannot find a mem-based iff characterization of <code>list.diff</code> (which would be great as simp lemma). Is that lemma just missing?<br>\nI'm looking for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mem_diff_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>library search fails.</p>",
        "id": 221512553,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609759110
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mem_diff_iff_of_nodup\">docs#list.mem_diff_iff_of_nodup</a> which has the right side condition, otherwise</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">to_bool</span> <span class=\"bp\">$</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">diff</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">∉</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 221512735,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609759295
    },
    {
        "content": "<p>Oh, I thought diff would remove all elements! I only looked through all lemmas in the diff section <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/basic.html#diff\">here</a>. Thanks for the counterexample!</p>",
        "id": 221513240,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609759681
    },
    {
        "content": "<p><code>slim_check</code> is able to generate counterexamples too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">===================</span>\n<span class=\"cm\">Found problems!</span>\n\n<span class=\"cm\">a := 0</span>\n<span class=\"cm\">l₁ := [4, 4, 11, 178, 7, 5, 0, 0]</span>\n<span class=\"cm\">l₂ := [511, 0, 2, 8, 3]</span>\n<span class=\"cm\">(0 shrinks)</span>\n<span class=\"cm\">-------------------</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It's missing a tactic doc entry, but there's info in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/slim_check.html\">the <code>tactic.slim_check</code> module doc</a>.</p>",
        "id": 221513976,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609760327
    },
    {
        "content": "<p>Wow, slim_check is nice. It would be so cool if slim_check, library_search, and finish were run in the background for every unclosed goal!</p>",
        "id": 221515435,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609761589
    },
    {
        "content": "<p>Ha ha! If I'm working on discrete valuation rings then these things have 0 chance of doing anything unless I'm on the last line of a proof, and all that would happen would be that my PC would start heating the room!</p>",
        "id": 221517936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609763572
    },
    {
        "content": "<p>We could also add that <code>gpt</code> command which <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> was showing off to me on the Discord yesterday ;-) I saw it proving a few lemmas of the natural number game!</p>",
        "id": 221518032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609763641
    },
    {
        "content": "<p>But I think that's a story for later on this week at the conference...</p>",
        "id": 221518086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609763669
    }
]