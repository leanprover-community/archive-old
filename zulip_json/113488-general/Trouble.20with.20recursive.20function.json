[
    {
        "content": "<p>I have an inductive that has a list of children and I'm having real trouble writing a function against it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">sort</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span>\n<span class=\"bp\">|</span> <span class=\"n\">nested</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">sort</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sort</span><span class=\"bp\">.</span><span class=\"n\">to_sexpr</span> <span class=\"o\">:</span> <span class=\"n\">sort</span> <span class=\"bp\">â†’</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span><span class=\"bp\">.</span><span class=\"n\">single</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span><span class=\"bp\">.</span><span class=\"n\">nested</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"err\">$</span> <span class=\"n\">tl</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">sort</span><span class=\"bp\">.</span><span class=\"n\">to_sexpr</span>\n</code></pre></div>\n\n\n<p>In this (simplified) example, I get the error <code>unexpected occurrence of recursive function</code>. Clearly <code>tl.sizeof &lt; (sort.nested tl).sizeof</code>, so I should be allowed to use <code>sort.to_sexpr</code>, no?</p>\n<p>On an vaguely related note, it wouldn't let me formulate my <code>sort</code> using a subtype of lists or using a proof of my property.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">sort&#39;</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span>\n<span class=\"bp\">|</span> <span class=\"n\">nested</span> <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">sort&#39;</span> <span class=\"bp\">//</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">})</span>\n</code></pre></div>\n\n\n<p>complains, that <code>inductive type being declared cannot occur as an index of another inductive type</code>, so I had to explicitly carry a head element and a tail. </p>\n<p>any idea, why my recursive call is not happy?</p>",
        "id": 206589071,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1597159504
    },
    {
        "content": "<p>The equation compiler for nested inductive types is not very good / doesn't work.<br>\nI'm afraid that the general advice here is to hand-roll your own definition of nested inductive types using mutual/indexed inductive types.</p>",
        "id": 206774251,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597284707
    },
    {
        "content": "<p>I think for your application, you can just go <code>meta</code> and then the equation compiler and nested inductives will work fine</p>",
        "id": 206774642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597285168
    }
]