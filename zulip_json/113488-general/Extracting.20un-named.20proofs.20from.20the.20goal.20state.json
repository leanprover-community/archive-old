[
    {
        "content": "<p>Often I find myself needing a proof that is already part of the goal state, but having to rebuild it because I don't have a name on it. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"n\">n.not_lt_zero</span> <span class=\"bp\">$</span> <span class=\"n\">add_lt_iff_neg_right.mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>  <span class=\"c1\">-- _.elim &gt; 0; the _ is a proof of false - how do I reuse it?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222436894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610461387
    },
    {
        "content": "<p>This is a weird way to do it, but works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">m.elim</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222437679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610461742
    },
    {
        "content": "<p>It requires you to write out the form of the goal though--maybe it would be useful to have a tactic that could search the goal (or really the type of any expression) for a proof of a given <code>p</code></p>",
        "id": 222438075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610461901
    },
    {
        "content": "<p>in this case <code>false</code></p>",
        "id": 222438102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610461909
    },
    {
        "content": "<p>Oh, clever</p>",
        "id": 222438251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610461961
    },
    {
        "content": "<p>Yeah, such a tactic is something I've found myself wanting multiple times now</p>",
        "id": 222438309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610461984
    },
    {
        "content": "<p>It looks like this actually works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">elim_elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">false.elim</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">elim_elim</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222467890,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610473423
    },
    {
        "content": "<p>Yeah, that's basically the same trick as Reid's. I think a tactic that extracts proofs from hypotheses and goals would be the most general solution here</p>",
        "id": 222468140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610473534
    },
    {
        "content": "<p>I thought this was interesting because Lean figured out <code>p</code> automatically, but I guess it can't handle this example without being explicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">false.elim</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">elim_elim</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222469507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610474068
    },
    {
        "content": "<p>Your approach is interesting because it suggests there is value to adding lemmas with false hypotheses!</p>",
        "id": 222469981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610474252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Extracting.20un-named.20proofs.20from.20the.20goal.20state/near/222468140\">said</a>:</p>\n<blockquote>\n<p>Yeah, that's basically the same trick as Reid's. I think a tactic that extracts proofs from hypotheses and goals would be the most general solution here</p>\n</blockquote>\n<p>I have the vague memory of writing such a tactic back at the dawn of lean 3, no idea what happened to it</p>",
        "id": 222470736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610474540
    },
    {
        "content": "<p>this is also really useful for proving theorems about <code>classical.some &lt;nasty term you don't want to refer to&gt;</code></p>",
        "id": 222470823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610474585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> it will probably work if you mark <code>elim_elim</code> as <code>elab_as_eliminator</code></p>",
        "id": 222471333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610474838
    },
    {
        "content": "<p>That didn't seem to work here</p>",
        "id": 222471393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610474875
    },
    {
        "content": "<p>With <code>@[elab_as_eliminator]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">false.elim</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">elim_elim</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">false.elim</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">elim_elim</span> <span class=\"c1\">-- doesn't work</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">false.elim</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">elim_elim</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 222471757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610475045
    },
    {
        "content": "<p>AH I remember</p>",
        "id": 222472005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610475174
    },
    {
        "content": "<p><code>generalize_proofs</code></p>",
        "id": 222472017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610475178
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize_proofs\">tactic#generalize_proofs</a>?</p>",
        "id": 222472310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610475335
    },
    {
        "content": "<p>It's missing an invocation of <code>add_tactic_doc</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/da24addb74fe40009254cadce1e41593e876c82a/src/tactic/generalize_proofs.lean#L67\">https://github.com/leanprover-community/mathlib/blob/da24addb74fe40009254cadce1e41593e876c82a/src/tactic/generalize_proofs.lean#L67</a></p>",
        "id": 222472426,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610475378
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.generalize_proofs\">docs#tactic.interactive.generalize_proofs</a> exists, hooray!</p>",
        "id": 222472466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610475406
    },
    {
        "content": "<p>That's a nice tactic to have -- I've found myself generalizing proofs a few times by hand.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_proofs</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222472500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610475422
    },
    {
        "content": "<p>It was written in 2017, cut it some slack</p>",
        "id": 222472582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610475465
    },
    {
        "content": "<p>it actually predates mathlib</p>",
        "id": 222472603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610475470
    },
    {
        "content": "<p>Feel free to add / edit <a href=\"https://github.com/leanprover-community/mathlib/issues/5714\">#5714</a> which adds this as an example to the doc string and adds a tactic doc entry.</p>",
        "id": 222474163,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610476115
    },
    {
        "content": "<p>Oops, it appears I made a competing PR <a href=\"https://github.com/leanprover-community/mathlib/issues/5715\">#5715</a></p>",
        "id": 222478166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610477955
    },
    {
        "content": "<p>I also fixed a bug and added support for <code>at h1 h2 |-</code> to my PR though</p>",
        "id": 222478291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610478003
    },
    {
        "content": "<p>I think you could add an example to the tactic doc string like in mine but otherwise it looks much better, thanks!</p>",
        "id": 222478666,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610478156
    },
    {
        "content": "<p>the examples I use in the tests are a bit simpler than eric's original example</p>",
        "id": 222479153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610478401
    }
]