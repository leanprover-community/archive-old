[
    {
        "content": "<p>So, I am trying to prove that sheafify is a functor, but the context I need it in is specialized to sheaves of abelian groups over a space. I attempted to specialize the definition of sheafify in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.sheaf</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.presheaf</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.sheafify</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.has_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.products</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Top.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ab.has_products</span>\n    <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_products</span> <span class=\"n\">Ab</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_limits</span> <span class=\"n\">Ab</span> <span class=\"o\">:=</span> <span class=\"n\">AddCommGroup.has_limits</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">has_limit</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.discrete</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">Ab</span><span class=\"o\">),</span> <span class=\"n\">category_theory.limits.has_limit_of_has_limits_of_shape</span> <span class=\"n\">F</span><span class=\"o\">)},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- sheafify is a functor</span>\n<span class=\"kd\">def</span> <span class=\"n\">sheafify_functor</span> <span class=\"o\">:</span> <span class=\"n\">Top.presheaf</span> <span class=\"n\">Ab</span> <span class=\"n\">X</span> <span class=\"bp\">⥤</span> <span class=\"n\">Top.sheaf</span> <span class=\"n\">Ab</span> <span class=\"n\">X</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sh</span> <span class=\"o\">:</span> <span class=\"n\">Top.presheaf</span> <span class=\"n\">Ab</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Top.sheaf</span> <span class=\"n\">Ab</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Top.presheaf.sheafify</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But Lean complained that it could not do it:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid type ascription, term has type\n  Top.presheaf (Type ?) ?m_1 → Top.sheaf (Type ?) ?m_1 : Type (?+1)\nbut is expected to have type\n  Top.presheaf Ab X → Top.sheaf Ab X : Type (u_1+1)\nstate:\nX : Top\n⊢ Top.presheaf Ab X ⥤ Top.sheaf Ab X\n</code></pre></div>\n<p>Is there some kind of magic with dependent quantifiers or universes that I'm not taking into account when I write this? Alternately: is the result I'm trying to prove already in mathlib, hidden from my eyes?</p>",
        "id": 244822724,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1625344072
    },
    {
        "content": "<p>I believe that you get the error because <code>Top.presheaf.sheafify</code> currently only works for <code>Type</code>-valued presheaves and you are trying to sheafify <code>Ab</code>-valued presheaves.</p>",
        "id": 244847021,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1625384876
    },
    {
        "content": "<p>I'm don't know what the current plans regarding sheafification of <code>Ab</code>-valued presheaves are. Perhaps <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> or <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> know whether there has been any work on this?</p>",
        "id": 244847287,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1625385244
    },
    {
        "content": "<p>I am indeed starting to think the problem is with <code>Top.presheaf.sheafify</code> -- <code>Top.presheaf</code> and <code>Top.sheaf</code> both have a variable <code>C : Type u</code> with <code>[category.{v} C]</code> and then work with <code>Top.presheaf C X</code> or <code>Top.sheaf C X</code>, which is no problem and lets me consider (pre)sheaves valued in <code>Ab</code> or whatever category with products I want, but then <code>Top.sheafify</code> works on <code>Top.presheaf (Type u) X</code>, rather than on some <code>C : Type u</code>. Although I can... imagine some kind of abstract justification of why this kind of makes sense, I suspect it doesn't give me any way of getting <code>Top.sheafify</code> for sheaves defined in any specific category that I have, <code>Ab</code> or otherwise. Changing it to use a <code>C : Type u</code> seems like a fairly easy fix, so I'll give it a shot.</p>",
        "id": 245073814,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1625593395
    },
    {
        "content": "<p>... hm. maybe not so easy after all. I'll chip away at it anyway</p>",
        "id": 245074969,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1625593947
    },
    {
        "content": "<p>You'll need a bunch of assumptions on <code>C</code>, right?</p>",
        "id": 245075382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625594158
    },
    {
        "content": "<p>yeah, being a category with products, probably</p>",
        "id": 245075530,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1625594212
    },
    {
        "content": "<p>and it seems like all the <code>local_predicate</code> stuff also is defined only on Type-valued (pre)sheaves also</p>",
        "id": 245075706,
        "sender_full_name": "Alexandra Foster",
        "timestamp": 1625594294
    },
    {
        "content": "<p>A lot of stuff is only defined for <code>Type</code>-valued sheaves unfortunately. I have also wished before that the sheaves library would be more general in this regard and it might be a nice project. I don't know what class of categories would be best suited for this. It probably should have pi instances so all the stuff from <code>sheaf_of_functions</code> makes sense. Maybe someone who knows more about sheaves than me can comment.</p>",
        "id": 245085889,
        "sender_full_name": "Justus Springer",
        "timestamp": 1625598948
    },
    {
        "content": "<p>For now, a different approach might be to sheafify the underlying <code>Type</code>-valued sheaf by composing with the forgetful functor <code>Ab ⥤ Type</code>. Then you could show that the sections <code>s : Π x : X, F.stalk x</code> being locally germs form a subgroup of all sections and use that to define the <code>add_comm_group</code> structure on the sheafified <code>Type</code>-valued sheaf, turning it into a proper <code>Ab</code>-valued sheaf. I'm not completely sure this would work but it might be worth a try. You might want to look at <code>algebraic_geometry/structure_sheaf</code> where something similar is done to define a <code>CommRing</code>-valued sheaf.</p>",
        "id": 245086709,
        "sender_full_name": "Justus Springer",
        "timestamp": 1625599354
    }
]