[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>: what's the current word on algebra homomorphisms in relation to the morphism refactor? I would like to define star algebra homomorphisms, but I'm hesitant because algebra homomorphisms haven't yet been done.</p>",
        "id": 277568496,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648958146
    },
    {
        "content": "<p>Work is ongoing at <a href=\"https://github.com/leanprover-community/mathlib/tree/linear_map_class\">branch#linear_map_class</a>. Not sure whether Anne needs help or time.</p>",
        "id": 277587891,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648969883
    },
    {
        "content": "<p>Actually, don't algebra homs and star algebra homs bear the same relation as linear maps and semilinear maps?</p>",
        "id": 277593594,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648973071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/algebra.20hom.20morphism.20refactor/near/277587891\">said</a>:</p>\n<blockquote>\n<p>Work is ongoing at <a href=\"https://github.com/leanprover-community/mathlib/tree/linear_map_class\">branch#linear_map_class</a>. Not sure whether Anne needs help or time.</p>\n</blockquote>\n<p>I haven't had much time in the past weeks to work on this. There are a few complications because the generic <code>map_smul\\_sl</code> lemmas aren't being picked up by the simplifier for some reason. Any help would be very much appreciated!</p>",
        "id": 277605708,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648979814
    },
    {
        "content": "<p>No, star algebra homs are not analogous to semilinear maps. A star algebra hom is just an algebra hom which is star-preserving. A star algebra hom has a coercion to a linear map. It's the star operation itself that is semilinear (in most familiar cases).</p>",
        "id": 277626702,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648991353
    },
    {
        "content": "<p>I'll have a look at that branch, but I'm not sure I'll be able to be any help. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 277626905,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648991449
    },
    {
        "content": "<p>I pushed a new version with some merge conflicts fixed (hopefully...). Let's see what breaks.</p>",
        "id": 277714744,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649070503
    },
    {
        "content": "<p>This might be a bad analysis, but it seems to me like the <code>lift.tprod</code> bit on which it's stuck now is because of a confluence of two issues. The first is that the underlying ring for the module is now a metavariable and has to be inferred, which is normally not a problem since it is an out_param. However, in this case, we are also dealing with the pi-type instance issue, and it's having trouble reconciling the two (I think because each is looking to the other to tell it what the underlying ring should be?).</p>",
        "id": 278199773,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649352935
    },
    {
        "content": "<p>I managed to get this branch (i.e. <a href=\"https://github.com/leanprover-community/mathlib/tree/linear_map_class\">branch#linear_map_class</a>) to compile locally! <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> is it OK with you if I just push the result?</p>",
        "id": 280965000,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1651551392
    },
    {
        "content": "<p>Nice work, thank you! Please do push your changes, I'm excited to see it working :)</p>",
        "id": 280987160,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651570213
    },
    {
        "content": "<p>Pushed! Let's see what CI has to say...</p>",
        "id": 281013850,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1651585144
    },
    {
        "content": "<p>Oh no, build failed :(</p>",
        "id": 281021627,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651588216
    },
    {
        "content": "<p>I just merged master. I think we're getting close to a PR!</p>",
        "id": 281108080,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1651636517
    },
    {
        "content": "<p>Thanks! The code is looking good so I'll go ahead and open a PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13939\">#13939</a></p>",
        "id": 281136920,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651660667
    },
    {
        "content": "<p>The code is up to date and builds again!</p>",
        "id": 281694258,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652107290
    }
]