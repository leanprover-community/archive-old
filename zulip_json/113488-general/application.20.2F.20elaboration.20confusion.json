[
    {
        "content": "<p>I've written a simple function that fails in a way that I don't understand.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- The following gives the error message \"function expected at `f` term has type `?m_`\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This confuses me because the infoview shows <code>f : ℤ → ℤ</code>.</p>\n<p>However, it works fine if I state the type of <code>f</code> explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It also works if I use a higher-order function for application.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">appf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">appf</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">appf</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But it fails again if I use a generic version of the application function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">appf2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The function `bar4` gives the following error message:</span>\n<span class=\"cm\">type mismatch at application appf2 f term f has type ?m_1 : Type ?</span>\n<span class=\"cm\">but is expected to have type ?m_1 → ℤ : Sort (max ? 1)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar4</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">appf2</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What's going on? Why is it that the Infoview shows <code>f : ℤ → ℤ</code> but this type information seems to be ignored in elaboration?</p>",
        "id": 243250403,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1624109784
    },
    {
        "content": "<p>Not exactly sure, but it is probably related to the fact that Lean </p>\n<ul>\n<li>Elaborates arguments from left to right (so it tries to figure out what <code> (λ f, f x)</code> means before looking at <code>foo n</code></li>\n<li>Is not great with function types involving metavariables</li>\n</ul>\n<p>I'm not quite sure why the infoview gives the correct answer here. Usually the correct response to these problems is to just give a little more information to Lean. If you desperately don't want to give more information, write <code>(foo n).map (λ f, f x)</code>.</p>",
        "id": 243279420,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1624152615
    },
    {
        "content": "<p>Thanks! Fortunately, I'm not desperate to not give more information to the elaborator.</p>",
        "id": 243327059,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1624231839
    }
]