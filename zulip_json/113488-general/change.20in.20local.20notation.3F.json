[
    {
        "content": "<p>Sorry I am still using lean 3 but it seems that there are different versions which differ in how they treat \"local notation\" (Actually how can I find out which version I am using?).<br>\nFor my course I redefined the boolean connectives <code>band</code> and <code>bor</code>, because I don't like the braindead way they are defined in the core library. I introduced a namespace and defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">band</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">||</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">bor</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>This worked but now on some installations it returns an error. :-( <br>\nIs there a way to fix this?</p>",
        "id": 307197523,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1667248788
    },
    {
        "content": "<p><code>#eval lean.version</code> should tell you the version you are using</p>",
        "id": 307197660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1667248835
    },
    {
        "content": "<p>Which error do you get?</p>",
        "id": 307197730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1667248862
    },
    {
        "content": "<p>I actually stupidly used my desktop to prepare the lecture and then my laptop for life proving and got caught by this issue in class? :-(</p>",
        "id": 307197737,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1667248866
    },
    {
        "content": "<p>invalid notation: notation already declared. Consider using 'notation (name := ...)'</p>",
        "id": 307197772,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1667248881
    },
    {
        "content": "<p>Ok it doesn't work on:<br>\n(3, (48, 0))</p>",
        "id": 307197845,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1667248916
    },
    {
        "content": "<p><a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/296106859\">https://leanprover.zulipchat.com/#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/296106859</a> is biting you.</p>",
        "id": 307198057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1667248985
    },
    {
        "content": "<p>This is a backport from Lean 4 afaict.</p>",
        "id": 307198243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1667249043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/296106859\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/3d7987cda72abc473c7cdbbb075170e9ac620042\">chore(*): bump to lean 3.47.0</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib/pull/16252\">mathlib#16252</a>)</p>\n<p>A major change is that notations now require names when they are shadowing another identical notation, even if it is a local notation. Also, because localized notations can be imported in a variety of contexts, there are some new best practices for them:</p>\n<ul>\n<li>localized notations should always have a <code>(name := ...)</code>. Notation names are unrelated to declaration names, but the declaration name is a reasonable base for the notation name.</li>\n<li>localized notations should never use <code>_</code> in the notation, because this gets desugared to a unique metavariable index, meaning that the notation will not be recognized as a duplicate of itself if <code>open_locale</code> is used when the notation is already available. Instead, you should use the <code>hole!</code> notation, which unfolds to <code>_</code>.</li>\n</ul>\n<p>Another major change is that projection notation (<code>x.foo</code>) now always instantiates implicit arguments with metavariables, which is consistent with Lean 4. To simulate the older behavior, one can use either strict implicit arguments for the structure field (e.g. <code>∀ {{n}}, p n</code> instead of <code>∀ {n}, p n</code>) or, depending on specifics, writing <code>λ _, x.foo</code> to ensure the implicit argument is preserved as an argument.</p>\n<p>Co-authored-by: Kyle Miller &lt;<a href=\"mailto:kmill31415@gmail.com\">kmill31415@gmail.com</a>&gt;</p>\n<p>Authored-by: <a href=\"https://github.com/digama0\">digama0</a> <a href=\"https://github.com/leanprover-community/mathlib/commit/3d7987cda72abc473c7cdbbb075170e9ac620042\">(commit)</a></p>\n</blockquote>",
        "id": 307199556,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1667249478
    },
    {
        "content": "<p>How do I fix the error I get when declaring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">band</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">||</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">bor</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>to locally redefine &amp;&amp; and || ?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/296106859\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/3d7987cda72abc473c7cdbbb075170e9ac620042\">chore(*): bump to lean 3.47.0</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib/pull/16252\">mathlib#16252</a>)</p>\n<p>A major change is that notations now require names when they are shadowing another identical notation, even if it is a local notation. Also, because localized notations can be imported in a variety of contexts, there are some new best practices for them:</p>\n<ul>\n<li>localized notations should always have a <code>(name := ...)</code>. Notation names are unrelated to declaration names, but the declaration name is a reasonable base for the notation name.</li>\n<li>localized notations should never use <code>_</code> in the notation, because this gets desugared to a unique metavariable index, meaning that the notation will not be recognized as a duplicate of itself if <code>open_locale</code> is used when the notation is already available. Instead, you should use the <code>hole!</code> notation, which unfolds to <code>_</code>.</li>\n</ul>\n<p>Another major change is that projection notation (<code>x.foo</code>) now always instantiates implicit arguments with metavariables, which is consistent with Lean 4. To simulate the older behavior, one can use either strict implicit arguments for the structure field (e.g. <code>∀ {{n}}, p n</code> instead of <code>∀ {n}, p n</code>) or, depending on specifics, writing <code>λ _, x.foo</code> to ensure the implicit argument is preserved as an argument.</p>\n<p>Co-authored-by: Kyle Miller &lt;<a href=\"mailto:kmill31415@gmail.com\">kmill31415@gmail.com</a>&gt;</p>\n<p>Authored-by: <a href=\"https://github.com/digama0\">digama0</a> <a href=\"https://github.com/leanprover-community/mathlib/commit/3d7987cda72abc473c7cdbbb075170e9ac620042\">(commit)</a></p>\n</blockquote>",
        "id": 307199746,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1667249541
    },
    {
        "content": "<p>So is there a workaround?</p>",
        "id": 307199854,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1667249580
    },
    {
        "content": "<p>Can't you just do what the error suggests?</p>",
        "id": 307200062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1667249652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/change.20in.20local.20notation.3F/near/307197737\">said</a>:</p>\n<blockquote>\n<p>I actually stupidly used my desktop to prepare the lecture and then my laptop for life proving and got caught by this issue in class? :-(</p>\n</blockquote>\n<p>To me using a different version of Lean when preparing and when lecturing seems more \"braindead\" than the definition of <code>band</code> and <code>bor</code> in core Lean.</p>",
        "id": 307200107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667249665
    },
    {
        "content": "<p>Like johan and the error message say, the fix is to declare a name for the notation, it can be anything you like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">band</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">||</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">bor</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 307204203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667251181
    }
]