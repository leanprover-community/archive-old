[
    {
        "content": "<p>I've defined a ring structure <code>ogf {M : Type} [ring M] : ring ( \\N -&gt; M )</code>, but then when I try to multiply the elements it seems like its just taking the multiplication component-wise, rather than the ring multiplication I've defined.  Is there some way to keep that other multiplication from arising?  </p>\n<p>As a different approach, when I try to explicitly use <code>ring.mul a b</code> instead of <code>a*b</code> I can't unfold the ring multiplication.  Any of <code>unfold ring.mul, ring, ogf</code> don't work, and I can't rewrite the parts it should be defined in terms of.  And it won't let me use <code>ogf.mul</code> or any variation of it.  What should I do to break it up, or what should I use in place of <code>ring.mul</code>?</p>",
        "id": 266325269,
        "sender_full_name": "Sigma",
        "timestamp": 1640764600
    },
    {
        "content": "<p>The multiplication you're getting is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_mul\">docs#pi.has_mul</a>. The usual way to deal with this is to work with a type synonym of your <code>nat -&gt; M</code>, and place the ring structure on that.</p>",
        "id": 266325352,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640764699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"436145\">@Sigma</span> Which ring structure is this <code>ogf</code>?</p>",
        "id": 266328020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640767380
    },
    {
        "content": "<p>I had wanted to avoid synonyms since I was worried it would take too much time translating trivial things over, but that makes sense.  </p>\n<p>ogf is just the ring multiplication for if you treated the sequence as its power series, its ordinary generating function, hence ogf.  I had been wondering if you could just formulate generating functions as their ring structures on the sequences, rather than moving them over to some new object.  Ordinary generating functions and Exponential generating functions are both just power series, where the mapping either does or doesnt normalize the coefficients.  But a Dirichlet generating function for example, is a different beast than the other two, with a different multiplication.  So I was trying to unify the notions of generating functions just as different ring structures on <code>\\N -&gt; M</code> rather than needing to define a whole new middleman class of objects for each one.</p>",
        "id": 266329643,
        "sender_full_name": "Sigma",
        "timestamp": 1640769237
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_series\">docs#power_series</a> exists. So I think it makes sense to build a <code>ogf</code> constructor for it.</p>",
        "id": 266329946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640769522
    },
    {
        "content": "<p>powerseries has a ring coercion as well at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_series.ring\">docs#power_series.ring</a> , which should work for ordinary and exponential generating series, but not for any of the rest.  The next option I thought of was data.seq.seq, but that includes <code>none</code> which we would need to quotient out.  I don't know how to use the setoid stuff so I certainly won't be the one to take that approach.  </p>\n<p>Using <code>{\\N -&gt; M // true}</code> seems like it pretty much works, but its a bit of a pain.  You need to be careful, if you ever take <code>a.val * b.val</code> it becomes pi.mul</p>",
        "id": 266485628,
        "sender_full_name": "Sigma",
        "timestamp": 1640932927
    },
    {
        "content": "<p>What's the definition of mul you're using, if it's not the <code>power_series</code> one?</p>",
        "id": 266501106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640953884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436145\">Sigma</span> <a href=\"#narrow/stream/113488-general/topic/Suppressing.20instances.20.26.20unfolding.20structures/near/266485628\">said</a>:</p>\n<blockquote>\n<p>Using <code>{\\N -&gt; M // true}</code> seems like it pretty much works, but its a bit of a pain.  You need to be careful, if you ever take <code>a.val * b.val</code> it becomes pi.mul</p>\n</blockquote>\n<p>This looks overly complicated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ogf</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">ogf</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>would probably be easier to setup.</p>",
        "id": 266501753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640954884
    },
    {
        "content": "<p>But before taking that route, I would also like to know why <code>power_series</code> can't be reused.</p>",
        "id": 266501759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640954908
    },
    {
        "content": "<p>defining <code>def ogf := ℕ → M</code> isn't enough to stop the pi.mul instance from taking over.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ogf</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">ogf</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finset.sum</span> <span class=\"o\">(</span><span class=\"n\">finset.nat.antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">m.fst</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">m.snd</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>  <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ogf</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the product simplifies to <code>2 = 4</code></p>\n<p>I don't want to use <code>power_series</code> since it already has a ring instance just like pi.mul, and it only works for 1 (and a half) kinds of generating functions.  So if we ever try to implement dirichlet generating functions or anything besides ordinary and exponential, then it wouldn't have the correct multiplication.  <br>\nFurther, power series aren't fundamental to the concept of generating functions, its just written in that way so we remember how to do the multiplication of the sequence coefficients.  I want to emphasize that.  </p>\n<p>I'm trying to explore the question of \"given a sequence with some recursive relationship, what concept of generating function.  Rather, what ring multiplication on sequences, gives the most information about the sequence.\"<br>\nWith ogf's we can get the relation <code>F n = F n - 2 + F n - 1</code> into <code>F = x + x^2 F + x F</code>, so the fibonacci sequence becomes the terms of <code>x/(1 - x - x^2)</code><br>\nWith egf's this becomes a diff eq instead, which is marginally more difficult to solve, and it can't be simplified at all with a dirichlet generating function.  </p>\n<p>The shift <code>F n - k</code> becomes <code>x^k F</code> plus some correcting polynomial of order &lt;k for an ogf.  It becomes taking derivatives for an exponential generating function.  A dirichlet series does not respect shifts, but it does respect multiplicative functions and give the mobius inversion formula.  So they have different benefits in different situations.</p>",
        "id": 266528155,
        "sender_full_name": "Sigma",
        "timestamp": 1640991925
    },
    {
        "content": "<p>Try <code>(id (λ n, 1) : ogf M) * ...</code>. I think this will work</p>",
        "id": 266536187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641005514
    },
    {
        "content": "<p>If I'm right then you've fallen into a gotcha -- your code checks that the type of the function is defeq to ogf M but doesn't actually change the type to ogf M. If the id trick doesn't work then ignore what I'm saying. Maybe it's best that you make an explicit constructor instead of all this defeq reliance</p>",
        "id": 266536282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641005645
    },
    {
        "content": "<p>the <code>id</code> trick seems to work</p>",
        "id": 266536968,
        "sender_full_name": "Sigma",
        "timestamp": 1641006812
    },
    {
        "content": "<p>i think by explicit constructor you meant, <code>structure ogf (M : Type*) := mk :: (f : ℕ → M)</code>, which i got into a ring just by copy and pasting the old definition and making a new extensionality lemma.  and it seems to work perfectly fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">ogf.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"n\">ogf.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">18</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>checks</p>",
        "id": 266538088,
        "sender_full_name": "Sigma",
        "timestamp": 1641008823
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hahn_series\">docs#hahn_series</a> have the structure you desire?</p>",
        "id": 266554306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641037581
    },
    {
        "content": "<p>It seems to have the right multiplication</p>",
        "id": 266554308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641037588
    }
]