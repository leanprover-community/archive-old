[
    {
        "content": "<p>Consider the following example code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo_iff</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- norm_num [foo], -- doesn't work</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">foo_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">foo'</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Is there automation to generate <code>foo_iff</code> (or something similar) automatically from <code>foo</code>? I was kind of hoping <code>@[simps]</code> on <code>foo</code> would work, but apparently it doesn't like <code>Prop</code>s. Failing that, is there a tactic that will prove stuff like <code>foo_iff</code>?</p>\n<p>The use case is in the first <code>example</code>, I need <code>foo_iff</code> to get <code>norm_num</code> to \"see through\" <code>foo</code>. While I could switch to using <code>norm_num [foo']</code>, <code>foo'</code> is more unwieldy to use since you end up with <code>.1</code> and <code>.2</code> everywhere (particularly when there are more fields in the structure).</p>",
        "id": 214509493,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603656628
    },
    {
        "content": "<p><code>@[simps]</code> is not designed for this: it creates simp-lemmas for fields of instances of a structure, not for showing that a structure is equivalent to another expression.<br>\nWriting a metaprogram that does this for you is not very hard, although the difficulty increases if you want to make it more general: you could allow dependencies between the fields, and make those equivalent to existential quantifiers, and you could allow type-valued structures, and show them <code>equiv</code>alent to a type built from (p)sigma's.</p>",
        "id": 214620044,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603739550
    },
    {
        "content": "<p>does <code>mk_iff_of_inductive_prop</code> work?</p>",
        "id": 214620742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603739920
    },
    {
        "content": "<p>Thanks! It did exactly what I wanted in <a href=\"https://github.com/leanprover-community/mathlib/issues/4599\">#4599</a> (any other maintainers want to check this real quick?). </p>\n<p>It might be easier to use as an attribute?</p>",
        "id": 214624561,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603741950
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/4863\">#4863</a>. I named the attribute <code>mk_iff</code>.</p>",
        "id": 215225530,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604202968
    }
]