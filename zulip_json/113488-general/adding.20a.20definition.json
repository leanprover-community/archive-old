[
    {
        "content": "<p>I'd like implement a <code>[user_command]</code> which adds a definition to the environment at the place where the <code>[user_command]</code> is executed. Of course, there is <code>environment.add</code>, but I have to build a <code>declaration</code> and in particular pass a <code>name</code>. This won't act the same way as writing <code>def blah : type = foo ...</code> on that line because the latter will have a \"full name\" <code>me.my_namespace.blah</code> if this all goes on inside <code>namespace me.my_namespace</code>. Is there a way to fix this: either to get the current namespace, or to make a declaration as if it happened using a <code>def</code>?</p>",
        "id": 133939240,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536914008
    },
    {
        "content": "<p><span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 133939576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536914467
    },
    {
        "content": "<p>there is a command <code>get_current_definition</code> that tells you the name of the currently elaborating definition, from which you can derive the namespaces, but it doesn't work in a user command</p>",
        "id": 133939698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536914645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Hallelujah! According to the source code (see <code>src/library/tactic/tactic_state.cpp</code>), it turns out that the first element returned by <code>open_namespaces</code> is <em>always</em> the namespace of the current line, as long as you're in a command! WHOOP WHOOP</p>",
        "id": 133942021,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536918348
    },
    {
        "content": "<p>*as long as youre being run in <em>some</em> namespace, but of course there is a hack to check if this is the case...</p>",
        "id": 133942101,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536918449
    },
    {
        "content": "<p>This will probably all break again in <span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span>, but I guess we'll cope. :-)</p>",
        "id": 133943119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536920043
    },
    {
        "content": "<p>Ok I was wrong again because my \"easy hack\" to check you're in the default namespace doesn't work and I can't fix it. But, I just discovered <code>with_input command_like</code> in the <code>lean.parser</code> monad. It's a backdoor into.... everything! So I can just emit <code>def blah : type = blah</code> from the command!</p>",
        "id": 133947033,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536925908
    },
    {
        "content": "<p>---no silly hack required!</p>",
        "id": 133947101,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536925959
    },
    {
        "content": "<p>oooh... can we add <code>rfl</code> lemmas from commands using this??</p>",
        "id": 133947786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536926826
    },
    {
        "content": "<p>Yes, you can do anything</p>",
        "id": 133948698,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536928153
    },
    {
        "content": "<p>It saves the current parser state, then literally hands a string to the parser as if it was the next line of the file, then restores it</p>",
        "id": 133948710,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536928184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span></p>",
        "id": 133948714,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536928195
    },
    {
        "content": "<p>Ill cook up a demo</p>",
        "id": 133948766,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536928210
    },
    {
        "content": "<p>I've been wanting to do that for a while; I have lots of boilerplate <code>rfl</code> lemmas that just repeat a structure field.</p>",
        "id": 133948866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536928407
    },
    {
        "content": "<p>I do wonder whether this is a good idea, considering <span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span>, but I'm still tempted.</p>",
        "id": 133948933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536928487
    },
    {
        "content": "<p>when it comes time we could always turn on printing what the command outputs and go and replace them with their content<br>\nor every write a script to if there are lots</p>",
        "id": 133949017,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536928577
    },
    {
        "content": "<p>what needs to go in and what needs to come out?</p>",
        "id": 133949024,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536928592
    },
    {
        "content": "<p>Here's a prototypical example:</p>\n<div class=\"codehilite\"><pre><span></span>def equivalence_inverse (F : C ⥤ D) [full F] [faithful F] [ess_surj F] : D ⥤ C :=\n{ obj  := λ X, F.obj_preimage X,\n  map&#39; := λ X Y f, F.preimage ((F.fun_obj_preimage_iso X).hom ≫ f ≫ (F.fun_obj_preimage_iso Y).inv),\n  map_id&#39; := λ X, begin apply F.injectivity, obviously, end,\n  map_comp&#39; := λ X Y Z f g, begin apply F.injectivity, obviously, end }.\n\n-- FIXME pure boilerplate...\n@[simp] private lemma equivalence_inverse_map\n  (F : C ⥤ D) [full F] [faithful F] [ess_surj F]\n  {X Y : D} (f : X ⟶ Y) : (equivalence_inverse F).map f = F.preimage ((F.fun_obj_preimage_iso X).hom ≫ f ≫ (F.fun_obj_preimage_iso Y).inv) := rfl.\n</pre></div>",
        "id": 133949122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536928697
    },
    {
        "content": "<p>I would like to write: <code>generate_rfl_lemma equivalence_inverse map</code></p>",
        "id": 133949131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536928721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> ok I think I can do that, just sorry, who is getting rid of the primes on (e.g.) <code>map'</code>? I've always wondered</p>",
        "id": 133951214,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536931036
    },
    {
        "content": "<p>Yeah, that's a real hack. Unfortunately sometimes it's necessary to state something, and then restate it. (e.g. to clean up the mess that autoparam leaves, or to restate something using a coercion that can only be introduced later).</p>",
        "id": 133951439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536931248
    },
    {
        "content": "<p>The \"convention\" is now to at first name the declaration with a prime at the end of the name, and then to remove it for the \"real\" declaration.</p>",
        "id": 133951460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536931278
    },
    {
        "content": "<p>The <code>restate_axiom</code> user command does this.</p>",
        "id": 133951479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536931305
    },
    {
        "content": "<p>If it's not given an explicit new name, it inspects the old name, removes a prime if it finds one, and otherwise adds \"_lemma\".</p>",
        "id": 133951533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536931342
    },
    {
        "content": "<p>And so you have to prove that what is generated is actually equal to what was there originally all the time?</p>",
        "id": 133951769,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536931560
    },
    {
        "content": "<p>Also, sorry going to cook it up now, just writing library functions and testing they work<br>\nThe only quirk is that when there is an attribute error, the red line appears on the first line of the file.... But I think there is a way to fix that maybe</p>",
        "id": 133951865,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536931630
    },
    {
        "content": "<p>but we also have a command <code>suggestion category_theory</code> now</p>",
        "id": 133951895,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536931665
    },
    {
        "content": "<p>I don't even think we need my thing to do this actually Scott, since we could always just put the lemma in the same namespace as wherever the parameter (e.g. <code>equivalence_inverse</code>) lives</p>",
        "id": 133964431,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536942730
    },
    {
        "content": "<p>I think I should talk to you more about what exactly it should do, since it seems hard to decide whether for example <code>{X Y : D}</code> in the above example should have curly brackets instead of parentheses.</p>",
        "id": 133966107,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536944858
    }
]