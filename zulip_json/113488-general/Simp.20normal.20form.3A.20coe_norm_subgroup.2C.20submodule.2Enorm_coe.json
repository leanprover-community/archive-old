[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_norm_subgroup\">docs#coe_norm_subgroup</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.norm_coe\">docs#submodule.norm_coe</a> are two <code>simp</code> lemmas pointing in opposite directions. Is there a reason for this discrepancy?</p>\n<p>The reason I ask is that I'm defining subobject classes in the same style as morphism classes. The instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_subgroup.semi_normed_group\">docs#add_subgroup.semi_normed_group</a> can be easily generalized to <code>add_subgroup_class</code>, but that would lead to a cycle in the <code>simp</code> set since submodule is also an <code>add_subgroup_class</code>.</p>",
        "id": 267851114,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642070747
    },
    {
        "content": "<p>Outside of implicit use by <code>simp</code> or <code>norm_cast</code>, I see only one use for each (in a forward <code>rw</code>)</p>",
        "id": 267851631,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642071036
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.norm_mk\">docs#submodule.norm_mk</a> is perfectly fine: morally <code>x=⟨x, hx⟩</code>, so if <code>simp</code> throws <code>hx</code> away I don't see how one cannot be happy.</p>",
        "id": 267851765,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642071108
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_norm_subgroup\">docs#coe_norm_subgroup</a> is probably rarely used, we don't have <code>x : ↥s</code> very often</p>",
        "id": 267851857,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642071145
    },
    {
        "content": "<p>That was my impression too, without any real experience of this part of the library. I'll see what breaks if I turn <code>coe_norm_subgroup</code> the other way (in preparation for removing it entirely).</p>",
        "id": 267852012,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642071222
    },
    {
        "content": "<p>Sorry, for some reason my browser pointed at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.norm_mk\">docs#submodule.norm_mk</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.norm_coe\">docs#submodule.norm_coe</a>  so I misunderstood your question</p>",
        "id": 267852023,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1642071228
    },
    {
        "content": "<p><code>∥x∥ = ∥↑x∥</code> seems like the better direction to me - most of the <code>coe_*</code> lemmas are about pushing <code>coe</code> to the innermost position</p>",
        "id": 267853896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642072172
    },
    {
        "content": "<p>In this case it just so happens there is no outermost coe, but it still turns an operation on the subtype into an operation on the underlying type.</p>",
        "id": 267853986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642072210
    },
    {
        "content": "<p>On the other hand, <code>norm_cast</code> wants <code>coe_norm_subgroup</code> to be reversed since it introduces a cast as-is.</p>",
        "id": 267855435,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642073117
    },
    {
        "content": "<p>Is there any documentation on the rules for annotating things with <code>norm_cast</code> or <code>norm_cast move</code> or ...?</p>",
        "id": 267855880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642073379
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#norm_cast%20attributes\">attribute docs</a> for <code>norm_cast</code> explain it a bit.</p>",
        "id": 267856077,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642073506
    },
    {
        "content": "<p>As I understand it, the LHS generally should have more casts.</p>",
        "id": 267856210,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642073563
    },
    {
        "content": "<p>I created two branches, both seem to work fine on the basic files: <a href=\"https://github.com/leanprover-community/mathlib/tree/reverse-coe_norm_subgroup\">branch#reverse-coe_norm_subgroup</a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/reverse-submodule_norm_coe\">branch#reverse-submodule_norm_coe</a></p>",
        "id": 267858533,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642075031
    },
    {
        "content": "<p>/poll <code>∥(↑x : E)∥ = ∥(x : s)∥</code> or <code>∥(x : s)∥ = ∥(↑x : E)∥</code><br>\n<code>∥(↑x : E)∥ = ∥(x : s)∥</code> (<a href=\"https://github.com/leanprover-community/mathlib/tree/reverse-coe_norm_subgroup\">branch#reverse-coe_norm_subgroup</a>)<br>\n<code>∥(x : s)∥ = ∥(↑x : E)∥</code> (<a href=\"https://github.com/leanprover-community/mathlib/tree/reverse-submodule_norm_coe\">branch#reverse-submodule_norm_coe</a>)</p>",
        "id": 267859343,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642075492
    },
    {
        "content": "<p>It's just a fact that sometimes mathematicians want to push coercions in and sometimes pull them out, so it's difficult to know what \"the right direction\" is.</p>",
        "id": 267861410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642076733
    },
    {
        "content": "<p>Since consensus points toward inserting the coercion: <a href=\"https://github.com/leanprover-community/mathlib/pull/11427\">#11427</a></p>",
        "id": 267878839,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642085342
    }
]