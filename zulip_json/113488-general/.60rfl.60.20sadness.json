[
    {
        "content": "<p>Why isn't this lemma <code>rfl</code> :'(</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">inside_struct</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dummy</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">im_obvious</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 167849183,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560259414
    },
    {
        "content": "<p>because it's an eta right</p>",
        "id": 167849388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560259553
    },
    {
        "content": "<p>How do you prove it then :'(<br>\nIf you delete the inside struct then it's fine.</p>",
        "id": 167849450,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560259574
    },
    {
        "content": "<p>This doesn't compile for me :-/ <code>invalid field notation, 'v' is not a valid \"field\" because environment does not contain 'foo.v'</code></p>",
        "id": 167849462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560259590
    },
    {
        "content": "<p>Sorry Kevin, fixed it now</p>",
        "id": 167849514,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560259628
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">im_obvious</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">v</span>\n</pre></div>\n\n\n<p><em>shrug</em></p>",
        "id": 167849712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560259779
    },
    {
        "content": "<p>It not being a <code>rfl</code> lemma is really heartbreaking because it makes using that projection useless/not type correct :(</p>",
        "id": 167849809,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560259845
    },
    {
        "content": "<p><code>unfold</code> must be applying <code>simp</code> I guess, if it's not definitional.</p>",
        "id": 167850310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560260169
    },
    {
        "content": "<p>wait this doesn't make sense, it isn't an eta, my reasoning is wrong</p>",
        "id": 167850340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260200
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">inside_struct</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dummy</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">im_obvious</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"n\">val</span>\n</pre></div>",
        "id": 167850390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260245
    },
    {
        "content": "<p>it should be definitionally equal though...</p>",
        "id": 167850397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260251
    },
    {
        "content": "<p>I'm thinking a bug in lean?</p>",
        "id": 167850412,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560260271
    },
    {
        "content": "<p>I don't think that this equality is definitionally equal.  The construction of the nested inductives pattern-matches on <code>val</code>, so it does not reduce (since we don't have eta for structures).</p>",
        "id": 167850498,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1560260327
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">foo.v.equations._eqn_1 : ∀ (v : inside_struct foo), foo.v (foo.intro v) = v</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">im_obvious</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">inside_struct</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"n\">val</span>\n</pre></div>",
        "id": 167850506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560260335
    },
    {
        "content": "<blockquote>\n<p>I don't think that this equality is definitionally equal.  The construction of the nested inductives pattern-matches on <code>val</code>, so it does not reduce (since we don't have eta for structures).</p>\n</blockquote>\n<p>this isn't structure eta</p>",
        "id": 167850555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260384
    },
    {
        "content": "<p>The <code>unfold</code> works because it's an automatically-generated equation lemma.</p>",
        "id": 167850653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560260449
    },
    {
        "content": "<p>wait the inductive type <code>foo</code> references <code>inside_struct foo</code></p>",
        "id": 167850769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260525
    },
    {
        "content": "<p>how does this compile at all</p>",
        "id": 167850772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260528
    },
    {
        "content": "<p>It is [pattern-matching on val].  Nested inductives (that is, <code>foo</code> here) are simulated using mutual inductives (which in turn are simulated using the normal inductives).  In this construction, <code>foo.intro</code> is a definition that converts everything into the mutual inductive type--and this <code>foo.intro</code> function hence pattern-matches on <code>inside_struct</code>.</p>",
        "id": 167850812,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1560260564
    },
    {
        "content": "<p>why doesn't this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span>\n<span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">α</span>\n<span class=\"k\">with</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n</pre></div>",
        "id": 167851345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260907
    },
    {
        "content": "<p>and what's the correct version?</p>",
        "id": 167851351,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560260913
    },
    {
        "content": "<p>Probably moving the argument of <code>A</code> left of the colon would help</p>",
        "id": 167851421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560260976
    },
    {
        "content": "<p><code>A</code> needs to satisfy some syntactic conditions to appear where it does in <code>B</code> and it's probably hard for Lean to verify them when you've defined <code>A</code> as an inductive family</p>",
        "id": 167851584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560261079
    },
    {
        "content": "<p>If you put basically anything other than <code>α</code> as the index in the constructor <code>mk</code>, the definition of <code>B</code> is likely invalid</p>",
        "id": 167851622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560261113
    },
    {
        "content": "<p>actually now that I try it I have no idea what the syntax should be though</p>",
        "id": 167851739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560261212
    },
    {
        "content": "<p>I guess mutual inductives all have to have the same parameters, based on how the encoding works</p>",
        "id": 167852445,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560261681
    }
]