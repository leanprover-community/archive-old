[
    {
        "content": "<p>Here's a petition. Currently, the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_ordered_sub\">docs#has_ordered_sub</a> typeclass has <code>∀ (a b c : α), a - b ≤ c ↔ a ≤ c + b</code> as an assumption. I want it to have <code>∀ (a b c : α), a - b ≤ c ↔ a ≤ b + c</code> instead. The key difference is that this would allow us to put a <code>has_ordered_sub</code> instance on ordinals. I think every current concrete instance is with commutative addition, so this change shouldn't impact it.</p>",
        "id": 292837631,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660167753
    },
    {
        "content": "<p>I think this may have already been the original intention. Quoting from the docstring: </p>\n<blockquote>\n<p>In other words, <code>a - b</code> is the least <code>c</code> such that <code>a ≤ b + c</code>.</p>\n</blockquote>\n<p>This of course is only true in noncommutative contexts with the redefinition I'm proposing.</p>",
        "id": 292837999,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660167927
    },
    {
        "content": "<p>Also, almost all of the API is proven with the <code>add_comm_semigroup</code> assumption.</p>",
        "id": 292838290,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660168081
    },
    {
        "content": "<p>Oh actually, this change is actually very easy to do</p>",
        "id": 292838710,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660168317
    },
    {
        "content": "<p>It's literally just swapping a few <code>_right</code> lemmas with a few <code>_left</code> lemmas and that's it</p>",
        "id": 292838763,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660168329
    },
    {
        "content": "<p>Yeah let's try this: <a href=\"https://github.com/leanprover-community/mathlib/pull/15991\">#15991</a></p>",
        "id": 292839159,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660168586
    },
    {
        "content": "<p>Oh, wait</p>",
        "id": 292845171,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660172090
    },
    {
        "content": "<p>This change would mean that additive groups no longer have an ordered substraction</p>",
        "id": 292845241,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660172148
    },
    {
        "content": "<p>That's probably undesirable</p>",
        "id": 292845247,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660172153
    },
    {
        "content": "<p>I guess we could make two separate classes<code>has_left_ordered_sub</code> and <code>has_right_ordered_sub</code> but maybe that's overkill</p>",
        "id": 292845717,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660172457
    },
    {
        "content": "<p>Actually, having two separate classes might not be such a bad idea. We do have a concrete purpose for each, after all.</p>",
        "id": 292846312,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660172814
    },
    {
        "content": "<p>I wish we had more examples of <code>has_left_ordered_sub</code> though, i.e. the one for ordinals</p>",
        "id": 292848652,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660174604
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonote\">docs#nonote</a> would also have a <code>has_left_ordered_sub</code> instance, so that's two examples?</p>",
        "id": 292862800,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660188502
    },
    {
        "content": "<p>Kind of a lame example since that's basically just ordinals again and there's not all that much API on that, but still</p>",
        "id": 292862811,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660188521
    },
    {
        "content": "<p>I think ordinal subtraction should really be written -a+b, but mathlib lacks a typeclass/notation for subtraction/division/quotient from the left ... I guess that's partially because mathlib doesn't have <a href=\"https://en.m.wikipedia.org/wiki/Quasigroup\">https://en.m.wikipedia.org/wiki/Quasigroup</a></p>",
        "id": 292884838,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660205594
    },
    {
        "content": "<p>We're about to get Jordan algebras. How about octonions and Moufang loops?</p>\n<p>We also see left exponential notation in <a href=\"https://en.m.wikipedia.org/wiki/Racks_and_quandles\">https://en.m.wikipedia.org/wiki/Racks_and_quandles</a></p>",
        "id": 292885393,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660205865
    },
    {
        "content": "<p>The current definition of <code>has_ordered_sub</code> feels a lot more canonical, since you're adding/subtracting <code>b</code> on the right on both sides of the <code>↔</code>. It's unfortunate that it doesn't apply for ordinals indeed, but I don't think it's worth it to add a separate class just for <code>ordinal</code> (and <code>nonote</code>), unless we find more examples.</p>",
        "id": 292894076,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660209872
    },
    {
        "content": "<p>Presumaby things like <code>ordinal × ordinal</code> are also examples, but I don't think they're interesting <em>enough</em> unless you have a convincing use for them</p>",
        "id": 292903651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660214110
    },
    {
        "content": "<p>I think we also have structures order-isomorphic to subsets of ordinals as examples, such as the lex sum of N and N</p>",
        "id": 292945332,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660229612
    },
    {
        "content": "<p>Though in that case addition is badly behaved too</p>",
        "id": 292945422,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660229639
    },
    {
        "content": "<p>I think the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_opposite\">docs#add_opposite</a> of ordinals will satisfy has_ordered_sub, if sub is unchanged even though add is swapped.</p>",
        "id": 292947121,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660230147
    },
    {
        "content": "<p>Could we use that to easily port theorems of <code>has_ordered_sub</code> to ordinals?</p>",
        "id": 292954830,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660232512
    }
]