[
    {
        "content": "<p>Is there any plan to make <code>monoid_algebra</code> less dependent on its unfolding to <code>finsupp</code>? I have had to fix a number of places in <a href=\"https://github.com/leanprover-community/mathlib/pull/16123\">#16123</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/16132\">#16132</a> where there are two defeq instances on <code>monoid_algebra</code> but there's a <code>finsupp</code> in the expression somewhere causing unification to fail.</p>",
        "id": 294233093,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660903461
    },
    {
        "content": "<p>I agree that this would be a good thing, I also had issues with that in representation theory.</p>",
        "id": 294255226,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1660912332
    },
    {
        "content": "<p>IMO the <code>monoid_algebra</code> (and other similar constructions) should be defined using the usual quotient-inductive definition, and the comparison with finsupp should be a separate algebra equiv.</p>",
        "id": 294256104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660912657
    },
    {
        "content": "<blockquote>\n<p>and the comparison with finsupp should be a separate algebra equiv.</p>\n</blockquote>\n<p>We can't state this equivalence without the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.algebra\">docs#add_monoid_algebra.algebra</a> that you seem to be suggesting we remove along with the current definition of <code>add_monoid_algebra</code>?</p>",
        "id": 294272586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660917683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, can you point to the specific location where unification is failing?</p>",
        "id": 294272861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660917761
    },
    {
        "content": "<p>See e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/16132/commits/25352a9ea179ef743453e53ed553d41d67ae3557\">this commit</a>: we are assuming an instance on <code>monoid_algebra</code>. Since we have <code>finsupp.single</code> in the goal, <code>monoid_algebra</code> gets unfolded to <code>finsupp</code> and suddenly the <code>monoid_algebra</code> instance does not get applied.</p>",
        "id": 294275920,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660918762
    },
    {
        "content": "<p>I think this would be less painful if either:</p>\n<ul>\n<li>We had a separate <code>monoid_algebra.monomial</code> instead of mixing in <code>finsupp.single</code></li>\n<li>We had a <code>finsupp.to_monoid_algebra</code> casting function to keep the types straight, along the lines of <code>to_multiplicative</code> etc</li>\n</ul>",
        "id": 294276278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660918881
    },
    {
        "content": "<p>I'm not suggesting that we don't introduce instances on <code>finsupp</code>. Rather that there should be some separation between <code>finsupp</code> and <code>monoid_algebra</code> via some algebra isomorphism. Making <code>monoid_algebra</code> irreducible (is it not right now?) could do the same thing.</p>",
        "id": 294276310,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660918894
    },
    {
        "content": "<blockquote>\n<p>Rather that there should be some separation between finsupp and monoid_algebra via some algebra isomorphism. </p>\n</blockquote>\n<p>But we can't put the algebra structure on finsupp, because <code>finsupp</code> has pointwise multiplication; so this isomorphism becomes impossible to state</p>",
        "id": 294276423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660918928
    },
    {
        "content": "<p>Oh I see. Ugh! So why is finsupp used for the monoid algebra in the first place!?</p>",
        "id": 294276567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660918982
    },
    {
        "content": "<p>Because it has all the right additive structure already</p>",
        "id": 294276626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919002
    },
    {
        "content": "<p>So we make a type alias to copy across all that, and then use a different multiplication</p>",
        "id": 294276670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919014
    },
    {
        "content": "<p>Just like what we do for <code>mul_opposite</code></p>",
        "id": 294276680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919020
    },
    {
        "content": "<p>Ok so let's make monoid_algebra irreducible</p>",
        "id": 294276725,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919036
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a> since I'm on mobile</p>",
        "id": 294276832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919059
    },
    {
        "content": "<p>The main difference is that we're more hygienic with <code>mul_opposite</code> as we use <code>mul_opposite.of_add</code> and <code>mul_opposite.to_add</code> to swap back and forth</p>",
        "id": 294276835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919060
    },
    {
        "content": "<p>What's the issue with making it irreducible?</p>",
        "id": 294276900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919082
    },
    {
        "content": "<p>My experience is that <code>irreducible</code> is usually a bad idea; it breaks a bunch of places where you actually need it to be semireducible (such as when trying to unify typeclass diamonds)</p>",
        "id": 294276944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919099
    },
    {
        "content": "<p>Another option is to put it in a structure with one projection to finsupp</p>",
        "id": 294277292,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919202
    },
    {
        "content": "<p>Is this a similar discussion to what happened when <code>polynomial</code> was sealed off from <code>finsupp</code>?  Could a similar approach be used with <code>(add_)monoid_algebra</code>?  I remember that for polynomials it was a lot of work (not by me!).</p>",
        "id": 294277298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919203
    },
    {
        "content": "<p>The main advantage of <code>irreducible</code> is that it forces us to use functions like <code>mul_opposite.of_add</code> and <code>mul_opposite.to_add</code>; but review is reasonably good at enforcing that too</p>",
        "id": 294277372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919227
    },
    {
        "content": "<p>PR review requires work by humans...</p>",
        "id": 294277485,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/defeq.20abuse.3A.20monoid_algebra.20.E2.86.92.20finsupp/near/294277298\">said</a>:</p>\n<blockquote>\n<p>Is this a similar discussion to what happened when <code>polynomial</code> was sealed off from <code>finsupp</code>?  Could a similar approach be used with <code>(add_)monoid_algebra</code>?  I remember that for polynomials it was a lot of work (not by me!).</p>\n</blockquote>\n<p>Perhaps the lesson here is that we put the structure barrier in the wrong place, and should have left <code>polynomial</code> as defeq to <code>monoid_algebra</code>, and made <code>monoid_algebra</code> the structure instead</p>",
        "id": 294277531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919274
    },
    {
        "content": "<p>Eric, I think that I agree.  I am now wishing that all the API that we have for polynomials were actually for (add_)monoid_algebras.</p>",
        "id": 294277762,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919341
    },
    {
        "content": "<p>That makes a lot of sense, actually.</p>",
        "id": 294277802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660919355
    },
    {
        "content": "<p>But we still end up in the mess where we have multiple names for the same thing; how do you avoid ending up with an expression like <code>add_monoid_algebra.of 1 + polynomial.X</code>? Even though all the instances agree, we now are trying to keep two separate sets of names for exactly the same construction.</p>",
        "id": 294277959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919402
    },
    {
        "content": "<p>But polynomials are more special... they're monoid algebras on free (comm) monoids. And their universal properties combine the universal prop of the algebra and the free monoid</p>",
        "id": 294278068,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919430
    },
    {
        "content": "<p>Have simp lemmas that go back through the API barrier?</p>",
        "id": 294278085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660919435
    },
    {
        "content": "<p><code>simp</code> can't always tell the difference between two defeq types; see the pain with have with <code>with_bot</code> and <code>option</code> lemmas interfering</p>",
        "id": 294278255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919489
    },
    {
        "content": "<p>At least in that case it's possible to index by the different instances, but for polynomial vs add_monoid_algebra all the instances would be exactly the same</p>",
        "id": 294278330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919514
    },
    {
        "content": "<p>Yes that's exactly the issue that my approach was trying to address</p>",
        "id": 294278342,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919517
    },
    {
        "content": "<p>There is also the possibility of porting as much as possible to monoid algebras, and seal off monoid algebras from finsupp and polynomials from monoid algebras...</p>",
        "id": 294278414,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919532
    },
    {
        "content": "<p>It would likely be a lot of work, though.</p>",
        "id": 294278504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919561
    },
    {
        "content": "<p>Sealing off monoid_algebra from finsupp seems reasonable because it avoids typeclass issues, but sealing off polynomials from monoid algebras is a massive amount of work just to get some different names (as the instances already agree)</p>",
        "id": 294278537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919572
    },
    {
        "content": "<p>And the worst bit is, after giving the mathematicians these nice names about polynomials, we have to tell them \"oh, if you're going to PR this for mathlib you have to write your proof using the ugly names about monoid_algebras and then transfer the results to polynomials\", otherwise the two sides of the seal diverge and now we have to do all the work again to get them back in sync</p>",
        "id": 294278941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919701
    },
    {
        "content": "<p>Would this procedure also split off naturally the monster file <code>algebra.monoid_algebra.basic</code>?  I am always worried when I do something that might have to modify that file...</p>",
        "id": 294278974,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919709
    },
    {
        "content": "<p>Sort of like how we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector_space\">docs#vector_space</a> but no-one uses it</p>",
        "id": 294279025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660919726
    },
    {
        "content": "<p>I think that if monoid_algebras received some more love, they would be much nicer to use.</p>",
        "id": 294279207,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919776
    },
    {
        "content": "<p>Currently, I find navigating monoid algebras tricky and I always feel that I should know more programming, rather than more maths.</p>",
        "id": 294279340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919814
    },
    {
        "content": "<p>(Well, being a mathematician, I'm used to the \"needing to know more programming than maths\", but it seems more extreme for monoid algebras.)</p>",
        "id": 294279452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660919853
    },
    {
        "content": "<p>Is that not just because Kenny used the free monoid as an exercise for himself to learn monads? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 294279609,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660919898
    },
    {
        "content": "<p>That's cute, but I think that was a mistake.</p>",
        "id": 294279827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919972
    },
    {
        "content": "<p>And I'm fairly comfortable with monads</p>",
        "id": 294279862,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660919982
    },
    {
        "content": "<p>For a recent example, it took me what I consider too long to first state and then prove that <code>X - 1 ≠ 0 </code> in <code>add_monoid_algebra ℤ (zmod 2)</code>.  I could not even find the notation for something resembling <code>X</code>!</p>",
        "id": 294280134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660920070
    },
    {
        "content": "<p>At some point, the goal passed through being <code>⇑↑↑a 1 = 0</code>.</p>",
        "id": 294280448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660920174
    },
    {
        "content": "<p>Ultimately, the proof was a single application of <code>simp [carefully chosen lemmas]</code>, which means that the lemmas are probably mostly there, but I found it hard.</p>",
        "id": 294280615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660920228
    },
    {
        "content": "<p>For similar reasons, I don't think the goal should end up loking like <code> f &gt;&gt;= g &lt;$&gt; t = X &lt;| h</code> when dealing with monoid algebras no matter how nice ascii art might be</p>",
        "id": 294281281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660920451
    },
    {
        "content": "<p>Adam, this can happen?!?!  <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 294282047,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660920689
    },
    {
        "content": "<p>I've had it happen with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group\">docs#free_abelian_group</a> for example (not to that extreme though)</p>",
        "id": 294282302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660920759
    },
    {
        "content": "<p>I'm glad that I was not there to see it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 294282466,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1660920810
    },
    {
        "content": "<p>I tend to use <code>dsimp</code> fairly indiscriminately though</p>",
        "id": 294282755,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660920893
    }
]