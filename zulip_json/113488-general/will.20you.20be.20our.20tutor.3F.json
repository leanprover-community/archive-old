[
    {
        "content": "<p>Hi everyone, here's another post about the <a href=\"https://leanprover-community.github.io/lftcm2020/\">LftCM 2020</a> workshop that takes place next week. Right now, 33 people have signed up for the workshop!</p>\n<p>This post is directed to people in the community with <em>ample</em> experience in Lean. Ideally, you will worked with Lean for at least a couple of months, and maybe have several PRs to mathlib under your belt.</p>\n<p>We are looking for tutors that will assist during the exercise sessions. These will take place in a Zoom meeting. We will have several breakout rooms per session. Please indicate for which sessions you could help us by leading a breakout room.<br>\nYour task will be to help participants get unstuck while they are working on Lean exercises.<br>\nSee <a href=\"https://leanprover-community.github.io/lftcm2020/schedule.html\">https://leanprover-community.github.io/lftcm2020/schedule.html</a> for the schedule.</p>\n<p>If you are a speaker for some session, please do <em>not</em> sign up as tutor for that same session.</p>\n<p>The poll where you can sign up can be found here: <a href=\"https://cloud.commelin.net/apps/polls/s/VwIVXMDDtSUBxtRI\">https://cloud.commelin.net/apps/polls/s/VwIVXMDDtSUBxtRI</a></p>\n<p>P.s.: You can answer with three options:</p>\n<ul>\n<li>green checkmark — yes, I'll be there</li>\n<li>yellow checkmark — maybe, if necessary</li>\n<li>red cross — unavailable</li>\n</ul>",
        "id": 203603853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594485279
    },
    {
        "content": "<p>Thanks to everyone who has offered help so far. We're still looking for a couple more.<br>\n<span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>   <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span>  <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> <br>\nDo any of you want to help with some of the sessions?</p>",
        "id": 203650840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594572216
    },
    {
        "content": "<p>I'll reply tonight.</p>",
        "id": 203650930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594572354
    },
    {
        "content": "<p>Thanks, just replied.</p>",
        "id": 203651386,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594573126
    },
    {
        "content": "<p>It's gonna be hard for me, because I have to take care of the kids at home. I'll try to show up when I can...</p>",
        "id": 203652615,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594574823
    },
    {
        "content": "<p>Thanks! I completely understand!</p>",
        "id": 203653100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594575489
    },
    {
        "content": "<p>No worries Sébastien! We're getting a little nervous because the participant list has grown quite a bit, but we'll manage.</p>",
        "id": 203653228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594575717
    },
    {
        "content": "<p>Where do the exercises come from? Are they set by the speaker?</p>",
        "id": 203654283,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594577389
    },
    {
        "content": "<p>Yes, thats the plan.</p>",
        "id": 203654731,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594578031
    },
    {
        "content": "<p>Sure I can do it, I'm just not really on top of all the other things I'm doing right now so was holding back</p>",
        "id": 203655258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594578892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, I should have the category theory exercises up soon. My first attempts were mostly too hard, so I'm writing some easier ones now. If you want to contribute any, please feel free! :-)</p>",
        "id": 203664510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594593550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, if you'd be interested/able to join at least for the category theory exercise session that would be great!</p>",
        "id": 203664576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594593667
    },
    {
        "content": "<p>Do you know how much time/effort it involves?</p>",
        "id": 203664830,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594594174
    },
    {
        "content": "<p>I think the idea is that we're going to split the zoom session into breakout rooms for the exercise session.</p>",
        "id": 203665532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594595353
    },
    {
        "content": "<p>So the idea would be to be available to join one of those rooms for the hour or so after the \"lecture\", to discuss problems with whatever fraction of the participants we end up.</p>",
        "id": 203665539,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594595390
    },
    {
        "content": "<p>Ah I see, I'll put my name down</p>",
        "id": 203665581,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594595410
    },
    {
        "content": "<p>Sorry, I answered this on the wrong thread.... I can do any of the 13:00 or later sessions. I'll show up for Kevin's session tomorrow morning and stick around as long as needed.</p>",
        "id": 203669571,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594602304
    },
    {
        "content": "<p>Thanks for the help, @ everyone</p>",
        "id": 203679590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594618525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/will.20you.20be.20our.20tutor.3F/near/203664510\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span>, I should have the category theory exercises up soon. My first attempts were mostly too hard, so I'm writing some easier ones now. If you want to contribute any, please feel free! :-)</p>\n</blockquote>\n<p>If you're still working on this, there might be some helpful ones from Markus or my kata on codewars, I also probably have some standalone lemmas floating about if you still need things</p>",
        "id": 203820707,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594724820
    },
    {
        "content": "<p>I still need easy (including really easy) exercises, if you want to suggest any!</p>",
        "id": 203822469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594726307
    },
    {
        "content": "<p>is Yoneda from first principles easy?</p>",
        "id": 203822826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594726576
    },
    {
        "content": "<p>Yeah one nice thing could be constructing the iso between b and c given a natural (in a) bijection from <code>(a -&gt; b)</code> to <code>(a -&gt; c)</code></p>",
        "id": 203823526,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594727172
    },
    {
        "content": "<p>I'm not sure if these are appropriate for what you're looking for but:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">equiv_reflects_mono</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">≌</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hef</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">equiv_preserves_mono</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">≌</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 203823585,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594727247
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">over_terminal</span> <span class=\"o\">[</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"o\">(</span><span class=\"err\">⊤</span><span class=\"bp\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"err\">≌</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>perhaps</p>",
        "id": 203823662,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594727295
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">real_pullback</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">B</span> <span class=\"err\">⥤</span> <span class=\"n\">over</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 203823677,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594727311
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">reflects_iso_of_reflects_limits_of_shape_punit</span> <span class=\"o\">[</span><span class=\"n\">reflects_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">punit</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">reflects_isomorphisms</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>I probably should PR this to mathlib but I haven't yet so might be a good exercise</p>",
        "id": 203823713,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594727367
    },
    {
        "content": "<p>As a completely trivial very first exercise, how about reproving some basic facts about monomorphisms?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">isomorphism</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">right_cancellation</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">hgh</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">hgh</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">right_cancellation</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">W</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">cancel_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">cancel_mono</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hxy</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">right_cancellation</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">W</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cancel_mono</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">reassoc_of</span> <span class=\"n\">hxy</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">right_cancellation</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">hgh</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">is_iso</span><span class=\"bp\">.</span><span class=\"n\">hom_inv_id</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"err\">←</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">hgh</span><span class=\"o\">,</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203825536,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594728735
    },
    {
        "content": "<p>Thanks, both, these are good easy exercises. I think I'll have enough shortly, just getting everything in order.</p>",
        "id": 203829476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594731456
    },
    {
        "content": "<p>I keep writing exercises and discovering things that are just horrible in mathlib, and get distracted fixing them. :-)</p>",
        "id": 203829493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594731475
    },
    {
        "content": "<p>Fixing mathlib is always a good and important thing</p>",
        "id": 203854920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594744198
    }
]