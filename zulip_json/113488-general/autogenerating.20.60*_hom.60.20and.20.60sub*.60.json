[
    {
        "content": "<p>I think it would be nice to have some basic theory about <code>*_hom</code> (<code>id</code>, <code>comp</code>, <code>comp_id</code>, <code>id_comp</code>, <code>comp_assoc</code>, cancellation properties, maybe <code>prod</code> and/or <code>pi</code>) and substructures (<code>complete_lattice</code>, <code>sub*.val</code>, <code>subtype_mk</code> or <code>cod_restrict</code>, <code>of_le</code>, <code>restrict</code>) autogenerated, because this way we can guarantee that we use same API. Unfortunately, we can't use <code>category_theory</code> for <code>*_hom</code> lemmas because we want <code>comp</code> to be defined for <code>Type</code>s in different universes. In a one-universe world, I'd say \"define a concrete category ASAP, then use category theory notation and theorems\".</p>\n<p>I see three main options:</p>\n<ol>\n<li>Leave it as is, and try to sync API manually.</li>\n<li>Use Lean metaprogramming.</li>\n<li>Use external templates (e.g., <code>python</code>+<code>jinja2</code>).</li>\n</ol>\n<p>Pros and cons as I see them:</p>\n<ol>\n<li>pros: easy to read and write code; cons: hard to sync;</li>\n<li>pros: can use a lot of information; cons: hard to write; defs, statements &amp; proofs are not readable without knowledge of metaprogramming;</li>\n<li>pros: easy to write templates; generated code is readable by a user who doesn't know template language or lean metaprogramming;<br>\ncons: extra dependency, can't use internal information about a structure.</li>\n</ol>",
        "id": 193236230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586287723
    },
    {
        "content": "<ol start=\"4\">\n<li>abolish polymorphism because it's not necessary in classical mathematics</li>\n</ol>",
        "id": 193237206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586288221
    },
    {
        "content": "<p>Last time I asked <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> explained that in some cases he really wants to have universe polymorphism.</p>",
        "id": 193237463,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288333
    },
    {
        "content": "<p>But category theory doesn't give us automation for <code>prod</code>/<code>pi</code>/<code>sub*</code> anyway.</p>",
        "id": 193237574,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288387
    },
    {
        "content": "<p>So without some kind of code generation we'll have to deal with the fact that, e.g., <code>submodule</code>s use different names than <code>subgroup</code>s, some facts are here for <code>subalgebra</code>s but not for <code>submonoid</code>s, and adding <code>subsemiring</code>s is a lot of work.</p>",
        "id": 193237942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288582
    },
    {
        "content": "<p>This has something to do with varieties. <a href=\"https://en.m.wikipedia.org/wiki/Variety_(universal_algebra)\" title=\"https://en.m.wikipedia.org/wiki/Variety_(universal_algebra)\">https://en.m.wikipedia.org/wiki/Variety_(universal_algebra)</a> I think this stuff can probably be pushed a long way, to give colimits and limits and adjoints of the canonical functors between these categories. I'd love to see how far this could be pushed. That's quite a big project though.</p>",
        "id": 193237954,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586288590
    },
    {
        "content": "<p>I'm not sure that we can use varieties to actually generate definitions and lemmas.</p>",
        "id": 193238065,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288650
    },
    {
        "content": "<p>I mean, if we want to have nice <code>structure</code>s, then we'll need some tactic to transfer statements anyway.</p>",
        "id": 193238342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288788
    },
    {
        "content": "<p>Yes. You might be able to prove things in a great generality, and write automation to generate the special cases. Not sure if that's a good way of doing it, particularly if you're just going for homs and subobjects.</p>",
        "id": 193238485,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586288881
    },
    {
        "content": "<p>I'd go with \"generate using Python\" because it gives readable definitions and proofs but this adds an extra dependency.</p>",
        "id": 193238963,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586289117
    },
    {
        "content": "<p>Wouldn't the generated stuff be autonomous after generation?</p>",
        "id": 193239077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586289165
    },
    {
        "content": "<p>It would, so we can <code>git add</code> it.</p>",
        "id": 193239124,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586289189
    },
    {
        "content": "<p>And CI can easily check that generated code agrees with the actual <code>lean</code> file.</p>",
        "id": 193239424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586289319
    },
    {
        "content": "<p>I don't understand why you need to CI anything here.</p>",
        "id": 193239705,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586289468
    },
    {
        "content": "<p>Isn't the goal to write Lean file, and then be happy with them?</p>",
        "id": 193239728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586289479
    },
    {
        "content": "<p>I want to have synced theories for different algebraic structures. If someone wants to modify it, the proper way is to adjust the template, then regenerate. Or add a lemma/def outside of the \"generated\" section/file.</p>",
        "id": 193240463,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586289821
    },
    {
        "content": "<p>I see.</p>",
        "id": 193240551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586289853
    },
    {
        "content": "<p>But it still wouldn't make it harder to <em>use</em> mathlib without a sane python installation.</p>",
        "id": 193240599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586289878
    },
    {
        "content": "<p>If we <code>git add</code> generated files, then <em>using</em> mathlib and contributing to any other file will not be harder.</p>",
        "id": 193240692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586289928
    },
    {
        "content": "<p>I'm pretty wary about templating Lean files using python. My experience of previous projects that generated source code from a program written in another language was that the generated files quickly degenerated into non-human-usable disasters.</p>",
        "id": 193260133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586301637
    },
    {
        "content": "<p>I'd prefer to explore using Lean meta-programming more.</p>",
        "id": 193260176,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586301670
    },
    {
        "content": "<p>Then we'll have a hard to read file right away.</p>",
        "id": 193260444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586301860
    },
    {
        "content": "<p>I can't be sure about others but for me it's hard to read Lean meta-programs.</p>",
        "id": 193261022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586302275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What do you think about the following? I'll try to write some <code>jinja</code> template. If it will lead to an unreadable file, we trash it.</p>",
        "id": 193266080,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586307162
    },
    {
        "content": "<p>Obviously I can't say no to trying. :-) But I just feel we should eat our own dog food here!</p>",
        "id": 193266173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307279
    },
    {
        "content": "<p>If the meta programming is too hard / too unreadable, we should do a better job.</p>",
        "id": 193266174,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307292
    },
    {
        "content": "<p>This question right here is meant to be _what Lean is for_.</p>",
        "id": 193266180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307311
    },
    {
        "content": "<p>A theorem prover with usable metaprogramming.</p>",
        "id": 193266185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307324
    },
    {
        "content": "<p>It feels like once we add outside templating we've admitted defeat. :-)</p>",
        "id": 193266191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307340
    },
    {
        "content": "<p>Admittedly, I am very sympathetic to the problem at hand.</p>",
        "id": 193266244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307379
    },
    {
        "content": "<p>I have been meaning to automate the construction of colimits / free objects for a long time, but the metaprogramming intimidates me!</p>",
        "id": 193266257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307402
    },
    {
        "content": "<p>We are hitting a bottleneck here.</p>",
        "id": 193266340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307550
    },
    {
        "content": "<p>Availability of metaprogramming resources has been outstripped by availability of mathematical resources...</p>",
        "id": 193266343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307570
    },
    {
        "content": "<p>(I can see Leo is on zulip right now, I feel embarrassed saying \"what Lean is for\", even if I know he doesn't read the main channels. :-)</p>",
        "id": 193266396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586307610
    },
    {
        "content": "<p>You've convinced me to try lean metaprogramming. Be prepared to answer lots of stupid questions.</p>",
        "id": 193268668,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586310595
    },
    {
        "content": "<p>OK, first stupid question: is it possible to autogenerate, e.g., <code>has_coe_to_fun</code> for a <code>monoid_hom</code> without loosing readability?</p>",
        "id": 194874614,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587512195
    },
    {
        "content": "<p>With jinja templates the template will be slightly less readable but it'll generate exactly the same code as the one we have in <code>algebra/group/hom.lean</code>.</p>",
        "id": 194875642,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587513130
    }
]