[
    {
        "content": "<ul>\n<li>Lean's typeclass inference prefers <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_add_comm_group\">docs#ordered_add_comm_group</a> over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_add_comm_group\">docs#linear_ordered_add_comm_group</a>, so it doesn't demand I mark <code>test1</code> below <code>noncomputable</code>. (Or maybe it just finds the former before the latter.)</li>\n<li>A similar test shows it also prefers <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_ring\">docs#ordered_ring</a> over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_ring\">docs#linear_ordered_ring</a>.</li>\n<li>However, it prefers <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_comm_ring\">docs#linear_ordered_comm_ring</a> over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_comm_ring\">docs#ordered_comm_ring</a>, as <code>test2</code> below shows (you may delete the first two instances when testing the last two).</li>\n<li>This is currently making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/surreal.dyadic_map\">docs#surreal.dyadic_map</a> <code>noncomputable</code> in my surreal multiplication branch. I tried to lower the priority of the <a href=\"https://github.com/leanprover-community/mathlib/compare/surreal_mul_symm'#diff-cfb19983c79209e00ac093e670e2db956ca48e00238011a5854479250cbaec67R740\"><code>linear_ordered_comm_ring</code> instance</a>, but to no avail.</li>\n<li>\n<p>What could be the cause of these behaviors? For reference:<br>\n<code>linear_ordered_add_comm_group extends ordered_add_comm_group α, linear_order α</code><br>\n<code>linear_ordered_ring extends ordered_ring α, linear_order α, nontrivial α</code><br>\n<code>linear_ordered_comm_ring extends linear_ordered_ring α, comm_monoid α</code></p>\n</li>\n<li>\n<p>Can we make Lean always prefer the computable instance when it's available?</p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_rel</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">unit.ordered_add_comm_group</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span> <span class=\"c\">/-</span><span class=\"cm\"> OK -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_rel</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">unit.ordered_comm_ring</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n<span class=\"c\">/-</span><span class=\"cm\"> missing 'noncomputable' modifier, definition 'test'</span>\n<span class=\"cm\">depends on 'unit.linear_ordered_comm_ring' -/</span>\n</code></pre></div>",
        "id": 285488117,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654752709
    },
    {
        "content": "<p>Adding intermediate instances (like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_ring\">docs#comm_ring</a>) would fix this</p>",
        "id": 285492400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654756714
    },
    {
        "content": "<p>Adding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_ring\">docs#comm_ring</a> doesn't fix it (tested for surreals), unfortuantely.</p>",
        "id": 285493133,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654757493
    },
    {
        "content": "<p>adding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group\">docs#add_comm_group</a> does fix it though</p>",
        "id": 285493369,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654757657
    },
    {
        "content": "<p>You can find out exactly what instance you need by looking at the path from <code>linear_ordered_comm_ring</code> to <code>has_add</code></p>",
        "id": 285495176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654759109
    },
    {
        "content": "<p>And adding an instance for the last step that is still computable</p>",
        "id": 285495198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654759124
    },
    {
        "content": "<p>We do this already for <code>real</code> and <code>complex</code></p>",
        "id": 285495219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654759137
    },
    {
        "content": "<p>Hmm, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_ring\">docs#ordered_ring</a> should also work, let me try</p>",
        "id": 285495428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654759283
    },
    {
        "content": "<p>It's cumbersome to move those fields around, so maybe I'll not try it for surreals, since everything works right now. <code>ordered_comm_ring</code> is the largest class that remains computable, and it's a shame that we have to break it down further. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/surreal.dyadic_map\">docs#surreal.dyadic_map</a> should only require <code>add_zero_class</code> for the <code>add_monoid_hom</code>, and here are the paths from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_comm_ring\">docs#ordered_comm_ring</a> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_zero_class\">docs#add_zero_class</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ordered_comm_ring</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"n\">ordered_ring</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">ring</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add_comm_group</span> <span class=\"bp\">-&gt;</span>\n      <span class=\"n\">add_group</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sub_neg_monoid</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add_monoid</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add_zero_class</span>\n      <span class=\"n\">add_comm_monoid</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add_monoid</span>\n    <span class=\"n\">ordered_add_comm_group</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add_comm_group</span>\n  <span class=\"n\">comm_ring</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 285497042,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654760354
    },
    {
        "content": "<p>and from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_comm_ring\">docs#linear_ordered_comm_ring</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ordered_ring</span>\n</code></pre></div>",
        "id": 285497346,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654760562
    },
    {
        "content": "<p>It seems to me the chain from <code>ordered_comm_ring</code> is shorter, no idea why Lean first finds <code>linear_ordered_comm_ring</code>.</p>",
        "id": 285497422,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654760605
    },
    {
        "content": "<p>Lean starts from the right and works left; it takes the highest priority option at every step, breaking ties by recently. It doesn't optimize for depth in any way</p>",
        "id": 285497778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654760848
    }
]