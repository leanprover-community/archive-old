[
    {
        "content": "<p>In the implementation notes of <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/congruence.html\">https://leanprover-community.github.io/mathlib_docs/group_theory/congruence.html</a>, there's some vague note that if you try to do it in a nested way, \"the recursor generated does not work\".</p>\n<p>I've tried to understand this comment by means of assuming it is incorrect, in <a href=\"https://github.com/leanprover-community/mathlib/issues/4158\">#4158</a>. As expected, I've run into something I'm not sure how to prove with that structure. Would anyone be able to take a look and rule whether it looks possible, or if I've missed something obvious?</p>",
        "id": 210151159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600186390
    },
    {
        "content": "<p>Nested inductives are supported by reducing them to normal inductives. However the automatically generated recursors are not strong enough to actually characterise the type without unfolding the definitions. <code>nested inductives</code> are basically useless in Lean for this reason.</p>",
        "id": 210163540,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1600191961
    },
    {
        "content": "<p>As a quick example, take the following nested inductive. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n</code></pre></div>\n\n\n<p>This will be implemented as something a bit like this where <code>T' ff</code> is isomorphic to <code>list T</code> and <code>T' tt</code> is isomorphic to <code>T</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">T&#39;</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">T&#39;</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">T&#39;</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">T&#39;</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">T&#39;</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">T&#39;</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">T&#39;</span> <span class=\"n\">tt</span>\n</code></pre></div>\n\n\n<p>The recursor for the nested inductive <code>T</code> should look something like the recursor for <code>T'</code> I think, i.e. you should be able to induct on the list at the same time. However this is not what it does look like.</p>",
        "id": 210163981,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1600192129
    },
    {
        "content": "<p>So you should always use something like <code>T'</code> instead of the nested inductive, and this is basically how <code>con_gen</code> is already implemented.</p>",
        "id": 210164296,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1600192265
    },
    {
        "content": "<p>Is obtaining the stronger recursor on the nested type something that needs to be done in lean core, or can it be done within mathlib?</p>",
        "id": 210174099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600196458
    },
    {
        "content": "<p>The code for nested inductives is in core.</p>",
        "id": 210175314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1600196990
    },
    {
        "content": "<p>As lean or C++?</p>",
        "id": 210180587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600199250
    },
    {
        "content": "<p>Looks like <code>rec_on</code> comes from <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/library/constructions/rec_on.cpp\">https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/library/constructions/rec_on.cpp</a>, I can't work out where <code>rec</code> comes from.</p>",
        "id": 210182930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600200299
    },
    {
        "content": "<p>The recursor is probably in <code>kernel/inductive/inductive.cpp</code>. The mutual/nested inductive stuff might be in <code>library/inductive_compiler/ginductive*.cpp</code>.</p>",
        "id": 210187399,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600202402
    },
    {
        "content": "<p>Is it deliberate that for <code>T</code> above, only <code>rec</code> and not <code>rec_on</code> is generated?</p>",
        "id": 210188289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600202864
    },
    {
        "content": "<p>I don't see why that should be the case, but maybe there's a reason. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is probably the one most likely to know the answer. (Actually, now that I think about it, this might break one of my tactics...)</p>",
        "id": 210190764,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600204017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/Nesting.20eqv_gen.20inside.20con_gen/near/210190764\">said</a>:</p>\n<blockquote>\n<p>I don't see why that should be the case, but maybe there's a reason. <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> is probably the one most likely to know the answer. (Actually, now that I think about it, this might break one of my tactics...)</p>\n</blockquote>\n<p>This is interesting.  I can guess a few possible reasons:</p>\n<ul>\n<li>You should <em>never</em> use nested inductives (unless you're in meta land)</li>\n<li>If you still use nested inductives, you're supposed to use well-founded recursion.  That's why there is a <code>cases_on</code> and no <code>rec_on</code>.</li>\n<li>Most importantly, this is going to change in Lean 4, so don't spend too much time on nested inductives in Lean 3.</li>\n</ul>",
        "id": 210711272,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600675528
    },
    {
        "content": "<p>My understanding was that the difference between <code>.rec</code> and <code>.rec_on</code> was only argument order, so I don't understand why the former would be present but not the latter, as is the case for the <code>T</code> type above.</p>",
        "id": 210801515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600723156
    }
]