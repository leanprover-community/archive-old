[
    {
        "content": "<p>I understand that <code>Prop</code> can't have <code>is_repr</code>, because it's a <code>Type</code> typeclass. However, it's slowly getting frustrating to have to write <code>#eval if (prop) then 123 else 0</code>; is there some chance that there could be a hack built-into the pretty-printer itself? or is it a lot of work?</p>",
        "id": 243767574,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624531619
    },
    {
        "content": "<p>Is there a reason that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_repr\">docs#has_repr</a> (EDIT: that's the correct name, right?) can't be generalized to <code>Sort</code>?</p>",
        "id": 243767803,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624531782
    },
    {
        "content": "<p>(yep, oopsie!)</p>",
        "id": 243767905,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624531826
    },
    {
        "content": "<p>I assume there's a good reason, because there seems to always be a good reason to avoid <code>Sort</code>...</p>",
        "id": 243767920,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624531838
    },
    {
        "content": "<p>oh although reading more, it seems to be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_to_string\">docs#has_to_string</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_repr\">docs#has_repr</a>, but that's still <code>Type</code>-only</p>",
        "id": 243767995,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624531892
    },
    {
        "content": "<p>I'm not sure I understand: do you want an instance along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"s2\">\"true\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"false\"</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 243768133,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624531992
    },
    {
        "content": "<p>yeah essentially</p>",
        "id": 243768146,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624532003
    },
    {
        "content": "<p>Because this typechecks, apart from the issue that <code>p</code> does not have <code>[decidable p]</code></p>",
        "id": 243768153,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624532014
    },
    {
        "content": "<p><code>Prop : Type</code> after all</p>",
        "id": 243768224,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624532060
    },
    {
        "content": "<p>hmph yes; essentially my issue is that when I do something like <code>#eval 23121 \\| 2342345235</code>, the output is <code>#0</code> (and a warning)</p>",
        "id": 243768376,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624532163
    },
    {
        "content": "<p>Now that you say this though, I'm not sure how to fix that though</p>",
        "id": 243768394,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624532176
    },
    {
        "content": "<p>Well, the real issue here is that there is no definable map <code>f : Prop → string</code> that is not constant! Let's say WLOG that <code>f true = \"true\"</code> and <code>f false = \"false</code>\", then <code>propext</code> implies that <code>f p = \"true\"</code> iff <code>p</code> is true and <code>f p = \"false\"</code> otherwise. So <code>f</code> decides propositions correctly.</p>",
        "id": 243768489,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624532267
    },
    {
        "content": "<p>So the only way you can define a <code>has_repr</code> instance like you want is using partial maps, i.e. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 243768756,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624532429
    },
    {
        "content": "<p>You realize that every proposition is represented as <code>0</code> in the VM, no matter whether it is true or false?  meta doesn't let you get around that.</p>",
        "id": 243768906,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624532532
    },
    {
        "content": "<p>I understand why it outputs what it does, but if there's some non-classical <code>decidable</code> instance it could be a lot more helpful to just use that implicitly, is my point. But it seems a lot harder than I envisioned it when I first posted this, with what you guys are saying</p>",
        "id": 243769057,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624532657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/pp.20hack.20for.20.60.23eval.60.20on.20Props/near/243768906\">said</a>:</p>\n<blockquote>\n<p>You realize that every proposition is represented as <code>0</code> in the VM, no matter whether it is true or false?  meta doesn't let you get around that.</p>\n</blockquote>\n<p>I was just about to argue that Lean should not allow you to pattern-match on <code>Prop</code>s, so I am not surprised that all Props have the same representation :)</p>",
        "id": 243769241,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624532773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/pp.20hack.20for.20.60.23eval.60.20on.20Props/near/243769057\">said</a>:</p>\n<blockquote>\n<p>I understand why it outputs what it does, but if there's some non-classical <code>decidable</code> instance it could be a lot more helpful to just use that implicitly, is my point. But it seems a lot harder than I envisioned it when I first posted this, with what you guys are saying</p>\n</blockquote>\n<p>The proper hack is to check whether the term is a Prop in eval_cmd, and then add <code>to_bool</code> in that case.</p>",
        "id": 243769496,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624532967
    },
    {
        "content": "<p>(If I understand the source correctly, all <code>Sort</code>s have the same representation in the VM, right? Which makes sense for the same reason that all <code>Prop</code>s are the same.)</p>",
        "id": 243770451,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624533636
    },
    {
        "content": "<p>Eric, what would you want #eval to show?</p>",
        "id": 243777408,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624537801
    },
    {
        "content": "<p>some form of  true/false, I'm currently trying to learn some meta-code so I can code up the fix that Gabriel suggestsed</p>",
        "id": 243777536,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624537858
    },
    {
        "content": "<p>Then I would do example : 5 \\mid 25 := dec_trivial, and check if it compiles</p>",
        "id": 243777634,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624537918
    },
    {
        "content": "<p>Or, for some other Props, by slim_check</p>",
        "id": 243777693,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624537940
    },
    {
        "content": "<p>kernel computation is way slower though</p>",
        "id": 243777800,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624538013
    },
    {
        "content": "<p>The first would use the decidable instance available, or if it can't, one can write a norm_num plugin to do so</p>",
        "id": 243777803,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624538014
    },
    {
        "content": "<p>You can take a look at Mario's recent gcd, lcm, and coprime norm_num plugin PR, to see how to use VM computation to speed up proof construction</p>",
        "id": 243777922,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624538074
    }
]