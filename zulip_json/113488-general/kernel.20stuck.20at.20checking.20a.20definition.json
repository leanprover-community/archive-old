[
    {
        "content": "<p>I have a very weird behavior where everything seems to go right, but at the end of a definition the kernel seems to be stuck forever.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.hahn_banach</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.bounded</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.bochner_integration</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">bounded_continuous_function</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">normed_group.to_semi_normed_group</span>\n\n<span class=\"sd\">/-- Given a measure, there exists a continuous linear form on the space of all bounded functions</span>\n<span class=\"sd\">(not necessarily measurable) that coincides with the integral on bounded measurable functions. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">measure.linear_extension_to_bounded_functions</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">},</span>\n    <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">integrable_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">integrable.add</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">integrable.smul</span> <span class=\"n\">c</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">integral_add</span> <span class=\"n\">f.2</span> <span class=\"n\">g.2</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">integral_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"c1\">-- this line and the next line are here just to make sure that there is</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span>          <span class=\"c1\">-- a goal left after solving the main goal</span>\n    <span class=\"n\">apply</span> <span class=\"n\">linear_map.mk_continuous</span> <span class=\"n\">φp0</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">norm_integral_le_of_norm_le_const</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">filter.eventually_of_forall</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">bounded_continuous_function.norm_coe_le_norm</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- the main goal is solved, but if you solve the side goal with</span>\n    <span class=\"c1\">-- exact 1,</span>\n    <span class=\"c1\">-- then the kernel is stuck forever</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237952701,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620477348
    },
    {
        "content": "<p>Does closing the side goal with sorry also leave the kernel stuck?</p>",
        "id": 237952763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620477384
    },
    {
        "content": "<p>Yes</p>",
        "id": 237952776,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620477416
    },
    {
        "content": "<p>Since you seem to be in a measure theoretic mood, would you mind having a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/7437\">#7437</a>?</p>",
        "id": 237953131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620477809
    },
    {
        "content": "<p>Does replacing the <code>exact bounded_...</code> with sorry also stick the kernel?</p>",
        "id": 237953145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620477841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.hahn_banach</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.bounded</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.bochner_integration</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">bounded_continuous_function</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">normed_group.to_semi_normed_group</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">measure.linear_extension_to_bounded_functions</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">},</span>\n    <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.mk_continuous</span> <span class=\"n\">φp0</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>also gets stuck (and eventually results in a deterministic timeout)</p>",
        "id": 237953743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620478335
    },
    {
        "content": "<p>If you <code>set_option trace.class_instances true</code> you can see stuff going crazy</p>",
        "id": 237953804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620478423
    },
    {
        "content": "<p>It's easy to get waylaid here by the fact the kernel doesn't complain until you actually close all the goals (even with sorry)</p>",
        "id": 237954017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620478653
    },
    {
        "content": "<p>Oh I don't think the issue is trace.class_instances.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.hahn_banach</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.bounded</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.bochner_integration</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">bounded_continuous_function</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">normed_group.to_semi_normed_group</span>\n\n<span class=\"c1\">-- succeeds in a second or two</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map.mk_continuous</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- loops</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">measure.linear_extension_to_bounded_functions</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.mk_continuous</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237954582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620479128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map.mk_continuous</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- also works</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">measure.linear_extension_to_bounded_functions</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">μ</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So there's a potential workaround</p>",
        "id": 237954786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620479289
    },
    {
        "content": "<p>Problem magically goes away if you pull out all the auxiliary defs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.hahn_banach</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.bounded</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.bochner_integration</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">bounded_continuous_function</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">normed_group.to_semi_normed_group</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_p</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">},</span>\n    <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">integrable_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">integrable.add</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">integrable.smul</span> <span class=\"n\">c</span> <span class=\"n\">hf</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_φp0</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo_p</span> <span class=\"n\">μ</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">integral_add</span> <span class=\"n\">f.2</span> <span class=\"n\">g.2</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">integral_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_φp</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo_p</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">linear_map.mk_continuous</span> <span class=\"o\">(</span><span class=\"n\">foo_φp0</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">norm_integral_le_of_norm_le_const</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">filter.eventually_of_forall</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">bounded_continuous_function.norm_coe_le_norm</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Given a measure, there exists a continuous linear form on the space of all bounded functions</span>\n<span class=\"sd\">(not necessarily measurable) that coincides with the integral on bounded measurable functions. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">measure.linear_extension_to_bounded_functions</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo_p</span> <span class=\"n\">μ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">foo_φp0</span> <span class=\"n\">μ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">φp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">foo_φp</span> <span class=\"n\">μ</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237955235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620479754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/kernel.20stuck.20at.20checking.20a.20definition/near/237955235\">said</a>:</p>\n<blockquote>\n<p>Problem magically goes away if you pull out all the auxiliary defs:</p>\n</blockquote>\n<p>Thanks a lot for investigating this. Indeed, this solves my issue completely. I'd like to understand better what is going on, but I'll take the message that defining complicated objects inside proofs is broken, and that they should be defined separately.</p>",
        "id": 237962410,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620486513
    },
    {
        "content": "<p>Yes I am also completely bewildered about why your code hangs Lean, this we didn't solve at all.</p>",
        "id": 237965767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620489438
    }
]