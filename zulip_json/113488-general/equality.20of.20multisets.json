[
    {
        "content": "<p>How is one supposed to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">([</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 168493764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560939233
    },
    {
        "content": "<p><code>by simp [insert_comm]</code>?</p>",
        "id": 168493836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560939285
    },
    {
        "content": "<p>alternatively, apply <code>quotient.sound</code> and then use <code>perm.swap</code> and friends</p>",
        "id": 168493921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560939375
    },
    {
        "content": "<p>Aha... ok.</p>",
        "id": 168494028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560939540
    },
    {
        "content": "<p>I didn't know about <code>insert_comm</code>.</p>",
        "id": 168494041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560939555
    },
    {
        "content": "<p>I actually just guessed it existed</p>",
        "id": 168494068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560939597
    },
    {
        "content": "<p>thanks yesterday mario</p>",
        "id": 168494118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560939611
    },
    {
        "content": "<p>When I look at files like <code>multiset.lean</code> I honestly think \"golly, I'm glad I didn't take up Lean about 18 months earlier than I did\"</p>",
        "id": 168494415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560940015
    },
    {
        "content": "<p>Those files are so huge, and so complete, and because everything is a quotient the proofs are often extremely cryptic and would be very hard indeed for a beginner to generate.</p>",
        "id": 168494432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560940049
    },
    {
        "content": "<p>maybe we should write a tactic that will sort the elements</p>",
        "id": 168494493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560940107
    },
    {
        "content": "<p>there is a function for that, <code>multiset.sort</code></p>",
        "id": 168494801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560940493
    },
    {
        "content": "<p>as for sorting it syntactically, that's what <code>simp</code> does</p>",
        "id": 168494813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560940511
    }
]